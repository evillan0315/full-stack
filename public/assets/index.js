const ae = {
  context: void 0,
  registry: void 0,
  effects: void 0,
  done: !1,
  getContextId() {
    return qm(this.context.count);
  },
  getNextContextId() {
    return qm(this.context.count++);
  }
};
function qm(i) {
  const e = String(i), t = e.length - 1;
  return ae.context.id + (t ? String.fromCharCode(96 + t) : "") + e;
}
function ro(i) {
  ae.context = i;
}
const M$ = !1, q$ = (i, e) => i === e, oh = Symbol("solid-proxy"), XS = typeof Proxy == "function", _$ = Symbol("solid-track"), lh = {
  equals: q$
};
let LS = WS;
const Oi = 1, Mo = 2, BS = {
  owned: null,
  cleanups: null,
  context: null,
  owner: null
}, Vc = {};
var ce = null;
let V = null, X$ = null, ge = null, Ot = null, ft = null, nc = 0;
function dr(i, e) {
  const t = ge, n = ce, r = i.length === 0, s = e === void 0 ? n : e, o = r ? BS : {
    owned: null,
    cleanups: null,
    context: s ? s.context : null,
    owner: s
  }, l = r ? i : () => i(() => Je(() => In(o)));
  ce = o, ge = null;
  try {
    return Wt(l, !0);
  } finally {
    ge = t, ce = n;
  }
}
function ee(i, e) {
  e = e ? Object.assign({}, lh, e) : lh;
  const t = {
    value: i,
    observers: null,
    observerSlots: null,
    comparator: e.equals || void 0
  }, n = (r) => (typeof r == "function" && (V && V.running && V.sources.has(t) ? r = r(t.tValue) : r = r(t.value)), VS(t, r));
  return [DS.bind(t), n];
}
function ah(i, e, t) {
  const n = oc(i, e, !0, Oi);
  Cs(n);
}
function De(i, e, t) {
  const n = oc(i, e, !1, Oi);
  Cs(n);
}
function pi(i, e, t) {
  LS = z$;
  const n = oc(i, e, !1, Oi), r = br && Ts(br);
  r && (n.suspense = r), n.user = !0, ft ? ft.push(n) : Cs(n);
}
function Ee(i, e, t) {
  t = t ? Object.assign({}, lh, t) : lh;
  const n = oc(i, e, !0, 0);
  return n.observers = null, n.observerSlots = null, n.comparator = t.equals || void 0, Cs(n), DS.bind(n);
}
function L$(i) {
  return i && typeof i == "object" && "then" in i;
}
function B$(i, e, t) {
  let n, r, s;
  typeof e == "function" ? (n = i, r = e, s = {}) : (n = !0, r = i, s = e || {});
  let o = null, l = Vc, a = null, h = !1, c = !1, f = "initialValue" in s, u = typeof n == "function" && Ee(n);
  const d = /* @__PURE__ */ new Set(), [O, p] = (s.storage || ee)(s.initialValue), [m, g] = ee(void 0), [S, x] = ee(void 0, {
    equals: !1
  }), [k, w] = ee(f ? "ready" : "unresolved");
  ae.context && (a = ae.getNextContextId(), s.ssrLoadFrom === "initial" ? l = s.initialValue : ae.load && ae.has(a) && (l = ae.load(a)));
  function b($, v, X, E) {
    return o === $ && (o = null, E !== void 0 && (f = !0), ($ === l || v === l) && s.onHydrated && queueMicrotask(
      () => s.onHydrated(E, {
        value: v
      })
    ), l = Vc, V && $ && h ? (V.promises.delete($), h = !1, Wt(() => {
      V.running = !0, Q(v, X);
    }, !1)) : Q(v, X)), v;
  }
  function Q($, v) {
    Wt(() => {
      v === void 0 && p(() => $), w(v !== void 0 ? "errored" : f ? "ready" : "unresolved"), g(v);
      for (const X of d.keys()) X.decrement();
      d.clear();
    }, !1);
  }
  function R() {
    const $ = br && Ts(br), v = O(), X = m();
    if (X !== void 0 && !o) throw X;
    return ge && !ge.user && $ && ah(() => {
      S(), o && ($.resolved && V && h ? V.promises.add(o) : d.has($) || ($.increment(), d.add($)));
    }), v;
  }
  function A($ = !0) {
    if ($ !== !1 && c) return;
    c = !1;
    const v = u ? u() : n;
    if (h = V && V.running, v == null || v === !1) {
      b(o, Je(O));
      return;
    }
    V && o && V.promises.delete(o);
    const X = l !== Vc ? l : Je(
      () => r(v, {
        value: O(),
        refetching: $
      })
    );
    return L$(X) ? (o = X, "value" in X ? (X.status === "success" ? b(o, X.value, void 0, v) : b(o, void 0, Ou(X.value), v), X) : (c = !0, queueMicrotask(() => c = !1), Wt(() => {
      w(f ? "refreshing" : "pending"), x();
    }, !1), X.then(
      (E) => b(X, E, void 0, v),
      (E) => b(X, void 0, Ou(E), v)
    ))) : (b(o, X, void 0, v), X);
  }
  Object.defineProperties(R, {
    state: {
      get: () => k()
    },
    error: {
      get: () => m()
    },
    loading: {
      get() {
        const $ = k();
        return $ === "pending" || $ === "refreshing";
      }
    },
    latest: {
      get() {
        if (!f) return R();
        const $ = m();
        if ($ && !o) throw $;
        return O();
      }
    }
  });
  let _ = ce;
  return u ? ah(() => (_ = ce, A(!1))) : A(!1), [
    R,
    {
      refetch: ($) => JO(_, () => A($)),
      mutate: p
    }
  ];
}
function ZS(i) {
  return Wt(i, !1);
}
function Je(i) {
  if (ge === null) return i();
  const e = ge;
  ge = null;
  try {
    return i();
  } finally {
    ge = e;
  }
}
function Gr(i, e, t) {
  const n = Array.isArray(i);
  let r, s = t && t.defer;
  return (o) => {
    let l;
    if (n) {
      l = Array(i.length);
      for (let h = 0; h < i.length; h++) l[h] = i[h]();
    } else l = i();
    if (s)
      return s = !1, o;
    const a = Je(() => e(l, r, o));
    return r = l, a;
  };
}
function ml(i) {
  pi(() => Je(i));
}
function ji(i) {
  return ce === null || (ce.cleanups === null ? ce.cleanups = [i] : ce.cleanups.push(i)), i;
}
function rc() {
  return ce;
}
function JO(i, e) {
  const t = ce, n = ge;
  ce = i, ge = null;
  try {
    return Wt(e, !0);
  } catch (r) {
    ep(r);
  } finally {
    ce = t, ge = n;
  }
}
function Z$(i) {
  if (V && V.running)
    return i(), V.done;
  const e = ge, t = ce;
  return Promise.resolve().then(() => {
    ge = e, ce = t;
    let n;
    return br && (n = V || (V = {
      sources: /* @__PURE__ */ new Set(),
      effects: [],
      promises: /* @__PURE__ */ new Set(),
      disposed: /* @__PURE__ */ new Set(),
      queue: /* @__PURE__ */ new Set(),
      running: !0
    }), n.done || (n.done = new Promise((r) => n.resolve = r)), n.running = !0), Wt(i, !1), ge = ce = null, n ? n.done : void 0;
  });
}
const [EN, _m] = /* @__PURE__ */ ee(!1);
function D$(i) {
  ft.push.apply(ft, i), i.length = 0;
}
function gl(i, e) {
  const t = Symbol("context");
  return {
    id: t,
    Provider: I$(t),
    defaultValue: i
  };
}
function Ts(i) {
  let e;
  return ce && ce.context && (e = ce.context[i.id]) !== void 0 ? e : i.defaultValue;
}
function sc(i) {
  const e = Ee(i), t = Ee(() => pu(e()));
  return t.toArray = () => {
    const n = t();
    return Array.isArray(n) ? n : n != null ? [n] : [];
  }, t;
}
let br;
function V$() {
  return br || (br = gl());
}
function DS() {
  const i = V && V.running;
  if (this.sources && (i ? this.tState : this.state))
    if ((i ? this.tState : this.state) === Oi) Cs(this);
    else {
      const e = Ot;
      Ot = null, Wt(() => ch(this), !1), Ot = e;
    }
  if (ge) {
    const e = this.observers ? this.observers.length : 0;
    ge.sources ? (ge.sources.push(this), ge.sourceSlots.push(e)) : (ge.sources = [this], ge.sourceSlots = [e]), this.observers ? (this.observers.push(ge), this.observerSlots.push(ge.sources.length - 1)) : (this.observers = [ge], this.observerSlots = [ge.sources.length - 1]);
  }
  return i && V.sources.has(this) ? this.tValue : this.value;
}
function VS(i, e, t) {
  let n = V && V.running && V.sources.has(i) ? i.tValue : i.value;
  if (!i.comparator || !i.comparator(n, e)) {
    if (V) {
      const r = V.running;
      (r || !t && V.sources.has(i)) && (V.sources.add(i), i.tValue = e), r || (i.value = e);
    } else i.value = e;
    i.observers && i.observers.length && Wt(() => {
      for (let r = 0; r < i.observers.length; r += 1) {
        const s = i.observers[r], o = V && V.running;
        o && V.disposed.has(s) || ((o ? !s.tState : !s.state) && (s.pure ? Ot.push(s) : ft.push(s), s.observers && zS(s)), o ? s.tState = Oi : s.state = Oi);
      }
      if (Ot.length > 1e6)
        throw Ot = [], new Error();
    }, !1);
  }
  return e;
}
function Cs(i) {
  if (!i.fn) return;
  In(i);
  const e = nc;
  Xm(
    i,
    V && V.running && V.sources.has(i) ? i.tValue : i.value,
    e
  ), V && !V.running && V.sources.has(i) && queueMicrotask(() => {
    Wt(() => {
      V && (V.running = !0), ge = ce = i, Xm(i, i.tValue, e), ge = ce = null;
    }, !1);
  });
}
function Xm(i, e, t) {
  let n;
  const r = ce, s = ge;
  ge = ce = i;
  try {
    n = i.fn(e);
  } catch (o) {
    return i.pure && (V && V.running ? (i.tState = Oi, i.tOwned && i.tOwned.forEach(In), i.tOwned = void 0) : (i.state = Oi, i.owned && i.owned.forEach(In), i.owned = null)), i.updatedAt = t + 1, ep(o);
  } finally {
    ge = s, ce = r;
  }
  (!i.updatedAt || i.updatedAt <= t) && (i.updatedAt != null && "observers" in i ? VS(i, n, !0) : V && V.running && i.pure ? (V.sources.add(i), i.tValue = n) : i.value = n, i.updatedAt = t);
}
function oc(i, e, t, n = Oi, r) {
  const s = {
    fn: i,
    state: n,
    updatedAt: null,
    owned: null,
    sources: null,
    sourceSlots: null,
    cleanups: null,
    value: e,
    owner: ce,
    context: ce ? ce.context : null,
    pure: t
  };
  return V && V.running && (s.state = 0, s.tState = n), ce === null || ce !== BS && (V && V.running && ce.pure ? ce.tOwned ? ce.tOwned.push(s) : ce.tOwned = [s] : ce.owned ? ce.owned.push(s) : ce.owned = [s]), s;
}
function hh(i) {
  const e = V && V.running;
  if ((e ? i.tState : i.state) === 0) return;
  if ((e ? i.tState : i.state) === Mo) return ch(i);
  if (i.suspense && Je(i.suspense.inFallback)) return i.suspense.effects.push(i);
  const t = [i];
  for (; (i = i.owner) && (!i.updatedAt || i.updatedAt < nc); ) {
    if (e && V.disposed.has(i)) return;
    (e ? i.tState : i.state) && t.push(i);
  }
  for (let n = t.length - 1; n >= 0; n--) {
    if (i = t[n], e) {
      let r = i, s = t[n + 1];
      for (; (r = r.owner) && r !== s; )
        if (V.disposed.has(r)) return;
    }
    if ((e ? i.tState : i.state) === Oi)
      Cs(i);
    else if ((e ? i.tState : i.state) === Mo) {
      const r = Ot;
      Ot = null, Wt(() => ch(i, t[0]), !1), Ot = r;
    }
  }
}
function Wt(i, e) {
  if (Ot) return i();
  let t = !1;
  e || (Ot = []), ft ? t = !0 : ft = [], nc++;
  try {
    const n = i();
    return W$(t), n;
  } catch (n) {
    t || (ft = null), Ot = null, ep(n);
  }
}
function W$(i) {
  if (Ot && (WS(Ot), Ot = null), i) return;
  let e;
  if (V) {
    if (!V.promises.size && !V.queue.size) {
      const n = V.sources, r = V.disposed;
      ft.push.apply(ft, V.effects), e = V.resolve;
      for (const s of ft)
        "tState" in s && (s.state = s.tState), delete s.tState;
      V = null, Wt(() => {
        for (const s of r) In(s);
        for (const s of n) {
          if (s.value = s.tValue, s.owned)
            for (let o = 0, l = s.owned.length; o < l; o++) In(s.owned[o]);
          s.tOwned && (s.owned = s.tOwned), delete s.tValue, delete s.tOwned, s.tState = 0;
        }
        _m(!1);
      }, !1);
    } else if (V.running) {
      V.running = !1, V.effects.push.apply(V.effects, ft), ft = null, _m(!0);
      return;
    }
  }
  const t = ft;
  ft = null, t.length && Wt(() => LS(t), !1), e && e();
}
function WS(i) {
  for (let e = 0; e < i.length; e++) hh(i[e]);
}
function z$(i) {
  let e, t = 0;
  for (e = 0; e < i.length; e++) {
    const n = i[e];
    n.user ? i[t++] = n : hh(n);
  }
  if (ae.context) {
    if (ae.count) {
      ae.effects || (ae.effects = []), ae.effects.push(...i.slice(0, t));
      return;
    }
    ro();
  }
  for (ae.effects && (ae.done || !ae.count) && (i = [...ae.effects, ...i], t += ae.effects.length, delete ae.effects), e = 0; e < t; e++) hh(i[e]);
}
function ch(i, e) {
  const t = V && V.running;
  t ? i.tState = 0 : i.state = 0;
  for (let n = 0; n < i.sources.length; n += 1) {
    const r = i.sources[n];
    if (r.sources) {
      const s = t ? r.tState : r.state;
      s === Oi ? r !== e && (!r.updatedAt || r.updatedAt < nc) && hh(r) : s === Mo && ch(r, e);
    }
  }
}
function zS(i) {
  const e = V && V.running;
  for (let t = 0; t < i.observers.length; t += 1) {
    const n = i.observers[t];
    (e ? !n.tState : !n.state) && (e ? n.tState = Mo : n.state = Mo, n.pure ? Ot.push(n) : ft.push(n), n.observers && zS(n));
  }
}
function In(i) {
  let e;
  if (i.sources)
    for (; i.sources.length; ) {
      const t = i.sources.pop(), n = i.sourceSlots.pop(), r = t.observers;
      if (r && r.length) {
        const s = r.pop(), o = t.observerSlots.pop();
        n < r.length && (s.sourceSlots[o] = n, r[n] = s, t.observerSlots[n] = o);
      }
    }
  if (i.tOwned) {
    for (e = i.tOwned.length - 1; e >= 0; e--) In(i.tOwned[e]);
    delete i.tOwned;
  }
  if (V && V.running && i.pure)
    IS(i, !0);
  else if (i.owned) {
    for (e = i.owned.length - 1; e >= 0; e--) In(i.owned[e]);
    i.owned = null;
  }
  if (i.cleanups) {
    for (e = i.cleanups.length - 1; e >= 0; e--) i.cleanups[e]();
    i.cleanups = null;
  }
  V && V.running ? i.tState = 0 : i.state = 0;
}
function IS(i, e) {
  if (e || (i.tState = 0, V.disposed.add(i)), i.owned)
    for (let t = 0; t < i.owned.length; t++) IS(i.owned[t]);
}
function Ou(i) {
  return i instanceof Error ? i : new Error(typeof i == "string" ? i : "Unknown error", {
    cause: i
  });
}
function ep(i, e = ce) {
  throw Ou(i);
}
function pu(i) {
  if (typeof i == "function" && !i.length) return pu(i());
  if (Array.isArray(i)) {
    const e = [];
    for (let t = 0; t < i.length; t++) {
      const n = pu(i[t]);
      Array.isArray(n) ? e.push.apply(e, n) : e.push(n);
    }
    return e;
  }
  return i;
}
function I$(i, e) {
  return function(n) {
    let r;
    return De(
      () => r = Je(() => (ce.context = {
        ...ce.context,
        [i]: n.value
      }, sc(() => n.children))),
      void 0
    ), r;
  };
}
const N$ = Symbol("fallback");
function Lm(i) {
  for (let e = 0; e < i.length; e++) i[e]();
}
function j$(i, e, t = {}) {
  let n = [], r = [], s = [], o = 0, l = e.length > 1 ? [] : null;
  return ji(() => Lm(s)), () => {
    let a = i() || [], h = a.length, c, f;
    return a[_$], Je(() => {
      let d, O, p, m, g, S, x, k, w;
      if (h === 0)
        o !== 0 && (Lm(s), s = [], n = [], r = [], o = 0, l && (l = [])), t.fallback && (n = [N$], r[0] = dr((b) => (s[0] = b, t.fallback())), o = 1);
      else if (o === 0) {
        for (r = new Array(h), f = 0; f < h; f++)
          n[f] = a[f], r[f] = dr(u);
        o = h;
      } else {
        for (p = new Array(h), m = new Array(h), l && (g = new Array(h)), S = 0, x = Math.min(o, h); S < x && n[S] === a[S]; S++) ;
        for (x = o - 1, k = h - 1; x >= S && k >= S && n[x] === a[k]; x--, k--)
          p[k] = r[x], m[k] = s[x], l && (g[k] = l[x]);
        for (d = /* @__PURE__ */ new Map(), O = new Array(k + 1), f = k; f >= S; f--)
          w = a[f], c = d.get(w), O[f] = c === void 0 ? -1 : c, d.set(w, f);
        for (c = S; c <= x; c++)
          w = n[c], f = d.get(w), f !== void 0 && f !== -1 ? (p[f] = r[c], m[f] = s[c], l && (g[f] = l[c]), f = O[f], d.set(w, f)) : s[c]();
        for (f = S; f < h; f++)
          f in p ? (r[f] = p[f], s[f] = m[f], l && (l[f] = g[f], l[f](f))) : r[f] = dr(u);
        r = r.slice(0, o = h), n = a.slice(0);
      }
      return r;
    });
    function u(d) {
      if (s[f] = d, l) {
        const [O, p] = ee(f);
        return l[f] = p, e(a[f], O);
      }
      return e(a[f]);
    }
  };
}
function D(i, e) {
  return Je(() => i(e || {}));
}
function Xl() {
  return !0;
}
const mu = {
  get(i, e, t) {
    return e === oh ? t : i.get(e);
  },
  has(i, e) {
    return e === oh ? !0 : i.has(e);
  },
  set: Xl,
  deleteProperty: Xl,
  getOwnPropertyDescriptor(i, e) {
    return {
      configurable: !0,
      enumerable: !0,
      get() {
        return i.get(e);
      },
      set: Xl,
      deleteProperty: Xl
    };
  },
  ownKeys(i) {
    return i.keys();
  }
};
function Wc(i) {
  return (i = typeof i == "function" ? i() : i) ? i : {};
}
function U$() {
  for (let i = 0, e = this.length; i < e; ++i) {
    const t = this[i]();
    if (t !== void 0) return t;
  }
}
function tp(...i) {
  let e = !1;
  for (let o = 0; o < i.length; o++) {
    const l = i[o];
    e = e || !!l && oh in l, i[o] = typeof l == "function" ? (e = !0, Ee(l)) : l;
  }
  if (XS && e)
    return new Proxy(
      {
        get(o) {
          for (let l = i.length - 1; l >= 0; l--) {
            const a = Wc(i[l])[o];
            if (a !== void 0) return a;
          }
        },
        has(o) {
          for (let l = i.length - 1; l >= 0; l--)
            if (o in Wc(i[l])) return !0;
          return !1;
        },
        keys() {
          const o = [];
          for (let l = 0; l < i.length; l++)
            o.push(...Object.keys(Wc(i[l])));
          return [...new Set(o)];
        }
      },
      mu
    );
  const t = {}, n = /* @__PURE__ */ Object.create(null);
  for (let o = i.length - 1; o >= 0; o--) {
    const l = i[o];
    if (!l) continue;
    const a = Object.getOwnPropertyNames(l);
    for (let h = a.length - 1; h >= 0; h--) {
      const c = a[h];
      if (c === "__proto__" || c === "constructor") continue;
      const f = Object.getOwnPropertyDescriptor(l, c);
      if (!n[c])
        n[c] = f.get ? {
          enumerable: !0,
          configurable: !0,
          get: U$.bind(t[c] = [f.get.bind(l)])
        } : f.value !== void 0 ? f : void 0;
      else {
        const u = t[c];
        u && (f.get ? u.push(f.get.bind(l)) : f.value !== void 0 && u.push(() => f.value));
      }
    }
  }
  const r = {}, s = Object.keys(n);
  for (let o = s.length - 1; o >= 0; o--) {
    const l = s[o], a = n[l];
    a && a.get ? Object.defineProperty(r, l, a) : r[l] = a ? a.value : void 0;
  }
  return r;
}
function Y$(i, ...e) {
  if (XS && oh in i) {
    const r = new Set(e.length > 1 ? e.flat() : e[0]), s = e.map((o) => new Proxy(
      {
        get(l) {
          return o.includes(l) ? i[l] : void 0;
        },
        has(l) {
          return o.includes(l) && l in i;
        },
        keys() {
          return o.filter((l) => l in i);
        }
      },
      mu
    ));
    return s.push(
      new Proxy(
        {
          get(o) {
            return r.has(o) ? void 0 : i[o];
          },
          has(o) {
            return r.has(o) ? !1 : o in i;
          },
          keys() {
            return Object.keys(i).filter((o) => !r.has(o));
          }
        },
        mu
      )
    ), s;
  }
  const t = {}, n = e.map(() => ({}));
  for (const r of Object.getOwnPropertyNames(i)) {
    const s = Object.getOwnPropertyDescriptor(i, r), o = !s.get && !s.set && s.enumerable && s.writable && s.configurable;
    let l = !1, a = 0;
    for (const h of e)
      h.includes(r) && (l = !0, o ? n[a][r] = s.value : Object.defineProperty(n[a], r, s)), ++a;
    l || (o ? t[r] = s.value : Object.defineProperty(t, r, s));
  }
  return [...n, t];
}
let G$ = 0;
function F$() {
  return ae.context ? ae.getNextContextId() : `cl-${G$++}`;
}
const H$ = (i) => `Stale read from <${i}>.`;
function Bm(i) {
  const e = "fallback" in i && {
    fallback: () => i.fallback
  };
  return Ee(j$(() => i.each, i.children, e || void 0));
}
function cn(i) {
  const e = i.keyed, t = Ee(() => i.when, void 0, void 0), n = e ? t : Ee(t, void 0, {
    equals: (r, s) => !r == !s
  });
  return Ee(
    () => {
      const r = n();
      if (r) {
        const s = i.children;
        return typeof s == "function" && s.length > 0 ? Je(
          () => s(
            e ? r : () => {
              if (!Je(n)) throw H$("Show");
              return t();
            }
          )
        ) : s;
      }
      return i.fallback;
    },
    void 0,
    void 0
  );
}
const K$ = /* @__PURE__ */ gl();
function J$(i) {
  let e = 0, t, n, r, s, o;
  const [l, a] = ee(!1), h = V$(), c = {
    increment: () => {
      ++e === 1 && a(!0);
    },
    decrement: () => {
      --e === 0 && a(!1);
    },
    inFallback: l,
    effects: [],
    resolved: !1
  }, f = rc();
  if (ae.context && ae.load) {
    const O = ae.getContextId();
    let p = ae.load(O);
    if (p && (typeof p != "object" || p.status !== "success" ? r = p : ae.gather(O)), r && r !== "$$f") {
      const [m, g] = ee(void 0, {
        equals: !1
      });
      s = m, r.then(
        () => {
          if (ae.done) return g();
          ae.gather(O), ro(n), g(), ro();
        },
        (S) => {
          o = S, g();
        }
      );
    }
  }
  const u = Ts(K$);
  u && (t = u.register(c.inFallback));
  let d;
  return ji(() => d && d()), D(h.Provider, {
    value: c,
    get children() {
      return Ee(() => {
        if (o) throw o;
        if (n = ae.context, s)
          return s(), s = void 0;
        n && r === "$$f" && ro();
        const O = Ee(() => i.children);
        return Ee((p) => {
          const m = c.inFallback(), { showContent: g = !0, showFallback: S = !0 } = t ? t() : {};
          if ((!m || r && r !== "$$f") && g)
            return c.resolved = !0, d && d(), d = n = r = void 0, D$(c.effects), O();
          if (S)
            return d ? p : dr((x) => (d = x, n && (ro({
              id: n.id + "F",
              count: 0
            }), n = void 0), i.fallback), f);
        });
      });
    }
  });
}
const eT = [
  "allowfullscreen",
  "async",
  "autofocus",
  "autoplay",
  "checked",
  "controls",
  "default",
  "disabled",
  "formnovalidate",
  "hidden",
  "indeterminate",
  "inert",
  "ismap",
  "loop",
  "multiple",
  "muted",
  "nomodule",
  "novalidate",
  "open",
  "playsinline",
  "readonly",
  "required",
  "reversed",
  "seamless",
  "selected"
], tT = /* @__PURE__ */ new Set([
  "className",
  "value",
  "readOnly",
  "noValidate",
  "formNoValidate",
  "isMap",
  "noModule",
  "playsInline",
  ...eT
]), iT = /* @__PURE__ */ new Set([
  "innerHTML",
  "textContent",
  "innerText",
  "children"
]), nT = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(null), {
  className: "class",
  htmlFor: "for"
}), rT = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(null), {
  class: "className",
  novalidate: {
    $: "noValidate",
    FORM: 1
  },
  formnovalidate: {
    $: "formNoValidate",
    BUTTON: 1,
    INPUT: 1
  },
  ismap: {
    $: "isMap",
    IMG: 1
  },
  nomodule: {
    $: "noModule",
    SCRIPT: 1
  },
  playsinline: {
    $: "playsInline",
    VIDEO: 1
  },
  readonly: {
    $: "readOnly",
    INPUT: 1,
    TEXTAREA: 1
  }
});
function sT(i, e) {
  const t = rT[i];
  return typeof t == "object" ? t[e] ? t.$ : void 0 : t;
}
const oT = /* @__PURE__ */ new Set([
  "beforeinput",
  "click",
  "dblclick",
  "contextmenu",
  "focusin",
  "focusout",
  "input",
  "keydown",
  "keyup",
  "mousedown",
  "mousemove",
  "mouseout",
  "mouseover",
  "mouseup",
  "pointerdown",
  "pointermove",
  "pointerout",
  "pointerover",
  "pointerup",
  "touchend",
  "touchmove",
  "touchstart"
]), lT = {
  xlink: "http://www.w3.org/1999/xlink",
  xml: "http://www.w3.org/XML/1998/namespace"
}, xr = (i) => Ee(() => i());
function aT(i, e, t) {
  let n = t.length, r = e.length, s = n, o = 0, l = 0, a = e[r - 1].nextSibling, h = null;
  for (; o < r || l < s; ) {
    if (e[o] === t[l]) {
      o++, l++;
      continue;
    }
    for (; e[r - 1] === t[s - 1]; )
      r--, s--;
    if (r === o) {
      const c = s < n ? l ? t[l - 1].nextSibling : t[s - l] : a;
      for (; l < s; ) i.insertBefore(t[l++], c);
    } else if (s === l)
      for (; o < r; )
        (!h || !h.has(e[o])) && e[o].remove(), o++;
    else if (e[o] === t[s - 1] && t[l] === e[r - 1]) {
      const c = e[--r].nextSibling;
      i.insertBefore(t[l++], e[o++].nextSibling), i.insertBefore(t[--s], c), e[r] = t[s];
    } else {
      if (!h) {
        h = /* @__PURE__ */ new Map();
        let f = l;
        for (; f < s; ) h.set(t[f], f++);
      }
      const c = h.get(e[o]);
      if (c != null)
        if (l < c && c < s) {
          let f = o, u = 1, d;
          for (; ++f < r && f < s && !((d = h.get(e[f])) == null || d !== c + u); )
            u++;
          if (u > c - l) {
            const O = e[o];
            for (; l < c; ) i.insertBefore(t[l++], O);
          } else i.replaceChild(t[l++], e[o++]);
        } else o++;
      else e[o++].remove();
    }
  }
}
const Zm = "_$DX_DELEGATE";
function hT(i, e, t, n = {}) {
  let r;
  return dr((s) => {
    r = s, e === document ? i() : F(e, i(), e.firstChild ? null : void 0, t);
  }, n.owner), () => {
    r(), e.textContent = "";
  };
}
function J(i, e, t, n) {
  let r;
  const s = () => {
    const l = n ? document.createElementNS("http://www.w3.org/1998/Math/MathML", "template") : document.createElement("template");
    return l.innerHTML = i, t ? l.content.firstChild.firstChild : n ? l.firstChild : l.content.firstChild;
  }, o = e ? () => Je(() => document.importNode(r || (r = s()), !0)) : () => (r || (r = s())).cloneNode(!0);
  return o.cloneNode = o, o;
}
function Hi(i, e = window.document) {
  const t = e[Zm] || (e[Zm] = /* @__PURE__ */ new Set());
  for (let n = 0, r = i.length; n < r; n++) {
    const s = i[n];
    t.has(s) || (t.add(s), e.addEventListener(s, pT));
  }
}
function Le(i, e, t) {
  Rs(i) || (t == null ? i.removeAttribute(e) : i.setAttribute(e, t));
}
function cT(i, e, t, n) {
  Rs(i) || (n == null ? i.removeAttributeNS(e, t) : i.setAttributeNS(e, t, n));
}
function fT(i, e, t) {
  Rs(i) || (t ? i.setAttribute(e, "") : i.removeAttribute(e));
}
function Fr(i, e) {
  Rs(i) || (e == null ? i.removeAttribute("class") : i.className = e);
}
function Lr(i, e, t, n) {
  if (n)
    Array.isArray(t) ? (i[`$$${e}`] = t[0], i[`$$${e}Data`] = t[1]) : i[`$$${e}`] = t;
  else if (Array.isArray(t)) {
    const r = t[0];
    i.addEventListener(e, t[0] = (s) => r.call(i, t[1], s));
  } else i.addEventListener(e, t, typeof t != "function" && t);
}
function fh(i, e, t = {}) {
  const n = Object.keys(e || {}), r = Object.keys(t);
  let s, o;
  for (s = 0, o = r.length; s < o; s++) {
    const l = r[s];
    !l || l === "undefined" || e[l] || (Dm(i, l, !1), delete t[l]);
  }
  for (s = 0, o = n.length; s < o; s++) {
    const l = n[s], a = !!e[l];
    !l || l === "undefined" || t[l] === a || !a || (Dm(i, l, !0), t[l] = a);
  }
  return t;
}
function uT(i, e, t) {
  if (!e) return t ? Le(i, "style") : e;
  const n = i.style;
  if (typeof e == "string") return n.cssText = e;
  typeof t == "string" && (n.cssText = t = void 0), t || (t = {}), e || (e = {});
  let r, s;
  for (s in t)
    e[s] == null && n.removeProperty(s), delete t[s];
  for (s in e)
    r = e[s], r !== t[s] && (n.setProperty(s, r), t[s] = r);
  return t;
}
function NS(i, e = {}, t, n) {
  const r = {};
  return n || De(
    () => r.children = qo(i, e.children, r.children)
  ), De(() => typeof e.ref == "function" && Wi(e.ref, i)), De(() => dT(i, e, t, !0, r, !0)), r;
}
function Wi(i, e, t) {
  return Je(() => i(e, t));
}
function F(i, e, t, n) {
  if (t !== void 0 && !n && (n = []), typeof e != "function") return qo(i, e, n, t);
  De((r) => qo(i, e(), r, t), n);
}
function dT(i, e, t, n, r = {}, s = !1) {
  e || (e = {});
  for (const o in r)
    if (!(o in e)) {
      if (o === "children") continue;
      r[o] = Vm(i, o, null, r[o], t, s, e);
    }
  for (const o in e) {
    if (o === "children")
      continue;
    const l = e[o];
    r[o] = Vm(i, o, l, r[o], t, s, e);
  }
}
function Rs(i) {
  return !!ae.context && !ae.done && (!i || i.isConnected);
}
function OT(i) {
  return i.toLowerCase().replace(/-([a-z])/g, (e, t) => t.toUpperCase());
}
function Dm(i, e, t) {
  const n = e.trim().split(/\s+/);
  for (let r = 0, s = n.length; r < s; r++)
    i.classList.toggle(n[r], t);
}
function Vm(i, e, t, n, r, s, o) {
  let l, a, h, c, f;
  if (e === "style") return uT(i, t, n);
  if (e === "classList") return fh(i, t, n);
  if (t === n) return n;
  if (e === "ref")
    s || t(i);
  else if (e.slice(0, 3) === "on:") {
    const u = e.slice(3);
    n && i.removeEventListener(u, n, typeof n != "function" && n), t && i.addEventListener(u, t, typeof t != "function" && t);
  } else if (e.slice(0, 10) === "oncapture:") {
    const u = e.slice(10);
    n && i.removeEventListener(u, n, !0), t && i.addEventListener(u, t, !0);
  } else if (e.slice(0, 2) === "on") {
    const u = e.slice(2).toLowerCase(), d = oT.has(u);
    if (!d && n) {
      const O = Array.isArray(n) ? n[0] : n;
      i.removeEventListener(u, O);
    }
    (d || t) && (Lr(i, u, t, d), d && Hi([u]));
  } else if (e.slice(0, 5) === "attr:")
    Le(i, e.slice(5), t);
  else if (e.slice(0, 5) === "bool:")
    fT(i, e.slice(5), t);
  else if ((f = e.slice(0, 5) === "prop:") || (h = iT.has(e)) || !r && ((c = sT(e, i.tagName)) || (a = tT.has(e))) || (l = i.nodeName.includes("-") || "is" in o)) {
    if (f)
      e = e.slice(5), a = !0;
    else if (Rs(i)) return t;
    e === "class" || e === "className" ? Fr(i, t) : l && !a && !h ? i[OT(e)] = t : i[c || e] = t;
  } else {
    const u = r && e.indexOf(":") > -1 && lT[e.split(":")[0]];
    u ? cT(i, u, e, t) : Le(i, nT[e] || e, t);
  }
  return t;
}
function pT(i) {
  if (ae.registry && ae.events && ae.events.find(([a, h]) => h === i))
    return;
  let e = i.target;
  const t = `$$${i.type}`, n = i.target, r = i.currentTarget, s = (a) => Object.defineProperty(i, "target", {
    configurable: !0,
    value: a
  }), o = () => {
    const a = e[t];
    if (a && !e.disabled) {
      const h = e[`${t}Data`];
      if (h !== void 0 ? a.call(e, h, i) : a.call(e, i), i.cancelBubble) return;
    }
    return e.host && typeof e.host != "string" && !e.host._$host && e.contains(i.target) && s(e.host), !0;
  }, l = () => {
    for (; o() && (e = e._$host || e.parentNode || e.host); ) ;
  };
  if (Object.defineProperty(i, "currentTarget", {
    configurable: !0,
    get() {
      return e || document;
    }
  }), ae.registry && !ae.done && (ae.done = _$HY.done = !0), i.composedPath) {
    const a = i.composedPath();
    s(a[0]);
    for (let h = 0; h < a.length - 2 && (e = a[h], !!o()); h++) {
      if (e._$host) {
        e = e._$host, l();
        break;
      }
      if (e.parentNode === r)
        break;
    }
  } else l();
  s(n);
}
function qo(i, e, t, n, r) {
  const s = Rs(i);
  if (s) {
    !t && (t = [...i.childNodes]);
    let a = [];
    for (let h = 0; h < t.length; h++) {
      const c = t[h];
      c.nodeType === 8 && c.data.slice(0, 2) === "!$" ? c.remove() : a.push(c);
    }
    t = a;
  }
  for (; typeof t == "function"; ) t = t();
  if (e === t) return t;
  const o = typeof e, l = n !== void 0;
  if (i = l && t[0] && t[0].parentNode || i, o === "string" || o === "number") {
    if (s || o === "number" && (e = e.toString(), e === t))
      return t;
    if (l) {
      let a = t[0];
      a && a.nodeType === 3 ? a.data !== e && (a.data = e) : a = document.createTextNode(e), t = Mr(i, t, n, a);
    } else
      t !== "" && typeof t == "string" ? t = i.firstChild.data = e : t = i.textContent = e;
  } else if (e == null || o === "boolean") {
    if (s) return t;
    t = Mr(i, t, n);
  } else {
    if (o === "function")
      return De(() => {
        let a = e();
        for (; typeof a == "function"; ) a = a();
        t = qo(i, a, t, n);
      }), () => t;
    if (Array.isArray(e)) {
      const a = [], h = t && Array.isArray(t);
      if (gu(a, e, t, r))
        return De(() => t = qo(i, a, t, n, !0)), () => t;
      if (s) {
        if (!a.length) return t;
        if (n === void 0) return t = [...i.childNodes];
        let c = a[0];
        if (c.parentNode !== i) return t;
        const f = [c];
        for (; (c = c.nextSibling) !== n; ) f.push(c);
        return t = f;
      }
      if (a.length === 0) {
        if (t = Mr(i, t, n), l) return t;
      } else h ? t.length === 0 ? Wm(i, a, n) : aT(i, t, a) : (t && Mr(i), Wm(i, a));
      t = a;
    } else if (e.nodeType) {
      if (s && e.parentNode) return t = l ? [e] : e;
      if (Array.isArray(t)) {
        if (l) return t = Mr(i, t, n, e);
        Mr(i, t, null, e);
      } else t == null || t === "" || !i.firstChild ? i.appendChild(e) : i.replaceChild(e, i.firstChild);
      t = e;
    }
  }
  return t;
}
function gu(i, e, t, n) {
  let r = !1;
  for (let s = 0, o = e.length; s < o; s++) {
    let l = e[s], a = t && t[i.length], h;
    if (!(l == null || l === !0 || l === !1)) if ((h = typeof l) == "object" && l.nodeType)
      i.push(l);
    else if (Array.isArray(l))
      r = gu(i, l, a) || r;
    else if (h === "function")
      if (n) {
        for (; typeof l == "function"; ) l = l();
        r = gu(
          i,
          Array.isArray(l) ? l : [l],
          Array.isArray(a) ? a : [a]
        ) || r;
      } else
        i.push(l), r = !0;
    else {
      const c = String(l);
      a && a.nodeType === 3 && a.data === c ? i.push(a) : i.push(document.createTextNode(c));
    }
  }
  return r;
}
function Wm(i, e, t = null) {
  for (let n = 0, r = e.length; n < r; n++) i.insertBefore(e[n], t);
}
function Mr(i, e, t, n) {
  if (t === void 0) return i.textContent = "";
  const r = n || document.createTextNode("");
  if (e.length) {
    let s = !1;
    for (let o = e.length - 1; o >= 0; o--) {
      const l = e[o];
      if (r !== l) {
        const a = l.parentNode === i;
        !s && !o ? a ? i.replaceChild(r, l) : i.insertBefore(r, t) : a && l.remove();
      } else s = !0;
    }
  } else i.insertBefore(r, t);
  return [r];
}
const jS = !1;
function US() {
  let i = /* @__PURE__ */ new Set();
  function e(r) {
    return i.add(r), () => i.delete(r);
  }
  let t = !1;
  function n(r, s) {
    if (t)
      return !(t = !1);
    const o = {
      to: r,
      options: s,
      defaultPrevented: !1,
      preventDefault: () => o.defaultPrevented = !0
    };
    for (const l of i)
      l.listener({
        ...o,
        from: l.location,
        retry: (a) => {
          a && (t = !0), l.navigate(r, { ...s, resolve: !1 });
        }
      });
    return !o.defaultPrevented;
  }
  return {
    subscribe: e,
    confirm: n
  };
}
let yu;
function ip() {
  (!window.history.state || window.history.state._depth == null) && window.history.replaceState({ ...window.history.state, _depth: window.history.length - 1 }, ""), yu = window.history.state._depth;
}
ip();
function mT(i) {
  return {
    ...i,
    _depth: window.history.state && window.history.state._depth
  };
}
function gT(i, e) {
  let t = !1;
  return () => {
    const n = yu;
    ip();
    const r = n == null ? null : yu - n;
    if (t) {
      t = !1;
      return;
    }
    r && e(r) ? (t = !0, window.history.go(-r)) : i();
  };
}
const yT = /^(?:[a-z0-9]+:)?\/\//i, ST = /^\/+|(\/)\/+$/g, YS = "http://sr";
function So(i, e = !1) {
  const t = i.replace(ST, "$1");
  return t ? e || /^[?#]/.test(t) ? t : "/" + t : "";
}
function wa(i, e, t) {
  if (yT.test(e))
    return;
  const n = So(i), r = t && So(t);
  let s = "";
  return !r || e.startsWith("/") ? s = n : r.toLowerCase().indexOf(n.toLowerCase()) !== 0 ? s = n + r : s = r, (s || "/") + So(e, !s);
}
function bT(i, e) {
  if (i == null)
    throw new Error(e);
  return i;
}
function xT(i, e) {
  return So(i).replace(/\/*(\*.*)?$/g, "") + So(e);
}
function GS(i) {
  const e = {};
  return i.searchParams.forEach((t, n) => {
    n in e ? Array.isArray(e[n]) ? e[n].push(t) : e[n] = [e[n], t] : e[n] = t;
  }), e;
}
function wT(i, e, t) {
  const [n, r] = i.split("/*", 2), s = n.split("/").filter(Boolean), o = s.length;
  return (l) => {
    const a = l.split("/").filter(Boolean), h = a.length - o;
    if (h < 0 || h > 0 && r === void 0 && !e)
      return null;
    const c = {
      path: o ? "" : "/",
      params: {}
    }, f = (u) => t === void 0 ? void 0 : t[u];
    for (let u = 0; u < o; u++) {
      const d = s[u], O = d[0] === ":", p = O ? a[u] : a[u].toLowerCase(), m = O ? d.slice(1) : d.toLowerCase();
      if (O && zc(p, f(m)))
        c.params[m] = p;
      else if (O || !zc(p, m))
        return null;
      c.path += `/${p}`;
    }
    if (r) {
      const u = h ? a.slice(-h).join("/") : "";
      if (zc(u, f(r)))
        c.params[r] = u;
      else
        return null;
    }
    return c;
  };
}
function zc(i, e) {
  const t = (n) => n === i;
  return e === void 0 ? !0 : typeof e == "string" ? t(e) : typeof e == "function" ? e(i) : Array.isArray(e) ? e.some(t) : e instanceof RegExp ? e.test(i) : !1;
}
function kT(i) {
  const [e, t] = i.pattern.split("/*", 2), n = e.split("/").filter(Boolean);
  return n.reduce((r, s) => r + (s.startsWith(":") ? 2 : 3), n.length - (t === void 0 ? 0 : 1));
}
function FS(i) {
  const e = /* @__PURE__ */ new Map(), t = rc();
  return new Proxy({}, {
    get(n, r) {
      return e.has(r) || JO(t, () => e.set(r, Ee(() => i()[r]))), e.get(r)();
    },
    getOwnPropertyDescriptor() {
      return {
        enumerable: !0,
        configurable: !0
      };
    },
    ownKeys() {
      return Reflect.ownKeys(i());
    }
  });
}
function vT(i, e) {
  const t = new URLSearchParams(i);
  Object.entries(e).forEach(([r, s]) => {
    s == null || s === "" || s instanceof Array && !s.length ? t.delete(r) : s instanceof Array ? (t.delete(r), s.forEach((o) => {
      t.append(r, String(o));
    })) : t.set(r, String(s));
  });
  const n = t.toString();
  return n ? `?${n}` : "";
}
function HS(i) {
  let e = /(\/?\:[^\/]+)\?/.exec(i);
  if (!e)
    return [i];
  let t = i.slice(0, e.index), n = i.slice(e.index + e[0].length);
  const r = [t, t += e[1]];
  for (; e = /^(\/\:[^\/]+)\?/.exec(n); )
    r.push(t += e[1]), n = n.slice(e[0].length);
  return HS(n).reduce((s, o) => [...s, ...r.map((l) => l + o)], []);
}
const QT = 100, KS = gl(), JS = gl(), np = () => bT(Ts(KS), "<A> and 'use' router primitives can be only used inside a Route."), Nt = () => np().navigatorFactory(), As = () => np().location, yl = () => np().params, PT = () => {
  const i = As(), e = Nt(), t = (n, r) => {
    const s = Je(() => vT(i.search, n) + i.hash);
    e(s, {
      scroll: !1,
      resolve: !1,
      ...r
    });
  };
  return [i.query, t];
};
function $T(i, e = "") {
  const { component: t, preload: n, load: r, children: s, info: o } = i, l = !s || Array.isArray(s) && !s.length, a = {
    key: i,
    component: t,
    preload: n || r,
    info: o
  };
  return eb(i.path).reduce((h, c) => {
    for (const f of HS(c)) {
      const u = xT(e, f);
      let d = l ? u : u.split("/*", 1)[0];
      d = d.split("/").map((O) => O.startsWith(":") || O.startsWith("*") ? O : encodeURIComponent(O)).join("/"), h.push({
        ...a,
        originalPath: c,
        pattern: d,
        matcher: wT(d, !l, i.matchFilters)
      });
    }
    return h;
  }, []);
}
function TT(i, e = 0) {
  return {
    routes: i,
    score: kT(i[i.length - 1]) * 1e4 - e,
    matcher(t) {
      const n = [];
      for (let r = i.length - 1; r >= 0; r--) {
        const s = i[r], o = s.matcher(t);
        if (!o)
          return null;
        n.unshift({
          ...o,
          route: s
        });
      }
      return n;
    }
  };
}
function eb(i) {
  return Array.isArray(i) ? i : [i];
}
function tb(i, e = "", t = [], n = []) {
  const r = eb(i);
  for (let s = 0, o = r.length; s < o; s++) {
    const l = r[s];
    if (l && typeof l == "object") {
      l.hasOwnProperty("path") || (l.path = "");
      const a = $T(l, e);
      for (const h of a) {
        t.push(h);
        const c = Array.isArray(l.children) && l.children.length === 0;
        if (l.children && !c)
          tb(l.children, h.pattern, t, n);
        else {
          const f = TT([...t], n.length);
          n.push(f);
        }
        t.pop();
      }
    }
  }
  return t.length ? n : n.sort((s, o) => o.score - s.score);
}
function Ic(i, e) {
  for (let t = 0, n = i.length; t < n; t++) {
    const r = i[t].matcher(e);
    if (r)
      return r;
  }
  return [];
}
function CT(i, e, t) {
  const n = new URL(YS), r = Ee((c) => {
    const f = i();
    try {
      return new URL(f, n);
    } catch {
      return console.error(`Invalid path ${f}`), c;
    }
  }, n, {
    equals: (c, f) => c.href === f.href
  }), s = Ee(() => r().pathname), o = Ee(() => r().search, !0), l = Ee(() => r().hash), a = () => "", h = Gr(o, () => GS(r()));
  return {
    get pathname() {
      return s();
    },
    get search() {
      return o();
    },
    get hash() {
      return l();
    },
    get state() {
      return e();
    },
    get key() {
      return a();
    },
    query: t ? t(h) : FS(h)
  };
}
let nr;
function RT() {
  return nr;
}
function AT(i, e, t, n = {}) {
  const { signal: [r, s], utils: o = {} } = i, l = o.parsePath || ((E) => E), a = o.renderPath || ((E) => E), h = o.beforeLeave || US(), c = wa("", n.base || "");
  if (c === void 0)
    throw new Error(`${c} is not a valid base path`);
  c && !r().value && s({ value: c, replace: !0, scroll: !1 });
  const [f, u] = ee(!1);
  let d;
  const O = (E, L) => {
    L.value === p() && L.state === g() || (d === void 0 && u(!0), nr = E, d = L, Z$(() => {
      d === L && (m(d.value), S(d.state), w[1]((G) => G.filter((pe) => pe.pending)));
    }).finally(() => {
      d === L && ZS(() => {
        nr = void 0, E === "navigate" && v(d), u(!1), d = void 0;
      });
    }));
  }, [p, m] = ee(r().value), [g, S] = ee(r().state), x = CT(p, g, o.queryWrapper), k = [], w = ee([]), b = Ee(() => typeof n.transformUrl == "function" ? Ic(e(), n.transformUrl(x.pathname)) : Ic(e(), x.pathname)), Q = () => {
    const E = b(), L = {};
    for (let G = 0; G < E.length; G++)
      Object.assign(L, E[G].params);
    return L;
  }, R = o.paramsWrapper ? o.paramsWrapper(Q, e) : FS(Q), A = {
    pattern: c,
    path: () => c,
    outlet: () => null,
    resolvePath(E) {
      return wa(c, E);
    }
  };
  return De(Gr(r, (E) => O("native", E), { defer: !0 })), {
    base: A,
    location: x,
    params: R,
    isRouting: f,
    renderPath: a,
    parsePath: l,
    navigatorFactory: $,
    matches: b,
    beforeLeave: h,
    preloadRoute: X,
    singleFlight: n.singleFlight === void 0 ? !0 : n.singleFlight,
    submissions: w
  };
  function _(E, L, G) {
    Je(() => {
      if (typeof L == "number") {
        L && (o.go ? o.go(L) : console.warn("Router integration does not support relative routing"));
        return;
      }
      const pe = !L || L[0] === "?", { replace: U, resolve: j, scroll: re, state: te } = {
        replace: !1,
        resolve: !pe,
        scroll: !0,
        ...G
      }, T = j ? E.resolvePath(L) : wa(pe && x.pathname || "", L);
      if (T === void 0)
        throw new Error(`Path '${L}' is not a routable path`);
      if (k.length >= QT)
        throw new Error("Too many redirects");
      const N = p();
      (T !== N || te !== g()) && (jS || h.confirm(T, G) && (k.push({ value: N, replace: U, scroll: re, state: g() }), O("navigate", {
        value: T,
        state: te
      })));
    });
  }
  function $(E) {
    return E = E || Ts(JS) || A, (L, G) => _(E, L, G);
  }
  function v(E) {
    const L = k[0];
    L && (s({
      ...E,
      replace: L.replace,
      scroll: L.scroll
    }), k.length = 0);
  }
  function X(E, L) {
    const G = Ic(e(), E.pathname), pe = nr;
    nr = "preload";
    for (let U in G) {
      const { route: j, params: re } = G[U];
      j.component && j.component.preload && j.component.preload();
      const { preload: te } = j;
      L && te && JO(t(), () => te({
        params: re,
        location: {
          pathname: E.pathname,
          search: E.search,
          hash: E.hash,
          query: GS(E),
          state: null,
          key: ""
        },
        intent: "preload"
      }));
    }
    nr = pe;
  }
}
function ET(i, e, t, n) {
  const { base: r, location: s, params: o } = i, { pattern: l, component: a, preload: h } = n().route, c = Ee(() => n().path);
  a && a.preload && a.preload();
  const f = h ? h({ params: o, location: s, intent: nr || "initial" }) : void 0;
  return {
    parent: e,
    pattern: l,
    path: c,
    outlet: () => a ? D(a, {
      params: o,
      location: s,
      data: f,
      get children() {
        return t();
      }
    }) : t(),
    resolvePath(d) {
      return wa(r.path(), d, c());
    }
  };
}
const MT = (i) => (e) => {
  const {
    base: t
  } = e, n = sc(() => e.children), r = Ee(() => tb(n(), e.base || ""));
  let s;
  const o = AT(i, r, () => s, {
    base: t,
    singleFlight: e.singleFlight,
    transformUrl: e.transformUrl
  });
  return i.create && i.create(o), D(KS.Provider, {
    value: o,
    get children() {
      return D(qT, {
        routerState: o,
        get root() {
          return e.root;
        },
        get preload() {
          return e.rootPreload || e.rootLoad;
        },
        get children() {
          return [xr(() => (s = rc()) && null), D(_T, {
            routerState: o,
            get branches() {
              return r();
            }
          })];
        }
      });
    }
  });
};
function qT(i) {
  const e = i.routerState.location, t = i.routerState.params, n = Ee(() => i.preload && Je(() => {
    i.preload({
      params: t,
      location: e,
      intent: RT() || "initial"
    });
  }));
  return D(cn, {
    get when() {
      return i.root;
    },
    keyed: !0,
    get fallback() {
      return i.children;
    },
    children: (r) => D(r, {
      params: t,
      location: e,
      get data() {
        return n();
      },
      get children() {
        return i.children;
      }
    })
  });
}
function _T(i) {
  const e = [];
  let t;
  const n = Ee(Gr(i.routerState.matches, (r, s, o) => {
    let l = s && r.length === s.length;
    const a = [];
    for (let h = 0, c = r.length; h < c; h++) {
      const f = s && s[h], u = r[h];
      o && f && u.route.key === f.route.key ? a[h] = o[h] : (l = !1, e[h] && e[h](), dr((d) => {
        e[h] = d, a[h] = ET(i.routerState, a[h - 1] || i.routerState.base, zm(() => n()[h + 1]), () => i.routerState.matches()[h]);
      }));
    }
    return e.splice(r.length).forEach((h) => h()), o && l ? o : (t = a[0], a);
  }));
  return zm(() => n() && t)();
}
const zm = (i) => () => D(cn, {
  get when() {
    return i();
  },
  keyed: !0,
  children: (e) => D(JS.Provider, {
    value: e,
    get children() {
      return e.outlet();
    }
  })
}), vn = (i) => {
  const e = sc(() => i.children);
  return tp(i, {
    get children() {
      return e();
    }
  });
};
function XT([i, e], t, n) {
  return [i, n ? (r) => e(n(r)) : e];
}
function LT(i) {
  let e = !1;
  const t = (r) => typeof r == "string" ? { value: r } : r, n = XT(ee(t(i.get()), {
    equals: (r, s) => r.value === s.value && r.state === s.state
  }), void 0, (r) => (!e && i.set(r), ae.registry && !ae.done && (ae.done = !0), r));
  return i.init && ji(i.init((r = i.get()) => {
    e = !0, n[1](t(r)), e = !1;
  })), MT({
    signal: n,
    create: i.create,
    utils: i.utils
  });
}
function BT(i, e, t) {
  return i.addEventListener(e, t), () => i.removeEventListener(e, t);
}
function ZT(i, e) {
  const t = i && document.getElementById(i);
  t ? t.scrollIntoView() : e && window.scrollTo(0, 0);
}
const DT = /* @__PURE__ */ new Map();
function VT(i = !0, e = !1, t = "/_server", n) {
  return (r) => {
    const s = r.base.path(), o = r.navigatorFactory(r.base);
    let l, a;
    function h(p) {
      return p.namespaceURI === "http://www.w3.org/2000/svg";
    }
    function c(p) {
      if (p.defaultPrevented || p.button !== 0 || p.metaKey || p.altKey || p.ctrlKey || p.shiftKey)
        return;
      const m = p.composedPath().find((b) => b instanceof Node && b.nodeName.toUpperCase() === "A");
      if (!m || e && !m.hasAttribute("link"))
        return;
      const g = h(m), S = g ? m.href.baseVal : m.href;
      if ((g ? m.target.baseVal : m.target) || !S && !m.hasAttribute("state"))
        return;
      const k = (m.getAttribute("rel") || "").split(/\s+/);
      if (m.hasAttribute("download") || k && k.includes("external"))
        return;
      const w = g ? new URL(S, document.baseURI) : new URL(S);
      if (!(w.origin !== window.location.origin || s && w.pathname && !w.pathname.toLowerCase().startsWith(s.toLowerCase())))
        return [m, w];
    }
    function f(p) {
      const m = c(p);
      if (!m)
        return;
      const [g, S] = m, x = r.parsePath(S.pathname + S.search + S.hash), k = g.getAttribute("state");
      p.preventDefault(), o(x, {
        resolve: !1,
        replace: g.hasAttribute("replace"),
        scroll: !g.hasAttribute("noscroll"),
        state: k ? JSON.parse(k) : void 0
      });
    }
    function u(p) {
      const m = c(p);
      if (!m)
        return;
      const [g, S] = m;
      n && (S.pathname = n(S.pathname)), r.preloadRoute(S, g.getAttribute("preload") !== "false");
    }
    function d(p) {
      clearTimeout(l);
      const m = c(p);
      if (!m)
        return a = null;
      const [g, S] = m;
      a !== g && (n && (S.pathname = n(S.pathname)), l = setTimeout(() => {
        r.preloadRoute(S, g.getAttribute("preload") !== "false"), a = g;
      }, 20));
    }
    function O(p) {
      if (p.defaultPrevented)
        return;
      let m = p.submitter && p.submitter.hasAttribute("formaction") ? p.submitter.getAttribute("formaction") : p.target.getAttribute("action");
      if (!m)
        return;
      if (!m.startsWith("https://action/")) {
        const S = new URL(m, YS);
        if (m = r.parsePath(S.pathname + S.search), !m.startsWith(t))
          return;
      }
      if (p.target.method.toUpperCase() !== "POST")
        throw new Error("Only POST forms are supported for Actions");
      const g = DT.get(m);
      if (g) {
        p.preventDefault();
        const S = new FormData(p.target, p.submitter);
        g.call({ r, f: p.target }, p.target.enctype === "multipart/form-data" ? S : new URLSearchParams(S));
      }
    }
    Hi(["click", "submit"]), document.addEventListener("click", f), i && (document.addEventListener("mousemove", d, { passive: !0 }), document.addEventListener("focusin", u, { passive: !0 }), document.addEventListener("touchstart", u, { passive: !0 })), document.addEventListener("submit", O), ji(() => {
      document.removeEventListener("click", f), i && (document.removeEventListener("mousemove", d), document.removeEventListener("focusin", u), document.removeEventListener("touchstart", u)), document.removeEventListener("submit", O);
    });
  };
}
function WT(i) {
  const e = () => {
    const n = window.location.pathname.replace(/^\/+/, "/") + window.location.search, r = window.history.state && window.history.state._depth && Object.keys(window.history.state).length === 1 ? void 0 : window.history.state;
    return {
      value: n + window.location.hash,
      state: r
    };
  }, t = US();
  return LT({
    get: e,
    set({ value: n, replace: r, scroll: s, state: o }) {
      r ? window.history.replaceState(mT(o), "", n) : window.history.pushState(o, "", n), ZT(decodeURIComponent(window.location.hash.slice(1)), s), ip();
    },
    init: (n) => BT(window, "popstate", gT(n, (r) => {
      if (r && r < 0)
        return !t.confirm(r);
      {
        const s = e();
        return !t.confirm(s.value, { state: s.state });
      }
    })),
    create: VT(i.preload, i.explicitLinks, i.actionBase, i.transformUrl),
    utils: {
      go: (n) => window.history.go(n),
      beforeLeave: t
    }
  })(i);
}
const zT = () => {
  if (typeof window < "u") {
    if (window.localStorage) {
      const e = window.localStorage.getItem("dark");
      if (typeof e == "string")
        return e === "true";
    }
    if (window.matchMedia("(prefers-color-scheme: dark)").matches)
      return !0;
  }
  return !1;
}, ib = gl(), wr = "http://localhost:5000/api", IT = (i) => {
  Nt();
  const [e, t] = ee(localStorage.getItem("token") || ""), [n, r] = ee([]), [s, o] = ee(zT()), [l] = B$(e, async (f) => {
    const u = localStorage.getItem("user");
    if (u)
      return JSON.parse(u);
    const d = await fetch(`${wr}/auth/me`, {
      headers: {
        "Content-Type": "application/json"
      },
      credentials: "include"
    });
    if (!d.ok)
      return d.status === 401 && (localStorage.removeItem("token"), localStorage.removeItem("user")), {
        email: "",
        name: "",
        image: ""
      };
    const O = await d.json();
    return localStorage.setItem("user", JSON.stringify(O)), O;
  }), a = async () => {
    try {
      const f = await fetch(`${wr}/file/list?directory=./&recursive=true`, {
        headers: {
          "Content-Type": "application/json"
        },
        credentials: "include"
      });
      if (!f.ok)
        return f.status === 401 && localStorage.removeItem("token"), {};
      if (f.ok) {
        const u = await f.json();
        r(u);
      }
    } catch (f) {
      console.error("Failed to fetch files:", f);
    }
  };
  a();
  let [h, c] = ee();
  return D(ib.Provider, {
    value: {
      get token() {
        return e();
      },
      set token(f) {
        t(f), localStorage.setItem("token", f);
      },
      user: l,
      tabs() {
        const f = h();
        return f ? f() : void 0;
      },
      setTabs(f) {
        c(() => f);
      },
      dark: s,
      toggleDark() {
        let f = !s();
        document.body.classList.toggle("dark", f), o(f), localStorage.setItem("dark", String(f));
      },
      files: n,
      refreshFiles: a
    },
    get children() {
      return i.children;
    }
  });
}, wi = () => Ts(ib);
var NT = /* @__PURE__ */ J('<div class="flex h-screen flex-col overflow-hidden"><main class=flex-1><div class="grid grid-cols-1 grid-rows-[1fr_1px_auto_1px_auto] justify-center [--gutter-width:2.5rem] md:-mx-4 md:grid-cols-[var(--gutter-width)_minmax(0,var(--breakpoint-2xl))_var(--gutter-width)] lg:mx-0"><div class="col-start-1 row-span-full row-start-1 hidden border-x border-x-[--pattern-fg] border-neutral-200 dark:border-neutral-800 bg-[image:repeating-linear-gradient(315deg,_var(--pattern-fg)_0,_var(--pattern-fg)_1px,_transparent_0,_transparent_50%)] bg-[size:10px_10px] bg-fixed [--pattern-fg:var(--color-black)]/5 md:block dark:[--pattern-fg:var(--color-white)]/10"></div><div class></div><div class="row-span-full row-start-1 hidden border-x border-x-[--pattern-fg] border-neutral-200 dark:border-neutral-800 bg-[image:repeating-linear-gradient(315deg,_var(--pattern-fg)_0,_var(--pattern-fg)_1px,_transparent_0,_transparent_50%)] bg-[size:10px_10px] bg-fixed [--pattern-fg:var(--color-black)]/5 md:col-start-3 md:block dark:[--pattern-fg:var(--color-white)]/10">');
const Vs = (i) => (yl(), Nt(), As(), wi(), (() => {
  var e = NT(), t = e.firstChild, n = t.firstChild, r = n.firstChild, s = r.nextSibling;
  return F(s, () => i.children), e;
})()), Ui = /* @__PURE__ */ Object.create(null);
Ui.open = "0";
Ui.close = "1";
Ui.ping = "2";
Ui.pong = "3";
Ui.message = "4";
Ui.upgrade = "5";
Ui.noop = "6";
const ka = /* @__PURE__ */ Object.create(null);
Object.keys(Ui).forEach((i) => {
  ka[Ui[i]] = i;
});
const Su = { type: "error", data: "parser error" }, nb = typeof Blob == "function" || typeof Blob < "u" && Object.prototype.toString.call(Blob) === "[object BlobConstructor]", rb = typeof ArrayBuffer == "function", sb = (i) => typeof ArrayBuffer.isView == "function" ? ArrayBuffer.isView(i) : i && i.buffer instanceof ArrayBuffer, rp = ({ type: i, data: e }, t, n) => nb && e instanceof Blob ? t ? n(e) : Im(e, n) : rb && (e instanceof ArrayBuffer || sb(e)) ? t ? n(e) : Im(new Blob([e]), n) : n(Ui[i] + (e || "")), Im = (i, e) => {
  const t = new FileReader();
  return t.onload = function() {
    const n = t.result.split(",")[1];
    e("b" + (n || ""));
  }, t.readAsDataURL(i);
};
function Nm(i) {
  return i instanceof Uint8Array ? i : i instanceof ArrayBuffer ? new Uint8Array(i) : new Uint8Array(i.buffer, i.byteOffset, i.byteLength);
}
let Nc;
function jT(i, e) {
  if (nb && i.data instanceof Blob)
    return i.data.arrayBuffer().then(Nm).then(e);
  if (rb && (i.data instanceof ArrayBuffer || sb(i.data)))
    return e(Nm(i.data));
  rp(i, !1, (t) => {
    Nc || (Nc = new TextEncoder()), e(Nc.encode(t));
  });
}
const jm = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", so = typeof Uint8Array > "u" ? [] : new Uint8Array(256);
for (let i = 0; i < jm.length; i++)
  so[jm.charCodeAt(i)] = i;
const UT = (i) => {
  let e = i.length * 0.75, t = i.length, n, r = 0, s, o, l, a;
  i[i.length - 1] === "=" && (e--, i[i.length - 2] === "=" && e--);
  const h = new ArrayBuffer(e), c = new Uint8Array(h);
  for (n = 0; n < t; n += 4)
    s = so[i.charCodeAt(n)], o = so[i.charCodeAt(n + 1)], l = so[i.charCodeAt(n + 2)], a = so[i.charCodeAt(n + 3)], c[r++] = s << 2 | o >> 4, c[r++] = (o & 15) << 4 | l >> 2, c[r++] = (l & 3) << 6 | a & 63;
  return h;
}, YT = typeof ArrayBuffer == "function", sp = (i, e) => {
  if (typeof i != "string")
    return {
      type: "message",
      data: ob(i, e)
    };
  const t = i.charAt(0);
  return t === "b" ? {
    type: "message",
    data: GT(i.substring(1), e)
  } : ka[t] ? i.length > 1 ? {
    type: ka[t],
    data: i.substring(1)
  } : {
    type: ka[t]
  } : Su;
}, GT = (i, e) => {
  if (YT) {
    const t = UT(i);
    return ob(t, e);
  } else
    return { base64: !0, data: i };
}, ob = (i, e) => {
  switch (e) {
    case "blob":
      return i instanceof Blob ? i : new Blob([i]);
    case "arraybuffer":
    default:
      return i instanceof ArrayBuffer ? i : i.buffer;
  }
}, lb = "", FT = (i, e) => {
  const t = i.length, n = new Array(t);
  let r = 0;
  i.forEach((s, o) => {
    rp(s, !1, (l) => {
      n[o] = l, ++r === t && e(n.join(lb));
    });
  });
}, HT = (i, e) => {
  const t = i.split(lb), n = [];
  for (let r = 0; r < t.length; r++) {
    const s = sp(t[r], e);
    if (n.push(s), s.type === "error")
      break;
  }
  return n;
};
function KT() {
  return new TransformStream({
    transform(i, e) {
      jT(i, (t) => {
        const n = t.length;
        let r;
        if (n < 126)
          r = new Uint8Array(1), new DataView(r.buffer).setUint8(0, n);
        else if (n < 65536) {
          r = new Uint8Array(3);
          const s = new DataView(r.buffer);
          s.setUint8(0, 126), s.setUint16(1, n);
        } else {
          r = new Uint8Array(9);
          const s = new DataView(r.buffer);
          s.setUint8(0, 127), s.setBigUint64(1, BigInt(n));
        }
        i.data && typeof i.data != "string" && (r[0] |= 128), e.enqueue(r), e.enqueue(t);
      });
    }
  });
}
let jc;
function Ll(i) {
  return i.reduce((e, t) => e + t.length, 0);
}
function Bl(i, e) {
  if (i[0].length === e)
    return i.shift();
  const t = new Uint8Array(e);
  let n = 0;
  for (let r = 0; r < e; r++)
    t[r] = i[0][n++], n === i[0].length && (i.shift(), n = 0);
  return i.length && n < i[0].length && (i[0] = i[0].slice(n)), t;
}
function JT(i, e) {
  jc || (jc = new TextDecoder());
  const t = [];
  let n = 0, r = -1, s = !1;
  return new TransformStream({
    transform(o, l) {
      for (t.push(o); ; ) {
        if (n === 0) {
          if (Ll(t) < 1)
            break;
          const a = Bl(t, 1);
          s = (a[0] & 128) === 128, r = a[0] & 127, r < 126 ? n = 3 : r === 126 ? n = 1 : n = 2;
        } else if (n === 1) {
          if (Ll(t) < 2)
            break;
          const a = Bl(t, 2);
          r = new DataView(a.buffer, a.byteOffset, a.length).getUint16(0), n = 3;
        } else if (n === 2) {
          if (Ll(t) < 8)
            break;
          const a = Bl(t, 8), h = new DataView(a.buffer, a.byteOffset, a.length), c = h.getUint32(0);
          if (c > Math.pow(2, 21) - 1) {
            l.enqueue(Su);
            break;
          }
          r = c * Math.pow(2, 32) + h.getUint32(4), n = 3;
        } else {
          if (Ll(t) < r)
            break;
          const a = Bl(t, r);
          l.enqueue(sp(s ? a : jc.decode(a), e)), n = 0;
        }
        if (r === 0 || r > i) {
          l.enqueue(Su);
          break;
        }
      }
    }
  });
}
const ab = 4;
function je(i) {
  if (i) return eC(i);
}
function eC(i) {
  for (var e in je.prototype)
    i[e] = je.prototype[e];
  return i;
}
je.prototype.on = je.prototype.addEventListener = function(i, e) {
  return this._callbacks = this._callbacks || {}, (this._callbacks["$" + i] = this._callbacks["$" + i] || []).push(e), this;
};
je.prototype.once = function(i, e) {
  function t() {
    this.off(i, t), e.apply(this, arguments);
  }
  return t.fn = e, this.on(i, t), this;
};
je.prototype.off = je.prototype.removeListener = je.prototype.removeAllListeners = je.prototype.removeEventListener = function(i, e) {
  if (this._callbacks = this._callbacks || {}, arguments.length == 0)
    return this._callbacks = {}, this;
  var t = this._callbacks["$" + i];
  if (!t) return this;
  if (arguments.length == 1)
    return delete this._callbacks["$" + i], this;
  for (var n, r = 0; r < t.length; r++)
    if (n = t[r], n === e || n.fn === e) {
      t.splice(r, 1);
      break;
    }
  return t.length === 0 && delete this._callbacks["$" + i], this;
};
je.prototype.emit = function(i) {
  this._callbacks = this._callbacks || {};
  for (var e = new Array(arguments.length - 1), t = this._callbacks["$" + i], n = 1; n < arguments.length; n++)
    e[n - 1] = arguments[n];
  if (t) {
    t = t.slice(0);
    for (var n = 0, r = t.length; n < r; ++n)
      t[n].apply(this, e);
  }
  return this;
};
je.prototype.emitReserved = je.prototype.emit;
je.prototype.listeners = function(i) {
  return this._callbacks = this._callbacks || {}, this._callbacks["$" + i] || [];
};
je.prototype.hasListeners = function(i) {
  return !!this.listeners(i).length;
};
const lc = typeof Promise == "function" && typeof Promise.resolve == "function" ? (e) => Promise.resolve().then(e) : (e, t) => t(e, 0), Yt = typeof self < "u" ? self : typeof window < "u" ? window : Function("return this")(), tC = "arraybuffer";
function hb(i, ...e) {
  return e.reduce((t, n) => (i.hasOwnProperty(n) && (t[n] = i[n]), t), {});
}
const iC = Yt.setTimeout, nC = Yt.clearTimeout;
function ac(i, e) {
  e.useNativeTimers ? (i.setTimeoutFn = iC.bind(Yt), i.clearTimeoutFn = nC.bind(Yt)) : (i.setTimeoutFn = Yt.setTimeout.bind(Yt), i.clearTimeoutFn = Yt.clearTimeout.bind(Yt));
}
const rC = 1.33;
function sC(i) {
  return typeof i == "string" ? oC(i) : Math.ceil((i.byteLength || i.size) * rC);
}
function oC(i) {
  let e = 0, t = 0;
  for (let n = 0, r = i.length; n < r; n++)
    e = i.charCodeAt(n), e < 128 ? t += 1 : e < 2048 ? t += 2 : e < 55296 || e >= 57344 ? t += 3 : (n++, t += 4);
  return t;
}
function cb() {
  return Date.now().toString(36).substring(3) + Math.random().toString(36).substring(2, 5);
}
function lC(i) {
  let e = "";
  for (let t in i)
    i.hasOwnProperty(t) && (e.length && (e += "&"), e += encodeURIComponent(t) + "=" + encodeURIComponent(i[t]));
  return e;
}
function aC(i) {
  let e = {}, t = i.split("&");
  for (let n = 0, r = t.length; n < r; n++) {
    let s = t[n].split("=");
    e[decodeURIComponent(s[0])] = decodeURIComponent(s[1]);
  }
  return e;
}
class hC extends Error {
  constructor(e, t, n) {
    super(e), this.description = t, this.context = n, this.type = "TransportError";
  }
}
class op extends je {
  /**
   * Transport abstract constructor.
   *
   * @param {Object} opts - options
   * @protected
   */
  constructor(e) {
    super(), this.writable = !1, ac(this, e), this.opts = e, this.query = e.query, this.socket = e.socket, this.supportsBinary = !e.forceBase64;
  }
  /**
   * Emits an error.
   *
   * @param {String} reason
   * @param description
   * @param context - the error context
   * @return {Transport} for chaining
   * @protected
   */
  onError(e, t, n) {
    return super.emitReserved("error", new hC(e, t, n)), this;
  }
  /**
   * Opens the transport.
   */
  open() {
    return this.readyState = "opening", this.doOpen(), this;
  }
  /**
   * Closes the transport.
   */
  close() {
    return (this.readyState === "opening" || this.readyState === "open") && (this.doClose(), this.onClose()), this;
  }
  /**
   * Sends multiple packets.
   *
   * @param {Array} packets
   */
  send(e) {
    this.readyState === "open" && this.write(e);
  }
  /**
   * Called upon open
   *
   * @protected
   */
  onOpen() {
    this.readyState = "open", this.writable = !0, super.emitReserved("open");
  }
  /**
   * Called with data.
   *
   * @param {String} data
   * @protected
   */
  onData(e) {
    const t = sp(e, this.socket.binaryType);
    this.onPacket(t);
  }
  /**
   * Called with a decoded packet.
   *
   * @protected
   */
  onPacket(e) {
    super.emitReserved("packet", e);
  }
  /**
   * Called upon close.
   *
   * @protected
   */
  onClose(e) {
    this.readyState = "closed", super.emitReserved("close", e);
  }
  /**
   * Pauses the transport, in order not to lose packets during an upgrade.
   *
   * @param onPause
   */
  pause(e) {
  }
  createUri(e, t = {}) {
    return e + "://" + this._hostname() + this._port() + this.opts.path + this._query(t);
  }
  _hostname() {
    const e = this.opts.hostname;
    return e.indexOf(":") === -1 ? e : "[" + e + "]";
  }
  _port() {
    return this.opts.port && (this.opts.secure && +(this.opts.port !== 443) || !this.opts.secure && Number(this.opts.port) !== 80) ? ":" + this.opts.port : "";
  }
  _query(e) {
    const t = lC(e);
    return t.length ? "?" + t : "";
  }
}
class cC extends op {
  constructor() {
    super(...arguments), this._polling = !1;
  }
  get name() {
    return "polling";
  }
  /**
   * Opens the socket (triggers polling). We write a PING message to determine
   * when the transport is open.
   *
   * @protected
   */
  doOpen() {
    this._poll();
  }
  /**
   * Pauses polling.
   *
   * @param {Function} onPause - callback upon buffers are flushed and transport is paused
   * @package
   */
  pause(e) {
    this.readyState = "pausing";
    const t = () => {
      this.readyState = "paused", e();
    };
    if (this._polling || !this.writable) {
      let n = 0;
      this._polling && (n++, this.once("pollComplete", function() {
        --n || t();
      })), this.writable || (n++, this.once("drain", function() {
        --n || t();
      }));
    } else
      t();
  }
  /**
   * Starts polling cycle.
   *
   * @private
   */
  _poll() {
    this._polling = !0, this.doPoll(), this.emitReserved("poll");
  }
  /**
   * Overloads onData to detect payloads.
   *
   * @protected
   */
  onData(e) {
    const t = (n) => {
      if (this.readyState === "opening" && n.type === "open" && this.onOpen(), n.type === "close")
        return this.onClose({ description: "transport closed by the server" }), !1;
      this.onPacket(n);
    };
    HT(e, this.socket.binaryType).forEach(t), this.readyState !== "closed" && (this._polling = !1, this.emitReserved("pollComplete"), this.readyState === "open" && this._poll());
  }
  /**
   * For polling, send a close packet.
   *
   * @protected
   */
  doClose() {
    const e = () => {
      this.write([{ type: "close" }]);
    };
    this.readyState === "open" ? e() : this.once("open", e);
  }
  /**
   * Writes a packets payload.
   *
   * @param {Array} packets - data packets
   * @protected
   */
  write(e) {
    this.writable = !1, FT(e, (t) => {
      this.doWrite(t, () => {
        this.writable = !0, this.emitReserved("drain");
      });
    });
  }
  /**
   * Generates uri for connection.
   *
   * @private
   */
  uri() {
    const e = this.opts.secure ? "https" : "http", t = this.query || {};
    return this.opts.timestampRequests !== !1 && (t[this.opts.timestampParam] = cb()), !this.supportsBinary && !t.sid && (t.b64 = 1), this.createUri(e, t);
  }
}
let fb = !1;
try {
  fb = typeof XMLHttpRequest < "u" && "withCredentials" in new XMLHttpRequest();
} catch {
}
const fC = fb;
function uC() {
}
class dC extends cC {
  /**
   * XHR Polling constructor.
   *
   * @param {Object} opts
   * @package
   */
  constructor(e) {
    if (super(e), typeof location < "u") {
      const t = location.protocol === "https:";
      let n = location.port;
      n || (n = t ? "443" : "80"), this.xd = typeof location < "u" && e.hostname !== location.hostname || n !== e.port;
    }
  }
  /**
   * Sends data.
   *
   * @param {String} data to send.
   * @param {Function} called upon flush.
   * @private
   */
  doWrite(e, t) {
    const n = this.request({
      method: "POST",
      data: e
    });
    n.on("success", t), n.on("error", (r, s) => {
      this.onError("xhr post error", r, s);
    });
  }
  /**
   * Starts a poll cycle.
   *
   * @private
   */
  doPoll() {
    const e = this.request();
    e.on("data", this.onData.bind(this)), e.on("error", (t, n) => {
      this.onError("xhr poll error", t, n);
    }), this.pollXhr = e;
  }
}
let Hr = class va extends je {
  /**
   * Request constructor
   *
   * @param {Object} options
   * @package
   */
  constructor(e, t, n) {
    super(), this.createRequest = e, ac(this, n), this._opts = n, this._method = n.method || "GET", this._uri = t, this._data = n.data !== void 0 ? n.data : null, this._create();
  }
  /**
   * Creates the XHR object and sends the request.
   *
   * @private
   */
  _create() {
    var e;
    const t = hb(this._opts, "agent", "pfx", "key", "passphrase", "cert", "ca", "ciphers", "rejectUnauthorized", "autoUnref");
    t.xdomain = !!this._opts.xd;
    const n = this._xhr = this.createRequest(t);
    try {
      n.open(this._method, this._uri, !0);
      try {
        if (this._opts.extraHeaders) {
          n.setDisableHeaderCheck && n.setDisableHeaderCheck(!0);
          for (let r in this._opts.extraHeaders)
            this._opts.extraHeaders.hasOwnProperty(r) && n.setRequestHeader(r, this._opts.extraHeaders[r]);
        }
      } catch {
      }
      if (this._method === "POST")
        try {
          n.setRequestHeader("Content-type", "text/plain;charset=UTF-8");
        } catch {
        }
      try {
        n.setRequestHeader("Accept", "*/*");
      } catch {
      }
      (e = this._opts.cookieJar) === null || e === void 0 || e.addCookies(n), "withCredentials" in n && (n.withCredentials = this._opts.withCredentials), this._opts.requestTimeout && (n.timeout = this._opts.requestTimeout), n.onreadystatechange = () => {
        var r;
        n.readyState === 3 && ((r = this._opts.cookieJar) === null || r === void 0 || r.parseCookies(
          // @ts-ignore
          n.getResponseHeader("set-cookie")
        )), n.readyState === 4 && (n.status === 200 || n.status === 1223 ? this._onLoad() : this.setTimeoutFn(() => {
          this._onError(typeof n.status == "number" ? n.status : 0);
        }, 0));
      }, n.send(this._data);
    } catch (r) {
      this.setTimeoutFn(() => {
        this._onError(r);
      }, 0);
      return;
    }
    typeof document < "u" && (this._index = va.requestsCount++, va.requests[this._index] = this);
  }
  /**
   * Called upon error.
   *
   * @private
   */
  _onError(e) {
    this.emitReserved("error", e, this._xhr), this._cleanup(!0);
  }
  /**
   * Cleans up house.
   *
   * @private
   */
  _cleanup(e) {
    if (!(typeof this._xhr > "u" || this._xhr === null)) {
      if (this._xhr.onreadystatechange = uC, e)
        try {
          this._xhr.abort();
        } catch {
        }
      typeof document < "u" && delete va.requests[this._index], this._xhr = null;
    }
  }
  /**
   * Called upon load.
   *
   * @private
   */
  _onLoad() {
    const e = this._xhr.responseText;
    e !== null && (this.emitReserved("data", e), this.emitReserved("success"), this._cleanup());
  }
  /**
   * Aborts the request.
   *
   * @package
   */
  abort() {
    this._cleanup();
  }
};
Hr.requestsCount = 0;
Hr.requests = {};
if (typeof document < "u") {
  if (typeof attachEvent == "function")
    attachEvent("onunload", Um);
  else if (typeof addEventListener == "function") {
    const i = "onpagehide" in Yt ? "pagehide" : "unload";
    addEventListener(i, Um, !1);
  }
}
function Um() {
  for (let i in Hr.requests)
    Hr.requests.hasOwnProperty(i) && Hr.requests[i].abort();
}
const OC = function() {
  const i = ub({
    xdomain: !1
  });
  return i && i.responseType !== null;
}();
class pC extends dC {
  constructor(e) {
    super(e);
    const t = e && e.forceBase64;
    this.supportsBinary = OC && !t;
  }
  request(e = {}) {
    return Object.assign(e, { xd: this.xd }, this.opts), new Hr(ub, this.uri(), e);
  }
}
function ub(i) {
  const e = i.xdomain;
  try {
    if (typeof XMLHttpRequest < "u" && (!e || fC))
      return new XMLHttpRequest();
  } catch {
  }
  if (!e)
    try {
      return new Yt[["Active"].concat("Object").join("X")]("Microsoft.XMLHTTP");
    } catch {
    }
}
const db = typeof navigator < "u" && typeof navigator.product == "string" && navigator.product.toLowerCase() === "reactnative";
class mC extends op {
  get name() {
    return "websocket";
  }
  doOpen() {
    const e = this.uri(), t = this.opts.protocols, n = db ? {} : hb(this.opts, "agent", "perMessageDeflate", "pfx", "key", "passphrase", "cert", "ca", "ciphers", "rejectUnauthorized", "localAddress", "protocolVersion", "origin", "maxPayload", "family", "checkServerIdentity");
    this.opts.extraHeaders && (n.headers = this.opts.extraHeaders);
    try {
      this.ws = this.createSocket(e, t, n);
    } catch (r) {
      return this.emitReserved("error", r);
    }
    this.ws.binaryType = this.socket.binaryType, this.addEventListeners();
  }
  /**
   * Adds event listeners to the socket
   *
   * @private
   */
  addEventListeners() {
    this.ws.onopen = () => {
      this.opts.autoUnref && this.ws._socket.unref(), this.onOpen();
    }, this.ws.onclose = (e) => this.onClose({
      description: "websocket connection closed",
      context: e
    }), this.ws.onmessage = (e) => this.onData(e.data), this.ws.onerror = (e) => this.onError("websocket error", e);
  }
  write(e) {
    this.writable = !1;
    for (let t = 0; t < e.length; t++) {
      const n = e[t], r = t === e.length - 1;
      rp(n, this.supportsBinary, (s) => {
        try {
          this.doWrite(n, s);
        } catch {
        }
        r && lc(() => {
          this.writable = !0, this.emitReserved("drain");
        }, this.setTimeoutFn);
      });
    }
  }
  doClose() {
    typeof this.ws < "u" && (this.ws.onerror = () => {
    }, this.ws.close(), this.ws = null);
  }
  /**
   * Generates uri for connection.
   *
   * @private
   */
  uri() {
    const e = this.opts.secure ? "wss" : "ws", t = this.query || {};
    return this.opts.timestampRequests && (t[this.opts.timestampParam] = cb()), this.supportsBinary || (t.b64 = 1), this.createUri(e, t);
  }
}
const Uc = Yt.WebSocket || Yt.MozWebSocket;
class gC extends mC {
  createSocket(e, t, n) {
    return db ? new Uc(e, t, n) : t ? new Uc(e, t) : new Uc(e);
  }
  doWrite(e, t) {
    this.ws.send(t);
  }
}
class yC extends op {
  get name() {
    return "webtransport";
  }
  doOpen() {
    try {
      this._transport = new WebTransport(this.createUri("https"), this.opts.transportOptions[this.name]);
    } catch (e) {
      return this.emitReserved("error", e);
    }
    this._transport.closed.then(() => {
      this.onClose();
    }).catch((e) => {
      this.onError("webtransport error", e);
    }), this._transport.ready.then(() => {
      this._transport.createBidirectionalStream().then((e) => {
        const t = JT(Number.MAX_SAFE_INTEGER, this.socket.binaryType), n = e.readable.pipeThrough(t).getReader(), r = KT();
        r.readable.pipeTo(e.writable), this._writer = r.writable.getWriter();
        const s = () => {
          n.read().then(({ done: l, value: a }) => {
            l || (this.onPacket(a), s());
          }).catch((l) => {
          });
        };
        s();
        const o = { type: "open" };
        this.query.sid && (o.data = `{"sid":"${this.query.sid}"}`), this._writer.write(o).then(() => this.onOpen());
      });
    });
  }
  write(e) {
    this.writable = !1;
    for (let t = 0; t < e.length; t++) {
      const n = e[t], r = t === e.length - 1;
      this._writer.write(n).then(() => {
        r && lc(() => {
          this.writable = !0, this.emitReserved("drain");
        }, this.setTimeoutFn);
      });
    }
  }
  doClose() {
    var e;
    (e = this._transport) === null || e === void 0 || e.close();
  }
}
const SC = {
  websocket: gC,
  webtransport: yC,
  polling: pC
}, bC = /^(?:(?![^:@\/?#]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@\/?#]*)(?::([^:@\/?#]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/, xC = [
  "source",
  "protocol",
  "authority",
  "userInfo",
  "user",
  "password",
  "host",
  "port",
  "relative",
  "path",
  "directory",
  "file",
  "query",
  "anchor"
];
function bu(i) {
  if (i.length > 8e3)
    throw "URI too long";
  const e = i, t = i.indexOf("["), n = i.indexOf("]");
  t != -1 && n != -1 && (i = i.substring(0, t) + i.substring(t, n).replace(/:/g, ";") + i.substring(n, i.length));
  let r = bC.exec(i || ""), s = {}, o = 14;
  for (; o--; )
    s[xC[o]] = r[o] || "";
  return t != -1 && n != -1 && (s.source = e, s.host = s.host.substring(1, s.host.length - 1).replace(/;/g, ":"), s.authority = s.authority.replace("[", "").replace("]", "").replace(/;/g, ":"), s.ipv6uri = !0), s.pathNames = wC(s, s.path), s.queryKey = kC(s, s.query), s;
}
function wC(i, e) {
  const t = /\/{2,9}/g, n = e.replace(t, "/").split("/");
  return (e.slice(0, 1) == "/" || e.length === 0) && n.splice(0, 1), e.slice(-1) == "/" && n.splice(n.length - 1, 1), n;
}
function kC(i, e) {
  const t = {};
  return e.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function(n, r, s) {
    r && (t[r] = s);
  }), t;
}
const xu = typeof addEventListener == "function" && typeof removeEventListener == "function", Qa = [];
xu && addEventListener("offline", () => {
  Qa.forEach((i) => i());
}, !1);
class Zn extends je {
  /**
   * Socket constructor.
   *
   * @param {String|Object} uri - uri or options
   * @param {Object} opts - options
   */
  constructor(e, t) {
    if (super(), this.binaryType = tC, this.writeBuffer = [], this._prevBufferLen = 0, this._pingInterval = -1, this._pingTimeout = -1, this._maxPayload = -1, this._pingTimeoutTime = 1 / 0, e && typeof e == "object" && (t = e, e = null), e) {
      const n = bu(e);
      t.hostname = n.host, t.secure = n.protocol === "https" || n.protocol === "wss", t.port = n.port, n.query && (t.query = n.query);
    } else t.host && (t.hostname = bu(t.host).host);
    ac(this, t), this.secure = t.secure != null ? t.secure : typeof location < "u" && location.protocol === "https:", t.hostname && !t.port && (t.port = this.secure ? "443" : "80"), this.hostname = t.hostname || (typeof location < "u" ? location.hostname : "localhost"), this.port = t.port || (typeof location < "u" && location.port ? location.port : this.secure ? "443" : "80"), this.transports = [], this._transportsByName = {}, t.transports.forEach((n) => {
      const r = n.prototype.name;
      this.transports.push(r), this._transportsByName[r] = n;
    }), this.opts = Object.assign({
      path: "/engine.io",
      agent: !1,
      withCredentials: !1,
      upgrade: !0,
      timestampParam: "t",
      rememberUpgrade: !1,
      addTrailingSlash: !0,
      rejectUnauthorized: !0,
      perMessageDeflate: {
        threshold: 1024
      },
      transportOptions: {},
      closeOnBeforeunload: !1
    }, t), this.opts.path = this.opts.path.replace(/\/$/, "") + (this.opts.addTrailingSlash ? "/" : ""), typeof this.opts.query == "string" && (this.opts.query = aC(this.opts.query)), xu && (this.opts.closeOnBeforeunload && (this._beforeunloadEventListener = () => {
      this.transport && (this.transport.removeAllListeners(), this.transport.close());
    }, addEventListener("beforeunload", this._beforeunloadEventListener, !1)), this.hostname !== "localhost" && (this._offlineEventListener = () => {
      this._onClose("transport close", {
        description: "network connection lost"
      });
    }, Qa.push(this._offlineEventListener))), this.opts.withCredentials && (this._cookieJar = void 0), this._open();
  }
  /**
   * Creates transport of the given type.
   *
   * @param {String} name - transport name
   * @return {Transport}
   * @private
   */
  createTransport(e) {
    const t = Object.assign({}, this.opts.query);
    t.EIO = ab, t.transport = e, this.id && (t.sid = this.id);
    const n = Object.assign({}, this.opts, {
      query: t,
      socket: this,
      hostname: this.hostname,
      secure: this.secure,
      port: this.port
    }, this.opts.transportOptions[e]);
    return new this._transportsByName[e](n);
  }
  /**
   * Initializes transport to use and starts probe.
   *
   * @private
   */
  _open() {
    if (this.transports.length === 0) {
      this.setTimeoutFn(() => {
        this.emitReserved("error", "No transports available");
      }, 0);
      return;
    }
    const e = this.opts.rememberUpgrade && Zn.priorWebsocketSuccess && this.transports.indexOf("websocket") !== -1 ? "websocket" : this.transports[0];
    this.readyState = "opening";
    const t = this.createTransport(e);
    t.open(), this.setTransport(t);
  }
  /**
   * Sets the current transport. Disables the existing one (if any).
   *
   * @private
   */
  setTransport(e) {
    this.transport && this.transport.removeAllListeners(), this.transport = e, e.on("drain", this._onDrain.bind(this)).on("packet", this._onPacket.bind(this)).on("error", this._onError.bind(this)).on("close", (t) => this._onClose("transport close", t));
  }
  /**
   * Called when connection is deemed open.
   *
   * @private
   */
  onOpen() {
    this.readyState = "open", Zn.priorWebsocketSuccess = this.transport.name === "websocket", this.emitReserved("open"), this.flush();
  }
  /**
   * Handles a packet.
   *
   * @private
   */
  _onPacket(e) {
    if (this.readyState === "opening" || this.readyState === "open" || this.readyState === "closing")
      switch (this.emitReserved("packet", e), this.emitReserved("heartbeat"), e.type) {
        case "open":
          this.onHandshake(JSON.parse(e.data));
          break;
        case "ping":
          this._sendPacket("pong"), this.emitReserved("ping"), this.emitReserved("pong"), this._resetPingTimeout();
          break;
        case "error":
          const t = new Error("server error");
          t.code = e.data, this._onError(t);
          break;
        case "message":
          this.emitReserved("data", e.data), this.emitReserved("message", e.data);
          break;
      }
  }
  /**
   * Called upon handshake completion.
   *
   * @param {Object} data - handshake obj
   * @private
   */
  onHandshake(e) {
    this.emitReserved("handshake", e), this.id = e.sid, this.transport.query.sid = e.sid, this._pingInterval = e.pingInterval, this._pingTimeout = e.pingTimeout, this._maxPayload = e.maxPayload, this.onOpen(), this.readyState !== "closed" && this._resetPingTimeout();
  }
  /**
   * Sets and resets ping timeout timer based on server pings.
   *
   * @private
   */
  _resetPingTimeout() {
    this.clearTimeoutFn(this._pingTimeoutTimer);
    const e = this._pingInterval + this._pingTimeout;
    this._pingTimeoutTime = Date.now() + e, this._pingTimeoutTimer = this.setTimeoutFn(() => {
      this._onClose("ping timeout");
    }, e), this.opts.autoUnref && this._pingTimeoutTimer.unref();
  }
  /**
   * Called on `drain` event
   *
   * @private
   */
  _onDrain() {
    this.writeBuffer.splice(0, this._prevBufferLen), this._prevBufferLen = 0, this.writeBuffer.length === 0 ? this.emitReserved("drain") : this.flush();
  }
  /**
   * Flush write buffers.
   *
   * @private
   */
  flush() {
    if (this.readyState !== "closed" && this.transport.writable && !this.upgrading && this.writeBuffer.length) {
      const e = this._getWritablePackets();
      this.transport.send(e), this._prevBufferLen = e.length, this.emitReserved("flush");
    }
  }
  /**
   * Ensure the encoded size of the writeBuffer is below the maxPayload value sent by the server (only for HTTP
   * long-polling)
   *
   * @private
   */
  _getWritablePackets() {
    if (!(this._maxPayload && this.transport.name === "polling" && this.writeBuffer.length > 1))
      return this.writeBuffer;
    let t = 1;
    for (let n = 0; n < this.writeBuffer.length; n++) {
      const r = this.writeBuffer[n].data;
      if (r && (t += sC(r)), n > 0 && t > this._maxPayload)
        return this.writeBuffer.slice(0, n);
      t += 2;
    }
    return this.writeBuffer;
  }
  /**
   * Checks whether the heartbeat timer has expired but the socket has not yet been notified.
   *
   * Note: this method is private for now because it does not really fit the WebSocket API, but if we put it in the
   * `write()` method then the message would not be buffered by the Socket.IO client.
   *
   * @return {boolean}
   * @private
   */
  /* private */
  _hasPingExpired() {
    if (!this._pingTimeoutTime)
      return !0;
    const e = Date.now() > this._pingTimeoutTime;
    return e && (this._pingTimeoutTime = 0, lc(() => {
      this._onClose("ping timeout");
    }, this.setTimeoutFn)), e;
  }
  /**
   * Sends a message.
   *
   * @param {String} msg - message.
   * @param {Object} options.
   * @param {Function} fn - callback function.
   * @return {Socket} for chaining.
   */
  write(e, t, n) {
    return this._sendPacket("message", e, t, n), this;
  }
  /**
   * Sends a message. Alias of {@link Socket#write}.
   *
   * @param {String} msg - message.
   * @param {Object} options.
   * @param {Function} fn - callback function.
   * @return {Socket} for chaining.
   */
  send(e, t, n) {
    return this._sendPacket("message", e, t, n), this;
  }
  /**
   * Sends a packet.
   *
   * @param {String} type: packet type.
   * @param {String} data.
   * @param {Object} options.
   * @param {Function} fn - callback function.
   * @private
   */
  _sendPacket(e, t, n, r) {
    if (typeof t == "function" && (r = t, t = void 0), typeof n == "function" && (r = n, n = null), this.readyState === "closing" || this.readyState === "closed")
      return;
    n = n || {}, n.compress = n.compress !== !1;
    const s = {
      type: e,
      data: t,
      options: n
    };
    this.emitReserved("packetCreate", s), this.writeBuffer.push(s), r && this.once("flush", r), this.flush();
  }
  /**
   * Closes the connection.
   */
  close() {
    const e = () => {
      this._onClose("forced close"), this.transport.close();
    }, t = () => {
      this.off("upgrade", t), this.off("upgradeError", t), e();
    }, n = () => {
      this.once("upgrade", t), this.once("upgradeError", t);
    };
    return (this.readyState === "opening" || this.readyState === "open") && (this.readyState = "closing", this.writeBuffer.length ? this.once("drain", () => {
      this.upgrading ? n() : e();
    }) : this.upgrading ? n() : e()), this;
  }
  /**
   * Called upon transport error
   *
   * @private
   */
  _onError(e) {
    if (Zn.priorWebsocketSuccess = !1, this.opts.tryAllTransports && this.transports.length > 1 && this.readyState === "opening")
      return this.transports.shift(), this._open();
    this.emitReserved("error", e), this._onClose("transport error", e);
  }
  /**
   * Called upon transport close.
   *
   * @private
   */
  _onClose(e, t) {
    if (this.readyState === "opening" || this.readyState === "open" || this.readyState === "closing") {
      if (this.clearTimeoutFn(this._pingTimeoutTimer), this.transport.removeAllListeners("close"), this.transport.close(), this.transport.removeAllListeners(), xu && (this._beforeunloadEventListener && removeEventListener("beforeunload", this._beforeunloadEventListener, !1), this._offlineEventListener)) {
        const n = Qa.indexOf(this._offlineEventListener);
        n !== -1 && Qa.splice(n, 1);
      }
      this.readyState = "closed", this.id = null, this.emitReserved("close", e, t), this.writeBuffer = [], this._prevBufferLen = 0;
    }
  }
}
Zn.protocol = ab;
class vC extends Zn {
  constructor() {
    super(...arguments), this._upgrades = [];
  }
  onOpen() {
    if (super.onOpen(), this.readyState === "open" && this.opts.upgrade)
      for (let e = 0; e < this._upgrades.length; e++)
        this._probe(this._upgrades[e]);
  }
  /**
   * Probes a transport.
   *
   * @param {String} name - transport name
   * @private
   */
  _probe(e) {
    let t = this.createTransport(e), n = !1;
    Zn.priorWebsocketSuccess = !1;
    const r = () => {
      n || (t.send([{ type: "ping", data: "probe" }]), t.once("packet", (f) => {
        if (!n)
          if (f.type === "pong" && f.data === "probe") {
            if (this.upgrading = !0, this.emitReserved("upgrading", t), !t)
              return;
            Zn.priorWebsocketSuccess = t.name === "websocket", this.transport.pause(() => {
              n || this.readyState !== "closed" && (c(), this.setTransport(t), t.send([{ type: "upgrade" }]), this.emitReserved("upgrade", t), t = null, this.upgrading = !1, this.flush());
            });
          } else {
            const u = new Error("probe error");
            u.transport = t.name, this.emitReserved("upgradeError", u);
          }
      }));
    };
    function s() {
      n || (n = !0, c(), t.close(), t = null);
    }
    const o = (f) => {
      const u = new Error("probe error: " + f);
      u.transport = t.name, s(), this.emitReserved("upgradeError", u);
    };
    function l() {
      o("transport closed");
    }
    function a() {
      o("socket closed");
    }
    function h(f) {
      t && f.name !== t.name && s();
    }
    const c = () => {
      t.removeListener("open", r), t.removeListener("error", o), t.removeListener("close", l), this.off("close", a), this.off("upgrading", h);
    };
    t.once("open", r), t.once("error", o), t.once("close", l), this.once("close", a), this.once("upgrading", h), this._upgrades.indexOf("webtransport") !== -1 && e !== "webtransport" ? this.setTimeoutFn(() => {
      n || t.open();
    }, 200) : t.open();
  }
  onHandshake(e) {
    this._upgrades = this._filterUpgrades(e.upgrades), super.onHandshake(e);
  }
  /**
   * Filters upgrades, returning only those matching client transports.
   *
   * @param {Array} upgrades - server upgrades
   * @private
   */
  _filterUpgrades(e) {
    const t = [];
    for (let n = 0; n < e.length; n++)
      ~this.transports.indexOf(e[n]) && t.push(e[n]);
    return t;
  }
}
let QC = class extends vC {
  constructor(e, t = {}) {
    const n = typeof e == "object" ? e : t;
    (!n.transports || n.transports && typeof n.transports[0] == "string") && (n.transports = (n.transports || ["polling", "websocket", "webtransport"]).map((r) => SC[r]).filter((r) => !!r)), super(e, n);
  }
};
function PC(i, e = "", t) {
  let n = i;
  t = t || typeof location < "u" && location, i == null && (i = t.protocol + "//" + t.host), typeof i == "string" && (i.charAt(0) === "/" && (i.charAt(1) === "/" ? i = t.protocol + i : i = t.host + i), /^(https?|wss?):\/\//.test(i) || (typeof t < "u" ? i = t.protocol + "//" + i : i = "https://" + i), n = bu(i)), n.port || (/^(http|ws)$/.test(n.protocol) ? n.port = "80" : /^(http|ws)s$/.test(n.protocol) && (n.port = "443")), n.path = n.path || "/";
  const s = n.host.indexOf(":") !== -1 ? "[" + n.host + "]" : n.host;
  return n.id = n.protocol + "://" + s + ":" + n.port + e, n.href = n.protocol + "://" + s + (t && t.port === n.port ? "" : ":" + n.port), n;
}
const $C = typeof ArrayBuffer == "function", TC = (i) => typeof ArrayBuffer.isView == "function" ? ArrayBuffer.isView(i) : i.buffer instanceof ArrayBuffer, Ob = Object.prototype.toString, CC = typeof Blob == "function" || typeof Blob < "u" && Ob.call(Blob) === "[object BlobConstructor]", RC = typeof File == "function" || typeof File < "u" && Ob.call(File) === "[object FileConstructor]";
function lp(i) {
  return $C && (i instanceof ArrayBuffer || TC(i)) || CC && i instanceof Blob || RC && i instanceof File;
}
function Pa(i, e) {
  if (!i || typeof i != "object")
    return !1;
  if (Array.isArray(i)) {
    for (let t = 0, n = i.length; t < n; t++)
      if (Pa(i[t]))
        return !0;
    return !1;
  }
  if (lp(i))
    return !0;
  if (i.toJSON && typeof i.toJSON == "function" && arguments.length === 1)
    return Pa(i.toJSON(), !0);
  for (const t in i)
    if (Object.prototype.hasOwnProperty.call(i, t) && Pa(i[t]))
      return !0;
  return !1;
}
function AC(i) {
  const e = [], t = i.data, n = i;
  return n.data = wu(t, e), n.attachments = e.length, { packet: n, buffers: e };
}
function wu(i, e) {
  if (!i)
    return i;
  if (lp(i)) {
    const t = { _placeholder: !0, num: e.length };
    return e.push(i), t;
  } else if (Array.isArray(i)) {
    const t = new Array(i.length);
    for (let n = 0; n < i.length; n++)
      t[n] = wu(i[n], e);
    return t;
  } else if (typeof i == "object" && !(i instanceof Date)) {
    const t = {};
    for (const n in i)
      Object.prototype.hasOwnProperty.call(i, n) && (t[n] = wu(i[n], e));
    return t;
  }
  return i;
}
function EC(i, e) {
  return i.data = ku(i.data, e), delete i.attachments, i;
}
function ku(i, e) {
  if (!i)
    return i;
  if (i && i._placeholder === !0) {
    if (typeof i.num == "number" && i.num >= 0 && i.num < e.length)
      return e[i.num];
    throw new Error("illegal attachments");
  } else if (Array.isArray(i))
    for (let t = 0; t < i.length; t++)
      i[t] = ku(i[t], e);
  else if (typeof i == "object")
    for (const t in i)
      Object.prototype.hasOwnProperty.call(i, t) && (i[t] = ku(i[t], e));
  return i;
}
const MC = [
  "connect",
  "connect_error",
  "disconnect",
  "disconnecting",
  "newListener",
  "removeListener"
  // used by the Node.js EventEmitter
], qC = 5;
var ue;
(function(i) {
  i[i.CONNECT = 0] = "CONNECT", i[i.DISCONNECT = 1] = "DISCONNECT", i[i.EVENT = 2] = "EVENT", i[i.ACK = 3] = "ACK", i[i.CONNECT_ERROR = 4] = "CONNECT_ERROR", i[i.BINARY_EVENT = 5] = "BINARY_EVENT", i[i.BINARY_ACK = 6] = "BINARY_ACK";
})(ue || (ue = {}));
class _C {
  /**
   * Encoder constructor
   *
   * @param {function} replacer - custom replacer to pass down to JSON.parse
   */
  constructor(e) {
    this.replacer = e;
  }
  /**
   * Encode a packet as a single string if non-binary, or as a
   * buffer sequence, depending on packet type.
   *
   * @param {Object} obj - packet object
   */
  encode(e) {
    return (e.type === ue.EVENT || e.type === ue.ACK) && Pa(e) ? this.encodeAsBinary({
      type: e.type === ue.EVENT ? ue.BINARY_EVENT : ue.BINARY_ACK,
      nsp: e.nsp,
      data: e.data,
      id: e.id
    }) : [this.encodeAsString(e)];
  }
  /**
   * Encode packet as string.
   */
  encodeAsString(e) {
    let t = "" + e.type;
    return (e.type === ue.BINARY_EVENT || e.type === ue.BINARY_ACK) && (t += e.attachments + "-"), e.nsp && e.nsp !== "/" && (t += e.nsp + ","), e.id != null && (t += e.id), e.data != null && (t += JSON.stringify(e.data, this.replacer)), t;
  }
  /**
   * Encode packet as 'buffer sequence' by removing blobs, and
   * deconstructing packet into object with placeholders and
   * a list of buffers.
   */
  encodeAsBinary(e) {
    const t = AC(e), n = this.encodeAsString(t.packet), r = t.buffers;
    return r.unshift(n), r;
  }
}
function Ym(i) {
  return Object.prototype.toString.call(i) === "[object Object]";
}
class ap extends je {
  /**
   * Decoder constructor
   *
   * @param {function} reviver - custom reviver to pass down to JSON.stringify
   */
  constructor(e) {
    super(), this.reviver = e;
  }
  /**
   * Decodes an encoded packet string into packet JSON.
   *
   * @param {String} obj - encoded packet
   */
  add(e) {
    let t;
    if (typeof e == "string") {
      if (this.reconstructor)
        throw new Error("got plaintext data when reconstructing a packet");
      t = this.decodeString(e);
      const n = t.type === ue.BINARY_EVENT;
      n || t.type === ue.BINARY_ACK ? (t.type = n ? ue.EVENT : ue.ACK, this.reconstructor = new XC(t), t.attachments === 0 && super.emitReserved("decoded", t)) : super.emitReserved("decoded", t);
    } else if (lp(e) || e.base64)
      if (this.reconstructor)
        t = this.reconstructor.takeBinaryData(e), t && (this.reconstructor = null, super.emitReserved("decoded", t));
      else
        throw new Error("got binary data when not reconstructing a packet");
    else
      throw new Error("Unknown type: " + e);
  }
  /**
   * Decode a packet String (JSON data)
   *
   * @param {String} str
   * @return {Object} packet
   */
  decodeString(e) {
    let t = 0;
    const n = {
      type: Number(e.charAt(0))
    };
    if (ue[n.type] === void 0)
      throw new Error("unknown packet type " + n.type);
    if (n.type === ue.BINARY_EVENT || n.type === ue.BINARY_ACK) {
      const s = t + 1;
      for (; e.charAt(++t) !== "-" && t != e.length; )
        ;
      const o = e.substring(s, t);
      if (o != Number(o) || e.charAt(t) !== "-")
        throw new Error("Illegal attachments");
      n.attachments = Number(o);
    }
    if (e.charAt(t + 1) === "/") {
      const s = t + 1;
      for (; ++t && !(e.charAt(t) === "," || t === e.length); )
        ;
      n.nsp = e.substring(s, t);
    } else
      n.nsp = "/";
    const r = e.charAt(t + 1);
    if (r !== "" && Number(r) == r) {
      const s = t + 1;
      for (; ++t; ) {
        const o = e.charAt(t);
        if (o == null || Number(o) != o) {
          --t;
          break;
        }
        if (t === e.length)
          break;
      }
      n.id = Number(e.substring(s, t + 1));
    }
    if (e.charAt(++t)) {
      const s = this.tryParse(e.substr(t));
      if (ap.isPayloadValid(n.type, s))
        n.data = s;
      else
        throw new Error("invalid payload");
    }
    return n;
  }
  tryParse(e) {
    try {
      return JSON.parse(e, this.reviver);
    } catch {
      return !1;
    }
  }
  static isPayloadValid(e, t) {
    switch (e) {
      case ue.CONNECT:
        return Ym(t);
      case ue.DISCONNECT:
        return t === void 0;
      case ue.CONNECT_ERROR:
        return typeof t == "string" || Ym(t);
      case ue.EVENT:
      case ue.BINARY_EVENT:
        return Array.isArray(t) && (typeof t[0] == "number" || typeof t[0] == "string" && MC.indexOf(t[0]) === -1);
      case ue.ACK:
      case ue.BINARY_ACK:
        return Array.isArray(t);
    }
  }
  /**
   * Deallocates a parser's resources
   */
  destroy() {
    this.reconstructor && (this.reconstructor.finishedReconstruction(), this.reconstructor = null);
  }
}
class XC {
  constructor(e) {
    this.packet = e, this.buffers = [], this.reconPack = e;
  }
  /**
   * Method to be called when binary data received from connection
   * after a BINARY_EVENT packet.
   *
   * @param {Buffer | ArrayBuffer} binData - the raw binary data received
   * @return {null | Object} returns null if more binary data is expected or
   *   a reconstructed packet object if all buffers have been received.
   */
  takeBinaryData(e) {
    if (this.buffers.push(e), this.buffers.length === this.reconPack.attachments) {
      const t = EC(this.reconPack, this.buffers);
      return this.finishedReconstruction(), t;
    }
    return null;
  }
  /**
   * Cleans up binary packet reconstruction variables.
   */
  finishedReconstruction() {
    this.reconPack = null, this.buffers = [];
  }
}
const LC = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  Decoder: ap,
  Encoder: _C,
  get PacketType() {
    return ue;
  },
  protocol: qC
}, Symbol.toStringTag, { value: "Module" }));
function hi(i, e, t) {
  return i.on(e, t), function() {
    i.off(e, t);
  };
}
const BC = Object.freeze({
  connect: 1,
  connect_error: 1,
  disconnect: 1,
  disconnecting: 1,
  // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener
  newListener: 1,
  removeListener: 1
});
class pb extends je {
  /**
   * `Socket` constructor.
   */
  constructor(e, t, n) {
    super(), this.connected = !1, this.recovered = !1, this.receiveBuffer = [], this.sendBuffer = [], this._queue = [], this._queueSeq = 0, this.ids = 0, this.acks = {}, this.flags = {}, this.io = e, this.nsp = t, n && n.auth && (this.auth = n.auth), this._opts = Object.assign({}, n), this.io._autoConnect && this.open();
  }
  /**
   * Whether the socket is currently disconnected
   *
   * @example
   * const socket = io();
   *
   * socket.on("connect", () => {
   *   console.log(socket.disconnected); // false
   * });
   *
   * socket.on("disconnect", () => {
   *   console.log(socket.disconnected); // true
   * });
   */
  get disconnected() {
    return !this.connected;
  }
  /**
   * Subscribe to open, close and packet events
   *
   * @private
   */
  subEvents() {
    if (this.subs)
      return;
    const e = this.io;
    this.subs = [
      hi(e, "open", this.onopen.bind(this)),
      hi(e, "packet", this.onpacket.bind(this)),
      hi(e, "error", this.onerror.bind(this)),
      hi(e, "close", this.onclose.bind(this))
    ];
  }
  /**
   * Whether the Socket will try to reconnect when its Manager connects or reconnects.
   *
   * @example
   * const socket = io();
   *
   * console.log(socket.active); // true
   *
   * socket.on("disconnect", (reason) => {
   *   if (reason === "io server disconnect") {
   *     // the disconnection was initiated by the server, you need to manually reconnect
   *     console.log(socket.active); // false
   *   }
   *   // else the socket will automatically try to reconnect
   *   console.log(socket.active); // true
   * });
   */
  get active() {
    return !!this.subs;
  }
  /**
   * "Opens" the socket.
   *
   * @example
   * const socket = io({
   *   autoConnect: false
   * });
   *
   * socket.connect();
   */
  connect() {
    return this.connected ? this : (this.subEvents(), this.io._reconnecting || this.io.open(), this.io._readyState === "open" && this.onopen(), this);
  }
  /**
   * Alias for {@link connect()}.
   */
  open() {
    return this.connect();
  }
  /**
   * Sends a `message` event.
   *
   * This method mimics the WebSocket.send() method.
   *
   * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send
   *
   * @example
   * socket.send("hello");
   *
   * // this is equivalent to
   * socket.emit("message", "hello");
   *
   * @return self
   */
  send(...e) {
    return e.unshift("message"), this.emit.apply(this, e), this;
  }
  /**
   * Override `emit`.
   * If the event is in `events`, it's emitted normally.
   *
   * @example
   * socket.emit("hello", "world");
   *
   * // all serializable datastructures are supported (no need to call JSON.stringify)
   * socket.emit("hello", 1, "2", { 3: ["4"], 5: Uint8Array.from([6]) });
   *
   * // with an acknowledgement from the server
   * socket.emit("hello", "world", (val) => {
   *   // ...
   * });
   *
   * @return self
   */
  emit(e, ...t) {
    var n, r, s;
    if (BC.hasOwnProperty(e))
      throw new Error('"' + e.toString() + '" is a reserved event name');
    if (t.unshift(e), this._opts.retries && !this.flags.fromQueue && !this.flags.volatile)
      return this._addToQueue(t), this;
    const o = {
      type: ue.EVENT,
      data: t
    };
    if (o.options = {}, o.options.compress = this.flags.compress !== !1, typeof t[t.length - 1] == "function") {
      const c = this.ids++, f = t.pop();
      this._registerAckCallback(c, f), o.id = c;
    }
    const l = (r = (n = this.io.engine) === null || n === void 0 ? void 0 : n.transport) === null || r === void 0 ? void 0 : r.writable, a = this.connected && !(!((s = this.io.engine) === null || s === void 0) && s._hasPingExpired());
    return this.flags.volatile && !l || (a ? (this.notifyOutgoingListeners(o), this.packet(o)) : this.sendBuffer.push(o)), this.flags = {}, this;
  }
  /**
   * @private
   */
  _registerAckCallback(e, t) {
    var n;
    const r = (n = this.flags.timeout) !== null && n !== void 0 ? n : this._opts.ackTimeout;
    if (r === void 0) {
      this.acks[e] = t;
      return;
    }
    const s = this.io.setTimeoutFn(() => {
      delete this.acks[e];
      for (let l = 0; l < this.sendBuffer.length; l++)
        this.sendBuffer[l].id === e && this.sendBuffer.splice(l, 1);
      t.call(this, new Error("operation has timed out"));
    }, r), o = (...l) => {
      this.io.clearTimeoutFn(s), t.apply(this, l);
    };
    o.withError = !0, this.acks[e] = o;
  }
  /**
   * Emits an event and waits for an acknowledgement
   *
   * @example
   * // without timeout
   * const response = await socket.emitWithAck("hello", "world");
   *
   * // with a specific timeout
   * try {
   *   const response = await socket.timeout(1000).emitWithAck("hello", "world");
   * } catch (err) {
   *   // the server did not acknowledge the event in the given delay
   * }
   *
   * @return a Promise that will be fulfilled when the server acknowledges the event
   */
  emitWithAck(e, ...t) {
    return new Promise((n, r) => {
      const s = (o, l) => o ? r(o) : n(l);
      s.withError = !0, t.push(s), this.emit(e, ...t);
    });
  }
  /**
   * Add the packet to the queue.
   * @param args
   * @private
   */
  _addToQueue(e) {
    let t;
    typeof e[e.length - 1] == "function" && (t = e.pop());
    const n = {
      id: this._queueSeq++,
      tryCount: 0,
      pending: !1,
      args: e,
      flags: Object.assign({ fromQueue: !0 }, this.flags)
    };
    e.push((r, ...s) => n !== this._queue[0] ? void 0 : (r !== null ? n.tryCount > this._opts.retries && (this._queue.shift(), t && t(r)) : (this._queue.shift(), t && t(null, ...s)), n.pending = !1, this._drainQueue())), this._queue.push(n), this._drainQueue();
  }
  /**
   * Send the first packet of the queue, and wait for an acknowledgement from the server.
   * @param force - whether to resend a packet that has not been acknowledged yet
   *
   * @private
   */
  _drainQueue(e = !1) {
    if (!this.connected || this._queue.length === 0)
      return;
    const t = this._queue[0];
    t.pending && !e || (t.pending = !0, t.tryCount++, this.flags = t.flags, this.emit.apply(this, t.args));
  }
  /**
   * Sends a packet.
   *
   * @param packet
   * @private
   */
  packet(e) {
    e.nsp = this.nsp, this.io._packet(e);
  }
  /**
   * Called upon engine `open`.
   *
   * @private
   */
  onopen() {
    typeof this.auth == "function" ? this.auth((e) => {
      this._sendConnectPacket(e);
    }) : this._sendConnectPacket(this.auth);
  }
  /**
   * Sends a CONNECT packet to initiate the Socket.IO session.
   *
   * @param data
   * @private
   */
  _sendConnectPacket(e) {
    this.packet({
      type: ue.CONNECT,
      data: this._pid ? Object.assign({ pid: this._pid, offset: this._lastOffset }, e) : e
    });
  }
  /**
   * Called upon engine or manager `error`.
   *
   * @param err
   * @private
   */
  onerror(e) {
    this.connected || this.emitReserved("connect_error", e);
  }
  /**
   * Called upon engine `close`.
   *
   * @param reason
   * @param description
   * @private
   */
  onclose(e, t) {
    this.connected = !1, delete this.id, this.emitReserved("disconnect", e, t), this._clearAcks();
  }
  /**
   * Clears the acknowledgement handlers upon disconnection, since the client will never receive an acknowledgement from
   * the server.
   *
   * @private
   */
  _clearAcks() {
    Object.keys(this.acks).forEach((e) => {
      if (!this.sendBuffer.some((n) => String(n.id) === e)) {
        const n = this.acks[e];
        delete this.acks[e], n.withError && n.call(this, new Error("socket has been disconnected"));
      }
    });
  }
  /**
   * Called with socket packet.
   *
   * @param packet
   * @private
   */
  onpacket(e) {
    if (e.nsp === this.nsp)
      switch (e.type) {
        case ue.CONNECT:
          e.data && e.data.sid ? this.onconnect(e.data.sid, e.data.pid) : this.emitReserved("connect_error", new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));
          break;
        case ue.EVENT:
        case ue.BINARY_EVENT:
          this.onevent(e);
          break;
        case ue.ACK:
        case ue.BINARY_ACK:
          this.onack(e);
          break;
        case ue.DISCONNECT:
          this.ondisconnect();
          break;
        case ue.CONNECT_ERROR:
          this.destroy();
          const n = new Error(e.data.message);
          n.data = e.data.data, this.emitReserved("connect_error", n);
          break;
      }
  }
  /**
   * Called upon a server event.
   *
   * @param packet
   * @private
   */
  onevent(e) {
    const t = e.data || [];
    e.id != null && t.push(this.ack(e.id)), this.connected ? this.emitEvent(t) : this.receiveBuffer.push(Object.freeze(t));
  }
  emitEvent(e) {
    if (this._anyListeners && this._anyListeners.length) {
      const t = this._anyListeners.slice();
      for (const n of t)
        n.apply(this, e);
    }
    super.emit.apply(this, e), this._pid && e.length && typeof e[e.length - 1] == "string" && (this._lastOffset = e[e.length - 1]);
  }
  /**
   * Produces an ack callback to emit with an event.
   *
   * @private
   */
  ack(e) {
    const t = this;
    let n = !1;
    return function(...r) {
      n || (n = !0, t.packet({
        type: ue.ACK,
        id: e,
        data: r
      }));
    };
  }
  /**
   * Called upon a server acknowledgement.
   *
   * @param packet
   * @private
   */
  onack(e) {
    const t = this.acks[e.id];
    typeof t == "function" && (delete this.acks[e.id], t.withError && e.data.unshift(null), t.apply(this, e.data));
  }
  /**
   * Called upon server connect.
   *
   * @private
   */
  onconnect(e, t) {
    this.id = e, this.recovered = t && this._pid === t, this._pid = t, this.connected = !0, this.emitBuffered(), this.emitReserved("connect"), this._drainQueue(!0);
  }
  /**
   * Emit buffered events (received and emitted).
   *
   * @private
   */
  emitBuffered() {
    this.receiveBuffer.forEach((e) => this.emitEvent(e)), this.receiveBuffer = [], this.sendBuffer.forEach((e) => {
      this.notifyOutgoingListeners(e), this.packet(e);
    }), this.sendBuffer = [];
  }
  /**
   * Called upon server disconnect.
   *
   * @private
   */
  ondisconnect() {
    this.destroy(), this.onclose("io server disconnect");
  }
  /**
   * Called upon forced client/server side disconnections,
   * this method ensures the manager stops tracking us and
   * that reconnections don't get triggered for this.
   *
   * @private
   */
  destroy() {
    this.subs && (this.subs.forEach((e) => e()), this.subs = void 0), this.io._destroy(this);
  }
  /**
   * Disconnects the socket manually. In that case, the socket will not try to reconnect.
   *
   * If this is the last active Socket instance of the {@link Manager}, the low-level connection will be closed.
   *
   * @example
   * const socket = io();
   *
   * socket.on("disconnect", (reason) => {
   *   // console.log(reason); prints "io client disconnect"
   * });
   *
   * socket.disconnect();
   *
   * @return self
   */
  disconnect() {
    return this.connected && this.packet({ type: ue.DISCONNECT }), this.destroy(), this.connected && this.onclose("io client disconnect"), this;
  }
  /**
   * Alias for {@link disconnect()}.
   *
   * @return self
   */
  close() {
    return this.disconnect();
  }
  /**
   * Sets the compress flag.
   *
   * @example
   * socket.compress(false).emit("hello");
   *
   * @param compress - if `true`, compresses the sending data
   * @return self
   */
  compress(e) {
    return this.flags.compress = e, this;
  }
  /**
   * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not
   * ready to send messages.
   *
   * @example
   * socket.volatile.emit("hello"); // the server may or may not receive it
   *
   * @returns self
   */
  get volatile() {
    return this.flags.volatile = !0, this;
  }
  /**
   * Sets a modifier for a subsequent event emission that the callback will be called with an error when the
   * given number of milliseconds have elapsed without an acknowledgement from the server:
   *
   * @example
   * socket.timeout(5000).emit("my-event", (err) => {
   *   if (err) {
   *     // the server did not acknowledge the event in the given delay
   *   }
   * });
   *
   * @returns self
   */
  timeout(e) {
    return this.flags.timeout = e, this;
  }
  /**
   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the
   * callback.
   *
   * @example
   * socket.onAny((event, ...args) => {
   *   console.log(`got ${event}`);
   * });
   *
   * @param listener
   */
  onAny(e) {
    return this._anyListeners = this._anyListeners || [], this._anyListeners.push(e), this;
  }
  /**
   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the
   * callback. The listener is added to the beginning of the listeners array.
   *
   * @example
   * socket.prependAny((event, ...args) => {
   *   console.log(`got event ${event}`);
   * });
   *
   * @param listener
   */
  prependAny(e) {
    return this._anyListeners = this._anyListeners || [], this._anyListeners.unshift(e), this;
  }
  /**
   * Removes the listener that will be fired when any event is emitted.
   *
   * @example
   * const catchAllListener = (event, ...args) => {
   *   console.log(`got event ${event}`);
   * }
   *
   * socket.onAny(catchAllListener);
   *
   * // remove a specific listener
   * socket.offAny(catchAllListener);
   *
   * // or remove all listeners
   * socket.offAny();
   *
   * @param listener
   */
  offAny(e) {
    if (!this._anyListeners)
      return this;
    if (e) {
      const t = this._anyListeners;
      for (let n = 0; n < t.length; n++)
        if (e === t[n])
          return t.splice(n, 1), this;
    } else
      this._anyListeners = [];
    return this;
  }
  /**
   * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,
   * e.g. to remove listeners.
   */
  listenersAny() {
    return this._anyListeners || [];
  }
  /**
   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the
   * callback.
   *
   * Note: acknowledgements sent to the server are not included.
   *
   * @example
   * socket.onAnyOutgoing((event, ...args) => {
   *   console.log(`sent event ${event}`);
   * });
   *
   * @param listener
   */
  onAnyOutgoing(e) {
    return this._anyOutgoingListeners = this._anyOutgoingListeners || [], this._anyOutgoingListeners.push(e), this;
  }
  /**
   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the
   * callback. The listener is added to the beginning of the listeners array.
   *
   * Note: acknowledgements sent to the server are not included.
   *
   * @example
   * socket.prependAnyOutgoing((event, ...args) => {
   *   console.log(`sent event ${event}`);
   * });
   *
   * @param listener
   */
  prependAnyOutgoing(e) {
    return this._anyOutgoingListeners = this._anyOutgoingListeners || [], this._anyOutgoingListeners.unshift(e), this;
  }
  /**
   * Removes the listener that will be fired when any event is emitted.
   *
   * @example
   * const catchAllListener = (event, ...args) => {
   *   console.log(`sent event ${event}`);
   * }
   *
   * socket.onAnyOutgoing(catchAllListener);
   *
   * // remove a specific listener
   * socket.offAnyOutgoing(catchAllListener);
   *
   * // or remove all listeners
   * socket.offAnyOutgoing();
   *
   * @param [listener] - the catch-all listener (optional)
   */
  offAnyOutgoing(e) {
    if (!this._anyOutgoingListeners)
      return this;
    if (e) {
      const t = this._anyOutgoingListeners;
      for (let n = 0; n < t.length; n++)
        if (e === t[n])
          return t.splice(n, 1), this;
    } else
      this._anyOutgoingListeners = [];
    return this;
  }
  /**
   * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,
   * e.g. to remove listeners.
   */
  listenersAnyOutgoing() {
    return this._anyOutgoingListeners || [];
  }
  /**
   * Notify the listeners for each packet sent
   *
   * @param packet
   *
   * @private
   */
  notifyOutgoingListeners(e) {
    if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {
      const t = this._anyOutgoingListeners.slice();
      for (const n of t)
        n.apply(this, e.data);
    }
  }
}
function Es(i) {
  i = i || {}, this.ms = i.min || 100, this.max = i.max || 1e4, this.factor = i.factor || 2, this.jitter = i.jitter > 0 && i.jitter <= 1 ? i.jitter : 0, this.attempts = 0;
}
Es.prototype.duration = function() {
  var i = this.ms * Math.pow(this.factor, this.attempts++);
  if (this.jitter) {
    var e = Math.random(), t = Math.floor(e * this.jitter * i);
    i = (Math.floor(e * 10) & 1) == 0 ? i - t : i + t;
  }
  return Math.min(i, this.max) | 0;
};
Es.prototype.reset = function() {
  this.attempts = 0;
};
Es.prototype.setMin = function(i) {
  this.ms = i;
};
Es.prototype.setMax = function(i) {
  this.max = i;
};
Es.prototype.setJitter = function(i) {
  this.jitter = i;
};
class vu extends je {
  constructor(e, t) {
    var n;
    super(), this.nsps = {}, this.subs = [], e && typeof e == "object" && (t = e, e = void 0), t = t || {}, t.path = t.path || "/socket.io", this.opts = t, ac(this, t), this.reconnection(t.reconnection !== !1), this.reconnectionAttempts(t.reconnectionAttempts || 1 / 0), this.reconnectionDelay(t.reconnectionDelay || 1e3), this.reconnectionDelayMax(t.reconnectionDelayMax || 5e3), this.randomizationFactor((n = t.randomizationFactor) !== null && n !== void 0 ? n : 0.5), this.backoff = new Es({
      min: this.reconnectionDelay(),
      max: this.reconnectionDelayMax(),
      jitter: this.randomizationFactor()
    }), this.timeout(t.timeout == null ? 2e4 : t.timeout), this._readyState = "closed", this.uri = e;
    const r = t.parser || LC;
    this.encoder = new r.Encoder(), this.decoder = new r.Decoder(), this._autoConnect = t.autoConnect !== !1, this._autoConnect && this.open();
  }
  reconnection(e) {
    return arguments.length ? (this._reconnection = !!e, e || (this.skipReconnect = !0), this) : this._reconnection;
  }
  reconnectionAttempts(e) {
    return e === void 0 ? this._reconnectionAttempts : (this._reconnectionAttempts = e, this);
  }
  reconnectionDelay(e) {
    var t;
    return e === void 0 ? this._reconnectionDelay : (this._reconnectionDelay = e, (t = this.backoff) === null || t === void 0 || t.setMin(e), this);
  }
  randomizationFactor(e) {
    var t;
    return e === void 0 ? this._randomizationFactor : (this._randomizationFactor = e, (t = this.backoff) === null || t === void 0 || t.setJitter(e), this);
  }
  reconnectionDelayMax(e) {
    var t;
    return e === void 0 ? this._reconnectionDelayMax : (this._reconnectionDelayMax = e, (t = this.backoff) === null || t === void 0 || t.setMax(e), this);
  }
  timeout(e) {
    return arguments.length ? (this._timeout = e, this) : this._timeout;
  }
  /**
   * Starts trying to reconnect if reconnection is enabled and we have not
   * started reconnecting yet
   *
   * @private
   */
  maybeReconnectOnOpen() {
    !this._reconnecting && this._reconnection && this.backoff.attempts === 0 && this.reconnect();
  }
  /**
   * Sets the current transport `socket`.
   *
   * @param {Function} fn - optional, callback
   * @return self
   * @public
   */
  open(e) {
    if (~this._readyState.indexOf("open"))
      return this;
    this.engine = new QC(this.uri, this.opts);
    const t = this.engine, n = this;
    this._readyState = "opening", this.skipReconnect = !1;
    const r = hi(t, "open", function() {
      n.onopen(), e && e();
    }), s = (l) => {
      this.cleanup(), this._readyState = "closed", this.emitReserved("error", l), e ? e(l) : this.maybeReconnectOnOpen();
    }, o = hi(t, "error", s);
    if (this._timeout !== !1) {
      const l = this._timeout, a = this.setTimeoutFn(() => {
        r(), s(new Error("timeout")), t.close();
      }, l);
      this.opts.autoUnref && a.unref(), this.subs.push(() => {
        this.clearTimeoutFn(a);
      });
    }
    return this.subs.push(r), this.subs.push(o), this;
  }
  /**
   * Alias for open()
   *
   * @return self
   * @public
   */
  connect(e) {
    return this.open(e);
  }
  /**
   * Called upon transport open.
   *
   * @private
   */
  onopen() {
    this.cleanup(), this._readyState = "open", this.emitReserved("open");
    const e = this.engine;
    this.subs.push(
      hi(e, "ping", this.onping.bind(this)),
      hi(e, "data", this.ondata.bind(this)),
      hi(e, "error", this.onerror.bind(this)),
      hi(e, "close", this.onclose.bind(this)),
      // @ts-ignore
      hi(this.decoder, "decoded", this.ondecoded.bind(this))
    );
  }
  /**
   * Called upon a ping.
   *
   * @private
   */
  onping() {
    this.emitReserved("ping");
  }
  /**
   * Called with data.
   *
   * @private
   */
  ondata(e) {
    try {
      this.decoder.add(e);
    } catch (t) {
      this.onclose("parse error", t);
    }
  }
  /**
   * Called when parser fully decodes a packet.
   *
   * @private
   */
  ondecoded(e) {
    lc(() => {
      this.emitReserved("packet", e);
    }, this.setTimeoutFn);
  }
  /**
   * Called upon socket error.
   *
   * @private
   */
  onerror(e) {
    this.emitReserved("error", e);
  }
  /**
   * Creates a new socket for the given `nsp`.
   *
   * @return {Socket}
   * @public
   */
  socket(e, t) {
    let n = this.nsps[e];
    return n ? this._autoConnect && !n.active && n.connect() : (n = new pb(this, e, t), this.nsps[e] = n), n;
  }
  /**
   * Called upon a socket close.
   *
   * @param socket
   * @private
   */
  _destroy(e) {
    const t = Object.keys(this.nsps);
    for (const n of t)
      if (this.nsps[n].active)
        return;
    this._close();
  }
  /**
   * Writes a packet.
   *
   * @param packet
   * @private
   */
  _packet(e) {
    const t = this.encoder.encode(e);
    for (let n = 0; n < t.length; n++)
      this.engine.write(t[n], e.options);
  }
  /**
   * Clean up transport subscriptions and packet buffer.
   *
   * @private
   */
  cleanup() {
    this.subs.forEach((e) => e()), this.subs.length = 0, this.decoder.destroy();
  }
  /**
   * Close the current socket.
   *
   * @private
   */
  _close() {
    this.skipReconnect = !0, this._reconnecting = !1, this.onclose("forced close");
  }
  /**
   * Alias for close()
   *
   * @private
   */
  disconnect() {
    return this._close();
  }
  /**
   * Called when:
   *
   * - the low-level engine is closed
   * - the parser encountered a badly formatted packet
   * - all sockets are disconnected
   *
   * @private
   */
  onclose(e, t) {
    var n;
    this.cleanup(), (n = this.engine) === null || n === void 0 || n.close(), this.backoff.reset(), this._readyState = "closed", this.emitReserved("close", e, t), this._reconnection && !this.skipReconnect && this.reconnect();
  }
  /**
   * Attempt a reconnection.
   *
   * @private
   */
  reconnect() {
    if (this._reconnecting || this.skipReconnect)
      return this;
    const e = this;
    if (this.backoff.attempts >= this._reconnectionAttempts)
      this.backoff.reset(), this.emitReserved("reconnect_failed"), this._reconnecting = !1;
    else {
      const t = this.backoff.duration();
      this._reconnecting = !0;
      const n = this.setTimeoutFn(() => {
        e.skipReconnect || (this.emitReserved("reconnect_attempt", e.backoff.attempts), !e.skipReconnect && e.open((r) => {
          r ? (e._reconnecting = !1, e.reconnect(), this.emitReserved("reconnect_error", r)) : e.onreconnect();
        }));
      }, t);
      this.opts.autoUnref && n.unref(), this.subs.push(() => {
        this.clearTimeoutFn(n);
      });
    }
  }
  /**
   * Called upon successful reconnect.
   *
   * @private
   */
  onreconnect() {
    const e = this.backoff.attempts;
    this._reconnecting = !1, this.backoff.reset(), this.emitReserved("reconnect", e);
  }
}
const Ws = {};
function $a(i, e) {
  typeof i == "object" && (e = i, i = void 0), e = e || {};
  const t = PC(i, e.path || "/socket.io"), n = t.source, r = t.id, s = t.path, o = Ws[r] && s in Ws[r].nsps, l = e.forceNew || e["force new connection"] || e.multiplex === !1 || o;
  let a;
  return l ? a = new vu(n, e) : (Ws[r] || (Ws[r] = new vu(n, e)), a = Ws[r]), t.query && !e.query && (e.query = t.queryKey), a.socket(t.path, e);
}
Object.assign($a, {
  Manager: vu,
  Socket: pb,
  io: $a,
  connect: $a
});
const de = [], ZC = (i) => {
  de.push(i);
}, Gm = (i) => {
  const e = de.findIndex((n) => n.uniqueId === i);
  if (e === -1)
    return;
  const t = de[e];
  return de.splice(e, 1), t;
}, mb = [
  "a[href]",
  "area[href]",
  "input:not([disabled])",
  "select:not([disabled])",
  "textarea:not([disabled])",
  "button:not([disabled])",
  "iframe",
  "[tabindex]",
  "[contentEditable=true]"
].reduce((i, e, t) => `${i}${t ? "," : ""}${e}:not([tabindex="-1"])`, "");
let Yc = !1;
const Dt = ({ from: i, stopAtRootElement: e, ignoreElement: t = [], allowSelectors: n, direction: r = "forwards", wrap: s }) => {
  let o, l = !1;
  if (i instanceof Element)
    l = bo(i), o = i;
  else {
    if (i === "activeElement") {
      const p = document.activeElement;
      l = bo(p), o = Fm(p);
    }
    typeof i == "object" && (i.getActiveElement && (o = Fm(i.el)), l = i.isIframe);
  }
  const a = o, h = a.parentElement, c = l, f = a, u = mb + (n ? "," + n.join(",") : "");
  if (!f)
    return null;
  const d = (p, m) => {
    let g = !1;
    const S = p.children, x = S.length;
    if (Yc && (g = !0), r === "forwards")
      for (let k = 0; k < x; k++) {
        const w = S[k];
        if (g) {
          const b = uh(w, u, r, t);
          if (b)
            return b;
          continue;
        }
        if (w === e)
          return null;
        if (w === m) {
          g = !0;
          continue;
        }
      }
    else
      for (let k = x - 1; k >= 0; k--) {
        const w = S[k];
        if (g) {
          const b = uh(w, u, r, t);
          if (b)
            return b;
          continue;
        }
        if (w === e)
          return null;
        if (w === m) {
          g = !0;
          continue;
        }
      }
    if (m = p, p = p.parentElement, !p && c) {
      const k = document.activeElement;
      k && bo(k) && (m = k, p = k.parentElement);
    }
    return p ? d(p, m) : null;
  };
  let O = d(h, f);
  return !O && s && e && (Yc = !0, O = Dt({
    from: e,
    allowSelectors: n,
    direction: r,
    ignoreElement: t,
    // stopAtElement,
    wrap: !1
  })), Yc = !1, O;
}, gb = (i) => {
  try {
    return i.contentWindow;
  } catch {
    return null;
  }
}, DC = (i) => {
  const e = gb(i);
  return e ? e.document : null;
}, Fm = (i) => {
  if (!bo(i))
    return i;
  const e = DC(i);
  return e && e.activeElement || i;
}, Hm = (i, e = window) => {
  const t = (r) => r.display === "none" || r.visibility === "hidden";
  if (i.style && t(i.style) || i.hidden)
    return !0;
  const n = e.getComputedStyle(i);
  return !!(!n || t(n));
}, uh = (i, e = mb, t = "forwards", n = [], r = window, s = !0) => {
  const o = (f) => {
    if (!f.matches(e))
      return {
        el: f,
        matched: !1
      };
    const u = f.getAttribute("tabindex");
    if (bo(f) && (!u || u === "-1")) {
      const d = gb(f);
      return d ? (f = d.document.documentElement, r = d, { el: f, matched: !1, windowContext: d }) : { el: f, matched: !0 };
    }
    return {
      el: f,
      matched: !0
    };
  };
  if (s) {
    if (n.some((O) => O === i) || Hm(i, r))
      return null;
    const { el: f, matched: u, windowContext: d } = o(i);
    return i = f, u ? i : (r = d || r, uh(i, e, t, n, r, !1));
  }
  const l = i.shadowRoot;
  l && (i = l);
  const a = i.children, h = a.length, c = (f) => {
    if (n.some((m) => m === f) || Hm(f, r))
      return {
        continue: !0
      };
    const { el: u, matched: d, windowContext: O } = o(f);
    if (f = u, r = O || r, d)
      return { returnVal: f };
    const p = uh(f, e, t, n, r, !1);
    return p ? { returnVal: p } : null;
  };
  if (t === "forwards")
    for (let f = 0; f < h; f++) {
      let u = a[f];
      const d = c(u);
      if (d) {
        if (d.continue)
          continue;
        if (d.returnVal)
          return d.returnVal;
      }
    }
  else
    for (let f = h - 1; f >= 0; f--) {
      let u = a[f];
      const d = c(u);
      if (d) {
        if (d.continue)
          continue;
        if (d.returnVal)
          return d.returnVal;
      }
    }
  return null;
}, bo = (i) => i.tagName === "IFRAME", hp = (i) => i.offsetHeight === 0 && i.offsetWidth === 0, yb = (i) => Object.getPrototypeOf(i) === Object.prototype, Ye = (i, { inputElement: e, type: t, subType: n }) => {
  if (e === "menuPopup")
    return i.menuPopupEl;
  if (e === "menuButton")
    return ei(i.menuBtnEls);
  if (t === "focusElementOnOpen") {
    if (yb(e))
      return Ye(i, {
        inputElement: e.target,
        type: "focusElementOnOpen"
      });
    if (e === "none")
      return null;
    if (e === "firstChild")
      return Dt({
        from: i.focusSentinelBeforeEl,
        stopAtRootElement: i.containerEl
      });
    if (typeof e == "string")
      return i.containerEl?.querySelector(e);
    if (e instanceof Element)
      return e;
    if (typeof e == "object")
      return Ye(i, {
        inputElement: e.target,
        type: "focusElementOnOpen"
      });
    const r = e();
    return typeof r == "string" ? i.containerEl?.querySelector(r) : r;
  }
  if (e == null && t === "menuPopup")
    return i.containerEl ? i.menuPopupEl ? i.menuPopupEl : i.containerEl.children[1] : null;
  if (typeof e == "string" && t === "menuButton" || typeof e == "string")
    return document.querySelector(e);
  if (e instanceof Element)
    return e;
  if (typeof e == "function") {
    const r = e();
    if (r instanceof Element)
      return r;
    if (t === "closeButton")
      return i.containerEl ? i.containerEl.querySelector(r) : null;
  }
  if (t === "focusElementOnClose") {
    if (!e)
      return null;
    switch (n) {
      case "tabForwards":
        return Ye(i, { inputElement: e.tabForwards });
      case "tabBackwards":
        return Ye(i, { inputElement: e.tabBackwards });
      case "click":
        return Ye(i, { inputElement: e.click });
      case "escapeKey":
        return Ye(i, { inputElement: e.escapeKey });
      case "scrolling":
        return Ye(i, { inputElement: e.scrolling });
    }
  }
  if (e == null)
    return null;
  if (Array.isArray(e))
    return e.map((r) => Ye(i, { inputElement: r, type: t }));
  for (const r in e) {
    const s = e[r];
    return Ye(i, { inputElement: s });
  }
  return null;
}, dh = (i) => {
  const e = (t) => {
    const n = (s) => s.visibility === "hidden";
    if (t.style && n(t.style) || t.hidden)
      return !0;
    const r = window.getComputedStyle(t);
    return !!(!r || n(r));
  };
  return hp(i) || e(i);
}, fi = (i, e, t) => {
  for (let n = i.length - 1; n >= 0; n--) {
    const { item: r, continue: s } = e(i[n]);
    if (r && t(r), !s)
      return;
  }
}, VC = (i, e) => {
  const { timeouts: t, closeWhenMenuButtonIsClicked: n, focusedMenuBtn: r, onClickOutsideMenuButtonRef: s, setOpen: o, open: l, deadMenuButton: a, closeWhenClickingOutside: h } = i;
  i.menuBtnMouseDownFired = !1;
  const c = e.currentTarget;
  if (H.focusedMenuBtns.forEach((f) => f.el = null), !a) {
    if (i.menuBtnKeyupTabFired = !1, r.el = c, H.focusedMenuBtns.add(r), !h) {
      const f = de[de.length - 1];
      f && !f.menuBtnEls.includes(c) && !f.containerEl.contains(c) && fi(de, (u) => ({ item: u, continue: !0 }), (u) => {
        const { setOpen: d } = u;
        d(!1);
      });
    }
    if (!n) {
      o(!0);
      return;
    }
    l() && (H.closedByEvents = !0), o(!l());
  }
}, WC = (i, e) => {
  const { containerEl: t, focusedMenuBtn: n, overlay: r, setOpen: s, timeouts: o, menuBtnMouseDownFired: l, closeWhenDocumentBlurs: a, closeWhenClickingOutside: h, open: c } = i, f = e.currentTarget;
  if (queueMicrotask(() => {
    wb();
  }), i.menuBtnKeyupTabFired) {
    i.menuBtnKeyupTabFired = !1;
    return;
  }
  if (l || t && t.contains(e.relatedTarget))
    return;
  if (!h && c()) {
    document.addEventListener("keydown", cc);
    return;
  }
  const u = H.clickTarget, d = () => {
    const O = document.activeElement;
    if (!e.relatedTarget && O && O.tagName, !(t && t.contains(O)) && !(!a && !document.hasFocus()) && !H.closedBySetOpen && f.isConnected) {
      if (dh(f)) {
        let p = !1;
        if (i.menuBtnEls?.some((m) => m === f || dh(m) ? !1 : u && !m.contains(u) ? (p = !0, !1) : (m.focus(), !0)), !p)
          return;
      }
      i.open() && (H.closedByEvents = !0, n.el = null, s(!1));
    }
  };
  o.menuButtonBlurTimeoutId = window.setTimeout(d);
}, zC = (i, e) => {
  const { focusMenuButtonOnMouseDown: t } = i, n = e.currentTarget;
  i.menuBtnMouseDownFired = !0, n.addEventListener("click", i.onClickMenuButtonRef), t && (n.addEventListener("blur", i.onBlurMenuButtonRef), requestAnimationFrame(() => {
    n.focus();
  }));
}, IC = (i) => {
  i.focusedMenuBtn.el = null;
}, NC = (i, e) => {
  const { containerEl: t, setOpen: n, open: r, onKeydownMenuButtonRef: s, onBlurMenuButtonRef: o, mount: l, focusSentinelBeforeEl: a, focusSentinelAfterEl: h, ignoreMenuPopupWhenTabbing: c } = i, f = e.currentTarget;
  if (e.key !== "Tab" || (H.focusedMenuBtns.forEach((d) => d.el = null), !r()))
    return;
  if (i.menuBtnKeyupTabFired = !0, e.key === "Tab" && e.shiftKey) {
    if (H.closedByEvents = !0, !l || f.nextElementSibling !== t) {
      e.preventDefault();
      let d = Dt({
        from: f,
        direction: "backwards",
        ignoreElement: [
          t,
          a,
          h
        ]
      });
      d && d.focus();
    }
    n(!1), f.removeEventListener("keydown", s), f.removeEventListener("blur", o);
    return;
  }
  if (e.preventDefault(), c) {
    const d = Dt({
      from: f,
      direction: "forwards",
      ignoreElement: [
        t,
        a,
        h
      ]
    });
    d && d.focus(), n(!1), f.removeEventListener("keydown", s), f.removeEventListener("blur", o);
    return;
  }
  let u = Dt({
    from: a,
    stopAtRootElement: t
  });
  u ? u.focus() : t.focus(), u || (n(!1), u = Dt({
    from: a
  }), u && u.focus()), f.removeEventListener("keydown", s), f.removeEventListener("blur", o);
}, jC = (i, e) => {
  const { closeWhenMenuButtonIsTabbed: t, timeouts: n, deadMenuButton: r, menuBtnEls: s, focusedMenuBtn: o } = i, l = ei(s);
  if (l.addEventListener("click", i.onClickMenuButtonRef), l.addEventListener("blur", i.onBlurMenuButtonRef), l.addEventListener("keydown", i.onKeydownMenuButtonRef), o.el = e.currentTarget, window.setTimeout(() => {
  }), r) {
    l.addEventListener("blur", i.onBlurMenuButtonRef), l.addEventListener("keydown", i.onKeydownMenuButtonRef);
    return;
  }
  t || clearTimeout(n.containerFocusTimeoutId);
}, ei = (i) => {
  if (i)
    return i.length <= 1 ? i[0] : i.find((e) => {
      if (!(!e || hp(e)))
        return e;
    });
}, UC = ({ state: i, menuButton: e, open: t }) => {
  if (Array.isArray(e) && !e.length)
    return;
  const { focusedMenuBtn: n, containerEl: r } = i, s = Ye(i, {
    inputElement: e,
    type: "menuButton"
  });
  if (!s)
    return;
  i.menuBtnEls = Array.isArray(s) ? s : [s];
  const o = de.find((l) => l.uniqueId === i.uniqueId);
  o && (o.menuBtnEls = i.menuBtnEls), i.menuBtnEls.forEach((l, a, h) => {
    if (YC(i, l), l.addEventListener("mousedown", i.onMouseDownMenuButtonRef), l.addEventListener("focus", i.onFocusMenuButtonRef), n.el && n.el !== l && (!(h.length > 1) || !hp(l))) {
      if (n.el = l, r && r.contains(document.activeElement))
        return;
      l.focus({ preventScroll: !0 });
    }
  });
}, YC = (i, e) => {
  const { modal: t, uniqueId: n, deadMenuButton: r } = i;
  if (!r) {
    if (e.hasAttribute("type"))
      return;
    e.setAttribute("type", "button"), e.setAttribute("aria-expanded", "false");
  }
  t && (e.setAttribute("aria-controls", n), e.setAttribute("aria-haspopup", "dialog"));
}, GC = (i) => {
  const { menuBtnEls: e, deadMenuButton: t } = i;
  t && e && e.forEach((n) => {
    n.setAttribute("aria-expanded", "true");
  });
}, FC = (i) => {
  const { menuBtnEls: e, deadMenuButton: t } = i;
  t && e && e.forEach((n) => {
    n.setAttribute("aria-expanded", "false");
  });
}, HC = (i, e) => {
  !i || !i.menuBtnEls || (i.menuBtnMouseDownFired = !1, i.menuBtnEls.forEach((t) => {
    e && (t.removeEventListener("blur", i.onBlurMenuButtonRef), t.removeEventListener("keydown", i.onKeydownMenuButtonRef), t.removeEventListener("click", i.onClickMenuButtonRef), t.removeEventListener("focus", i.onFocusMenuButtonRef), t.removeEventListener("mousedown", i.onMouseDownMenuButtonRef));
  }));
}, KC = (i) => {
  if (H.thirdPartyPopupEl)
    return H.thirdPartyPopupEl = null, null;
  if (!document.hasFocus())
    return null;
  const e = H.clickTarget, n = i.map((r) => document.querySelector(r)).find((r) => r && r.contains(e)) || null;
  return H.thirdPartyPopupEl = n, n;
}, JC = (i) => {
  for (let e of i) {
    const t = document.querySelector(e);
    if (t && !dh(t))
      return t;
  }
  return null;
}, e2 = () => {
  document.addEventListener("click", Sb), document.addEventListener("keydown", bb, { capture: !0 });
}, hc = () => {
  document.removeEventListener("click", Sb), document.removeEventListener("keydown", bb, { capture: !0 }), H.thirdPartyPopupEl = null, H.thirdPartyPopupElPressedEscape = !1;
}, Sb = (i) => {
  const e = i.target, { thirdPartyPopupEl: t } = H;
  t && t.contains(e) || fi(de, (n) => {
    const { containerEl: r } = n;
    return r.contains(e) ? { continue: !1 } : { item: n, continue: !0 };
  }, (n) => {
    const { setOpen: r } = n;
    H.closedByEvents = !0, r(!1), hc();
  });
}, bb = (i) => {
  i.key === "Escape" && (H.thirdPartyPopupElPressedEscape = !0);
};
let Gc = !1, Qu = !1, zr = null, xb = 0, Pu = null, Ta = null;
const H = {
  closedBySetOpen: !1,
  documentClickTimeout: null,
  closedByEvents: !1,
  focusedMenuBtns: /* @__PURE__ */ new Set(),
  cursorKeysPrevEl: null,
  clickTarget: null,
  overlayMouseDown: !1,
  thirdPartyPopupEl: null,
  thirdPartyPopupElPressedEscape: !1
};
let Km = null;
const wb = () => {
  clearTimeout(Km), Km = window.setTimeout(() => {
    H.clickTarget = null;
  });
}, cp = () => {
  document.removeEventListener("pointerup", cp);
}, kb = (i) => {
  const e = i.target;
  H.clickTarget = e, document.addEventListener("pointerup", cp);
}, vb = (i) => {
  const e = de[de.length - 1];
  setTimeout(() => {
    const n = i.timeStamp - xb;
    if (!document.hasFocus() && n < 50) {
      fi(de, (r) => ({ item: r, continue: !0 }), (r) => {
        const { setOpen: s } = r;
        H.closedByEvents = !0, s(!1);
      });
      return;
    }
  });
  const t = (n) => {
    if (n.overlay || n.overlayEl || !n.closeWhenDocumentBlurs)
      return;
    ei(n.menuBtnEls).focus(), H.closedByEvents = !0, n.setOpen(!1);
  };
  e.overlay || setTimeout(() => {
    const n = document.activeElement;
    if (!n || n.tagName !== "IFRAME") {
      fi(de, (r) => ({ item: r, continue: !0 }), (r) => t(r));
      return;
    }
    fi(de, (r) => {
      const { containerEl: s } = r;
      return s.contains(n) ? (Ta = n, Tb(), document.addEventListener("visibilitychange", $b), { continue: !1 }) : { item: r, continue: !0 };
    }, (r) => {
      const { setOpen: s } = r;
      H.closedByEvents = !0, s(!1);
    });
  });
}, cc = (i) => {
  i.key === "Tab" && setTimeout(() => {
    const e = document.activeElement, t = de[0];
    document.removeEventListener("keydown", cc), t && !t.menuBtnEls.some((n) => n && n.contains(e)) && fi(de, (n) => ({ item: n, continue: !0 }), (n) => {
      const { setOpen: r } = n;
      r(!1);
    });
  });
}, Qb = (i) => {
  const { setOpen: e, menuBtnEls: t, cursorKeys: n, closeWhenEscapeKeyIsPressed: r, focusElementOnClose: s, ignoreMenuPopupWhenTabbing: o, focusSentinelAfterEl: l, focusSentinelBeforeEl: a, mountedPopupsSafeList: h } = de[de.length - 1];
  if (i.key === "Tab") {
    if (o) {
      i.preventDefault();
      const f = i.shiftKey, u = ei(t), d = Dt({
        from: f ? a : l,
        direction: f ? "backwards" : "forwards",
        ignoreElement: u ? [u] : []
      });
      d && d.focus();
      return;
    }
    xb = i.timeStamp;
  }
  if (n && i2(i), i.key !== "Escape" || !r)
    return;
  if (H.thirdPartyPopupElPressedEscape) {
    H.thirdPartyPopupElPressedEscape = !1, hc();
    return;
  }
  if (h && h.length) {
    const f = JC(h);
    if (f) {
      window.setTimeout(() => {
        !f.isConnected || dh(f) || c();
      }, 100);
      return;
    }
  }
  function c() {
    const f = ei(t), u = Ye({}, {
      inputElement: s,
      type: "focusElementOnClose",
      subType: "escapeKey"
    }) || f;
    u && u.focus(), H.closedByEvents = !0, e(!1);
  }
  c();
}, fp = (i) => {
  const e = i.target;
  Pu !== e && fi(de, (t) => {
    const { menuPopupEl: n } = t;
    return n.contains(e) ? (Pu = e, { continue: !1 }) : { item: t, continue: !0 };
  }, (t) => {
    const { setOpen: n, focusElementOnClose: r, menuBtnEls: s } = t, o = ei(s);
    H.closedByEvents = !0, n(!1);
    const l = Ye({}, {
      inputElement: r,
      type: "focusElementOnClose",
      subType: "scrolling"
    }) || o;
    l && l.focus();
  });
}, t2 = (i) => {
  Pu = null, !Qu && i && (Qu = !1, window.addEventListener("wheel", fp, {
    capture: !0,
    passive: !0
  }), document.body.addEventListener("touchmove", Pb)), !de.length && (document.addEventListener("pointerdown", kb), document.addEventListener("pointerup", cp), document.addEventListener("keydown", Qb), window.addEventListener("blur", vb));
}, Jm = () => {
  de.length || (Qu = !1, H.cursorKeysPrevEl = null, H.clickTarget = null, window.clearTimeout(H.documentClickTimeout), H.documentClickTimeout = null, document.removeEventListener("keydown", Qb), document.removeEventListener("pointerdown", kb), document.removeEventListener("keydown", cc), window.removeEventListener("blur", vb), window.removeEventListener("wheel", fp, {
    capture: !0
  }), document.body.removeEventListener("touchmove", Pb));
}, Pb = () => {
  Gc || (Gc = !0, document.body.addEventListener("touchend", () => {
    Gc = !1;
  }, { once: !0 }), window.addEventListener("scroll", fp, {
    capture: !0,
    passive: !0,
    once: !0
  }));
}, i2 = (i) => {
  const e = ["ArrowDown", "ArrowUp", "ArrowLeft", "ArrowRight"], t = ["ArrowLeft", "ArrowRight"];
  if (!e.includes(i.key) || (i.preventDefault(), t.includes(i.key)))
    return;
  const { menuBtnEls: n, menuPopupEl: r, containerEl: s, focusSentinelBeforeEl: o, focusSentinelAfterEl: l, cursorKeys: a } = de[de.length - 1], h = ei(n);
  let c = H.cursorKeysPrevEl || document.activeElement, f;
  i.key === "ArrowDown" ? f = "forwards" : f = "backwards", (c === h || c === r || c === s) && (i.key === "ArrowUp" ? (f = "backwards", c = l) : (f = "forwards", c = o));
  const u = typeof a == "object", d = u && a.wrap;
  let O = Dt({
    from: c,
    direction: f,
    stopAtRootElement: r
  });
  if (!O && d) {
    const p = i.key === "ArrowDown" ? o : l;
    f = i.key === "ArrowDown" ? "forwards" : "backwards", O = Dt({
      from: p,
      direction: f,
      stopAtRootElement: s
    });
  }
  if (u && a.onKeyDown) {
    a.onKeyDown({
      currentEl: O,
      prevEl: H.cursorKeysPrevEl
    }), H.cursorKeysPrevEl = O;
    return;
  }
  O && O.focus();
}, $b = () => {
  if (document.visibilityState === "visible" && zr != null) {
    Tb();
    return;
  }
  clearTimeout(zr);
}, Tb = () => {
  const e = () => {
    const t = document.activeElement;
    if (t) {
      if (Ta === t) {
        zr = window.setTimeout(e, 250);
        return;
      }
      fi(de, (n) => {
        const { containerEl: r } = n;
        return t.tagName === "IFRAME" ? r && !r.contains(t) ? { item: n, continue: !0 } : (Ta = t, zr = window.setTimeout(e, 250), { continue: !1 }) : r && !r.contains(t) ? { item: n, continue: !0 } : { continue: !1 };
      }, (n) => {
        const { setOpen: r } = n;
        H.closedByEvents = !0, r(!1), Ta = null, zr = null, document.removeEventListener("visibilitychange", $b);
      });
    }
  };
  zr = window.setTimeout(e, 250);
}, n2 = (i) => {
  const { menuPopup: e } = i;
  i.menuPopupAdded || (i.menuPopupEl = Ye(i, {
    inputElement: e,
    type: "menuPopup"
  }), i.menuPopupEl && (i.menuPopupAdded = !0, i.menuPopupEl.setAttribute("tabindex", "-1")));
}, eg = (i) => {
  i.menuPopupEl && i.menuPopupAdded && (i.menuPopupEl = null, i.menuPopupAdded = !1);
}, r2 = (i) => i.replace(/-./g, (e) => e.toUpperCase()[1]), $u = (i, e) => {
  const { onToggleScrollbar: t, removeScrollbar: n } = i;
  if (t) {
    if (e) {
      if (de.length > 1)
        return;
      t.onRemove();
    } else {
      if (de.length)
        return;
      t.onRestore();
    }
    return;
  }
  if (!n || de.length > 1)
    return;
  const r = document.scrollingElement;
  e ? r.style.overflow = "hidden" : r.style.overflow = "";
};
function s2(i) {
  requestAnimationFrame(() => {
    requestAnimationFrame(i);
  });
}
const o2 = (i) => {
  let e, t = !0, n = !1, r, s = !1, o = !!i.overlay;
  const [l, a] = ee(), [h, c] = ee(), f = sc(() => i.children), { onBeforeEnter: u, onEnter: d, onAfterEnter: O, onBeforeExit: p, onExit: m, onAfterExit: g, appendToElement: S, appear: x, state: k } = i, { onBeforeEnter: w, onEnter: b, onAfterEnter: Q, onBeforeExit: R, onExit: A, onAfterExit: _, appendToElement: $ } = i.overlay || {}, v = (M) => M === "content" ? u : w, X = (M) => M === "content" ? d : b, E = (M) => M === "content" ? O : Q, L = (M) => M === "content" ? p : R, G = (M) => M === "content" ? m : A, pe = (M) => M === "content" ? g : _;
  function U(M, he) {
    const ct = (M === "content" ? i.name : i.overlay?.name) || "s", tt = r2(he) + "Class", si = (M === "content" ? i : i.overlay)[tt];
    return si ? si.split(" ") : [`${ct}-${he}`];
  }
  const j = (M, he) => {
    const Se = M === "content" ? S : $;
    return Se ? Se === "menuPopup" && M !== "overlay" ? Ye({ containerEl: he }, { inputElement: null, type: "menuPopup" }) : typeof Se == "string" ? he && he.querySelector(Se) : Se : he;
  };
  let re, te;
  function T(M, he, Se) {
    if (s && (M === "content" ? re() : te()), !t || i.appear) {
      let St = function(Ds) {
        fe && (!Ds || Ds.target === fe) && (fe.removeEventListener("transitionend", St), fe.removeEventListener("animationend", St), fe.classList.remove(...Fn), fe.classList.remove(...Hn), ZS(() => {
          const Dc = n ? r : he;
          l() !== Dc && a(Dc), h() === Dc && c(void 0);
        }), si && si(fe), i.mode === "inout" && N(M, fe, Se));
      };
      var ct = St;
      const tt = X(M), Ne = v(M), si = E(M), kn = U(M, "enter"), Fn = U(M, "enter-active"), Hn = U(M, "enter-to"), fe = j(M, he);
      Ne && Ne(fe), fe.classList.add(...kn), fe.classList.add(...Fn), requestAnimationFrame(() => {
        requestAnimationFrame(() => {
          fe.classList.remove(...kn), fe.classList.add(...Hn);
        }), tt && tt(fe, () => St()), requestAnimationFrame(() => {
          (!tt || tt.length < 2) && (fe.addEventListener("transitionend", St), fe.addEventListener("animationend", St));
        });
      });
    }
    if (M === "content") {
      const tt = n ? r : he;
      Se && !i.mode ? c(tt) : a(tt);
    }
  }
  function N(M, he, Se) {
    s = !0;
    const ct = G(M), tt = L(M), Ne = pe(M), si = U(M, "exit"), kn = U(M, "exit-active"), Fn = U(M, "exit-to"), Hn = j(M, he), fe = j(M, Se);
    if (!fe.parentNode)
      return St();
    tt && tt(fe), fe.classList.add(...si), fe.classList.add(...kn), s2(() => {
      fe.classList.remove(...si), fe.classList.add(...Fn);
    }), ct && ct(fe, () => St()), (!ct || ct.length < 2) && (fe.addEventListener("transitionend", St), fe.addEventListener("animationend", St));
    function St(Ds) {
      (!Ds || Ds.target === fe) && (s = !1, fe.removeEventListener("transitionend", St), fe.removeEventListener("animationend", St), M === "content" && (fe.classList.remove(...kn), fe.classList.remove(...Fn)), M === "content" && (n && (Se.parentElement.remove(), $u(k, !1)), l() === Se && a(void 0)), Ne && Ne(fe), i.mode === "outin" && T(M, Hn, fe));
    }
    M === "content" ? re = St : te = St;
  }
  return ah((M) => {
    for (e = f(); typeof e == "function"; )
      e = e();
    if (e && e.nodeType === 3) {
      n = !0, r = e, r.willRemove = !1;
      const he = e.portalContainerChild;
      if (o) {
        const Se = e.portalOverlay;
        Object.defineProperty(he, "portalOverlay", {
          get() {
            return Se;
          },
          configurable: !0
        });
      }
      e = he;
    }
    return Je(() => (e && e !== M && (i.mode !== "outin" ? (T("content", e, M), o && T(
      "overlay",
      // @ts-ignore
      e.portalOverlay,
      // @ts-ignore
      M && M.portalOverlay
    )) : t && a(n ? r : e)), M && M !== e && i.mode !== "inout" && (N("content", e, M), o && N("overlay", e && e.portalOverlay, M.portalOverlay)), t = !1, e));
  }), [l, h];
}, tg = (i, { isCleanup: e = !1 } = {}) => {
  HC(i, e);
}, l2 = (i, e) => {
  const { overlayElement: t, trapFocus: n, timeouts: r, closeWhenDocumentBlurs: s, mountedPopupsSafeList: o } = i;
  if (Tu = !1, queueMicrotask(() => {
    wb();
  }), H.thirdPartyPopupEl && hc(), H.closedBySetOpen || H.overlayMouseDown || t && n || !s && !document.hasFocus())
    return;
  const l = de.length;
  c2(r, () => {
    if (o && KC(o)) {
      e2();
      return;
    }
    l < de.length || (H.closedByEvents = !0, fi(de, (a) => {
      const { containerEl: h, closeWhenClickingOutside: c } = a, f = H.clickTarget;
      return !c && f ? (document.addEventListener("keydown", cc), { continue: !1 }) : f && h.contains(f) ? { continue: !1 } : h.contains(document.activeElement) ? { continue: !1 } : { item: a, continue: !0 };
    }, (a) => {
      const { setOpen: h } = a;
      h(!1);
    }));
  });
}, a2 = (i, e) => {
  const { timeouts: t } = i;
  clearTimeout(t.containerFocusTimeoutId), clearTimeout(t.menuButtonBlurTimeoutId);
}, h2 = (i) => {
  const { focusElementOnOpen: e, focusedMenuBtn: t } = i;
  if (e == null)
    return;
  const n = Ye(i, {
    inputElement: e,
    type: "focusElementOnOpen"
  });
  n && setTimeout(() => {
    const r = yb(e) ? (
      // @ts-ignore
      !!e.preventScroll
    ) : n === i.menuPopupEl;
    n.focus({ preventScroll: r }), t.el = null;
  });
};
let Tu = !1;
const c2 = (i, e) => {
  i.containerFocusTimeoutId = window.setTimeout(() => {
    Tu || (Tu = !0, e());
  });
}, f2 = () => {
  H.overlayMouseDown = !0;
}, u2 = () => {
  H.overlayMouseDown = !1;
}, d2 = (i) => {
  const { closeWhenOverlayClicked: e, menuPopupEl: t, focusElementOnClose: n, menuBtnEls: r } = i;
  if (H.overlayMouseDown = !1, !e) {
    t.focus({ preventScroll: !0 });
    return;
  }
  const s = ei(r), o = Ye(i, {
    inputElement: n,
    type: "focusElementOnClose",
    subType: "click"
  }) || s;
  o && o.focus(), fi(de, (l) => l.overlayElement ? { continue: !1 } : { item: l, continue: !0 }, (l) => {
    const { setOpen: a } = l;
    H.closedByEvents = !0, a(!1);
  }), H.closedByEvents = !0, i.setOpen(!1);
}, O2 = ({ parent: i, matchEl: e }) => {
  if (i === e)
    return !0;
  const t = (n) => {
    if (!n)
      return !1;
    const r = n.children[0];
    return r === e ? !0 : t(r);
  };
  return t(i);
}, p2 = (i) => {
  const { enableLastFocusSentinel: e, menuBtnEls: t, containerEl: n, focusSentinelAfterEl: r } = i;
  if (e) {
    r.setAttribute("tabindex", "0");
    return;
  }
  if (!t)
    return;
  const o = ei(t).nextElementSibling;
  O2({
    parent: o,
    matchEl: n
  }) || r.setAttribute("tabindex", "0");
}, ig = (i, e, t) => {
  const { uniqueId: n, containerEl: r, menuBtnEls: s, focusSentinelBeforeEl: o, trapFocus: l, focusSentinelAfterEl: a, closeWhenMenuButtonIsTabbed: h, focusElementOnClose: c, mount: f, open: u, setOpen: d } = i, O = ei(s);
  de.forEach((g) => window.clearTimeout(g.timeouts.containerFocusTimeoutId));
  const p = (g, S) => {
    fi(de, (x) => S && ei(x.menuBtnEls) === g && !x.closeWhenMenuButtonIsTabbed ? { continue: !1 } : x.uniqueId === n || !x.containerEl.contains(g) ? { item: x, continue: !0 } : { continue: !1 }, (x) => {
      H.closedByEvents = !0, x.setOpen(!1);
    }), g && g.focus();
  };
  if (!u())
    return;
  if (O && (t === r || t === O)) {
    Dt({
      from: o,
      direction: "forwards",
      stopAtRootElement: r
    }).focus();
    return;
  }
  if (e === "before") {
    if (l) {
      Dt({
        from: a,
        direction: "backwards",
        stopAtRootElement: r
      }).focus();
      return;
    }
    if (h) {
      H.closedByEvents = !0, d(!1), O.focus();
      return;
    }
    const g = Ye(i, {
      inputElement: c,
      type: "focusElementOnClose",
      subType: "tabBackwards"
    }) || O;
    if (!i.menuBtnEls) {
      g.focus();
      return;
    }
    p(g, !0);
    return;
  }
  if (l) {
    Dt({
      from: o,
      stopAtRootElement: r
    }).focus();
    return;
  }
  const m = Ye(i, {
    inputElement: c,
    type: "focusElementOnClose",
    subType: "tabForwards"
  }) || Dt({
    from: O,
    ignoreElement: [r]
  });
  if (f) {
    p(m);
    return;
  }
  m && m.focus(), H.closedByEvents = !0, d(!1);
}, m2 = "http://www.w3.org/2000/svg";
function g2(i, e = !1) {
  return e ? document.createElementNS(m2, i) : document.createElement(i);
}
function y2(i) {
  const {
    useShadow: e,
    isModal: t
  } = i, n = document.createTextNode(""), r = i.mount || document.body;
  function s() {
    if (ae.context) {
      const [o, l] = ee(!1);
      return queueMicrotask(() => l(!0)), () => o() && i.children;
    } else return () => i.children;
  }
  if (r instanceof HTMLHeadElement) {
    const [o, l] = ee(!1), a = () => l(!0);
    dr((h) => F(r, () => o() ? h() : s()(), null)), ji(() => {
      ae.context ? queueMicrotask(a) : a();
    });
  } else {
    const o = g2(i.isSVG ? "g" : "div", i.isSVG), l = e && o.attachShadow ? o.attachShadow({
      mode: "open"
    }) : o, a = {
      get() {
        return n.parentNode;
      },
      configurable: !0
    };
    Object.defineProperty(o, "host", a), Object.defineProperty(o, "_$host", a), Object.defineProperty(n, "portalContainerChild", {
      get() {
        return h ? o.children[1] : o.firstElementChild;
      },
      configurable: !0
    }), Object.defineProperty(n, "portalContainer", {
      get() {
        return o;
      },
      configurable: !0
    }), Object.defineProperty(n, "portalMount", {
      get() {
        return r;
      },
      configurable: !0
    }), n.willRemove = !0, F(l, s());
    const h = i.overlayChildren;
    h && (Object.defineProperty(n, "portalOverlay", {
      get() {
        return h;
      },
      configurable: !0
    }), o.insertAdjacentElement("afterbegin", h)), r.appendChild(o), i.ref && i.ref(o), ji(() => {
      n.willRemove && r.removeChild(o);
    });
  }
  return n;
}
var S2 = /* @__PURE__ */ J("<div role=presentation>"), b2 = /* @__PURE__ */ J("<div><div style=position:fixed;top:0;left:0;outline:none;pointer-events:none;width:0;height:0; aria-hidden=true></div><div style=position:fixed;top:0;left:0;outline:none;pointer-events:none;width:0;height:0; aria-hidden=true>");
const x2 = (i) => {
  const e = i.modal || !1, {
    id: t,
    menuButton: n,
    menuPopup: r,
    focusElementOnClose: s,
    focusElementOnOpen: o = e ? "menuPopup" : void 0,
    focusMenuButtonOnMouseDown: l = !0,
    cursorKeys: a = !1,
    closeWhenMenuButtonIsTabbed: h = !1,
    closeWhenMenuButtonIsClicked: c = !0,
    closeWhenScrolling: f = !1,
    closeWhenDocumentBlurs: u = !1,
    closeWhenOverlayClicked: d = !0,
    closeWhenEscapeKeyIsPressed: O = !0,
    closeWhenClickingOutside: p = !0,
    overlay: m = e,
    overlayElement: g = e,
    trapFocus: S = e,
    removeScrollbar: x = e,
    enableLastFocusSentinel: k = !1,
    mount: w = e ? "body" : void 0,
    // stopComponentEventPropagation = false,
    show: b = !1,
    onToggleScrollbar: Q,
    onOpen: R,
    deadMenuButton: A,
    ignoreMenuPopupWhenTabbing: _,
    mountedPopupsSafeList: $
  } = i, v = {
    mount: w,
    modal: e,
    addedFocusOutAppEvents: !1,
    closeWhenOverlayClicked: d,
    closeWhenDocumentBlurs: u,
    closeWhenEscapeKeyIsPressed: O,
    closeWhenMenuButtonIsClicked: c,
    closeWhenMenuButtonIsTabbed: h,
    closeWhenScrolling: f,
    closeWhenClickingOutside: p,
    cursorKeys: a,
    focusElementOnClose: s,
    focusMenuButtonOnMouseDown: l,
    deadMenuButton: A,
    focusElementOnOpen: o,
    ignoreMenuPopupWhenTabbing: _,
    // @ts-ignore
    id: t,
    uniqueId: F$(),
    menuBtnId: "",
    focusedMenuBtn: {
      el: null
    },
    menuBtnKeyupTabFired: !1,
    menuButton: n,
    timeouts: {
      containerFocusTimeoutId: null,
      menuButtonBlurTimeoutId: null
    },
    upperStackRemovedByFocusOut: !1,
    menuPopup: r,
    closeByDismissEvent: !1,
    menuPopupAdded: !1,
    enableLastFocusSentinel: k,
    overlay: m,
    overlayElement: g,
    onToggleScrollbar: Q,
    removeScrollbar: x,
    trapFocus: S,
    hasFocusSentinels: !!s || m || !!g || S || k,
    mountedPopupsSafeList: $,
    open: i.open,
    setOpen: i.setOpen,
    onClickOutsideMenuButtonRef: () => IC(v),
    onClickOverlayRef: () => d2(v),
    onFocusInContainerRef: (T) => a2(v),
    onFocusOutContainerRef: (T) => l2(v),
    onBlurMenuButtonRef: (T) => WC(v, T),
    onClickMenuButtonRef: (T) => VC(v, T),
    onMouseDownMenuButtonRef: (T) => zC(v, T),
    onFocusMenuButtonRef: (T) => jC(v, T),
    onKeydownMenuButtonRef: (T) => NC(v, T),
    refContainerCb: (T) => {
      if (g && (T.style.zIndex = "1000", e)) {
        T.style.pointerEvents = "none", T.style.position = "relative";
        const N = (M) => {
          M.id || (M.id = v.uniqueId), M.style.pointerEvents = "all", M.setAttribute("role", "dialog");
        };
        requestAnimationFrame(() => {
          const M = T.querySelector('[role="dialog"]');
          if (!M) {
            const he = T.children;
            if (!he) return;
            const Se = he[1];
            N(Se);
            return;
          }
          N(M);
        });
      }
      i.ref && i.ref(T), v.containerEl = T;
    },
    refOverlayCb: (T) => {
      T.style.position = "fixed", T.style.top = "0", T.style.left = "0", T.style.width = "100%", T.style.height = "calc(100% + 100px)", T.style.zIndex = "1000", typeof g == "object" && g.ref && g.ref(T), v.overlayEl = T;
    }
  }, X = !i.open(), E = () => {
    const T = document.activeElement;
    if (T !== document.body && v.menuBtnEls.every((tt) => T !== tt) && !v.containerEl?.contains(T))
      return;
    const {
      menuBtnEls: N,
      focusedMenuBtn: M,
      timeouts: he
    } = v, Se = ei(N), ct = Ye(v, {
      inputElement: s,
      type: "focusElementOnClose",
      subType: "click"
    }) || Se;
    ct && ct.focus();
  }, L = () => typeof w == "string" ? document.querySelector(w) : w, G = () => {
    if (H.closedByEvents) return;
    const T = document.activeElement;
    if (
      // activeElement !== state.menuBtnEls
      v.menuBtnEls.every((N) => T !== N) && !v.containerEl?.contains(T)
    ) {
      setTimeout(() => {
        H.closedBySetOpen = !1;
      });
      return;
    }
    H.closedBySetOpen || (H.closedBySetOpen = !0, setTimeout(() => {
      H.closedBySetOpen = !1, E();
    }));
  };
  ah(Gr(() => !!i.open(), (T, N) => {
    T !== N && (T || (v.focusSentinelAfterEl && (v.focusSentinelAfterEl.tabIndex = -1), G()));
  }, {
    defer: X
  })), pi(Gr(() => typeof i.menuButton == "function" ? i.menuButton() : i.menuButton, (T) => {
    UC({
      state: v,
      menuButton: T,
      open: i.open
    }), ji(() => {
    });
  })), pi(Gr(() => !!i.open(), (T, N) => {
    T !== N && (T ? (H.closedByEvents = !1, n2(v), h2(v), GC(v), t2(f), ZC({
      // @ts-ignore
      id: t,
      uniqueId: v.uniqueId,
      open: i.open,
      setOpen: i.setOpen,
      containerEl: v.containerEl,
      menuBtnEls: v.menuBtnEls,
      focusedMenuBtn: v.focusedMenuBtn,
      overlayEl: v.overlayEl,
      menuPopupEl: v.menuPopupEl,
      overlay: m,
      closeWhenDocumentBlurs: u,
      closeWhenEscapeKeyIsPressed: O,
      closeWhenMenuButtonIsTabbed: h,
      closeWhenClickingOutside: p,
      overlayElement: g,
      cursorKeys: a,
      focusElementOnClose: s,
      focusSentinelBeforeEl: v.focusSentinelBeforeEl,
      focusSentinelAfterEl: v.focusSentinelAfterEl,
      ignoreMenuPopupWhenTabbing: _,
      upperStackRemovedByFocusOut: !1,
      detectIfMenuButtonObscured: !1,
      queueRemoval: !1,
      mountedPopupsSafeList: v.mountedPopupsSafeList,
      timeouts: v.timeouts
    }), R && R(T, {
      uniqueId: v.uniqueId,
      dismissStack: de
    }), $u(v, T), p2(v)) : (FC(v), H.closedByEvents = !1, tg(v), eg(v), Gm(v.uniqueId), Jm(), hc(), R && R(T, {
      uniqueId: v.uniqueId,
      dismissStack: de
    }), i.animation || $u(v, T)));
  }, {
    defer: X
  })), ji(() => {
    tg(v, {
      isCleanup: !0
    }), eg(v), Gm(v.uniqueId), Jm();
  });
  function pe() {
    return typeof i.overlayElement == "object" && i.overlayElement.element ? i.overlayElement.element : (() => {
      var T = S2(), N = v.refOverlayCb;
      return typeof N == "function" ? Wi(N, T) : v.refOverlayCb = T, Lr(T, "mouseup", u2, !0), Lr(T, "mousedown", f2, !0), Lr(T, "click", v.onClickOverlayRef, !0), De((M) => {
        var he = typeof i.overlayElement == "object" ? i.overlayElement.class : void 0, Se = typeof i.overlayElement == "object" ? i.overlayElement.classList || {} : {};
        return he !== M.e && Fr(T, M.e = he), M.t = fh(T, Se, M.t), M;
      }, {
        e: void 0,
        t: void 0
      }), T;
    })();
  }
  function U(T) {
    return (() => {
      var N = b2(), M = N.firstChild, he = M.nextSibling, Se = v.refContainerCb;
      typeof Se == "function" ? Wi(Se, N) : v.refContainerCb = N, Lr(N, "focusout", v.onFocusOutContainerRef, !0), Lr(N, "focusin", v.onFocusInContainerRef, !0);
      var ct = v.focusSentinelBeforeEl;
      typeof ct == "function" ? Wi(ct, M) : v.focusSentinelBeforeEl = M, M.addEventListener("focus", (Ne) => {
        ig(v, "before", Ne.relatedTarget);
      }), F(N, T, he);
      var tt = v.focusSentinelAfterEl;
      return typeof tt == "function" ? Wi(tt, he) : v.focusSentinelAfterEl = he, he.addEventListener("focus", () => {
        ig(v, "after");
      }), De((Ne) => {
        var si = v.id, kn = i.class, Fn = i.classList || {}, Hn = i.open() ? "0" : "-1", fe = i.open() && v.hasFocusSentinels ? "0" : "-1";
        return si !== Ne.e && Le(N, "id", Ne.e = si), kn !== Ne.t && Fr(N, Ne.t = kn), Ne.a = fh(N, Fn, Ne.a), Hn !== Ne.o && Le(M, "tabindex", Ne.o = Hn), fe !== Ne.i && Le(he, "tabindex", Ne.i = fe), Ne;
      }, {
        e: void 0,
        t: void 0,
        a: void 0,
        o: void 0,
        i: void 0
      }), N;
    })();
  }
  if (b) return U(i.children);
  let j = !1;
  const re = Ee(() => i.open(), !1, {
    equals: (T, N) => j ? T === N : !T == !N
  }), te = Ee(() => {
    const T = re();
    if (T) {
      const N = i.children, M = typeof N == "function" && N.length > 0;
      return j = M, M ? Je(() => N(T)) : w ? D(y2, {
        get mount() {
          return L();
        },
        get overlayChildren() {
          return g ? pe() : null;
        },
        get children() {
          return U(N);
        }
      }) : U(N);
    }
  });
  return i.animation ? D(o2, tp(() => i.animation, {
    get name() {
      return i.animation.name;
    },
    get enterClass() {
      return i.animation.enterClass;
    },
    get enterActiveClass() {
      return i.animation.enterActiveClass;
    },
    get enterToClass() {
      return i.animation.enterToClass;
    },
    get exitClass() {
      return i.animation.exitClass;
    },
    get exitActiveClass() {
      return i.animation.exitActiveClass;
    },
    get exitToClass() {
      return i.animation.exitToClass;
    },
    get appear() {
      return i.animation.appear;
    },
    get overlay() {
      return typeof i.overlayElement == "object" ? i.overlayElement.animation : void 0;
    },
    state: v,
    get children() {
      return te();
    }
  })) : te;
};
Hi(["click", "mousedown", "mouseup", "focusin", "focusout"]);
var w2 = /* @__PURE__ */ J("<svg>");
const oi = (i) => {
  const [e, t] = Y$(i, ["path"]);
  return (() => {
    var n = w2();
    return NS(n, tp({
      get viewBox() {
        return e.path.mini ? "0 0 20 20" : "0 0 24 24";
      },
      get fill() {
        return e.path.outline ? "none" : "currentColor";
      },
      get stroke() {
        return e.path.outline ? "currentColor" : "none";
      },
      get "stroke-width"() {
        return e.path.outline ? 1.5 : void 0;
      }
    }, t), !0, !0), F(n, () => e.path.path), n;
  })();
};
var k2 = /* @__PURE__ */ J('<svg><path stroke-linecap=round stroke-linejoin=round d="M13.5 4.5L21 12m0 0l-7.5 7.5M21 12H3"></svg>', !1, !0, !1), v2 = /* @__PURE__ */ J('<svg><path stroke-linecap=round stroke-linejoin=round d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"></svg>', !1, !0, !1), Q2 = /* @__PURE__ */ J('<svg><path stroke-linecap=round stroke-linejoin=round d="M17.25 6.75L22.5 12l-5.25 5.25m-10.5 0L1.5 12l5.25-5.25m7.5-3l-4.5 16.5"></svg>', !1, !0, !1), P2 = /* @__PURE__ */ J('<svg><path stroke-linecap=round stroke-linejoin=round d="M4.5 12a7.5 7.5 0 0015 0m-15 0a7.5 7.5 0 1115 0m-15 0H3m16.5 0H21m-1.5 0H12m-8.457 3.077l1.41-.513m14.095-5.13l1.41-.513M5.106 17.785l1.15-.964m11.49-9.642l1.149-.964M7.501 19.795l.75-1.3m7.5-12.99l.75-1.3m-6.063 16.658l.26-1.477m2.605-14.772l.26-1.477m0 17.726l-.26-1.477M10.698 4.614l-.26-1.477M16.5 19.794l-.75-1.299M7.5 4.205L12 12m6.894 5.785l-1.149-.964M6.256 7.178l-1.15-.964m15.352 8.864l-1.41-.513M4.954 9.435l-1.41-.514M12.002 12l-3.75 6.495"></svg>', !1, !0, !1), $2 = /* @__PURE__ */ J('<svg><path stroke-linecap=round stroke-linejoin=round d="M6.75 7.5l3 2.25-3 2.25m4.5 0h3m-9 8.25h13.5A2.25 2.25 0 0021 18V6a2.25 2.25 0 00-2.25-2.25H5.25A2.25 2.25 0 003 6v12a2.25 2.25 0 002.25 2.25z"></svg>', !1, !0, !1), T2 = /* @__PURE__ */ J('<svg><path stroke-linecap=round stroke-linejoin=round d="M9 17.25v1.007a3 3 0 01-.879 2.122L7.5 21h9l-.621-.621A3 3 0 0115 18.257V17.25m6-12V15a2.25 2.25 0 01-2.25 2.25H5.25A2.25 2.25 0 013 15V5.25m18 0A2.25 2.25 0 0018.75 3H5.25A2.25 2.25 0 003 5.25m18 0V12a2.25 2.25 0 01-2.25 2.25H5.25A2.25 2.25 0 013 12V5.25"></svg>', !1, !0, !1), C2 = /* @__PURE__ */ J('<svg><path stroke-linecap=round stroke-linejoin=round d="M21 7.5l-9-5.25L3 7.5m18 0l-9 5.25m9-5.25v9l-9 5.25M3 7.5l9 5.25M3 7.5v9l9 5.25m0-9v9"></svg>', !1, !0, !1), R2 = /* @__PURE__ */ J('<svg><path stroke-linecap=round stroke-linejoin=round d="M16.5 10.5V6.75a4.5 4.5 0 10-9 0v3.75m-.75 11.25h10.5a2.25 2.25 0 002.25-2.25v-6.75a2.25 2.25 0 00-2.25-2.25H6.75a2.25 2.25 0 00-2.25 2.25v6.75a2.25 2.25 0 002.25 2.25z"></svg>', !1, !0, !1), A2 = /* @__PURE__ */ J('<svg><path stroke-linecap=round stroke-linejoin=round d="M15.59 14.37a6 6 0 01-5.84 7.38v-4.8m5.84-2.58a14.98 14.98 0 006.16-12.12A14.98 14.98 0 009.631 8.41m5.96 5.96a14.926 14.926 0 01-5.841 2.58m-.119-8.54a6 6 0 00-7.381 5.84h4.8m2.581-5.84a14.927 14.927 0 00-2.58 5.84m2.699 2.7c-.103.021-.207.041-.311.06a15.09 15.09 0 01-2.448-2.448 14.9 14.9 0 01.06-.312m-2.24 2.39a4.493 4.493 0 00-1.757 4.306 4.493 4.493 0 004.306-1.758M16.5 9a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0z"></svg>', !1, !0, !1), E2 = /* @__PURE__ */ J('<svg><path stroke-linecap=round stroke-linejoin=round d="M12 3v2.25m6.364.386l-1.591 1.591M21 12h-2.25m-.386 6.364l-1.591-1.591M12 18.75V21m-4.773-4.227l-1.591 1.591M5.25 12H3m4.227-4.773L5.636 5.636M15.75 12a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0z"></svg>', !1, !0, !1), M2 = /* @__PURE__ */ J('<svg><path stroke-linecap=round stroke-linejoin=round d="M9.75 9.75l4.5 4.5m0-4.5l-4.5 4.5M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></svg>', !1, !0, !1);
const q2 = {
  path: () => k2(),
  outline: !0,
  mini: !1
}, _2 = {
  path: () => v2(),
  outline: !0,
  mini: !1
}, X2 = {
  path: () => Q2(),
  outline: !0,
  mini: !1
}, L2 = {
  path: () => P2(),
  outline: !0,
  mini: !1
}, B2 = {
  path: () => $2(),
  outline: !0,
  mini: !1
}, Z2 = {
  path: () => T2(),
  outline: !0,
  mini: !1
}, D2 = {
  path: () => C2(),
  outline: !0,
  mini: !1
}, V2 = {
  path: () => R2(),
  outline: !0,
  mini: !1
}, W2 = {
  path: () => A2(),
  outline: !0,
  mini: !1
}, z2 = {
  path: () => E2(),
  outline: !0,
  mini: !1
}, I2 = {
  path: () => M2(),
  outline: !0,
  mini: !1
};
var ng = /* @__PURE__ */ J('<button class="flex cursor-alias items-center gap-2 px-2 py-2 text-left text-neutral-800 dark:text-neutral-200 dark:hover:text-yellow-500 leading-0 uppercase tracking-widest">'), N2 = /* @__PURE__ */ J('<img class="h-8 w-8 rounded-full"crossorigin=anonymous>'), j2 = /* @__PURE__ */ J('<button class="cursor-alias hidden md:block">'), U2 = /* @__PURE__ */ J('<img class="h-10 w-10 rounded-full border-`1 border-neutral-200 dark:border-neutral-600 shadow-md"crossorigin=anonymous>'), Y2 = /* @__PURE__ */ J('<div class="dark:bg-neutral-900 absolute right-0 flex flex-col items-left justify-center bg-neutral-100 rounded-lg w-60 border border-neutral-600 dark:text-neutral-100 shadow-lg"> <div class="flex space-x-3 px-2 py-4 border-b border-neutral-600"> <div class=text-left> <p class="text-sm font-semibold text-gray-800 dark:text-gray-100"> <br><span class="text-xs text-gray-600 dark:text-gray-400 capitalize"></span></p></div></div><button class="flex cursor-alias items-center gap-2 px-4 py-2 text-left text-neutral-100 hover:bg-neutral-800"> Settings</button><button class="flex cursor-alias items-center gap-2 px-4 py-2 text-left text-neutral-100 hover:bg-neutral-800"> API Documentation</button><button class="flex cursor-alias items-center gap-2 px-4 py-2 text-left text-neutral-100 hover:bg-neutral-800"> Logout'), G2 = /* @__PURE__ */ J('<header class="dark:bg-neutral-900 border-b z-12 sticky top-0 flex items-center bg-white gap-x-4 border-slate-200 p-1 px-2 text-sm dark:border-neutral-800 mb-1"><div class="ml-auto md:flex md:flex-row md:items-center md:space-x-2"show></div><button type=button class="visible relative ml-auto rounded px-3 py-2 opacity-80 hover:opacity-100 md:hidden"title="Mobile Menu Button"><span class=sr-only>Show menu</span></button><div class="relative h-8 cursor-pointer leading-snug">'), F2 = /* @__PURE__ */ J('<button class="flex cursor-alias flex-row items-center space-x-2 rounded px-2 py-2 opacity-80 hover:opacity-100 md:px-1"><h1 class="leading-0 uppercase tracking-widest flex items-center gap-2 text-left"> <b>Project</b> Board'), H2 = /* @__PURE__ */ J('<button class="flex cursor-alias items-center gap-2 px-2 py-2 text-left text-neutral-800 dark:text-neutral-200 dark:hover:text-yellow-500 leading-0 uppercase tracking-widest"> Dashboard'), K2 = /* @__PURE__ */ J('<button class="flex cursor-alias items-center gap-2 px-2 py-2 text-left text-neutral-800 dark:text-neutral-200 dark:hover:text-yellow-500 leading-0 uppercase tracking-widest"> Editor'), J2 = /* @__PURE__ */ J('<button class="flex cursor-alias flex-row items-center gap-2 rounded px-2 py-1 opacity-80 hover:opacity-100 md:px-1 border border-neutral-600 rounded-md "> Login'), eR = /* @__PURE__ */ J('<div class="h-8 w-8 rounded-full bg-blue-600 text-white flex items-center justify-center font-semibold uppercase">'), tR = /* @__PURE__ */ J('<div class="h-8 w-8 rounded-full bg-blue-600 text-white flex items-center justify-center font-semibold uppercase border-2 border-gray-200 dark:border-gray-600 shadow-md">');
const Ms = (i) => {
  const [e, t] = ee(!1), n = wi(), [r, s] = ee(!1), [o, l] = ee(!1), [a, h] = ee(!1), [c, f] = ee("");
  let u, d;
  Nt(), window.addEventListener("resize", O), ji(() => {
    window.removeEventListener("resize", O);
  });
  function O() {
    s(!1);
  }
  function p(m) {
    window.location.href = m;
  }
  return pi(async () => {
    n.user()?.email && (n.user()?.image && f(n.user()?.image), h(!0));
  }), (() => {
    var m = G2(), g = m.firstChild, S = g.nextSibling, x = S.firstChild, k = S.nextSibling;
    F(m, () => i.children || [(() => {
      var b = F2(), Q = b.firstChild, R = Q.firstChild;
      return b.$$click = () => p("/"), F(Q, D(oi, {
        path: D2,
        class: "h-6"
      }), R), b;
    })(), (() => {
      var b = H2(), Q = b.firstChild;
      return b.$$click = () => p("/apps"), F(b, D(oi, {
        path: Z2,
        class: "h-6"
      }), Q), b;
    })(), (() => {
      var b = K2(), Q = b.firstChild;
      return b.$$click = () => p("/editor"), F(b, D(oi, {
        path: X2,
        class: "h-6"
      }), Q), b;
    })()], g), Le(g, "menubutton", () => u), g.open = r, Le(g, "setopen", s), F(g, D(cn, {
      get when() {
        return a();
      },
      get children() {
        return [(() => {
          var b = ng();
          return b.$$click = () => p("/dashboard"), F(b, D(oi, {
            path: z2,
            class: "h-6"
          })), b;
        })(), (() => {
          var b = ng();
          return b.$$click = () => p("/terminal"), F(b, D(oi, {
            path: B2,
            class: "h-6"
          })), b;
        })()];
      }
    }));
    var w = u;
    return typeof w == "function" ? Wi(w, S) : u = S, F(S, D(cn, {
      get when() {
        return r();
      },
      get fallback() {
        return D(oi, {
          path: _2,
          class: "h-6 w-6"
        });
      },
      get children() {
        return D(oi, {
          path: I2,
          class: "h-[22px] w-[22px]"
        });
      }
    }), x), F(k, D(cn, {
      get when() {
        return a();
      },
      get fallback() {
        return (() => {
          var b = J2(), Q = b.firstChild;
          return b.$$click = () => p("/login"), F(b, D(oi, {
            path: V2,
            class: "h-6"
          }), Q), b;
        })();
      },
      get children() {
        return [(() => {
          var b = j2(), Q = d;
          return typeof Q == "function" ? Wi(Q, b) : d = b, F(b, D(cn, {
            get when() {
              return n.user()?.image;
            },
            get fallback() {
              return (() => {
                var R = eR();
                return F(R, () => n.user()?.name?.[0] || n.user()?.email?.[0] || "U"), R;
              })();
            },
            get children() {
              var R = N2();
              return De((A) => {
                var _ = `${wr}/file/proxy?url=${encodeURIComponent(n.user()?.image || "")}`, $ = n.user()?.name;
                return _ !== A.e && Le(R, "src", A.e = _), $ !== A.t && Le(R, "alt", A.t = $), A;
              }, {
                e: void 0,
                t: void 0
              }), R;
            }
          })), b;
        })(), D(x2, {
          menuButton: () => d,
          open: o,
          setOpen: l,
          get children() {
            var b = Y2(), Q = b.firstChild, R = Q.nextSibling, A = R.firstChild, _ = A.nextSibling, $ = _.firstChild, v = $.nextSibling, X = v.firstChild, E = X.nextSibling, L = E.nextSibling, G = R.nextSibling, pe = G.firstChild, U = G.nextSibling, j = U.firstChild, re = U.nextSibling, te = re.firstChild;
            return R.$$click = () => p("/profile"), F(R, D(cn, {
              get when() {
                return n.user()?.image;
              },
              get fallback() {
                return (() => {
                  var T = tR();
                  return F(T, () => n.user()?.name?.[0] || n.user()?.email?.[0] || "U"), T;
                })();
              },
              get children() {
                var T = U2();
                return De((N) => {
                  var M = `${wr}/file/proxy?url=${encodeURIComponent(n.user()?.image || "")}`, he = n.user()?.name;
                  return M !== N.e && Le(T, "src", N.e = M), he !== N.t && Le(T, "alt", N.t = he), N;
                }, {
                  e: void 0,
                  t: void 0
                }), T;
              }
            }), _), F(v, () => n.user()?.name || n.user()?.email || "User", X), F(L, () => n.user()?.role || "Member"), G.$$click = () => p("/settings"), F(G, D(oi, {
              path: L2,
              class: "h-7"
            }), pe), U.$$click = () => p("/api"), F(U, D(oi, {
              path: W2,
              class: "h-7"
            }), j), re.$$click = () => p("/logout"), F(re, D(oi, {
              path: q2,
              class: "h-7"
            }), te), b;
          }
        })];
      }
    })), De((b) => fh(S, {
      "border-white border": r()
    }, b)), m;
  })();
};
Hi(["click"]);
var iR = /* @__PURE__ */ J('<div class="flex h-screen flex-col bg-white dark:bg-neutral-900/5 dark:text-white rounded-md"><div class="flex-1 overflow-auto scroll-smooth px-4 py-2 text-sm "><div id=outputMessage class="my-2 px-4 py-2"><pre class="font-normal whitespace-pre-wrap"></pre></div></div><div class="relative flex items-center justify-between gap-2 pb-4"><span>$</span><input type=text autofocus>'), nR = /* @__PURE__ */ J("<pre>"), rR = /* @__PURE__ */ J('<div class="z-10 rounded-md border border-neutral-600 bg-neutral-900 text-sm text-white shadow-lg"><div class="flex flex-col text-left">'), sR = /* @__PURE__ */ J('<button class="flex items-center gap-2 px-4 py-2 text-left text-neutral-100 hover:bg-neutral-800">'), oR = /* @__PURE__ */ J('<svg xmlns=http://www.w3.org/2000/svg width=24 height=24 viewBox="0 0 24 24"><path fill=#fff d="m20.713 8.128l-.246.566a.506.506 0 0 1-.934 0l-.246-.566a4.36 4.36 0 0 0-2.22-2.25l-.759-.339a.53.53 0 0 1 0-.963l.717-.319a4.37 4.37 0 0 0 2.251-2.326l.253-.611a.506.506 0 0 1 .942 0l.253.61a4.37 4.37 0 0 0 2.25 2.327l.718.32a.53.53 0 0 1 0 .962l-.76.338a4.36 4.36 0 0 0-2.219 2.251M12 4a8 8 0 1 0 7.944 7.045l1.986-.236Q22 11.396 22 12c0 5.523-4.477 10-10 10S2 17.523 2 12S6.477 2 12 2c.861 0 1.699.11 2.498.315L14 4.252A8 8 0 0 0 12 4m1 7h3l-5 7v-5H8l5-7z">'), lR = /* @__PURE__ */ J('<svg xmlns=http://www.w3.org/2000/svg width=24 height=24 viewBox="0 0 24 24"><path fill=none stroke=#fff d="M19 3H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2M7 7h10M7 12h10M7 17h6">'), aR = /* @__PURE__ */ J('<svg xmlns=http://www.w3.org/2000/svg width=24 height=24 viewBox="0 0 512 512"><path fill=#fff fill-rule=evenodd d="M256 42.667C138.18 42.667 42.667 138.179 42.667 256c0 117.82 95.513 213.334 213.333 213.334c117.822 0 213.334-95.513 213.334-213.334S373.822 42.667 256 42.667m0 384c-94.105 0-170.666-76.561-170.666-170.667S161.894 85.334 256 85.334c94.107 0 170.667 76.56 170.667 170.666S350.107 426.667 256 426.667m26.714-256c0 15.468-11.262 26.667-26.497 26.667c-15.851 0-26.837-11.2-26.837-26.963c0-15.15 11.283-26.37 26.837-26.37c15.235 0 26.497 11.22 26.497 26.666m-48 64h42.666v128h-42.666z">'), hR = /* @__PURE__ */ J('<svg xmlns=http://www.w3.org/2000/svg width=24 height=24 viewBox="0 0 24 24"><path fill=#fff d="M4 21h9.62a4 4 0 0 0 3.037-1.397l5.102-5.952a1 1 0 0 0-.442-1.6l-1.968-.656a3.04 3.04 0 0 0-2.823.503l-3.185 2.547l-.617-1.235A3.98 3.98 0 0 0 9.146 11H4c-1.103 0-2 .897-2 2v6c0 1.103.897 2 2 2m0-8h5.146c.763 0 1.448.423 1.789 1.105l.447.895H7v2h6.014a1 1 0 0 0 .442-.11l.003-.001l.004-.002h.003l.002-.001h.004l.001-.001c.009.003.003-.001.003-.001c.01 0 .002-.001.002-.001h.001l.002-.001l.003-.001l.002-.001l.002-.001l.003-.001l.002-.001c.003 0 .001-.001.002-.001l.003-.002l.002-.001l.002-.001l.003-.001l.002-.001h.001l.002-.001h.001l.002-.001l.002-.001c.009-.001.003-.001.003-.001l.002-.001a1 1 0 0 0 .11-.078l4.146-3.317c.262-.208.623-.273.94-.167l.557.186l-4.133 4.823a2.03 2.03 0 0 1-1.52.688H4zM16 2h-.017c-.163.002-1.006.039-1.983.705c-.951-.648-1.774-.7-1.968-.704L12.002 2h-.004c-.801 0-1.555.313-2.119.878C9.313 3.445 9 4.198 9 5s.313 1.555.861 2.104l3.414 3.586a1.006 1.006 0 0 0 1.45-.001l3.396-3.568C18.688 6.555 19 5.802 19 5s-.313-1.555-.878-2.121A2.98 2.98 0 0 0 16.002 2zm1 3c0 .267-.104.518-.311.725L14 8.55l-2.707-2.843C11.104 5.518 11 5.267 11 5s.104-.518.294-.708A.98.98 0 0 1 11.979 4c.025.001.502.032 1.067.485q.121.098.247.222l.707.707l.707-.707q.126-.124.247-.222c.529-.425.976-.478 1.052-.484a1 1 0 0 1 .701.292c.189.189.293.44.293.707">');
function cR() {
  const [i, e] = ee([]), [t, n] = ee(null), [r, s] = ee(""), [o, l] = ee("/home/your-username"), [a, h] = ee(""), [c, f] = ee("Disconnected"), [u, d] = ee(!1), [O, p] = ee({
    x: 0,
    y: 0
  }), [m, g] = ee([]);
  yl(), Nt(), As(), wi();
  let S, x;
  x && (x.disabled = !0);
  const k = ["Switch to AI", "Documentation", "Donate", "About"], w = ($) => {
    g(k.filter((v) => v.toLowerCase().includes($.toLowerCase().slice(1))));
  }, b = ($) => {
    const v = $.currentTarget.value;
    if (s(v), v.startsWith("/")) {
      const X = $.currentTarget.getBoundingClientRect();
      p({
        x: X.left,
        y: X.bottom
      }), d(!0), w(v);
    } else
      d(!1);
  }, Q = () => {
    S && (S.scrollTop = S.scrollHeight);
  }, R = ($, v) => {
    if ($ === "outputMessage" || $ === "error" && v === "Authentication required") {
      const E = document.getElementById("outputMessage");
      E && (E.innerHTML = `<pre class="${$ === "error" ? "text-red-500" : "text-yellow-500"} font-light whitespace-pre-wrap">${v}</pre>`);
      return;
    }
    const X = i()[i().length - 1];
    X && X.content === v || (e((E) => [...E, {
      type: $,
      content: v
    }]), Q());
  }, A = () => {
    r() && (R("message", "Processing..."), t()?.emit("exec", r()), s(""));
  };
  ml(() => {
    const $ = $a("http://localhost:5000/terminal", {
      transports: ["websocket"],
      withCredentials: !0
    });
    n($), $.on("connect", () => {
      f("Connected"), x && (x.disabled = !1);
    }), $.on("connect_error", (v) => {
      console.error("Connection Error:", v.message), x && (x.disabled = !0), f("Disconnected");
    }), $.on("osinfo", (v) => {
      h(v.homedir);
    }), $.on("outputMessage", (v) => {
      R("outputMessage", v);
    }), $.on("output", (v) => R("message", v)), $.on("cwdInfo", (v) => R("message", v)), $.on("error", (v) => R("error", `${v}`)), $.on("close", (v) => R("message", `
${v}
`)), $.on("prompt", ({
      cwd: v,
      command: X
    }) => {
      let E = v;
      const L = a();
      if (L && v.startsWith(L))
        E = v.replace(L, "~");
      else {
        const G = v.split("/");
        E = G[G.length - 1] || "/";
      }
      l(E), R("command", `${v} $ ${X}`);
    }), ji(() => $.disconnect());
  });
  const _ = ($) => {
    s(""), d(!1), R("message", `Selected: ${$}`);
  };
  return pi(Q), (() => {
    var $ = iR(), v = $.firstChild;
    v.firstChild;
    var X = v.nextSibling, E = X.firstChild, L = E.nextSibling;
    F($, D(Ms, {}), v);
    var G = S;
    typeof G == "function" ? Wi(G, v) : S = v, v.style.setProperty("scroll-behavior", "smooth"), F(v, D(Bm, {
      get each() {
        return i();
      },
      children: (U) => (() => {
        var j = nR();
        return F(j, (() => {
          var re = xr(() => U.type === "command");
          return () => re() ? `${o()} $ ${U.content.split(" $ ")[1]}` : U.content;
        })()), De((re) => {
          var te = U.type === "command" ? "font-bold whitespace-pre-wrap text-yellow-400" : U.type === "error" ? "whitespace-pre-wrap text-red-400" : "whitespace-pre-wrap", T = U.type === "command" ? U.content.split(" $ ")[0] : "";
          return te !== re.e && Fr(j, re.e = te), T !== re.t && Le(j, "title", re.t = T), re;
        }, {
          e: void 0,
          t: void 0
        }), j;
      })()
    }), null), F($, (() => {
      var U = xr(() => !!(u() && m().length > 0));
      return () => U() && (() => {
        var j = rR(), re = j.firstChild;
        return j.style.setProperty("width", "200px"), F(re, D(Bm, {
          get each() {
            return m();
          },
          children: (te) => (() => {
            var T = sR();
            return T.$$click = () => _(te), F(T, te === "Switch to AI" ? oR() : te === "Documentation" ? lR() : te === "About" ? aR() : te === "Donate" ? hR() : null, null), F(T, te, null), T;
          })()
        })), De((te) => {
          var T = `${O().x}px`, N = `${O().y + 4}px`;
          return T !== te.e && ((te.e = T) != null ? j.style.setProperty("left", T) : j.style.removeProperty("left")), N !== te.t && ((te.t = N) != null ? j.style.setProperty("top", N) : j.style.removeProperty("top")), te;
        }, {
          e: void 0,
          t: void 0
        }), j;
      })();
    })(), X), L.$$keydown = (U) => {
      U.key === "Enter" && (A(), d(!1));
    }, L.$$input = b;
    var pe = x;
    return typeof pe == "function" ? Wi(pe, L) : x = L, De((U) => {
      var j = `ml-4 ${c() === "Connected" ? "text-green-400" : "text-red-400"}`, re = `flex-1 dark:bg-netural-950 ${c() === "Connected" ? "text-green-400" : "text-red-400"} rounded-md px-1 text-sm focus:outline-none focus:ring-0`, te = `${c() === "Connected" ? "Type a command..." : c()}`;
      return j !== U.e && Fr(E, U.e = j), re !== U.t && Fr(L, U.t = re), te !== U.a && Le(L, "placeholder", U.a = te), U;
    }, {
      e: void 0,
      t: void 0,
      a: void 0
    }), De(() => L.value = r()), $;
  })();
}
Hi(["input", "keydown", "click"]);
var fR = /* @__PURE__ */ J('<div class="flex h-screen flex-col bg-white dark:bg-neutral-900 dark:text-white"><h1 class="leading-0 uppercase tracking-widest text-lg mt-6 px-4"><b>Dash</b>board</h1><div class="flex-1 overflow-auto scroll-smooth px-4 py-2 text-sm">');
function uR() {
  return yl(), Nt(), As(), wi(), pi(() => {
  }), (() => {
    var i = fR(), e = i.firstChild, t = e.nextSibling;
    return F(i, D(Ms, {}), e), t.style.setProperty("scroll-behavior", "smooth"), i;
  })();
}
var dR = /* @__PURE__ */ J('<div class="flex h-screen flex-col bg-white dark:bg-neutral-900 dark:text-white"><h1 class="leading-0 uppercase tracking-widest text-lg mt-6 px-4"><b>Manage</b> Settings</h1><div class="flex-1 overflow-auto scroll-smooth px-4 py-2 text-sm">');
function OR() {
  return yl(), Nt(), As(), wi(), pi(() => {
  }), (() => {
    var i = dR(), e = i.firstChild, t = e.nextSibling;
    return F(i, D(Ms, {}), e), t.style.setProperty("scroll-behavior", "smooth"), i;
  })();
}
var pR = /* @__PURE__ */ J('<div class="flex h-screen flex-col bg-white dark:bg-neutral-900 dark:text-white"><h1 class="leading-0 uppercase tracking-widest text-lg mt-6 px-4"><b>Manage</b> Profile</h1><div class="flex-1 overflow-auto scroll-smooth px-4 py-2 text-sm">');
function mR() {
  return yl(), Nt(), As(), wi(), (() => {
    var i = pR(), e = i.firstChild, t = e.nextSibling;
    return F(i, D(Ms, {}), e), t.style.setProperty("scroll-behavior", "smooth"), i;
  })();
}
var gR = /* @__PURE__ */ J('<div class="flex h-screen flex-col bg-white dark:bg-neutral-900 dark:text-white"><div class="flex-1 overflow-auto scroll-smooth px-4 py-2 text-sm">');
function yR() {
  PT(), Nt();
  const i = wi();
  return pi(async () => {
    i.user()?.email || console.log(i.user());
  }), (() => {
    var e = gR(), t = e.firstChild;
    return F(e, D(Ms, {}), t), t.style.setProperty("scroll-behavior", "smooth"), e;
  })();
}
/**
* (c) Iconify
*
* For the full copyright and license information, please view the license.txt
* files at https://github.com/iconify/iconify
*
* Licensed under MIT.
*
* @license MIT
* @version 3.0.0
*/
const Cb = Object.freeze(
  {
    left: 0,
    top: 0,
    width: 16,
    height: 16
  }
), Oh = Object.freeze({
  rotate: 0,
  vFlip: !1,
  hFlip: !1
}), Sl = Object.freeze({
  ...Cb,
  ...Oh
}), Cu = Object.freeze({
  ...Sl,
  body: "",
  hidden: !1
}), SR = Object.freeze({
  width: null,
  height: null
}), Rb = Object.freeze({
  // Dimensions
  ...SR,
  // Transformations
  ...Oh
});
function bR(i, e = 0) {
  const t = i.replace(/^-?[0-9.]*/, "");
  function n(r) {
    for (; r < 0; )
      r += 4;
    return r % 4;
  }
  if (t === "") {
    const r = parseInt(i);
    return isNaN(r) ? 0 : n(r);
  } else if (t !== i) {
    let r = 0;
    switch (t) {
      case "%":
        r = 25;
        break;
      case "deg":
        r = 90;
    }
    if (r) {
      let s = parseFloat(i.slice(0, i.length - t.length));
      return isNaN(s) ? 0 : (s = s / r, s % 1 === 0 ? n(s) : 0);
    }
  }
  return e;
}
const xR = /[\s,]+/;
function wR(i, e) {
  e.split(xR).forEach((t) => {
    switch (t.trim()) {
      case "horizontal":
        i.hFlip = !0;
        break;
      case "vertical":
        i.vFlip = !0;
        break;
    }
  });
}
const Ab = {
  ...Rb,
  preserveAspectRatio: ""
};
function rg(i) {
  const e = {
    ...Ab
  }, t = (n, r) => i.getAttribute(n) || r;
  return e.width = t("width", null), e.height = t("height", null), e.rotate = bR(t("rotate", "")), wR(e, t("flip", "")), e.preserveAspectRatio = t("preserveAspectRatio", t("preserveaspectratio", "")), e;
}
function kR(i, e) {
  for (const t in Ab)
    if (i[t] !== e[t])
      return !0;
  return !1;
}
const Eb = /^[a-z0-9]+(-[a-z0-9]+)*$/, bl = (i, e, t, n = "") => {
  const r = i.split(":");
  if (i.slice(0, 1) === "@") {
    if (r.length < 2 || r.length > 3)
      return null;
    n = r.shift().slice(1);
  }
  if (r.length > 3 || !r.length)
    return null;
  if (r.length > 1) {
    const l = r.pop(), a = r.pop(), h = {
      // Allow provider without '@': "provider:prefix:name"
      provider: r.length > 0 ? r[0] : n,
      prefix: a,
      name: l
    };
    return e && !Ca(h) ? null : h;
  }
  const s = r[0], o = s.split("-");
  if (o.length > 1) {
    const l = {
      provider: n,
      prefix: o.shift(),
      name: o.join("-")
    };
    return e && !Ca(l) ? null : l;
  }
  if (t && n === "") {
    const l = {
      provider: n,
      prefix: "",
      name: s
    };
    return e && !Ca(l, t) ? null : l;
  }
  return null;
}, Ca = (i, e) => i ? !!// Check prefix: cannot be empty, unless allowSimpleName is enabled
// Check name: cannot be empty
((e && i.prefix === "" || i.prefix) && i.name) : !1;
function vR(i, e) {
  const t = {};
  !i.hFlip != !e.hFlip && (t.hFlip = !0), !i.vFlip != !e.vFlip && (t.vFlip = !0);
  const n = ((i.rotate || 0) + (e.rotate || 0)) % 4;
  return n && (t.rotate = n), t;
}
function sg(i, e) {
  const t = vR(i, e);
  for (const n in Cu)
    n in Oh ? n in i && !(n in t) && (t[n] = Oh[n]) : n in e ? t[n] = e[n] : n in i && (t[n] = i[n]);
  return t;
}
function QR(i, e) {
  const t = i.icons, n = i.aliases || /* @__PURE__ */ Object.create(null), r = /* @__PURE__ */ Object.create(null);
  function s(o) {
    if (t[o])
      return r[o] = [];
    if (!(o in r)) {
      r[o] = null;
      const l = n[o] && n[o].parent, a = l && s(l);
      a && (r[o] = [l].concat(a));
    }
    return r[o];
  }
  return Object.keys(t).concat(Object.keys(n)).forEach(s), r;
}
function PR(i, e, t) {
  const n = i.icons, r = i.aliases || /* @__PURE__ */ Object.create(null);
  let s = {};
  function o(l) {
    s = sg(
      n[l] || r[l],
      s
    );
  }
  return o(e), t.forEach(o), sg(i, s);
}
function Mb(i, e) {
  const t = [];
  if (typeof i != "object" || typeof i.icons != "object")
    return t;
  i.not_found instanceof Array && i.not_found.forEach((r) => {
    e(r, null), t.push(r);
  });
  const n = QR(i);
  for (const r in n) {
    const s = n[r];
    s && (e(r, PR(i, r, s)), t.push(r));
  }
  return t;
}
const $R = {
  provider: "",
  aliases: {},
  not_found: {},
  ...Cb
};
function Fc(i, e) {
  for (const t in e)
    if (t in i && typeof i[t] != typeof e[t])
      return !1;
  return !0;
}
function qb(i) {
  if (typeof i != "object" || i === null)
    return null;
  const e = i;
  if (typeof e.prefix != "string" || !i.icons || typeof i.icons != "object" || !Fc(i, $R))
    return null;
  const t = e.icons;
  for (const r in t) {
    const s = t[r];
    if (
      // Name cannot be empty
      !r || // Must have body
      typeof s.body != "string" || // Check other props
      !Fc(
        s,
        Cu
      )
    )
      return null;
  }
  const n = e.aliases || /* @__PURE__ */ Object.create(null);
  for (const r in n) {
    const s = n[r], o = s.parent;
    if (
      // Name cannot be empty
      !r || // Parent must be set and point to existing icon
      typeof o != "string" || !t[o] && !n[o] || // Check other props
      !Fc(
        s,
        Cu
      )
    )
      return null;
  }
  return e;
}
const ph = /* @__PURE__ */ Object.create(null);
function TR(i, e) {
  return {
    provider: i,
    prefix: e,
    icons: /* @__PURE__ */ Object.create(null),
    missing: /* @__PURE__ */ new Set()
  };
}
function gn(i, e) {
  const t = ph[i] || (ph[i] = /* @__PURE__ */ Object.create(null));
  return t[e] || (t[e] = TR(i, e));
}
function _b(i, e) {
  return qb(e) ? Mb(e, (t, n) => {
    n ? i.icons[t] = n : i.missing.add(t);
  }) : [];
}
function CR(i, e, t) {
  try {
    if (typeof t.body == "string")
      return i.icons[e] = { ...t }, !0;
  } catch {
  }
  return !1;
}
function RR(i, e) {
  let t = [];
  return (typeof i == "string" ? [i] : Object.keys(ph)).forEach((r) => {
    (typeof r == "string" && typeof e == "string" ? [e] : Object.keys(ph[r] || {})).forEach((o) => {
      const l = gn(r, o);
      t = t.concat(
        Object.keys(l.icons).map(
          (a) => (r !== "" ? "@" + r + ":" : "") + o + ":" + a
        )
      );
    });
  }), t;
}
let _o = !1;
function Xb(i) {
  return typeof i == "boolean" && (_o = i), _o;
}
function Xo(i) {
  const e = typeof i == "string" ? bl(i, !0, _o) : i;
  if (e) {
    const t = gn(e.provider, e.prefix), n = e.name;
    return t.icons[n] || (t.missing.has(n) ? null : void 0);
  }
}
function Lb(i, e) {
  const t = bl(i, !0, _o);
  if (!t)
    return !1;
  const n = gn(t.provider, t.prefix);
  return e ? CR(n, t.name, e) : (n.missing.add(t.name), !0);
}
function og(i, e) {
  if (typeof i != "object")
    return !1;
  if (typeof e != "string" && (e = i.provider || ""), _o && !e && !i.prefix) {
    let r = !1;
    return qb(i) && (i.prefix = "", Mb(i, (s, o) => {
      Lb(s, o) && (r = !0);
    })), r;
  }
  const t = i.prefix;
  if (!Ca({
    prefix: t,
    name: "a"
  }))
    return !1;
  const n = gn(e, t);
  return !!_b(n, i);
}
function AR(i) {
  return !!Xo(i);
}
function ER(i) {
  const e = Xo(i);
  return e && {
    ...Sl,
    ...e
  };
}
function MR(i) {
  const e = {
    loaded: [],
    missing: [],
    pending: []
  }, t = /* @__PURE__ */ Object.create(null);
  i.sort((r, s) => r.provider !== s.provider ? r.provider.localeCompare(s.provider) : r.prefix !== s.prefix ? r.prefix.localeCompare(s.prefix) : r.name.localeCompare(s.name));
  let n = {
    provider: "",
    prefix: "",
    name: ""
  };
  return i.forEach((r) => {
    if (n.name === r.name && n.prefix === r.prefix && n.provider === r.provider)
      return;
    n = r;
    const s = r.provider, o = r.prefix, l = r.name, a = t[s] || (t[s] = /* @__PURE__ */ Object.create(null)), h = a[o] || (a[o] = gn(s, o));
    let c;
    l in h.icons ? c = e.loaded : o === "" || h.missing.has(l) ? c = e.missing : c = e.pending;
    const f = {
      provider: s,
      prefix: o,
      name: l
    };
    c.push(f);
  }), e;
}
function Bb(i, e) {
  i.forEach((t) => {
    const n = t.loaderCallbacks;
    n && (t.loaderCallbacks = n.filter((r) => r.id !== e));
  });
}
function qR(i) {
  i.pendingCallbacksFlag || (i.pendingCallbacksFlag = !0, setTimeout(() => {
    i.pendingCallbacksFlag = !1;
    const e = i.loaderCallbacks ? i.loaderCallbacks.slice(0) : [];
    if (!e.length)
      return;
    let t = !1;
    const n = i.provider, r = i.prefix;
    e.forEach((s) => {
      const o = s.icons, l = o.pending.length;
      o.pending = o.pending.filter((a) => {
        if (a.prefix !== r)
          return !0;
        const h = a.name;
        if (i.icons[h])
          o.loaded.push({
            provider: n,
            prefix: r,
            name: h
          });
        else if (i.missing.has(h))
          o.missing.push({
            provider: n,
            prefix: r,
            name: h
          });
        else
          return t = !0, !0;
        return !1;
      }), o.pending.length !== l && (t || Bb([i], s.id), s.callback(
        o.loaded.slice(0),
        o.missing.slice(0),
        o.pending.slice(0),
        s.abort
      ));
    });
  }));
}
let _R = 0;
function XR(i, e, t) {
  const n = _R++, r = Bb.bind(null, t, n);
  if (!e.pending.length)
    return r;
  const s = {
    id: n,
    icons: e,
    callback: i,
    abort: r
  };
  return t.forEach((o) => {
    (o.loaderCallbacks || (o.loaderCallbacks = [])).push(s);
  }), r;
}
const Ru = /* @__PURE__ */ Object.create(null);
function lg(i, e) {
  Ru[i] = e;
}
function Au(i) {
  return Ru[i] || Ru[""];
}
function LR(i, e = !0, t = !1) {
  const n = [];
  return i.forEach((r) => {
    const s = typeof r == "string" ? bl(r, e, t) : r;
    s && n.push(s);
  }), n;
}
var BR = {
  resources: [],
  index: 0,
  timeout: 2e3,
  rotate: 750,
  random: !1,
  dataAfterTimeout: !1
};
function ZR(i, e, t, n) {
  const r = i.resources.length, s = i.random ? Math.floor(Math.random() * r) : i.index;
  let o;
  if (i.random) {
    let b = i.resources.slice(0);
    for (o = []; b.length > 1; ) {
      const Q = Math.floor(Math.random() * b.length);
      o.push(b[Q]), b = b.slice(0, Q).concat(b.slice(Q + 1));
    }
    o = o.concat(b);
  } else
    o = i.resources.slice(s).concat(i.resources.slice(0, s));
  const l = Date.now();
  let a = "pending", h = 0, c, f = null, u = [], d = [];
  typeof n == "function" && d.push(n);
  function O() {
    f && (clearTimeout(f), f = null);
  }
  function p() {
    a === "pending" && (a = "aborted"), O(), u.forEach((b) => {
      b.status === "pending" && (b.status = "aborted");
    }), u = [];
  }
  function m(b, Q) {
    Q && (d = []), typeof b == "function" && d.push(b);
  }
  function g() {
    return {
      startTime: l,
      payload: e,
      status: a,
      queriesSent: h,
      queriesPending: u.length,
      subscribe: m,
      abort: p
    };
  }
  function S() {
    a = "failed", d.forEach((b) => {
      b(void 0, c);
    });
  }
  function x() {
    u.forEach((b) => {
      b.status === "pending" && (b.status = "aborted");
    }), u = [];
  }
  function k(b, Q, R) {
    const A = Q !== "success";
    switch (u = u.filter((_) => _ !== b), a) {
      case "pending":
        break;
      case "failed":
        if (A || !i.dataAfterTimeout)
          return;
        break;
      default:
        return;
    }
    if (Q === "abort") {
      c = R, S();
      return;
    }
    if (A) {
      c = R, u.length || (o.length ? w() : S());
      return;
    }
    if (O(), x(), !i.random) {
      const _ = i.resources.indexOf(b.resource);
      _ !== -1 && _ !== i.index && (i.index = _);
    }
    a = "completed", d.forEach((_) => {
      _(R);
    });
  }
  function w() {
    if (a !== "pending")
      return;
    O();
    const b = o.shift();
    if (b === void 0) {
      if (u.length) {
        f = setTimeout(() => {
          O(), a === "pending" && (x(), S());
        }, i.timeout);
        return;
      }
      S();
      return;
    }
    const Q = {
      status: "pending",
      resource: b,
      callback: (R, A) => {
        k(Q, R, A);
      }
    };
    u.push(Q), h++, f = setTimeout(w, i.rotate), t(b, e, Q.callback);
  }
  return setTimeout(w), g;
}
function Zb(i) {
  const e = {
    ...BR,
    ...i
  };
  let t = [];
  function n() {
    t = t.filter((l) => l().status === "pending");
  }
  function r(l, a, h) {
    const c = ZR(
      e,
      l,
      a,
      (f, u) => {
        n(), h && h(f, u);
      }
    );
    return t.push(c), c;
  }
  function s(l) {
    return t.find((a) => l(a)) || null;
  }
  return {
    query: r,
    find: s,
    setIndex: (l) => {
      e.index = l;
    },
    getIndex: () => e.index,
    cleanup: n
  };
}
function up(i) {
  let e;
  if (typeof i.resources == "string")
    e = [i.resources];
  else if (e = i.resources, !(e instanceof Array) || !e.length)
    return null;
  return {
    // API hosts
    resources: e,
    // Root path
    path: i.path || "/",
    // URL length limit
    maxURL: i.maxURL || 500,
    // Timeout before next host is used.
    rotate: i.rotate || 750,
    // Timeout before failing query.
    timeout: i.timeout || 5e3,
    // Randomise default API end point.
    random: i.random === !0,
    // Start index
    index: i.index || 0,
    // Receive data after time out (used if time out kicks in first, then API module sends data anyway).
    dataAfterTimeout: i.dataAfterTimeout !== !1
  };
}
const fc = /* @__PURE__ */ Object.create(null), zs = [
  "https://api.simplesvg.com",
  "https://api.unisvg.com"
], Ra = [];
for (; zs.length > 0; )
  zs.length === 1 || Math.random() > 0.5 ? Ra.push(zs.shift()) : Ra.push(zs.pop());
fc[""] = up({
  resources: ["https://api.iconify.design"].concat(Ra)
});
function ag(i, e) {
  const t = up(e);
  return t === null ? !1 : (fc[i] = t, !0);
}
function uc(i) {
  return fc[i];
}
function DR() {
  return Object.keys(fc);
}
function hg() {
}
const Hc = /* @__PURE__ */ Object.create(null);
function VR(i) {
  if (!Hc[i]) {
    const e = uc(i);
    if (!e)
      return;
    const t = Zb(e), n = {
      config: e,
      redundancy: t
    };
    Hc[i] = n;
  }
  return Hc[i];
}
function Db(i, e, t) {
  let n, r;
  if (typeof i == "string") {
    const s = Au(i);
    if (!s)
      return t(void 0, 424), hg;
    r = s.send;
    const o = VR(i);
    o && (n = o.redundancy);
  } else {
    const s = up(i);
    if (s) {
      n = Zb(s);
      const o = i.resources ? i.resources[0] : "", l = Au(o);
      l && (r = l.send);
    }
  }
  return !n || !r ? (t(void 0, 424), hg) : n.query(e, r, t)().abort;
}
function cg() {
}
function WR(i) {
  i.iconsLoaderFlag || (i.iconsLoaderFlag = !0, setTimeout(() => {
    i.iconsLoaderFlag = !1, qR(i);
  }));
}
function zR(i) {
  const e = [], t = [];
  return i.forEach((n) => {
    (n.match(Eb) ? e : t).push(n);
  }), {
    valid: e,
    invalid: t
  };
}
function Is(i, e, t) {
  function n() {
    const r = i.pendingIcons;
    e.forEach((s) => {
      r && r.delete(s), i.icons[s] || i.missing.add(s);
    });
  }
  if (t && typeof t == "object")
    try {
      if (!_b(i, t).length) {
        n();
        return;
      }
    } catch (r) {
      console.error(r);
    }
  n(), WR(i);
}
function fg(i, e) {
  i instanceof Promise ? i.then((t) => {
    e(t);
  }).catch(() => {
    e(null);
  }) : e(i);
}
function IR(i, e) {
  i.iconsToLoad ? i.iconsToLoad = i.iconsToLoad.concat(e).sort() : i.iconsToLoad = e, i.iconsQueueFlag || (i.iconsQueueFlag = !0, setTimeout(() => {
    i.iconsQueueFlag = !1;
    const { provider: t, prefix: n } = i, r = i.iconsToLoad;
    if (delete i.iconsToLoad, !r || !r.length)
      return;
    const s = i.loadIcon;
    if (i.loadIcons && (r.length > 1 || !s)) {
      fg(
        i.loadIcons(r, n, t),
        (c) => {
          Is(i, r, c);
        }
      );
      return;
    }
    if (s) {
      r.forEach((c) => {
        const f = s(c, n, t);
        fg(f, (u) => {
          const d = u ? {
            prefix: n,
            icons: {
              [c]: u
            }
          } : null;
          Is(i, [c], d);
        });
      });
      return;
    }
    const { valid: o, invalid: l } = zR(r);
    if (l.length && Is(i, l, null), !o.length)
      return;
    const a = n.match(Eb) ? Au(t) : null;
    if (!a) {
      Is(i, o, null);
      return;
    }
    a.prepare(t, n, o).forEach((c) => {
      Db(t, c, (f) => {
        Is(i, c.icons, f);
      });
    });
  }));
}
const dp = (i, e) => {
  const t = LR(i, !0, Xb()), n = MR(t);
  if (!n.pending.length) {
    let a = !0;
    return e && setTimeout(() => {
      a && e(
        n.loaded,
        n.missing,
        n.pending,
        cg
      );
    }), () => {
      a = !1;
    };
  }
  const r = /* @__PURE__ */ Object.create(null), s = [];
  let o, l;
  return n.pending.forEach((a) => {
    const { provider: h, prefix: c } = a;
    if (c === l && h === o)
      return;
    o = h, l = c, s.push(gn(h, c));
    const f = r[h] || (r[h] = /* @__PURE__ */ Object.create(null));
    f[c] || (f[c] = []);
  }), n.pending.forEach((a) => {
    const { provider: h, prefix: c, name: f } = a, u = gn(h, c), d = u.pendingIcons || (u.pendingIcons = /* @__PURE__ */ new Set());
    d.has(f) || (d.add(f), r[h][c].push(f));
  }), s.forEach((a) => {
    const h = r[a.provider][a.prefix];
    h.length && IR(a, h);
  }), e ? XR(e, n, s) : cg;
}, NR = (i) => new Promise((e, t) => {
  const n = typeof i == "string" ? bl(i, !0) : i;
  if (!n) {
    t(i);
    return;
  }
  dp([n || i], (r) => {
    if (r.length && n) {
      const s = Xo(n);
      if (s) {
        e({
          ...Sl,
          ...s
        });
        return;
      }
    }
    t(i);
  });
});
function ug(i) {
  try {
    const e = typeof i == "string" ? JSON.parse(i) : i;
    if (typeof e.body == "string")
      return {
        ...e
      };
  } catch {
  }
}
function jR(i, e) {
  if (typeof i == "object")
    return {
      data: ug(i),
      value: i
    };
  if (typeof i != "string")
    return {
      value: i
    };
  if (i.includes("{")) {
    const s = ug(i);
    if (s)
      return {
        data: s,
        value: i
      };
  }
  const t = bl(i, !0, !0);
  if (!t)
    return {
      value: i
    };
  const n = Xo(t);
  if (n !== void 0 || !t.prefix)
    return {
      value: i,
      name: t,
      data: n
      // could be 'null' -> icon is missing
    };
  const r = dp([t], () => e(i, t, Xo(t)));
  return {
    value: i,
    name: t,
    loading: r
  };
}
let Vb = !1;
try {
  Vb = navigator.vendor.indexOf("Apple") === 0;
} catch {
}
function UR(i, e) {
  switch (e) {
    // Force mode
    case "svg":
    case "bg":
    case "mask":
      return e;
  }
  return e !== "style" && (Vb || i.indexOf("<a") === -1) ? "svg" : i.indexOf("currentColor") === -1 ? "bg" : "mask";
}
const YR = /(-?[0-9.]*[0-9]+[0-9.]*)/g, GR = /^-?[0-9.]*[0-9]+[0-9.]*$/g;
function Eu(i, e, t) {
  if (e === 1)
    return i;
  if (t = t || 100, typeof i == "number")
    return Math.ceil(i * e * t) / t;
  if (typeof i != "string")
    return i;
  const n = i.split(YR);
  if (n === null || !n.length)
    return i;
  const r = [];
  let s = n.shift(), o = GR.test(s);
  for (; ; ) {
    if (o) {
      const l = parseFloat(s);
      isNaN(l) ? r.push(s) : r.push(Math.ceil(l * e * t) / t);
    } else
      r.push(s);
    if (s = n.shift(), s === void 0)
      return r.join("");
    o = !o;
  }
}
function FR(i, e = "defs") {
  let t = "";
  const n = i.indexOf("<" + e);
  for (; n >= 0; ) {
    const r = i.indexOf(">", n), s = i.indexOf("</" + e);
    if (r === -1 || s === -1)
      break;
    const o = i.indexOf(">", s);
    if (o === -1)
      break;
    t += i.slice(r + 1, s).trim(), i = i.slice(0, n).trim() + i.slice(o + 1);
  }
  return {
    defs: t,
    content: i
  };
}
function HR(i, e) {
  return i ? "<defs>" + i + "</defs>" + e : e;
}
function KR(i, e, t) {
  const n = FR(i);
  return HR(n.defs, e + n.content + t);
}
const JR = (i) => i === "unset" || i === "undefined" || i === "none";
function Wb(i, e) {
  const t = {
    ...Sl,
    ...i
  }, n = {
    ...Rb,
    ...e
  }, r = {
    left: t.left,
    top: t.top,
    width: t.width,
    height: t.height
  };
  let s = t.body;
  [t, n].forEach((p) => {
    const m = [], g = p.hFlip, S = p.vFlip;
    let x = p.rotate;
    g ? S ? x += 2 : (m.push(
      "translate(" + (r.width + r.left).toString() + " " + (0 - r.top).toString() + ")"
    ), m.push("scale(-1 1)"), r.top = r.left = 0) : S && (m.push(
      "translate(" + (0 - r.left).toString() + " " + (r.height + r.top).toString() + ")"
    ), m.push("scale(1 -1)"), r.top = r.left = 0);
    let k;
    switch (x < 0 && (x -= Math.floor(x / 4) * 4), x = x % 4, x) {
      case 1:
        k = r.height / 2 + r.top, m.unshift(
          "rotate(90 " + k.toString() + " " + k.toString() + ")"
        );
        break;
      case 2:
        m.unshift(
          "rotate(180 " + (r.width / 2 + r.left).toString() + " " + (r.height / 2 + r.top).toString() + ")"
        );
        break;
      case 3:
        k = r.width / 2 + r.left, m.unshift(
          "rotate(-90 " + k.toString() + " " + k.toString() + ")"
        );
        break;
    }
    x % 2 === 1 && (r.left !== r.top && (k = r.left, r.left = r.top, r.top = k), r.width !== r.height && (k = r.width, r.width = r.height, r.height = k)), m.length && (s = KR(
      s,
      '<g transform="' + m.join(" ") + '">',
      "</g>"
    ));
  });
  const o = n.width, l = n.height, a = r.width, h = r.height;
  let c, f;
  o === null ? (f = l === null ? "1em" : l === "auto" ? h : l, c = Eu(f, a / h)) : (c = o === "auto" ? a : o, f = l === null ? Eu(c, h / a) : l === "auto" ? h : l);
  const u = {}, d = (p, m) => {
    JR(m) || (u[p] = m.toString());
  };
  d("width", c), d("height", f);
  const O = [r.left, r.top, a, h];
  return u.viewBox = O.join(" "), {
    attributes: u,
    viewBox: O,
    body: s
  };
}
function Op(i, e) {
  let t = i.indexOf("xlink:") === -1 ? "" : ' xmlns:xlink="http://www.w3.org/1999/xlink"';
  for (const n in e)
    t += " " + n + '="' + e[n] + '"';
  return '<svg xmlns="http://www.w3.org/2000/svg"' + t + ">" + i + "</svg>";
}
function eA(i) {
  return i.replace(/"/g, "'").replace(/%/g, "%25").replace(/#/g, "%23").replace(/</g, "%3C").replace(/>/g, "%3E").replace(/\s+/g, " ");
}
function tA(i) {
  return "data:image/svg+xml," + eA(i);
}
function zb(i) {
  return 'url("' + tA(i) + '")';
}
const iA = () => {
  let i;
  try {
    if (i = fetch, typeof i == "function")
      return i;
  } catch {
  }
};
let mh = iA();
function nA(i) {
  mh = i;
}
function rA() {
  return mh;
}
function sA(i, e) {
  const t = uc(i);
  if (!t)
    return 0;
  let n;
  if (!t.maxURL)
    n = 0;
  else {
    let r = 0;
    t.resources.forEach((o) => {
      r = Math.max(r, o.length);
    });
    const s = e + ".json?icons=";
    n = t.maxURL - r - t.path.length - s.length;
  }
  return n;
}
function oA(i) {
  return i === 404;
}
const lA = (i, e, t) => {
  const n = [], r = sA(i, e), s = "icons";
  let o = {
    type: s,
    provider: i,
    prefix: e,
    icons: []
  }, l = 0;
  return t.forEach((a, h) => {
    l += a.length + 1, l >= r && h > 0 && (n.push(o), o = {
      type: s,
      provider: i,
      prefix: e,
      icons: []
    }, l = a.length), o.icons.push(a);
  }), n.push(o), n;
};
function aA(i) {
  if (typeof i == "string") {
    const e = uc(i);
    if (e)
      return e.path;
  }
  return "/";
}
const hA = (i, e, t) => {
  if (!mh) {
    t("abort", 424);
    return;
  }
  let n = aA(e.provider);
  switch (e.type) {
    case "icons": {
      const s = e.prefix, l = e.icons.join(","), a = new URLSearchParams({
        icons: l
      });
      n += s + ".json?" + a.toString();
      break;
    }
    case "custom": {
      const s = e.uri;
      n += s.slice(0, 1) === "/" ? s.slice(1) : s;
      break;
    }
    default:
      t("abort", 400);
      return;
  }
  let r = 503;
  mh(i + n).then((s) => {
    const o = s.status;
    if (o !== 200) {
      setTimeout(() => {
        t(oA(o) ? "abort" : "next", o);
      });
      return;
    }
    return r = 501, s.json();
  }).then((s) => {
    if (typeof s != "object" || s === null) {
      setTimeout(() => {
        s === 404 ? t("abort", s) : t("next", r);
      });
      return;
    }
    setTimeout(() => {
      t("success", s);
    });
  }).catch(() => {
    t("next", r);
  });
}, cA = {
  prepare: lA,
  send: hA
};
function fA(i, e, t) {
  gn(t || "", e).loadIcons = i;
}
function uA(i, e, t) {
  gn(t || "", e).loadIcon = i;
}
const Kc = "data-style";
let Ib = "";
function dA(i) {
  Ib = i;
}
function dg(i, e) {
  let t = Array.from(i.childNodes).find((n) => n.hasAttribute && n.hasAttribute(Kc));
  t || (t = document.createElement("style"), t.setAttribute(Kc, Kc), i.appendChild(t)), t.textContent = ":host{display:inline-block;vertical-align:" + (e ? "-0.125em" : "0") + "}span,svg{display:block;margin:auto}" + Ib;
}
function Nb() {
  lg("", cA), Xb(!0);
  let i;
  try {
    i = window;
  } catch {
  }
  if (i) {
    if (i.IconifyPreload !== void 0) {
      const t = i.IconifyPreload, n = "Invalid IconifyPreload syntax.";
      typeof t == "object" && t !== null && (t instanceof Array ? t : [t]).forEach((r) => {
        try {
          // Check if item is an object and not null/array
          (typeof r != "object" || r === null || r instanceof Array || // Check for 'icons' and 'prefix'
          typeof r.icons != "object" || typeof r.prefix != "string" || // Add icon set
          !og(r)) && console.error(n);
        } catch {
          console.error(n);
        }
      });
    }
    if (i.IconifyProviders !== void 0) {
      const t = i.IconifyProviders;
      if (typeof t == "object" && t !== null)
        for (const n in t) {
          const r = "IconifyProviders[" + n + "] is invalid.";
          try {
            const s = t[n];
            if (typeof s != "object" || !s || s.resources === void 0)
              continue;
            ag(n, s) || console.error(r);
          } catch {
            console.error(r);
          }
        }
    }
  }
  return {
    iconLoaded: AR,
    getIcon: ER,
    listIcons: RR,
    addIcon: Lb,
    addCollection: og,
    calculateSize: Eu,
    buildIcon: Wb,
    iconToHTML: Op,
    svgToURL: zb,
    loadIcons: dp,
    loadIcon: NR,
    addAPIProvider: ag,
    setCustomIconLoader: uA,
    setCustomIconsLoader: fA,
    appendCustomStyle: dA,
    _api: {
      getAPIConfig: uc,
      setAPIModule: lg,
      sendAPIQuery: Db,
      setFetch: nA,
      getFetch: rA,
      listAPIProviders: DR
    }
  };
}
const Mu = {
  "background-color": "currentColor"
}, jb = {
  "background-color": "transparent"
}, Og = {
  image: "var(--svg)",
  repeat: "no-repeat",
  size: "100% 100%"
}, pg = {
  "-webkit-mask": Mu,
  mask: Mu,
  background: jb
};
for (const i in pg) {
  const e = pg[i];
  for (const t in Og)
    e[i + "-" + t] = Og[t];
}
function mg(i) {
  return i ? i + (i.match(/^[-0-9.]+$/) ? "px" : "") : "inherit";
}
function OA(i, e, t) {
  const n = document.createElement("span");
  let r = i.body;
  r.indexOf("<a") !== -1 && (r += "<!-- " + Date.now() + " -->");
  const s = i.attributes, o = Op(r, {
    ...s,
    width: e.width + "",
    height: e.height + ""
  }), l = zb(o), a = n.style, h = {
    "--svg": l,
    width: mg(s.width),
    height: mg(s.height),
    ...t ? Mu : jb
  };
  for (const c in h)
    a.setProperty(c, h[c]);
  return n;
}
let xo;
function pA() {
  try {
    xo = window.trustedTypes.createPolicy("iconify", {
      // eslint-disable-next-line @typescript-eslint/no-unsafe-return
      createHTML: (i) => i
    });
  } catch {
    xo = null;
  }
}
function mA(i) {
  return xo === void 0 && pA(), xo ? xo.createHTML(i) : i;
}
function gA(i) {
  const e = document.createElement("span"), t = i.attributes;
  let n = "";
  t.width || (n = "width: inherit;"), t.height || (n += "height: inherit;"), n && (t.style = n);
  const r = Op(i.body, t);
  return e.innerHTML = mA(r), e.firstChild;
}
function qu(i) {
  return Array.from(i.childNodes).find((e) => {
    const t = e.tagName && e.tagName.toUpperCase();
    return t === "SPAN" || t === "SVG";
  });
}
function gg(i, e) {
  const t = e.icon.data, n = e.customisations, r = Wb(t, n);
  n.preserveAspectRatio && (r.attributes.preserveAspectRatio = n.preserveAspectRatio);
  const s = e.renderedMode;
  let o;
  switch (s) {
    case "svg":
      o = gA(r);
      break;
    default:
      o = OA(r, {
        ...Sl,
        ...t
      }, s === "mask");
  }
  const l = qu(i);
  l ? o.tagName === "SPAN" && l.tagName === o.tagName ? l.setAttribute("style", o.getAttribute("style")) : i.replaceChild(o, l) : i.appendChild(o);
}
function yg(i, e, t) {
  const n = t && (t.rendered ? t : t.lastRender);
  return {
    rendered: !1,
    inline: e,
    icon: i,
    lastRender: n
  };
}
function yA(i = "iconify-icon") {
  let e, t;
  try {
    e = window.customElements, t = window.HTMLElement;
  } catch {
    return;
  }
  if (!e || !t)
    return;
  const n = e.get(i);
  if (n)
    return n;
  const r = [
    // Icon
    "icon",
    // Mode
    "mode",
    "inline",
    "noobserver",
    // Customisations
    "width",
    "height",
    "rotate",
    "flip"
  ], s = class extends t {
    // Root
    _shadowRoot;
    // Initialised
    _initialised = !1;
    // Icon state
    _state;
    // Attributes check queued
    _checkQueued = !1;
    // Connected
    _connected = !1;
    // Observer
    _observer = null;
    _visible = !0;
    /**
     * Constructor
     */
    constructor() {
      super();
      const l = this._shadowRoot = this.attachShadow({
        mode: "open"
      }), a = this.hasAttribute("inline");
      dg(l, a), this._state = yg({
        value: ""
      }, a), this._queueCheck();
    }
    /**
     * Connected to DOM
     */
    connectedCallback() {
      this._connected = !0, this.startObserver();
    }
    /**
     * Disconnected from DOM
     */
    disconnectedCallback() {
      this._connected = !1, this.stopObserver();
    }
    /**
     * Observed attributes
     */
    static get observedAttributes() {
      return r.slice(0);
    }
    /**
     * Observed properties that are different from attributes
     *
     * Experimental! Need to test with various frameworks that support it
     */
    /*
    static get properties() {
        return {
            inline: {
                type: Boolean,
                reflect: true,
            },
            // Not listing other attributes because they are strings or combination
            // of string and another type. Cannot have multiple types
        };
    }
    */
    /**
     * Attribute has changed
     */
    attributeChangedCallback(l) {
      switch (l) {
        case "inline": {
          const a = this.hasAttribute("inline"), h = this._state;
          a !== h.inline && (h.inline = a, dg(this._shadowRoot, a));
          break;
        }
        case "noobserver": {
          this.hasAttribute("noobserver") ? this.startObserver() : this.stopObserver();
          break;
        }
        default:
          this._queueCheck();
      }
    }
    /**
     * Get/set icon
     */
    get icon() {
      const l = this.getAttribute("icon");
      if (l && l.slice(0, 1) === "{")
        try {
          return JSON.parse(l);
        } catch {
        }
      return l;
    }
    set icon(l) {
      typeof l == "object" && (l = JSON.stringify(l)), this.setAttribute("icon", l);
    }
    /**
     * Get/set inline
     */
    get inline() {
      return this.hasAttribute("inline");
    }
    set inline(l) {
      l ? this.setAttribute("inline", "true") : this.removeAttribute("inline");
    }
    /**
     * Get/set observer
     */
    get observer() {
      return this.hasAttribute("observer");
    }
    set observer(l) {
      l ? this.setAttribute("observer", "true") : this.removeAttribute("observer");
    }
    /**
     * Restart animation
     */
    restartAnimation() {
      const l = this._state;
      if (l.rendered) {
        const a = this._shadowRoot;
        if (l.renderedMode === "svg")
          try {
            a.lastChild.setCurrentTime(0);
            return;
          } catch {
          }
        gg(a, l);
      }
    }
    /**
     * Get status
     */
    get status() {
      const l = this._state;
      return l.rendered ? "rendered" : l.icon.data === null ? "failed" : "loading";
    }
    /**
     * Queue attributes re-check
     */
    _queueCheck() {
      this._checkQueued || (this._checkQueued = !0, setTimeout(() => {
        this._check();
      }));
    }
    /**
     * Check for changes
     */
    _check() {
      if (!this._checkQueued)
        return;
      this._checkQueued = !1;
      const l = this._state, a = this.getAttribute("icon");
      if (a !== l.icon.value) {
        this._iconChanged(a);
        return;
      }
      if (!l.rendered || !this._visible)
        return;
      const h = this.getAttribute("mode"), c = rg(this);
      (l.attrMode !== h || kR(l.customisations, c) || !qu(this._shadowRoot)) && this._renderIcon(l.icon, c, h);
    }
    /**
     * Icon value has changed
     */
    _iconChanged(l) {
      const a = jR(l, (h, c, f) => {
        const u = this._state;
        if (u.rendered || this.getAttribute("icon") !== h)
          return;
        const d = {
          value: h,
          name: c,
          data: f
        };
        d.data ? this._gotIconData(d) : u.icon = d;
      });
      a.data ? this._gotIconData(a) : this._state = yg(a, this._state.inline, this._state);
    }
    /**
     * Force render icon on state change
     */
    _forceRender() {
      if (!this._visible) {
        const l = qu(this._shadowRoot);
        l && this._shadowRoot.removeChild(l);
        return;
      }
      this._queueCheck();
    }
    /**
     * Got new icon data, icon is ready to (re)render
     */
    _gotIconData(l) {
      this._checkQueued = !1, this._renderIcon(l, rg(this), this.getAttribute("mode"));
    }
    /**
     * Re-render based on icon data
     */
    _renderIcon(l, a, h) {
      const c = UR(l.data.body, h), f = this._state.inline;
      gg(this._shadowRoot, this._state = {
        rendered: !0,
        icon: l,
        inline: f,
        customisations: a,
        attrMode: h,
        renderedMode: c
      });
    }
    /**
     * Start observer
     */
    startObserver() {
      if (!this._observer && !this.hasAttribute("noobserver"))
        try {
          this._observer = new IntersectionObserver((l) => {
            const a = l.some((h) => h.isIntersecting);
            a !== this._visible && (this._visible = a, this._forceRender());
          }), this._observer.observe(this);
        } catch {
          if (this._observer) {
            try {
              this._observer.disconnect();
            } catch {
            }
            this._observer = null;
          }
        }
    }
    /**
     * Stop observer
     */
    stopObserver() {
      this._observer && (this._observer.disconnect(), this._observer = null, this._visible = !0, this._connected && this._forceRender());
    }
  };
  r.forEach((l) => {
    l in s.prototype || Object.defineProperty(s.prototype, l, {
      get: function() {
        return this.getAttribute(l);
      },
      set: function(a) {
        a !== null ? this.setAttribute(l, a) : this.removeAttribute(l);
      }
    });
  });
  const o = Nb();
  for (const l in o)
    s[l] = s.prototype[l] = o[l];
  return e.define(i, s), s;
}
const SA = yA() || Nb(), { iconLoaded: qN, getIcon: _N, listIcons: XN, addIcon: LN, addCollection: BN, calculateSize: ZN, buildIcon: DN, iconToHTML: VN, svgToURL: WN, loadIcons: zN, loadIcon: IN, setCustomIconLoader: NN, setCustomIconsLoader: jN, addAPIProvider: UN, _api: YN } = SA;
var bA = /* @__PURE__ */ J("<iconify-icon>", !0, !1, !1);
function Ub(i) {
  let {
    icon: e,
    mode: t,
    inline: n,
    rotate: r,
    flip: s,
    width: o,
    height: l,
    preserveAspectRatio: a,
    noobserver: h
  } = i;
  return typeof e == "object" && (e = JSON.stringify(e)), // @ts-ignore
  (() => {
    var c = bA();
    return Le(c, "icon", e), Le(c, "mode", t), Le(c, "inline", n), Le(c, "rotate", r), Le(c, "flip", s), Le(c, "width", o), Le(c, "height", l), Le(c, "preserveaspectratio", a), Le(c, "noobserver", h), NS(c, i, !1, !1), c._$owner = rc(), c;
  })();
}
var xA = /* @__PURE__ */ J('<button class="w-full flex items-center gap-2 justify-center p-3 text-white bg-neutral-900 rounded-md hover:bg-neutral-800 mt-4"> Sign in with Google');
const wA = "http://localhost:5000/api/auth/google/callback";
function Yb() {
  const [i, e] = ee("");
  return ml(() => {
    e(`${wA}`);
  }), (() => {
    var t = xA(), n = t.firstChild;
    return t.$$click = () => i() && (window.location.href = i()), F(t, D(Ub, {
      icon: "flat-color-icons:google",
      width: "20",
      height: "20"
    }), n), t;
  })();
}
Hi(["click"]);
var kA = /* @__PURE__ */ J('<button class="w-full flex gap-2 items-center justify-center p-3 text-white bg-gray-700 rounded-md hover:bg-gray-600 mt-4"> Sign in with Github');
const vA = "http://localhost:5000/api/auth/github/callback";
function Gb() {
  const [i, e] = ee("");
  return ml(() => {
    e(`${vA}`);
  }), (() => {
    var t = kA(), n = t.firstChild;
    return t.$$click = () => i() && (window.location.href = i()), F(t, D(Ub, {
      icon: "mdi:github",
      width: "24",
      class: "text-gray-900",
      height: "24"
    }), n), t;
  })();
}
Hi(["click"]);
var QA = /* @__PURE__ */ J('<div class="dark:bg-neutral-900 bg-neutral-200 fixed inset-0 flex items-center justify-center"><svg class="m-auto h-12 w-12 animate-spin text-neutral-800 dark:text-neutral-100"xmlns=http://www.w3.org/2000/svg fill=none viewBox="0 0 24 24"><circle class=opacity-25 cx=12 cy=12 r=10 stroke=currentColor stroke-width=4></circle><path class=opacity-75 fill=currentColor d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z">');
const Fb = () => QA();
var PA = /* @__PURE__ */ J('<div class="bg-white dark:bg-neutral-900 h-screen w-full"><div class="flex min-h-screen items-center justify-center"><div class="w-full max-w-md rounded-lg bg-neutral-950 p-8 border border-neutral-300 dark:border-neutral-600 shadow-lg"><h2 class="text-center text-2xl font-bold text-white">Welcome Back 👋</h2><form class=space-y-4><div><label class="block text-gray-400">Email</label><input type=email placeholder="Enter email"class="mt-1 w-full rounded-md border border-neutral-300 dark:border-neutral-600 bg-neutral-200 dark:bg-neutral-800 p-3 text-neutral-900 dark:text-neutral-100 placeholder-neutral-400 focus:ring-2 focus:ring-blue-500"></div><div><label class="block text-gray-400">Password</label><input type=password placeholder=•••••••• class="mt-1 w-full rounded-md border border-neutral-300 dark:border-neutral-600 bg-neutral-200 dark:bg-neutral-800 p-3 text-neutral-900 dark:text-neutral-100 placeholder-neutral-400 focus:ring-2 focus:ring-blue-500"></div><button type=submit class="w-full rounded-md bg-blue-600 p-3 text-white hover:bg-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-400">Sign In'), $A = /* @__PURE__ */ J('<p class="text-center text-sm text-red-400">'), TA = /* @__PURE__ */ J('<div class="dark:bg-solid-darkbg fixed inset-0 flex items-center justify-center">');
const CA = () => {
  const [i, e] = ee(""), [t, n] = ee(""), [r, s] = ee(""), [o, l] = ee(!1), a = Nt();
  wi();
  const h = async (c) => {
    c.preventDefault(), s(""), l(!0);
    try {
      const f = await fetch(`${wr}/auth/login`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        credentials: "include",
        body: JSON.stringify({
          email: i(),
          password: t()
        })
      });
      if (!f.ok) {
        const d = await f.text();
        throw s(d || f.statusText), new Error(d || f.statusText);
      }
      const u = await f.json();
      if (u)
        localStorage.setItem("token", u.accessToken), location.reload(), a("/dashboard");
      else
        throw new Error("AccessToken not found in response");
    } catch (f) {
      s(f.message || "Login failed");
    } finally {
      l(!1);
    }
  };
  return D(cn, {
    get when() {
      return !o();
    },
    get fallback() {
      return D(Fb, {});
    },
    get children() {
      var c = PA(), f = c.firstChild, u = f.firstChild, d = u.firstChild, O = d.nextSibling, p = O.firstChild, m = p.firstChild, g = m.nextSibling, S = p.nextSibling, x = S.firstChild, k = x.nextSibling;
      return F(u, (() => {
        var w = xr(() => !!r());
        return () => w() && (() => {
          var b = $A();
          return F(b, r), b;
        })();
      })(), O), O.addEventListener("submit", h), g.$$input = (w) => e(w.currentTarget.value), k.$$input = (w) => n(w.currentTarget.value), F(u, D(Yb, {}), null), F(u, D(Gb, {}), null), De(() => g.value = i()), De(() => k.value = t()), c;
    }
  });
}, RA = () => (Nt(), localStorage.getItem("user"), wi(), pi(() => {
}), (() => {
  var i = TA();
  return F(i, D(CA, {})), i;
})());
Hi(["input"]);
var AA = /* @__PURE__ */ J('<div class="bg-white dark:bg-neutral-900 h-screen w-full"><div class="flex min-h-screen items-center justify-center"><div class="w-full max-w-md rounded-lg bg-neutral-950 p-8 border border-neutral-300 dark:border-neutral-600 shadow-lg"><h2 class="text-center text-2xl font-bold text-white">Welcome Back 👋</h2><form class=space-y-4><div><label class="block text-gray-400">Email</label><input type=email placeholder="Enter email"class="mt-1 w-full rounded-md border border-neutral-300 dark:border-neutral-600 bg-neutral-200 dark:bg-neutral-800 p-3 text-neutral-900 dark:text-neutral-100 placeholder-neutral-400 focus:ring-2 focus:ring-blue-500"></div><div><label class="block text-gray-400">Password</label><input type=password placeholder=•••••••• class="mt-1 w-full rounded-md border border-neutral-300 dark:border-neutral-600 bg-neutral-200 dark:bg-neutral-800 p-3 text-neutral-900 dark:text-neutral-100 placeholder-neutral-400 focus:ring-2 focus:ring-blue-500"></div><button type=submit class="w-full rounded-md bg-blue-600 p-3 text-white hover:bg-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-400">Sign In'), EA = /* @__PURE__ */ J('<p class="text-center text-sm text-red-400">'), MA = /* @__PURE__ */ J('<div class="dark:bg-solid-darkbg fixed inset-0 flex items-center justify-center">');
const qA = () => {
  const [i, e] = ee(""), [t, n] = ee(""), [r, s] = ee(""), [o, l] = ee(!1), a = Nt();
  wi();
  const h = async (c) => {
    c.preventDefault(), s(""), l(!0);
    try {
      const f = await fetch(`${wr}/auth/login`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        credentials: "include",
        body: JSON.stringify({
          email: i(),
          password: t()
        })
      });
      if (!f.ok) {
        const d = await f.text();
        throw s(d || f.statusText), new Error(d || f.statusText);
      }
      const u = await f.json();
      if (u)
        localStorage.setItem("token", u.accessToken), location.reload(), a("/dashboard");
      else
        throw new Error("AccessToken not found in response");
    } catch (f) {
      s(f.message || "Login failed");
    } finally {
      l(!1);
    }
  };
  return D(cn, {
    get when() {
      return !o();
    },
    get fallback() {
      return D(Fb, {});
    },
    get children() {
      var c = AA(), f = c.firstChild, u = f.firstChild, d = u.firstChild, O = d.nextSibling, p = O.firstChild, m = p.firstChild, g = m.nextSibling, S = p.nextSibling, x = S.firstChild, k = x.nextSibling;
      return F(u, (() => {
        var w = xr(() => !!r());
        return () => w() && (() => {
          var b = EA();
          return F(b, r), b;
        })();
      })(), O), O.addEventListener("submit", h), g.$$input = (w) => e(w.currentTarget.value), k.$$input = (w) => n(w.currentTarget.value), F(u, D(Yb, {}), null), F(u, D(Gb, {}), null), De(() => g.value = i()), De(() => k.value = t()), c;
    }
  });
}, _A = () => {
  Nt();
  const i = localStorage.getItem("user");
  return wi(), pi(() => {
    i && localStorage.removeItem("user");
  }), (() => {
    var e = MA();
    return F(e, D(qA, {})), e;
  })();
};
Hi(["input"]);
let _u = [], Hb = [];
(() => {
  let i = "lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map((e) => e ? parseInt(e, 36) : 1);
  for (let e = 0, t = 0; e < i.length; e++)
    (e % 2 ? Hb : _u).push(t = t + i[e]);
})();
function XA(i) {
  if (i < 768) return !1;
  for (let e = 0, t = _u.length; ; ) {
    let n = e + t >> 1;
    if (i < _u[n]) t = n;
    else if (i >= Hb[n]) e = n + 1;
    else return !0;
    if (e == t) return !1;
  }
}
function Sg(i) {
  return i >= 127462 && i <= 127487;
}
const bg = 8205;
function LA(i, e, t = !0, n = !0) {
  return (t ? Kb : BA)(i, e, n);
}
function Kb(i, e, t) {
  if (e == i.length) return e;
  e && Jb(i.charCodeAt(e)) && ex(i.charCodeAt(e - 1)) && e--;
  let n = Jc(i, e);
  for (e += xg(n); e < i.length; ) {
    let r = Jc(i, e);
    if (n == bg || r == bg || t && XA(r))
      e += xg(r), n = r;
    else if (Sg(r)) {
      let s = 0, o = e - 2;
      for (; o >= 0 && Sg(Jc(i, o)); )
        s++, o -= 2;
      if (s % 2 == 0) break;
      e += 2;
    } else
      break;
  }
  return e;
}
function BA(i, e, t) {
  for (; e > 0; ) {
    let n = Kb(i, e - 2, t);
    if (n < e) return n;
    e--;
  }
  return 0;
}
function Jc(i, e) {
  let t = i.charCodeAt(e);
  if (!ex(t) || e + 1 == i.length) return t;
  let n = i.charCodeAt(e + 1);
  return Jb(n) ? (t - 55296 << 10) + (n - 56320) + 65536 : t;
}
function Jb(i) {
  return i >= 56320 && i < 57344;
}
function ex(i) {
  return i >= 55296 && i < 56320;
}
function xg(i) {
  return i < 65536 ? 1 : 2;
}
let me = class tx {
  /**
  Get the line description around the given position.
  */
  lineAt(e) {
    if (e < 0 || e > this.length)
      throw new RangeError(`Invalid position ${e} in document of length ${this.length}`);
    return this.lineInner(e, !1, 1, 0);
  }
  /**
  Get the description for the given (1-based) line number.
  */
  line(e) {
    if (e < 1 || e > this.lines)
      throw new RangeError(`Invalid line number ${e} in ${this.lines}-line document`);
    return this.lineInner(e, !0, 1, 0);
  }
  /**
  Replace a range of the text with the given content.
  */
  replace(e, t, n) {
    [e, t] = cs(this, e, t);
    let r = [];
    return this.decompose(
      0,
      e,
      r,
      2
      /* Open.To */
    ), n.length && n.decompose(
      0,
      n.length,
      r,
      3
      /* Open.To */
    ), this.decompose(
      t,
      this.length,
      r,
      1
      /* Open.From */
    ), Aa.from(r, this.length - (t - e) + n.length);
  }
  /**
  Append another document to this one.
  */
  append(e) {
    return this.replace(this.length, this.length, e);
  }
  /**
  Retrieve the text between the given points.
  */
  slice(e, t = this.length) {
    [e, t] = cs(this, e, t);
    let n = [];
    return this.decompose(e, t, n, 0), Aa.from(n, t - e);
  }
  /**
  Test whether this text is equal to another instance.
  */
  eq(e) {
    if (e == this)
      return !0;
    if (e.length != this.length || e.lines != this.lines)
      return !1;
    let t = this.scanIdentical(e, 1), n = this.length - this.scanIdentical(e, -1), r = new wo(this), s = new wo(e);
    for (let o = t, l = t; ; ) {
      if (r.next(o), s.next(o), o = 0, r.lineBreak != s.lineBreak || r.done != s.done || r.value != s.value)
        return !1;
      if (l += r.value.length, r.done || l >= n)
        return !0;
    }
  }
  /**
  Iterate over the text. When `dir` is `-1`, iteration happens
  from end to start. This will return lines and the breaks between
  them as separate strings.
  */
  iter(e = 1) {
    return new wo(this, e);
  }
  /**
  Iterate over a range of the text. When `from` > `to`, the
  iterator will run in reverse.
  */
  iterRange(e, t = this.length) {
    return new ix(this, e, t);
  }
  /**
  Return a cursor that iterates over the given range of lines,
  _without_ returning the line breaks between, and yielding empty
  strings for empty lines.
  
  When `from` and `to` are given, they should be 1-based line numbers.
  */
  iterLines(e, t) {
    let n;
    if (e == null)
      n = this.iter();
    else {
      t == null && (t = this.lines + 1);
      let r = this.line(e).from;
      n = this.iterRange(r, Math.max(r, t == this.lines + 1 ? this.length : t <= 1 ? 0 : this.line(t - 1).to));
    }
    return new nx(n);
  }
  /**
  Return the document as a string, using newline characters to
  separate lines.
  */
  toString() {
    return this.sliceString(0);
  }
  /**
  Convert the document to an array of lines (which can be
  deserialized again via [`Text.of`](https://codemirror.net/6/docs/ref/#state.Text^of)).
  */
  toJSON() {
    let e = [];
    return this.flatten(e), e;
  }
  /**
  @internal
  */
  constructor() {
  }
  /**
  Create a `Text` instance for the given array of lines.
  */
  static of(e) {
    if (e.length == 0)
      throw new RangeError("A document must have at least one line");
    return e.length == 1 && !e[0] ? tx.empty : e.length <= 32 ? new ci(e) : Aa.from(ci.split(e, []));
  }
}, ci = class qi extends me {
  constructor(e, t = ZA(e)) {
    super(), this.text = e, this.length = t;
  }
  get lines() {
    return this.text.length;
  }
  get children() {
    return null;
  }
  lineInner(e, t, n, r) {
    for (let s = 0; ; s++) {
      let o = this.text[s], l = r + o.length;
      if ((t ? n : l) >= e)
        return new DA(r, l, n, o);
      r = l + 1, n++;
    }
  }
  decompose(e, t, n, r) {
    let s = e <= 0 && t >= this.length ? this : new qi(wg(this.text, e, t), Math.min(t, this.length) - Math.max(0, e));
    if (r & 1) {
      let o = n.pop(), l = Ea(s.text, o.text.slice(), 0, s.length);
      if (l.length <= 32)
        n.push(new qi(l, o.length + s.length));
      else {
        let a = l.length >> 1;
        n.push(new qi(l.slice(0, a)), new qi(l.slice(a)));
      }
    } else
      n.push(s);
  }
  replace(e, t, n) {
    if (!(n instanceof qi))
      return super.replace(e, t, n);
    [e, t] = cs(this, e, t);
    let r = Ea(this.text, Ea(n.text, wg(this.text, 0, e)), t), s = this.length + n.length - (t - e);
    return r.length <= 32 ? new qi(r, s) : Aa.from(qi.split(r, []), s);
  }
  sliceString(e, t = this.length, n = `
`) {
    [e, t] = cs(this, e, t);
    let r = "";
    for (let s = 0, o = 0; s <= t && o < this.text.length; o++) {
      let l = this.text[o], a = s + l.length;
      s > e && o && (r += n), e < a && t > s && (r += l.slice(Math.max(0, e - s), t - s)), s = a + 1;
    }
    return r;
  }
  flatten(e) {
    for (let t of this.text)
      e.push(t);
  }
  scanIdentical() {
    return 0;
  }
  static split(e, t) {
    let n = [], r = -1;
    for (let s of e)
      n.push(s), r += s.length + 1, n.length == 32 && (t.push(new qi(n, r)), n = [], r = -1);
    return r > -1 && t.push(new qi(n, r)), t;
  }
}, Aa = class Br extends me {
  constructor(e, t) {
    super(), this.children = e, this.length = t, this.lines = 0;
    for (let n of e)
      this.lines += n.lines;
  }
  lineInner(e, t, n, r) {
    for (let s = 0; ; s++) {
      let o = this.children[s], l = r + o.length, a = n + o.lines - 1;
      if ((t ? a : l) >= e)
        return o.lineInner(e, t, n, r);
      r = l + 1, n = a + 1;
    }
  }
  decompose(e, t, n, r) {
    for (let s = 0, o = 0; o <= t && s < this.children.length; s++) {
      let l = this.children[s], a = o + l.length;
      if (e <= a && t >= o) {
        let h = r & ((o <= e ? 1 : 0) | (a >= t ? 2 : 0));
        o >= e && a <= t && !h ? n.push(l) : l.decompose(e - o, t - o, n, h);
      }
      o = a + 1;
    }
  }
  replace(e, t, n) {
    if ([e, t] = cs(this, e, t), n.lines < this.lines)
      for (let r = 0, s = 0; r < this.children.length; r++) {
        let o = this.children[r], l = s + o.length;
        if (e >= s && t <= l) {
          let a = o.replace(e - s, t - s, n), h = this.lines - o.lines + a.lines;
          if (a.lines < h >> 4 && a.lines > h >> 6) {
            let c = this.children.slice();
            return c[r] = a, new Br(c, this.length - (t - e) + n.length);
          }
          return super.replace(s, l, a);
        }
        s = l + 1;
      }
    return super.replace(e, t, n);
  }
  sliceString(e, t = this.length, n = `
`) {
    [e, t] = cs(this, e, t);
    let r = "";
    for (let s = 0, o = 0; s < this.children.length && o <= t; s++) {
      let l = this.children[s], a = o + l.length;
      o > e && s && (r += n), e < a && t > o && (r += l.sliceString(e - o, t - o, n)), o = a + 1;
    }
    return r;
  }
  flatten(e) {
    for (let t of this.children)
      t.flatten(e);
  }
  scanIdentical(e, t) {
    if (!(e instanceof Br))
      return 0;
    let n = 0, [r, s, o, l] = t > 0 ? [0, 0, this.children.length, e.children.length] : [this.children.length - 1, e.children.length - 1, -1, -1];
    for (; ; r += t, s += t) {
      if (r == o || s == l)
        return n;
      let a = this.children[r], h = e.children[s];
      if (a != h)
        return n + a.scanIdentical(h, t);
      n += a.length + 1;
    }
  }
  static from(e, t = e.reduce((n, r) => n + r.length + 1, -1)) {
    let n = 0;
    for (let d of e)
      n += d.lines;
    if (n < 32) {
      let d = [];
      for (let O of e)
        O.flatten(d);
      return new ci(d, t);
    }
    let r = Math.max(
      32,
      n >> 5
      /* Tree.BranchShift */
    ), s = r << 1, o = r >> 1, l = [], a = 0, h = -1, c = [];
    function f(d) {
      let O;
      if (d.lines > s && d instanceof Br)
        for (let p of d.children)
          f(p);
      else d.lines > o && (a > o || !a) ? (u(), l.push(d)) : d instanceof ci && a && (O = c[c.length - 1]) instanceof ci && d.lines + O.lines <= 32 ? (a += d.lines, h += d.length + 1, c[c.length - 1] = new ci(O.text.concat(d.text), O.length + 1 + d.length)) : (a + d.lines > r && u(), a += d.lines, h += d.length + 1, c.push(d));
    }
    function u() {
      a != 0 && (l.push(c.length == 1 ? c[0] : Br.from(c, h)), h = -1, a = c.length = 0);
    }
    for (let d of e)
      f(d);
    return u(), l.length == 1 ? l[0] : new Br(l, t);
  }
};
me.empty = /* @__PURE__ */ new ci([""], 0);
function ZA(i) {
  let e = -1;
  for (let t of i)
    e += t.length + 1;
  return e;
}
function Ea(i, e, t = 0, n = 1e9) {
  for (let r = 0, s = 0, o = !0; s < i.length && r <= n; s++) {
    let l = i[s], a = r + l.length;
    a >= t && (a > n && (l = l.slice(0, n - r)), r < t && (l = l.slice(t - r)), o ? (e[e.length - 1] += l, o = !1) : e.push(l)), r = a + 1;
  }
  return e;
}
function wg(i, e, t) {
  return Ea(i, [""], e, t);
}
let wo = class {
  constructor(e, t = 1) {
    this.dir = t, this.done = !1, this.lineBreak = !1, this.value = "", this.nodes = [e], this.offsets = [t > 0 ? 1 : (e instanceof ci ? e.text.length : e.children.length) << 1];
  }
  nextInner(e, t) {
    for (this.done = this.lineBreak = !1; ; ) {
      let n = this.nodes.length - 1, r = this.nodes[n], s = this.offsets[n], o = s >> 1, l = r instanceof ci ? r.text.length : r.children.length;
      if (o == (t > 0 ? l : 0)) {
        if (n == 0)
          return this.done = !0, this.value = "", this;
        t > 0 && this.offsets[n - 1]++, this.nodes.pop(), this.offsets.pop();
      } else if ((s & 1) == (t > 0 ? 0 : 1)) {
        if (this.offsets[n] += t, e == 0)
          return this.lineBreak = !0, this.value = `
`, this;
        e--;
      } else if (r instanceof ci) {
        let a = r.text[o + (t < 0 ? -1 : 0)];
        if (this.offsets[n] += t, a.length > Math.max(0, e))
          return this.value = e == 0 ? a : t > 0 ? a.slice(e) : a.slice(0, a.length - e), this;
        e -= a.length;
      } else {
        let a = r.children[o + (t < 0 ? -1 : 0)];
        e > a.length ? (e -= a.length, this.offsets[n] += t) : (t < 0 && this.offsets[n]--, this.nodes.push(a), this.offsets.push(t > 0 ? 1 : (a instanceof ci ? a.text.length : a.children.length) << 1));
      }
    }
  }
  next(e = 0) {
    return e < 0 && (this.nextInner(-e, -this.dir), e = this.value.length), this.nextInner(e, this.dir);
  }
}, ix = class {
  constructor(e, t, n) {
    this.value = "", this.done = !1, this.cursor = new wo(e, t > n ? -1 : 1), this.pos = t > n ? e.length : 0, this.from = Math.min(t, n), this.to = Math.max(t, n);
  }
  nextInner(e, t) {
    if (t < 0 ? this.pos <= this.from : this.pos >= this.to)
      return this.value = "", this.done = !0, this;
    e += Math.max(0, t < 0 ? this.pos - this.to : this.from - this.pos);
    let n = t < 0 ? this.pos - this.from : this.to - this.pos;
    e > n && (e = n), n -= e;
    let { value: r } = this.cursor.next(e);
    return this.pos += (r.length + e) * t, this.value = r.length <= n ? r : t < 0 ? r.slice(r.length - n) : r.slice(0, n), this.done = !this.value, this;
  }
  next(e = 0) {
    return e < 0 ? e = Math.max(e, this.from - this.pos) : e > 0 && (e = Math.min(e, this.to - this.pos)), this.nextInner(e, this.cursor.dir);
  }
  get lineBreak() {
    return this.cursor.lineBreak && this.value != "";
  }
}, nx = class {
  constructor(e) {
    this.inner = e, this.afterBreak = !0, this.value = "", this.done = !1;
  }
  next(e = 0) {
    let { done: t, lineBreak: n, value: r } = this.inner.next(e);
    return t && this.afterBreak ? (this.value = "", this.afterBreak = !1) : t ? (this.done = !0, this.value = "") : n ? this.afterBreak ? this.value = "" : (this.afterBreak = !0, this.next()) : (this.value = r, this.afterBreak = !1), this;
  }
  get lineBreak() {
    return !1;
  }
};
typeof Symbol < "u" && (me.prototype[Symbol.iterator] = function() {
  return this.iter();
}, wo.prototype[Symbol.iterator] = ix.prototype[Symbol.iterator] = nx.prototype[Symbol.iterator] = function() {
  return this;
});
let DA = class {
  /**
  @internal
  */
  constructor(e, t, n, r) {
    this.from = e, this.to = t, this.number = n, this.text = r;
  }
  /**
  The length of the line (not including any line break after it).
  */
  get length() {
    return this.to - this.from;
  }
};
function cs(i, e, t) {
  return e = Math.max(0, Math.min(i.length, e)), [e, Math.max(e, Math.min(i.length, t))];
}
function ot(i, e, t = !0, n = !0) {
  return LA(i, e, t, n);
}
function VA(i) {
  return i >= 56320 && i < 57344;
}
function WA(i) {
  return i >= 55296 && i < 56320;
}
function Pt(i, e) {
  let t = i.charCodeAt(e);
  if (!WA(t) || e + 1 == i.length)
    return t;
  let n = i.charCodeAt(e + 1);
  return VA(n) ? (t - 55296 << 10) + (n - 56320) + 65536 : t;
}
function pp(i) {
  return i <= 65535 ? String.fromCharCode(i) : (i -= 65536, String.fromCharCode((i >> 10) + 55296, (i & 1023) + 56320));
}
function Di(i) {
  return i < 65536 ? 1 : 2;
}
const Xu = /\r\n?|\n/;
var st = /* @__PURE__ */ function(i) {
  return i[i.Simple = 0] = "Simple", i[i.TrackDel = 1] = "TrackDel", i[i.TrackBefore = 2] = "TrackBefore", i[i.TrackAfter = 3] = "TrackAfter", i;
}(st || (st = {}));
let Kr = class Ma {
  // Sections are encoded as pairs of integers. The first is the
  // length in the current document, and the second is -1 for
  // unaffected sections, and the length of the replacement content
  // otherwise. So an insertion would be (0, n>0), a deletion (n>0,
  // 0), and a replacement two positive numbers.
  /**
  @internal
  */
  constructor(e) {
    this.sections = e;
  }
  /**
  The length of the document before the change.
  */
  get length() {
    let e = 0;
    for (let t = 0; t < this.sections.length; t += 2)
      e += this.sections[t];
    return e;
  }
  /**
  The length of the document after the change.
  */
  get newLength() {
    let e = 0;
    for (let t = 0; t < this.sections.length; t += 2) {
      let n = this.sections[t + 1];
      e += n < 0 ? this.sections[t] : n;
    }
    return e;
  }
  /**
  False when there are actual changes in this set.
  */
  get empty() {
    return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0;
  }
  /**
  Iterate over the unchanged parts left by these changes. `posA`
  provides the position of the range in the old document, `posB`
  the new position in the changed document.
  */
  iterGaps(e) {
    for (let t = 0, n = 0, r = 0; t < this.sections.length; ) {
      let s = this.sections[t++], o = this.sections[t++];
      o < 0 ? (e(n, r, s), r += s) : r += o, n += s;
    }
  }
  /**
  Iterate over the ranges changed by these changes. (See
  [`ChangeSet.iterChanges`](https://codemirror.net/6/docs/ref/#state.ChangeSet.iterChanges) for a
  variant that also provides you with the inserted text.)
  `fromA`/`toA` provides the extent of the change in the starting
  document, `fromB`/`toB` the extent of the replacement in the
  changed document.
  
  When `individual` is true, adjacent changes (which are kept
  separate for [position mapping](https://codemirror.net/6/docs/ref/#state.ChangeDesc.mapPos)) are
  reported separately.
  */
  iterChangedRanges(e, t = !1) {
    Lu(this, e, t);
  }
  /**
  Get a description of the inverted form of these changes.
  */
  get invertedDesc() {
    let e = [];
    for (let t = 0; t < this.sections.length; ) {
      let n = this.sections[t++], r = this.sections[t++];
      r < 0 ? e.push(n, r) : e.push(r, n);
    }
    return new Ma(e);
  }
  /**
  Compute the combined effect of applying another set of changes
  after this one. The length of the document after this set should
  match the length before `other`.
  */
  composeDesc(e) {
    return this.empty ? e : e.empty ? this : rx(this, e);
  }
  /**
  Map this description, which should start with the same document
  as `other`, over another set of changes, so that it can be
  applied after it. When `before` is true, map as if the changes
  in `this` happened before the ones in `other`.
  */
  mapDesc(e, t = !1) {
    return e.empty ? this : Bu(this, e, t);
  }
  mapPos(e, t = -1, n = st.Simple) {
    let r = 0, s = 0;
    for (let o = 0; o < this.sections.length; ) {
      let l = this.sections[o++], a = this.sections[o++], h = r + l;
      if (a < 0) {
        if (h > e)
          return s + (e - r);
        s += l;
      } else {
        if (n != st.Simple && h >= e && (n == st.TrackDel && r < e && h > e || n == st.TrackBefore && r < e || n == st.TrackAfter && h > e))
          return null;
        if (h > e || h == e && t < 0 && !l)
          return e == r || t < 0 ? s : s + a;
        s += a;
      }
      r = h;
    }
    if (e > r)
      throw new RangeError(`Position ${e} is out of range for changeset of length ${r}`);
    return s;
  }
  /**
  Check whether these changes touch a given range. When one of the
  changes entirely covers the range, the string `"cover"` is
  returned.
  */
  touchesRange(e, t = e) {
    for (let n = 0, r = 0; n < this.sections.length && r <= t; ) {
      let s = this.sections[n++], o = this.sections[n++], l = r + s;
      if (o >= 0 && r <= t && l >= e)
        return r < e && l > t ? "cover" : !0;
      r = l;
    }
    return !1;
  }
  /**
  @internal
  */
  toString() {
    let e = "";
    for (let t = 0; t < this.sections.length; ) {
      let n = this.sections[t++], r = this.sections[t++];
      e += (e ? " " : "") + n + (r >= 0 ? ":" + r : "");
    }
    return e;
  }
  /**
  Serialize this change desc to a JSON-representable value.
  */
  toJSON() {
    return this.sections;
  }
  /**
  Create a change desc from its JSON representation (as produced
  by [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeDesc.toJSON).
  */
  static fromJSON(e) {
    if (!Array.isArray(e) || e.length % 2 || e.some((t) => typeof t != "number"))
      throw new RangeError("Invalid JSON representation of ChangeDesc");
    return new Ma(e);
  }
  /**
  @internal
  */
  static create(e) {
    return new Ma(e);
  }
}, mi = class Pn extends Kr {
  constructor(e, t) {
    super(e), this.inserted = t;
  }
  /**
  Apply the changes to a document, returning the modified
  document.
  */
  apply(e) {
    if (this.length != e.length)
      throw new RangeError("Applying change set to a document with the wrong length");
    return Lu(this, (t, n, r, s, o) => e = e.replace(r, r + (n - t), o), !1), e;
  }
  mapDesc(e, t = !1) {
    return Bu(this, e, t, !0);
  }
  /**
  Given the document as it existed _before_ the changes, return a
  change set that represents the inverse of this set, which could
  be used to go from the document created by the changes back to
  the document as it existed before the changes.
  */
  invert(e) {
    let t = this.sections.slice(), n = [];
    for (let r = 0, s = 0; r < t.length; r += 2) {
      let o = t[r], l = t[r + 1];
      if (l >= 0) {
        t[r] = l, t[r + 1] = o;
        let a = r >> 1;
        for (; n.length < a; )
          n.push(me.empty);
        n.push(o ? e.slice(s, s + o) : me.empty);
      }
      s += o;
    }
    return new Pn(t, n);
  }
  /**
  Combine two subsequent change sets into a single set. `other`
  must start in the document produced by `this`. If `this` goes
  `docA` → `docB` and `other` represents `docB` → `docC`, the
  returned value will represent the change `docA` → `docC`.
  */
  compose(e) {
    return this.empty ? e : e.empty ? this : rx(this, e, !0);
  }
  /**
  Given another change set starting in the same document, maps this
  change set over the other, producing a new change set that can be
  applied to the document produced by applying `other`. When
  `before` is `true`, order changes as if `this` comes before
  `other`, otherwise (the default) treat `other` as coming first.
  
  Given two changes `A` and `B`, `A.compose(B.map(A))` and
  `B.compose(A.map(B, true))` will produce the same document. This
  provides a basic form of [operational
  transformation](https://en.wikipedia.org/wiki/Operational_transformation),
  and can be used for collaborative editing.
  */
  map(e, t = !1) {
    return e.empty ? this : Bu(this, e, t, !0);
  }
  /**
  Iterate over the changed ranges in the document, calling `f` for
  each, with the range in the original document (`fromA`-`toA`)
  and the range that replaces it in the new document
  (`fromB`-`toB`).
  
  When `individual` is true, adjacent changes are reported
  separately.
  */
  iterChanges(e, t = !1) {
    Lu(this, e, t);
  }
  /**
  Get a [change description](https://codemirror.net/6/docs/ref/#state.ChangeDesc) for this change
  set.
  */
  get desc() {
    return Kr.create(this.sections);
  }
  /**
  @internal
  */
  filter(e) {
    let t = [], n = [], r = [], s = new Lo(this);
    e: for (let o = 0, l = 0; ; ) {
      let a = o == e.length ? 1e9 : e[o++];
      for (; l < a || l == a && s.len == 0; ) {
        if (s.done)
          break e;
        let c = Math.min(s.len, a - l);
        ut(r, c, -1);
        let f = s.ins == -1 ? -1 : s.off == 0 ? s.ins : 0;
        ut(t, c, f), f > 0 && Mn(n, t, s.text), s.forward(c), l += c;
      }
      let h = e[o++];
      for (; l < h; ) {
        if (s.done)
          break e;
        let c = Math.min(s.len, h - l);
        ut(t, c, -1), ut(r, c, s.ins == -1 ? -1 : s.off == 0 ? s.ins : 0), s.forward(c), l += c;
      }
    }
    return {
      changes: new Pn(t, n),
      filtered: Kr.create(r)
    };
  }
  /**
  Serialize this change set to a JSON-representable value.
  */
  toJSON() {
    let e = [];
    for (let t = 0; t < this.sections.length; t += 2) {
      let n = this.sections[t], r = this.sections[t + 1];
      r < 0 ? e.push(n) : r == 0 ? e.push([n]) : e.push([n].concat(this.inserted[t >> 1].toJSON()));
    }
    return e;
  }
  /**
  Create a change set for the given changes, for a document of the
  given length, using `lineSep` as line separator.
  */
  static of(e, t, n) {
    let r = [], s = [], o = 0, l = null;
    function a(c = !1) {
      if (!c && !r.length)
        return;
      o < t && ut(r, t - o, -1);
      let f = new Pn(r, s);
      l = l ? l.compose(f.map(l)) : f, r = [], s = [], o = 0;
    }
    function h(c) {
      if (Array.isArray(c))
        for (let f of c)
          h(f);
      else if (c instanceof Pn) {
        if (c.length != t)
          throw new RangeError(`Mismatched change set length (got ${c.length}, expected ${t})`);
        a(), l = l ? l.compose(c.map(l)) : c;
      } else {
        let { from: f, to: u = f, insert: d } = c;
        if (f > u || f < 0 || u > t)
          throw new RangeError(`Invalid change range ${f} to ${u} (in doc of length ${t})`);
        let O = d ? typeof d == "string" ? me.of(d.split(n || Xu)) : d : me.empty, p = O.length;
        if (f == u && p == 0)
          return;
        f < o && a(), f > o && ut(r, f - o, -1), ut(r, u - f, p), Mn(s, r, O), o = u;
      }
    }
    return h(e), a(!l), l;
  }
  /**
  Create an empty changeset of the given length.
  */
  static empty(e) {
    return new Pn(e ? [e, -1] : [], []);
  }
  /**
  Create a changeset from its JSON representation (as produced by
  [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeSet.toJSON).
  */
  static fromJSON(e) {
    if (!Array.isArray(e))
      throw new RangeError("Invalid JSON representation of ChangeSet");
    let t = [], n = [];
    for (let r = 0; r < e.length; r++) {
      let s = e[r];
      if (typeof s == "number")
        t.push(s, -1);
      else {
        if (!Array.isArray(s) || typeof s[0] != "number" || s.some((o, l) => l && typeof o != "string"))
          throw new RangeError("Invalid JSON representation of ChangeSet");
        if (s.length == 1)
          t.push(s[0], 0);
        else {
          for (; n.length < r; )
            n.push(me.empty);
          n[r] = me.of(s.slice(1)), t.push(s[0], n[r].length);
        }
      }
    }
    return new Pn(t, n);
  }
  /**
  @internal
  */
  static createSet(e, t) {
    return new Pn(e, t);
  }
};
function ut(i, e, t, n = !1) {
  if (e == 0 && t <= 0)
    return;
  let r = i.length - 2;
  r >= 0 && t <= 0 && t == i[r + 1] ? i[r] += e : r >= 0 && e == 0 && i[r] == 0 ? i[r + 1] += t : n ? (i[r] += e, i[r + 1] += t) : i.push(e, t);
}
function Mn(i, e, t) {
  if (t.length == 0)
    return;
  let n = e.length - 2 >> 1;
  if (n < i.length)
    i[i.length - 1] = i[i.length - 1].append(t);
  else {
    for (; i.length < n; )
      i.push(me.empty);
    i.push(t);
  }
}
function Lu(i, e, t) {
  let n = i.inserted;
  for (let r = 0, s = 0, o = 0; o < i.sections.length; ) {
    let l = i.sections[o++], a = i.sections[o++];
    if (a < 0)
      r += l, s += l;
    else {
      let h = r, c = s, f = me.empty;
      for (; h += l, c += a, a && n && (f = f.append(n[o - 2 >> 1])), !(t || o == i.sections.length || i.sections[o + 1] < 0); )
        l = i.sections[o++], a = i.sections[o++];
      e(r, h, s, c, f), r = h, s = c;
    }
  }
}
function Bu(i, e, t, n = !1) {
  let r = [], s = n ? [] : null, o = new Lo(i), l = new Lo(e);
  for (let a = -1; ; ) {
    if (o.done && l.len || l.done && o.len)
      throw new Error("Mismatched change set lengths");
    if (o.ins == -1 && l.ins == -1) {
      let h = Math.min(o.len, l.len);
      ut(r, h, -1), o.forward(h), l.forward(h);
    } else if (l.ins >= 0 && (o.ins < 0 || a == o.i || o.off == 0 && (l.len < o.len || l.len == o.len && !t))) {
      let h = l.len;
      for (ut(r, l.ins, -1); h; ) {
        let c = Math.min(o.len, h);
        o.ins >= 0 && a < o.i && o.len <= c && (ut(r, 0, o.ins), s && Mn(s, r, o.text), a = o.i), o.forward(c), h -= c;
      }
      l.next();
    } else if (o.ins >= 0) {
      let h = 0, c = o.len;
      for (; c; )
        if (l.ins == -1) {
          let f = Math.min(c, l.len);
          h += f, c -= f, l.forward(f);
        } else if (l.ins == 0 && l.len < c)
          c -= l.len, l.next();
        else
          break;
      ut(r, h, a < o.i ? o.ins : 0), s && a < o.i && Mn(s, r, o.text), a = o.i, o.forward(o.len - c);
    } else {
      if (o.done && l.done)
        return s ? mi.createSet(r, s) : Kr.create(r);
      throw new Error("Mismatched change set lengths");
    }
  }
}
function rx(i, e, t = !1) {
  let n = [], r = t ? [] : null, s = new Lo(i), o = new Lo(e);
  for (let l = !1; ; ) {
    if (s.done && o.done)
      return r ? mi.createSet(n, r) : Kr.create(n);
    if (s.ins == 0)
      ut(n, s.len, 0, l), s.next();
    else if (o.len == 0 && !o.done)
      ut(n, 0, o.ins, l), r && Mn(r, n, o.text), o.next();
    else {
      if (s.done || o.done)
        throw new Error("Mismatched change set lengths");
      {
        let a = Math.min(s.len2, o.len), h = n.length;
        if (s.ins == -1) {
          let c = o.ins == -1 ? -1 : o.off ? 0 : o.ins;
          ut(n, a, c, l), r && c && Mn(r, n, o.text);
        } else o.ins == -1 ? (ut(n, s.off ? 0 : s.len, a, l), r && Mn(r, n, s.textBit(a))) : (ut(n, s.off ? 0 : s.len, o.off ? 0 : o.ins, l), r && !o.off && Mn(r, n, o.text));
        l = (s.ins > a || o.ins >= 0 && o.len > a) && (l || n.length > h), s.forward2(a), o.forward(a);
      }
    }
  }
}
let Lo = class {
  constructor(e) {
    this.set = e, this.i = 0, this.next();
  }
  next() {
    let { sections: e } = this.set;
    this.i < e.length ? (this.len = e[this.i++], this.ins = e[this.i++]) : (this.len = 0, this.ins = -2), this.off = 0;
  }
  get done() {
    return this.ins == -2;
  }
  get len2() {
    return this.ins < 0 ? this.len : this.ins;
  }
  get text() {
    let { inserted: e } = this.set, t = this.i - 2 >> 1;
    return t >= e.length ? me.empty : e[t];
  }
  textBit(e) {
    let { inserted: t } = this.set, n = this.i - 2 >> 1;
    return n >= t.length && !e ? me.empty : t[n].slice(this.off, e == null ? void 0 : this.off + e);
  }
  forward(e) {
    e == this.len ? this.next() : (this.len -= e, this.off += e);
  }
  forward2(e) {
    this.ins == -1 ? this.forward(e) : e == this.ins ? this.next() : (this.ins -= e, this.off += e);
  }
}, Zl = class Zu {
  constructor(e, t, n) {
    this.from = e, this.to = t, this.flags = n;
  }
  /**
  The anchor of the range—the side that doesn't move when you
  extend it.
  */
  get anchor() {
    return this.flags & 32 ? this.to : this.from;
  }
  /**
  The head of the range, which is moved when the range is
  [extended](https://codemirror.net/6/docs/ref/#state.SelectionRange.extend).
  */
  get head() {
    return this.flags & 32 ? this.from : this.to;
  }
  /**
  True when `anchor` and `head` are at the same position.
  */
  get empty() {
    return this.from == this.to;
  }
  /**
  If this is a cursor that is explicitly associated with the
  character on one of its sides, this returns the side. -1 means
  the character before its position, 1 the character after, and 0
  means no association.
  */
  get assoc() {
    return this.flags & 8 ? -1 : this.flags & 16 ? 1 : 0;
  }
  /**
  The bidirectional text level associated with this cursor, if
  any.
  */
  get bidiLevel() {
    let e = this.flags & 7;
    return e == 7 ? null : e;
  }
  /**
  The goal column (stored vertical offset) associated with a
  cursor. This is used to preserve the vertical position when
  [moving](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) across
  lines of different length.
  */
  get goalColumn() {
    let e = this.flags >> 6;
    return e == 16777215 ? void 0 : e;
  }
  /**
  Map this range through a change, producing a valid range in the
  updated document.
  */
  map(e, t = -1) {
    let n, r;
    return this.empty ? n = r = e.mapPos(this.from, t) : (n = e.mapPos(this.from, 1), r = e.mapPos(this.to, -1)), n == this.from && r == this.to ? this : new Zu(n, r, this.flags);
  }
  /**
  Extend this range to cover at least `from` to `to`.
  */
  extend(e, t = e) {
    if (e <= this.anchor && t >= this.anchor)
      return C.range(e, t);
    let n = Math.abs(e - this.anchor) > Math.abs(t - this.anchor) ? e : t;
    return C.range(this.anchor, n);
  }
  /**
  Compare this range to another range.
  */
  eq(e, t = !1) {
    return this.anchor == e.anchor && this.head == e.head && (!t || !this.empty || this.assoc == e.assoc);
  }
  /**
  Return a JSON-serializable object representing the range.
  */
  toJSON() {
    return { anchor: this.anchor, head: this.head };
  }
  /**
  Convert a JSON representation of a range to a `SelectionRange`
  instance.
  */
  static fromJSON(e) {
    if (!e || typeof e.anchor != "number" || typeof e.head != "number")
      throw new RangeError("Invalid JSON representation for SelectionRange");
    return C.range(e.anchor, e.head);
  }
  /**
  @internal
  */
  static create(e, t, n) {
    return new Zu(e, t, n);
  }
}, C = class Lt {
  constructor(e, t) {
    this.ranges = e, this.mainIndex = t;
  }
  /**
  Map a selection through a change. Used to adjust the selection
  position for changes.
  */
  map(e, t = -1) {
    return e.empty ? this : Lt.create(this.ranges.map((n) => n.map(e, t)), this.mainIndex);
  }
  /**
  Compare this selection to another selection. By default, ranges
  are compared only by position. When `includeAssoc` is true,
  cursor ranges must also have the same
  [`assoc`](https://codemirror.net/6/docs/ref/#state.SelectionRange.assoc) value.
  */
  eq(e, t = !1) {
    if (this.ranges.length != e.ranges.length || this.mainIndex != e.mainIndex)
      return !1;
    for (let n = 0; n < this.ranges.length; n++)
      if (!this.ranges[n].eq(e.ranges[n], t))
        return !1;
    return !0;
  }
  /**
  Get the primary selection range. Usually, you should make sure
  your code applies to _all_ ranges, by using methods like
  [`changeByRange`](https://codemirror.net/6/docs/ref/#state.EditorState.changeByRange).
  */
  get main() {
    return this.ranges[this.mainIndex];
  }
  /**
  Make sure the selection only has one range. Returns a selection
  holding only the main range from this selection.
  */
  asSingle() {
    return this.ranges.length == 1 ? this : new Lt([this.main], 0);
  }
  /**
  Extend this selection with an extra range.
  */
  addRange(e, t = !0) {
    return Lt.create([e].concat(this.ranges), t ? 0 : this.mainIndex + 1);
  }
  /**
  Replace a given range with another range, and then normalize the
  selection to merge and sort ranges if necessary.
  */
  replaceRange(e, t = this.mainIndex) {
    let n = this.ranges.slice();
    return n[t] = e, Lt.create(n, this.mainIndex);
  }
  /**
  Convert this selection to an object that can be serialized to
  JSON.
  */
  toJSON() {
    return { ranges: this.ranges.map((e) => e.toJSON()), main: this.mainIndex };
  }
  /**
  Create a selection from a JSON representation.
  */
  static fromJSON(e) {
    if (!e || !Array.isArray(e.ranges) || typeof e.main != "number" || e.main >= e.ranges.length)
      throw new RangeError("Invalid JSON representation for EditorSelection");
    return new Lt(e.ranges.map((t) => Zl.fromJSON(t)), e.main);
  }
  /**
  Create a selection holding a single range.
  */
  static single(e, t = e) {
    return new Lt([Lt.range(e, t)], 0);
  }
  /**
  Sort and merge the given set of ranges, creating a valid
  selection.
  */
  static create(e, t = 0) {
    if (e.length == 0)
      throw new RangeError("A selection needs at least one range");
    for (let n = 0, r = 0; r < e.length; r++) {
      let s = e[r];
      if (s.empty ? s.from <= n : s.from < n)
        return Lt.normalized(e.slice(), t);
      n = s.to;
    }
    return new Lt(e, t);
  }
  /**
  Create a cursor selection range at the given position. You can
  safely ignore the optional arguments in most situations.
  */
  static cursor(e, t = 0, n, r) {
    return Zl.create(e, e, (t == 0 ? 0 : t < 0 ? 8 : 16) | (n == null ? 7 : Math.min(6, n)) | (r ?? 16777215) << 6);
  }
  /**
  Create a selection range.
  */
  static range(e, t, n, r) {
    let s = (n ?? 16777215) << 6 | (r == null ? 7 : Math.min(6, r));
    return t < e ? Zl.create(t, e, 48 | s) : Zl.create(e, t, (t > e ? 8 : 0) | s);
  }
  /**
  @internal
  */
  static normalized(e, t = 0) {
    let n = e[t];
    e.sort((r, s) => r.from - s.from), t = e.indexOf(n);
    for (let r = 1; r < e.length; r++) {
      let s = e[r], o = e[r - 1];
      if (s.empty ? s.from <= o.to : s.from < o.to) {
        let l = o.from, a = Math.max(s.to, o.to);
        r <= t && t--, e.splice(--r, 2, s.anchor > s.head ? Lt.range(a, l) : Lt.range(l, a));
      }
    }
    return new Lt(e, t);
  }
};
function sx(i, e) {
  for (let t of i.ranges)
    if (t.to > e)
      throw new RangeError("Selection points outside of document");
}
let mp = 0, I = class ox {
  constructor(e, t, n, r, s) {
    this.combine = e, this.compareInput = t, this.compare = n, this.isStatic = r, this.id = mp++, this.default = e([]), this.extensions = typeof s == "function" ? s(this) : s;
  }
  /**
  Returns a facet reader for this facet, which can be used to
  [read](https://codemirror.net/6/docs/ref/#state.EditorState.facet) it but not to define values for it.
  */
  get reader() {
    return this;
  }
  /**
  Define a new facet.
  */
  static define(e = {}) {
    return new ox(e.combine || ((t) => t), e.compareInput || ((t, n) => t === n), e.compare || (e.combine ? (t, n) => t === n : gp), !!e.static, e.enables);
  }
  /**
  Returns an extension that adds the given value to this facet.
  */
  of(e) {
    return new qa([], this, 0, e);
  }
  /**
  Create an extension that computes a value for the facet from a
  state. You must take care to declare the parts of the state that
  this value depends on, since your function is only called again
  for a new state when one of those parts changed.
  
  In cases where your value depends only on a single field, you'll
  want to use the [`from`](https://codemirror.net/6/docs/ref/#state.Facet.from) method instead.
  */
  compute(e, t) {
    if (this.isStatic)
      throw new Error("Can't compute a static facet");
    return new qa(e, this, 1, t);
  }
  /**
  Create an extension that computes zero or more values for this
  facet from a state.
  */
  computeN(e, t) {
    if (this.isStatic)
      throw new Error("Can't compute a static facet");
    return new qa(e, this, 2, t);
  }
  from(e, t) {
    return t || (t = (n) => n), this.compute([e], (n) => t(n.field(e)));
  }
};
function gp(i, e) {
  return i == e || i.length == e.length && i.every((t, n) => t === e[n]);
}
let qa = class {
  constructor(e, t, n, r) {
    this.dependencies = e, this.facet = t, this.type = n, this.value = r, this.id = mp++;
  }
  dynamicSlot(e) {
    var t;
    let n = this.value, r = this.facet.compareInput, s = this.id, o = e[s] >> 1, l = this.type == 2, a = !1, h = !1, c = [];
    for (let f of this.dependencies)
      f == "doc" ? a = !0 : f == "selection" ? h = !0 : (((t = e[f.id]) !== null && t !== void 0 ? t : 1) & 1) == 0 && c.push(e[f.id]);
    return {
      create(f) {
        return f.values[o] = n(f), 1;
      },
      update(f, u) {
        if (a && u.docChanged || h && (u.docChanged || u.selection) || Du(f, c)) {
          let d = n(f);
          if (l ? !kg(d, f.values[o], r) : !r(d, f.values[o]))
            return f.values[o] = d, 1;
        }
        return 0;
      },
      reconfigure: (f, u) => {
        let d, O = u.config.address[s];
        if (O != null) {
          let p = gh(u, O);
          if (this.dependencies.every((m) => m instanceof I ? u.facet(m) === f.facet(m) : m instanceof gt ? u.field(m, !1) == f.field(m, !1) : !0) || (l ? kg(d = n(f), p, r) : r(d = n(f), p)))
            return f.values[o] = p, 0;
        } else
          d = n(f);
        return f.values[o] = d, 1;
      }
    };
  }
};
function kg(i, e, t) {
  if (i.length != e.length)
    return !1;
  for (let n = 0; n < i.length; n++)
    if (!t(i[n], e[n]))
      return !1;
  return !0;
}
function Du(i, e) {
  let t = !1;
  for (let n of e)
    ko(i, n) & 1 && (t = !0);
  return t;
}
function zA(i, e, t) {
  let n = t.map((a) => i[a.id]), r = t.map((a) => a.type), s = n.filter((a) => !(a & 1)), o = i[e.id] >> 1;
  function l(a) {
    let h = [];
    for (let c = 0; c < n.length; c++) {
      let f = gh(a, n[c]);
      if (r[c] == 2)
        for (let u of f)
          h.push(u);
      else
        h.push(f);
    }
    return e.combine(h);
  }
  return {
    create(a) {
      for (let h of n)
        ko(a, h);
      return a.values[o] = l(a), 1;
    },
    update(a, h) {
      if (!Du(a, s))
        return 0;
      let c = l(a);
      return e.compare(c, a.values[o]) ? 0 : (a.values[o] = c, 1);
    },
    reconfigure(a, h) {
      let c = Du(a, n), f = h.config.facets[e.id], u = h.facet(e);
      if (f && !c && gp(t, f))
        return a.values[o] = u, 0;
      let d = l(a);
      return e.compare(d, u) ? (a.values[o] = u, 0) : (a.values[o] = d, 1);
    }
  };
}
const Dl = /* @__PURE__ */ I.define({ static: !0 });
let gt = class lx {
  constructor(e, t, n, r, s) {
    this.id = e, this.createF = t, this.updateF = n, this.compareF = r, this.spec = s, this.provides = void 0;
  }
  /**
  Define a state field.
  */
  static define(e) {
    let t = new lx(mp++, e.create, e.update, e.compare || ((n, r) => n === r), e);
    return e.provide && (t.provides = e.provide(t)), t;
  }
  create(e) {
    let t = e.facet(Dl).find((n) => n.field == this);
    return (t?.create || this.createF)(e);
  }
  /**
  @internal
  */
  slot(e) {
    let t = e[this.id] >> 1;
    return {
      create: (n) => (n.values[t] = this.create(n), 1),
      update: (n, r) => {
        let s = n.values[t], o = this.updateF(s, r);
        return this.compareF(s, o) ? 0 : (n.values[t] = o, 1);
      },
      reconfigure: (n, r) => {
        let s = n.facet(Dl), o = r.facet(Dl), l;
        return (l = s.find((a) => a.field == this)) && l != o.find((a) => a.field == this) ? (n.values[t] = l.create(n), 1) : r.config.address[this.id] != null ? (n.values[t] = r.field(this), 0) : (n.values[t] = this.create(n), 1);
      }
    };
  }
  /**
  Returns an extension that enables this field and overrides the
  way it is initialized. Can be useful when you need to provide a
  non-default starting value for the field.
  */
  init(e) {
    return [this, Dl.of({ field: this, create: e })];
  }
  /**
  State field instances can be used as
  [`Extension`](https://codemirror.net/6/docs/ref/#state.Extension) values to enable the field in a
  given state.
  */
  get extension() {
    return this;
  }
};
const rr = { lowest: 4, low: 3, default: 2, high: 1, highest: 0 };
function Ns(i) {
  return (e) => new ax(e, i);
}
const bn = {
  /**
  The highest precedence level, for extensions that should end up
  near the start of the precedence ordering.
  */
  highest: /* @__PURE__ */ Ns(rr.highest),
  /**
  A higher-than-default precedence, for extensions that should
  come before those with default precedence.
  */
  high: /* @__PURE__ */ Ns(rr.high),
  /**
  The default precedence, which is also used for extensions
  without an explicit precedence.
  */
  default: /* @__PURE__ */ Ns(rr.default),
  /**
  A lower-than-default precedence.
  */
  low: /* @__PURE__ */ Ns(rr.low),
  /**
  The lowest precedence level. Meant for things that should end up
  near the end of the extension order.
  */
  lowest: /* @__PURE__ */ Ns(rr.lowest)
};
let ax = class {
  constructor(e, t) {
    this.inner = e, this.prec = t;
  }
}, hx = class cx {
  /**
  Create an instance of this compartment to add to your [state
  configuration](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions).
  */
  of(e) {
    return new Vu(this, e);
  }
  /**
  Create an [effect](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) that
  reconfigures this compartment.
  */
  reconfigure(e) {
    return cx.reconfigure.of({ compartment: this, extension: e });
  }
  /**
  Get the current content of the compartment in the state, or
  `undefined` if it isn't present.
  */
  get(e) {
    return e.config.compartments.get(this);
  }
}, Vu = class {
  constructor(e, t) {
    this.compartment = e, this.inner = t;
  }
}, vg = class fx {
  constructor(e, t, n, r, s, o) {
    for (this.base = e, this.compartments = t, this.dynamicSlots = n, this.address = r, this.staticValues = s, this.facets = o, this.statusTemplate = []; this.statusTemplate.length < n.length; )
      this.statusTemplate.push(
        0
        /* SlotStatus.Unresolved */
      );
  }
  staticFacet(e) {
    let t = this.address[e.id];
    return t == null ? e.default : this.staticValues[t >> 1];
  }
  static resolve(e, t, n) {
    let r = [], s = /* @__PURE__ */ Object.create(null), o = /* @__PURE__ */ new Map();
    for (let u of IA(e, t, o))
      u instanceof gt ? r.push(u) : (s[u.facet.id] || (s[u.facet.id] = [])).push(u);
    let l = /* @__PURE__ */ Object.create(null), a = [], h = [];
    for (let u of r)
      l[u.id] = h.length << 1, h.push((d) => u.slot(d));
    let c = n?.config.facets;
    for (let u in s) {
      let d = s[u], O = d[0].facet, p = c && c[u] || [];
      if (d.every(
        (m) => m.type == 0
        /* Provider.Static */
      ))
        if (l[O.id] = a.length << 1 | 1, gp(p, d))
          a.push(n.facet(O));
        else {
          let m = O.combine(d.map((g) => g.value));
          a.push(n && O.compare(m, n.facet(O)) ? n.facet(O) : m);
        }
      else {
        for (let m of d)
          m.type == 0 ? (l[m.id] = a.length << 1 | 1, a.push(m.value)) : (l[m.id] = h.length << 1, h.push((g) => m.dynamicSlot(g)));
        l[O.id] = h.length << 1, h.push((m) => zA(m, O, d));
      }
    }
    let f = h.map((u) => u(l));
    return new fx(e, o, f, l, a, s);
  }
};
function IA(i, e, t) {
  let n = [[], [], [], [], []], r = /* @__PURE__ */ new Map();
  function s(o, l) {
    let a = r.get(o);
    if (a != null) {
      if (a <= l)
        return;
      let h = n[a].indexOf(o);
      h > -1 && n[a].splice(h, 1), o instanceof Vu && t.delete(o.compartment);
    }
    if (r.set(o, l), Array.isArray(o))
      for (let h of o)
        s(h, l);
    else if (o instanceof Vu) {
      if (t.has(o.compartment))
        throw new RangeError("Duplicate use of compartment in extensions");
      let h = e.get(o.compartment) || o.inner;
      t.set(o.compartment, h), s(h, l);
    } else if (o instanceof ax)
      s(o.inner, o.prec);
    else if (o instanceof gt)
      n[l].push(o), o.provides && s(o.provides, l);
    else if (o instanceof qa)
      n[l].push(o), o.facet.extensions && s(o.facet.extensions, rr.default);
    else {
      let h = o.extension;
      if (!h)
        throw new Error(`Unrecognized extension value in extension set (${o}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);
      s(h, l);
    }
  }
  return s(i, rr.default), n.reduce((o, l) => o.concat(l));
}
function ko(i, e) {
  if (e & 1)
    return 2;
  let t = e >> 1, n = i.status[t];
  if (n == 4)
    throw new Error("Cyclic dependency between fields and/or facets");
  if (n & 2)
    return n;
  i.status[t] = 4;
  let r = i.computeSlot(i, i.config.dynamicSlots[t]);
  return i.status[t] = 2 | r;
}
function gh(i, e) {
  return e & 1 ? i.config.staticValues[e >> 1] : i.values[e >> 1];
}
const ux = /* @__PURE__ */ I.define(), Wu = /* @__PURE__ */ I.define({
  combine: (i) => i.some((e) => e),
  static: !0
}), dx = /* @__PURE__ */ I.define({
  combine: (i) => i.length ? i[0] : void 0,
  static: !0
}), Ox = /* @__PURE__ */ I.define(), px = /* @__PURE__ */ I.define(), mx = /* @__PURE__ */ I.define(), gx = /* @__PURE__ */ I.define({
  combine: (i) => i.length ? i[0] : !1
});
let xn = class {
  /**
  @internal
  */
  constructor(e, t) {
    this.type = e, this.value = t;
  }
  /**
  Define a new type of annotation.
  */
  static define() {
    return new NA();
  }
}, NA = class {
  /**
  Create an instance of this annotation.
  */
  of(e) {
    return new xn(this, e);
  }
}, jA = class {
  /**
  @internal
  */
  constructor(e) {
    this.map = e;
  }
  /**
  Create a [state effect](https://codemirror.net/6/docs/ref/#state.StateEffect) instance of this
  type.
  */
  of(e) {
    return new le(this, e);
  }
}, le = class yx {
  /**
  @internal
  */
  constructor(e, t) {
    this.type = e, this.value = t;
  }
  /**
  Map this effect through a position mapping. Will return
  `undefined` when that ends up deleting the effect.
  */
  map(e) {
    let t = this.type.map(this.value, e);
    return t === void 0 ? void 0 : t == this.value ? this : new yx(this.type, t);
  }
  /**
  Tells you whether this effect object is of a given
  [type](https://codemirror.net/6/docs/ref/#state.StateEffectType).
  */
  is(e) {
    return this.type == e;
  }
  /**
  Define a new effect type. The type parameter indicates the type
  of values that his effect holds. It should be a type that
  doesn't include `undefined`, since that is used in
  [mapping](https://codemirror.net/6/docs/ref/#state.StateEffect.map) to indicate that an effect is
  removed.
  */
  static define(e = {}) {
    return new jA(e.map || ((t) => t));
  }
  /**
  Map an array of effects through a change set.
  */
  static mapEffects(e, t) {
    if (!e.length)
      return e;
    let n = [];
    for (let r of e) {
      let s = r.map(t);
      s && n.push(s);
    }
    return n;
  }
};
le.reconfigure = /* @__PURE__ */ le.define();
le.appendConfig = /* @__PURE__ */ le.define();
let kt = class oo {
  constructor(e, t, n, r, s, o) {
    this.startState = e, this.changes = t, this.selection = n, this.effects = r, this.annotations = s, this.scrollIntoView = o, this._doc = null, this._state = null, n && sx(n, t.newLength), s.some((l) => l.type == oo.time) || (this.annotations = s.concat(oo.time.of(Date.now())));
  }
  /**
  @internal
  */
  static create(e, t, n, r, s, o) {
    return new oo(e, t, n, r, s, o);
  }
  /**
  The new document produced by the transaction. Contrary to
  [`.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state)`.doc`, accessing this won't
  force the entire new state to be computed right away, so it is
  recommended that [transaction
  filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) use this getter
  when they need to look at the new document.
  */
  get newDoc() {
    return this._doc || (this._doc = this.changes.apply(this.startState.doc));
  }
  /**
  The new selection produced by the transaction. If
  [`this.selection`](https://codemirror.net/6/docs/ref/#state.Transaction.selection) is undefined,
  this will [map](https://codemirror.net/6/docs/ref/#state.EditorSelection.map) the start state's
  current selection through the changes made by the transaction.
  */
  get newSelection() {
    return this.selection || this.startState.selection.map(this.changes);
  }
  /**
  The new state created by the transaction. Computed on demand
  (but retained for subsequent access), so it is recommended not to
  access it in [transaction
  filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) when possible.
  */
  get state() {
    return this._state || this.startState.applyTransaction(this), this._state;
  }
  /**
  Get the value of the given annotation type, if any.
  */
  annotation(e) {
    for (let t of this.annotations)
      if (t.type == e)
        return t.value;
  }
  /**
  Indicates whether the transaction changed the document.
  */
  get docChanged() {
    return !this.changes.empty;
  }
  /**
  Indicates whether this transaction reconfigures the state
  (through a [configuration compartment](https://codemirror.net/6/docs/ref/#state.Compartment) or
  with a top-level configuration
  [effect](https://codemirror.net/6/docs/ref/#state.StateEffect^reconfigure).
  */
  get reconfigured() {
    return this.startState.config != this.state.config;
  }
  /**
  Returns true if the transaction has a [user
  event](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent) annotation that is equal to
  or more specific than `event`. For example, if the transaction
  has `"select.pointer"` as user event, `"select"` and
  `"select.pointer"` will match it.
  */
  isUserEvent(e) {
    let t = this.annotation(oo.userEvent);
    return !!(t && (t == e || t.length > e.length && t.slice(0, e.length) == e && t[e.length] == "."));
  }
};
kt.time = /* @__PURE__ */ xn.define();
kt.userEvent = /* @__PURE__ */ xn.define();
kt.addToHistory = /* @__PURE__ */ xn.define();
kt.remote = /* @__PURE__ */ xn.define();
function UA(i, e) {
  let t = [];
  for (let n = 0, r = 0; ; ) {
    let s, o;
    if (n < i.length && (r == e.length || e[r] >= i[n]))
      s = i[n++], o = i[n++];
    else if (r < e.length)
      s = e[r++], o = e[r++];
    else
      return t;
    !t.length || t[t.length - 1] < s ? t.push(s, o) : t[t.length - 1] < o && (t[t.length - 1] = o);
  }
}
function Sx(i, e, t) {
  var n;
  let r, s, o;
  return t ? (r = e.changes, s = mi.empty(e.changes.length), o = i.changes.compose(e.changes)) : (r = e.changes.map(i.changes), s = i.changes.mapDesc(e.changes, !0), o = i.changes.compose(r)), {
    changes: o,
    selection: e.selection ? e.selection.map(s) : (n = i.selection) === null || n === void 0 ? void 0 : n.map(r),
    effects: le.mapEffects(i.effects, r).concat(le.mapEffects(e.effects, s)),
    annotations: i.annotations.length ? i.annotations.concat(e.annotations) : e.annotations,
    scrollIntoView: i.scrollIntoView || e.scrollIntoView
  };
}
function zu(i, e, t) {
  let n = e.selection, r = Jr(e.annotations);
  return e.userEvent && (r = r.concat(kt.userEvent.of(e.userEvent))), {
    changes: e.changes instanceof mi ? e.changes : mi.of(e.changes || [], t, i.facet(dx)),
    selection: n && (n instanceof C ? n : C.single(n.anchor, n.head)),
    effects: Jr(e.effects),
    annotations: r,
    scrollIntoView: !!e.scrollIntoView
  };
}
function bx(i, e, t) {
  let n = zu(i, e.length ? e[0] : {}, i.doc.length);
  e.length && e[0].filter === !1 && (t = !1);
  for (let s = 1; s < e.length; s++) {
    e[s].filter === !1 && (t = !1);
    let o = !!e[s].sequential;
    n = Sx(n, zu(i, e[s], o ? n.changes.newLength : i.doc.length), o);
  }
  let r = kt.create(i, n.changes, n.selection, n.effects, n.annotations, n.scrollIntoView);
  return GA(t ? YA(r) : r);
}
function YA(i) {
  let e = i.startState, t = !0;
  for (let r of e.facet(Ox)) {
    let s = r(i);
    if (s === !1) {
      t = !1;
      break;
    }
    Array.isArray(s) && (t = t === !0 ? s : UA(t, s));
  }
  if (t !== !0) {
    let r, s;
    if (t === !1)
      s = i.changes.invertedDesc, r = mi.empty(e.doc.length);
    else {
      let o = i.changes.filter(t);
      r = o.changes, s = o.filtered.mapDesc(o.changes).invertedDesc;
    }
    i = kt.create(e, r, i.selection && i.selection.map(s), le.mapEffects(i.effects, s), i.annotations, i.scrollIntoView);
  }
  let n = e.facet(px);
  for (let r = n.length - 1; r >= 0; r--) {
    let s = n[r](i);
    s instanceof kt ? i = s : Array.isArray(s) && s.length == 1 && s[0] instanceof kt ? i = s[0] : i = bx(e, Jr(s), !1);
  }
  return i;
}
function GA(i) {
  let e = i.startState, t = e.facet(mx), n = i;
  for (let r = t.length - 1; r >= 0; r--) {
    let s = t[r](i);
    s && Object.keys(s).length && (n = Sx(n, zu(e, s, i.changes.newLength), !0));
  }
  return n == i ? i : kt.create(e, i.changes, i.selection, n.effects, n.annotations, n.scrollIntoView);
}
const FA = [];
function Jr(i) {
  return i == null ? FA : Array.isArray(i) ? i : [i];
}
var Me = /* @__PURE__ */ function(i) {
  return i[i.Word = 0] = "Word", i[i.Space = 1] = "Space", i[i.Other = 2] = "Other", i;
}(Me || (Me = {}));
const HA = /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;
let Iu;
try {
  Iu = /* @__PURE__ */ new RegExp("[\\p{Alphabetic}\\p{Number}_]", "u");
} catch {
}
function KA(i) {
  if (Iu)
    return Iu.test(i);
  for (let e = 0; e < i.length; e++) {
    let t = i[e];
    if (/\w/.test(t) || t > "" && (t.toUpperCase() != t.toLowerCase() || HA.test(t)))
      return !0;
  }
  return !1;
}
function JA(i) {
  return (e) => {
    if (!/\S/.test(e))
      return Me.Space;
    if (KA(e))
      return Me.Word;
    for (let t = 0; t < i.length; t++)
      if (e.indexOf(i[t]) > -1)
        return Me.Word;
    return Me.Other;
  };
}
let Be = class li {
  constructor(e, t, n, r, s, o) {
    this.config = e, this.doc = t, this.selection = n, this.values = r, this.status = e.statusTemplate.slice(), this.computeSlot = s, o && (o._state = this);
    for (let l = 0; l < this.config.dynamicSlots.length; l++)
      ko(this, l << 1);
    this.computeSlot = null;
  }
  field(e, t = !0) {
    let n = this.config.address[e.id];
    if (n == null) {
      if (t)
        throw new RangeError("Field is not present in this state");
      return;
    }
    return ko(this, n), gh(this, n);
  }
  /**
  Create a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction) that updates this
  state. Any number of [transaction specs](https://codemirror.net/6/docs/ref/#state.TransactionSpec)
  can be passed. Unless
  [`sequential`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.sequential) is set, the
  [changes](https://codemirror.net/6/docs/ref/#state.TransactionSpec.changes) (if any) of each spec
  are assumed to start in the _current_ document (not the document
  produced by previous specs), and its
  [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) and
  [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) are assumed to refer
  to the document created by its _own_ changes. The resulting
  transaction contains the combined effect of all the different
  specs. For [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection), later
  specs take precedence over earlier ones.
  */
  update(...e) {
    return bx(this, e, !0);
  }
  /**
  @internal
  */
  applyTransaction(e) {
    let t = this.config, { base: n, compartments: r } = t;
    for (let l of e.effects)
      l.is(hx.reconfigure) ? (t && (r = /* @__PURE__ */ new Map(), t.compartments.forEach((a, h) => r.set(h, a)), t = null), r.set(l.value.compartment, l.value.extension)) : l.is(le.reconfigure) ? (t = null, n = l.value) : l.is(le.appendConfig) && (t = null, n = Jr(n).concat(l.value));
    let s;
    t ? s = e.startState.values.slice() : (t = vg.resolve(n, r, this), s = new li(t, this.doc, this.selection, t.dynamicSlots.map(() => null), (a, h) => h.reconfigure(a, this), null).values);
    let o = e.startState.facet(Wu) ? e.newSelection : e.newSelection.asSingle();
    new li(t, e.newDoc, o, s, (l, a) => a.update(l, e), e);
  }
  /**
  Create a [transaction spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec) that
  replaces every selection range with the given content.
  */
  replaceSelection(e) {
    return typeof e == "string" && (e = this.toText(e)), this.changeByRange((t) => ({
      changes: { from: t.from, to: t.to, insert: e },
      range: C.cursor(t.from + e.length)
    }));
  }
  /**
  Create a set of changes and a new selection by running the given
  function for each range in the active selection. The function
  can return an optional set of changes (in the coordinate space
  of the start document), plus an updated range (in the coordinate
  space of the document produced by the call's own changes). This
  method will merge all the changes and ranges into a single
  changeset and selection, and return it as a [transaction
  spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec), which can be passed to
  [`update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).
  */
  changeByRange(e) {
    let t = this.selection, n = e(t.ranges[0]), r = this.changes(n.changes), s = [n.range], o = Jr(n.effects);
    for (let l = 1; l < t.ranges.length; l++) {
      let a = e(t.ranges[l]), h = this.changes(a.changes), c = h.map(r);
      for (let u = 0; u < l; u++)
        s[u] = s[u].map(c);
      let f = r.mapDesc(h, !0);
      s.push(a.range.map(f)), r = r.compose(c), o = le.mapEffects(o, c).concat(le.mapEffects(Jr(a.effects), f));
    }
    return {
      changes: r,
      selection: C.create(s, t.mainIndex),
      effects: o
    };
  }
  /**
  Create a [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet) from the given change
  description, taking the state's document length and line
  separator into account.
  */
  changes(e = []) {
    return e instanceof mi ? e : mi.of(e, this.doc.length, this.facet(li.lineSeparator));
  }
  /**
  Using the state's [line
  separator](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator), create a
  [`Text`](https://codemirror.net/6/docs/ref/#state.Text) instance from the given string.
  */
  toText(e) {
    return me.of(e.split(this.facet(li.lineSeparator) || Xu));
  }
  /**
  Return the given range of the document as a string.
  */
  sliceDoc(e = 0, t = this.doc.length) {
    return this.doc.sliceString(e, t, this.lineBreak);
  }
  /**
  Get the value of a state [facet](https://codemirror.net/6/docs/ref/#state.Facet).
  */
  facet(e) {
    let t = this.config.address[e.id];
    return t == null ? e.default : (ko(this, t), gh(this, t));
  }
  /**
  Convert this state to a JSON-serializable object. When custom
  fields should be serialized, you can pass them in as an object
  mapping property names (in the resulting object, which should
  not use `doc` or `selection`) to fields.
  */
  toJSON(e) {
    let t = {
      doc: this.sliceDoc(),
      selection: this.selection.toJSON()
    };
    if (e)
      for (let n in e) {
        let r = e[n];
        r instanceof gt && this.config.address[r.id] != null && (t[n] = r.spec.toJSON(this.field(e[n]), this));
      }
    return t;
  }
  /**
  Deserialize a state from its JSON representation. When custom
  fields should be deserialized, pass the same object you passed
  to [`toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) when serializing as
  third argument.
  */
  static fromJSON(e, t = {}, n) {
    if (!e || typeof e.doc != "string")
      throw new RangeError("Invalid JSON representation for EditorState");
    let r = [];
    if (n) {
      for (let s in n)
        if (Object.prototype.hasOwnProperty.call(e, s)) {
          let o = n[s], l = e[s];
          r.push(o.init((a) => o.spec.fromJSON(l, a)));
        }
    }
    return li.create({
      doc: e.doc,
      selection: C.fromJSON(e.selection),
      extensions: t.extensions ? r.concat([t.extensions]) : r
    });
  }
  /**
  Create a new state. You'll usually only need this when
  initializing an editor—updated states are created by applying
  transactions.
  */
  static create(e = {}) {
    let t = vg.resolve(e.extensions || [], /* @__PURE__ */ new Map()), n = e.doc instanceof me ? e.doc : me.of((e.doc || "").split(t.staticFacet(li.lineSeparator) || Xu)), r = e.selection ? e.selection instanceof C ? e.selection : C.single(e.selection.anchor, e.selection.head) : C.single(0);
    return sx(r, n.length), t.staticFacet(Wu) || (r = r.asSingle()), new li(t, n, r, t.dynamicSlots.map(() => null), (s, o) => o.create(s), null);
  }
  /**
  The size (in columns) of a tab in the document, determined by
  the [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) facet.
  */
  get tabSize() {
    return this.facet(li.tabSize);
  }
  /**
  Get the proper [line-break](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator)
  string for this state.
  */
  get lineBreak() {
    return this.facet(li.lineSeparator) || `
`;
  }
  /**
  Returns true when the editor is
  [configured](https://codemirror.net/6/docs/ref/#state.EditorState^readOnly) to be read-only.
  */
  get readOnly() {
    return this.facet(gx);
  }
  /**
  Look up a translation for the given phrase (via the
  [`phrases`](https://codemirror.net/6/docs/ref/#state.EditorState^phrases) facet), or return the
  original string if no translation is found.
  
  If additional arguments are passed, they will be inserted in
  place of markers like `$1` (for the first value) and `$2`, etc.
  A single `$` is equivalent to `$1`, and `$$` will produce a
  literal dollar sign.
  */
  phrase(e, ...t) {
    for (let n of this.facet(li.phrases))
      if (Object.prototype.hasOwnProperty.call(n, e)) {
        e = n[e];
        break;
      }
    return t.length && (e = e.replace(/\$(\$|\d*)/g, (n, r) => {
      if (r == "$")
        return "$";
      let s = +(r || 1);
      return !s || s > t.length ? n : t[s - 1];
    })), e;
  }
  /**
  Find the values for a given language data field, provided by the
  the [`languageData`](https://codemirror.net/6/docs/ref/#state.EditorState^languageData) facet.
  
  Examples of language data fields are...
  
  - [`"commentTokens"`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) for specifying
    comment syntax.
  - [`"autocomplete"`](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion^config.override)
    for providing language-specific completion sources.
  - [`"wordChars"`](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) for adding
    characters that should be considered part of words in this
    language.
  - [`"closeBrackets"`](https://codemirror.net/6/docs/ref/#autocomplete.CloseBracketConfig) controls
    bracket closing behavior.
  */
  languageDataAt(e, t, n = -1) {
    let r = [];
    for (let s of this.facet(ux))
      for (let o of s(this, t, n))
        Object.prototype.hasOwnProperty.call(o, e) && r.push(o[e]);
    return r;
  }
  /**
  Return a function that can categorize strings (expected to
  represent a single [grapheme cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak))
  into one of:
  
   - Word (contains an alphanumeric character or a character
     explicitly listed in the local language's `"wordChars"`
     language data, which should be a string)
   - Space (contains only whitespace)
   - Other (anything else)
  */
  charCategorizer(e) {
    return JA(this.languageDataAt("wordChars", e).join(""));
  }
  /**
  Find the word at the given position, meaning the range
  containing all [word](https://codemirror.net/6/docs/ref/#state.CharCategory.Word) characters
  around it. If no word characters are adjacent to the position,
  this returns null.
  */
  wordAt(e) {
    let { text: t, from: n, length: r } = this.doc.lineAt(e), s = this.charCategorizer(e), o = e - n, l = e - n;
    for (; o > 0; ) {
      let a = ot(t, o, !1);
      if (s(t.slice(a, o)) != Me.Word)
        break;
      o = a;
    }
    for (; l < r; ) {
      let a = ot(t, l);
      if (s(t.slice(l, a)) != Me.Word)
        break;
      l = a;
    }
    return o == l ? null : C.range(o + n, l + n);
  }
};
Be.allowMultipleSelections = Wu;
Be.tabSize = /* @__PURE__ */ I.define({
  combine: (i) => i.length ? i[0] : 4
});
Be.lineSeparator = dx;
Be.readOnly = gx;
Be.phrases = /* @__PURE__ */ I.define({
  compare(i, e) {
    let t = Object.keys(i), n = Object.keys(e);
    return t.length == n.length && t.every((r) => i[r] == e[r]);
  }
});
Be.languageData = ux;
Be.changeFilter = Ox;
Be.transactionFilter = px;
Be.transactionExtender = mx;
hx.reconfigure = /* @__PURE__ */ le.define();
function Ki(i, e, t = {}) {
  let n = {};
  for (let r of i)
    for (let s of Object.keys(r)) {
      let o = r[s], l = n[s];
      if (l === void 0)
        n[s] = o;
      else if (!(l === o || o === void 0)) if (Object.hasOwnProperty.call(t, s))
        n[s] = t[s](l, o);
      else
        throw new Error("Config merge conflict for field " + s);
    }
  for (let r in e)
    n[r] === void 0 && (n[r] = e[r]);
  return n;
}
let kr = class {
  /**
  Compare this value with another value. Used when comparing
  rangesets. The default implementation compares by identity.
  Unless you are only creating a fixed number of unique instances
  of your value type, it is a good idea to implement this
  properly.
  */
  eq(e) {
    return this == e;
  }
  /**
  Create a [range](https://codemirror.net/6/docs/ref/#state.Range) with this value.
  */
  range(e, t = e) {
    return Nu.create(e, t, this);
  }
};
kr.prototype.startSide = kr.prototype.endSide = 0;
kr.prototype.point = !1;
kr.prototype.mapMode = st.TrackDel;
let Nu = class xx {
  constructor(e, t, n) {
    this.from = e, this.to = t, this.value = n;
  }
  /**
  @internal
  */
  static create(e, t, n) {
    return new xx(e, t, n);
  }
};
function ju(i, e) {
  return i.from - e.from || i.value.startSide - e.value.startSide;
}
let eE = class wx {
  constructor(e, t, n, r) {
    this.from = e, this.to = t, this.value = n, this.maxPoint = r;
  }
  get length() {
    return this.to[this.to.length - 1];
  }
  // Find the index of the given position and side. Use the ranges'
  // `from` pos when `end == false`, `to` when `end == true`.
  findIndex(e, t, n, r = 0) {
    let s = n ? this.to : this.from;
    for (let o = r, l = s.length; ; ) {
      if (o == l)
        return o;
      let a = o + l >> 1, h = s[a] - e || (n ? this.value[a].endSide : this.value[a].startSide) - t;
      if (a == o)
        return h >= 0 ? o : l;
      h >= 0 ? l = a : o = a + 1;
    }
  }
  between(e, t, n, r) {
    for (let s = this.findIndex(t, -1e9, !0), o = this.findIndex(n, 1e9, !1, s); s < o; s++)
      if (r(this.from[s] + e, this.to[s] + e, this.value[s]) === !1)
        return !1;
  }
  map(e, t) {
    let n = [], r = [], s = [], o = -1, l = -1;
    for (let a = 0; a < this.value.length; a++) {
      let h = this.value[a], c = this.from[a] + e, f = this.to[a] + e, u, d;
      if (c == f) {
        let O = t.mapPos(c, h.startSide, h.mapMode);
        if (O == null || (u = d = O, h.startSide != h.endSide && (d = t.mapPos(c, h.endSide), d < u)))
          continue;
      } else if (u = t.mapPos(c, h.startSide), d = t.mapPos(f, h.endSide), u > d || u == d && h.startSide > 0 && h.endSide <= 0)
        continue;
      (d - u || h.endSide - h.startSide) < 0 || (o < 0 && (o = u), h.point && (l = Math.max(l, d - u)), n.push(h), r.push(u - o), s.push(d - o));
    }
    return { mapped: n.length ? new wx(r, s, n, l) : null, pos: o };
  }
}, qe = class nn {
  constructor(e, t, n, r) {
    this.chunkPos = e, this.chunk = t, this.nextLayer = n, this.maxPoint = r;
  }
  /**
  @internal
  */
  static create(e, t, n, r) {
    return new nn(e, t, n, r);
  }
  /**
  @internal
  */
  get length() {
    let e = this.chunk.length - 1;
    return e < 0 ? 0 : Math.max(this.chunkEnd(e), this.nextLayer.length);
  }
  /**
  The number of ranges in the set.
  */
  get size() {
    if (this.isEmpty)
      return 0;
    let e = this.nextLayer.size;
    for (let t of this.chunk)
      e += t.value.length;
    return e;
  }
  /**
  @internal
  */
  chunkEnd(e) {
    return this.chunkPos[e] + this.chunk[e].length;
  }
  /**
  Update the range set, optionally adding new ranges or filtering
  out existing ones.
  
  (Note: The type parameter is just there as a kludge to work
  around TypeScript variance issues that prevented `RangeSet<X>`
  from being a subtype of `RangeSet<Y>` when `X` is a subtype of
  `Y`.)
  */
  update(e) {
    let { add: t = [], sort: n = !1, filterFrom: r = 0, filterTo: s = this.length } = e, o = e.filter;
    if (t.length == 0 && !o)
      return this;
    if (n && (t = t.slice().sort(ju)), this.isEmpty)
      return t.length ? nn.of(t) : this;
    let l = new vx(this, null, -1).goto(0), a = 0, h = [], c = new vr();
    for (; l.value || a < t.length; )
      if (a < t.length && (l.from - t[a].from || l.startSide - t[a].value.startSide) >= 0) {
        let f = t[a++];
        c.addInner(f.from, f.to, f.value) || h.push(f);
      } else l.rangeIndex == 1 && l.chunkIndex < this.chunk.length && (a == t.length || this.chunkEnd(l.chunkIndex) < t[a].from) && (!o || r > this.chunkEnd(l.chunkIndex) || s < this.chunkPos[l.chunkIndex]) && c.addChunk(this.chunkPos[l.chunkIndex], this.chunk[l.chunkIndex]) ? l.nextChunk() : ((!o || r > l.to || s < l.from || o(l.from, l.to, l.value)) && (c.addInner(l.from, l.to, l.value) || h.push(Nu.create(l.from, l.to, l.value))), l.next());
    return c.finishInner(this.nextLayer.isEmpty && !h.length ? nn.empty : this.nextLayer.update({ add: h, filter: o, filterFrom: r, filterTo: s }));
  }
  /**
  Map this range set through a set of changes, return the new set.
  */
  map(e) {
    if (e.empty || this.isEmpty)
      return this;
    let t = [], n = [], r = -1;
    for (let o = 0; o < this.chunk.length; o++) {
      let l = this.chunkPos[o], a = this.chunk[o], h = e.touchesRange(l, l + a.length);
      if (h === !1)
        r = Math.max(r, a.maxPoint), t.push(a), n.push(e.mapPos(l));
      else if (h === !0) {
        let { mapped: c, pos: f } = a.map(l, e);
        c && (r = Math.max(r, c.maxPoint), t.push(c), n.push(f));
      }
    }
    let s = this.nextLayer.map(e);
    return t.length == 0 ? s : new nn(n, t, s || nn.empty, r);
  }
  /**
  Iterate over the ranges that touch the region `from` to `to`,
  calling `f` for each. There is no guarantee that the ranges will
  be reported in any specific order. When the callback returns
  `false`, iteration stops.
  */
  between(e, t, n) {
    if (!this.isEmpty) {
      for (let r = 0; r < this.chunk.length; r++) {
        let s = this.chunkPos[r], o = this.chunk[r];
        if (t >= s && e <= s + o.length && o.between(s, e - s, t - s, n) === !1)
          return;
      }
      this.nextLayer.between(e, t, n);
    }
  }
  /**
  Iterate over the ranges in this set, in order, including all
  ranges that end at or after `from`.
  */
  iter(e = 0) {
    return Uu.from([this]).goto(e);
  }
  /**
  @internal
  */
  get isEmpty() {
    return this.nextLayer == this;
  }
  /**
  Iterate over the ranges in a collection of sets, in order,
  starting from `from`.
  */
  static iter(e, t = 0) {
    return Uu.from(e).goto(t);
  }
  /**
  Iterate over two groups of sets, calling methods on `comparator`
  to notify it of possible differences.
  */
  static compare(e, t, n, r, s = -1) {
    let o = e.filter((f) => f.maxPoint > 0 || !f.isEmpty && f.maxPoint >= s), l = t.filter((f) => f.maxPoint > 0 || !f.isEmpty && f.maxPoint >= s), a = Qg(o, l, n), h = new js(o, a, s), c = new js(l, a, s);
    n.iterGaps((f, u, d) => Pg(h, f, c, u, d, r)), n.empty && n.length == 0 && Pg(h, 0, c, 0, 0, r);
  }
  /**
  Compare the contents of two groups of range sets, returning true
  if they are equivalent in the given range.
  */
  static eq(e, t, n = 0, r) {
    r == null && (r = 999999999);
    let s = e.filter((c) => !c.isEmpty && t.indexOf(c) < 0), o = t.filter((c) => !c.isEmpty && e.indexOf(c) < 0);
    if (s.length != o.length)
      return !1;
    if (!s.length)
      return !0;
    let l = Qg(s, o), a = new js(s, l, 0).goto(n), h = new js(o, l, 0).goto(n);
    for (; ; ) {
      if (a.to != h.to || !Yu(a.active, h.active) || a.point && (!h.point || !a.point.eq(h.point)))
        return !1;
      if (a.to > r)
        return !0;
      a.next(), h.next();
    }
  }
  /**
  Iterate over a group of range sets at the same time, notifying
  the iterator about the ranges covering every given piece of
  content. Returns the open count (see
  [`SpanIterator.span`](https://codemirror.net/6/docs/ref/#state.SpanIterator.span)) at the end
  of the iteration.
  */
  static spans(e, t, n, r, s = -1) {
    let o = new js(e, null, s).goto(t), l = t, a = o.openStart;
    for (; ; ) {
      let h = Math.min(o.to, n);
      if (o.point) {
        let c = o.activeForPoint(o.to), f = o.pointFrom < t ? c.length + 1 : o.point.startSide < 0 ? c.length : Math.min(c.length, a);
        r.point(l, h, o.point, c, f, o.pointRank), a = Math.min(o.openEnd(h), c.length);
      } else h > l && (r.span(l, h, o.active, a), a = o.openEnd(h));
      if (o.to > n)
        return a + (o.point && o.to > n ? 1 : 0);
      l = o.to, o.next();
    }
  }
  /**
  Create a range set for the given range or array of ranges. By
  default, this expects the ranges to be _sorted_ (by start
  position and, if two start at the same position,
  `value.startSide`). You can pass `true` as second argument to
  cause the method to sort them.
  */
  static of(e, t = !1) {
    let n = new vr();
    for (let r of e instanceof Nu ? [e] : t ? tE(e) : e)
      n.add(r.from, r.to, r.value);
    return n.finish();
  }
  /**
  Join an array of range sets into a single set.
  */
  static join(e) {
    if (!e.length)
      return nn.empty;
    let t = e[e.length - 1];
    for (let n = e.length - 2; n >= 0; n--)
      for (let r = e[n]; r != nn.empty; r = r.nextLayer)
        t = new nn(r.chunkPos, r.chunk, t, Math.max(r.maxPoint, t.maxPoint));
    return t;
  }
};
qe.empty = /* @__PURE__ */ new qe([], [], null, -1);
function tE(i) {
  if (i.length > 1)
    for (let e = i[0], t = 1; t < i.length; t++) {
      let n = i[t];
      if (ju(e, n) > 0)
        return i.slice().sort(ju);
      e = n;
    }
  return i;
}
qe.empty.nextLayer = qe.empty;
let vr = class kx {
  finishChunk(e) {
    this.chunks.push(new eE(this.from, this.to, this.value, this.maxPoint)), this.chunkPos.push(this.chunkStart), this.chunkStart = -1, this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint), this.maxPoint = -1, e && (this.from = [], this.to = [], this.value = []);
  }
  /**
  Create an empty builder.
  */
  constructor() {
    this.chunks = [], this.chunkPos = [], this.chunkStart = -1, this.last = null, this.lastFrom = -1e9, this.lastTo = -1e9, this.from = [], this.to = [], this.value = [], this.maxPoint = -1, this.setMaxPoint = -1, this.nextLayer = null;
  }
  /**
  Add a range. Ranges should be added in sorted (by `from` and
  `value.startSide`) order.
  */
  add(e, t, n) {
    this.addInner(e, t, n) || (this.nextLayer || (this.nextLayer = new kx())).add(e, t, n);
  }
  /**
  @internal
  */
  addInner(e, t, n) {
    let r = e - this.lastTo || n.startSide - this.last.endSide;
    if (r <= 0 && (e - this.lastFrom || n.startSide - this.last.startSide) < 0)
      throw new Error("Ranges must be added sorted by `from` position and `startSide`");
    return r < 0 ? !1 : (this.from.length == 250 && this.finishChunk(!0), this.chunkStart < 0 && (this.chunkStart = e), this.from.push(e - this.chunkStart), this.to.push(t - this.chunkStart), this.last = n, this.lastFrom = e, this.lastTo = t, this.value.push(n), n.point && (this.maxPoint = Math.max(this.maxPoint, t - e)), !0);
  }
  /**
  @internal
  */
  addChunk(e, t) {
    if ((e - this.lastTo || t.value[0].startSide - this.last.endSide) < 0)
      return !1;
    this.from.length && this.finishChunk(!0), this.setMaxPoint = Math.max(this.setMaxPoint, t.maxPoint), this.chunks.push(t), this.chunkPos.push(e);
    let n = t.value.length - 1;
    return this.last = t.value[n], this.lastFrom = t.from[n] + e, this.lastTo = t.to[n] + e, !0;
  }
  /**
  Finish the range set. Returns the new set. The builder can't be
  used anymore after this has been called.
  */
  finish() {
    return this.finishInner(qe.empty);
  }
  /**
  @internal
  */
  finishInner(e) {
    if (this.from.length && this.finishChunk(!1), this.chunks.length == 0)
      return e;
    let t = qe.create(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(e) : e, this.setMaxPoint);
    return this.from = null, t;
  }
};
function Qg(i, e, t) {
  let n = /* @__PURE__ */ new Map();
  for (let s of i)
    for (let o = 0; o < s.chunk.length; o++)
      s.chunk[o].maxPoint <= 0 && n.set(s.chunk[o], s.chunkPos[o]);
  let r = /* @__PURE__ */ new Set();
  for (let s of e)
    for (let o = 0; o < s.chunk.length; o++) {
      let l = n.get(s.chunk[o]);
      l != null && (t ? t.mapPos(l) : l) == s.chunkPos[o] && !t?.touchesRange(l, l + s.chunk[o].length) && r.add(s.chunk[o]);
    }
  return r;
}
let vx = class {
  constructor(e, t, n, r = 0) {
    this.layer = e, this.skip = t, this.minPoint = n, this.rank = r;
  }
  get startSide() {
    return this.value ? this.value.startSide : 0;
  }
  get endSide() {
    return this.value ? this.value.endSide : 0;
  }
  goto(e, t = -1e9) {
    return this.chunkIndex = this.rangeIndex = 0, this.gotoInner(e, t, !1), this;
  }
  gotoInner(e, t, n) {
    for (; this.chunkIndex < this.layer.chunk.length; ) {
      let r = this.layer.chunk[this.chunkIndex];
      if (!(this.skip && this.skip.has(r) || this.layer.chunkEnd(this.chunkIndex) < e || r.maxPoint < this.minPoint))
        break;
      this.chunkIndex++, n = !1;
    }
    if (this.chunkIndex < this.layer.chunk.length) {
      let r = this.layer.chunk[this.chunkIndex].findIndex(e - this.layer.chunkPos[this.chunkIndex], t, !0);
      (!n || this.rangeIndex < r) && this.setRangeIndex(r);
    }
    this.next();
  }
  forward(e, t) {
    (this.to - e || this.endSide - t) < 0 && this.gotoInner(e, t, !0);
  }
  next() {
    for (; ; )
      if (this.chunkIndex == this.layer.chunk.length) {
        this.from = this.to = 1e9, this.value = null;
        break;
      } else {
        let e = this.layer.chunkPos[this.chunkIndex], t = this.layer.chunk[this.chunkIndex], n = e + t.from[this.rangeIndex];
        if (this.from = n, this.to = e + t.to[this.rangeIndex], this.value = t.value[this.rangeIndex], this.setRangeIndex(this.rangeIndex + 1), this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint)
          break;
      }
  }
  setRangeIndex(e) {
    if (e == this.layer.chunk[this.chunkIndex].value.length) {
      if (this.chunkIndex++, this.skip)
        for (; this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex]); )
          this.chunkIndex++;
      this.rangeIndex = 0;
    } else
      this.rangeIndex = e;
  }
  nextChunk() {
    this.chunkIndex++, this.rangeIndex = 0, this.next();
  }
  compare(e) {
    return this.from - e.from || this.startSide - e.startSide || this.rank - e.rank || this.to - e.to || this.endSide - e.endSide;
  }
}, Uu = class Qx {
  constructor(e) {
    this.heap = e;
  }
  static from(e, t = null, n = -1) {
    let r = [];
    for (let s = 0; s < e.length; s++)
      for (let o = e[s]; !o.isEmpty; o = o.nextLayer)
        o.maxPoint >= n && r.push(new vx(o, t, n, s));
    return r.length == 1 ? r[0] : new Qx(r);
  }
  get startSide() {
    return this.value ? this.value.startSide : 0;
  }
  goto(e, t = -1e9) {
    for (let n of this.heap)
      n.goto(e, t);
    for (let n = this.heap.length >> 1; n >= 0; n--)
      ef(this.heap, n);
    return this.next(), this;
  }
  forward(e, t) {
    for (let n of this.heap)
      n.forward(e, t);
    for (let n = this.heap.length >> 1; n >= 0; n--)
      ef(this.heap, n);
    (this.to - e || this.value.endSide - t) < 0 && this.next();
  }
  next() {
    if (this.heap.length == 0)
      this.from = this.to = 1e9, this.value = null, this.rank = -1;
    else {
      let e = this.heap[0];
      this.from = e.from, this.to = e.to, this.value = e.value, this.rank = e.rank, e.value && e.next(), ef(this.heap, 0);
    }
  }
};
function ef(i, e) {
  for (let t = i[e]; ; ) {
    let n = (e << 1) + 1;
    if (n >= i.length)
      break;
    let r = i[n];
    if (n + 1 < i.length && r.compare(i[n + 1]) >= 0 && (r = i[n + 1], n++), t.compare(r) < 0)
      break;
    i[n] = t, i[e] = r, e = n;
  }
}
let js = class {
  constructor(e, t, n) {
    this.minPoint = n, this.active = [], this.activeTo = [], this.activeRank = [], this.minActive = -1, this.point = null, this.pointFrom = 0, this.pointRank = 0, this.to = -1e9, this.endSide = 0, this.openStart = -1, this.cursor = Uu.from(e, t, n);
  }
  goto(e, t = -1e9) {
    return this.cursor.goto(e, t), this.active.length = this.activeTo.length = this.activeRank.length = 0, this.minActive = -1, this.to = e, this.endSide = t, this.openStart = -1, this.next(), this;
  }
  forward(e, t) {
    for (; this.minActive > -1 && (this.activeTo[this.minActive] - e || this.active[this.minActive].endSide - t) < 0; )
      this.removeActive(this.minActive);
    this.cursor.forward(e, t);
  }
  removeActive(e) {
    Vl(this.active, e), Vl(this.activeTo, e), Vl(this.activeRank, e), this.minActive = $g(this.active, this.activeTo);
  }
  addActive(e) {
    let t = 0, { value: n, to: r, rank: s } = this.cursor;
    for (; t < this.activeRank.length && (s - this.activeRank[t] || r - this.activeTo[t]) > 0; )
      t++;
    Wl(this.active, t, n), Wl(this.activeTo, t, r), Wl(this.activeRank, t, s), e && Wl(e, t, this.cursor.from), this.minActive = $g(this.active, this.activeTo);
  }
  // After calling this, if `this.point` != null, the next range is a
  // point. Otherwise, it's a regular range, covered by `this.active`.
  next() {
    let e = this.to, t = this.point;
    this.point = null;
    let n = this.openStart < 0 ? [] : null;
    for (; ; ) {
      let r = this.minActive;
      if (r > -1 && (this.activeTo[r] - this.cursor.from || this.active[r].endSide - this.cursor.startSide) < 0) {
        if (this.activeTo[r] > e) {
          this.to = this.activeTo[r], this.endSide = this.active[r].endSide;
          break;
        }
        this.removeActive(r), n && Vl(n, r);
      } else if (this.cursor.value)
        if (this.cursor.from > e) {
          this.to = this.cursor.from, this.endSide = this.cursor.startSide;
          break;
        } else {
          let s = this.cursor.value;
          if (!s.point)
            this.addActive(n), this.cursor.next();
          else if (t && this.cursor.to == this.to && this.cursor.from < this.cursor.to)
            this.cursor.next();
          else {
            this.point = s, this.pointFrom = this.cursor.from, this.pointRank = this.cursor.rank, this.to = this.cursor.to, this.endSide = s.endSide, this.cursor.next(), this.forward(this.to, this.endSide);
            break;
          }
        }
      else {
        this.to = this.endSide = 1e9;
        break;
      }
    }
    if (n) {
      this.openStart = 0;
      for (let r = n.length - 1; r >= 0 && n[r] < e; r--)
        this.openStart++;
    }
  }
  activeForPoint(e) {
    if (!this.active.length)
      return this.active;
    let t = [];
    for (let n = this.active.length - 1; n >= 0 && !(this.activeRank[n] < this.pointRank); n--)
      (this.activeTo[n] > e || this.activeTo[n] == e && this.active[n].endSide >= this.point.endSide) && t.push(this.active[n]);
    return t.reverse();
  }
  openEnd(e) {
    let t = 0;
    for (let n = this.activeTo.length - 1; n >= 0 && this.activeTo[n] > e; n--)
      t++;
    return t;
  }
};
function Pg(i, e, t, n, r, s) {
  i.goto(e), t.goto(n);
  let o = n + r, l = n, a = n - e;
  for (; ; ) {
    let h = i.to + a - t.to, c = h || i.endSide - t.endSide, f = c < 0 ? i.to + a : t.to, u = Math.min(f, o);
    if (i.point || t.point ? i.point && t.point && (i.point == t.point || i.point.eq(t.point)) && Yu(i.activeForPoint(i.to), t.activeForPoint(t.to)) || s.comparePoint(l, u, i.point, t.point) : u > l && !Yu(i.active, t.active) && s.compareRange(l, u, i.active, t.active), f > o)
      break;
    (h || i.openEnd != t.openEnd) && s.boundChange && s.boundChange(f), l = f, c <= 0 && i.next(), c >= 0 && t.next();
  }
}
function Yu(i, e) {
  if (i.length != e.length)
    return !1;
  for (let t = 0; t < i.length; t++)
    if (i[t] != e[t] && !i[t].eq(e[t]))
      return !1;
  return !0;
}
function Vl(i, e) {
  for (let t = e, n = i.length - 1; t < n; t++)
    i[t] = i[t + 1];
  i.pop();
}
function Wl(i, e, t) {
  for (let n = i.length - 1; n >= e; n--)
    i[n + 1] = i[n];
  i[e] = t;
}
function $g(i, e) {
  let t = -1, n = 1e9;
  for (let r = 0; r < e.length; r++)
    (e[r] - n || i[r].endSide - i[t].endSide) < 0 && (t = r, n = e[r]);
  return t;
}
function gi(i, e, t = i.length) {
  let n = 0;
  for (let r = 0; r < t && r < i.length; )
    i.charCodeAt(r) == 9 ? (n += e - n % e, r++) : (n++, r = ot(i, r));
  return n;
}
function Gu(i, e, t, n) {
  for (let r = 0, s = 0; ; ) {
    if (s >= e)
      return r;
    if (r == i.length)
      break;
    s += i.charCodeAt(r) == 9 ? t - s % t : 1, r = ot(i, r);
  }
  return n === !0 ? -1 : i.length;
}
const Fu = "ͼ", Tg = typeof Symbol > "u" ? "__" + Fu : Symbol.for(Fu), Hu = typeof Symbol > "u" ? "__styleSet" + Math.floor(Math.random() * 1e8) : Symbol("styleSet"), Cg = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : {};
class mt {
  // :: (Object<Style>, ?{finish: ?(string) → string})
  // Create a style module from the given spec.
  //
  // When `finish` is given, it is called on regular (non-`@`)
  // selectors (after `&` expansion) to compute the final selector.
  constructor(e, t) {
    this.rules = [];
    let { finish: n } = t || {};
    function r(o) {
      return /^@/.test(o) ? [o] : o.split(/,\s*/);
    }
    function s(o, l, a, h) {
      let c = [], f = /^@(\w+)\b/.exec(o[0]), u = f && f[1] == "keyframes";
      if (f && l == null) return a.push(o[0] + ";");
      for (let d in l) {
        let O = l[d];
        if (/&/.test(d))
          s(
            d.split(/,\s*/).map((p) => o.map((m) => p.replace(/&/, m))).reduce((p, m) => p.concat(m)),
            O,
            a
          );
        else if (O && typeof O == "object") {
          if (!f) throw new RangeError("The value of a property (" + d + ") should be a primitive value.");
          s(r(d), O, c, u);
        } else O != null && c.push(d.replace(/_.*/, "").replace(/[A-Z]/g, (p) => "-" + p.toLowerCase()) + ": " + O + ";");
      }
      (c.length || u) && a.push((n && !f && !h ? o.map(n) : o).join(", ") + " {" + c.join(" ") + "}");
    }
    for (let o in e) s(r(o), e[o], this.rules);
  }
  // :: () → string
  // Returns a string containing the module's CSS rules.
  getRules() {
    return this.rules.join(`
`);
  }
  // :: () → string
  // Generate a new unique CSS class name.
  static newName() {
    let e = Cg[Tg] || 1;
    return Cg[Tg] = e + 1, Fu + e.toString(36);
  }
  // :: (union<Document, ShadowRoot>, union<[StyleModule], StyleModule>, ?{nonce: ?string})
  //
  // Mount the given set of modules in the given DOM root, which ensures
  // that the CSS rules defined by the module are available in that
  // context.
  //
  // Rules are only added to the document once per root.
  //
  // Rule order will follow the order of the modules, so that rules from
  // modules later in the array take precedence of those from earlier
  // modules. If you call this function multiple times for the same root
  // in a way that changes the order of already mounted modules, the old
  // order will be changed.
  //
  // If a Content Security Policy nonce is provided, it is added to
  // the `<style>` tag generated by the library.
  static mount(e, t, n) {
    let r = e[Hu], s = n && n.nonce;
    r ? s && r.setNonce(s) : r = new iE(e, s), r.mount(Array.isArray(t) ? t : [t], e);
  }
}
let Rg = /* @__PURE__ */ new Map();
class iE {
  constructor(e, t) {
    let n = e.ownerDocument || e, r = n.defaultView;
    if (!e.head && e.adoptedStyleSheets && r.CSSStyleSheet) {
      let s = Rg.get(n);
      if (s) return e[Hu] = s;
      this.sheet = new r.CSSStyleSheet(), Rg.set(n, this);
    } else
      this.styleTag = n.createElement("style"), t && this.styleTag.setAttribute("nonce", t);
    this.modules = [], e[Hu] = this;
  }
  mount(e, t) {
    let n = this.sheet, r = 0, s = 0;
    for (let o = 0; o < e.length; o++) {
      let l = e[o], a = this.modules.indexOf(l);
      if (a < s && a > -1 && (this.modules.splice(a, 1), s--, a = -1), a == -1) {
        if (this.modules.splice(s++, 0, l), n) for (let h = 0; h < l.rules.length; h++)
          n.insertRule(l.rules[h], r++);
      } else {
        for (; s < a; ) r += this.modules[s++].rules.length;
        r += l.rules.length, s++;
      }
    }
    if (n)
      t.adoptedStyleSheets.indexOf(this.sheet) < 0 && (t.adoptedStyleSheets = [this.sheet, ...t.adoptedStyleSheets]);
    else {
      let o = "";
      for (let a = 0; a < this.modules.length; a++)
        o += this.modules[a].getRules() + `
`;
      this.styleTag.textContent = o;
      let l = t.head || t;
      this.styleTag.parentNode != l && l.insertBefore(this.styleTag, l.firstChild);
    }
  }
  setNonce(e) {
    this.styleTag && this.styleTag.getAttribute("nonce") != e && this.styleTag.setAttribute("nonce", e);
  }
}
var Nn = {
  8: "Backspace",
  9: "Tab",
  10: "Enter",
  12: "NumLock",
  13: "Enter",
  16: "Shift",
  17: "Control",
  18: "Alt",
  20: "CapsLock",
  27: "Escape",
  32: " ",
  33: "PageUp",
  34: "PageDown",
  35: "End",
  36: "Home",
  37: "ArrowLeft",
  38: "ArrowUp",
  39: "ArrowRight",
  40: "ArrowDown",
  44: "PrintScreen",
  45: "Insert",
  46: "Delete",
  59: ";",
  61: "=",
  91: "Meta",
  92: "Meta",
  106: "*",
  107: "+",
  108: ",",
  109: "-",
  110: ".",
  111: "/",
  144: "NumLock",
  145: "ScrollLock",
  160: "Shift",
  161: "Shift",
  162: "Control",
  163: "Control",
  164: "Alt",
  165: "Alt",
  173: "-",
  186: ";",
  187: "=",
  188: ",",
  189: "-",
  190: ".",
  191: "/",
  192: "`",
  219: "[",
  220: "\\",
  221: "]",
  222: "'"
}, Bo = {
  48: ")",
  49: "!",
  50: "@",
  51: "#",
  52: "$",
  53: "%",
  54: "^",
  55: "&",
  56: "*",
  57: "(",
  59: ":",
  61: "+",
  173: "_",
  186: ":",
  187: "+",
  188: "<",
  189: "_",
  190: ">",
  191: "?",
  192: "~",
  219: "{",
  220: "|",
  221: "}",
  222: '"'
}, nE = typeof navigator < "u" && /Mac/.test(navigator.platform), rE = typeof navigator < "u" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);
for (var nt = 0; nt < 10; nt++) Nn[48 + nt] = Nn[96 + nt] = String(nt);
for (var nt = 1; nt <= 24; nt++) Nn[nt + 111] = "F" + nt;
for (var nt = 65; nt <= 90; nt++)
  Nn[nt] = String.fromCharCode(nt + 32), Bo[nt] = String.fromCharCode(nt);
for (var tf in Nn) Bo.hasOwnProperty(tf) || (Bo[tf] = Nn[tf]);
function sE(i) {
  var e = nE && i.metaKey && i.shiftKey && !i.ctrlKey && !i.altKey || rE && i.shiftKey && i.key && i.key.length == 1 || i.key == "Unidentified", t = !e && i.key || (i.shiftKey ? Bo : Nn)[i.keyCode] || i.key || "Unidentified";
  return t == "Esc" && (t = "Escape"), t == "Del" && (t = "Delete"), t == "Left" && (t = "ArrowLeft"), t == "Up" && (t = "ArrowUp"), t == "Right" && (t = "ArrowRight"), t == "Down" && (t = "ArrowDown"), t;
}
function we() {
  var i = arguments[0];
  typeof i == "string" && (i = document.createElement(i));
  var e = 1, t = arguments[1];
  if (t && typeof t == "object" && t.nodeType == null && !Array.isArray(t)) {
    for (var n in t) if (Object.prototype.hasOwnProperty.call(t, n)) {
      var r = t[n];
      typeof r == "string" ? i.setAttribute(n, r) : r != null && (i[n] = r);
    }
    e++;
  }
  for (; e < arguments.length; e++) Px(i, arguments[e]);
  return i;
}
function Px(i, e) {
  if (typeof e == "string")
    i.appendChild(document.createTextNode(e));
  else if (e != null) if (e.nodeType != null)
    i.appendChild(e);
  else if (Array.isArray(e))
    for (var t = 0; t < e.length; t++) Px(i, e[t]);
  else
    throw new RangeError("Unsupported child node: " + e);
}
function Zo(i) {
  let e;
  return i.nodeType == 11 ? e = i.getSelection ? i : i.ownerDocument : e = i, e.getSelection();
}
function Ku(i, e) {
  return e ? i == e || i.contains(e.nodeType != 1 ? e.parentNode : e) : !1;
}
function _a(i, e) {
  if (!e.anchorNode)
    return !1;
  try {
    return Ku(i, e.anchorNode);
  } catch {
    return !1;
  }
}
function Do(i) {
  return i.nodeType == 3 ? Pr(i, 0, i.nodeValue.length).getClientRects() : i.nodeType == 1 ? i.getClientRects() : [];
}
function vo(i, e, t, n) {
  return t ? Ag(i, e, t, n, -1) || Ag(i, e, t, n, 1) : !1;
}
function Qr(i) {
  for (var e = 0; ; e++)
    if (i = i.previousSibling, !i)
      return e;
}
function yh(i) {
  return i.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(i.nodeName);
}
function Ag(i, e, t, n, r) {
  for (; ; ) {
    if (i == t && e == n)
      return !0;
    if (e == (r < 0 ? 0 : Yi(i))) {
      if (i.nodeName == "DIV")
        return !1;
      let s = i.parentNode;
      if (!s || s.nodeType != 1)
        return !1;
      e = Qr(i) + (r < 0 ? 0 : 1), i = s;
    } else if (i.nodeType == 1) {
      if (i = i.childNodes[e + (r < 0 ? -1 : 0)], i.nodeType == 1 && i.contentEditable == "false")
        return !1;
      e = r < 0 ? Yi(i) : 0;
    } else
      return !1;
  }
}
function Yi(i) {
  return i.nodeType == 3 ? i.nodeValue.length : i.childNodes.length;
}
function dc(i, e) {
  let t = e ? i.left : i.right;
  return { left: t, right: t, top: i.top, bottom: i.bottom };
}
function oE(i) {
  let e = i.visualViewport;
  return e ? {
    left: 0,
    right: e.width,
    top: 0,
    bottom: e.height
  } : {
    left: 0,
    right: i.innerWidth,
    top: 0,
    bottom: i.innerHeight
  };
}
function $x(i, e) {
  let t = e.width / i.offsetWidth, n = e.height / i.offsetHeight;
  return (t > 0.995 && t < 1.005 || !isFinite(t) || Math.abs(e.width - i.offsetWidth) < 1) && (t = 1), (n > 0.995 && n < 1.005 || !isFinite(n) || Math.abs(e.height - i.offsetHeight) < 1) && (n = 1), { scaleX: t, scaleY: n };
}
function lE(i, e, t, n, r, s, o, l) {
  let a = i.ownerDocument, h = a.defaultView || window;
  for (let c = i, f = !1; c && !f; )
    if (c.nodeType == 1) {
      let u, d = c == a.body, O = 1, p = 1;
      if (d)
        u = oE(h);
      else {
        if (/^(fixed|sticky)$/.test(getComputedStyle(c).position) && (f = !0), c.scrollHeight <= c.clientHeight && c.scrollWidth <= c.clientWidth) {
          c = c.assignedSlot || c.parentNode;
          continue;
        }
        let S = c.getBoundingClientRect();
        ({ scaleX: O, scaleY: p } = $x(c, S)), u = {
          left: S.left,
          right: S.left + c.clientWidth * O,
          top: S.top,
          bottom: S.top + c.clientHeight * p
        };
      }
      let m = 0, g = 0;
      if (r == "nearest")
        e.top < u.top ? (g = e.top - (u.top + o), t > 0 && e.bottom > u.bottom + g && (g = e.bottom - u.bottom + o)) : e.bottom > u.bottom && (g = e.bottom - u.bottom + o, t < 0 && e.top - g < u.top && (g = e.top - (u.top + o)));
      else {
        let S = e.bottom - e.top, x = u.bottom - u.top;
        g = (r == "center" && S <= x ? e.top + S / 2 - x / 2 : r == "start" || r == "center" && t < 0 ? e.top - o : e.bottom - x + o) - u.top;
      }
      if (n == "nearest" ? e.left < u.left ? (m = e.left - (u.left + s), t > 0 && e.right > u.right + m && (m = e.right - u.right + s)) : e.right > u.right && (m = e.right - u.right + s, t < 0 && e.left < u.left + m && (m = e.left - (u.left + s))) : m = (n == "center" ? e.left + (e.right - e.left) / 2 - (u.right - u.left) / 2 : n == "start" == l ? e.left - s : e.right - (u.right - u.left) + s) - u.left, m || g)
        if (d)
          h.scrollBy(m, g);
        else {
          let S = 0, x = 0;
          if (g) {
            let k = c.scrollTop;
            c.scrollTop += g / p, x = (c.scrollTop - k) * p;
          }
          if (m) {
            let k = c.scrollLeft;
            c.scrollLeft += m / O, S = (c.scrollLeft - k) * O;
          }
          e = {
            left: e.left - S,
            top: e.top - x,
            right: e.right - S,
            bottom: e.bottom - x
          }, S && Math.abs(S - m) < 1 && (n = "nearest"), x && Math.abs(x - g) < 1 && (r = "nearest");
        }
      if (d)
        break;
      (e.top < u.top || e.bottom > u.bottom || e.left < u.left || e.right > u.right) && (e = {
        left: Math.max(e.left, u.left),
        right: Math.min(e.right, u.right),
        top: Math.max(e.top, u.top),
        bottom: Math.min(e.bottom, u.bottom)
      }), c = c.assignedSlot || c.parentNode;
    } else if (c.nodeType == 11)
      c = c.host;
    else
      break;
}
function aE(i) {
  let e = i.ownerDocument, t, n;
  for (let r = i.parentNode; r && !(r == e.body || t && n); )
    if (r.nodeType == 1)
      !n && r.scrollHeight > r.clientHeight && (n = r), !t && r.scrollWidth > r.clientWidth && (t = r), r = r.assignedSlot || r.parentNode;
    else if (r.nodeType == 11)
      r = r.host;
    else
      break;
  return { x: t, y: n };
}
let hE = class {
  constructor() {
    this.anchorNode = null, this.anchorOffset = 0, this.focusNode = null, this.focusOffset = 0;
  }
  eq(e) {
    return this.anchorNode == e.anchorNode && this.anchorOffset == e.anchorOffset && this.focusNode == e.focusNode && this.focusOffset == e.focusOffset;
  }
  setRange(e) {
    let { anchorNode: t, focusNode: n } = e;
    this.set(t, Math.min(e.anchorOffset, t ? Yi(t) : 0), n, Math.min(e.focusOffset, n ? Yi(n) : 0));
  }
  set(e, t, n, r) {
    this.anchorNode = e, this.anchorOffset = t, this.focusNode = n, this.focusOffset = r;
  }
}, qr = null;
function Tx(i) {
  if (i.setActive)
    return i.setActive();
  if (qr)
    return i.focus(qr);
  let e = [];
  for (let t = i; t && (e.push(t, t.scrollTop, t.scrollLeft), t != t.ownerDocument); t = t.parentNode)
    ;
  if (i.focus(qr == null ? {
    get preventScroll() {
      return qr = { preventScroll: !0 }, !0;
    }
  } : void 0), !qr) {
    qr = !1;
    for (let t = 0; t < e.length; ) {
      let n = e[t++], r = e[t++], s = e[t++];
      n.scrollTop != r && (n.scrollTop = r), n.scrollLeft != s && (n.scrollLeft = s);
    }
  }
}
let Eg;
function Pr(i, e, t = e) {
  let n = Eg || (Eg = document.createRange());
  return n.setEnd(i, t), n.setStart(i, e), n;
}
function es(i, e, t, n) {
  let r = { key: e, code: e, keyCode: t, which: t, cancelable: !0 };
  n && ({ altKey: r.altKey, ctrlKey: r.ctrlKey, shiftKey: r.shiftKey, metaKey: r.metaKey } = n);
  let s = new KeyboardEvent("keydown", r);
  s.synthetic = !0, i.dispatchEvent(s);
  let o = new KeyboardEvent("keyup", r);
  return o.synthetic = !0, i.dispatchEvent(o), s.defaultPrevented || o.defaultPrevented;
}
function cE(i) {
  for (; i; ) {
    if (i && (i.nodeType == 9 || i.nodeType == 11 && i.host))
      return i;
    i = i.assignedSlot || i.parentNode;
  }
  return null;
}
function Cx(i) {
  for (; i.attributes.length; )
    i.removeAttributeNode(i.attributes[0]);
}
function fE(i, e) {
  let t = e.focusNode, n = e.focusOffset;
  if (!t || e.anchorNode != t || e.anchorOffset != n)
    return !1;
  for (n = Math.min(n, Yi(t)); ; )
    if (n) {
      if (t.nodeType != 1)
        return !1;
      let r = t.childNodes[n - 1];
      r.contentEditable == "false" ? n-- : (t = r, n = Yi(t));
    } else {
      if (t == i)
        return !0;
      n = Qr(t), t = t.parentNode;
    }
}
function Rx(i) {
  return i.scrollTop > Math.max(1, i.scrollHeight - i.clientHeight - 4);
}
function Ax(i, e) {
  for (let t = i, n = e; ; ) {
    if (t.nodeType == 3 && n > 0)
      return { node: t, offset: n };
    if (t.nodeType == 1 && n > 0) {
      if (t.contentEditable == "false")
        return null;
      t = t.childNodes[n - 1], n = Yi(t);
    } else if (t.parentNode && !yh(t))
      n = Qr(t), t = t.parentNode;
    else
      return null;
  }
}
function Ex(i, e) {
  for (let t = i, n = e; ; ) {
    if (t.nodeType == 3 && n < t.nodeValue.length)
      return { node: t, offset: n };
    if (t.nodeType == 1 && n < t.childNodes.length) {
      if (t.contentEditable == "false")
        return null;
      t = t.childNodes[n], n = 0;
    } else if (t.parentNode && !yh(t))
      n = Qr(t) + 1, t = t.parentNode;
    else
      return null;
  }
}
let Zt = class Ju {
  constructor(e, t, n = !0) {
    this.node = e, this.offset = t, this.precise = n;
  }
  static before(e, t) {
    return new Ju(e.parentNode, Qr(e), t);
  }
  static after(e, t) {
    return new Ju(e.parentNode, Qr(e) + 1, t);
  }
};
const yp = [];
let Ae = class ed {
  constructor() {
    this.parent = null, this.dom = null, this.flags = 2;
  }
  get overrideDOMText() {
    return null;
  }
  get posAtStart() {
    return this.parent ? this.parent.posBefore(this) : 0;
  }
  get posAtEnd() {
    return this.posAtStart + this.length;
  }
  posBefore(e) {
    let t = this.posAtStart;
    for (let n of this.children) {
      if (n == e)
        return t;
      t += n.length + n.breakAfter;
    }
    throw new RangeError("Invalid child in posBefore");
  }
  posAfter(e) {
    return this.posBefore(e) + e.length;
  }
  sync(e, t) {
    if (this.flags & 2) {
      let n = this.dom, r = null, s;
      for (let o of this.children) {
        if (o.flags & 7) {
          if (!o.dom && (s = r ? r.nextSibling : n.firstChild)) {
            let l = ed.get(s);
            (!l || !l.parent && l.canReuseDOM(o)) && o.reuseDOM(s);
          }
          o.sync(e, t), o.flags &= -8;
        }
        if (s = r ? r.nextSibling : n.firstChild, t && !t.written && t.node == n && s != o.dom && (t.written = !0), o.dom.parentNode == n)
          for (; s && s != o.dom; )
            s = Mg(s);
        else
          n.insertBefore(o.dom, s);
        r = o.dom;
      }
      for (s = r ? r.nextSibling : n.firstChild, s && t && t.node == n && (t.written = !0); s; )
        s = Mg(s);
    } else if (this.flags & 1)
      for (let n of this.children)
        n.flags & 7 && (n.sync(e, t), n.flags &= -8);
  }
  reuseDOM(e) {
  }
  localPosFromDOM(e, t) {
    let n;
    if (e == this.dom)
      n = this.dom.childNodes[t];
    else {
      let r = Yi(e) == 0 ? 0 : t == 0 ? -1 : 1;
      for (; ; ) {
        let s = e.parentNode;
        if (s == this.dom)
          break;
        r == 0 && s.firstChild != s.lastChild && (e == s.firstChild ? r = -1 : r = 1), e = s;
      }
      r < 0 ? n = e : n = e.nextSibling;
    }
    if (n == this.dom.firstChild)
      return 0;
    for (; n && !ed.get(n); )
      n = n.nextSibling;
    if (!n)
      return this.length;
    for (let r = 0, s = 0; ; r++) {
      let o = this.children[r];
      if (o.dom == n)
        return s;
      s += o.length + o.breakAfter;
    }
  }
  domBoundsAround(e, t, n = 0) {
    let r = -1, s = -1, o = -1, l = -1;
    for (let a = 0, h = n, c = n; a < this.children.length; a++) {
      let f = this.children[a], u = h + f.length;
      if (h < e && u > t)
        return f.domBoundsAround(e, t, h);
      if (u >= e && r == -1 && (r = a, s = h), h > t && f.dom.parentNode == this.dom) {
        o = a, l = c;
        break;
      }
      c = u, h = u + f.breakAfter;
    }
    return {
      from: s,
      to: l < 0 ? n + this.length : l,
      startDOM: (r ? this.children[r - 1].dom.nextSibling : null) || this.dom.firstChild,
      endDOM: o < this.children.length && o >= 0 ? this.children[o].dom : null
    };
  }
  markDirty(e = !1) {
    this.flags |= 2, this.markParentsDirty(e);
  }
  markParentsDirty(e) {
    for (let t = this.parent; t; t = t.parent) {
      if (e && (t.flags |= 2), t.flags & 1)
        return;
      t.flags |= 1, e = !1;
    }
  }
  setParent(e) {
    this.parent != e && (this.parent = e, this.flags & 7 && this.markParentsDirty(!0));
  }
  setDOM(e) {
    this.dom != e && (this.dom && (this.dom.cmView = null), this.dom = e, e.cmView = this);
  }
  get rootView() {
    for (let e = this; ; ) {
      let t = e.parent;
      if (!t)
        return e;
      e = t;
    }
  }
  replaceChildren(e, t, n = yp) {
    this.markDirty();
    for (let r = e; r < t; r++) {
      let s = this.children[r];
      s.parent == this && n.indexOf(s) < 0 && s.destroy();
    }
    n.length < 250 ? this.children.splice(e, t - e, ...n) : this.children = [].concat(this.children.slice(0, e), n, this.children.slice(t));
    for (let r = 0; r < n.length; r++)
      n[r].setParent(this);
  }
  ignoreMutation(e) {
    return !1;
  }
  ignoreEvent(e) {
    return !1;
  }
  childCursor(e = this.length) {
    return new Mx(this.children, e, this.children.length);
  }
  childPos(e, t = 1) {
    return this.childCursor().findPos(e, t);
  }
  toString() {
    let e = this.constructor.name.replace("View", "");
    return e + (this.children.length ? "(" + this.children.join() + ")" : this.length ? "[" + (e == "Text" ? this.text : this.length) + "]" : "") + (this.breakAfter ? "#" : "");
  }
  static get(e) {
    return e.cmView;
  }
  get isEditable() {
    return !0;
  }
  get isWidget() {
    return !1;
  }
  get isHidden() {
    return !1;
  }
  merge(e, t, n, r, s, o) {
    return !1;
  }
  become(e) {
    return !1;
  }
  canReuseDOM(e) {
    return e.constructor == this.constructor && !((this.flags | e.flags) & 8);
  }
  // When this is a zero-length view with a side, this should return a
  // number <= 0 to indicate it is before its position, or a
  // number > 0 when after its position.
  getSide() {
    return 0;
  }
  destroy() {
    for (let e of this.children)
      e.parent == this && e.destroy();
    this.parent = null;
  }
};
Ae.prototype.breakAfter = 0;
function Mg(i) {
  let e = i.nextSibling;
  return i.parentNode.removeChild(i), e;
}
let Mx = class {
  constructor(e, t, n) {
    this.children = e, this.pos = t, this.i = n, this.off = 0;
  }
  findPos(e, t = 1) {
    for (; ; ) {
      if (e > this.pos || e == this.pos && (t > 0 || this.i == 0 || this.children[this.i - 1].breakAfter))
        return this.off = e - this.pos, this;
      let n = this.children[--this.i];
      this.pos -= n.length + n.breakAfter;
    }
  }
};
function qx(i, e, t, n, r, s, o, l, a) {
  let { children: h } = i, c = h.length ? h[e] : null, f = s.length ? s[s.length - 1] : null, u = f ? f.breakAfter : o;
  if (!(e == n && c && !o && !u && s.length < 2 && c.merge(t, r, s.length ? f : null, t == 0, l, a))) {
    if (n < h.length) {
      let d = h[n];
      d && (r < d.length || d.breakAfter && f?.breakAfter) ? (e == n && (d = d.split(r), r = 0), !u && f && d.merge(0, r, f, !0, 0, a) ? s[s.length - 1] = d : ((r || d.children.length && !d.children[0].length) && d.merge(0, r, null, !1, 0, a), s.push(d))) : d?.breakAfter && (f ? f.breakAfter = 1 : o = 1), n++;
    }
    for (c && (c.breakAfter = o, t > 0 && (!o && s.length && c.merge(t, c.length, s[0], !1, l, 0) ? c.breakAfter = s.shift().breakAfter : (t < c.length || c.children.length && c.children[c.children.length - 1].length == 0) && c.merge(t, c.length, null, !1, l, 0), e++)); e < n && s.length; )
      if (h[n - 1].become(s[s.length - 1]))
        n--, s.pop(), a = s.length ? 0 : l;
      else if (h[e].become(s[0]))
        e++, s.shift(), l = s.length ? 0 : a;
      else
        break;
    !s.length && e && n < h.length && !h[e - 1].breakAfter && h[n].merge(0, 0, h[e - 1], !1, l, a) && e--, (e < n || s.length) && i.replaceChildren(e, n, s);
  }
}
function _x(i, e, t, n, r, s) {
  let o = i.childCursor(), { i: l, off: a } = o.findPos(t, 1), { i: h, off: c } = o.findPos(e, -1), f = e - t;
  for (let u of n)
    f += u.length;
  i.length += f, qx(i, h, c, l, a, n, 0, r, s);
}
let $t = typeof navigator < "u" ? navigator : { userAgent: "", vendor: "", platform: "" }, td = typeof document < "u" ? document : { documentElement: { style: {} } };
const id = /* @__PURE__ */ /Edge\/(\d+)/.exec($t.userAgent), Xx = /* @__PURE__ */ /MSIE \d/.test($t.userAgent), nd = /* @__PURE__ */ /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec($t.userAgent), Oc = !!(Xx || nd || id), qg = !Oc && /* @__PURE__ */ /gecko\/(\d+)/i.test($t.userAgent), nf = !Oc && /* @__PURE__ */ /Chrome\/(\d+)/.exec($t.userAgent), uE = "webkitFontSmoothing" in td.documentElement.style, Lx = !Oc && /* @__PURE__ */ /Apple Computer/.test($t.vendor), _g = Lx && (/* @__PURE__ */ /Mobile\/\w+/.test($t.userAgent) || $t.maxTouchPoints > 2);
var z = {
  mac: _g || /* @__PURE__ */ /Mac/.test($t.platform),
  windows: /* @__PURE__ */ /Win/.test($t.platform),
  linux: /* @__PURE__ */ /Linux|X11/.test($t.platform),
  ie: Oc,
  ie_version: Xx ? td.documentMode || 6 : nd ? +nd[1] : id ? +id[1] : 0,
  gecko: qg,
  gecko_version: qg ? +(/* @__PURE__ */ /Firefox\/(\d+)/.exec($t.userAgent) || [0, 0])[1] : 0,
  chrome: !!nf,
  chrome_version: nf ? +nf[1] : 0,
  ios: _g,
  android: /* @__PURE__ */ /Android\b/.test($t.userAgent),
  safari: Lx,
  webkit_version: uE ? +(/* @__PURE__ */ /\bAppleWebKit\/(\d+)/.exec($t.userAgent) || [0, 0])[1] : 0,
  tabSize: td.documentElement.style.tabSize != null ? "tab-size" : "-moz-tab-size"
};
const dE = 256;
let jn = class rd extends Ae {
  constructor(e) {
    super(), this.text = e;
  }
  get length() {
    return this.text.length;
  }
  createDOM(e) {
    this.setDOM(e || document.createTextNode(this.text));
  }
  sync(e, t) {
    this.dom || this.createDOM(), this.dom.nodeValue != this.text && (t && t.node == this.dom && (t.written = !0), this.dom.nodeValue = this.text);
  }
  reuseDOM(e) {
    e.nodeType == 3 && this.createDOM(e);
  }
  merge(e, t, n) {
    return this.flags & 8 || n && (!(n instanceof rd) || this.length - (t - e) + n.length > dE || n.flags & 8) ? !1 : (this.text = this.text.slice(0, e) + (n ? n.text : "") + this.text.slice(t), this.markDirty(), !0);
  }
  split(e) {
    let t = new rd(this.text.slice(e));
    return this.text = this.text.slice(0, e), this.markDirty(), t.flags |= this.flags & 8, t;
  }
  localPosFromDOM(e, t) {
    return e == this.dom ? t : t ? this.text.length : 0;
  }
  domAtPos(e) {
    return new Zt(this.dom, e);
  }
  domBoundsAround(e, t, n) {
    return { from: n, to: n + this.length, startDOM: this.dom, endDOM: this.dom.nextSibling };
  }
  coordsAt(e, t) {
    return OE(this.dom, e, t);
  }
}, fs = class sd extends Ae {
  constructor(e, t = [], n = 0) {
    super(), this.mark = e, this.children = t, this.length = n;
    for (let r of t)
      r.setParent(this);
  }
  setAttrs(e) {
    if (Cx(e), this.mark.class && (e.className = this.mark.class), this.mark.attrs)
      for (let t in this.mark.attrs)
        e.setAttribute(t, this.mark.attrs[t]);
    return e;
  }
  canReuseDOM(e) {
    return super.canReuseDOM(e) && !((this.flags | e.flags) & 8);
  }
  reuseDOM(e) {
    e.nodeName == this.mark.tagName.toUpperCase() && (this.setDOM(e), this.flags |= 6);
  }
  sync(e, t) {
    this.dom ? this.flags & 4 && this.setAttrs(this.dom) : this.setDOM(this.setAttrs(document.createElement(this.mark.tagName))), super.sync(e, t);
  }
  merge(e, t, n, r, s, o) {
    return n && (!(n instanceof sd && n.mark.eq(this.mark)) || e && s <= 0 || t < this.length && o <= 0) ? !1 : (_x(this, e, t, n ? n.children.slice() : [], s - 1, o - 1), this.markDirty(), !0);
  }
  split(e) {
    let t = [], n = 0, r = -1, s = 0;
    for (let l of this.children) {
      let a = n + l.length;
      a > e && t.push(n < e ? l.split(e - n) : l), r < 0 && n >= e && (r = s), n = a, s++;
    }
    let o = this.length - e;
    return this.length = e, r > -1 && (this.children.length = r, this.markDirty()), new sd(this.mark, t, o);
  }
  domAtPos(e) {
    return Bx(this, e);
  }
  coordsAt(e, t) {
    return Dx(this, e, t);
  }
};
function OE(i, e, t) {
  let n = i.nodeValue.length;
  e > n && (e = n);
  let r = e, s = e, o = 0;
  e == 0 && t < 0 || e == n && t >= 0 ? z.chrome || z.gecko || (e ? (r--, o = 1) : s < n && (s++, o = -1)) : t < 0 ? r-- : s < n && s++;
  let l = Pr(i, r, s).getClientRects();
  if (!l.length)
    return null;
  let a = l[(o ? o < 0 : t >= 0) ? 0 : l.length - 1];
  return z.safari && !o && a.width == 0 && (a = Array.prototype.find.call(l, (h) => h.width) || a), o ? dc(a, o < 0) : a || null;
}
let Sp = class lo extends Ae {
  static create(e, t, n) {
    return new lo(e, t, n);
  }
  constructor(e, t, n) {
    super(), this.widget = e, this.length = t, this.side = n, this.prevWidget = null;
  }
  split(e) {
    let t = lo.create(this.widget, this.length - e, this.side);
    return this.length -= e, t;
  }
  sync(e) {
    (!this.dom || !this.widget.updateDOM(this.dom, e)) && (this.dom && this.prevWidget && this.prevWidget.destroy(this.dom), this.prevWidget = null, this.setDOM(this.widget.toDOM(e)), this.widget.editable || (this.dom.contentEditable = "false"));
  }
  getSide() {
    return this.side;
  }
  merge(e, t, n, r, s, o) {
    return n && (!(n instanceof lo) || !this.widget.compare(n.widget) || e > 0 && s <= 0 || t < this.length && o <= 0) ? !1 : (this.length = e + (n ? n.length : 0) + (this.length - t), !0);
  }
  become(e) {
    return e instanceof lo && e.side == this.side && this.widget.constructor == e.widget.constructor ? (this.widget.compare(e.widget) || this.markDirty(!0), this.dom && !this.prevWidget && (this.prevWidget = this.widget), this.widget = e.widget, this.length = e.length, !0) : !1;
  }
  ignoreMutation() {
    return !0;
  }
  ignoreEvent(e) {
    return this.widget.ignoreEvent(e);
  }
  get overrideDOMText() {
    if (this.length == 0)
      return me.empty;
    let e = this;
    for (; e.parent; )
      e = e.parent;
    let { view: t } = e, n = t && t.state.doc, r = this.posAtStart;
    return n ? n.slice(r, r + this.length) : me.empty;
  }
  domAtPos(e) {
    return (this.length ? e == 0 : this.side > 0) ? Zt.before(this.dom) : Zt.after(this.dom, e == this.length);
  }
  domBoundsAround() {
    return null;
  }
  coordsAt(e, t) {
    let n = this.widget.coordsAt(this.dom, e, t);
    if (n)
      return n;
    let r = this.dom.getClientRects(), s = null;
    if (!r.length)
      return null;
    let o = this.side ? this.side < 0 : e > 0;
    for (let l = o ? r.length - 1 : 0; s = r[l], !(e > 0 ? l == 0 : l == r.length - 1 || s.top < s.bottom); l += o ? -1 : 1)
      ;
    return dc(s, !o);
  }
  get isEditable() {
    return !1;
  }
  get isWidget() {
    return !0;
  }
  get isHidden() {
    return this.widget.isHidden;
  }
  destroy() {
    super.destroy(), this.dom && this.widget.destroy(this.dom);
  }
}, od = class ld extends Ae {
  constructor(e) {
    super(), this.side = e;
  }
  get length() {
    return 0;
  }
  merge() {
    return !1;
  }
  become(e) {
    return e instanceof ld && e.side == this.side;
  }
  split() {
    return new ld(this.side);
  }
  sync() {
    if (!this.dom) {
      let e = document.createElement("img");
      e.className = "cm-widgetBuffer", e.setAttribute("aria-hidden", "true"), this.setDOM(e);
    }
  }
  getSide() {
    return this.side;
  }
  domAtPos(e) {
    return this.side > 0 ? Zt.before(this.dom) : Zt.after(this.dom);
  }
  localPosFromDOM() {
    return 0;
  }
  domBoundsAround() {
    return null;
  }
  coordsAt(e) {
    return this.dom.getBoundingClientRect();
  }
  get overrideDOMText() {
    return me.empty;
  }
  get isHidden() {
    return !0;
  }
};
jn.prototype.children = Sp.prototype.children = od.prototype.children = yp;
function Bx(i, e) {
  let t = i.dom, { children: n } = i, r = 0;
  for (let s = 0; r < n.length; r++) {
    let o = n[r], l = s + o.length;
    if (!(l == s && o.getSide() <= 0)) {
      if (e > s && e < l && o.dom.parentNode == t)
        return o.domAtPos(e - s);
      if (e <= s)
        break;
      s = l;
    }
  }
  for (let s = r; s > 0; s--) {
    let o = n[s - 1];
    if (o.dom.parentNode == t)
      return o.domAtPos(o.length);
  }
  for (let s = r; s < n.length; s++) {
    let o = n[s];
    if (o.dom.parentNode == t)
      return o.domAtPos(0);
  }
  return new Zt(t, 0);
}
function Zx(i, e, t) {
  let n, { children: r } = i;
  t > 0 && e instanceof fs && r.length && (n = r[r.length - 1]) instanceof fs && n.mark.eq(e.mark) ? Zx(n, e.children[0], t - 1) : (r.push(e), e.setParent(i)), i.length += e.length;
}
function Dx(i, e, t) {
  let n = null, r = -1, s = null, o = -1;
  function l(h, c) {
    for (let f = 0, u = 0; f < h.children.length && u <= c; f++) {
      let d = h.children[f], O = u + d.length;
      O >= c && (d.children.length ? l(d, c - u) : (!s || s.isHidden && (t > 0 || mE(s, d))) && (O > c || u == O && d.getSide() > 0) ? (s = d, o = c - u) : (u < c || u == O && d.getSide() < 0 && !d.isHidden) && (n = d, r = c - u)), u = O;
    }
  }
  l(i, e);
  let a = (t < 0 ? n : s) || n || s;
  return a ? a.coordsAt(Math.max(0, a == n ? r : o), t) : pE(i);
}
function pE(i) {
  let e = i.dom.lastChild;
  if (!e)
    return i.dom.getBoundingClientRect();
  let t = Do(e);
  return t[t.length - 1] || null;
}
function mE(i, e) {
  let t = i.coordsAt(0, 1), n = e.coordsAt(0, 1);
  return t && n && n.top < t.bottom;
}
function ad(i, e) {
  for (let t in i)
    t == "class" && e.class ? e.class += " " + i.class : t == "style" && e.style ? e.style += ";" + i.style : e[t] = i[t];
  return e;
}
const Xg = /* @__PURE__ */ Object.create(null);
function Sh(i, e, t) {
  if (i == e)
    return !0;
  i || (i = Xg), e || (e = Xg);
  let n = Object.keys(i), r = Object.keys(e);
  if (n.length - (t && n.indexOf(t) > -1 ? 1 : 0) != r.length - (t && r.indexOf(t) > -1 ? 1 : 0))
    return !1;
  for (let s of n)
    if (s != t && (r.indexOf(s) == -1 || i[s] !== e[s]))
      return !1;
  return !0;
}
function hd(i, e, t) {
  let n = !1;
  if (e)
    for (let r in e)
      t && r in t || (n = !0, r == "style" ? i.style.cssText = "" : i.removeAttribute(r));
  if (t)
    for (let r in t)
      e && e[r] == t[r] || (n = !0, r == "style" ? i.style.cssText = t[r] : i.setAttribute(r, t[r]));
  return n;
}
function gE(i) {
  let e = /* @__PURE__ */ Object.create(null);
  for (let t = 0; t < i.attributes.length; t++) {
    let n = i.attributes[t];
    e[n.name] = n.value;
  }
  return e;
}
let wn = class {
  /**
  Compare this instance to another instance of the same type.
  (TypeScript can't express this, but only instances of the same
  specific class will be passed to this method.) This is used to
  avoid redrawing widgets when they are replaced by a new
  decoration of the same type. The default implementation just
  returns `false`, which will cause new instances of the widget to
  always be redrawn.
  */
  eq(e) {
    return !1;
  }
  /**
  Update a DOM element created by a widget of the same type (but
  different, non-`eq` content) to reflect this widget. May return
  true to indicate that it could update, false to indicate it
  couldn't (in which case the widget will be redrawn). The default
  implementation just returns false.
  */
  updateDOM(e, t) {
    return !1;
  }
  /**
  @internal
  */
  compare(e) {
    return this == e || this.constructor == e.constructor && this.eq(e);
  }
  /**
  The estimated height this widget will have, to be used when
  estimating the height of content that hasn't been drawn. May
  return -1 to indicate you don't know. The default implementation
  returns -1.
  */
  get estimatedHeight() {
    return -1;
  }
  /**
  For inline widgets that are displayed inline (as opposed to
  `inline-block`) and introduce line breaks (through `<br>` tags
  or textual newlines), this must indicate the amount of line
  breaks they introduce. Defaults to 0.
  */
  get lineBreaks() {
    return 0;
  }
  /**
  Can be used to configure which kinds of events inside the widget
  should be ignored by the editor. The default is to ignore all
  events.
  */
  ignoreEvent(e) {
    return !0;
  }
  /**
  Override the way screen coordinates for positions at/in the
  widget are found. `pos` will be the offset into the widget, and
  `side` the side of the position that is being queried—less than
  zero for before, greater than zero for after, and zero for
  directly at that position.
  */
  coordsAt(e, t, n) {
    return null;
  }
  /**
  @internal
  */
  get isHidden() {
    return !1;
  }
  /**
  @internal
  */
  get editable() {
    return !1;
  }
  /**
  This is called when the an instance of the widget is removed
  from the editor view.
  */
  destroy(e) {
  }
};
var vt = /* @__PURE__ */ function(i) {
  return i[i.Text = 0] = "Text", i[i.WidgetBefore = 1] = "WidgetBefore", i[i.WidgetAfter = 2] = "WidgetAfter", i[i.WidgetRange = 3] = "WidgetRange", i;
}(vt || (vt = {}));
let K = class extends kr {
  constructor(e, t, n, r) {
    super(), this.startSide = e, this.endSide = t, this.widget = n, this.spec = r;
  }
  /**
  @internal
  */
  get heightRelevant() {
    return !1;
  }
  /**
  Create a mark decoration, which influences the styling of the
  content in its range. Nested mark decorations will cause nested
  DOM elements to be created. Nesting order is determined by
  precedence of the [facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), with
  the higher-precedence decorations creating the inner DOM nodes.
  Such elements are split on line boundaries and on the boundaries
  of lower-precedence decorations.
  */
  static mark(e) {
    return new bp(e);
  }
  /**
  Create a widget decoration, which displays a DOM element at the
  given position.
  */
  static widget(e) {
    let t = Math.max(-1e4, Math.min(1e4, e.side || 0)), n = !!e.block;
    return t += n && !e.inlineOrder ? t > 0 ? 3e8 : -4e8 : t > 0 ? 1e8 : -1e8, new us(e, t, t, n, e.widget || null, !1);
  }
  /**
  Create a replace decoration which replaces the given range with
  a widget, or simply hides it.
  */
  static replace(e) {
    let t = !!e.block, n, r;
    if (e.isBlockGap)
      n = -5e8, r = 4e8;
    else {
      let { start: s, end: o } = Ix(e, t);
      n = (s ? t ? -3e8 : -1 : 5e8) - 1, r = (o ? t ? 2e8 : 1 : -6e8) + 1;
    }
    return new us(e, n, r, t, e.widget || null, !0);
  }
  /**
  Create a line decoration, which can add DOM attributes to the
  line starting at the given position.
  */
  static line(e) {
    return new xp(e);
  }
  /**
  Build a [`DecorationSet`](https://codemirror.net/6/docs/ref/#view.DecorationSet) from the given
  decorated range or ranges. If the ranges aren't already sorted,
  pass `true` for `sort` to make the library sort them for you.
  */
  static set(e, t = !1) {
    return qe.of(e, t);
  }
  /**
  @internal
  */
  hasHeight() {
    return this.widget ? this.widget.estimatedHeight > -1 : !1;
  }
};
K.none = qe.empty;
let bp = class Vx extends K {
  constructor(e) {
    let { start: t, end: n } = Ix(e);
    super(t ? -1 : 5e8, n ? 1 : -6e8, null, e), this.tagName = e.tagName || "span", this.class = e.class || "", this.attrs = e.attributes || null;
  }
  eq(e) {
    var t, n;
    return this == e || e instanceof Vx && this.tagName == e.tagName && (this.class || ((t = this.attrs) === null || t === void 0 ? void 0 : t.class)) == (e.class || ((n = e.attrs) === null || n === void 0 ? void 0 : n.class)) && Sh(this.attrs, e.attrs, "class");
  }
  range(e, t = e) {
    if (e >= t)
      throw new RangeError("Mark decorations may not be empty");
    return super.range(e, t);
  }
};
bp.prototype.point = !1;
let xp = class Wx extends K {
  constructor(e) {
    super(-2e8, -2e8, null, e);
  }
  eq(e) {
    return e instanceof Wx && this.spec.class == e.spec.class && Sh(this.spec.attributes, e.spec.attributes);
  }
  range(e, t = e) {
    if (t != e)
      throw new RangeError("Line decoration ranges must be zero-length");
    return super.range(e, t);
  }
};
xp.prototype.mapMode = st.TrackBefore;
xp.prototype.point = !0;
let us = class zx extends K {
  constructor(e, t, n, r, s, o) {
    super(t, n, s, e), this.block = r, this.isReplace = o, this.mapMode = r ? t <= 0 ? st.TrackBefore : st.TrackAfter : st.TrackDel;
  }
  // Only relevant when this.block == true
  get type() {
    return this.startSide != this.endSide ? vt.WidgetRange : this.startSide <= 0 ? vt.WidgetBefore : vt.WidgetAfter;
  }
  get heightRelevant() {
    return this.block || !!this.widget && (this.widget.estimatedHeight >= 5 || this.widget.lineBreaks > 0);
  }
  eq(e) {
    return e instanceof zx && yE(this.widget, e.widget) && this.block == e.block && this.startSide == e.startSide && this.endSide == e.endSide;
  }
  range(e, t = e) {
    if (this.isReplace && (e > t || e == t && this.startSide > 0 && this.endSide <= 0))
      throw new RangeError("Invalid range for replacement decoration");
    if (!this.isReplace && t != e)
      throw new RangeError("Widget decorations can only have zero-length ranges");
    return super.range(e, t);
  }
};
us.prototype.point = !0;
function Ix(i, e = !1) {
  let { inclusiveStart: t, inclusiveEnd: n } = i;
  return t == null && (t = i.inclusive), n == null && (n = i.inclusive), { start: t ?? e, end: n ?? e };
}
function yE(i, e) {
  return i == e || !!(i && e && i.compare(e));
}
function Xa(i, e, t, n = 0) {
  let r = t.length - 1;
  r >= 0 && t[r] + n >= i ? t[r] = Math.max(t[r], e) : t.push(i, e);
}
let bt = class ao extends Ae {
  constructor() {
    super(...arguments), this.children = [], this.length = 0, this.prevAttrs = void 0, this.attrs = null, this.breakAfter = 0;
  }
  // Consumes source
  merge(e, t, n, r, s, o) {
    if (n) {
      if (!(n instanceof ao))
        return !1;
      this.dom || n.transferDOM(this);
    }
    return r && this.setDeco(n ? n.attrs : null), _x(this, e, t, n ? n.children.slice() : [], s, o), !0;
  }
  split(e) {
    let t = new ao();
    if (t.breakAfter = this.breakAfter, this.length == 0)
      return t;
    let { i: n, off: r } = this.childPos(e);
    r && (t.append(this.children[n].split(r), 0), this.children[n].merge(r, this.children[n].length, null, !1, 0, 0), n++);
    for (let s = n; s < this.children.length; s++)
      t.append(this.children[s], 0);
    for (; n > 0 && this.children[n - 1].length == 0; )
      this.children[--n].destroy();
    return this.children.length = n, this.markDirty(), this.length = e, t;
  }
  transferDOM(e) {
    this.dom && (this.markDirty(), e.setDOM(this.dom), e.prevAttrs = this.prevAttrs === void 0 ? this.attrs : this.prevAttrs, this.prevAttrs = void 0, this.dom = null);
  }
  setDeco(e) {
    Sh(this.attrs, e) || (this.dom && (this.prevAttrs = this.attrs, this.markDirty()), this.attrs = e);
  }
  append(e, t) {
    Zx(this, e, t);
  }
  // Only called when building a line view in ContentBuilder
  addLineDeco(e) {
    let t = e.spec.attributes, n = e.spec.class;
    t && (this.attrs = ad(t, this.attrs || {})), n && (this.attrs = ad({ class: n }, this.attrs || {}));
  }
  domAtPos(e) {
    return Bx(this, e);
  }
  reuseDOM(e) {
    e.nodeName == "DIV" && (this.setDOM(e), this.flags |= 6);
  }
  sync(e, t) {
    var n;
    this.dom ? this.flags & 4 && (Cx(this.dom), this.dom.className = "cm-line", this.prevAttrs = this.attrs ? null : void 0) : (this.setDOM(document.createElement("div")), this.dom.className = "cm-line", this.prevAttrs = this.attrs ? null : void 0), this.prevAttrs !== void 0 && (hd(this.dom, this.prevAttrs, this.attrs), this.dom.classList.add("cm-line"), this.prevAttrs = void 0), super.sync(e, t);
    let r = this.dom.lastChild;
    for (; r && Ae.get(r) instanceof fs; )
      r = r.lastChild;
    if (!r || !this.length || r.nodeName != "BR" && ((n = Ae.get(r)) === null || n === void 0 ? void 0 : n.isEditable) == !1 && (!z.ios || !this.children.some((s) => s instanceof jn))) {
      let s = document.createElement("BR");
      s.cmIgnore = !0, this.dom.appendChild(s);
    }
  }
  measureTextSize() {
    if (this.children.length == 0 || this.length > 20)
      return null;
    let e = 0, t;
    for (let n of this.children) {
      if (!(n instanceof jn) || /[^ -~]/.test(n.text))
        return null;
      let r = Do(n.dom);
      if (r.length != 1)
        return null;
      e += r[0].width, t = r[0].height;
    }
    return e ? {
      lineHeight: this.dom.getBoundingClientRect().height,
      charWidth: e / this.length,
      textHeight: t
    } : null;
  }
  coordsAt(e, t) {
    let n = Dx(this, e, t);
    if (!this.children.length && n && this.parent) {
      let { heightOracle: r } = this.parent.view.viewState, s = n.bottom - n.top;
      if (Math.abs(s - r.lineHeight) < 2 && r.textHeight < s) {
        let o = (s - r.textHeight) / 2;
        return { top: n.top + o, bottom: n.bottom - o, left: n.left, right: n.left };
      }
    }
    return n;
  }
  become(e) {
    return e instanceof ao && this.children.length == 0 && e.children.length == 0 && Sh(this.attrs, e.attrs) && this.breakAfter == e.breakAfter;
  }
  covers() {
    return !0;
  }
  static find(e, t) {
    for (let n = 0, r = 0; n < e.children.length; n++) {
      let s = e.children[n], o = r + s.length;
      if (o >= t) {
        if (s instanceof ao)
          return s;
        if (o > t)
          break;
      }
      r = o + s.breakAfter;
    }
    return null;
  }
}, Qo = class La extends Ae {
  constructor(e, t, n) {
    super(), this.widget = e, this.length = t, this.deco = n, this.breakAfter = 0, this.prevWidget = null;
  }
  merge(e, t, n, r, s, o) {
    return n && (!(n instanceof La) || !this.widget.compare(n.widget) || e > 0 && s <= 0 || t < this.length && o <= 0) ? !1 : (this.length = e + (n ? n.length : 0) + (this.length - t), !0);
  }
  domAtPos(e) {
    return e == 0 ? Zt.before(this.dom) : Zt.after(this.dom, e == this.length);
  }
  split(e) {
    let t = this.length - e;
    this.length = e;
    let n = new La(this.widget, t, this.deco);
    return n.breakAfter = this.breakAfter, n;
  }
  get children() {
    return yp;
  }
  sync(e) {
    (!this.dom || !this.widget.updateDOM(this.dom, e)) && (this.dom && this.prevWidget && this.prevWidget.destroy(this.dom), this.prevWidget = null, this.setDOM(this.widget.toDOM(e)), this.widget.editable || (this.dom.contentEditable = "false"));
  }
  get overrideDOMText() {
    return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : me.empty;
  }
  domBoundsAround() {
    return null;
  }
  become(e) {
    return e instanceof La && e.widget.constructor == this.widget.constructor ? (e.widget.compare(this.widget) || this.markDirty(!0), this.dom && !this.prevWidget && (this.prevWidget = this.widget), this.widget = e.widget, this.length = e.length, this.deco = e.deco, this.breakAfter = e.breakAfter, !0) : !1;
  }
  ignoreMutation() {
    return !0;
  }
  ignoreEvent(e) {
    return this.widget.ignoreEvent(e);
  }
  get isEditable() {
    return !1;
  }
  get isWidget() {
    return !0;
  }
  coordsAt(e, t) {
    let n = this.widget.coordsAt(this.dom, e, t);
    return n || (this.widget instanceof cd ? null : dc(this.dom.getBoundingClientRect(), this.length ? e == 0 : t <= 0));
  }
  destroy() {
    super.destroy(), this.dom && this.widget.destroy(this.dom);
  }
  covers(e) {
    let { startSide: t, endSide: n } = this.deco;
    return t == n ? !1 : e < 0 ? t < 0 : n > 0;
  }
}, cd = class extends wn {
  constructor(e) {
    super(), this.height = e;
  }
  toDOM() {
    let e = document.createElement("div");
    return e.className = "cm-gap", this.updateDOM(e), e;
  }
  eq(e) {
    return e.height == this.height;
  }
  updateDOM(e) {
    return e.style.height = this.height + "px", !0;
  }
  get editable() {
    return !0;
  }
  get estimatedHeight() {
    return this.height;
  }
  ignoreEvent() {
    return !1;
  }
}, rf = class Nx {
  constructor(e, t, n, r) {
    this.doc = e, this.pos = t, this.end = n, this.disallowBlockEffectsFor = r, this.content = [], this.curLine = null, this.breakAtStart = 0, this.pendingBuffer = 0, this.bufferMarks = [], this.atCursorPos = !0, this.openStart = -1, this.openEnd = -1, this.text = "", this.textOff = 0, this.cursor = e.iter(), this.skip = t;
  }
  posCovered() {
    if (this.content.length == 0)
      return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;
    let e = this.content[this.content.length - 1];
    return !(e.breakAfter || e instanceof Qo && e.deco.endSide < 0);
  }
  getLine() {
    return this.curLine || (this.content.push(this.curLine = new bt()), this.atCursorPos = !0), this.curLine;
  }
  flushBuffer(e = this.bufferMarks) {
    this.pendingBuffer && (this.curLine.append(zl(new od(-1), e), e.length), this.pendingBuffer = 0);
  }
  addBlockWidget(e) {
    this.flushBuffer(), this.curLine = null, this.content.push(e);
  }
  finish(e) {
    this.pendingBuffer && e <= this.bufferMarks.length ? this.flushBuffer() : this.pendingBuffer = 0, !this.posCovered() && !(e && this.content.length && this.content[this.content.length - 1] instanceof Qo) && this.getLine();
  }
  buildText(e, t, n) {
    for (; e > 0; ) {
      if (this.textOff == this.text.length) {
        let { value: s, lineBreak: o, done: l } = this.cursor.next(this.skip);
        if (this.skip = 0, l)
          throw new Error("Ran out of text content when drawing inline views");
        if (o) {
          this.posCovered() || this.getLine(), this.content.length ? this.content[this.content.length - 1].breakAfter = 1 : this.breakAtStart = 1, this.flushBuffer(), this.curLine = null, this.atCursorPos = !0, e--;
          continue;
        } else
          this.text = s, this.textOff = 0;
      }
      let r = Math.min(
        this.text.length - this.textOff,
        e,
        512
        /* T.Chunk */
      );
      this.flushBuffer(t.slice(t.length - n)), this.getLine().append(zl(new jn(this.text.slice(this.textOff, this.textOff + r)), t), n), this.atCursorPos = !0, this.textOff += r, e -= r, n = 0;
    }
  }
  span(e, t, n, r) {
    this.buildText(t - e, n, r), this.pos = t, this.openStart < 0 && (this.openStart = r);
  }
  point(e, t, n, r, s, o) {
    if (this.disallowBlockEffectsFor[o] && n instanceof us) {
      if (n.block)
        throw new RangeError("Block decorations may not be specified via plugins");
      if (t > this.doc.lineAt(this.pos).to)
        throw new RangeError("Decorations that replace line breaks may not be specified via plugins");
    }
    let l = t - e;
    if (n instanceof us)
      if (n.block)
        n.startSide > 0 && !this.posCovered() && this.getLine(), this.addBlockWidget(new Qo(n.widget || ds.block, l, n));
      else {
        let a = Sp.create(n.widget || ds.inline, l, l ? 0 : n.startSide), h = this.atCursorPos && !a.isEditable && s <= r.length && (e < t || n.startSide > 0), c = !a.isEditable && (e < t || s > r.length || n.startSide <= 0), f = this.getLine();
        this.pendingBuffer == 2 && !h && !a.isEditable && (this.pendingBuffer = 0), this.flushBuffer(r), h && (f.append(zl(new od(1), r), s), s = r.length + Math.max(0, s - r.length)), f.append(zl(a, r), s), this.atCursorPos = c, this.pendingBuffer = c ? e < t || s > r.length ? 1 : 2 : 0, this.pendingBuffer && (this.bufferMarks = r.slice());
      }
    else this.doc.lineAt(this.pos).from == this.pos && this.getLine().addLineDeco(n);
    l && (this.textOff + l <= this.text.length ? this.textOff += l : (this.skip += l - (this.text.length - this.textOff), this.text = "", this.textOff = 0), this.pos = t), this.openStart < 0 && (this.openStart = s);
  }
  static build(e, t, n, r, s) {
    let o = new Nx(e, t, n, s);
    return o.openEnd = qe.spans(r, t, n, o), o.openStart < 0 && (o.openStart = o.openEnd), o.finish(o.openEnd), o;
  }
};
function zl(i, e) {
  for (let t of e)
    i = new fs(t, [i], i.length);
  return i;
}
let ds = class extends wn {
  constructor(e) {
    super(), this.tag = e;
  }
  eq(e) {
    return e.tag == this.tag;
  }
  toDOM() {
    return document.createElement(this.tag);
  }
  updateDOM(e) {
    return e.nodeName.toLowerCase() == this.tag;
  }
  get isHidden() {
    return !0;
  }
};
ds.inline = /* @__PURE__ */ new ds("span");
ds.block = /* @__PURE__ */ new ds("div");
var Ce = /* @__PURE__ */ function(i) {
  return i[i.LTR = 0] = "LTR", i[i.RTL = 1] = "RTL", i;
}(Ce || (Ce = {}));
const $r = Ce.LTR, wp = Ce.RTL;
function jx(i) {
  let e = [];
  for (let t = 0; t < i.length; t++)
    e.push(1 << +i[t]);
  return e;
}
const SE = /* @__PURE__ */ jx("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008"), bE = /* @__PURE__ */ jx("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333"), fd = /* @__PURE__ */ Object.create(null), $i = [];
for (let i of ["()", "[]", "{}"]) {
  let e = /* @__PURE__ */ i.charCodeAt(0), t = /* @__PURE__ */ i.charCodeAt(1);
  fd[e] = t, fd[t] = -e;
}
function Ux(i) {
  return i <= 247 ? SE[i] : 1424 <= i && i <= 1524 ? 2 : 1536 <= i && i <= 1785 ? bE[i - 1536] : 1774 <= i && i <= 2220 ? 4 : 8192 <= i && i <= 8204 ? 256 : 64336 <= i && i <= 65023 ? 4 : 1;
}
const xE = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac\ufb50-\ufdff]/;
let qn = class {
  /**
  The direction of this span.
  */
  get dir() {
    return this.level % 2 ? wp : $r;
  }
  /**
  @internal
  */
  constructor(e, t, n) {
    this.from = e, this.to = t, this.level = n;
  }
  /**
  @internal
  */
  side(e, t) {
    return this.dir == t == e ? this.to : this.from;
  }
  /**
  @internal
  */
  forward(e, t) {
    return e == (this.dir == t);
  }
  /**
  @internal
  */
  static find(e, t, n, r) {
    let s = -1;
    for (let o = 0; o < e.length; o++) {
      let l = e[o];
      if (l.from <= t && l.to >= t) {
        if (l.level == n)
          return o;
        (s < 0 || (r != 0 ? r < 0 ? l.from < t : l.to > t : e[s].level > l.level)) && (s = o);
      }
    }
    if (s < 0)
      throw new RangeError("Index out of range");
    return s;
  }
};
function Yx(i, e) {
  if (i.length != e.length)
    return !1;
  for (let t = 0; t < i.length; t++) {
    let n = i[t], r = e[t];
    if (n.from != r.from || n.to != r.to || n.direction != r.direction || !Yx(n.inner, r.inner))
      return !1;
  }
  return !0;
}
const ke = [];
function wE(i, e, t, n, r) {
  for (let s = 0; s <= n.length; s++) {
    let o = s ? n[s - 1].to : e, l = s < n.length ? n[s].from : t, a = s ? 256 : r;
    for (let h = o, c = a, f = a; h < l; h++) {
      let u = Ux(i.charCodeAt(h));
      u == 512 ? u = c : u == 8 && f == 4 && (u = 16), ke[h] = u == 4 ? 2 : u, u & 7 && (f = u), c = u;
    }
    for (let h = o, c = a, f = a; h < l; h++) {
      let u = ke[h];
      if (u == 128)
        h < l - 1 && c == ke[h + 1] && c & 24 ? u = ke[h] = c : ke[h] = 256;
      else if (u == 64) {
        let d = h + 1;
        for (; d < l && ke[d] == 64; )
          d++;
        let O = h && c == 8 || d < t && ke[d] == 8 ? f == 1 ? 1 : 8 : 256;
        for (let p = h; p < d; p++)
          ke[p] = O;
        h = d - 1;
      } else u == 8 && f == 1 && (ke[h] = 1);
      c = u, u & 7 && (f = u);
    }
  }
}
function kE(i, e, t, n, r) {
  let s = r == 1 ? 2 : 1;
  for (let o = 0, l = 0, a = 0; o <= n.length; o++) {
    let h = o ? n[o - 1].to : e, c = o < n.length ? n[o].from : t;
    for (let f = h, u, d, O; f < c; f++)
      if (d = fd[u = i.charCodeAt(f)])
        if (d < 0) {
          for (let p = l - 3; p >= 0; p -= 3)
            if ($i[p + 1] == -d) {
              let m = $i[p + 2], g = m & 2 ? r : m & 4 ? m & 1 ? s : r : 0;
              g && (ke[f] = ke[$i[p]] = g), l = p;
              break;
            }
        } else {
          if ($i.length == 189)
            break;
          $i[l++] = f, $i[l++] = u, $i[l++] = a;
        }
      else if ((O = ke[f]) == 2 || O == 1) {
        let p = O == r;
        a = p ? 0 : 1;
        for (let m = l - 3; m >= 0; m -= 3) {
          let g = $i[m + 2];
          if (g & 2)
            break;
          if (p)
            $i[m + 2] |= 2;
          else {
            if (g & 4)
              break;
            $i[m + 2] |= 4;
          }
        }
      }
  }
}
function vE(i, e, t, n) {
  for (let r = 0, s = n; r <= t.length; r++) {
    let o = r ? t[r - 1].to : i, l = r < t.length ? t[r].from : e;
    for (let a = o; a < l; ) {
      let h = ke[a];
      if (h == 256) {
        let c = a + 1;
        for (; ; )
          if (c == l) {
            if (r == t.length)
              break;
            c = t[r++].to, l = r < t.length ? t[r].from : e;
          } else if (ke[c] == 256)
            c++;
          else
            break;
        let f = s == 1, u = (c < e ? ke[c] : n) == 1, d = f == u ? f ? 1 : 2 : n;
        for (let O = c, p = r, m = p ? t[p - 1].to : i; O > a; )
          O == m && (O = t[--p].from, m = p ? t[p - 1].to : i), ke[--O] = d;
        a = c;
      } else
        s = h, a++;
    }
  }
}
function ud(i, e, t, n, r, s, o) {
  let l = n % 2 ? 2 : 1;
  if (n % 2 == r % 2)
    for (let a = e, h = 0; a < t; ) {
      let c = !0, f = !1;
      if (h == s.length || a < s[h].from) {
        let p = ke[a];
        p != l && (c = !1, f = p == 16);
      }
      let u = !c && l == 1 ? [] : null, d = c ? n : n + 1, O = a;
      e: for (; ; )
        if (h < s.length && O == s[h].from) {
          if (f)
            break e;
          let p = s[h];
          if (!c)
            for (let m = p.to, g = h + 1; ; ) {
              if (m == t)
                break e;
              if (g < s.length && s[g].from == m)
                m = s[g++].to;
              else {
                if (ke[m] == l)
                  break e;
                break;
              }
            }
          if (h++, u)
            u.push(p);
          else {
            p.from > a && o.push(new qn(a, p.from, d));
            let m = p.direction == $r != !(d % 2);
            dd(i, m ? n + 1 : n, r, p.inner, p.from, p.to, o), a = p.to;
          }
          O = p.to;
        } else {
          if (O == t || (c ? ke[O] != l : ke[O] == l))
            break;
          O++;
        }
      u ? ud(i, a, O, n + 1, r, u, o) : a < O && o.push(new qn(a, O, d)), a = O;
    }
  else
    for (let a = t, h = s.length; a > e; ) {
      let c = !0, f = !1;
      if (!h || a > s[h - 1].to) {
        let p = ke[a - 1];
        p != l && (c = !1, f = p == 16);
      }
      let u = !c && l == 1 ? [] : null, d = c ? n : n + 1, O = a;
      e: for (; ; )
        if (h && O == s[h - 1].to) {
          if (f)
            break e;
          let p = s[--h];
          if (!c)
            for (let m = p.from, g = h; ; ) {
              if (m == e)
                break e;
              if (g && s[g - 1].to == m)
                m = s[--g].from;
              else {
                if (ke[m - 1] == l)
                  break e;
                break;
              }
            }
          if (u)
            u.push(p);
          else {
            p.to < a && o.push(new qn(p.to, a, d));
            let m = p.direction == $r != !(d % 2);
            dd(i, m ? n + 1 : n, r, p.inner, p.from, p.to, o), a = p.from;
          }
          O = p.from;
        } else {
          if (O == e || (c ? ke[O - 1] != l : ke[O - 1] == l))
            break;
          O--;
        }
      u ? ud(i, O, a, n + 1, r, u, o) : O < a && o.push(new qn(O, a, d)), a = O;
    }
}
function dd(i, e, t, n, r, s, o) {
  let l = e % 2 ? 2 : 1;
  wE(i, r, s, n, l), kE(i, r, s, n, l), vE(r, s, n, l), ud(i, r, s, e, t, n, o);
}
function QE(i, e, t) {
  if (!i)
    return [new qn(0, 0, e == wp ? 1 : 0)];
  if (e == $r && !t.length && !xE.test(i))
    return Gx(i.length);
  if (t.length)
    for (; i.length > ke.length; )
      ke[ke.length] = 256;
  let n = [], r = e == $r ? 0 : 1;
  return dd(i, r, r, t, 0, i.length, n), n;
}
function Gx(i) {
  return [new qn(0, i, 0)];
}
let Fx = "";
function PE(i, e, t, n, r) {
  var s;
  let o = n.head - i.from, l = qn.find(e, o, (s = n.bidiLevel) !== null && s !== void 0 ? s : -1, n.assoc), a = e[l], h = a.side(r, t);
  if (o == h) {
    let u = l += r ? 1 : -1;
    if (u < 0 || u >= e.length)
      return null;
    a = e[l = u], o = a.side(!r, t), h = a.side(r, t);
  }
  let c = ot(i.text, o, a.forward(r, t));
  (c < a.from || c > a.to) && (c = h), Fx = i.text.slice(Math.min(o, c), Math.max(o, c));
  let f = l == (r ? e.length - 1 : 0) ? null : e[l + (r ? 1 : -1)];
  return f && c == h && f.level + (r ? 0 : 1) < a.level ? C.cursor(f.side(!r, t) + i.from, f.forward(r, t) ? 1 : -1, f.level) : C.cursor(c + i.from, a.forward(r, t) ? -1 : 1, a.level);
}
function $E(i, e, t) {
  for (let n = e; n < t; n++) {
    let r = Ux(i.charCodeAt(n));
    if (r == 1)
      return $r;
    if (r == 2 || r == 4)
      return wp;
  }
  return $r;
}
const Hx = /* @__PURE__ */ I.define(), Kx = /* @__PURE__ */ I.define(), Jx = /* @__PURE__ */ I.define(), ew = /* @__PURE__ */ I.define(), Od = /* @__PURE__ */ I.define(), tw = /* @__PURE__ */ I.define(), iw = /* @__PURE__ */ I.define(), kp = /* @__PURE__ */ I.define(), vp = /* @__PURE__ */ I.define(), nw = /* @__PURE__ */ I.define({
  combine: (i) => i.some((e) => e)
}), rw = /* @__PURE__ */ I.define({
  combine: (i) => i.some((e) => e)
}), sw = /* @__PURE__ */ I.define();
let sf = class pd {
  constructor(e, t = "nearest", n = "nearest", r = 5, s = 5, o = !1) {
    this.range = e, this.y = t, this.x = n, this.yMargin = r, this.xMargin = s, this.isSnapshot = o;
  }
  map(e) {
    return e.empty ? this : new pd(this.range.map(e), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);
  }
  clip(e) {
    return this.range.to <= e.doc.length ? this : new pd(C.cursor(e.doc.length), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);
  }
};
const Il = /* @__PURE__ */ le.define({ map: (i, e) => i.map(e) }), ow = /* @__PURE__ */ le.define();
function Ct(i, e, t) {
  let n = i.facet(ew);
  n.length ? n[0](e) : window.onerror && window.onerror(String(e), t, void 0, void 0, e) || (t ? console.error(t + ":", e) : console.error(e));
}
const fn = /* @__PURE__ */ I.define({ combine: (i) => i.length ? i[0] : !0 });
let TE = 0;
const Ir = /* @__PURE__ */ I.define({
  combine(i) {
    return i.filter((e, t) => {
      for (let n = 0; n < t; n++)
        if (i[n].plugin == e.plugin)
          return !1;
      return !0;
    });
  }
});
let at = class md {
  constructor(e, t, n, r, s) {
    this.id = e, this.create = t, this.domEventHandlers = n, this.domEventObservers = r, this.baseExtensions = s(this), this.extension = this.baseExtensions.concat(Ir.of({ plugin: this, arg: void 0 }));
  }
  /**
  Create an extension for this plugin with the given argument.
  */
  of(e) {
    return this.baseExtensions.concat(Ir.of({ plugin: this, arg: e }));
  }
  /**
  Define a plugin from a constructor function that creates the
  plugin's value, given an editor view.
  */
  static define(e, t) {
    const { eventHandlers: n, eventObservers: r, provide: s, decorations: o } = t || {};
    return new md(TE++, e, n, r, (l) => {
      let a = [];
      return o && a.push(Vo.of((h) => {
        let c = h.plugin(l);
        return c ? o(c) : K.none;
      })), s && a.push(s(l)), a;
    });
  }
  /**
  Create a plugin for a class whose constructor takes a single
  editor view as argument.
  */
  static fromClass(e, t) {
    return md.define((n, r) => new e(n, r), t);
  }
}, of = class {
  constructor(e) {
    this.spec = e, this.mustUpdate = null, this.value = null;
  }
  get plugin() {
    return this.spec && this.spec.plugin;
  }
  update(e) {
    if (this.value) {
      if (this.mustUpdate) {
        let t = this.mustUpdate;
        if (this.mustUpdate = null, this.value.update)
          try {
            this.value.update(t);
          } catch (n) {
            if (Ct(t.state, n, "CodeMirror plugin crashed"), this.value.destroy)
              try {
                this.value.destroy();
              } catch {
              }
            this.deactivate();
          }
      }
    } else if (this.spec)
      try {
        this.value = this.spec.plugin.create(e, this.spec.arg);
      } catch (t) {
        Ct(e.state, t, "CodeMirror plugin crashed"), this.deactivate();
      }
    return this;
  }
  destroy(e) {
    var t;
    if (!((t = this.value) === null || t === void 0) && t.destroy)
      try {
        this.value.destroy();
      } catch (n) {
        Ct(e.state, n, "CodeMirror plugin crashed");
      }
  }
  deactivate() {
    this.spec = this.value = null;
  }
};
const lw = /* @__PURE__ */ I.define(), Qp = /* @__PURE__ */ I.define(), Vo = /* @__PURE__ */ I.define(), aw = /* @__PURE__ */ I.define(), Pp = /* @__PURE__ */ I.define(), hw = /* @__PURE__ */ I.define();
function Lg(i, e) {
  let t = i.state.facet(hw);
  if (!t.length)
    return t;
  let n = t.map((s) => s instanceof Function ? s(i) : s), r = [];
  return qe.spans(n, e.from, e.to, {
    point() {
    },
    span(s, o, l, a) {
      let h = s - e.from, c = o - e.from, f = r;
      for (let u = l.length - 1; u >= 0; u--, a--) {
        let d = l[u].spec.bidiIsolate, O;
        if (d == null && (d = $E(e.text, h, c)), a > 0 && f.length && (O = f[f.length - 1]).to == h && O.direction == d)
          O.to = c, f = O.inner;
        else {
          let p = { from: h, to: c, direction: d, inner: [] };
          f.push(p), f = p.inner;
        }
      }
    }
  }), r;
}
const cw = /* @__PURE__ */ I.define();
function $p(i) {
  let e = 0, t = 0, n = 0, r = 0;
  for (let s of i.state.facet(cw)) {
    let o = s(i);
    o && (o.left != null && (e = Math.max(e, o.left)), o.right != null && (t = Math.max(t, o.right)), o.top != null && (n = Math.max(n, o.top)), o.bottom != null && (r = Math.max(r, o.bottom)));
  }
  return { left: e, right: t, top: n, bottom: r };
}
const ho = /* @__PURE__ */ I.define();
let Dn = class Ba {
  constructor(e, t, n, r) {
    this.fromA = e, this.toA = t, this.fromB = n, this.toB = r;
  }
  join(e) {
    return new Ba(Math.min(this.fromA, e.fromA), Math.max(this.toA, e.toA), Math.min(this.fromB, e.fromB), Math.max(this.toB, e.toB));
  }
  addToSet(e) {
    let t = e.length, n = this;
    for (; t > 0; t--) {
      let r = e[t - 1];
      if (!(r.fromA > n.toA)) {
        if (r.toA < n.fromA)
          break;
        n = n.join(r), e.splice(t - 1, 1);
      }
    }
    return e.splice(t, 0, n), e;
  }
  static extendWithRanges(e, t) {
    if (t.length == 0)
      return e;
    let n = [];
    for (let r = 0, s = 0, o = 0, l = 0; ; r++) {
      let a = r == e.length ? null : e[r], h = o - l, c = a ? a.fromB : 1e9;
      for (; s < t.length && t[s] < c; ) {
        let f = t[s], u = t[s + 1], d = Math.max(l, f), O = Math.min(c, u);
        if (d <= O && new Ba(d + h, O + h, d, O).addToSet(n), u > c)
          break;
        s += 2;
      }
      if (!a)
        return n;
      new Ba(a.fromA, a.toA, a.fromB, a.toB).addToSet(n), o = a.toA, l = a.toB;
    }
  }
}, Bg = class fw {
  constructor(e, t, n) {
    this.view = e, this.state = t, this.transactions = n, this.flags = 0, this.startState = e.state, this.changes = mi.empty(this.startState.doc.length);
    for (let s of n)
      this.changes = this.changes.compose(s.changes);
    let r = [];
    this.changes.iterChangedRanges((s, o, l, a) => r.push(new Dn(s, o, l, a))), this.changedRanges = r;
  }
  /**
  @internal
  */
  static create(e, t, n) {
    return new fw(e, t, n);
  }
  /**
  Tells you whether the [viewport](https://codemirror.net/6/docs/ref/#view.EditorView.viewport) or
  [visible ranges](https://codemirror.net/6/docs/ref/#view.EditorView.visibleRanges) changed in this
  update.
  */
  get viewportChanged() {
    return (this.flags & 4) > 0;
  }
  /**
  Returns true when
  [`viewportChanged`](https://codemirror.net/6/docs/ref/#view.ViewUpdate.viewportChanged) is true
  and the viewport change is not just the result of mapping it in
  response to document changes.
  */
  get viewportMoved() {
    return (this.flags & 8) > 0;
  }
  /**
  Indicates whether the height of a block element in the editor
  changed in this update.
  */
  get heightChanged() {
    return (this.flags & 2) > 0;
  }
  /**
  Returns true when the document was modified or the size of the
  editor, or elements within the editor, changed.
  */
  get geometryChanged() {
    return this.docChanged || (this.flags & 18) > 0;
  }
  /**
  True when this update indicates a focus change.
  */
  get focusChanged() {
    return (this.flags & 1) > 0;
  }
  /**
  Whether the document changed in this update.
  */
  get docChanged() {
    return !this.changes.empty;
  }
  /**
  Whether the selection was explicitly set in this update.
  */
  get selectionSet() {
    return this.transactions.some((e) => e.selection);
  }
  /**
  @internal
  */
  get empty() {
    return this.flags == 0 && this.transactions.length == 0;
  }
}, Zg = class extends Ae {
  get length() {
    return this.view.state.doc.length;
  }
  constructor(e) {
    super(), this.view = e, this.decorations = [], this.dynamicDecorationMap = [!1], this.domChanged = null, this.hasComposition = null, this.markedForComposition = /* @__PURE__ */ new Set(), this.editContextFormatting = K.none, this.lastCompositionAfterCursor = !1, this.minWidth = 0, this.minWidthFrom = 0, this.minWidthTo = 0, this.impreciseAnchor = null, this.impreciseHead = null, this.forceSelection = !1, this.lastUpdate = Date.now(), this.setDOM(e.contentDOM), this.children = [new bt()], this.children[0].setParent(this), this.updateDeco(), this.updateInner([new Dn(0, 0, 0, e.state.doc.length)], 0, null);
  }
  // Update the document view to a given state.
  update(e) {
    var t;
    let n = e.changedRanges;
    this.minWidth > 0 && n.length && (n.every(({ fromA: h, toA: c }) => c < this.minWidthFrom || h > this.minWidthTo) ? (this.minWidthFrom = e.changes.mapPos(this.minWidthFrom, 1), this.minWidthTo = e.changes.mapPos(this.minWidthTo, 1)) : this.minWidth = this.minWidthFrom = this.minWidthTo = 0), this.updateEditContextFormatting(e);
    let r = -1;
    this.view.inputState.composing >= 0 && !this.view.observer.editContext && (!((t = this.domChanged) === null || t === void 0) && t.newSel ? r = this.domChanged.newSel.head : !_E(e.changes, this.hasComposition) && !e.selectionSet && (r = e.state.selection.main.head));
    let s = r > -1 ? RE(this.view, e.changes, r) : null;
    if (this.domChanged = null, this.hasComposition) {
      this.markedForComposition.clear();
      let { from: h, to: c } = this.hasComposition;
      n = new Dn(h, c, e.changes.mapPos(h, -1), e.changes.mapPos(c, 1)).addToSet(n.slice());
    }
    this.hasComposition = s ? { from: s.range.fromB, to: s.range.toB } : null, (z.ie || z.chrome) && !s && e && e.state.doc.lines != e.startState.doc.lines && (this.forceSelection = !0);
    let o = this.decorations, l = this.updateDeco(), a = ME(o, l, e.changes);
    return n = Dn.extendWithRanges(n, a), !(this.flags & 7) && n.length == 0 ? !1 : (this.updateInner(n, e.startState.doc.length, s), e.transactions.length && (this.lastUpdate = Date.now()), !0);
  }
  // Used by update and the constructor do perform the actual DOM
  // update
  updateInner(e, t, n) {
    this.view.viewState.mustMeasureContent = !0, this.updateChildren(e, t, n);
    let { observer: r } = this.view;
    r.ignore(() => {
      this.dom.style.height = this.view.viewState.contentHeight / this.view.scaleY + "px", this.dom.style.flexBasis = this.minWidth ? this.minWidth + "px" : "";
      let o = z.chrome || z.ios ? { node: r.selectionRange.focusNode, written: !1 } : void 0;
      this.sync(this.view, o), this.flags &= -8, o && (o.written || r.selectionRange.focusNode != o.node) && (this.forceSelection = !0), this.dom.style.height = "";
    }), this.markedForComposition.forEach(
      (o) => o.flags &= -9
      /* ViewFlag.Composition */
    );
    let s = [];
    if (this.view.viewport.from || this.view.viewport.to < this.view.state.doc.length)
      for (let o of this.children)
        o instanceof Qo && o.widget instanceof cd && s.push(o.dom);
    r.updateGaps(s);
  }
  updateChildren(e, t, n) {
    let r = n ? n.range.addToSet(e.slice()) : e, s = this.childCursor(t);
    for (let o = r.length - 1; ; o--) {
      let l = o >= 0 ? r[o] : null;
      if (!l)
        break;
      let { fromA: a, toA: h, fromB: c, toB: f } = l, u, d, O, p;
      if (n && n.range.fromB < f && n.range.toB > c) {
        let k = rf.build(this.view.state.doc, c, n.range.fromB, this.decorations, this.dynamicDecorationMap), w = rf.build(this.view.state.doc, n.range.toB, f, this.decorations, this.dynamicDecorationMap);
        d = k.breakAtStart, O = k.openStart, p = w.openEnd;
        let b = this.compositionView(n);
        w.breakAtStart ? b.breakAfter = 1 : w.content.length && b.merge(b.length, b.length, w.content[0], !1, w.openStart, 0) && (b.breakAfter = w.content[0].breakAfter, w.content.shift()), k.content.length && b.merge(0, 0, k.content[k.content.length - 1], !0, 0, k.openEnd) && k.content.pop(), u = k.content.concat(b).concat(w.content);
      } else
        ({ content: u, breakAtStart: d, openStart: O, openEnd: p } = rf.build(this.view.state.doc, c, f, this.decorations, this.dynamicDecorationMap));
      let { i: m, off: g } = s.findPos(h, 1), { i: S, off: x } = s.findPos(a, -1);
      qx(this, S, x, m, g, u, d, O, p);
    }
    n && this.fixCompositionDOM(n);
  }
  updateEditContextFormatting(e) {
    this.editContextFormatting = this.editContextFormatting.map(e.changes);
    for (let t of e.transactions)
      for (let n of t.effects)
        n.is(ow) && (this.editContextFormatting = n.value);
  }
  compositionView(e) {
    let t = new jn(e.text.nodeValue);
    t.flags |= 8;
    for (let { deco: r } of e.marks)
      t = new fs(r, [t], t.length);
    let n = new bt();
    return n.append(t, 0), n;
  }
  fixCompositionDOM(e) {
    let t = (s, o) => {
      o.flags |= 8 | (o.children.some(
        (a) => a.flags & 7
        /* ViewFlag.Dirty */
      ) ? 1 : 0), this.markedForComposition.add(o);
      let l = Ae.get(s);
      l && l != o && (l.dom = null), o.setDOM(s);
    }, n = this.childPos(e.range.fromB, 1), r = this.children[n.i];
    t(e.line, r);
    for (let s = e.marks.length - 1; s >= -1; s--)
      n = r.childPos(n.off, 1), r = r.children[n.i], t(s >= 0 ? e.marks[s].node : e.text, r);
  }
  // Sync the DOM selection to this.state.selection
  updateSelection(e = !1, t = !1) {
    (e || !this.view.observer.selectionRange.focusNode) && this.view.observer.readSelectionRange();
    let n = this.view.root.activeElement, r = n == this.dom, s = !r && !(this.view.state.facet(fn) || this.dom.tabIndex > -1) && _a(this.dom, this.view.observer.selectionRange) && !(n && this.dom.contains(n));
    if (!(r || t || s))
      return;
    let o = this.forceSelection;
    this.forceSelection = !1;
    let l = this.view.state.selection.main, a = this.moveToLine(this.domAtPos(l.anchor)), h = l.empty ? a : this.moveToLine(this.domAtPos(l.head));
    if (z.gecko && l.empty && !this.hasComposition && CE(a)) {
      let f = document.createTextNode("");
      this.view.observer.ignore(() => a.node.insertBefore(f, a.node.childNodes[a.offset] || null)), a = h = new Zt(f, 0), o = !0;
    }
    let c = this.view.observer.selectionRange;
    (o || !c.focusNode || (!vo(a.node, a.offset, c.anchorNode, c.anchorOffset) || !vo(h.node, h.offset, c.focusNode, c.focusOffset)) && !this.suppressWidgetCursorChange(c, l)) && (this.view.observer.ignore(() => {
      z.android && z.chrome && this.dom.contains(c.focusNode) && qE(c.focusNode, this.dom) && (this.dom.blur(), this.dom.focus({ preventScroll: !0 }));
      let f = Zo(this.view.root);
      if (f) if (l.empty) {
        if (z.gecko) {
          let u = AE(a.node, a.offset);
          if (u && u != 3) {
            let d = (u == 1 ? Ax : Ex)(a.node, a.offset);
            d && (a = new Zt(d.node, d.offset));
          }
        }
        f.collapse(a.node, a.offset), l.bidiLevel != null && f.caretBidiLevel !== void 0 && (f.caretBidiLevel = l.bidiLevel);
      } else if (f.extend) {
        f.collapse(a.node, a.offset);
        try {
          f.extend(h.node, h.offset);
        } catch {
        }
      } else {
        let u = document.createRange();
        l.anchor > l.head && ([a, h] = [h, a]), u.setEnd(h.node, h.offset), u.setStart(a.node, a.offset), f.removeAllRanges(), f.addRange(u);
      }
      s && this.view.root.activeElement == this.dom && (this.dom.blur(), n && n.focus());
    }), this.view.observer.setSelectionRange(a, h)), this.impreciseAnchor = a.precise ? null : new Zt(c.anchorNode, c.anchorOffset), this.impreciseHead = h.precise ? null : new Zt(c.focusNode, c.focusOffset);
  }
  // If a zero-length widget is inserted next to the cursor during
  // composition, avoid moving it across it and disrupting the
  // composition.
  suppressWidgetCursorChange(e, t) {
    return this.hasComposition && t.empty && vo(e.focusNode, e.focusOffset, e.anchorNode, e.anchorOffset) && this.posFromDOM(e.focusNode, e.focusOffset) == t.head;
  }
  enforceCursorAssoc() {
    if (this.hasComposition)
      return;
    let { view: e } = this, t = e.state.selection.main, n = Zo(e.root), { anchorNode: r, anchorOffset: s } = e.observer.selectionRange;
    if (!n || !t.empty || !t.assoc || !n.modify)
      return;
    let o = bt.find(this, t.head);
    if (!o)
      return;
    let l = o.posAtStart;
    if (t.head == l || t.head == l + o.length)
      return;
    let a = this.coordsAt(t.head, -1), h = this.coordsAt(t.head, 1);
    if (!a || !h || a.bottom > h.top)
      return;
    let c = this.domAtPos(t.head + t.assoc);
    n.collapse(c.node, c.offset), n.modify("move", t.assoc < 0 ? "forward" : "backward", "lineboundary"), e.observer.readSelectionRange();
    let f = e.observer.selectionRange;
    e.docView.posFromDOM(f.anchorNode, f.anchorOffset) != t.from && n.collapse(r, s);
  }
  // If a position is in/near a block widget, move it to a nearby text
  // line, since we don't want the cursor inside a block widget.
  moveToLine(e) {
    let t = this.dom, n;
    if (e.node != t)
      return e;
    for (let r = e.offset; !n && r < t.childNodes.length; r++) {
      let s = Ae.get(t.childNodes[r]);
      s instanceof bt && (n = s.domAtPos(0));
    }
    for (let r = e.offset - 1; !n && r >= 0; r--) {
      let s = Ae.get(t.childNodes[r]);
      s instanceof bt && (n = s.domAtPos(s.length));
    }
    return n ? new Zt(n.node, n.offset, !0) : e;
  }
  nearest(e) {
    for (let t = e; t; ) {
      let n = Ae.get(t);
      if (n && n.rootView == this)
        return n;
      t = t.parentNode;
    }
    return null;
  }
  posFromDOM(e, t) {
    let n = this.nearest(e);
    if (!n)
      throw new RangeError("Trying to find position for a DOM position outside of the document");
    return n.localPosFromDOM(e, t) + n.posAtStart;
  }
  domAtPos(e) {
    let { i: t, off: n } = this.childCursor().findPos(e, -1);
    for (; t < this.children.length - 1; ) {
      let r = this.children[t];
      if (n < r.length || r instanceof bt)
        break;
      t++, n = 0;
    }
    return this.children[t].domAtPos(n);
  }
  coordsAt(e, t) {
    let n = null, r = 0;
    for (let s = this.length, o = this.children.length - 1; o >= 0; o--) {
      let l = this.children[o], a = s - l.breakAfter, h = a - l.length;
      if (a < e)
        break;
      if (h <= e && (h < e || l.covers(-1)) && (a > e || l.covers(1)) && (!n || l instanceof bt && !(n instanceof bt && t >= 0)))
        n = l, r = h;
      else if (n && h == e && a == e && l instanceof Qo && Math.abs(t) < 2) {
        if (l.deco.startSide < 0)
          break;
        o && (n = null);
      }
      s = h;
    }
    return n ? n.coordsAt(e - r, t) : null;
  }
  coordsForChar(e) {
    let { i: t, off: n } = this.childPos(e, 1), r = this.children[t];
    if (!(r instanceof bt))
      return null;
    for (; r.children.length; ) {
      let { i: l, off: a } = r.childPos(n, 1);
      for (; ; l++) {
        if (l == r.children.length)
          return null;
        if ((r = r.children[l]).length)
          break;
      }
      n = a;
    }
    if (!(r instanceof jn))
      return null;
    let s = ot(r.text, n);
    if (s == n)
      return null;
    let o = Pr(r.dom, n, s).getClientRects();
    for (let l = 0; l < o.length; l++) {
      let a = o[l];
      if (l == o.length - 1 || a.top < a.bottom && a.left < a.right)
        return a;
    }
    return null;
  }
  measureVisibleLineHeights(e) {
    let t = [], { from: n, to: r } = e, s = this.view.contentDOM.clientWidth, o = s > Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1, l = -1, a = this.view.textDirection == Ce.LTR;
    for (let h = 0, c = 0; c < this.children.length; c++) {
      let f = this.children[c], u = h + f.length;
      if (u > r)
        break;
      if (h >= n) {
        let d = f.dom.getBoundingClientRect();
        if (t.push(d.height), o) {
          let O = f.dom.lastChild, p = O ? Do(O) : [];
          if (p.length) {
            let m = p[p.length - 1], g = a ? m.right - d.left : d.right - m.left;
            g > l && (l = g, this.minWidth = s, this.minWidthFrom = h, this.minWidthTo = u);
          }
        }
      }
      h = u + f.breakAfter;
    }
    return t;
  }
  textDirectionAt(e) {
    let { i: t } = this.childPos(e, 1);
    return getComputedStyle(this.children[t].dom).direction == "rtl" ? Ce.RTL : Ce.LTR;
  }
  measureTextSize() {
    for (let s of this.children)
      if (s instanceof bt) {
        let o = s.measureTextSize();
        if (o)
          return o;
      }
    let e = document.createElement("div"), t, n, r;
    return e.className = "cm-line", e.style.width = "99999px", e.style.position = "absolute", e.textContent = "abc def ghi jkl mno pqr stu", this.view.observer.ignore(() => {
      this.dom.appendChild(e);
      let s = Do(e.firstChild)[0];
      t = e.getBoundingClientRect().height, n = s ? s.width / 27 : 7, r = s ? s.height : t, e.remove();
    }), { lineHeight: t, charWidth: n, textHeight: r };
  }
  childCursor(e = this.length) {
    let t = this.children.length;
    return t && (e -= this.children[--t].length), new Mx(this.children, e, t);
  }
  computeBlockGapDeco() {
    let e = [], t = this.view.viewState;
    for (let n = 0, r = 0; ; r++) {
      let s = r == t.viewports.length ? null : t.viewports[r], o = s ? s.from - 1 : this.length;
      if (o > n) {
        let l = (t.lineBlockAt(o).bottom - t.lineBlockAt(n).top) / this.view.scaleY;
        e.push(K.replace({
          widget: new cd(l),
          block: !0,
          inclusive: !0,
          isBlockGap: !0
        }).range(n, o));
      }
      if (!s)
        break;
      n = s.to + 1;
    }
    return K.set(e);
  }
  updateDeco() {
    let e = 1, t = this.view.state.facet(Vo).map((s) => (this.dynamicDecorationMap[e++] = typeof s == "function") ? s(this.view) : s), n = !1, r = this.view.state.facet(aw).map((s, o) => {
      let l = typeof s == "function";
      return l && (n = !0), l ? s(this.view) : s;
    });
    for (r.length && (this.dynamicDecorationMap[e++] = n, t.push(qe.join(r))), this.decorations = [
      this.editContextFormatting,
      ...t,
      this.computeBlockGapDeco(),
      this.view.viewState.lineGapDeco
    ]; e < this.decorations.length; )
      this.dynamicDecorationMap[e++] = !1;
    return this.decorations;
  }
  scrollIntoView(e) {
    if (e.isSnapshot) {
      let h = this.view.viewState.lineBlockAt(e.range.head);
      this.view.scrollDOM.scrollTop = h.top - e.yMargin, this.view.scrollDOM.scrollLeft = e.xMargin;
      return;
    }
    for (let h of this.view.state.facet(sw))
      try {
        if (h(this.view, e.range, e))
          return !0;
      } catch (c) {
        Ct(this.view.state, c, "scroll handler");
      }
    let { range: t } = e, n = this.coordsAt(t.head, t.empty ? t.assoc : t.head > t.anchor ? -1 : 1), r;
    if (!n)
      return;
    !t.empty && (r = this.coordsAt(t.anchor, t.anchor > t.head ? -1 : 1)) && (n = {
      left: Math.min(n.left, r.left),
      top: Math.min(n.top, r.top),
      right: Math.max(n.right, r.right),
      bottom: Math.max(n.bottom, r.bottom)
    });
    let s = $p(this.view), o = {
      left: n.left - s.left,
      top: n.top - s.top,
      right: n.right + s.right,
      bottom: n.bottom + s.bottom
    }, { offsetWidth: l, offsetHeight: a } = this.view.scrollDOM;
    lE(this.view.scrollDOM, o, t.head < t.anchor ? -1 : 1, e.x, e.y, Math.max(Math.min(e.xMargin, l), -l), Math.max(Math.min(e.yMargin, a), -a), this.view.textDirection == Ce.LTR);
  }
};
function CE(i) {
  return i.node.nodeType == 1 && i.node.firstChild && (i.offset == 0 || i.node.childNodes[i.offset - 1].contentEditable == "false") && (i.offset == i.node.childNodes.length || i.node.childNodes[i.offset].contentEditable == "false");
}
function uw(i, e) {
  let t = i.observer.selectionRange;
  if (!t.focusNode)
    return null;
  let n = Ax(t.focusNode, t.focusOffset), r = Ex(t.focusNode, t.focusOffset), s = n || r;
  if (r && n && r.node != n.node) {
    let l = Ae.get(r.node);
    if (!l || l instanceof jn && l.text != r.node.nodeValue)
      s = r;
    else if (i.docView.lastCompositionAfterCursor) {
      let a = Ae.get(n.node);
      !a || a instanceof jn && a.text != n.node.nodeValue || (s = r);
    }
  }
  if (i.docView.lastCompositionAfterCursor = s != n, !s)
    return null;
  let o = e - s.offset;
  return { from: o, to: o + s.node.nodeValue.length, node: s.node };
}
function RE(i, e, t) {
  let n = uw(i, t);
  if (!n)
    return null;
  let { node: r, from: s, to: o } = n, l = r.nodeValue;
  if (/[\n\r]/.test(l) || i.state.doc.sliceString(n.from, n.to) != l)
    return null;
  let a = e.invertedDesc, h = new Dn(a.mapPos(s), a.mapPos(o), s, o), c = [];
  for (let f = r.parentNode; ; f = f.parentNode) {
    let u = Ae.get(f);
    if (u instanceof fs)
      c.push({ node: f, deco: u.mark });
    else {
      if (u instanceof bt || f.nodeName == "DIV" && f.parentNode == i.contentDOM)
        return { range: h, text: r, marks: c, line: f };
      if (f != i.contentDOM)
        c.push({ node: f, deco: new bp({
          inclusive: !0,
          attributes: gE(f),
          tagName: f.tagName.toLowerCase()
        }) });
      else
        return null;
    }
  }
}
function AE(i, e) {
  return i.nodeType != 1 ? 0 : (e && i.childNodes[e - 1].contentEditable == "false" ? 1 : 0) | (e < i.childNodes.length && i.childNodes[e].contentEditable == "false" ? 2 : 0);
}
let EE = class {
  constructor() {
    this.changes = [];
  }
  compareRange(e, t) {
    Xa(e, t, this.changes);
  }
  comparePoint(e, t) {
    Xa(e, t, this.changes);
  }
  boundChange(e) {
    Xa(e, e, this.changes);
  }
};
function ME(i, e, t) {
  let n = new EE();
  return qe.compare(i, e, t, n), n.changes;
}
function qE(i, e) {
  for (let t = i; t && t != e; t = t.assignedSlot || t.parentNode)
    if (t.nodeType == 1 && t.contentEditable == "false")
      return !0;
  return !1;
}
function _E(i, e) {
  let t = !1;
  return e && i.iterChangedRanges((n, r) => {
    n < e.to && r > e.from && (t = !0);
  }), t;
}
function XE(i, e, t = 1) {
  let n = i.charCategorizer(e), r = i.doc.lineAt(e), s = e - r.from;
  if (r.length == 0)
    return C.cursor(e);
  s == 0 ? t = 1 : s == r.length && (t = -1);
  let o = s, l = s;
  t < 0 ? o = ot(r.text, s, !1) : l = ot(r.text, s);
  let a = n(r.text.slice(o, l));
  for (; o > 0; ) {
    let h = ot(r.text, o, !1);
    if (n(r.text.slice(h, o)) != a)
      break;
    o = h;
  }
  for (; l < r.length; ) {
    let h = ot(r.text, l);
    if (n(r.text.slice(l, h)) != a)
      break;
    l = h;
  }
  return C.range(o + r.from, l + r.from);
}
function LE(i, e) {
  return e.left > i ? e.left - i : Math.max(0, i - e.right);
}
function BE(i, e) {
  return e.top > i ? e.top - i : Math.max(0, i - e.bottom);
}
function lf(i, e) {
  return i.top < e.bottom - 1 && i.bottom > e.top + 1;
}
function Dg(i, e) {
  return e < i.top ? { top: e, left: i.left, right: i.right, bottom: i.bottom } : i;
}
function Vg(i, e) {
  return e > i.bottom ? { top: i.top, left: i.left, right: i.right, bottom: e } : i;
}
function gd(i, e, t) {
  let n, r, s, o, l = !1, a, h, c, f;
  for (let O = i.firstChild; O; O = O.nextSibling) {
    let p = Do(O);
    for (let m = 0; m < p.length; m++) {
      let g = p[m];
      r && lf(r, g) && (g = Dg(Vg(g, r.bottom), r.top));
      let S = LE(e, g), x = BE(t, g);
      if (S == 0 && x == 0)
        return O.nodeType == 3 ? Wg(O, e, t) : gd(O, e, t);
      if (!n || o > x || o == x && s > S) {
        n = O, r = g, s = S, o = x;
        let k = x ? t < g.top ? -1 : 1 : S ? e < g.left ? -1 : 1 : 0;
        l = !k || (k > 0 ? m < p.length - 1 : m > 0);
      }
      S == 0 ? t > g.bottom && (!c || c.bottom < g.bottom) ? (a = O, c = g) : t < g.top && (!f || f.top > g.top) && (h = O, f = g) : c && lf(c, g) ? c = Vg(c, g.bottom) : f && lf(f, g) && (f = Dg(f, g.top));
    }
  }
  if (c && c.bottom >= t ? (n = a, r = c) : f && f.top <= t && (n = h, r = f), !n)
    return { node: i, offset: 0 };
  let u = Math.max(r.left, Math.min(r.right, e));
  if (n.nodeType == 3)
    return Wg(n, u, t);
  if (l && n.contentEditable != "false")
    return gd(n, u, t);
  let d = Array.prototype.indexOf.call(i.childNodes, n) + (e >= (r.left + r.right) / 2 ? 1 : 0);
  return { node: i, offset: d };
}
function Wg(i, e, t) {
  let n = i.nodeValue.length, r = -1, s = 1e9, o = 0;
  for (let l = 0; l < n; l++) {
    let a = Pr(i, l, l + 1).getClientRects();
    for (let h = 0; h < a.length; h++) {
      let c = a[h];
      if (c.top == c.bottom)
        continue;
      o || (o = e - c.left);
      let f = (c.top > t ? c.top - t : t - c.bottom) - 1;
      if (c.left - 1 <= e && c.right + 1 >= e && f < s) {
        let u = e >= (c.left + c.right) / 2, d = u;
        if ((z.chrome || z.gecko) && Pr(i, l).getBoundingClientRect().left == c.right && (d = !u), f <= 0)
          return { node: i, offset: l + (d ? 1 : 0) };
        r = l + (d ? 1 : 0), s = f;
      }
    }
  }
  return { node: i, offset: r > -1 ? r : o > 0 ? i.nodeValue.length : 0 };
}
function dw(i, e, t, n = -1) {
  var r, s;
  let o = i.contentDOM.getBoundingClientRect(), l = o.top + i.viewState.paddingTop, a, { docHeight: h } = i.viewState, { x: c, y: f } = e, u = f - l;
  if (u < 0)
    return 0;
  if (u > h)
    return i.state.doc.length;
  for (let k = i.viewState.heightOracle.textHeight / 2, w = !1; a = i.elementAtHeight(u), a.type != vt.Text; )
    for (; u = n > 0 ? a.bottom + k : a.top - k, !(u >= 0 && u <= h); ) {
      if (w)
        return t ? null : 0;
      w = !0, n = -n;
    }
  f = l + u;
  let d = a.from;
  if (d < i.viewport.from)
    return i.viewport.from == 0 ? 0 : t ? null : zg(i, o, a, c, f);
  if (d > i.viewport.to)
    return i.viewport.to == i.state.doc.length ? i.state.doc.length : t ? null : zg(i, o, a, c, f);
  let O = i.dom.ownerDocument, p = i.root.elementFromPoint ? i.root : O, m = p.elementFromPoint(c, f);
  m && !i.contentDOM.contains(m) && (m = null), m || (c = Math.max(o.left + 1, Math.min(o.right - 1, c)), m = p.elementFromPoint(c, f), m && !i.contentDOM.contains(m) && (m = null));
  let g, S = -1;
  if (m && ((r = i.docView.nearest(m)) === null || r === void 0 ? void 0 : r.isEditable) != !1) {
    if (O.caretPositionFromPoint) {
      let k = O.caretPositionFromPoint(c, f);
      k && ({ offsetNode: g, offset: S } = k);
    } else if (O.caretRangeFromPoint) {
      let k = O.caretRangeFromPoint(c, f);
      k && ({ startContainer: g, startOffset: S } = k, (!i.contentDOM.contains(g) || z.safari && ZE(g, S, c) || z.chrome && DE(g, S, c)) && (g = void 0));
    }
    g && (S = Math.min(Yi(g), S));
  }
  if (!g || !i.docView.dom.contains(g)) {
    let k = bt.find(i.docView, d);
    if (!k)
      return u > a.top + a.height / 2 ? a.to : a.from;
    ({ node: g, offset: S } = gd(k.dom, c, f));
  }
  let x = i.docView.nearest(g);
  if (!x)
    return null;
  if (x.isWidget && ((s = x.dom) === null || s === void 0 ? void 0 : s.nodeType) == 1) {
    let k = x.dom.getBoundingClientRect();
    return e.y < k.top || e.y <= k.bottom && e.x <= (k.left + k.right) / 2 ? x.posAtStart : x.posAtEnd;
  } else
    return x.localPosFromDOM(g, S) + x.posAtStart;
}
function zg(i, e, t, n, r) {
  let s = Math.round((n - e.left) * i.defaultCharacterWidth);
  if (i.lineWrapping && t.height > i.defaultLineHeight * 1.5) {
    let l = i.viewState.heightOracle.textHeight, a = Math.floor((r - t.top - (i.defaultLineHeight - l) * 0.5) / l);
    s += a * i.viewState.heightOracle.lineLength;
  }
  let o = i.state.sliceDoc(t.from, t.to);
  return t.from + Gu(o, s, i.state.tabSize);
}
function ZE(i, e, t) {
  let n;
  if (i.nodeType != 3 || e != (n = i.nodeValue.length))
    return !1;
  for (let r = i.nextSibling; r; r = r.nextSibling)
    if (r.nodeType != 1 || r.nodeName != "BR")
      return !1;
  return Pr(i, n - 1, n).getBoundingClientRect().left > t;
}
function DE(i, e, t) {
  if (e != 0)
    return !1;
  for (let r = i; ; ) {
    let s = r.parentNode;
    if (!s || s.nodeType != 1 || s.firstChild != r)
      return !1;
    if (s.classList.contains("cm-line"))
      break;
    r = s;
  }
  let n = i.nodeType == 1 ? i.getBoundingClientRect() : Pr(i, 0, Math.max(i.nodeValue.length, 1)).getBoundingClientRect();
  return t - n.left > 5;
}
function yd(i, e, t) {
  let n = i.lineBlockAt(e);
  if (Array.isArray(n.type)) {
    let r;
    for (let s of n.type) {
      if (s.from > e)
        break;
      if (!(s.to < e)) {
        if (s.from < e && s.to > e)
          return s;
        (!r || s.type == vt.Text && (r.type != s.type || (t < 0 ? s.from < e : s.to > e))) && (r = s);
      }
    }
    return r || n;
  }
  return n;
}
function VE(i, e, t, n) {
  let r = yd(i, e.head, e.assoc || -1), s = !n || r.type != vt.Text || !(i.lineWrapping || r.widgetLineBreaks) ? null : i.coordsAtPos(e.assoc < 0 && e.head > r.from ? e.head - 1 : e.head);
  if (s) {
    let o = i.dom.getBoundingClientRect(), l = i.textDirectionAt(r.from), a = i.posAtCoords({
      x: t == (l == Ce.LTR) ? o.right - 1 : o.left + 1,
      y: (s.top + s.bottom) / 2
    });
    if (a != null)
      return C.cursor(a, t ? -1 : 1);
  }
  return C.cursor(t ? r.to : r.from, t ? -1 : 1);
}
function Ig(i, e, t, n) {
  let r = i.state.doc.lineAt(e.head), s = i.bidiSpans(r), o = i.textDirectionAt(r.from);
  for (let l = e, a = null; ; ) {
    let h = PE(r, s, o, l, t), c = Fx;
    if (!h) {
      if (r.number == (t ? i.state.doc.lines : 1))
        return l;
      c = `
`, r = i.state.doc.line(r.number + (t ? 1 : -1)), s = i.bidiSpans(r), h = i.visualLineSide(r, !t);
    }
    if (a) {
      if (!a(c))
        return l;
    } else {
      if (!n)
        return h;
      a = n(c);
    }
    l = h;
  }
}
function WE(i, e, t) {
  let n = i.state.charCategorizer(e), r = n(t);
  return (s) => {
    let o = n(s);
    return r == Me.Space && (r = o), r == o;
  };
}
function zE(i, e, t, n) {
  let r = e.head, s = t ? 1 : -1;
  if (r == (t ? i.state.doc.length : 0))
    return C.cursor(r, e.assoc);
  let o = e.goalColumn, l, a = i.contentDOM.getBoundingClientRect(), h = i.coordsAtPos(r, e.assoc || -1), c = i.documentTop;
  if (h)
    o == null && (o = h.left - a.left), l = s < 0 ? h.top : h.bottom;
  else {
    let d = i.viewState.lineBlockAt(r);
    o == null && (o = Math.min(a.right - a.left, i.defaultCharacterWidth * (r - d.from))), l = (s < 0 ? d.top : d.bottom) + c;
  }
  let f = a.left + o, u = n ?? i.viewState.heightOracle.textHeight >> 1;
  for (let d = 0; ; d += 10) {
    let O = l + (u + d) * s, p = dw(i, { x: f, y: O }, !1, s);
    if (O < a.top || O > a.bottom || (s < 0 ? p < r : p > r)) {
      let m = i.docView.coordsForChar(p), g = !m || O < m.top ? -1 : 1;
      return C.cursor(p, g, void 0, o);
    }
  }
}
function Za(i, e, t) {
  for (; ; ) {
    let n = 0;
    for (let r of i)
      r.between(e - 1, e + 1, (s, o, l) => {
        if (e > s && e < o) {
          let a = n || t || (e - s < o - e ? -1 : 1);
          e = a < 0 ? s : o, n = a;
        }
      });
    if (!n)
      return e;
  }
}
function af(i, e, t) {
  let n = Za(i.state.facet(Pp).map((r) => r(i)), t.from, e.head > t.from ? -1 : 1);
  return n == t.from ? t : C.cursor(n, n < t.from ? 1 : -1);
}
const co = "￿";
let IE = class {
  constructor(e, t) {
    this.points = e, this.text = "", this.lineSeparator = t.facet(Be.lineSeparator);
  }
  append(e) {
    this.text += e;
  }
  lineBreak() {
    this.text += co;
  }
  readRange(e, t) {
    if (!e)
      return this;
    let n = e.parentNode;
    for (let r = e; ; ) {
      this.findPointBefore(n, r);
      let s = this.text.length;
      this.readNode(r);
      let o = r.nextSibling;
      if (o == t)
        break;
      let l = Ae.get(r), a = Ae.get(o);
      (l && a ? l.breakAfter : (l ? l.breakAfter : yh(r)) || yh(o) && (r.nodeName != "BR" || r.cmIgnore) && this.text.length > s) && this.lineBreak(), r = o;
    }
    return this.findPointBefore(n, t), this;
  }
  readTextNode(e) {
    let t = e.nodeValue;
    for (let n of this.points)
      n.node == e && (n.pos = this.text.length + Math.min(n.offset, t.length));
    for (let n = 0, r = this.lineSeparator ? null : /\r\n?|\n/g; ; ) {
      let s = -1, o = 1, l;
      if (this.lineSeparator ? (s = t.indexOf(this.lineSeparator, n), o = this.lineSeparator.length) : (l = r.exec(t)) && (s = l.index, o = l[0].length), this.append(t.slice(n, s < 0 ? t.length : s)), s < 0)
        break;
      if (this.lineBreak(), o > 1)
        for (let a of this.points)
          a.node == e && a.pos > this.text.length && (a.pos -= o - 1);
      n = s + o;
    }
  }
  readNode(e) {
    if (e.cmIgnore)
      return;
    let t = Ae.get(e), n = t && t.overrideDOMText;
    if (n != null) {
      this.findPointInside(e, n.length);
      for (let r = n.iter(); !r.next().done; )
        r.lineBreak ? this.lineBreak() : this.append(r.value);
    } else e.nodeType == 3 ? this.readTextNode(e) : e.nodeName == "BR" ? e.nextSibling && this.lineBreak() : e.nodeType == 1 && this.readRange(e.firstChild, null);
  }
  findPointBefore(e, t) {
    for (let n of this.points)
      n.node == e && e.childNodes[n.offset] == t && (n.pos = this.text.length);
  }
  findPointInside(e, t) {
    for (let n of this.points)
      (e.nodeType == 3 ? n.node == e : e.contains(n.node)) && (n.pos = this.text.length + (NE(e, n.node, n.offset) ? t : 0));
  }
};
function NE(i, e, t) {
  for (; ; ) {
    if (!e || t < Yi(e))
      return !1;
    if (e == i)
      return !0;
    t = Qr(e) + 1, e = e.parentNode;
  }
}
let Ng = class {
  constructor(e, t) {
    this.node = e, this.offset = t, this.pos = -1;
  }
};
class jE {
  constructor(e, t, n, r) {
    this.typeOver = r, this.bounds = null, this.text = "", this.domChanged = t > -1;
    let { impreciseHead: s, impreciseAnchor: o } = e.docView;
    if (e.state.readOnly && t > -1)
      this.newSel = null;
    else if (t > -1 && (this.bounds = e.docView.domBoundsAround(t, n, 0))) {
      let l = s || o ? [] : GE(e), a = new IE(l, e.state);
      a.readRange(this.bounds.startDOM, this.bounds.endDOM), this.text = a.text, this.newSel = FE(l, this.bounds.from);
    } else {
      let l = e.observer.selectionRange, a = s && s.node == l.focusNode && s.offset == l.focusOffset || !Ku(e.contentDOM, l.focusNode) ? e.state.selection.main.head : e.docView.posFromDOM(l.focusNode, l.focusOffset), h = o && o.node == l.anchorNode && o.offset == l.anchorOffset || !Ku(e.contentDOM, l.anchorNode) ? e.state.selection.main.anchor : e.docView.posFromDOM(l.anchorNode, l.anchorOffset), c = e.viewport;
      if ((z.ios || z.chrome) && e.state.selection.main.empty && a != h && (c.from > 0 || c.to < e.state.doc.length)) {
        let f = Math.min(a, h), u = Math.max(a, h), d = c.from - f, O = c.to - u;
        (d == 0 || d == 1 || f == 0) && (O == 0 || O == -1 || u == e.state.doc.length) && (a = 0, h = e.state.doc.length);
      }
      this.newSel = C.single(h, a);
    }
  }
}
function Ow(i, e) {
  let t, { newSel: n } = e, r = i.state.selection.main, s = i.inputState.lastKeyTime > Date.now() - 100 ? i.inputState.lastKeyCode : -1;
  if (e.bounds) {
    let { from: o, to: l } = e.bounds, a = r.from, h = null;
    (s === 8 || z.android && e.text.length < l - o) && (a = r.to, h = "end");
    let c = YE(i.state.doc.sliceString(o, l, co), e.text, a - o, h);
    c && (z.chrome && s == 13 && c.toB == c.from + 2 && e.text.slice(c.from, c.toB) == co + co && c.toB--, t = {
      from: o + c.from,
      to: o + c.toA,
      insert: me.of(e.text.slice(c.from, c.toB).split(co))
    });
  } else n && (!i.hasFocus && i.state.facet(fn) || n.main.eq(r)) && (n = null);
  if (!t && !n)
    return !1;
  if (!t && e.typeOver && !r.empty && n && n.main.empty ? t = { from: r.from, to: r.to, insert: i.state.doc.slice(r.from, r.to) } : (z.mac || z.android) && t && t.from == t.to && t.from == r.head - 1 && /^\. ?$/.test(t.insert.toString()) && i.contentDOM.getAttribute("autocorrect") == "off" ? (n && t.insert.length == 2 && (n = C.single(n.main.anchor - 1, n.main.head - 1)), t = { from: t.from, to: t.to, insert: me.of([t.insert.toString().replace(".", " ")]) }) : t && t.from >= r.from && t.to <= r.to && (t.from != r.from || t.to != r.to) && r.to - r.from - (t.to - t.from) <= 4 ? t = {
    from: r.from,
    to: r.to,
    insert: i.state.doc.slice(r.from, t.from).append(t.insert).append(i.state.doc.slice(t.to, r.to))
  } : z.chrome && t && t.from == t.to && t.from == r.head && t.insert.toString() == `
 ` && i.lineWrapping && (n && (n = C.single(n.main.anchor - 1, n.main.head - 1)), t = { from: r.from, to: r.to, insert: me.of([" "]) }), t)
    return Tp(i, t, n, s);
  if (n && !n.main.eq(r)) {
    let o = !1, l = "select";
    return i.inputState.lastSelectionTime > Date.now() - 50 && (i.inputState.lastSelectionOrigin == "select" && (o = !0), l = i.inputState.lastSelectionOrigin), i.dispatch({ selection: n, scrollIntoView: o, userEvent: l }), !0;
  } else
    return !1;
}
function Tp(i, e, t, n = -1) {
  if (z.ios && i.inputState.flushIOSKey(e))
    return !0;
  let r = i.state.selection.main;
  if (z.android && (e.to == r.to && // GBoard will sometimes remove a space it just inserted
  // after a completion when you press enter
  (e.from == r.from || e.from == r.from - 1 && i.state.sliceDoc(e.from, r.from) == " ") && e.insert.length == 1 && e.insert.lines == 2 && es(i.contentDOM, "Enter", 13) || (e.from == r.from - 1 && e.to == r.to && e.insert.length == 0 || n == 8 && e.insert.length < e.to - e.from && e.to > r.head) && es(i.contentDOM, "Backspace", 8) || e.from == r.from && e.to == r.to + 1 && e.insert.length == 0 && es(i.contentDOM, "Delete", 46)))
    return !0;
  let s = e.insert.toString();
  i.inputState.composing >= 0 && i.inputState.composing++;
  let o, l = () => o || (o = UE(i, e, t));
  return i.state.facet(tw).some((a) => a(i, e.from, e.to, s, l)) || i.dispatch(l()), !0;
}
function UE(i, e, t) {
  let n, r = i.state, s = r.selection.main;
  if (e.from >= s.from && e.to <= s.to && e.to - e.from >= (s.to - s.from) / 3 && (!t || t.main.empty && t.main.from == e.from + e.insert.length) && i.inputState.composing < 0) {
    let l = s.from < e.from ? r.sliceDoc(s.from, e.from) : "", a = s.to > e.to ? r.sliceDoc(e.to, s.to) : "";
    n = r.replaceSelection(i.state.toText(l + e.insert.sliceString(0, void 0, i.state.lineBreak) + a));
  } else {
    let l = r.changes(e), a = t && t.main.to <= l.newLength ? t.main : void 0;
    if (r.selection.ranges.length > 1 && i.inputState.composing >= 0 && e.to <= s.to && e.to >= s.to - 10) {
      let h = i.state.sliceDoc(e.from, e.to), c, f = t && uw(i, t.main.head);
      if (f) {
        let O = e.insert.length - (e.to - e.from);
        c = { from: f.from, to: f.to - O };
      } else
        c = i.state.doc.lineAt(s.head);
      let u = s.to - e.to, d = s.to - s.from;
      n = r.changeByRange((O) => {
        if (O.from == s.from && O.to == s.to)
          return { changes: l, range: a || O.map(l) };
        let p = O.to - u, m = p - h.length;
        if (O.to - O.from != d || i.state.sliceDoc(m, p) != h || // Unfortunately, there's no way to make multiple
        // changes in the same node work without aborting
        // composition, so cursors in the composition range are
        // ignored.
        O.to >= c.from && O.from <= c.to)
          return { range: O };
        let g = r.changes({ from: m, to: p, insert: e.insert }), S = O.to - s.to;
        return {
          changes: g,
          range: a ? C.range(Math.max(0, a.anchor + S), Math.max(0, a.head + S)) : O.map(g)
        };
      });
    } else
      n = {
        changes: l,
        selection: a && r.selection.replaceRange(a)
      };
  }
  let o = "input.type";
  return (i.composing || i.inputState.compositionPendingChange && i.inputState.compositionEndedAt > Date.now() - 50) && (i.inputState.compositionPendingChange = !1, o += ".compose", i.inputState.compositionFirstChange && (o += ".start", i.inputState.compositionFirstChange = !1)), r.update(n, { userEvent: o, scrollIntoView: !0 });
}
function YE(i, e, t, n) {
  let r = Math.min(i.length, e.length), s = 0;
  for (; s < r && i.charCodeAt(s) == e.charCodeAt(s); )
    s++;
  if (s == r && i.length == e.length)
    return null;
  let o = i.length, l = e.length;
  for (; o > 0 && l > 0 && i.charCodeAt(o - 1) == e.charCodeAt(l - 1); )
    o--, l--;
  if (n == "end") {
    let a = Math.max(0, s - Math.min(o, l));
    t -= o + a - s;
  }
  if (o < s && i.length < e.length) {
    let a = t <= s && t >= o ? s - t : 0;
    s -= a, l = s + (l - o), o = s;
  } else if (l < s) {
    let a = t <= s && t >= l ? s - t : 0;
    s -= a, o = s + (o - l), l = s;
  }
  return { from: s, toA: o, toB: l };
}
function GE(i) {
  let e = [];
  if (i.root.activeElement != i.contentDOM)
    return e;
  let { anchorNode: t, anchorOffset: n, focusNode: r, focusOffset: s } = i.observer.selectionRange;
  return t && (e.push(new Ng(t, n)), (r != t || s != n) && e.push(new Ng(r, s))), e;
}
function FE(i, e) {
  if (i.length == 0)
    return null;
  let t = i[0].pos, n = i.length == 2 ? i[1].pos : t;
  return t > -1 && n > -1 ? C.single(t + e, n + e) : null;
}
let HE = class {
  setSelectionOrigin(e) {
    this.lastSelectionOrigin = e, this.lastSelectionTime = Date.now();
  }
  constructor(e) {
    this.view = e, this.lastKeyCode = 0, this.lastKeyTime = 0, this.lastTouchTime = 0, this.lastFocusTime = 0, this.lastScrollTop = 0, this.lastScrollLeft = 0, this.pendingIOSKey = void 0, this.tabFocusMode = -1, this.lastSelectionOrigin = null, this.lastSelectionTime = 0, this.lastContextMenu = 0, this.scrollHandlers = [], this.handlers = /* @__PURE__ */ Object.create(null), this.composing = -1, this.compositionFirstChange = null, this.compositionEndedAt = 0, this.compositionPendingKey = !1, this.compositionPendingChange = !1, this.mouseSelection = null, this.draggedContent = null, this.handleEvent = this.handleEvent.bind(this), this.notifiedFocused = e.hasFocus, z.safari && e.contentDOM.addEventListener("input", () => null), z.gecko && d5(e.contentDOM.ownerDocument);
  }
  handleEvent(e) {
    !s5(this.view, e) || this.ignoreDuringComposition(e) || e.type == "keydown" && this.keydown(e) || (this.view.updateState != 0 ? Promise.resolve().then(() => this.runHandlers(e.type, e)) : this.runHandlers(e.type, e));
  }
  runHandlers(e, t) {
    let n = this.handlers[e];
    if (n) {
      for (let r of n.observers)
        r(this.view, t);
      for (let r of n.handlers) {
        if (t.defaultPrevented)
          break;
        if (r(this.view, t)) {
          t.preventDefault();
          break;
        }
      }
    }
  }
  ensureHandlers(e) {
    let t = KE(e), n = this.handlers, r = this.view.contentDOM;
    for (let s in t)
      if (s != "scroll") {
        let o = !t[s].handlers.length, l = n[s];
        l && o != !l.handlers.length && (r.removeEventListener(s, this.handleEvent), l = null), l || r.addEventListener(s, this.handleEvent, { passive: o });
      }
    for (let s in n)
      s != "scroll" && !t[s] && r.removeEventListener(s, this.handleEvent);
    this.handlers = t;
  }
  keydown(e) {
    if (this.lastKeyCode = e.keyCode, this.lastKeyTime = Date.now(), e.keyCode == 9 && this.tabFocusMode > -1 && (!this.tabFocusMode || Date.now() <= this.tabFocusMode))
      return !0;
    if (this.tabFocusMode > 0 && e.keyCode != 27 && mw.indexOf(e.keyCode) < 0 && (this.tabFocusMode = -1), z.android && z.chrome && !e.synthetic && (e.keyCode == 13 || e.keyCode == 8))
      return this.view.observer.delayAndroidKey(e.key, e.keyCode), !0;
    let t;
    return z.ios && !e.synthetic && !e.altKey && !e.metaKey && ((t = pw.find((n) => n.keyCode == e.keyCode)) && !e.ctrlKey || JE.indexOf(e.key) > -1 && e.ctrlKey && !e.shiftKey) ? (this.pendingIOSKey = t || e, setTimeout(() => this.flushIOSKey(), 250), !0) : (e.keyCode != 229 && this.view.observer.forceFlush(), !1);
  }
  flushIOSKey(e) {
    let t = this.pendingIOSKey;
    return !t || t.key == "Enter" && e && e.from < e.to && /^\S+$/.test(e.insert.toString()) ? !1 : (this.pendingIOSKey = void 0, es(this.view.contentDOM, t.key, t.keyCode, t instanceof KeyboardEvent ? t : void 0));
  }
  ignoreDuringComposition(e) {
    return /^key/.test(e.type) ? this.composing > 0 ? !0 : z.safari && !z.ios && this.compositionPendingKey && Date.now() - this.compositionEndedAt < 100 ? (this.compositionPendingKey = !1, !0) : !1 : !1;
  }
  startMouseSelection(e) {
    this.mouseSelection && this.mouseSelection.destroy(), this.mouseSelection = e;
  }
  update(e) {
    this.view.observer.update(e), this.mouseSelection && this.mouseSelection.update(e), this.draggedContent && e.docChanged && (this.draggedContent = this.draggedContent.map(e.changes)), e.transactions.length && (this.lastKeyCode = this.lastSelectionTime = 0);
  }
  destroy() {
    this.mouseSelection && this.mouseSelection.destroy();
  }
};
function jg(i, e) {
  return (t, n) => {
    try {
      return e.call(i, n, t);
    } catch (r) {
      Ct(t.state, r);
    }
  };
}
function KE(i) {
  let e = /* @__PURE__ */ Object.create(null);
  function t(n) {
    return e[n] || (e[n] = { observers: [], handlers: [] });
  }
  for (let n of i) {
    let r = n.spec, s = r && r.plugin.domEventHandlers, o = r && r.plugin.domEventObservers;
    if (s)
      for (let l in s) {
        let a = s[l];
        a && t(l).handlers.push(jg(n.value, a));
      }
    if (o)
      for (let l in o) {
        let a = o[l];
        a && t(l).observers.push(jg(n.value, a));
      }
  }
  for (let n in yi)
    t(n).handlers.push(yi[n]);
  for (let n in ti)
    t(n).observers.push(ti[n]);
  return e;
}
const pw = [
  { key: "Backspace", keyCode: 8, inputType: "deleteContentBackward" },
  { key: "Enter", keyCode: 13, inputType: "insertParagraph" },
  { key: "Enter", keyCode: 13, inputType: "insertLineBreak" },
  { key: "Delete", keyCode: 46, inputType: "deleteContentForward" }
], JE = "dthko", mw = [16, 17, 18, 20, 91, 92, 224, 225], Nl = 6;
function jl(i) {
  return Math.max(0, i) * 0.7 + 8;
}
function e5(i, e) {
  return Math.max(Math.abs(i.clientX - e.clientX), Math.abs(i.clientY - e.clientY));
}
let t5 = class {
  constructor(e, t, n, r) {
    this.view = e, this.startEvent = t, this.style = n, this.mustSelect = r, this.scrollSpeed = { x: 0, y: 0 }, this.scrolling = -1, this.lastEvent = t, this.scrollParents = aE(e.contentDOM), this.atoms = e.state.facet(Pp).map((o) => o(e));
    let s = e.contentDOM.ownerDocument;
    s.addEventListener("mousemove", this.move = this.move.bind(this)), s.addEventListener("mouseup", this.up = this.up.bind(this)), this.extend = t.shiftKey, this.multiple = e.state.facet(Be.allowMultipleSelections) && i5(e, t), this.dragging = r5(e, t) && Sw(t) == 1 ? null : !1;
  }
  start(e) {
    this.dragging === !1 && this.select(e);
  }
  move(e) {
    if (e.buttons == 0)
      return this.destroy();
    if (this.dragging || this.dragging == null && e5(this.startEvent, e) < 10)
      return;
    this.select(this.lastEvent = e);
    let t = 0, n = 0, r = 0, s = 0, o = this.view.win.innerWidth, l = this.view.win.innerHeight;
    this.scrollParents.x && ({ left: r, right: o } = this.scrollParents.x.getBoundingClientRect()), this.scrollParents.y && ({ top: s, bottom: l } = this.scrollParents.y.getBoundingClientRect());
    let a = $p(this.view);
    e.clientX - a.left <= r + Nl ? t = -jl(r - e.clientX) : e.clientX + a.right >= o - Nl && (t = jl(e.clientX - o)), e.clientY - a.top <= s + Nl ? n = -jl(s - e.clientY) : e.clientY + a.bottom >= l - Nl && (n = jl(e.clientY - l)), this.setScrollSpeed(t, n);
  }
  up(e) {
    this.dragging == null && this.select(this.lastEvent), this.dragging || e.preventDefault(), this.destroy();
  }
  destroy() {
    this.setScrollSpeed(0, 0);
    let e = this.view.contentDOM.ownerDocument;
    e.removeEventListener("mousemove", this.move), e.removeEventListener("mouseup", this.up), this.view.inputState.mouseSelection = this.view.inputState.draggedContent = null;
  }
  setScrollSpeed(e, t) {
    this.scrollSpeed = { x: e, y: t }, e || t ? this.scrolling < 0 && (this.scrolling = setInterval(() => this.scroll(), 50)) : this.scrolling > -1 && (clearInterval(this.scrolling), this.scrolling = -1);
  }
  scroll() {
    let { x: e, y: t } = this.scrollSpeed;
    e && this.scrollParents.x && (this.scrollParents.x.scrollLeft += e, e = 0), t && this.scrollParents.y && (this.scrollParents.y.scrollTop += t, t = 0), (e || t) && this.view.win.scrollBy(e, t), this.dragging === !1 && this.select(this.lastEvent);
  }
  skipAtoms(e) {
    let t = null;
    for (let n = 0; n < e.ranges.length; n++) {
      let r = e.ranges[n], s = null;
      if (r.empty) {
        let o = Za(this.atoms, r.from, 0);
        o != r.from && (s = C.cursor(o, -1));
      } else {
        let o = Za(this.atoms, r.from, -1), l = Za(this.atoms, r.to, 1);
        (o != r.from || l != r.to) && (s = C.range(r.from == r.anchor ? o : l, r.from == r.head ? o : l));
      }
      s && (t || (t = e.ranges.slice()), t[n] = s);
    }
    return t ? C.create(t, e.mainIndex) : e;
  }
  select(e) {
    let { view: t } = this, n = this.skipAtoms(this.style.get(e, this.extend, this.multiple));
    (this.mustSelect || !n.eq(t.state.selection, this.dragging === !1)) && this.view.dispatch({
      selection: n,
      userEvent: "select.pointer"
    }), this.mustSelect = !1;
  }
  update(e) {
    e.transactions.some((t) => t.isUserEvent("input.type")) ? this.destroy() : this.style.update(e) && setTimeout(() => this.select(this.lastEvent), 20);
  }
};
function i5(i, e) {
  let t = i.state.facet(Hx);
  return t.length ? t[0](e) : z.mac ? e.metaKey : e.ctrlKey;
}
function n5(i, e) {
  let t = i.state.facet(Kx);
  return t.length ? t[0](e) : z.mac ? !e.altKey : !e.ctrlKey;
}
function r5(i, e) {
  let { main: t } = i.state.selection;
  if (t.empty)
    return !1;
  let n = Zo(i.root);
  if (!n || n.rangeCount == 0)
    return !0;
  let r = n.getRangeAt(0).getClientRects();
  for (let s = 0; s < r.length; s++) {
    let o = r[s];
    if (o.left <= e.clientX && o.right >= e.clientX && o.top <= e.clientY && o.bottom >= e.clientY)
      return !0;
  }
  return !1;
}
function s5(i, e) {
  if (!e.bubbles)
    return !0;
  if (e.defaultPrevented)
    return !1;
  for (let t = e.target, n; t != i.contentDOM; t = t.parentNode)
    if (!t || t.nodeType == 11 || (n = Ae.get(t)) && n.ignoreEvent(e))
      return !1;
  return !0;
}
const yi = /* @__PURE__ */ Object.create(null), ti = /* @__PURE__ */ Object.create(null), gw = z.ie && z.ie_version < 15 || z.ios && z.webkit_version < 604;
function o5(i) {
  let e = i.dom.parentNode;
  if (!e)
    return;
  let t = e.appendChild(document.createElement("textarea"));
  t.style.cssText = "position: fixed; left: -10000px; top: 10px", t.focus(), setTimeout(() => {
    i.focus(), t.remove(), yw(i, t.value);
  }, 50);
}
function pc(i, e, t) {
  for (let n of i.facet(e))
    t = n(t, i);
  return t;
}
function yw(i, e) {
  e = pc(i.state, kp, e);
  let { state: t } = i, n, r = 1, s = t.toText(e), o = s.lines == t.selection.ranges.length;
  if (Sd != null && t.selection.ranges.every((a) => a.empty) && Sd == s.toString()) {
    let a = -1;
    n = t.changeByRange((h) => {
      let c = t.doc.lineAt(h.from);
      if (c.from == a)
        return { range: h };
      a = c.from;
      let f = t.toText((o ? s.line(r++).text : e) + t.lineBreak);
      return {
        changes: { from: c.from, insert: f },
        range: C.cursor(h.from + f.length)
      };
    });
  } else o ? n = t.changeByRange((a) => {
    let h = s.line(r++);
    return {
      changes: { from: a.from, to: a.to, insert: h.text },
      range: C.cursor(a.from + h.length)
    };
  }) : n = t.replaceSelection(s);
  i.dispatch(n, {
    userEvent: "input.paste",
    scrollIntoView: !0
  });
}
ti.scroll = (i) => {
  i.inputState.lastScrollTop = i.scrollDOM.scrollTop, i.inputState.lastScrollLeft = i.scrollDOM.scrollLeft;
};
yi.keydown = (i, e) => (i.inputState.setSelectionOrigin("select"), e.keyCode == 27 && i.inputState.tabFocusMode != 0 && (i.inputState.tabFocusMode = Date.now() + 2e3), !1);
ti.touchstart = (i, e) => {
  i.inputState.lastTouchTime = Date.now(), i.inputState.setSelectionOrigin("select.pointer");
};
ti.touchmove = (i) => {
  i.inputState.setSelectionOrigin("select.pointer");
};
yi.mousedown = (i, e) => {
  if (i.observer.flush(), i.inputState.lastTouchTime > Date.now() - 2e3)
    return !1;
  let t = null;
  for (let n of i.state.facet(Jx))
    if (t = n(i, e), t)
      break;
  if (!t && e.button == 0 && (t = h5(i, e)), t) {
    let n = !i.hasFocus;
    i.inputState.startMouseSelection(new t5(i, e, t, n)), n && i.observer.ignore(() => {
      Tx(i.contentDOM);
      let s = i.root.activeElement;
      s && !s.contains(i.contentDOM) && s.blur();
    });
    let r = i.inputState.mouseSelection;
    if (r)
      return r.start(e), r.dragging === !1;
  }
  return !1;
};
function Ug(i, e, t, n) {
  if (n == 1)
    return C.cursor(e, t);
  if (n == 2)
    return XE(i.state, e, t);
  {
    let r = bt.find(i.docView, e), s = i.state.doc.lineAt(r ? r.posAtEnd : e), o = r ? r.posAtStart : s.from, l = r ? r.posAtEnd : s.to;
    return l < i.state.doc.length && l == s.to && l++, C.range(o, l);
  }
}
let Yg = (i, e, t) => e >= t.top && e <= t.bottom && i >= t.left && i <= t.right;
function l5(i, e, t, n) {
  let r = bt.find(i.docView, e);
  if (!r)
    return 1;
  let s = e - r.posAtStart;
  if (s == 0)
    return 1;
  if (s == r.length)
    return -1;
  let o = r.coordsAt(s, -1);
  if (o && Yg(t, n, o))
    return -1;
  let l = r.coordsAt(s, 1);
  return l && Yg(t, n, l) ? 1 : o && o.bottom >= n ? -1 : 1;
}
function Gg(i, e) {
  let t = i.posAtCoords({ x: e.clientX, y: e.clientY }, !1);
  return { pos: t, bias: l5(i, t, e.clientX, e.clientY) };
}
const a5 = z.ie && z.ie_version <= 11;
let Fg = null, Hg = 0, Kg = 0;
function Sw(i) {
  if (!a5)
    return i.detail;
  let e = Fg, t = Kg;
  return Fg = i, Kg = Date.now(), Hg = !e || t > Date.now() - 400 && Math.abs(e.clientX - i.clientX) < 2 && Math.abs(e.clientY - i.clientY) < 2 ? (Hg + 1) % 3 : 1;
}
function h5(i, e) {
  let t = Gg(i, e), n = Sw(e), r = i.state.selection;
  return {
    update(s) {
      s.docChanged && (t.pos = s.changes.mapPos(t.pos), r = r.map(s.changes));
    },
    get(s, o, l) {
      let a = Gg(i, s), h, c = Ug(i, a.pos, a.bias, n);
      if (t.pos != a.pos && !o) {
        let f = Ug(i, t.pos, t.bias, n), u = Math.min(f.from, c.from), d = Math.max(f.to, c.to);
        c = u < c.from ? C.range(u, d) : C.range(d, u);
      }
      return o ? r.replaceRange(r.main.extend(c.from, c.to)) : l && n == 1 && r.ranges.length > 1 && (h = c5(r, a.pos)) ? h : l ? r.addRange(c) : C.create([c]);
    }
  };
}
function c5(i, e) {
  for (let t = 0; t < i.ranges.length; t++) {
    let { from: n, to: r } = i.ranges[t];
    if (n <= e && r >= e)
      return C.create(i.ranges.slice(0, t).concat(i.ranges.slice(t + 1)), i.mainIndex == t ? 0 : i.mainIndex - (i.mainIndex > t ? 1 : 0));
  }
  return null;
}
yi.dragstart = (i, e) => {
  let { selection: { main: t } } = i.state;
  if (e.target.draggable) {
    let r = i.docView.nearest(e.target);
    if (r && r.isWidget) {
      let s = r.posAtStart, o = s + r.length;
      (s >= t.to || o <= t.from) && (t = C.range(s, o));
    }
  }
  let { inputState: n } = i;
  return n.mouseSelection && (n.mouseSelection.dragging = !0), n.draggedContent = t, e.dataTransfer && (e.dataTransfer.setData("Text", pc(i.state, vp, i.state.sliceDoc(t.from, t.to))), e.dataTransfer.effectAllowed = "copyMove"), !1;
};
yi.dragend = (i) => (i.inputState.draggedContent = null, !1);
function Jg(i, e, t, n) {
  if (t = pc(i.state, kp, t), !t)
    return;
  let r = i.posAtCoords({ x: e.clientX, y: e.clientY }, !1), { draggedContent: s } = i.inputState, o = n && s && n5(i, e) ? { from: s.from, to: s.to } : null, l = { from: r, insert: t }, a = i.state.changes(o ? [o, l] : l);
  i.focus(), i.dispatch({
    changes: a,
    selection: { anchor: a.mapPos(r, -1), head: a.mapPos(r, 1) },
    userEvent: o ? "move.drop" : "input.drop"
  }), i.inputState.draggedContent = null;
}
yi.drop = (i, e) => {
  if (!e.dataTransfer)
    return !1;
  if (i.state.readOnly)
    return !0;
  let t = e.dataTransfer.files;
  if (t && t.length) {
    let n = Array(t.length), r = 0, s = () => {
      ++r == t.length && Jg(i, e, n.filter((o) => o != null).join(i.state.lineBreak), !1);
    };
    for (let o = 0; o < t.length; o++) {
      let l = new FileReader();
      l.onerror = s, l.onload = () => {
        /[\x00-\x08\x0e-\x1f]{2}/.test(l.result) || (n[o] = l.result), s();
      }, l.readAsText(t[o]);
    }
    return !0;
  } else {
    let n = e.dataTransfer.getData("Text");
    if (n)
      return Jg(i, e, n, !0), !0;
  }
  return !1;
};
yi.paste = (i, e) => {
  if (i.state.readOnly)
    return !0;
  i.observer.flush();
  let t = gw ? null : e.clipboardData;
  return t ? (yw(i, t.getData("text/plain") || t.getData("text/uri-list")), !0) : (o5(i), !1);
};
function f5(i, e) {
  let t = i.dom.parentNode;
  if (!t)
    return;
  let n = t.appendChild(document.createElement("textarea"));
  n.style.cssText = "position: fixed; left: -10000px; top: 10px", n.value = e, n.focus(), n.selectionEnd = e.length, n.selectionStart = 0, setTimeout(() => {
    n.remove(), i.focus();
  }, 50);
}
function u5(i) {
  let e = [], t = [], n = !1;
  for (let r of i.selection.ranges)
    r.empty || (e.push(i.sliceDoc(r.from, r.to)), t.push(r));
  if (!e.length) {
    let r = -1;
    for (let { from: s } of i.selection.ranges) {
      let o = i.doc.lineAt(s);
      o.number > r && (e.push(o.text), t.push({ from: o.from, to: Math.min(i.doc.length, o.to + 1) })), r = o.number;
    }
    n = !0;
  }
  return { text: pc(i, vp, e.join(i.lineBreak)), ranges: t, linewise: n };
}
let Sd = null;
yi.copy = yi.cut = (i, e) => {
  let { text: t, ranges: n, linewise: r } = u5(i.state);
  if (!t && !r)
    return !1;
  Sd = r ? t : null, e.type == "cut" && !i.state.readOnly && i.dispatch({
    changes: n,
    scrollIntoView: !0,
    userEvent: "delete.cut"
  });
  let s = gw ? null : e.clipboardData;
  return s ? (s.clearData(), s.setData("text/plain", t), !0) : (f5(i, t), !1);
};
const bw = /* @__PURE__ */ xn.define();
function xw(i, e) {
  let t = [];
  for (let n of i.facet(iw)) {
    let r = n(i, e);
    r && t.push(r);
  }
  return t.length ? i.update({ effects: t, annotations: bw.of(!0) }) : null;
}
function ww(i) {
  setTimeout(() => {
    let e = i.hasFocus;
    if (e != i.inputState.notifiedFocused) {
      let t = xw(i.state, e);
      t ? i.dispatch(t) : i.update([]);
    }
  }, 10);
}
ti.focus = (i) => {
  i.inputState.lastFocusTime = Date.now(), !i.scrollDOM.scrollTop && (i.inputState.lastScrollTop || i.inputState.lastScrollLeft) && (i.scrollDOM.scrollTop = i.inputState.lastScrollTop, i.scrollDOM.scrollLeft = i.inputState.lastScrollLeft), ww(i);
};
ti.blur = (i) => {
  i.observer.clearSelectionRange(), ww(i);
};
ti.compositionstart = ti.compositionupdate = (i) => {
  i.observer.editContext || (i.inputState.compositionFirstChange == null && (i.inputState.compositionFirstChange = !0), i.inputState.composing < 0 && (i.inputState.composing = 0));
};
ti.compositionend = (i) => {
  i.observer.editContext || (i.inputState.composing = -1, i.inputState.compositionEndedAt = Date.now(), i.inputState.compositionPendingKey = !0, i.inputState.compositionPendingChange = i.observer.pendingRecords().length > 0, i.inputState.compositionFirstChange = null, z.chrome && z.android ? i.observer.flushSoon() : i.inputState.compositionPendingChange ? Promise.resolve().then(() => i.observer.flush()) : setTimeout(() => {
    i.inputState.composing < 0 && i.docView.hasComposition && i.update([]);
  }, 50));
};
ti.contextmenu = (i) => {
  i.inputState.lastContextMenu = Date.now();
};
yi.beforeinput = (i, e) => {
  var t, n;
  if (e.inputType == "insertReplacementText" && i.observer.editContext) {
    let s = (t = e.dataTransfer) === null || t === void 0 ? void 0 : t.getData("text/plain"), o = e.getTargetRanges();
    if (s && o.length) {
      let l = o[0], a = i.posAtDOM(l.startContainer, l.startOffset), h = i.posAtDOM(l.endContainer, l.endOffset);
      return Tp(i, { from: a, to: h, insert: i.state.toText(s) }, null), !0;
    }
  }
  let r;
  if (z.chrome && z.android && (r = pw.find((s) => s.inputType == e.inputType)) && (i.observer.delayAndroidKey(r.key, r.keyCode), r.key == "Backspace" || r.key == "Delete")) {
    let s = ((n = window.visualViewport) === null || n === void 0 ? void 0 : n.height) || 0;
    setTimeout(() => {
      var o;
      (((o = window.visualViewport) === null || o === void 0 ? void 0 : o.height) || 0) > s + 10 && i.hasFocus && (i.contentDOM.blur(), i.focus());
    }, 100);
  }
  return z.ios && e.inputType == "deleteContentForward" && i.observer.flushSoon(), z.safari && e.inputType == "insertText" && i.inputState.composing >= 0 && setTimeout(() => ti.compositionend(i, e), 20), !1;
};
const e0 = /* @__PURE__ */ new Set();
function d5(i) {
  e0.has(i) || (e0.add(i), i.addEventListener("copy", () => {
  }), i.addEventListener("cut", () => {
  }));
}
const t0 = ["pre-wrap", "normal", "pre-line", "break-spaces"];
let Os = !1;
function i0() {
  Os = !1;
}
let O5 = class {
  constructor(e) {
    this.lineWrapping = e, this.doc = me.empty, this.heightSamples = {}, this.lineHeight = 14, this.charWidth = 7, this.textHeight = 14, this.lineLength = 30;
  }
  heightForGap(e, t) {
    let n = this.doc.lineAt(t).number - this.doc.lineAt(e).number + 1;
    return this.lineWrapping && (n += Math.max(0, Math.ceil((t - e - n * this.lineLength * 0.5) / this.lineLength))), this.lineHeight * n;
  }
  heightForLine(e) {
    return this.lineWrapping ? (1 + Math.max(0, Math.ceil((e - this.lineLength) / (this.lineLength - 5)))) * this.lineHeight : this.lineHeight;
  }
  setDoc(e) {
    return this.doc = e, this;
  }
  mustRefreshForWrapping(e) {
    return t0.indexOf(e) > -1 != this.lineWrapping;
  }
  mustRefreshForHeights(e) {
    let t = !1;
    for (let n = 0; n < e.length; n++) {
      let r = e[n];
      r < 0 ? n++ : this.heightSamples[Math.floor(r * 10)] || (t = !0, this.heightSamples[Math.floor(r * 10)] = !0);
    }
    return t;
  }
  refresh(e, t, n, r, s, o) {
    let l = t0.indexOf(e) > -1, a = Math.round(t) != Math.round(this.lineHeight) || this.lineWrapping != l;
    if (this.lineWrapping = l, this.lineHeight = t, this.charWidth = n, this.textHeight = r, this.lineLength = s, a) {
      this.heightSamples = {};
      for (let h = 0; h < o.length; h++) {
        let c = o[h];
        c < 0 ? h++ : this.heightSamples[Math.floor(c * 10)] = !0;
      }
    }
    return a;
  }
}, p5 = class {
  constructor(e, t) {
    this.from = e, this.heights = t, this.index = 0;
  }
  get more() {
    return this.index < this.heights.length;
  }
}, An = class kw {
  /**
  @internal
  */
  constructor(e, t, n, r, s) {
    this.from = e, this.length = t, this.top = n, this.height = r, this._content = s;
  }
  /**
  The type of element this is. When querying lines, this may be
  an array of all the blocks that make up the line.
  */
  get type() {
    return typeof this._content == "number" ? vt.Text : Array.isArray(this._content) ? this._content : this._content.type;
  }
  /**
  The end of the element as a document position.
  */
  get to() {
    return this.from + this.length;
  }
  /**
  The bottom position of the element.
  */
  get bottom() {
    return this.top + this.height;
  }
  /**
  If this is a widget block, this will return the widget
  associated with it.
  */
  get widget() {
    return this._content instanceof us ? this._content.widget : null;
  }
  /**
  If this is a textblock, this holds the number of line breaks
  that appear in widgets inside the block.
  */
  get widgetLineBreaks() {
    return typeof this._content == "number" ? this._content : 0;
  }
  /**
  @internal
  */
  join(e) {
    let t = (Array.isArray(this._content) ? this._content : [this]).concat(Array.isArray(e._content) ? e._content : [e]);
    return new kw(this.from, this.length + e.length, this.top, this.height + e.height, t);
  }
};
var $e = /* @__PURE__ */ function(i) {
  return i[i.ByPos = 0] = "ByPos", i[i.ByHeight = 1] = "ByHeight", i[i.ByPosNoHeight = 2] = "ByPosNoHeight", i;
}($e || ($e = {}));
const Da = 1e-3;
let ui = class Va {
  constructor(e, t, n = 2) {
    this.length = e, this.height = t, this.flags = n;
  }
  get outdated() {
    return (this.flags & 2) > 0;
  }
  set outdated(e) {
    this.flags = (e ? 2 : 0) | this.flags & -3;
  }
  setHeight(e) {
    this.height != e && (Math.abs(this.height - e) > Da && (Os = !0), this.height = e);
  }
  // Base case is to replace a leaf node, which simply builds a tree
  // from the new nodes and returns that (HeightMapBranch and
  // HeightMapGap override this to actually use from/to)
  replace(e, t, n) {
    return Va.of(n);
  }
  // Again, these are base cases, and are overridden for branch and gap nodes.
  decomposeLeft(e, t) {
    t.push(this);
  }
  decomposeRight(e, t) {
    t.push(this);
  }
  applyChanges(e, t, n, r) {
    let s = this, o = n.doc;
    for (let l = r.length - 1; l >= 0; l--) {
      let { fromA: a, toA: h, fromB: c, toB: f } = r[l], u = s.lineAt(a, $e.ByPosNoHeight, n.setDoc(t), 0, 0), d = u.to >= h ? u : s.lineAt(h, $e.ByPosNoHeight, n, 0, 0);
      for (f += d.to - h, h = d.to; l > 0 && u.from <= r[l - 1].toA; )
        a = r[l - 1].fromA, c = r[l - 1].fromB, l--, a < u.from && (u = s.lineAt(a, $e.ByPosNoHeight, n, 0, 0));
      c += u.from - a, a = u.from;
      let O = y5.build(n.setDoc(o), e, c, f);
      s = bh(s, s.replace(a, h, O));
    }
    return s.updateHeight(n, 0);
  }
  static empty() {
    return new Li(0, 0);
  }
  // nodes uses null values to indicate the position of line breaks.
  // There are never line breaks at the start or end of the array, or
  // two line breaks next to each other, and the array isn't allowed
  // to be empty (same restrictions as return value from the builder).
  static of(e) {
    if (e.length == 1)
      return e[0];
    let t = 0, n = e.length, r = 0, s = 0;
    for (; ; )
      if (t == n)
        if (r > s * 2) {
          let l = e[t - 1];
          l.break ? e.splice(--t, 1, l.left, null, l.right) : e.splice(--t, 1, l.left, l.right), n += 1 + l.break, r -= l.size;
        } else if (s > r * 2) {
          let l = e[n];
          l.break ? e.splice(n, 1, l.left, null, l.right) : e.splice(n, 1, l.left, l.right), n += 2 + l.break, s -= l.size;
        } else
          break;
      else if (r < s) {
        let l = e[t++];
        l && (r += l.size);
      } else {
        let l = e[--n];
        l && (s += l.size);
      }
    let o = 0;
    return e[t - 1] == null ? (o = 1, t--) : e[t] == null && (o = 1, n++), new m5(Va.of(e.slice(0, t)), o, Va.of(e.slice(n)));
  }
};
function bh(i, e) {
  return i == e ? i : (i.constructor != e.constructor && (Os = !0), e);
}
ui.prototype.size = 1;
let vw = class extends ui {
  constructor(e, t, n) {
    super(e, t), this.deco = n;
  }
  blockAt(e, t, n, r) {
    return new An(r, this.length, n, this.height, this.deco || 0);
  }
  lineAt(e, t, n, r, s) {
    return this.blockAt(0, n, r, s);
  }
  forEachLine(e, t, n, r, s, o) {
    e <= s + this.length && t >= s && o(this.blockAt(0, n, r, s));
  }
  updateHeight(e, t = 0, n = !1, r) {
    return r && r.from <= t && r.more && this.setHeight(r.heights[r.index++]), this.outdated = !1, this;
  }
  toString() {
    return `block(${this.length})`;
  }
}, Li = class bd extends vw {
  constructor(e, t) {
    super(e, t, null), this.collapsed = 0, this.widgetHeight = 0, this.breaks = 0;
  }
  blockAt(e, t, n, r) {
    return new An(r, this.length, n, this.height, this.breaks);
  }
  replace(e, t, n) {
    let r = n[0];
    return n.length == 1 && (r instanceof bd || r instanceof ts && r.flags & 4) && Math.abs(this.length - r.length) < 10 ? (r instanceof ts ? r = new bd(r.length, this.height) : r.height = this.height, this.outdated || (r.outdated = !1), r) : ui.of(n);
  }
  updateHeight(e, t = 0, n = !1, r) {
    return r && r.from <= t && r.more ? this.setHeight(r.heights[r.index++]) : (n || this.outdated) && this.setHeight(Math.max(this.widgetHeight, e.heightForLine(this.length - this.collapsed)) + this.breaks * e.lineHeight), this.outdated = !1, this;
  }
  toString() {
    return `line(${this.length}${this.collapsed ? -this.collapsed : ""}${this.widgetHeight ? ":" + this.widgetHeight : ""})`;
  }
}, ts = class ai extends ui {
  constructor(e) {
    super(e, 0);
  }
  heightMetrics(e, t) {
    let n = e.doc.lineAt(t).number, r = e.doc.lineAt(t + this.length).number, s = r - n + 1, o, l = 0;
    if (e.lineWrapping) {
      let a = Math.min(this.height, e.lineHeight * s);
      o = a / s, this.length > s + 1 && (l = (this.height - a) / (this.length - s - 1));
    } else
      o = this.height / s;
    return { firstLine: n, lastLine: r, perLine: o, perChar: l };
  }
  blockAt(e, t, n, r) {
    let { firstLine: s, lastLine: o, perLine: l, perChar: a } = this.heightMetrics(t, r);
    if (t.lineWrapping) {
      let h = r + (e < t.lineHeight ? 0 : Math.round(Math.max(0, Math.min(1, (e - n) / this.height)) * this.length)), c = t.doc.lineAt(h), f = l + c.length * a, u = Math.max(n, e - f / 2);
      return new An(c.from, c.length, u, f, 0);
    } else {
      let h = Math.max(0, Math.min(o - s, Math.floor((e - n) / l))), { from: c, length: f } = t.doc.line(s + h);
      return new An(c, f, n + l * h, l, 0);
    }
  }
  lineAt(e, t, n, r, s) {
    if (t == $e.ByHeight)
      return this.blockAt(e, n, r, s);
    if (t == $e.ByPosNoHeight) {
      let { from: d, to: O } = n.doc.lineAt(e);
      return new An(d, O - d, 0, 0, 0);
    }
    let { firstLine: o, perLine: l, perChar: a } = this.heightMetrics(n, s), h = n.doc.lineAt(e), c = l + h.length * a, f = h.number - o, u = r + l * f + a * (h.from - s - f);
    return new An(h.from, h.length, Math.max(r, Math.min(u, r + this.height - c)), c, 0);
  }
  forEachLine(e, t, n, r, s, o) {
    e = Math.max(e, s), t = Math.min(t, s + this.length);
    let { firstLine: l, perLine: a, perChar: h } = this.heightMetrics(n, s);
    for (let c = e, f = r; c <= t; ) {
      let u = n.doc.lineAt(c);
      if (c == e) {
        let O = u.number - l;
        f += a * O + h * (e - s - O);
      }
      let d = a + h * u.length;
      o(new An(u.from, u.length, f, d, 0)), f += d, c = u.to + 1;
    }
  }
  replace(e, t, n) {
    let r = this.length - t;
    if (r > 0) {
      let s = n[n.length - 1];
      s instanceof ai ? n[n.length - 1] = new ai(s.length + r) : n.push(null, new ai(r - 1));
    }
    if (e > 0) {
      let s = n[0];
      s instanceof ai ? n[0] = new ai(e + s.length) : n.unshift(new ai(e - 1), null);
    }
    return ui.of(n);
  }
  decomposeLeft(e, t) {
    t.push(new ai(e - 1), null);
  }
  decomposeRight(e, t) {
    t.push(null, new ai(this.length - e - 1));
  }
  updateHeight(e, t = 0, n = !1, r) {
    let s = t + this.length;
    if (r && r.from <= t + this.length && r.more) {
      let o = [], l = Math.max(t, r.from), a = -1;
      for (r.from > t && o.push(new ai(r.from - t - 1).updateHeight(e, t)); l <= s && r.more; ) {
        let c = e.doc.lineAt(l).length;
        o.length && o.push(null);
        let f = r.heights[r.index++];
        a == -1 ? a = f : Math.abs(f - a) >= Da && (a = -2);
        let u = new Li(c, f);
        u.outdated = !1, o.push(u), l += c + 1;
      }
      l <= s && o.push(null, new ai(s - l).updateHeight(e, l));
      let h = ui.of(o);
      return (a < 0 || Math.abs(h.height - this.height) >= Da || Math.abs(a - this.heightMetrics(e, t).perLine) >= Da) && (Os = !0), bh(this, h);
    } else (n || this.outdated) && (this.setHeight(e.heightForGap(t, t + this.length)), this.outdated = !1);
    return this;
  }
  toString() {
    return `gap(${this.length})`;
  }
}, m5 = class extends ui {
  constructor(e, t, n) {
    super(e.length + t + n.length, e.height + n.height, t | (e.outdated || n.outdated ? 2 : 0)), this.left = e, this.right = n, this.size = e.size + n.size;
  }
  get break() {
    return this.flags & 1;
  }
  blockAt(e, t, n, r) {
    let s = n + this.left.height;
    return e < s ? this.left.blockAt(e, t, n, r) : this.right.blockAt(e, t, s, r + this.left.length + this.break);
  }
  lineAt(e, t, n, r, s) {
    let o = r + this.left.height, l = s + this.left.length + this.break, a = t == $e.ByHeight ? e < o : e < l, h = a ? this.left.lineAt(e, t, n, r, s) : this.right.lineAt(e, t, n, o, l);
    if (this.break || (a ? h.to < l : h.from > l))
      return h;
    let c = t == $e.ByPosNoHeight ? $e.ByPosNoHeight : $e.ByPos;
    return a ? h.join(this.right.lineAt(l, c, n, o, l)) : this.left.lineAt(l, c, n, r, s).join(h);
  }
  forEachLine(e, t, n, r, s, o) {
    let l = r + this.left.height, a = s + this.left.length + this.break;
    if (this.break)
      e < a && this.left.forEachLine(e, t, n, r, s, o), t >= a && this.right.forEachLine(e, t, n, l, a, o);
    else {
      let h = this.lineAt(a, $e.ByPos, n, r, s);
      e < h.from && this.left.forEachLine(e, h.from - 1, n, r, s, o), h.to >= e && h.from <= t && o(h), t > h.to && this.right.forEachLine(h.to + 1, t, n, l, a, o);
    }
  }
  replace(e, t, n) {
    let r = this.left.length + this.break;
    if (t < r)
      return this.balanced(this.left.replace(e, t, n), this.right);
    if (e > this.left.length)
      return this.balanced(this.left, this.right.replace(e - r, t - r, n));
    let s = [];
    e > 0 && this.decomposeLeft(e, s);
    let o = s.length;
    for (let l of n)
      s.push(l);
    if (e > 0 && n0(s, o - 1), t < this.length) {
      let l = s.length;
      this.decomposeRight(t, s), n0(s, l);
    }
    return ui.of(s);
  }
  decomposeLeft(e, t) {
    let n = this.left.length;
    if (e <= n)
      return this.left.decomposeLeft(e, t);
    t.push(this.left), this.break && (n++, e >= n && t.push(null)), e > n && this.right.decomposeLeft(e - n, t);
  }
  decomposeRight(e, t) {
    let n = this.left.length, r = n + this.break;
    if (e >= r)
      return this.right.decomposeRight(e - r, t);
    e < n && this.left.decomposeRight(e, t), this.break && e < r && t.push(null), t.push(this.right);
  }
  balanced(e, t) {
    return e.size > 2 * t.size || t.size > 2 * e.size ? ui.of(this.break ? [e, null, t] : [e, t]) : (this.left = bh(this.left, e), this.right = bh(this.right, t), this.setHeight(e.height + t.height), this.outdated = e.outdated || t.outdated, this.size = e.size + t.size, this.length = e.length + this.break + t.length, this);
  }
  updateHeight(e, t = 0, n = !1, r) {
    let { left: s, right: o } = this, l = t + s.length + this.break, a = null;
    return r && r.from <= t + s.length && r.more ? a = s = s.updateHeight(e, t, n, r) : s.updateHeight(e, t, n), r && r.from <= l + o.length && r.more ? a = o = o.updateHeight(e, l, n, r) : o.updateHeight(e, l, n), a ? this.balanced(s, o) : (this.height = this.left.height + this.right.height, this.outdated = !1, this);
  }
  toString() {
    return this.left + (this.break ? " " : "-") + this.right;
  }
};
function n0(i, e) {
  let t, n;
  i[e] == null && (t = i[e - 1]) instanceof ts && (n = i[e + 1]) instanceof ts && i.splice(e - 1, 3, new ts(t.length + 1 + n.length));
}
const g5 = 5;
let y5 = class Qw {
  constructor(e, t) {
    this.pos = e, this.oracle = t, this.nodes = [], this.lineStart = -1, this.lineEnd = -1, this.covering = null, this.writtenTo = e;
  }
  get isCovered() {
    return this.covering && this.nodes[this.nodes.length - 1] == this.covering;
  }
  span(e, t) {
    if (this.lineStart > -1) {
      let n = Math.min(t, this.lineEnd), r = this.nodes[this.nodes.length - 1];
      r instanceof Li ? r.length += n - this.pos : (n > this.pos || !this.isCovered) && this.nodes.push(new Li(n - this.pos, -1)), this.writtenTo = n, t > n && (this.nodes.push(null), this.writtenTo++, this.lineStart = -1);
    }
    this.pos = t;
  }
  point(e, t, n) {
    if (e < t || n.heightRelevant) {
      let r = n.widget ? n.widget.estimatedHeight : 0, s = n.widget ? n.widget.lineBreaks : 0;
      r < 0 && (r = this.oracle.lineHeight);
      let o = t - e;
      n.block ? this.addBlock(new vw(o, r, n)) : (o || s || r >= g5) && this.addLineDeco(r, s, o);
    } else t > e && this.span(e, t);
    this.lineEnd > -1 && this.lineEnd < this.pos && (this.lineEnd = this.oracle.doc.lineAt(this.pos).to);
  }
  enterLine() {
    if (this.lineStart > -1)
      return;
    let { from: e, to: t } = this.oracle.doc.lineAt(this.pos);
    this.lineStart = e, this.lineEnd = t, this.writtenTo < e && ((this.writtenTo < e - 1 || this.nodes[this.nodes.length - 1] == null) && this.nodes.push(this.blankContent(this.writtenTo, e - 1)), this.nodes.push(null)), this.pos > e && this.nodes.push(new Li(this.pos - e, -1)), this.writtenTo = this.pos;
  }
  blankContent(e, t) {
    let n = new ts(t - e);
    return this.oracle.doc.lineAt(e).to == t && (n.flags |= 4), n;
  }
  ensureLine() {
    this.enterLine();
    let e = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;
    if (e instanceof Li)
      return e;
    let t = new Li(0, -1);
    return this.nodes.push(t), t;
  }
  addBlock(e) {
    this.enterLine();
    let t = e.deco;
    t && t.startSide > 0 && !this.isCovered && this.ensureLine(), this.nodes.push(e), this.writtenTo = this.pos = this.pos + e.length, t && t.endSide > 0 && (this.covering = e);
  }
  addLineDeco(e, t, n) {
    let r = this.ensureLine();
    r.length += n, r.collapsed += n, r.widgetHeight = Math.max(r.widgetHeight, e), r.breaks += t, this.writtenTo = this.pos = this.pos + n;
  }
  finish(e) {
    let t = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];
    this.lineStart > -1 && !(t instanceof Li) && !this.isCovered ? this.nodes.push(new Li(0, -1)) : (this.writtenTo < this.pos || t == null) && this.nodes.push(this.blankContent(this.writtenTo, this.pos));
    let n = e;
    for (let r of this.nodes)
      r instanceof Li && r.updateHeight(this.oracle, n), n += r ? r.length : 1;
    return this.nodes;
  }
  // Always called with a region that on both sides either stretches
  // to a line break or the end of the document.
  // The returned array uses null to indicate line breaks, but never
  // starts or ends in a line break, or has multiple line breaks next
  // to each other.
  static build(e, t, n, r) {
    let s = new Qw(n, e);
    return qe.spans(t, n, r, s, 0), s.finish(n);
  }
};
function S5(i, e, t) {
  let n = new b5();
  return qe.compare(i, e, t, n, 0), n.changes;
}
let b5 = class {
  constructor() {
    this.changes = [];
  }
  compareRange() {
  }
  comparePoint(e, t, n, r) {
    (e < t || n && n.heightRelevant || r && r.heightRelevant) && Xa(e, t, this.changes, 5);
  }
};
function x5(i, e) {
  let t = i.getBoundingClientRect(), n = i.ownerDocument, r = n.defaultView || window, s = Math.max(0, t.left), o = Math.min(r.innerWidth, t.right), l = Math.max(0, t.top), a = Math.min(r.innerHeight, t.bottom);
  for (let h = i.parentNode; h && h != n.body; )
    if (h.nodeType == 1) {
      let c = h, f = window.getComputedStyle(c);
      if ((c.scrollHeight > c.clientHeight || c.scrollWidth > c.clientWidth) && f.overflow != "visible") {
        let u = c.getBoundingClientRect();
        s = Math.max(s, u.left), o = Math.min(o, u.right), l = Math.max(l, u.top), a = Math.min(h == i.parentNode ? r.innerHeight : a, u.bottom);
      }
      h = f.position == "absolute" || f.position == "fixed" ? c.offsetParent : c.parentNode;
    } else if (h.nodeType == 11)
      h = h.host;
    else
      break;
  return {
    left: s - t.left,
    right: Math.max(s, o) - t.left,
    top: l - (t.top + e),
    bottom: Math.max(l, a) - (t.top + e)
  };
}
function w5(i) {
  let e = i.getBoundingClientRect(), t = i.ownerDocument.defaultView || window;
  return e.left < t.innerWidth && e.right > 0 && e.top < t.innerHeight && e.bottom > 0;
}
function k5(i, e) {
  let t = i.getBoundingClientRect();
  return {
    left: 0,
    right: t.right - t.left,
    top: e,
    bottom: t.bottom - (t.top + e)
  };
}
let hf = class {
  constructor(e, t, n, r) {
    this.from = e, this.to = t, this.size = n, this.displaySize = r;
  }
  static same(e, t) {
    if (e.length != t.length)
      return !1;
    for (let n = 0; n < e.length; n++) {
      let r = e[n], s = t[n];
      if (r.from != s.from || r.to != s.to || r.size != s.size)
        return !1;
    }
    return !0;
  }
  draw(e, t) {
    return K.replace({
      widget: new v5(this.displaySize * (t ? e.scaleY : e.scaleX), t)
    }).range(this.from, this.to);
  }
}, v5 = class extends wn {
  constructor(e, t) {
    super(), this.size = e, this.vertical = t;
  }
  eq(e) {
    return e.size == this.size && e.vertical == this.vertical;
  }
  toDOM() {
    let e = document.createElement("div");
    return this.vertical ? e.style.height = this.size + "px" : (e.style.width = this.size + "px", e.style.height = "2px", e.style.display = "inline-block"), e;
  }
  get estimatedHeight() {
    return this.vertical ? this.size : -1;
  }
}, r0 = class {
  constructor(e) {
    this.state = e, this.pixelViewport = { left: 0, right: window.innerWidth, top: 0, bottom: 0 }, this.inView = !0, this.paddingTop = 0, this.paddingBottom = 0, this.contentDOMWidth = 0, this.contentDOMHeight = 0, this.editorHeight = 0, this.editorWidth = 0, this.scrollTop = 0, this.scrolledToBottom = !1, this.scaleX = 1, this.scaleY = 1, this.scrollAnchorPos = 0, this.scrollAnchorHeight = -1, this.scaler = s0, this.scrollTarget = null, this.printing = !1, this.mustMeasureContent = !0, this.defaultTextDirection = Ce.LTR, this.visibleRanges = [], this.mustEnforceCursorAssoc = !1;
    let t = e.facet(Qp).some((n) => typeof n != "function" && n.class == "cm-lineWrapping");
    this.heightOracle = new O5(t), this.stateDeco = e.facet(Vo).filter((n) => typeof n != "function"), this.heightMap = ui.empty().applyChanges(this.stateDeco, me.empty, this.heightOracle.setDoc(e.doc), [new Dn(0, 0, 0, e.doc.length)]);
    for (let n = 0; n < 2 && (this.viewport = this.getViewport(0, null), !!this.updateForViewport()); n++)
      ;
    this.updateViewportLines(), this.lineGaps = this.ensureLineGaps([]), this.lineGapDeco = K.set(this.lineGaps.map((n) => n.draw(this, !1))), this.computeVisibleRanges();
  }
  updateForViewport() {
    let e = [this.viewport], { main: t } = this.state.selection;
    for (let n = 0; n <= 1; n++) {
      let r = n ? t.head : t.anchor;
      if (!e.some(({ from: s, to: o }) => r >= s && r <= o)) {
        let { from: s, to: o } = this.lineBlockAt(r);
        e.push(new Ul(s, o));
      }
    }
    return this.viewports = e.sort((n, r) => n.from - r.from), this.updateScaler();
  }
  updateScaler() {
    let e = this.scaler;
    return this.scaler = this.heightMap.height <= 7e6 ? s0 : new $5(this.heightOracle, this.heightMap, this.viewports), e.eq(this.scaler) ? 0 : 2;
  }
  updateViewportLines() {
    this.viewportLines = [], this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.heightOracle.setDoc(this.state.doc), 0, 0, (e) => {
      this.viewportLines.push(fo(e, this.scaler));
    });
  }
  update(e, t = null) {
    this.state = e.state;
    let n = this.stateDeco;
    this.stateDeco = this.state.facet(Vo).filter((c) => typeof c != "function");
    let r = e.changedRanges, s = Dn.extendWithRanges(r, S5(n, this.stateDeco, e ? e.changes : mi.empty(this.state.doc.length))), o = this.heightMap.height, l = this.scrolledToBottom ? null : this.scrollAnchorAt(this.scrollTop);
    i0(), this.heightMap = this.heightMap.applyChanges(this.stateDeco, e.startState.doc, this.heightOracle.setDoc(this.state.doc), s), (this.heightMap.height != o || Os) && (e.flags |= 2), l ? (this.scrollAnchorPos = e.changes.mapPos(l.from, -1), this.scrollAnchorHeight = l.top) : (this.scrollAnchorPos = -1, this.scrollAnchorHeight = o);
    let a = s.length ? this.mapViewport(this.viewport, e.changes) : this.viewport;
    (t && (t.range.head < a.from || t.range.head > a.to) || !this.viewportIsAppropriate(a)) && (a = this.getViewport(0, t));
    let h = a.from != this.viewport.from || a.to != this.viewport.to;
    this.viewport = a, e.flags |= this.updateForViewport(), (h || !e.changes.empty || e.flags & 2) && this.updateViewportLines(), (this.lineGaps.length || this.viewport.to - this.viewport.from > 4e3) && this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, e.changes))), e.flags |= this.computeVisibleRanges(e.changes), t && (this.scrollTarget = t), !this.mustEnforceCursorAssoc && e.selectionSet && e.view.lineWrapping && e.state.selection.main.empty && e.state.selection.main.assoc && !e.state.facet(rw) && (this.mustEnforceCursorAssoc = !0);
  }
  measure(e) {
    let t = e.contentDOM, n = window.getComputedStyle(t), r = this.heightOracle, s = n.whiteSpace;
    this.defaultTextDirection = n.direction == "rtl" ? Ce.RTL : Ce.LTR;
    let o = this.heightOracle.mustRefreshForWrapping(s), l = t.getBoundingClientRect(), a = o || this.mustMeasureContent || this.contentDOMHeight != l.height;
    this.contentDOMHeight = l.height, this.mustMeasureContent = !1;
    let h = 0, c = 0;
    if (l.width && l.height) {
      let { scaleX: k, scaleY: w } = $x(t, l);
      (k > 5e-3 && Math.abs(this.scaleX - k) > 5e-3 || w > 5e-3 && Math.abs(this.scaleY - w) > 5e-3) && (this.scaleX = k, this.scaleY = w, h |= 16, o = a = !0);
    }
    let f = (parseInt(n.paddingTop) || 0) * this.scaleY, u = (parseInt(n.paddingBottom) || 0) * this.scaleY;
    (this.paddingTop != f || this.paddingBottom != u) && (this.paddingTop = f, this.paddingBottom = u, h |= 18), this.editorWidth != e.scrollDOM.clientWidth && (r.lineWrapping && (a = !0), this.editorWidth = e.scrollDOM.clientWidth, h |= 16);
    let d = e.scrollDOM.scrollTop * this.scaleY;
    this.scrollTop != d && (this.scrollAnchorHeight = -1, this.scrollTop = d), this.scrolledToBottom = Rx(e.scrollDOM);
    let O = (this.printing ? k5 : x5)(t, this.paddingTop), p = O.top - this.pixelViewport.top, m = O.bottom - this.pixelViewport.bottom;
    this.pixelViewport = O;
    let g = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;
    if (g != this.inView && (this.inView = g, g && (a = !0)), !this.inView && !this.scrollTarget && !w5(e.dom))
      return 0;
    let S = l.width;
    if ((this.contentDOMWidth != S || this.editorHeight != e.scrollDOM.clientHeight) && (this.contentDOMWidth = l.width, this.editorHeight = e.scrollDOM.clientHeight, h |= 16), a) {
      let k = e.docView.measureVisibleLineHeights(this.viewport);
      if (r.mustRefreshForHeights(k) && (o = !0), o || r.lineWrapping && Math.abs(S - this.contentDOMWidth) > r.charWidth) {
        let { lineHeight: w, charWidth: b, textHeight: Q } = e.docView.measureTextSize();
        o = w > 0 && r.refresh(s, w, b, Q, S / b, k), o && (e.docView.minWidth = 0, h |= 16);
      }
      p > 0 && m > 0 ? c = Math.max(p, m) : p < 0 && m < 0 && (c = Math.min(p, m)), i0();
      for (let w of this.viewports) {
        let b = w.from == this.viewport.from ? k : e.docView.measureVisibleLineHeights(w);
        this.heightMap = (o ? ui.empty().applyChanges(this.stateDeco, me.empty, this.heightOracle, [new Dn(0, 0, 0, e.state.doc.length)]) : this.heightMap).updateHeight(r, 0, o, new p5(w.from, b));
      }
      Os && (h |= 2);
    }
    let x = !this.viewportIsAppropriate(this.viewport, c) || this.scrollTarget && (this.scrollTarget.range.head < this.viewport.from || this.scrollTarget.range.head > this.viewport.to);
    return x && (h & 2 && (h |= this.updateScaler()), this.viewport = this.getViewport(c, this.scrollTarget), h |= this.updateForViewport()), (h & 2 || x) && this.updateViewportLines(), (this.lineGaps.length || this.viewport.to - this.viewport.from > 4e3) && this.updateLineGaps(this.ensureLineGaps(o ? [] : this.lineGaps, e)), h |= this.computeVisibleRanges(), this.mustEnforceCursorAssoc && (this.mustEnforceCursorAssoc = !1, e.docView.enforceCursorAssoc()), h;
  }
  get visibleTop() {
    return this.scaler.fromDOM(this.pixelViewport.top);
  }
  get visibleBottom() {
    return this.scaler.fromDOM(this.pixelViewport.bottom);
  }
  getViewport(e, t) {
    let n = 0.5 - Math.max(-0.5, Math.min(0.5, e / 1e3 / 2)), r = this.heightMap, s = this.heightOracle, { visibleTop: o, visibleBottom: l } = this, a = new Ul(r.lineAt(o - n * 1e3, $e.ByHeight, s, 0, 0).from, r.lineAt(l + (1 - n) * 1e3, $e.ByHeight, s, 0, 0).to);
    if (t) {
      let { head: h } = t.range;
      if (h < a.from || h > a.to) {
        let c = Math.min(this.editorHeight, this.pixelViewport.bottom - this.pixelViewport.top), f = r.lineAt(h, $e.ByPos, s, 0, 0), u;
        t.y == "center" ? u = (f.top + f.bottom) / 2 - c / 2 : t.y == "start" || t.y == "nearest" && h < a.from ? u = f.top : u = f.bottom - c, a = new Ul(r.lineAt(u - 1e3 / 2, $e.ByHeight, s, 0, 0).from, r.lineAt(u + c + 1e3 / 2, $e.ByHeight, s, 0, 0).to);
      }
    }
    return a;
  }
  mapViewport(e, t) {
    let n = t.mapPos(e.from, -1), r = t.mapPos(e.to, 1);
    return new Ul(this.heightMap.lineAt(n, $e.ByPos, this.heightOracle, 0, 0).from, this.heightMap.lineAt(r, $e.ByPos, this.heightOracle, 0, 0).to);
  }
  // Checks if a given viewport covers the visible part of the
  // document and not too much beyond that.
  viewportIsAppropriate({ from: e, to: t }, n = 0) {
    if (!this.inView)
      return !0;
    let { top: r } = this.heightMap.lineAt(e, $e.ByPos, this.heightOracle, 0, 0), { bottom: s } = this.heightMap.lineAt(t, $e.ByPos, this.heightOracle, 0, 0), { visibleTop: o, visibleBottom: l } = this;
    return (e == 0 || r <= o - Math.max(10, Math.min(
      -n,
      250
      /* VP.MaxCoverMargin */
    ))) && (t == this.state.doc.length || s >= l + Math.max(10, Math.min(
      n,
      250
      /* VP.MaxCoverMargin */
    ))) && r > o - 2 * 1e3 && s < l + 2 * 1e3;
  }
  mapLineGaps(e, t) {
    if (!e.length || t.empty)
      return e;
    let n = [];
    for (let r of e)
      t.touchesRange(r.from, r.to) || n.push(new hf(t.mapPos(r.from), t.mapPos(r.to), r.size, r.displaySize));
    return n;
  }
  // Computes positions in the viewport where the start or end of a
  // line should be hidden, trying to reuse existing line gaps when
  // appropriate to avoid unneccesary redraws.
  // Uses crude character-counting for the positioning and sizing,
  // since actual DOM coordinates aren't always available and
  // predictable. Relies on generous margins (see LG.Margin) to hide
  // the artifacts this might produce from the user.
  ensureLineGaps(e, t) {
    let n = this.heightOracle.lineWrapping, r = n ? 1e4 : 2e3, s = r >> 1, o = r << 1;
    if (this.defaultTextDirection != Ce.LTR && !n)
      return [];
    let l = [], a = (c, f, u, d) => {
      if (f - c < s)
        return;
      let O = this.state.selection.main, p = [O.from];
      O.empty || p.push(O.to);
      for (let g of p)
        if (g > c && g < f) {
          a(c, g - 10, u, d), a(g + 10, f, u, d);
          return;
        }
      let m = P5(e, (g) => g.from >= u.from && g.to <= u.to && Math.abs(g.from - c) < s && Math.abs(g.to - f) < s && !p.some((S) => g.from < S && g.to > S));
      if (!m) {
        if (f < u.to && t && n && t.visibleRanges.some((x) => x.from <= f && x.to >= f)) {
          let x = t.moveToLineBoundary(C.cursor(f), !1, !0).head;
          x > c && (f = x);
        }
        let g = this.gapSize(u, c, f, d), S = n || g < 2e6 ? g : 2e6;
        m = new hf(c, f, g, S);
      }
      l.push(m);
    }, h = (c) => {
      if (c.length < o || c.type != vt.Text)
        return;
      let f = Q5(c.from, c.to, this.stateDeco);
      if (f.total < o)
        return;
      let u = this.scrollTarget ? this.scrollTarget.range.head : null, d, O;
      if (n) {
        let p = r / this.heightOracle.lineLength * this.heightOracle.lineHeight, m, g;
        if (u != null) {
          let S = Gl(f, u), x = ((this.visibleBottom - this.visibleTop) / 2 + p) / c.height;
          m = S - x, g = S + x;
        } else
          m = (this.visibleTop - c.top - p) / c.height, g = (this.visibleBottom - c.top + p) / c.height;
        d = Yl(f, m), O = Yl(f, g);
      } else {
        let p = f.total * this.heightOracle.charWidth, m = r * this.heightOracle.charWidth, g = 0;
        if (p > 2e6)
          for (let b of e)
            b.from >= c.from && b.from < c.to && b.size != b.displaySize && b.from * this.heightOracle.charWidth + g < this.pixelViewport.left && (g = b.size - b.displaySize);
        let S = this.pixelViewport.left + g, x = this.pixelViewport.right + g, k, w;
        if (u != null) {
          let b = Gl(f, u), Q = ((x - S) / 2 + m) / p;
          k = b - Q, w = b + Q;
        } else
          k = (S - m) / p, w = (x + m) / p;
        d = Yl(f, k), O = Yl(f, w);
      }
      d > c.from && a(c.from, d, c, f), O < c.to && a(O, c.to, c, f);
    };
    for (let c of this.viewportLines)
      Array.isArray(c.type) ? c.type.forEach(h) : h(c);
    return l;
  }
  gapSize(e, t, n, r) {
    let s = Gl(r, n) - Gl(r, t);
    return this.heightOracle.lineWrapping ? e.height * s : r.total * this.heightOracle.charWidth * s;
  }
  updateLineGaps(e) {
    hf.same(e, this.lineGaps) || (this.lineGaps = e, this.lineGapDeco = K.set(e.map((t) => t.draw(this, this.heightOracle.lineWrapping))));
  }
  computeVisibleRanges(e) {
    let t = this.stateDeco;
    this.lineGaps.length && (t = t.concat(this.lineGapDeco));
    let n = [];
    qe.spans(t, this.viewport.from, this.viewport.to, {
      span(s, o) {
        n.push({ from: s, to: o });
      },
      point() {
      }
    }, 20);
    let r = 0;
    if (n.length != this.visibleRanges.length)
      r = 12;
    else
      for (let s = 0; s < n.length && !(r & 8); s++) {
        let o = this.visibleRanges[s], l = n[s];
        (o.from != l.from || o.to != l.to) && (r |= 4, e && e.mapPos(o.from, -1) == l.from && e.mapPos(o.to, 1) == l.to || (r |= 8));
      }
    return this.visibleRanges = n, r;
  }
  lineBlockAt(e) {
    return e >= this.viewport.from && e <= this.viewport.to && this.viewportLines.find((t) => t.from <= e && t.to >= e) || fo(this.heightMap.lineAt(e, $e.ByPos, this.heightOracle, 0, 0), this.scaler);
  }
  lineBlockAtHeight(e) {
    return e >= this.viewportLines[0].top && e <= this.viewportLines[this.viewportLines.length - 1].bottom && this.viewportLines.find((t) => t.top <= e && t.bottom >= e) || fo(this.heightMap.lineAt(this.scaler.fromDOM(e), $e.ByHeight, this.heightOracle, 0, 0), this.scaler);
  }
  scrollAnchorAt(e) {
    let t = this.lineBlockAtHeight(e + 8);
    return t.from >= this.viewport.from || this.viewportLines[0].top - e > 200 ? t : this.viewportLines[0];
  }
  elementAtHeight(e) {
    return fo(this.heightMap.blockAt(this.scaler.fromDOM(e), this.heightOracle, 0, 0), this.scaler);
  }
  get docHeight() {
    return this.scaler.toDOM(this.heightMap.height);
  }
  get contentHeight() {
    return this.docHeight + this.paddingTop + this.paddingBottom;
  }
}, Ul = class {
  constructor(e, t) {
    this.from = e, this.to = t;
  }
};
function Q5(i, e, t) {
  let n = [], r = i, s = 0;
  return qe.spans(t, i, e, {
    span() {
    },
    point(o, l) {
      o > r && (n.push({ from: r, to: o }), s += o - r), r = l;
    }
  }, 20), r < e && (n.push({ from: r, to: e }), s += e - r), { total: s, ranges: n };
}
function Yl({ total: i, ranges: e }, t) {
  if (t <= 0)
    return e[0].from;
  if (t >= 1)
    return e[e.length - 1].to;
  let n = Math.floor(i * t);
  for (let r = 0; ; r++) {
    let { from: s, to: o } = e[r], l = o - s;
    if (n <= l)
      return s + n;
    n -= l;
  }
}
function Gl(i, e) {
  let t = 0;
  for (let { from: n, to: r } of i.ranges) {
    if (e <= r) {
      t += e - n;
      break;
    }
    t += r - n;
  }
  return t / i.total;
}
function P5(i, e) {
  for (let t of i)
    if (e(t))
      return t;
}
const s0 = {
  toDOM(i) {
    return i;
  },
  fromDOM(i) {
    return i;
  },
  scale: 1,
  eq(i) {
    return i == this;
  }
};
let $5 = class Pw {
  constructor(e, t, n) {
    let r = 0, s = 0, o = 0;
    this.viewports = n.map(({ from: l, to: a }) => {
      let h = t.lineAt(l, $e.ByPos, e, 0, 0).top, c = t.lineAt(a, $e.ByPos, e, 0, 0).bottom;
      return r += c - h, { from: l, to: a, top: h, bottom: c, domTop: 0, domBottom: 0 };
    }), this.scale = (7e6 - r) / (t.height - r);
    for (let l of this.viewports)
      l.domTop = o + (l.top - s) * this.scale, o = l.domBottom = l.domTop + (l.bottom - l.top), s = l.bottom;
  }
  toDOM(e) {
    for (let t = 0, n = 0, r = 0; ; t++) {
      let s = t < this.viewports.length ? this.viewports[t] : null;
      if (!s || e < s.top)
        return r + (e - n) * this.scale;
      if (e <= s.bottom)
        return s.domTop + (e - s.top);
      n = s.bottom, r = s.domBottom;
    }
  }
  fromDOM(e) {
    for (let t = 0, n = 0, r = 0; ; t++) {
      let s = t < this.viewports.length ? this.viewports[t] : null;
      if (!s || e < s.domTop)
        return n + (e - r) / this.scale;
      if (e <= s.domBottom)
        return s.top + (e - s.domTop);
      n = s.bottom, r = s.domBottom;
    }
  }
  eq(e) {
    return e instanceof Pw ? this.scale == e.scale && this.viewports.length == e.viewports.length && this.viewports.every((t, n) => t.from == e.viewports[n].from && t.to == e.viewports[n].to) : !1;
  }
};
function fo(i, e) {
  if (e.scale == 1)
    return i;
  let t = e.toDOM(i.top), n = e.toDOM(i.bottom);
  return new An(i.from, i.length, t, n - t, Array.isArray(i._content) ? i._content.map((r) => fo(r, e)) : i._content);
}
const Fl = /* @__PURE__ */ I.define({ combine: (i) => i.join(" ") }), xd = /* @__PURE__ */ I.define({ combine: (i) => i.indexOf(!0) > -1 }), wd = /* @__PURE__ */ mt.newName(), $w = /* @__PURE__ */ mt.newName(), Tw = /* @__PURE__ */ mt.newName(), Cw = { "&light": "." + $w, "&dark": "." + Tw };
function kd(i, e, t) {
  return new mt(e, {
    finish(n) {
      return /&/.test(n) ? n.replace(/&\w*/, (r) => {
        if (r == "&")
          return i;
        if (!t || !t[r])
          throw new RangeError(`Unsupported selector: ${r}`);
        return t[r];
      }) : i + " " + n;
    }
  });
}
const T5 = /* @__PURE__ */ kd("." + wd, {
  "&": {
    position: "relative !important",
    boxSizing: "border-box",
    "&.cm-focused": {
      // Provide a simple default outline to make sure a focused
      // editor is visually distinct. Can't leave the default behavior
      // because that will apply to the content element, which is
      // inside the scrollable container and doesn't include the
      // gutters. We also can't use an 'auto' outline, since those
      // are, for some reason, drawn behind the element content, which
      // will cause things like the active line background to cover
      // the outline (#297).
      outline: "1px dotted #212121"
    },
    display: "flex !important",
    flexDirection: "column"
  },
  ".cm-scroller": {
    display: "flex !important",
    alignItems: "flex-start !important",
    fontFamily: "monospace",
    lineHeight: 1.4,
    height: "100%",
    overflowX: "auto",
    position: "relative",
    zIndex: 0,
    overflowAnchor: "none"
  },
  ".cm-content": {
    margin: 0,
    flexGrow: 2,
    flexShrink: 0,
    display: "block",
    whiteSpace: "pre",
    wordWrap: "normal",
    // https://github.com/codemirror/dev/issues/456
    boxSizing: "border-box",
    minHeight: "100%",
    padding: "4px 0",
    outline: "none",
    "&[contenteditable=true]": {
      WebkitUserModify: "read-write-plaintext-only"
    }
  },
  ".cm-lineWrapping": {
    whiteSpace_fallback: "pre-wrap",
    // For IE
    whiteSpace: "break-spaces",
    wordBreak: "break-word",
    // For Safari, which doesn't support overflow-wrap: anywhere
    overflowWrap: "anywhere",
    flexShrink: 1
  },
  "&light .cm-content": { caretColor: "black" },
  "&dark .cm-content": { caretColor: "white" },
  ".cm-line": {
    display: "block",
    padding: "0 2px 0 6px"
  },
  ".cm-layer": {
    position: "absolute",
    left: 0,
    top: 0,
    contain: "size style",
    "& > *": {
      position: "absolute"
    }
  },
  "&light .cm-selectionBackground": {
    background: "#d9d9d9"
  },
  "&dark .cm-selectionBackground": {
    background: "#222"
  },
  "&light.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
    background: "#d7d4f0"
  },
  "&dark.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
    background: "#233"
  },
  ".cm-cursorLayer": {
    pointerEvents: "none"
  },
  "&.cm-focused > .cm-scroller > .cm-cursorLayer": {
    animation: "steps(1) cm-blink 1.2s infinite"
  },
  // Two animations defined so that we can switch between them to
  // restart the animation without forcing another style
  // recomputation.
  "@keyframes cm-blink": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
  "@keyframes cm-blink2": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
  ".cm-cursor, .cm-dropCursor": {
    borderLeft: "1.2px solid black",
    marginLeft: "-0.6px",
    pointerEvents: "none"
  },
  ".cm-cursor": {
    display: "none"
  },
  "&dark .cm-cursor": {
    borderLeftColor: "#ddd"
  },
  ".cm-dropCursor": {
    position: "absolute"
  },
  "&.cm-focused > .cm-scroller > .cm-cursorLayer .cm-cursor": {
    display: "block"
  },
  ".cm-iso": {
    unicodeBidi: "isolate"
  },
  ".cm-announced": {
    position: "fixed",
    top: "-10000px"
  },
  "@media print": {
    ".cm-announced": { display: "none" }
  },
  "&light .cm-activeLine": { backgroundColor: "#cceeff44" },
  "&dark .cm-activeLine": { backgroundColor: "#99eeff33" },
  "&light .cm-specialChar": { color: "red" },
  "&dark .cm-specialChar": { color: "#f78" },
  ".cm-gutters": {
    flexShrink: 0,
    display: "flex",
    height: "100%",
    boxSizing: "border-box",
    insetInlineStart: 0,
    zIndex: 200
  },
  "&light .cm-gutters": {
    backgroundColor: "#f5f5f5",
    color: "#6c6c6c",
    borderRight: "1px solid #ddd"
  },
  "&dark .cm-gutters": {
    backgroundColor: "#333338",
    color: "#ccc"
  },
  ".cm-gutter": {
    display: "flex !important",
    // Necessary -- prevents margin collapsing
    flexDirection: "column",
    flexShrink: 0,
    boxSizing: "border-box",
    minHeight: "100%",
    overflow: "hidden"
  },
  ".cm-gutterElement": {
    boxSizing: "border-box"
  },
  ".cm-lineNumbers .cm-gutterElement": {
    padding: "0 3px 0 5px",
    minWidth: "20px",
    textAlign: "right",
    whiteSpace: "nowrap"
  },
  "&light .cm-activeLineGutter": {
    backgroundColor: "#e2f2ff"
  },
  "&dark .cm-activeLineGutter": {
    backgroundColor: "#222227"
  },
  ".cm-panels": {
    boxSizing: "border-box",
    position: "sticky",
    left: 0,
    right: 0,
    zIndex: 300
  },
  "&light .cm-panels": {
    backgroundColor: "#f5f5f5",
    color: "black"
  },
  "&light .cm-panels-top": {
    borderBottom: "1px solid #ddd"
  },
  "&light .cm-panels-bottom": {
    borderTop: "1px solid #ddd"
  },
  "&dark .cm-panels": {
    backgroundColor: "#333338",
    color: "white"
  },
  ".cm-dialog": {
    padding: "2px 19px 4px 6px",
    position: "relative",
    "& label": { fontSize: "80%" }
  },
  ".cm-dialog-close": {
    position: "absolute",
    top: "3px",
    right: "4px",
    backgroundColor: "inherit",
    border: "none",
    font: "inherit",
    fontSize: "14px",
    padding: "0"
  },
  ".cm-tab": {
    display: "inline-block",
    overflow: "hidden",
    verticalAlign: "bottom"
  },
  ".cm-widgetBuffer": {
    verticalAlign: "text-top",
    height: "1em",
    width: 0,
    display: "inline"
  },
  ".cm-placeholder": {
    color: "#888",
    display: "inline-block",
    verticalAlign: "top",
    userSelect: "none"
  },
  ".cm-highlightSpace": {
    backgroundImage: "radial-gradient(circle at 50% 55%, #aaa 20%, transparent 5%)",
    backgroundPosition: "center"
  },
  ".cm-highlightTab": {
    backgroundImage: `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="200" height="20"><path stroke="%23888" stroke-width="1" fill="none" d="M1 10H196L190 5M190 15L196 10M197 4L197 16"/></svg>')`,
    backgroundSize: "auto 100%",
    backgroundPosition: "right 90%",
    backgroundRepeat: "no-repeat"
  },
  ".cm-trailingSpace": {
    backgroundColor: "#ff332255"
  },
  ".cm-button": {
    verticalAlign: "middle",
    color: "inherit",
    fontSize: "70%",
    padding: ".2em 1em",
    borderRadius: "1px"
  },
  "&light .cm-button": {
    backgroundImage: "linear-gradient(#eff1f5, #d9d9df)",
    border: "1px solid #888",
    "&:active": {
      backgroundImage: "linear-gradient(#b4b4b4, #d0d3d6)"
    }
  },
  "&dark .cm-button": {
    backgroundImage: "linear-gradient(#393939, #111)",
    border: "1px solid #888",
    "&:active": {
      backgroundImage: "linear-gradient(#111, #333)"
    }
  },
  ".cm-textfield": {
    verticalAlign: "middle",
    color: "inherit",
    fontSize: "70%",
    border: "1px solid silver",
    padding: ".2em .5em"
  },
  "&light .cm-textfield": {
    backgroundColor: "white"
  },
  "&dark .cm-textfield": {
    border: "1px solid #555",
    backgroundColor: "inherit"
  }
}, Cw), C5 = {
  childList: !0,
  characterData: !0,
  subtree: !0,
  attributes: !0,
  characterDataOldValue: !0
}, cf = z.ie && z.ie_version <= 11;
let R5 = class {
  constructor(e) {
    this.view = e, this.active = !1, this.editContext = null, this.selectionRange = new hE(), this.selectionChanged = !1, this.delayedFlush = -1, this.resizeTimeout = -1, this.queue = [], this.delayedAndroidKey = null, this.flushingAndroidKey = -1, this.lastChange = 0, this.scrollTargets = [], this.intersection = null, this.resizeScroll = null, this.intersecting = !1, this.gapIntersection = null, this.gaps = [], this.printQuery = null, this.parentCheck = -1, this.dom = e.contentDOM, this.observer = new MutationObserver((t) => {
      for (let n of t)
        this.queue.push(n);
      (z.ie && z.ie_version <= 11 || z.ios && e.composing) && t.some((n) => n.type == "childList" && n.removedNodes.length || n.type == "characterData" && n.oldValue.length > n.target.nodeValue.length) ? this.flushSoon() : this.flush();
    }), window.EditContext && e.constructor.EDIT_CONTEXT !== !1 && // Chrome <126 doesn't support inverted selections in edit context (#1392)
    !(z.chrome && z.chrome_version < 126) && (this.editContext = new E5(e), e.state.facet(fn) && (e.contentDOM.editContext = this.editContext.editContext)), cf && (this.onCharData = (t) => {
      this.queue.push({
        target: t.target,
        type: "characterData",
        oldValue: t.prevValue
      }), this.flushSoon();
    }), this.onSelectionChange = this.onSelectionChange.bind(this), this.onResize = this.onResize.bind(this), this.onPrint = this.onPrint.bind(this), this.onScroll = this.onScroll.bind(this), window.matchMedia && (this.printQuery = window.matchMedia("print")), typeof ResizeObserver == "function" && (this.resizeScroll = new ResizeObserver(() => {
      var t;
      ((t = this.view.docView) === null || t === void 0 ? void 0 : t.lastUpdate) < Date.now() - 75 && this.onResize();
    }), this.resizeScroll.observe(e.scrollDOM)), this.addWindowListeners(this.win = e.win), this.start(), typeof IntersectionObserver == "function" && (this.intersection = new IntersectionObserver((t) => {
      this.parentCheck < 0 && (this.parentCheck = setTimeout(this.listenForScroll.bind(this), 1e3)), t.length > 0 && t[t.length - 1].intersectionRatio > 0 != this.intersecting && (this.intersecting = !this.intersecting, this.intersecting != this.view.inView && this.onScrollChanged(document.createEvent("Event")));
    }, { threshold: [0, 1e-3] }), this.intersection.observe(this.dom), this.gapIntersection = new IntersectionObserver((t) => {
      t.length > 0 && t[t.length - 1].intersectionRatio > 0 && this.onScrollChanged(document.createEvent("Event"));
    }, {})), this.listenForScroll(), this.readSelectionRange();
  }
  onScrollChanged(e) {
    this.view.inputState.runHandlers("scroll", e), this.intersecting && this.view.measure();
  }
  onScroll(e) {
    this.intersecting && this.flush(!1), this.editContext && this.view.requestMeasure(this.editContext.measureReq), this.onScrollChanged(e);
  }
  onResize() {
    this.resizeTimeout < 0 && (this.resizeTimeout = setTimeout(() => {
      this.resizeTimeout = -1, this.view.requestMeasure();
    }, 50));
  }
  onPrint(e) {
    (e.type == "change" || !e.type) && !e.matches || (this.view.viewState.printing = !0, this.view.measure(), setTimeout(() => {
      this.view.viewState.printing = !1, this.view.requestMeasure();
    }, 500));
  }
  updateGaps(e) {
    if (this.gapIntersection && (e.length != this.gaps.length || this.gaps.some((t, n) => t != e[n]))) {
      this.gapIntersection.disconnect();
      for (let t of e)
        this.gapIntersection.observe(t);
      this.gaps = e;
    }
  }
  onSelectionChange(e) {
    let t = this.selectionChanged;
    if (!this.readSelectionRange() || this.delayedAndroidKey)
      return;
    let { view: n } = this, r = this.selectionRange;
    if (n.state.facet(fn) ? n.root.activeElement != this.dom : !_a(this.dom, r))
      return;
    let s = r.anchorNode && n.docView.nearest(r.anchorNode);
    if (s && s.ignoreEvent(e)) {
      t || (this.selectionChanged = !1);
      return;
    }
    (z.ie && z.ie_version <= 11 || z.android && z.chrome) && !n.state.selection.main.empty && // (Selection.isCollapsed isn't reliable on IE)
    r.focusNode && vo(r.focusNode, r.focusOffset, r.anchorNode, r.anchorOffset) ? this.flushSoon() : this.flush(!1);
  }
  readSelectionRange() {
    let { view: e } = this, t = Zo(e.root);
    if (!t)
      return !1;
    let n = z.safari && e.root.nodeType == 11 && e.root.activeElement == this.dom && A5(this.view, t) || t;
    if (!n || this.selectionRange.eq(n))
      return !1;
    let r = _a(this.dom, n);
    return r && !this.selectionChanged && e.inputState.lastFocusTime > Date.now() - 200 && e.inputState.lastTouchTime < Date.now() - 300 && fE(this.dom, n) ? (this.view.inputState.lastFocusTime = 0, e.docView.updateSelection(), !1) : (this.selectionRange.setRange(n), r && (this.selectionChanged = !0), !0);
  }
  setSelectionRange(e, t) {
    this.selectionRange.set(e.node, e.offset, t.node, t.offset), this.selectionChanged = !1;
  }
  clearSelectionRange() {
    this.selectionRange.set(null, 0, null, 0);
  }
  listenForScroll() {
    this.parentCheck = -1;
    let e = 0, t = null;
    for (let n = this.dom; n; )
      if (n.nodeType == 1)
        !t && e < this.scrollTargets.length && this.scrollTargets[e] == n ? e++ : t || (t = this.scrollTargets.slice(0, e)), t && t.push(n), n = n.assignedSlot || n.parentNode;
      else if (n.nodeType == 11)
        n = n.host;
      else
        break;
    if (e < this.scrollTargets.length && !t && (t = this.scrollTargets.slice(0, e)), t) {
      for (let n of this.scrollTargets)
        n.removeEventListener("scroll", this.onScroll);
      for (let n of this.scrollTargets = t)
        n.addEventListener("scroll", this.onScroll);
    }
  }
  ignore(e) {
    if (!this.active)
      return e();
    try {
      return this.stop(), e();
    } finally {
      this.start(), this.clear();
    }
  }
  start() {
    this.active || (this.observer.observe(this.dom, C5), cf && this.dom.addEventListener("DOMCharacterDataModified", this.onCharData), this.active = !0);
  }
  stop() {
    this.active && (this.active = !1, this.observer.disconnect(), cf && this.dom.removeEventListener("DOMCharacterDataModified", this.onCharData));
  }
  // Throw away any pending changes
  clear() {
    this.processRecords(), this.queue.length = 0, this.selectionChanged = !1;
  }
  // Chrome Android, especially in combination with GBoard, not only
  // doesn't reliably fire regular key events, but also often
  // surrounds the effect of enter or backspace with a bunch of
  // composition events that, when interrupted, cause text duplication
  // or other kinds of corruption. This hack makes the editor back off
  // from handling DOM changes for a moment when such a key is
  // detected (via beforeinput or keydown), and then tries to flush
  // them or, if that has no effect, dispatches the given key.
  delayAndroidKey(e, t) {
    var n;
    if (!this.delayedAndroidKey) {
      let r = () => {
        let s = this.delayedAndroidKey;
        s && (this.clearDelayedAndroidKey(), this.view.inputState.lastKeyCode = s.keyCode, this.view.inputState.lastKeyTime = Date.now(), !this.flush() && s.force && es(this.dom, s.key, s.keyCode));
      };
      this.flushingAndroidKey = this.view.win.requestAnimationFrame(r);
    }
    (!this.delayedAndroidKey || e == "Enter") && (this.delayedAndroidKey = {
      key: e,
      keyCode: t,
      // Only run the key handler when no changes are detected if
      // this isn't coming right after another change, in which case
      // it is probably part of a weird chain of updates, and should
      // be ignored if it returns the DOM to its previous state.
      force: this.lastChange < Date.now() - 50 || !!(!((n = this.delayedAndroidKey) === null || n === void 0) && n.force)
    });
  }
  clearDelayedAndroidKey() {
    this.win.cancelAnimationFrame(this.flushingAndroidKey), this.delayedAndroidKey = null, this.flushingAndroidKey = -1;
  }
  flushSoon() {
    this.delayedFlush < 0 && (this.delayedFlush = this.view.win.requestAnimationFrame(() => {
      this.delayedFlush = -1, this.flush();
    }));
  }
  forceFlush() {
    this.delayedFlush >= 0 && (this.view.win.cancelAnimationFrame(this.delayedFlush), this.delayedFlush = -1), this.flush();
  }
  pendingRecords() {
    for (let e of this.observer.takeRecords())
      this.queue.push(e);
    return this.queue;
  }
  processRecords() {
    let e = this.pendingRecords();
    e.length && (this.queue = []);
    let t = -1, n = -1, r = !1;
    for (let s of e) {
      let o = this.readMutation(s);
      o && (o.typeOver && (r = !0), t == -1 ? { from: t, to: n } = o : (t = Math.min(o.from, t), n = Math.max(o.to, n)));
    }
    return { from: t, to: n, typeOver: r };
  }
  readChange() {
    let { from: e, to: t, typeOver: n } = this.processRecords(), r = this.selectionChanged && _a(this.dom, this.selectionRange);
    if (e < 0 && !r)
      return null;
    e > -1 && (this.lastChange = Date.now()), this.view.inputState.lastFocusTime = 0, this.selectionChanged = !1;
    let s = new jE(this.view, e, t, n);
    return this.view.docView.domChanged = { newSel: s.newSel ? s.newSel.main : null }, s;
  }
  // Apply pending changes, if any
  flush(e = !0) {
    if (this.delayedFlush >= 0 || this.delayedAndroidKey)
      return !1;
    e && this.readSelectionRange();
    let t = this.readChange();
    if (!t)
      return this.view.requestMeasure(), !1;
    let n = this.view.state, r = Ow(this.view, t);
    return this.view.state == n && (t.domChanged || t.newSel && !t.newSel.main.eq(this.view.state.selection.main)) && this.view.update([]), r;
  }
  readMutation(e) {
    let t = this.view.docView.nearest(e.target);
    if (!t || t.ignoreMutation(e))
      return null;
    if (t.markDirty(e.type == "attributes"), e.type == "attributes" && (t.flags |= 4), e.type == "childList") {
      let n = o0(t, e.previousSibling || e.target.previousSibling, -1), r = o0(t, e.nextSibling || e.target.nextSibling, 1);
      return {
        from: n ? t.posAfter(n) : t.posAtStart,
        to: r ? t.posBefore(r) : t.posAtEnd,
        typeOver: !1
      };
    } else return e.type == "characterData" ? { from: t.posAtStart, to: t.posAtEnd, typeOver: e.target.nodeValue == e.oldValue } : null;
  }
  setWindow(e) {
    e != this.win && (this.removeWindowListeners(this.win), this.win = e, this.addWindowListeners(this.win));
  }
  addWindowListeners(e) {
    e.addEventListener("resize", this.onResize), this.printQuery ? this.printQuery.addEventListener ? this.printQuery.addEventListener("change", this.onPrint) : this.printQuery.addListener(this.onPrint) : e.addEventListener("beforeprint", this.onPrint), e.addEventListener("scroll", this.onScroll), e.document.addEventListener("selectionchange", this.onSelectionChange);
  }
  removeWindowListeners(e) {
    e.removeEventListener("scroll", this.onScroll), e.removeEventListener("resize", this.onResize), this.printQuery ? this.printQuery.removeEventListener ? this.printQuery.removeEventListener("change", this.onPrint) : this.printQuery.removeListener(this.onPrint) : e.removeEventListener("beforeprint", this.onPrint), e.document.removeEventListener("selectionchange", this.onSelectionChange);
  }
  update(e) {
    this.editContext && (this.editContext.update(e), e.startState.facet(fn) != e.state.facet(fn) && (e.view.contentDOM.editContext = e.state.facet(fn) ? this.editContext.editContext : null));
  }
  destroy() {
    var e, t, n;
    this.stop(), (e = this.intersection) === null || e === void 0 || e.disconnect(), (t = this.gapIntersection) === null || t === void 0 || t.disconnect(), (n = this.resizeScroll) === null || n === void 0 || n.disconnect();
    for (let r of this.scrollTargets)
      r.removeEventListener("scroll", this.onScroll);
    this.removeWindowListeners(this.win), clearTimeout(this.parentCheck), clearTimeout(this.resizeTimeout), this.win.cancelAnimationFrame(this.delayedFlush), this.win.cancelAnimationFrame(this.flushingAndroidKey), this.editContext && (this.view.contentDOM.editContext = null, this.editContext.destroy());
  }
};
function o0(i, e, t) {
  for (; e; ) {
    let n = Ae.get(e);
    if (n && n.parent == i)
      return n;
    let r = e.parentNode;
    e = r != i.dom ? r : t > 0 ? e.nextSibling : e.previousSibling;
  }
  return null;
}
function l0(i, e) {
  let t = e.startContainer, n = e.startOffset, r = e.endContainer, s = e.endOffset, o = i.docView.domAtPos(i.state.selection.main.anchor);
  return vo(o.node, o.offset, r, s) && ([t, n, r, s] = [r, s, t, n]), { anchorNode: t, anchorOffset: n, focusNode: r, focusOffset: s };
}
function A5(i, e) {
  if (e.getComposedRanges) {
    let r = e.getComposedRanges(i.root)[0];
    if (r)
      return l0(i, r);
  }
  let t = null;
  function n(r) {
    r.preventDefault(), r.stopImmediatePropagation(), t = r.getTargetRanges()[0];
  }
  return i.contentDOM.addEventListener("beforeinput", n, !0), i.dom.ownerDocument.execCommand("indent"), i.contentDOM.removeEventListener("beforeinput", n, !0), t ? l0(i, t) : null;
}
class E5 {
  constructor(e) {
    this.from = 0, this.to = 0, this.pendingContextChange = null, this.handlers = /* @__PURE__ */ Object.create(null), this.composing = null, this.resetRange(e.state);
    let t = this.editContext = new window.EditContext({
      text: e.state.doc.sliceString(this.from, this.to),
      selectionStart: this.toContextPos(Math.max(this.from, Math.min(this.to, e.state.selection.main.anchor))),
      selectionEnd: this.toContextPos(e.state.selection.main.head)
    });
    this.handlers.textupdate = (n) => {
      let r = e.state.selection.main, { anchor: s, head: o } = r, l = this.toEditorPos(n.updateRangeStart), a = this.toEditorPos(n.updateRangeEnd);
      e.inputState.composing >= 0 && !this.composing && (this.composing = { contextBase: n.updateRangeStart, editorBase: l, drifted: !1 });
      let h = { from: l, to: a, insert: me.of(n.text.split(`
`)) };
      if (h.from == this.from && s < this.from ? h.from = s : h.to == this.to && s > this.to && (h.to = s), h.from == h.to && !h.insert.length) {
        let c = C.single(this.toEditorPos(n.selectionStart), this.toEditorPos(n.selectionEnd));
        c.main.eq(r) || e.dispatch({ selection: c, userEvent: "select" });
        return;
      }
      if ((z.mac || z.android) && h.from == o - 1 && /^\. ?$/.test(n.text) && e.contentDOM.getAttribute("autocorrect") == "off" && (h = { from: l, to: a, insert: me.of([n.text.replace(".", " ")]) }), this.pendingContextChange = h, !e.state.readOnly) {
        let c = this.to - this.from + (h.to - h.from + h.insert.length);
        Tp(e, h, C.single(this.toEditorPos(n.selectionStart, c), this.toEditorPos(n.selectionEnd, c)));
      }
      this.pendingContextChange && (this.revertPending(e.state), this.setSelection(e.state));
    }, this.handlers.characterboundsupdate = (n) => {
      let r = [], s = null;
      for (let o = this.toEditorPos(n.rangeStart), l = this.toEditorPos(n.rangeEnd); o < l; o++) {
        let a = e.coordsForChar(o);
        s = a && new DOMRect(a.left, a.top, a.right - a.left, a.bottom - a.top) || s || new DOMRect(), r.push(s);
      }
      t.updateCharacterBounds(n.rangeStart, r);
    }, this.handlers.textformatupdate = (n) => {
      let r = [];
      for (let s of n.getTextFormats()) {
        let o = s.underlineStyle, l = s.underlineThickness;
        if (o != "None" && l != "None") {
          let a = this.toEditorPos(s.rangeStart), h = this.toEditorPos(s.rangeEnd);
          if (a < h) {
            let c = `text-decoration: underline ${o == "Dashed" ? "dashed " : o == "Squiggle" ? "wavy " : ""}${l == "Thin" ? 1 : 2}px`;
            r.push(K.mark({ attributes: { style: c } }).range(a, h));
          }
        }
      }
      e.dispatch({ effects: ow.of(K.set(r)) });
    }, this.handlers.compositionstart = () => {
      e.inputState.composing < 0 && (e.inputState.composing = 0, e.inputState.compositionFirstChange = !0);
    }, this.handlers.compositionend = () => {
      if (e.inputState.composing = -1, e.inputState.compositionFirstChange = null, this.composing) {
        let { drifted: n } = this.composing;
        this.composing = null, n && this.reset(e.state);
      }
    };
    for (let n in this.handlers)
      t.addEventListener(n, this.handlers[n]);
    this.measureReq = { read: (n) => {
      this.editContext.updateControlBounds(n.contentDOM.getBoundingClientRect());
      let r = Zo(n.root);
      r && r.rangeCount && this.editContext.updateSelectionBounds(r.getRangeAt(0).getBoundingClientRect());
    } };
  }
  applyEdits(e) {
    let t = 0, n = !1, r = this.pendingContextChange;
    return e.changes.iterChanges((s, o, l, a, h) => {
      if (n)
        return;
      let c = h.length - (o - s);
      if (r && o >= r.to)
        if (r.from == s && r.to == o && r.insert.eq(h)) {
          r = this.pendingContextChange = null, t += c, this.to += c;
          return;
        } else
          r = null, this.revertPending(e.state);
      if (s += t, o += t, o <= this.from)
        this.from += c, this.to += c;
      else if (s < this.to) {
        if (s < this.from || o > this.to || this.to - this.from + h.length > 3e4) {
          n = !0;
          return;
        }
        this.editContext.updateText(this.toContextPos(s), this.toContextPos(o), h.toString()), this.to += c;
      }
      t += c;
    }), r && !n && this.revertPending(e.state), !n;
  }
  update(e) {
    let t = this.pendingContextChange, n = e.startState.selection.main;
    this.composing && (this.composing.drifted || !e.changes.touchesRange(n.from, n.to) && e.transactions.some((r) => !r.isUserEvent("input.type") && r.changes.touchesRange(this.from, this.to))) ? (this.composing.drifted = !0, this.composing.editorBase = e.changes.mapPos(this.composing.editorBase)) : !this.applyEdits(e) || !this.rangeIsValid(e.state) ? (this.pendingContextChange = null, this.reset(e.state)) : (e.docChanged || e.selectionSet || t) && this.setSelection(e.state), (e.geometryChanged || e.docChanged || e.selectionSet) && e.view.requestMeasure(this.measureReq);
  }
  resetRange(e) {
    let { head: t } = e.selection.main;
    this.from = Math.max(
      0,
      t - 1e4
      /* CxVp.Margin */
    ), this.to = Math.min(
      e.doc.length,
      t + 1e4
      /* CxVp.Margin */
    );
  }
  reset(e) {
    this.resetRange(e), this.editContext.updateText(0, this.editContext.text.length, e.doc.sliceString(this.from, this.to)), this.setSelection(e);
  }
  revertPending(e) {
    let t = this.pendingContextChange;
    this.pendingContextChange = null, this.editContext.updateText(this.toContextPos(t.from), this.toContextPos(t.from + t.insert.length), e.doc.sliceString(t.from, t.to));
  }
  setSelection(e) {
    let { main: t } = e.selection, n = this.toContextPos(Math.max(this.from, Math.min(this.to, t.anchor))), r = this.toContextPos(t.head);
    (this.editContext.selectionStart != n || this.editContext.selectionEnd != r) && this.editContext.updateSelection(n, r);
  }
  rangeIsValid(e) {
    let { head: t } = e.selection.main;
    return !(this.from > 0 && t - this.from < 500 || this.to < e.doc.length && this.to - t < 500 || this.to - this.from > 1e4 * 3);
  }
  toEditorPos(e, t = this.to - this.from) {
    e = Math.min(e, t);
    let n = this.composing;
    return n && n.drifted ? n.editorBase + (e - n.contextBase) : e + this.from;
  }
  toContextPos(e) {
    let t = this.composing;
    return t && t.drifted ? t.contextBase + (e - t.editorBase) : e - this.from;
  }
  destroy() {
    for (let e in this.handlers)
      this.editContext.removeEventListener(e, this.handlers[e]);
  }
}
let W = class vd {
  /**
  The current editor state.
  */
  get state() {
    return this.viewState.state;
  }
  /**
  To be able to display large documents without consuming too much
  memory or overloading the browser, CodeMirror only draws the
  code that is visible (plus a margin around it) to the DOM. This
  property tells you the extent of the current drawn viewport, in
  document positions.
  */
  get viewport() {
    return this.viewState.viewport;
  }
  /**
  When there are, for example, large collapsed ranges in the
  viewport, its size can be a lot bigger than the actual visible
  content. Thus, if you are doing something like styling the
  content in the viewport, it is preferable to only do so for
  these ranges, which are the subset of the viewport that is
  actually drawn.
  */
  get visibleRanges() {
    return this.viewState.visibleRanges;
  }
  /**
  Returns false when the editor is entirely scrolled out of view
  or otherwise hidden.
  */
  get inView() {
    return this.viewState.inView;
  }
  /**
  Indicates whether the user is currently composing text via
  [IME](https://en.wikipedia.org/wiki/Input_method), and at least
  one change has been made in the current composition.
  */
  get composing() {
    return !!this.inputState && this.inputState.composing > 0;
  }
  /**
  Indicates whether the user is currently in composing state. Note
  that on some platforms, like Android, this will be the case a
  lot, since just putting the cursor on a word starts a
  composition there.
  */
  get compositionStarted() {
    return !!this.inputState && this.inputState.composing >= 0;
  }
  /**
  The document or shadow root that the view lives in.
  */
  get root() {
    return this._root;
  }
  /**
  @internal
  */
  get win() {
    return this.dom.ownerDocument.defaultView || window;
  }
  /**
  Construct a new view. You'll want to either provide a `parent`
  option, or put `view.dom` into your document after creating a
  view, so that the user can see the editor.
  */
  constructor(e = {}) {
    var t;
    this.plugins = [], this.pluginMap = /* @__PURE__ */ new Map(), this.editorAttrs = {}, this.contentAttrs = {}, this.bidiCache = [], this.destroyed = !1, this.updateState = 2, this.measureScheduled = -1, this.measureRequests = [], this.contentDOM = document.createElement("div"), this.scrollDOM = document.createElement("div"), this.scrollDOM.tabIndex = -1, this.scrollDOM.className = "cm-scroller", this.scrollDOM.appendChild(this.contentDOM), this.announceDOM = document.createElement("div"), this.announceDOM.className = "cm-announced", this.announceDOM.setAttribute("aria-live", "polite"), this.dom = document.createElement("div"), this.dom.appendChild(this.announceDOM), this.dom.appendChild(this.scrollDOM), e.parent && e.parent.appendChild(this.dom);
    let { dispatch: n } = e;
    this.dispatchTransactions = e.dispatchTransactions || n && ((r) => r.forEach((s) => n(s, this))) || ((r) => this.update(r)), this.dispatch = this.dispatch.bind(this), this._root = e.root || cE(e.parent) || document, this.viewState = new r0(e.state || Be.create(e)), e.scrollTo && e.scrollTo.is(Il) && (this.viewState.scrollTarget = e.scrollTo.value.clip(this.viewState.state)), this.plugins = this.state.facet(Ir).map((r) => new of(r));
    for (let r of this.plugins)
      r.update(this);
    this.observer = new R5(this), this.inputState = new HE(this), this.inputState.ensureHandlers(this.plugins), this.docView = new Zg(this), this.mountStyles(), this.updateAttrs(), this.updateState = 0, this.requestMeasure(), !((t = document.fonts) === null || t === void 0) && t.ready && document.fonts.ready.then(() => this.requestMeasure());
  }
  dispatch(...e) {
    let t = e.length == 1 && e[0] instanceof kt ? e : e.length == 1 && Array.isArray(e[0]) ? e[0] : [this.state.update(...e)];
    this.dispatchTransactions(t, this);
  }
  /**
  Update the view for the given array of transactions. This will
  update the visible document and selection to match the state
  produced by the transactions, and notify view plugins of the
  change. You should usually call
  [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead, which uses this
  as a primitive.
  */
  update(e) {
    if (this.updateState != 0)
      throw new Error("Calls to EditorView.update are not allowed while an update is in progress");
    let t = !1, n = !1, r, s = this.state;
    for (let u of e) {
      if (u.startState != s)
        throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");
      s = u.state;
    }
    if (this.destroyed) {
      this.viewState.state = s;
      return;
    }
    let o = this.hasFocus, l = 0, a = null;
    e.some((u) => u.annotation(bw)) ? (this.inputState.notifiedFocused = o, l = 1) : o != this.inputState.notifiedFocused && (this.inputState.notifiedFocused = o, a = xw(s, o), a || (l = 1));
    let h = this.observer.delayedAndroidKey, c = null;
    if (h ? (this.observer.clearDelayedAndroidKey(), c = this.observer.readChange(), (c && !this.state.doc.eq(s.doc) || !this.state.selection.eq(s.selection)) && (c = null)) : this.observer.clear(), s.facet(Be.phrases) != this.state.facet(Be.phrases))
      return this.setState(s);
    r = Bg.create(this, s, e), r.flags |= l;
    let f = this.viewState.scrollTarget;
    try {
      this.updateState = 2;
      for (let u of e) {
        if (f && (f = f.map(u.changes)), u.scrollIntoView) {
          let { main: d } = u.state.selection;
          f = new sf(d.empty ? d : C.cursor(d.head, d.head > d.anchor ? -1 : 1));
        }
        for (let d of u.effects)
          d.is(Il) && (f = d.value.clip(this.state));
      }
      this.viewState.update(r, f), this.bidiCache = h0.update(this.bidiCache, r.changes), r.empty || (this.updatePlugins(r), this.inputState.update(r)), t = this.docView.update(r), this.state.facet(ho) != this.styleModules && this.mountStyles(), n = this.updateAttrs(), this.showAnnouncements(e), this.docView.updateSelection(t, e.some((u) => u.isUserEvent("select.pointer")));
    } finally {
      this.updateState = 0;
    }
    if (r.startState.facet(Fl) != r.state.facet(Fl) && (this.viewState.mustMeasureContent = !0), (t || n || f || this.viewState.mustEnforceCursorAssoc || this.viewState.mustMeasureContent) && this.requestMeasure(), t && this.docViewUpdate(), !r.empty)
      for (let u of this.state.facet(Od))
        try {
          u(r);
        } catch (d) {
          Ct(this.state, d, "update listener");
        }
    (a || c) && Promise.resolve().then(() => {
      a && this.state == a.startState && this.dispatch(a), c && !Ow(this, c) && h.force && es(this.contentDOM, h.key, h.keyCode);
    });
  }
  /**
  Reset the view to the given state. (This will cause the entire
  document to be redrawn and all view plugins to be reinitialized,
  so you should probably only use it when the new state isn't
  derived from the old state. Otherwise, use
  [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead.)
  */
  setState(e) {
    if (this.updateState != 0)
      throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");
    if (this.destroyed) {
      this.viewState.state = e;
      return;
    }
    this.updateState = 2;
    let t = this.hasFocus;
    try {
      for (let n of this.plugins)
        n.destroy(this);
      this.viewState = new r0(e), this.plugins = e.facet(Ir).map((n) => new of(n)), this.pluginMap.clear();
      for (let n of this.plugins)
        n.update(this);
      this.docView.destroy(), this.docView = new Zg(this), this.inputState.ensureHandlers(this.plugins), this.mountStyles(), this.updateAttrs(), this.bidiCache = [];
    } finally {
      this.updateState = 0;
    }
    t && this.focus(), this.requestMeasure();
  }
  updatePlugins(e) {
    let t = e.startState.facet(Ir), n = e.state.facet(Ir);
    if (t != n) {
      let r = [];
      for (let s of n) {
        let o = t.indexOf(s);
        if (o < 0)
          r.push(new of(s));
        else {
          let l = this.plugins[o];
          l.mustUpdate = e, r.push(l);
        }
      }
      for (let s of this.plugins)
        s.mustUpdate != e && s.destroy(this);
      this.plugins = r, this.pluginMap.clear();
    } else
      for (let r of this.plugins)
        r.mustUpdate = e;
    for (let r = 0; r < this.plugins.length; r++)
      this.plugins[r].update(this);
    t != n && this.inputState.ensureHandlers(this.plugins);
  }
  docViewUpdate() {
    for (let e of this.plugins) {
      let t = e.value;
      if (t && t.docViewUpdate)
        try {
          t.docViewUpdate(this);
        } catch (n) {
          Ct(this.state, n, "doc view update listener");
        }
    }
  }
  /**
  @internal
  */
  measure(e = !0) {
    if (this.destroyed)
      return;
    if (this.measureScheduled > -1 && this.win.cancelAnimationFrame(this.measureScheduled), this.observer.delayedAndroidKey) {
      this.measureScheduled = -1, this.requestMeasure();
      return;
    }
    this.measureScheduled = 0, e && this.observer.forceFlush();
    let t = null, n = this.scrollDOM, r = n.scrollTop * this.scaleY, { scrollAnchorPos: s, scrollAnchorHeight: o } = this.viewState;
    Math.abs(r - this.viewState.scrollTop) > 1 && (o = -1), this.viewState.scrollAnchorHeight = -1;
    try {
      for (let l = 0; ; l++) {
        if (o < 0)
          if (Rx(n))
            s = -1, o = this.viewState.heightMap.height;
          else {
            let d = this.viewState.scrollAnchorAt(r);
            s = d.from, o = d.top;
          }
        this.updateState = 1;
        let a = this.viewState.measure(this);
        if (!a && !this.measureRequests.length && this.viewState.scrollTarget == null)
          break;
        if (l > 5) {
          console.warn(this.measureRequests.length ? "Measure loop restarted more than 5 times" : "Viewport failed to stabilize");
          break;
        }
        let h = [];
        a & 4 || ([this.measureRequests, h] = [h, this.measureRequests]);
        let c = h.map((d) => {
          try {
            return d.read(this);
          } catch (O) {
            return Ct(this.state, O), a0;
          }
        }), f = Bg.create(this, this.state, []), u = !1;
        f.flags |= a, t ? t.flags |= a : t = f, this.updateState = 2, f.empty || (this.updatePlugins(f), this.inputState.update(f), this.updateAttrs(), u = this.docView.update(f), u && this.docViewUpdate());
        for (let d = 0; d < h.length; d++)
          if (c[d] != a0)
            try {
              let O = h[d];
              O.write && O.write(c[d], this);
            } catch (O) {
              Ct(this.state, O);
            }
        if (u && this.docView.updateSelection(!0), !f.viewportChanged && this.measureRequests.length == 0) {
          if (this.viewState.editorHeight)
            if (this.viewState.scrollTarget) {
              this.docView.scrollIntoView(this.viewState.scrollTarget), this.viewState.scrollTarget = null, o = -1;
              continue;
            } else {
              let O = (s < 0 ? this.viewState.heightMap.height : this.viewState.lineBlockAt(s).top) - o;
              if (O > 1 || O < -1) {
                r = r + O, n.scrollTop = r / this.scaleY, o = -1;
                continue;
              }
            }
          break;
        }
      }
    } finally {
      this.updateState = 0, this.measureScheduled = -1;
    }
    if (t && !t.empty)
      for (let l of this.state.facet(Od))
        l(t);
  }
  /**
  Get the CSS classes for the currently active editor themes.
  */
  get themeClasses() {
    return wd + " " + (this.state.facet(xd) ? Tw : $w) + " " + this.state.facet(Fl);
  }
  updateAttrs() {
    let e = c0(this, lw, {
      class: "cm-editor" + (this.hasFocus ? " cm-focused " : " ") + this.themeClasses
    }), t = {
      spellcheck: "false",
      autocorrect: "off",
      autocapitalize: "off",
      writingsuggestions: "false",
      translate: "no",
      contenteditable: this.state.facet(fn) ? "true" : "false",
      class: "cm-content",
      style: `${z.tabSize}: ${this.state.tabSize}`,
      role: "textbox",
      "aria-multiline": "true"
    };
    this.state.readOnly && (t["aria-readonly"] = "true"), c0(this, Qp, t);
    let n = this.observer.ignore(() => {
      let r = hd(this.contentDOM, this.contentAttrs, t), s = hd(this.dom, this.editorAttrs, e);
      return r || s;
    });
    return this.editorAttrs = e, this.contentAttrs = t, n;
  }
  showAnnouncements(e) {
    let t = !0;
    for (let n of e)
      for (let r of n.effects)
        if (r.is(vd.announce)) {
          t && (this.announceDOM.textContent = ""), t = !1;
          let s = this.announceDOM.appendChild(document.createElement("div"));
          s.textContent = r.value;
        }
  }
  mountStyles() {
    this.styleModules = this.state.facet(ho);
    let e = this.state.facet(vd.cspNonce);
    mt.mount(this.root, this.styleModules.concat(T5).reverse(), e ? { nonce: e } : void 0);
  }
  readMeasured() {
    if (this.updateState == 2)
      throw new Error("Reading the editor layout isn't allowed during an update");
    this.updateState == 0 && this.measureScheduled > -1 && this.measure(!1);
  }
  /**
  Schedule a layout measurement, optionally providing callbacks to
  do custom DOM measuring followed by a DOM write phase. Using
  this is preferable reading DOM layout directly from, for
  example, an event handler, because it'll make sure measuring and
  drawing done by other components is synchronized, avoiding
  unnecessary DOM layout computations.
  */
  requestMeasure(e) {
    if (this.measureScheduled < 0 && (this.measureScheduled = this.win.requestAnimationFrame(() => this.measure())), e) {
      if (this.measureRequests.indexOf(e) > -1)
        return;
      if (e.key != null) {
        for (let t = 0; t < this.measureRequests.length; t++)
          if (this.measureRequests[t].key === e.key) {
            this.measureRequests[t] = e;
            return;
          }
      }
      this.measureRequests.push(e);
    }
  }
  /**
  Get the value of a specific plugin, if present. Note that
  plugins that crash can be dropped from a view, so even when you
  know you registered a given plugin, it is recommended to check
  the return value of this method.
  */
  plugin(e) {
    let t = this.pluginMap.get(e);
    return (t === void 0 || t && t.plugin != e) && this.pluginMap.set(e, t = this.plugins.find((n) => n.plugin == e) || null), t && t.update(this).value;
  }
  /**
  The top position of the document, in screen coordinates. This
  may be negative when the editor is scrolled down. Points
  directly to the top of the first line, not above the padding.
  */
  get documentTop() {
    return this.contentDOM.getBoundingClientRect().top + this.viewState.paddingTop;
  }
  /**
  Reports the padding above and below the document.
  */
  get documentPadding() {
    return { top: this.viewState.paddingTop, bottom: this.viewState.paddingBottom };
  }
  /**
  If the editor is transformed with CSS, this provides the scale
  along the X axis. Otherwise, it will just be 1. Note that
  transforms other than translation and scaling are not supported.
  */
  get scaleX() {
    return this.viewState.scaleX;
  }
  /**
  Provide the CSS transformed scale along the Y axis.
  */
  get scaleY() {
    return this.viewState.scaleY;
  }
  /**
  Find the text line or block widget at the given vertical
  position (which is interpreted as relative to the [top of the
  document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop)).
  */
  elementAtHeight(e) {
    return this.readMeasured(), this.viewState.elementAtHeight(e);
  }
  /**
  Find the line block (see
  [`lineBlockAt`](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) at the given
  height, again interpreted relative to the [top of the
  document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop).
  */
  lineBlockAtHeight(e) {
    return this.readMeasured(), this.viewState.lineBlockAtHeight(e);
  }
  /**
  Get the extent and vertical position of all [line
  blocks](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) in the viewport. Positions
  are relative to the [top of the
  document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop);
  */
  get viewportLineBlocks() {
    return this.viewState.viewportLines;
  }
  /**
  Find the line block around the given document position. A line
  block is a range delimited on both sides by either a
  non-[hidden](https://codemirror.net/6/docs/ref/#view.Decoration^replace) line break, or the
  start/end of the document. It will usually just hold a line of
  text, but may be broken into multiple textblocks by block
  widgets.
  */
  lineBlockAt(e) {
    return this.viewState.lineBlockAt(e);
  }
  /**
  The editor's total content height.
  */
  get contentHeight() {
    return this.viewState.contentHeight;
  }
  /**
  Move a cursor position by [grapheme
  cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak). `forward` determines whether
  the motion is away from the line start, or towards it. In
  bidirectional text, the line is traversed in visual order, using
  the editor's [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
  When the start position was the last one on the line, the
  returned position will be across the line break. If there is no
  further line, the original position is returned.
  
  By default, this method moves over a single cluster. The
  optional `by` argument can be used to move across more. It will
  be called with the first cluster as argument, and should return
  a predicate that determines, for each subsequent cluster,
  whether it should also be moved over.
  */
  moveByChar(e, t, n) {
    return af(this, e, Ig(this, e, t, n));
  }
  /**
  Move a cursor position across the next group of either
  [letters](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) or non-letter
  non-whitespace characters.
  */
  moveByGroup(e, t) {
    return af(this, e, Ig(this, e, t, (n) => WE(this, e.head, n)));
  }
  /**
  Get the cursor position visually at the start or end of a line.
  Note that this may differ from the _logical_ position at its
  start or end (which is simply at `line.from`/`line.to`) if text
  at the start or end goes against the line's base text direction.
  */
  visualLineSide(e, t) {
    let n = this.bidiSpans(e), r = this.textDirectionAt(e.from), s = n[t ? n.length - 1 : 0];
    return C.cursor(s.side(t, r) + e.from, s.forward(!t, r) ? 1 : -1);
  }
  /**
  Move to the next line boundary in the given direction. If
  `includeWrap` is true, line wrapping is on, and there is a
  further wrap point on the current line, the wrap point will be
  returned. Otherwise this function will return the start or end
  of the line.
  */
  moveToLineBoundary(e, t, n = !0) {
    return VE(this, e, t, n);
  }
  /**
  Move a cursor position vertically. When `distance` isn't given,
  it defaults to moving to the next line (including wrapped
  lines). Otherwise, `distance` should provide a positive distance
  in pixels.
  
  When `start` has a
  [`goalColumn`](https://codemirror.net/6/docs/ref/#state.SelectionRange.goalColumn), the vertical
  motion will use that as a target horizontal position. Otherwise,
  the cursor's own horizontal position is used. The returned
  cursor will have its goal column set to whichever column was
  used.
  */
  moveVertically(e, t, n) {
    return af(this, e, zE(this, e, t, n));
  }
  /**
  Find the DOM parent node and offset (child offset if `node` is
  an element, character offset when it is a text node) at the
  given document position.
  
  Note that for positions that aren't currently in
  `visibleRanges`, the resulting DOM position isn't necessarily
  meaningful (it may just point before or after a placeholder
  element).
  */
  domAtPos(e) {
    return this.docView.domAtPos(e);
  }
  /**
  Find the document position at the given DOM node. Can be useful
  for associating positions with DOM events. Will raise an error
  when `node` isn't part of the editor content.
  */
  posAtDOM(e, t = 0) {
    return this.docView.posFromDOM(e, t);
  }
  posAtCoords(e, t = !0) {
    return this.readMeasured(), dw(this, e, t);
  }
  /**
  Get the screen coordinates at the given document position.
  `side` determines whether the coordinates are based on the
  element before (-1) or after (1) the position (if no element is
  available on the given side, the method will transparently use
  another strategy to get reasonable coordinates).
  */
  coordsAtPos(e, t = 1) {
    this.readMeasured();
    let n = this.docView.coordsAt(e, t);
    if (!n || n.left == n.right)
      return n;
    let r = this.state.doc.lineAt(e), s = this.bidiSpans(r), o = s[qn.find(s, e - r.from, -1, t)];
    return dc(n, o.dir == Ce.LTR == t > 0);
  }
  /**
  Return the rectangle around a given character. If `pos` does not
  point in front of a character that is in the viewport and
  rendered (i.e. not replaced, not a line break), this will return
  null. For space characters that are a line wrap point, this will
  return the position before the line break.
  */
  coordsForChar(e) {
    return this.readMeasured(), this.docView.coordsForChar(e);
  }
  /**
  The default width of a character in the editor. May not
  accurately reflect the width of all characters (given variable
  width fonts or styling of invididual ranges).
  */
  get defaultCharacterWidth() {
    return this.viewState.heightOracle.charWidth;
  }
  /**
  The default height of a line in the editor. May not be accurate
  for all lines.
  */
  get defaultLineHeight() {
    return this.viewState.heightOracle.lineHeight;
  }
  /**
  The text direction
  ([`direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/direction)
  CSS property) of the editor's content element.
  */
  get textDirection() {
    return this.viewState.defaultTextDirection;
  }
  /**
  Find the text direction of the block at the given position, as
  assigned by CSS. If
  [`perLineTextDirection`](https://codemirror.net/6/docs/ref/#view.EditorView^perLineTextDirection)
  isn't enabled, or the given position is outside of the viewport,
  this will always return the same as
  [`textDirection`](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection). Note that
  this may trigger a DOM layout.
  */
  textDirectionAt(e) {
    return !this.state.facet(nw) || e < this.viewport.from || e > this.viewport.to ? this.textDirection : (this.readMeasured(), this.docView.textDirectionAt(e));
  }
  /**
  Whether this editor [wraps lines](https://codemirror.net/6/docs/ref/#view.EditorView.lineWrapping)
  (as determined by the
  [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)
  CSS property of its content element).
  */
  get lineWrapping() {
    return this.viewState.heightOracle.lineWrapping;
  }
  /**
  Returns the bidirectional text structure of the given line
  (which should be in the current document) as an array of span
  objects. The order of these spans matches the [text
  direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection)—if that is
  left-to-right, the leftmost spans come first, otherwise the
  rightmost spans come first.
  */
  bidiSpans(e) {
    if (e.length > M5)
      return Gx(e.length);
    let t = this.textDirectionAt(e.from), n;
    for (let s of this.bidiCache)
      if (s.from == e.from && s.dir == t && (s.fresh || Yx(s.isolates, n = Lg(this, e))))
        return s.order;
    n || (n = Lg(this, e));
    let r = QE(e.text, t, n);
    return this.bidiCache.push(new h0(e.from, e.to, t, n, !0, r)), r;
  }
  /**
  Check whether the editor has focus.
  */
  get hasFocus() {
    var e;
    return (this.dom.ownerDocument.hasFocus() || z.safari && ((e = this.inputState) === null || e === void 0 ? void 0 : e.lastContextMenu) > Date.now() - 3e4) && this.root.activeElement == this.contentDOM;
  }
  /**
  Put focus on the editor.
  */
  focus() {
    this.observer.ignore(() => {
      Tx(this.contentDOM), this.docView.updateSelection();
    });
  }
  /**
  Update the [root](https://codemirror.net/6/docs/ref/##view.EditorViewConfig.root) in which the editor lives. This is only
  necessary when moving the editor's existing DOM to a new window or shadow root.
  */
  setRoot(e) {
    this._root != e && (this._root = e, this.observer.setWindow((e.nodeType == 9 ? e : e.ownerDocument).defaultView || window), this.mountStyles());
  }
  /**
  Clean up this editor view, removing its element from the
  document, unregistering event handlers, and notifying
  plugins. The view instance can no longer be used after
  calling this.
  */
  destroy() {
    this.root.activeElement == this.contentDOM && this.contentDOM.blur();
    for (let e of this.plugins)
      e.destroy(this);
    this.plugins = [], this.inputState.destroy(), this.docView.destroy(), this.dom.remove(), this.observer.destroy(), this.measureScheduled > -1 && this.win.cancelAnimationFrame(this.measureScheduled), this.destroyed = !0;
  }
  /**
  Returns an effect that can be
  [added](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) to a transaction to
  cause it to scroll the given position or range into view.
  */
  static scrollIntoView(e, t = {}) {
    return Il.of(new sf(typeof e == "number" ? C.cursor(e) : e, t.y, t.x, t.yMargin, t.xMargin));
  }
  /**
  Return an effect that resets the editor to its current (at the
  time this method was called) scroll position. Note that this
  only affects the editor's own scrollable element, not parents.
  See also
  [`EditorViewConfig.scrollTo`](https://codemirror.net/6/docs/ref/#view.EditorViewConfig.scrollTo).
  
  The effect should be used with a document identical to the one
  it was created for. Failing to do so is not an error, but may
  not scroll to the expected position. You can
  [map](https://codemirror.net/6/docs/ref/#state.StateEffect.map) the effect to account for changes.
  */
  scrollSnapshot() {
    let { scrollTop: e, scrollLeft: t } = this.scrollDOM, n = this.viewState.scrollAnchorAt(e);
    return Il.of(new sf(C.cursor(n.from), "start", "start", n.top - e, t, !0));
  }
  /**
  Enable or disable tab-focus mode, which disables key bindings
  for Tab and Shift-Tab, letting the browser's default
  focus-changing behavior go through instead. This is useful to
  prevent trapping keyboard users in your editor.
  
  Without argument, this toggles the mode. With a boolean, it
  enables (true) or disables it (false). Given a number, it
  temporarily enables the mode until that number of milliseconds
  have passed or another non-Tab key is pressed.
  */
  setTabFocusMode(e) {
    e == null ? this.inputState.tabFocusMode = this.inputState.tabFocusMode < 0 ? 0 : -1 : typeof e == "boolean" ? this.inputState.tabFocusMode = e ? 0 : -1 : this.inputState.tabFocusMode != 0 && (this.inputState.tabFocusMode = Date.now() + e);
  }
  /**
  Returns an extension that can be used to add DOM event handlers.
  The value should be an object mapping event names to handler
  functions. For any given event, such functions are ordered by
  extension precedence, and the first handler to return true will
  be assumed to have handled that event, and no other handlers or
  built-in behavior will be activated for it. These are registered
  on the [content element](https://codemirror.net/6/docs/ref/#view.EditorView.contentDOM), except
  for `scroll` handlers, which will be called any time the
  editor's [scroll element](https://codemirror.net/6/docs/ref/#view.EditorView.scrollDOM) or one of
  its parent nodes is scrolled.
  */
  static domEventHandlers(e) {
    return at.define(() => ({}), { eventHandlers: e });
  }
  /**
  Create an extension that registers DOM event observers. Contrary
  to event [handlers](https://codemirror.net/6/docs/ref/#view.EditorView^domEventHandlers),
  observers can't be prevented from running by a higher-precedence
  handler returning true. They also don't prevent other handlers
  and observers from running when they return true, and should not
  call `preventDefault`.
  */
  static domEventObservers(e) {
    return at.define(() => ({}), { eventObservers: e });
  }
  /**
  Create a theme extension. The first argument can be a
  [`style-mod`](https://github.com/marijnh/style-mod#documentation)
  style spec providing the styles for the theme. These will be
  prefixed with a generated class for the style.
  
  Because the selectors will be prefixed with a scope class, rule
  that directly match the editor's [wrapper
  element](https://codemirror.net/6/docs/ref/#view.EditorView.dom)—to which the scope class will be
  added—need to be explicitly differentiated by adding an `&` to
  the selector for that element—for example
  `&.cm-focused`.
  
  When `dark` is set to true, the theme will be marked as dark,
  which will cause the `&dark` rules from [base
  themes](https://codemirror.net/6/docs/ref/#view.EditorView^baseTheme) to be used (as opposed to
  `&light` when a light theme is active).
  */
  static theme(e, t) {
    let n = mt.newName(), r = [Fl.of(n), ho.of(kd(`.${n}`, e))];
    return t && t.dark && r.push(xd.of(!0)), r;
  }
  /**
  Create an extension that adds styles to the base theme. Like
  with [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme), use `&` to indicate the
  place of the editor wrapper element when directly targeting
  that. You can also use `&dark` or `&light` instead to only
  target editors with a dark or light theme.
  */
  static baseTheme(e) {
    return bn.lowest(ho.of(kd("." + wd, e, Cw)));
  }
  /**
  Retrieve an editor view instance from the view's DOM
  representation.
  */
  static findFromDOM(e) {
    var t;
    let n = e.querySelector(".cm-content"), r = n && Ae.get(n) || Ae.get(e);
    return ((t = r?.rootView) === null || t === void 0 ? void 0 : t.view) || null;
  }
};
W.styleModule = ho;
W.inputHandler = tw;
W.clipboardInputFilter = kp;
W.clipboardOutputFilter = vp;
W.scrollHandler = sw;
W.focusChangeEffect = iw;
W.perLineTextDirection = nw;
W.exceptionSink = ew;
W.updateListener = Od;
W.editable = fn;
W.mouseSelectionStyle = Jx;
W.dragMovesSelection = Kx;
W.clickAddsSelectionRange = Hx;
W.decorations = Vo;
W.outerDecorations = aw;
W.atomicRanges = Pp;
W.bidiIsolatedRanges = hw;
W.scrollMargins = cw;
W.darkTheme = xd;
W.cspNonce = /* @__PURE__ */ I.define({ combine: (i) => i.length ? i[0] : "" });
W.contentAttributes = Qp;
W.editorAttributes = lw;
W.lineWrapping = /* @__PURE__ */ W.contentAttributes.of({ class: "cm-lineWrapping" });
W.announce = /* @__PURE__ */ le.define();
const M5 = 4096, a0 = {};
let h0 = class Rw {
  constructor(e, t, n, r, s, o) {
    this.from = e, this.to = t, this.dir = n, this.isolates = r, this.fresh = s, this.order = o;
  }
  static update(e, t) {
    if (t.empty && !e.some((s) => s.fresh))
      return e;
    let n = [], r = e.length ? e[e.length - 1].dir : Ce.LTR;
    for (let s = Math.max(0, e.length - 10); s < e.length; s++) {
      let o = e[s];
      o.dir == r && !t.touchesRange(o.from, o.to) && n.push(new Rw(t.mapPos(o.from, 1), t.mapPos(o.to, -1), o.dir, o.isolates, !1, o.order));
    }
    return n;
  }
};
function c0(i, e, t) {
  for (let n = i.state.facet(e), r = n.length - 1; r >= 0; r--) {
    let s = n[r], o = typeof s == "function" ? s(i) : s;
    o && ad(o, t);
  }
  return t;
}
const q5 = z.mac ? "mac" : z.windows ? "win" : z.linux ? "linux" : "key";
function _5(i, e) {
  const t = i.split(/-(?!$)/);
  let n = t[t.length - 1];
  n == "Space" && (n = " ");
  let r, s, o, l;
  for (let a = 0; a < t.length - 1; ++a) {
    const h = t[a];
    if (/^(cmd|meta|m)$/i.test(h))
      l = !0;
    else if (/^a(lt)?$/i.test(h))
      r = !0;
    else if (/^(c|ctrl|control)$/i.test(h))
      s = !0;
    else if (/^s(hift)?$/i.test(h))
      o = !0;
    else if (/^mod$/i.test(h))
      e == "mac" ? l = !0 : s = !0;
    else
      throw new Error("Unrecognized modifier name: " + h);
  }
  return r && (n = "Alt-" + n), s && (n = "Ctrl-" + n), l && (n = "Meta-" + n), o && (n = "Shift-" + n), n;
}
function Hl(i, e, t) {
  return e.altKey && (i = "Alt-" + i), e.ctrlKey && (i = "Ctrl-" + i), e.metaKey && (i = "Meta-" + i), t !== !1 && e.shiftKey && (i = "Shift-" + i), i;
}
const X5 = /* @__PURE__ */ bn.default(/* @__PURE__ */ W.domEventHandlers({
  keydown(i, e) {
    return Ew(Aw(e.state), i, e, "editor");
  }
})), xl = /* @__PURE__ */ I.define({ enables: X5 }), f0 = /* @__PURE__ */ new WeakMap();
function Aw(i) {
  let e = i.facet(xl), t = f0.get(e);
  return t || f0.set(e, t = Z5(e.reduce((n, r) => n.concat(r), []))), t;
}
function L5(i, e, t) {
  return Ew(Aw(i.state), e, i, t);
}
let En = null;
const B5 = 4e3;
function Z5(i, e = q5) {
  let t = /* @__PURE__ */ Object.create(null), n = /* @__PURE__ */ Object.create(null), r = (o, l) => {
    let a = n[o];
    if (a == null)
      n[o] = l;
    else if (a != l)
      throw new Error("Key binding " + o + " is used both as a regular binding and as a multi-stroke prefix");
  }, s = (o, l, a, h, c) => {
    var f, u;
    let d = t[o] || (t[o] = /* @__PURE__ */ Object.create(null)), O = l.split(/ (?!$)/).map((g) => _5(g, e));
    for (let g = 1; g < O.length; g++) {
      let S = O.slice(0, g).join(" ");
      r(S, !0), d[S] || (d[S] = {
        preventDefault: !0,
        stopPropagation: !1,
        run: [(x) => {
          let k = En = { view: x, prefix: S, scope: o };
          return setTimeout(() => {
            En == k && (En = null);
          }, B5), !0;
        }]
      });
    }
    let p = O.join(" ");
    r(p, !1);
    let m = d[p] || (d[p] = {
      preventDefault: !1,
      stopPropagation: !1,
      run: ((u = (f = d._any) === null || f === void 0 ? void 0 : f.run) === null || u === void 0 ? void 0 : u.slice()) || []
    });
    a && m.run.push(a), h && (m.preventDefault = !0), c && (m.stopPropagation = !0);
  };
  for (let o of i) {
    let l = o.scope ? o.scope.split(" ") : ["editor"];
    if (o.any)
      for (let h of l) {
        let c = t[h] || (t[h] = /* @__PURE__ */ Object.create(null));
        c._any || (c._any = { preventDefault: !1, stopPropagation: !1, run: [] });
        let { any: f } = o;
        for (let u in c)
          c[u].run.push((d) => f(d, Qd));
      }
    let a = o[e] || o.key;
    if (a)
      for (let h of l)
        s(h, a, o.run, o.preventDefault, o.stopPropagation), o.shift && s(h, "Shift-" + a, o.shift, o.preventDefault, o.stopPropagation);
  }
  return t;
}
let Qd = null;
function Ew(i, e, t, n) {
  Qd = e;
  let r = sE(e), s = Pt(r, 0), o = Di(s) == r.length && r != " ", l = "", a = !1, h = !1, c = !1;
  En && En.view == t && En.scope == n && (l = En.prefix + " ", mw.indexOf(e.keyCode) < 0 && (h = !0, En = null));
  let f = /* @__PURE__ */ new Set(), u = (m) => {
    if (m) {
      for (let g of m.run)
        if (!f.has(g) && (f.add(g), g(t)))
          return m.stopPropagation && (c = !0), !0;
      m.preventDefault && (m.stopPropagation && (c = !0), h = !0);
    }
    return !1;
  }, d = i[n], O, p;
  return d && (u(d[l + Hl(r, e, !o)]) ? a = !0 : o && (e.altKey || e.metaKey || e.ctrlKey) && // Ctrl-Alt may be used for AltGr on Windows
  !(z.windows && e.ctrlKey && e.altKey) && (O = Nn[e.keyCode]) && O != r ? (u(d[l + Hl(O, e, !0)]) || e.shiftKey && (p = Bo[e.keyCode]) != r && p != O && u(d[l + Hl(p, e, !1)])) && (a = !0) : o && e.shiftKey && u(d[l + Hl(r, e, !0)]) && (a = !0), !a && u(d._any) && (a = !0)), h && (a = !0), a && c && e.stopPropagation(), Qd = null, a;
}
class wl {
  /**
  Create a marker with the given class and dimensions. If `width`
  is null, the DOM element will get no width style.
  */
  constructor(e, t, n, r, s) {
    this.className = e, this.left = t, this.top = n, this.width = r, this.height = s;
  }
  draw() {
    let e = document.createElement("div");
    return e.className = this.className, this.adjust(e), e;
  }
  update(e, t) {
    return t.className != this.className ? !1 : (this.adjust(e), !0);
  }
  adjust(e) {
    e.style.left = this.left + "px", e.style.top = this.top + "px", this.width != null && (e.style.width = this.width + "px"), e.style.height = this.height + "px";
  }
  eq(e) {
    return this.left == e.left && this.top == e.top && this.width == e.width && this.height == e.height && this.className == e.className;
  }
  /**
  Create a set of rectangles for the given selection range,
  assigning them theclass`className`. Will create a single
  rectangle for empty ranges, and a set of selection-style
  rectangles covering the range's content (in a bidi-aware
  way) for non-empty ones.
  */
  static forRange(e, t, n) {
    if (n.empty) {
      let r = e.coordsAtPos(n.head, n.assoc || 1);
      if (!r)
        return [];
      let s = Mw(e);
      return [new wl(t, r.left - s.left, r.top - s.top, null, r.bottom - r.top)];
    } else
      return D5(e, t, n);
  }
}
function Mw(i) {
  let e = i.scrollDOM.getBoundingClientRect();
  return { left: (i.textDirection == Ce.LTR ? e.left : e.right - i.scrollDOM.clientWidth * i.scaleX) - i.scrollDOM.scrollLeft * i.scaleX, top: e.top - i.scrollDOM.scrollTop * i.scaleY };
}
function u0(i, e, t, n) {
  let r = i.coordsAtPos(e, t * 2);
  if (!r)
    return n;
  let s = i.dom.getBoundingClientRect(), o = (r.top + r.bottom) / 2, l = i.posAtCoords({ x: s.left + 1, y: o }), a = i.posAtCoords({ x: s.right - 1, y: o });
  return l == null || a == null ? n : { from: Math.max(n.from, Math.min(l, a)), to: Math.min(n.to, Math.max(l, a)) };
}
function D5(i, e, t) {
  if (t.to <= i.viewport.from || t.from >= i.viewport.to)
    return [];
  let n = Math.max(t.from, i.viewport.from), r = Math.min(t.to, i.viewport.to), s = i.textDirection == Ce.LTR, o = i.contentDOM, l = o.getBoundingClientRect(), a = Mw(i), h = o.querySelector(".cm-line"), c = h && window.getComputedStyle(h), f = l.left + (c ? parseInt(c.paddingLeft) + Math.min(0, parseInt(c.textIndent)) : 0), u = l.right - (c ? parseInt(c.paddingRight) : 0), d = yd(i, n, 1), O = yd(i, r, -1), p = d.type == vt.Text ? d : null, m = O.type == vt.Text ? O : null;
  if (p && (i.lineWrapping || d.widgetLineBreaks) && (p = u0(i, n, 1, p)), m && (i.lineWrapping || O.widgetLineBreaks) && (m = u0(i, r, -1, m)), p && m && p.from == m.from && p.to == m.to)
    return S(x(t.from, t.to, p));
  {
    let w = p ? x(t.from, null, p) : k(d, !1), b = m ? x(null, t.to, m) : k(O, !0), Q = [];
    return (p || d).to < (m || O).from - (p && m ? 1 : 0) || d.widgetLineBreaks > 1 && w.bottom + i.defaultLineHeight / 2 < b.top ? Q.push(g(f, w.bottom, u, b.top)) : w.bottom < b.top && i.elementAtHeight((w.bottom + b.top) / 2).type == vt.Text && (w.bottom = b.top = (w.bottom + b.top) / 2), S(w).concat(Q).concat(S(b));
  }
  function g(w, b, Q, R) {
    return new wl(e, w - a.left, b - a.top, Q - w, R - b);
  }
  function S({ top: w, bottom: b, horizontal: Q }) {
    let R = [];
    for (let A = 0; A < Q.length; A += 2)
      R.push(g(Q[A], w, Q[A + 1], b));
    return R;
  }
  function x(w, b, Q) {
    let R = 1e9, A = -1e9, _ = [];
    function $(E, L, G, pe, U) {
      let j = i.coordsAtPos(E, E == Q.to ? -2 : 2), re = i.coordsAtPos(G, G == Q.from ? 2 : -2);
      !j || !re || (R = Math.min(j.top, re.top, R), A = Math.max(j.bottom, re.bottom, A), U == Ce.LTR ? _.push(s && L ? f : j.left, s && pe ? u : re.right) : _.push(!s && pe ? f : re.left, !s && L ? u : j.right));
    }
    let v = w ?? Q.from, X = b ?? Q.to;
    for (let E of i.visibleRanges)
      if (E.to > v && E.from < X)
        for (let L = Math.max(E.from, v), G = Math.min(E.to, X); ; ) {
          let pe = i.state.doc.lineAt(L);
          for (let U of i.bidiSpans(pe)) {
            let j = U.from + pe.from, re = U.to + pe.from;
            if (j >= G)
              break;
            re > L && $(Math.max(j, L), w == null && j <= v, Math.min(re, G), b == null && re >= X, U.dir);
          }
          if (L = pe.to + 1, L >= G)
            break;
        }
    return _.length == 0 && $(v, w == null, X, b == null, i.textDirection), { top: R, bottom: A, horizontal: _ };
  }
  function k(w, b) {
    let Q = l.top + (b ? w.top : w.bottom);
    return { top: Q, bottom: Q, horizontal: [] };
  }
}
function V5(i, e) {
  return i.constructor == e.constructor && i.eq(e);
}
class W5 {
  constructor(e, t) {
    this.view = e, this.layer = t, this.drawn = [], this.scaleX = 1, this.scaleY = 1, this.measureReq = { read: this.measure.bind(this), write: this.draw.bind(this) }, this.dom = e.scrollDOM.appendChild(document.createElement("div")), this.dom.classList.add("cm-layer"), t.above && this.dom.classList.add("cm-layer-above"), t.class && this.dom.classList.add(t.class), this.scale(), this.dom.setAttribute("aria-hidden", "true"), this.setOrder(e.state), e.requestMeasure(this.measureReq), t.mount && t.mount(this.dom, e);
  }
  update(e) {
    e.startState.facet(Wa) != e.state.facet(Wa) && this.setOrder(e.state), (this.layer.update(e, this.dom) || e.geometryChanged) && (this.scale(), e.view.requestMeasure(this.measureReq));
  }
  docViewUpdate(e) {
    this.layer.updateOnDocViewUpdate !== !1 && e.requestMeasure(this.measureReq);
  }
  setOrder(e) {
    let t = 0, n = e.facet(Wa);
    for (; t < n.length && n[t] != this.layer; )
      t++;
    this.dom.style.zIndex = String((this.layer.above ? 150 : -1) - t);
  }
  measure() {
    return this.layer.markers(this.view);
  }
  scale() {
    let { scaleX: e, scaleY: t } = this.view;
    (e != this.scaleX || t != this.scaleY) && (this.scaleX = e, this.scaleY = t, this.dom.style.transform = `scale(${1 / e}, ${1 / t})`);
  }
  draw(e) {
    if (e.length != this.drawn.length || e.some((t, n) => !V5(t, this.drawn[n]))) {
      let t = this.dom.firstChild, n = 0;
      for (let r of e)
        r.update && t && r.constructor && this.drawn[n].constructor && r.update(t, this.drawn[n]) ? (t = t.nextSibling, n++) : this.dom.insertBefore(r.draw(), t);
      for (; t; ) {
        let r = t.nextSibling;
        t.remove(), t = r;
      }
      this.drawn = e;
    }
  }
  destroy() {
    this.layer.destroy && this.layer.destroy(this.dom, this.view), this.dom.remove();
  }
}
const Wa = /* @__PURE__ */ I.define();
function qw(i) {
  return [
    at.define((e) => new W5(e, i)),
    Wa.of(i)
  ];
}
const Wo = /* @__PURE__ */ I.define({
  combine(i) {
    return Ki(i, {
      cursorBlinkRate: 1200,
      drawRangeCursor: !0
    }, {
      cursorBlinkRate: (e, t) => Math.min(e, t),
      drawRangeCursor: (e, t) => e || t
    });
  }
});
function z5(i = {}) {
  return [
    Wo.of(i),
    I5,
    N5,
    j5,
    rw.of(!0)
  ];
}
function _w(i) {
  return i.startState.facet(Wo) != i.state.facet(Wo);
}
const I5 = /* @__PURE__ */ qw({
  above: !0,
  markers(i) {
    let { state: e } = i, t = e.facet(Wo), n = [];
    for (let r of e.selection.ranges) {
      let s = r == e.selection.main;
      if (r.empty || t.drawRangeCursor) {
        let o = s ? "cm-cursor cm-cursor-primary" : "cm-cursor cm-cursor-secondary", l = r.empty ? r : C.cursor(r.head, r.head > r.anchor ? -1 : 1);
        for (let a of wl.forRange(i, o, l))
          n.push(a);
      }
    }
    return n;
  },
  update(i, e) {
    i.transactions.some((n) => n.selection) && (e.style.animationName = e.style.animationName == "cm-blink" ? "cm-blink2" : "cm-blink");
    let t = _w(i);
    return t && d0(i.state, e), i.docChanged || i.selectionSet || t;
  },
  mount(i, e) {
    d0(e.state, i);
  },
  class: "cm-cursorLayer"
});
function d0(i, e) {
  e.style.animationDuration = i.facet(Wo).cursorBlinkRate + "ms";
}
const N5 = /* @__PURE__ */ qw({
  above: !1,
  markers(i) {
    return i.state.selection.ranges.map((e) => e.empty ? [] : wl.forRange(i, "cm-selectionBackground", e)).reduce((e, t) => e.concat(t));
  },
  update(i, e) {
    return i.docChanged || i.selectionSet || i.viewportChanged || _w(i);
  },
  class: "cm-selectionLayer"
}), j5 = /* @__PURE__ */ bn.highest(/* @__PURE__ */ W.theme({
  ".cm-line": {
    "& ::selection, &::selection": { backgroundColor: "transparent !important" },
    caretColor: "transparent !important"
  },
  ".cm-content": {
    caretColor: "transparent !important",
    "& :focus": {
      caretColor: "initial !important",
      "&::selection, & ::selection": {
        backgroundColor: "Highlight !important"
      }
    }
  }
})), Xw = /* @__PURE__ */ le.define({
  map(i, e) {
    return i == null ? null : e.mapPos(i);
  }
}), uo = /* @__PURE__ */ gt.define({
  create() {
    return null;
  },
  update(i, e) {
    return i != null && (i = e.changes.mapPos(i)), e.effects.reduce((t, n) => n.is(Xw) ? n.value : t, i);
  }
}), U5 = /* @__PURE__ */ at.fromClass(class {
  constructor(i) {
    this.view = i, this.cursor = null, this.measureReq = { read: this.readPos.bind(this), write: this.drawCursor.bind(this) };
  }
  update(i) {
    var e;
    let t = i.state.field(uo);
    t == null ? this.cursor != null && ((e = this.cursor) === null || e === void 0 || e.remove(), this.cursor = null) : (this.cursor || (this.cursor = this.view.scrollDOM.appendChild(document.createElement("div")), this.cursor.className = "cm-dropCursor"), (i.startState.field(uo) != t || i.docChanged || i.geometryChanged) && this.view.requestMeasure(this.measureReq));
  }
  readPos() {
    let { view: i } = this, e = i.state.field(uo), t = e != null && i.coordsAtPos(e);
    if (!t)
      return null;
    let n = i.scrollDOM.getBoundingClientRect();
    return {
      left: t.left - n.left + i.scrollDOM.scrollLeft * i.scaleX,
      top: t.top - n.top + i.scrollDOM.scrollTop * i.scaleY,
      height: t.bottom - t.top
    };
  }
  drawCursor(i) {
    if (this.cursor) {
      let { scaleX: e, scaleY: t } = this.view;
      i ? (this.cursor.style.left = i.left / e + "px", this.cursor.style.top = i.top / t + "px", this.cursor.style.height = i.height / t + "px") : this.cursor.style.left = "-100000px";
    }
  }
  destroy() {
    this.cursor && this.cursor.remove();
  }
  setDropPos(i) {
    this.view.state.field(uo) != i && this.view.dispatch({ effects: Xw.of(i) });
  }
}, {
  eventObservers: {
    dragover(i) {
      this.setDropPos(this.view.posAtCoords({ x: i.clientX, y: i.clientY }));
    },
    dragleave(i) {
      (i.target == this.view.contentDOM || !this.view.contentDOM.contains(i.relatedTarget)) && this.setDropPos(null);
    },
    dragend() {
      this.setDropPos(null);
    },
    drop() {
      this.setDropPos(null);
    }
  }
});
function Y5() {
  return [uo, U5];
}
function O0(i, e, t, n, r) {
  e.lastIndex = 0;
  for (let s = i.iterRange(t, n), o = t, l; !s.next().done; o += s.value.length)
    if (!s.lineBreak)
      for (; l = e.exec(s.value); )
        r(o + l.index, l);
}
function G5(i, e) {
  let t = i.visibleRanges;
  if (t.length == 1 && t[0].from == i.viewport.from && t[0].to == i.viewport.to)
    return t;
  let n = [];
  for (let { from: r, to: s } of t)
    r = Math.max(i.state.doc.lineAt(r).from, r - e), s = Math.min(i.state.doc.lineAt(s).to, s + e), n.length && n[n.length - 1].to >= r ? n[n.length - 1].to = s : n.push({ from: r, to: s });
  return n;
}
class F5 {
  /**
  Create a decorator.
  */
  constructor(e) {
    const { regexp: t, decoration: n, decorate: r, boundary: s, maxLength: o = 1e3 } = e;
    if (!t.global)
      throw new RangeError("The regular expression given to MatchDecorator should have its 'g' flag set");
    if (this.regexp = t, r)
      this.addMatch = (l, a, h, c) => r(c, h, h + l[0].length, l, a);
    else if (typeof n == "function")
      this.addMatch = (l, a, h, c) => {
        let f = n(l, a, h);
        f && c(h, h + l[0].length, f);
      };
    else if (n)
      this.addMatch = (l, a, h, c) => c(h, h + l[0].length, n);
    else
      throw new RangeError("Either 'decorate' or 'decoration' should be provided to MatchDecorator");
    this.boundary = s, this.maxLength = o;
  }
  /**
  Compute the full set of decorations for matches in the given
  view's viewport. You'll want to call this when initializing your
  plugin.
  */
  createDeco(e) {
    let t = new vr(), n = t.add.bind(t);
    for (let { from: r, to: s } of G5(e, this.maxLength))
      O0(e.state.doc, this.regexp, r, s, (o, l) => this.addMatch(l, e, o, n));
    return t.finish();
  }
  /**
  Update a set of decorations for a view update. `deco` _must_ be
  the set of decorations produced by _this_ `MatchDecorator` for
  the view state before the update.
  */
  updateDeco(e, t) {
    let n = 1e9, r = -1;
    return e.docChanged && e.changes.iterChanges((s, o, l, a) => {
      a >= e.view.viewport.from && l <= e.view.viewport.to && (n = Math.min(l, n), r = Math.max(a, r));
    }), e.viewportMoved || r - n > 1e3 ? this.createDeco(e.view) : r > -1 ? this.updateRange(e.view, t.map(e.changes), n, r) : t;
  }
  updateRange(e, t, n, r) {
    for (let s of e.visibleRanges) {
      let o = Math.max(s.from, n), l = Math.min(s.to, r);
      if (l >= o) {
        let a = e.state.doc.lineAt(o), h = a.to < l ? e.state.doc.lineAt(l) : a, c = Math.max(s.from, a.from), f = Math.min(s.to, h.to);
        if (this.boundary) {
          for (; o > a.from; o--)
            if (this.boundary.test(a.text[o - 1 - a.from])) {
              c = o;
              break;
            }
          for (; l < h.to; l++)
            if (this.boundary.test(h.text[l - h.from])) {
              f = l;
              break;
            }
        }
        let u = [], d, O = (p, m, g) => u.push(g.range(p, m));
        if (a == h)
          for (this.regexp.lastIndex = c - a.from; (d = this.regexp.exec(a.text)) && d.index < f - a.from; )
            this.addMatch(d, e, d.index + a.from, O);
        else
          O0(e.state.doc, this.regexp, c, f, (p, m) => this.addMatch(m, e, p, O));
        t = t.update({ filterFrom: c, filterTo: f, filter: (p, m) => p < c || m > f, add: u });
      }
    }
    return t;
  }
}
const Pd = /x/.unicode != null ? "gu" : "g", H5 = /* @__PURE__ */ new RegExp(`[\0-\b
--­؜​‎‏\u2028\u2029‭‮⁦⁧⁩\uFEFF￹-￼]`, Pd), K5 = {
  0: "null",
  7: "bell",
  8: "backspace",
  10: "newline",
  11: "vertical tab",
  13: "carriage return",
  27: "escape",
  8203: "zero width space",
  8204: "zero width non-joiner",
  8205: "zero width joiner",
  8206: "left-to-right mark",
  8207: "right-to-left mark",
  8232: "line separator",
  8237: "left-to-right override",
  8238: "right-to-left override",
  8294: "left-to-right isolate",
  8295: "right-to-left isolate",
  8297: "pop directional isolate",
  8233: "paragraph separator",
  65279: "zero width no-break space",
  65532: "object replacement"
};
let ff = null;
function J5() {
  var i;
  if (ff == null && typeof document < "u" && document.body) {
    let e = document.body.style;
    ff = ((i = e.tabSize) !== null && i !== void 0 ? i : e.MozTabSize) != null;
  }
  return ff || !1;
}
const za = /* @__PURE__ */ I.define({
  combine(i) {
    let e = Ki(i, {
      render: null,
      specialChars: H5,
      addSpecialChars: null
    });
    return (e.replaceTabs = !J5()) && (e.specialChars = new RegExp("	|" + e.specialChars.source, Pd)), e.addSpecialChars && (e.specialChars = new RegExp(e.specialChars.source + "|" + e.addSpecialChars.source, Pd)), e;
  }
});
function eM(i = {}) {
  return [za.of(i), tM()];
}
let p0 = null;
function tM() {
  return p0 || (p0 = at.fromClass(class {
    constructor(i) {
      this.view = i, this.decorations = K.none, this.decorationCache = /* @__PURE__ */ Object.create(null), this.decorator = this.makeDecorator(i.state.facet(za)), this.decorations = this.decorator.createDeco(i);
    }
    makeDecorator(i) {
      return new F5({
        regexp: i.specialChars,
        decoration: (e, t, n) => {
          let { doc: r } = t.state, s = Pt(e[0], 0);
          if (s == 9) {
            let o = r.lineAt(n), l = t.state.tabSize, a = gi(o.text, l, n - o.from);
            return K.replace({
              widget: new sM((l - a % l) * this.view.defaultCharacterWidth / this.view.scaleX)
            });
          }
          return this.decorationCache[s] || (this.decorationCache[s] = K.replace({ widget: new rM(i, s) }));
        },
        boundary: i.replaceTabs ? void 0 : /[^]/
      });
    }
    update(i) {
      let e = i.state.facet(za);
      i.startState.facet(za) != e ? (this.decorator = this.makeDecorator(e), this.decorations = this.decorator.createDeco(i.view)) : this.decorations = this.decorator.updateDeco(i, this.decorations);
    }
  }, {
    decorations: (i) => i.decorations
  }));
}
const iM = "•";
function nM(i) {
  return i >= 32 ? iM : i == 10 ? "␤" : String.fromCharCode(9216 + i);
}
class rM extends wn {
  constructor(e, t) {
    super(), this.options = e, this.code = t;
  }
  eq(e) {
    return e.code == this.code;
  }
  toDOM(e) {
    let t = nM(this.code), n = e.state.phrase("Control character") + " " + (K5[this.code] || "0x" + this.code.toString(16)), r = this.options.render && this.options.render(this.code, n, t);
    if (r)
      return r;
    let s = document.createElement("span");
    return s.textContent = t, s.title = n, s.setAttribute("aria-label", n), s.className = "cm-specialChar", s;
  }
  ignoreEvent() {
    return !1;
  }
}
class sM extends wn {
  constructor(e) {
    super(), this.width = e;
  }
  eq(e) {
    return e.width == this.width;
  }
  toDOM() {
    let e = document.createElement("span");
    return e.textContent = "	", e.className = "cm-tab", e.style.width = this.width + "px", e;
  }
  ignoreEvent() {
    return !1;
  }
}
function oM() {
  return aM;
}
const lM = /* @__PURE__ */ K.line({ class: "cm-activeLine" }), aM = /* @__PURE__ */ at.fromClass(class {
  constructor(i) {
    this.decorations = this.getDeco(i);
  }
  update(i) {
    (i.docChanged || i.selectionSet) && (this.decorations = this.getDeco(i.view));
  }
  getDeco(i) {
    let e = -1, t = [];
    for (let n of i.state.selection.ranges) {
      let r = i.lineBlockAt(n.head);
      r.from > e && (t.push(lM.range(r.from)), e = r.from);
    }
    return K.set(t);
  }
}, {
  decorations: (i) => i.decorations
}), $d = 2e3;
function hM(i, e, t) {
  let n = Math.min(e.line, t.line), r = Math.max(e.line, t.line), s = [];
  if (e.off > $d || t.off > $d || e.col < 0 || t.col < 0) {
    let o = Math.min(e.off, t.off), l = Math.max(e.off, t.off);
    for (let a = n; a <= r; a++) {
      let h = i.doc.line(a);
      h.length <= l && s.push(C.range(h.from + o, h.to + l));
    }
  } else {
    let o = Math.min(e.col, t.col), l = Math.max(e.col, t.col);
    for (let a = n; a <= r; a++) {
      let h = i.doc.line(a), c = Gu(h.text, o, i.tabSize, !0);
      if (c < 0)
        s.push(C.cursor(h.to));
      else {
        let f = Gu(h.text, l, i.tabSize);
        s.push(C.range(h.from + c, h.from + f));
      }
    }
  }
  return s;
}
function cM(i, e) {
  let t = i.coordsAtPos(i.viewport.from);
  return t ? Math.round(Math.abs((t.left - e) / i.defaultCharacterWidth)) : -1;
}
function m0(i, e) {
  let t = i.posAtCoords({ x: e.clientX, y: e.clientY }, !1), n = i.state.doc.lineAt(t), r = t - n.from, s = r > $d ? -1 : r == n.length ? cM(i, e.clientX) : gi(n.text, i.state.tabSize, t - n.from);
  return { line: n.number, col: s, off: r };
}
function fM(i, e) {
  let t = m0(i, e), n = i.state.selection;
  return t ? {
    update(r) {
      if (r.docChanged) {
        let s = r.changes.mapPos(r.startState.doc.line(t.line).from), o = r.state.doc.lineAt(s);
        t = { line: o.number, col: t.col, off: Math.min(t.off, o.length) }, n = n.map(r.changes);
      }
    },
    get(r, s, o) {
      let l = m0(i, r);
      if (!l)
        return n;
      let a = hM(i.state, t, l);
      return a.length ? o ? C.create(a.concat(n.ranges)) : C.create(a) : n;
    }
  } : null;
}
function uM(i) {
  let e = (t) => t.altKey && t.button == 0;
  return W.mouseSelectionStyle.of((t, n) => e(n) ? fM(t, n) : null);
}
const dM = {
  Alt: [18, (i) => !!i.altKey],
  Control: [17, (i) => !!i.ctrlKey],
  Shift: [16, (i) => !!i.shiftKey],
  Meta: [91, (i) => !!i.metaKey]
}, OM = { style: "cursor: crosshair" };
function pM(i = {}) {
  let [e, t] = dM[i.key || "Alt"], n = at.fromClass(class {
    constructor(r) {
      this.view = r, this.isDown = !1;
    }
    set(r) {
      this.isDown != r && (this.isDown = r, this.view.update([]));
    }
  }, {
    eventObservers: {
      keydown(r) {
        this.set(r.keyCode == e || t(r));
      },
      keyup(r) {
        (r.keyCode == e || !t(r)) && this.set(!1);
      },
      mousemove(r) {
        this.set(t(r));
      }
    }
  });
  return [
    n,
    W.contentAttributes.of((r) => {
      var s;
      return !((s = r.plugin(n)) === null || s === void 0) && s.isDown ? OM : null;
    })
  ];
}
const Us = "-10000px";
class Lw {
  constructor(e, t, n, r) {
    this.facet = t, this.createTooltipView = n, this.removeTooltipView = r, this.input = e.state.facet(t), this.tooltips = this.input.filter((o) => o);
    let s = null;
    this.tooltipViews = this.tooltips.map((o) => s = n(o, s));
  }
  update(e, t) {
    var n;
    let r = e.state.facet(this.facet), s = r.filter((a) => a);
    if (r === this.input) {
      for (let a of this.tooltipViews)
        a.update && a.update(e);
      return !1;
    }
    let o = [], l = t ? [] : null;
    for (let a = 0; a < s.length; a++) {
      let h = s[a], c = -1;
      if (h) {
        for (let f = 0; f < this.tooltips.length; f++) {
          let u = this.tooltips[f];
          u && u.create == h.create && (c = f);
        }
        if (c < 0)
          o[a] = this.createTooltipView(h, a ? o[a - 1] : null), l && (l[a] = !!h.above);
        else {
          let f = o[a] = this.tooltipViews[c];
          l && (l[a] = t[c]), f.update && f.update(e);
        }
      }
    }
    for (let a of this.tooltipViews)
      o.indexOf(a) < 0 && (this.removeTooltipView(a), (n = a.destroy) === null || n === void 0 || n.call(a));
    return t && (l.forEach((a, h) => t[h] = a), t.length = l.length), this.input = r, this.tooltips = s, this.tooltipViews = o, !0;
  }
}
function mM(i) {
  let e = i.dom.ownerDocument.documentElement;
  return { top: 0, left: 0, bottom: e.clientHeight, right: e.clientWidth };
}
const uf = /* @__PURE__ */ I.define({
  combine: (i) => {
    var e, t, n;
    return {
      position: z.ios ? "absolute" : ((e = i.find((r) => r.position)) === null || e === void 0 ? void 0 : e.position) || "fixed",
      parent: ((t = i.find((r) => r.parent)) === null || t === void 0 ? void 0 : t.parent) || null,
      tooltipSpace: ((n = i.find((r) => r.tooltipSpace)) === null || n === void 0 ? void 0 : n.tooltipSpace) || mM
    };
  }
}), g0 = /* @__PURE__ */ new WeakMap(), Cp = /* @__PURE__ */ at.fromClass(class {
  constructor(i) {
    this.view = i, this.above = [], this.inView = !0, this.madeAbsolute = !1, this.lastTransaction = 0, this.measureTimeout = -1;
    let e = i.state.facet(uf);
    this.position = e.position, this.parent = e.parent, this.classes = i.themeClasses, this.createContainer(), this.measureReq = { read: this.readMeasure.bind(this), write: this.writeMeasure.bind(this), key: this }, this.resizeObserver = typeof ResizeObserver == "function" ? new ResizeObserver(() => this.measureSoon()) : null, this.manager = new Lw(i, Rp, (t, n) => this.createTooltip(t, n), (t) => {
      this.resizeObserver && this.resizeObserver.unobserve(t.dom), t.dom.remove();
    }), this.above = this.manager.tooltips.map((t) => !!t.above), this.intersectionObserver = typeof IntersectionObserver == "function" ? new IntersectionObserver((t) => {
      Date.now() > this.lastTransaction - 50 && t.length > 0 && t[t.length - 1].intersectionRatio < 1 && this.measureSoon();
    }, { threshold: [1] }) : null, this.observeIntersection(), i.win.addEventListener("resize", this.measureSoon = this.measureSoon.bind(this)), this.maybeMeasure();
  }
  createContainer() {
    this.parent ? (this.container = document.createElement("div"), this.container.style.position = "relative", this.container.className = this.view.themeClasses, this.parent.appendChild(this.container)) : this.container = this.view.dom;
  }
  observeIntersection() {
    if (this.intersectionObserver) {
      this.intersectionObserver.disconnect();
      for (let i of this.manager.tooltipViews)
        this.intersectionObserver.observe(i.dom);
    }
  }
  measureSoon() {
    this.measureTimeout < 0 && (this.measureTimeout = setTimeout(() => {
      this.measureTimeout = -1, this.maybeMeasure();
    }, 50));
  }
  update(i) {
    i.transactions.length && (this.lastTransaction = Date.now());
    let e = this.manager.update(i, this.above);
    e && this.observeIntersection();
    let t = e || i.geometryChanged, n = i.state.facet(uf);
    if (n.position != this.position && !this.madeAbsolute) {
      this.position = n.position;
      for (let r of this.manager.tooltipViews)
        r.dom.style.position = this.position;
      t = !0;
    }
    if (n.parent != this.parent) {
      this.parent && this.container.remove(), this.parent = n.parent, this.createContainer();
      for (let r of this.manager.tooltipViews)
        this.container.appendChild(r.dom);
      t = !0;
    } else this.parent && this.view.themeClasses != this.classes && (this.classes = this.container.className = this.view.themeClasses);
    t && this.maybeMeasure();
  }
  createTooltip(i, e) {
    let t = i.create(this.view), n = e ? e.dom : null;
    if (t.dom.classList.add("cm-tooltip"), i.arrow && !t.dom.querySelector(".cm-tooltip > .cm-tooltip-arrow")) {
      let r = document.createElement("div");
      r.className = "cm-tooltip-arrow", t.dom.appendChild(r);
    }
    return t.dom.style.position = this.position, t.dom.style.top = Us, t.dom.style.left = "0px", this.container.insertBefore(t.dom, n), t.mount && t.mount(this.view), this.resizeObserver && this.resizeObserver.observe(t.dom), t;
  }
  destroy() {
    var i, e, t;
    this.view.win.removeEventListener("resize", this.measureSoon);
    for (let n of this.manager.tooltipViews)
      n.dom.remove(), (i = n.destroy) === null || i === void 0 || i.call(n);
    this.parent && this.container.remove(), (e = this.resizeObserver) === null || e === void 0 || e.disconnect(), (t = this.intersectionObserver) === null || t === void 0 || t.disconnect(), clearTimeout(this.measureTimeout);
  }
  readMeasure() {
    let i = 1, e = 1, t = !1;
    if (this.position == "fixed" && this.manager.tooltipViews.length) {
      let { dom: s } = this.manager.tooltipViews[0];
      if (z.gecko)
        t = s.offsetParent != this.container.ownerDocument.body;
      else if (s.style.top == Us && s.style.left == "0px") {
        let o = s.getBoundingClientRect();
        t = Math.abs(o.top + 1e4) > 1 || Math.abs(o.left) > 1;
      }
    }
    if (t || this.position == "absolute")
      if (this.parent) {
        let s = this.parent.getBoundingClientRect();
        s.width && s.height && (i = s.width / this.parent.offsetWidth, e = s.height / this.parent.offsetHeight);
      } else
        ({ scaleX: i, scaleY: e } = this.view.viewState);
    let n = this.view.scrollDOM.getBoundingClientRect(), r = $p(this.view);
    return {
      visible: {
        left: n.left + r.left,
        top: n.top + r.top,
        right: n.right - r.right,
        bottom: n.bottom - r.bottom
      },
      parent: this.parent ? this.container.getBoundingClientRect() : this.view.dom.getBoundingClientRect(),
      pos: this.manager.tooltips.map((s, o) => {
        let l = this.manager.tooltipViews[o];
        return l.getCoords ? l.getCoords(s.pos) : this.view.coordsAtPos(s.pos);
      }),
      size: this.manager.tooltipViews.map(({ dom: s }) => s.getBoundingClientRect()),
      space: this.view.state.facet(uf).tooltipSpace(this.view),
      scaleX: i,
      scaleY: e,
      makeAbsolute: t
    };
  }
  writeMeasure(i) {
    var e;
    if (i.makeAbsolute) {
      this.madeAbsolute = !0, this.position = "absolute";
      for (let l of this.manager.tooltipViews)
        l.dom.style.position = "absolute";
    }
    let { visible: t, space: n, scaleX: r, scaleY: s } = i, o = [];
    for (let l = 0; l < this.manager.tooltips.length; l++) {
      let a = this.manager.tooltips[l], h = this.manager.tooltipViews[l], { dom: c } = h, f = i.pos[l], u = i.size[l];
      if (!f || a.clip !== !1 && (f.bottom <= Math.max(t.top, n.top) || f.top >= Math.min(t.bottom, n.bottom) || f.right < Math.max(t.left, n.left) - 0.1 || f.left > Math.min(t.right, n.right) + 0.1)) {
        c.style.top = Us;
        continue;
      }
      let d = a.arrow ? h.dom.querySelector(".cm-tooltip-arrow") : null, O = d ? 7 : 0, p = u.right - u.left, m = (e = g0.get(h)) !== null && e !== void 0 ? e : u.bottom - u.top, g = h.offset || yM, S = this.view.textDirection == Ce.LTR, x = u.width > n.right - n.left ? S ? n.left : n.right - u.width : S ? Math.max(n.left, Math.min(f.left - (d ? 14 : 0) + g.x, n.right - p)) : Math.min(Math.max(n.left, f.left - p + (d ? 14 : 0) - g.x), n.right - p), k = this.above[l];
      !a.strictSide && (k ? f.top - m - O - g.y < n.top : f.bottom + m + O + g.y > n.bottom) && k == n.bottom - f.bottom > f.top - n.top && (k = this.above[l] = !k);
      let w = (k ? f.top - n.top : n.bottom - f.bottom) - O;
      if (w < m && h.resize !== !1) {
        if (w < this.view.defaultLineHeight) {
          c.style.top = Us;
          continue;
        }
        g0.set(h, m), c.style.height = (m = w) / s + "px";
      } else c.style.height && (c.style.height = "");
      let b = k ? f.top - m - O - g.y : f.bottom + O + g.y, Q = x + p;
      if (h.overlap !== !0)
        for (let R of o)
          R.left < Q && R.right > x && R.top < b + m && R.bottom > b && (b = k ? R.top - m - 2 - O : R.bottom + O + 2);
      if (this.position == "absolute" ? (c.style.top = (b - i.parent.top) / s + "px", y0(c, (x - i.parent.left) / r)) : (c.style.top = b / s + "px", y0(c, x / r)), d) {
        let R = f.left + (S ? g.x : -g.x) - (x + 14 - 7);
        d.style.left = R / r + "px";
      }
      h.overlap !== !0 && o.push({ left: x, top: b, right: Q, bottom: b + m }), c.classList.toggle("cm-tooltip-above", k), c.classList.toggle("cm-tooltip-below", !k), h.positioned && h.positioned(i.space);
    }
  }
  maybeMeasure() {
    if (this.manager.tooltips.length && (this.view.inView && this.view.requestMeasure(this.measureReq), this.inView != this.view.inView && (this.inView = this.view.inView, !this.inView)))
      for (let i of this.manager.tooltipViews)
        i.dom.style.top = Us;
  }
}, {
  eventObservers: {
    scroll() {
      this.maybeMeasure();
    }
  }
});
function y0(i, e) {
  let t = parseInt(i.style.left, 10);
  (isNaN(t) || Math.abs(e - t) > 1) && (i.style.left = e + "px");
}
const gM = /* @__PURE__ */ W.baseTheme({
  ".cm-tooltip": {
    zIndex: 500,
    boxSizing: "border-box"
  },
  "&light .cm-tooltip": {
    border: "1px solid #bbb",
    backgroundColor: "#f5f5f5"
  },
  "&light .cm-tooltip-section:not(:first-child)": {
    borderTop: "1px solid #bbb"
  },
  "&dark .cm-tooltip": {
    backgroundColor: "#333338",
    color: "white"
  },
  ".cm-tooltip-arrow": {
    height: "7px",
    width: `${7 * 2}px`,
    position: "absolute",
    zIndex: -1,
    overflow: "hidden",
    "&:before, &:after": {
      content: "''",
      position: "absolute",
      width: 0,
      height: 0,
      borderLeft: "7px solid transparent",
      borderRight: "7px solid transparent"
    },
    ".cm-tooltip-above &": {
      bottom: "-7px",
      "&:before": {
        borderTop: "7px solid #bbb"
      },
      "&:after": {
        borderTop: "7px solid #f5f5f5",
        bottom: "1px"
      }
    },
    ".cm-tooltip-below &": {
      top: "-7px",
      "&:before": {
        borderBottom: "7px solid #bbb"
      },
      "&:after": {
        borderBottom: "7px solid #f5f5f5",
        top: "1px"
      }
    }
  },
  "&dark .cm-tooltip .cm-tooltip-arrow": {
    "&:before": {
      borderTopColor: "#333338",
      borderBottomColor: "#333338"
    },
    "&:after": {
      borderTopColor: "transparent",
      borderBottomColor: "transparent"
    }
  }
}), yM = { x: 0, y: 0 }, Rp = /* @__PURE__ */ I.define({
  enables: [Cp, gM]
}), xh = /* @__PURE__ */ I.define({
  combine: (i) => i.reduce((e, t) => e.concat(t), [])
});
class mc {
  // Needs to be static so that host tooltip instances always match
  static create(e) {
    return new mc(e);
  }
  constructor(e) {
    this.view = e, this.mounted = !1, this.dom = document.createElement("div"), this.dom.classList.add("cm-tooltip-hover"), this.manager = new Lw(e, xh, (t, n) => this.createHostedView(t, n), (t) => t.dom.remove());
  }
  createHostedView(e, t) {
    let n = e.create(this.view);
    return n.dom.classList.add("cm-tooltip-section"), this.dom.insertBefore(n.dom, t ? t.dom.nextSibling : this.dom.firstChild), this.mounted && n.mount && n.mount(this.view), n;
  }
  mount(e) {
    for (let t of this.manager.tooltipViews)
      t.mount && t.mount(e);
    this.mounted = !0;
  }
  positioned(e) {
    for (let t of this.manager.tooltipViews)
      t.positioned && t.positioned(e);
  }
  update(e) {
    this.manager.update(e);
  }
  destroy() {
    var e;
    for (let t of this.manager.tooltipViews)
      (e = t.destroy) === null || e === void 0 || e.call(t);
  }
  passProp(e) {
    let t;
    for (let n of this.manager.tooltipViews) {
      let r = n[e];
      if (r !== void 0) {
        if (t === void 0)
          t = r;
        else if (t !== r)
          return;
      }
    }
    return t;
  }
  get offset() {
    return this.passProp("offset");
  }
  get getCoords() {
    return this.passProp("getCoords");
  }
  get overlap() {
    return this.passProp("overlap");
  }
  get resize() {
    return this.passProp("resize");
  }
}
const SM = /* @__PURE__ */ Rp.compute([xh], (i) => {
  let e = i.facet(xh);
  return e.length === 0 ? null : {
    pos: Math.min(...e.map((t) => t.pos)),
    end: Math.max(...e.map((t) => {
      var n;
      return (n = t.end) !== null && n !== void 0 ? n : t.pos;
    })),
    create: mc.create,
    above: e[0].above,
    arrow: e.some((t) => t.arrow)
  };
});
class bM {
  constructor(e, t, n, r, s) {
    this.view = e, this.source = t, this.field = n, this.setHover = r, this.hoverTime = s, this.hoverTimeout = -1, this.restartTimeout = -1, this.pending = null, this.lastMove = { x: 0, y: 0, target: e.dom, time: 0 }, this.checkHover = this.checkHover.bind(this), e.dom.addEventListener("mouseleave", this.mouseleave = this.mouseleave.bind(this)), e.dom.addEventListener("mousemove", this.mousemove = this.mousemove.bind(this));
  }
  update() {
    this.pending && (this.pending = null, clearTimeout(this.restartTimeout), this.restartTimeout = setTimeout(() => this.startHover(), 20));
  }
  get active() {
    return this.view.state.field(this.field);
  }
  checkHover() {
    if (this.hoverTimeout = -1, this.active.length)
      return;
    let e = Date.now() - this.lastMove.time;
    e < this.hoverTime ? this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime - e) : this.startHover();
  }
  startHover() {
    clearTimeout(this.restartTimeout);
    let { view: e, lastMove: t } = this, n = e.docView.nearest(t.target);
    if (!n)
      return;
    let r, s = 1;
    if (n instanceof Sp)
      r = n.posAtStart;
    else {
      if (r = e.posAtCoords(t), r == null)
        return;
      let l = e.coordsAtPos(r);
      if (!l || t.y < l.top || t.y > l.bottom || t.x < l.left - e.defaultCharacterWidth || t.x > l.right + e.defaultCharacterWidth)
        return;
      let a = e.bidiSpans(e.state.doc.lineAt(r)).find((c) => c.from <= r && c.to >= r), h = a && a.dir == Ce.RTL ? -1 : 1;
      s = t.x < l.left ? -h : h;
    }
    let o = this.source(e, r, s);
    if (o?.then) {
      let l = this.pending = { pos: r };
      o.then((a) => {
        this.pending == l && (this.pending = null, a && !(Array.isArray(a) && !a.length) && e.dispatch({ effects: this.setHover.of(Array.isArray(a) ? a : [a]) }));
      }, (a) => Ct(e.state, a, "hover tooltip"));
    } else o && !(Array.isArray(o) && !o.length) && e.dispatch({ effects: this.setHover.of(Array.isArray(o) ? o : [o]) });
  }
  get tooltip() {
    let e = this.view.plugin(Cp), t = e ? e.manager.tooltips.findIndex((n) => n.create == mc.create) : -1;
    return t > -1 ? e.manager.tooltipViews[t] : null;
  }
  mousemove(e) {
    var t, n;
    this.lastMove = { x: e.clientX, y: e.clientY, target: e.target, time: Date.now() }, this.hoverTimeout < 0 && (this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime));
    let { active: r, tooltip: s } = this;
    if (r.length && s && !xM(s.dom, e) || this.pending) {
      let { pos: o } = r[0] || this.pending, l = (n = (t = r[0]) === null || t === void 0 ? void 0 : t.end) !== null && n !== void 0 ? n : o;
      (o == l ? this.view.posAtCoords(this.lastMove) != o : !wM(this.view, o, l, e.clientX, e.clientY)) && (this.view.dispatch({ effects: this.setHover.of([]) }), this.pending = null);
    }
  }
  mouseleave(e) {
    clearTimeout(this.hoverTimeout), this.hoverTimeout = -1;
    let { active: t } = this;
    if (t.length) {
      let { tooltip: n } = this;
      n && n.dom.contains(e.relatedTarget) ? this.watchTooltipLeave(n.dom) : this.view.dispatch({ effects: this.setHover.of([]) });
    }
  }
  watchTooltipLeave(e) {
    let t = (n) => {
      e.removeEventListener("mouseleave", t), this.active.length && !this.view.dom.contains(n.relatedTarget) && this.view.dispatch({ effects: this.setHover.of([]) });
    };
    e.addEventListener("mouseleave", t);
  }
  destroy() {
    clearTimeout(this.hoverTimeout), this.view.dom.removeEventListener("mouseleave", this.mouseleave), this.view.dom.removeEventListener("mousemove", this.mousemove);
  }
}
const Kl = 4;
function xM(i, e) {
  let { left: t, right: n, top: r, bottom: s } = i.getBoundingClientRect(), o;
  if (o = i.querySelector(".cm-tooltip-arrow")) {
    let l = o.getBoundingClientRect();
    r = Math.min(l.top, r), s = Math.max(l.bottom, s);
  }
  return e.clientX >= t - Kl && e.clientX <= n + Kl && e.clientY >= r - Kl && e.clientY <= s + Kl;
}
function wM(i, e, t, n, r, s) {
  let o = i.scrollDOM.getBoundingClientRect(), l = i.documentTop + i.documentPadding.top + i.contentHeight;
  if (o.left > n || o.right < n || o.top > r || Math.min(o.bottom, l) < r)
    return !1;
  let a = i.posAtCoords({ x: n, y: r }, !1);
  return a >= e && a <= t;
}
function kM(i, e = {}) {
  let t = le.define(), n = gt.define({
    create() {
      return [];
    },
    update(r, s) {
      if (r.length && (e.hideOnChange && (s.docChanged || s.selection) ? r = [] : e.hideOn && (r = r.filter((o) => !e.hideOn(s, o))), s.docChanged)) {
        let o = [];
        for (let l of r) {
          let a = s.changes.mapPos(l.pos, -1, st.TrackDel);
          if (a != null) {
            let h = Object.assign(/* @__PURE__ */ Object.create(null), l);
            h.pos = a, h.end != null && (h.end = s.changes.mapPos(h.end)), o.push(h);
          }
        }
        r = o;
      }
      for (let o of s.effects)
        o.is(t) && (r = o.value), o.is(vM) && (r = []);
      return r;
    },
    provide: (r) => xh.from(r)
  });
  return {
    active: n,
    extension: [
      n,
      at.define((r) => new bM(
        r,
        i,
        n,
        t,
        e.hoverTime || 300
        /* Hover.Time */
      )),
      SM
    ]
  };
}
function Bw(i, e) {
  let t = i.plugin(Cp);
  if (!t)
    return null;
  let n = t.manager.tooltips.indexOf(e);
  return n < 0 ? null : t.manager.tooltipViews[n];
}
const vM = /* @__PURE__ */ le.define(), S0 = /* @__PURE__ */ I.define({
  combine(i) {
    let e, t;
    for (let n of i)
      e = e || n.topContainer, t = t || n.bottomContainer;
    return { topContainer: e, bottomContainer: t };
  }
});
function zo(i, e) {
  let t = i.plugin(Zw), n = t ? t.specs.indexOf(e) : -1;
  return n > -1 ? t.panels[n] : null;
}
const Zw = /* @__PURE__ */ at.fromClass(class {
  constructor(i) {
    this.input = i.state.facet(Io), this.specs = this.input.filter((t) => t), this.panels = this.specs.map((t) => t(i));
    let e = i.state.facet(S0);
    this.top = new Jl(i, !0, e.topContainer), this.bottom = new Jl(i, !1, e.bottomContainer), this.top.sync(this.panels.filter((t) => t.top)), this.bottom.sync(this.panels.filter((t) => !t.top));
    for (let t of this.panels)
      t.dom.classList.add("cm-panel"), t.mount && t.mount();
  }
  update(i) {
    let e = i.state.facet(S0);
    this.top.container != e.topContainer && (this.top.sync([]), this.top = new Jl(i.view, !0, e.topContainer)), this.bottom.container != e.bottomContainer && (this.bottom.sync([]), this.bottom = new Jl(i.view, !1, e.bottomContainer)), this.top.syncClasses(), this.bottom.syncClasses();
    let t = i.state.facet(Io);
    if (t != this.input) {
      let n = t.filter((a) => a), r = [], s = [], o = [], l = [];
      for (let a of n) {
        let h = this.specs.indexOf(a), c;
        h < 0 ? (c = a(i.view), l.push(c)) : (c = this.panels[h], c.update && c.update(i)), r.push(c), (c.top ? s : o).push(c);
      }
      this.specs = n, this.panels = r, this.top.sync(s), this.bottom.sync(o);
      for (let a of l)
        a.dom.classList.add("cm-panel"), a.mount && a.mount();
    } else
      for (let n of this.panels)
        n.update && n.update(i);
  }
  destroy() {
    this.top.sync([]), this.bottom.sync([]);
  }
}, {
  provide: (i) => W.scrollMargins.of((e) => {
    let t = e.plugin(i);
    return t && { top: t.top.scrollMargin(), bottom: t.bottom.scrollMargin() };
  })
});
class Jl {
  constructor(e, t, n) {
    this.view = e, this.top = t, this.container = n, this.dom = void 0, this.classes = "", this.panels = [], this.syncClasses();
  }
  sync(e) {
    for (let t of this.panels)
      t.destroy && e.indexOf(t) < 0 && t.destroy();
    this.panels = e, this.syncDOM();
  }
  syncDOM() {
    if (this.panels.length == 0) {
      this.dom && (this.dom.remove(), this.dom = void 0);
      return;
    }
    if (!this.dom) {
      this.dom = document.createElement("div"), this.dom.className = this.top ? "cm-panels cm-panels-top" : "cm-panels cm-panels-bottom", this.dom.style[this.top ? "top" : "bottom"] = "0";
      let t = this.container || this.view.dom;
      t.insertBefore(this.dom, this.top ? t.firstChild : null);
    }
    let e = this.dom.firstChild;
    for (let t of this.panels)
      if (t.dom.parentNode == this.dom) {
        for (; e != t.dom; )
          e = b0(e);
        e = e.nextSibling;
      } else
        this.dom.insertBefore(t.dom, e);
    for (; e; )
      e = b0(e);
  }
  scrollMargin() {
    return !this.dom || this.container ? 0 : Math.max(0, this.top ? this.dom.getBoundingClientRect().bottom - Math.max(0, this.view.scrollDOM.getBoundingClientRect().top) : Math.min(innerHeight, this.view.scrollDOM.getBoundingClientRect().bottom) - this.dom.getBoundingClientRect().top);
  }
  syncClasses() {
    if (!(!this.container || this.classes == this.view.themeClasses)) {
      for (let e of this.classes.split(" "))
        e && this.container.classList.remove(e);
      for (let e of (this.classes = this.view.themeClasses).split(" "))
        e && this.container.classList.add(e);
    }
  }
}
function b0(i) {
  let e = i.nextSibling;
  return i.remove(), e;
}
const Io = /* @__PURE__ */ I.define({
  enables: Zw
});
class yn extends kr {
  /**
  @internal
  */
  compare(e) {
    return this == e || this.constructor == e.constructor && this.eq(e);
  }
  /**
  Compare this marker to another marker of the same type.
  */
  eq(e) {
    return !1;
  }
  /**
  Called if the marker has a `toDOM` method and its representation
  was removed from a gutter.
  */
  destroy(e) {
  }
}
yn.prototype.elementClass = "";
yn.prototype.toDOM = void 0;
yn.prototype.mapMode = st.TrackBefore;
yn.prototype.startSide = yn.prototype.endSide = -1;
yn.prototype.point = !0;
const Ia = /* @__PURE__ */ I.define(), QM = /* @__PURE__ */ I.define(), PM = {
  class: "",
  renderEmptyElements: !1,
  elementStyle: "",
  markers: () => qe.empty,
  lineMarker: () => null,
  widgetMarker: () => null,
  lineMarkerChange: null,
  initialSpacer: null,
  updateSpacer: null,
  domEventHandlers: {}
}, Po = /* @__PURE__ */ I.define();
function $M(i) {
  return [Dw(), Po.of({ ...PM, ...i })];
}
const x0 = /* @__PURE__ */ I.define({
  combine: (i) => i.some((e) => e)
});
function Dw(i) {
  return [
    TM
  ];
}
const TM = /* @__PURE__ */ at.fromClass(class {
  constructor(i) {
    this.view = i, this.prevViewport = i.viewport, this.dom = document.createElement("div"), this.dom.className = "cm-gutters", this.dom.setAttribute("aria-hidden", "true"), this.dom.style.minHeight = this.view.contentHeight / this.view.scaleY + "px", this.gutters = i.state.facet(Po).map((e) => new k0(i, e));
    for (let e of this.gutters)
      this.dom.appendChild(e.dom);
    this.fixed = !i.state.facet(x0), this.fixed && (this.dom.style.position = "sticky"), this.syncGutters(!1), i.scrollDOM.insertBefore(this.dom, i.contentDOM);
  }
  update(i) {
    if (this.updateGutters(i)) {
      let e = this.prevViewport, t = i.view.viewport, n = Math.min(e.to, t.to) - Math.max(e.from, t.from);
      this.syncGutters(n < (t.to - t.from) * 0.8);
    }
    i.geometryChanged && (this.dom.style.minHeight = this.view.contentHeight / this.view.scaleY + "px"), this.view.state.facet(x0) != !this.fixed && (this.fixed = !this.fixed, this.dom.style.position = this.fixed ? "sticky" : ""), this.prevViewport = i.view.viewport;
  }
  syncGutters(i) {
    let e = this.dom.nextSibling;
    i && this.dom.remove();
    let t = qe.iter(this.view.state.facet(Ia), this.view.viewport.from), n = [], r = this.gutters.map((s) => new CM(s, this.view.viewport, -this.view.documentPadding.top));
    for (let s of this.view.viewportLineBlocks)
      if (n.length && (n = []), Array.isArray(s.type)) {
        let o = !0;
        for (let l of s.type)
          if (l.type == vt.Text && o) {
            Td(t, n, l.from);
            for (let a of r)
              a.line(this.view, l, n);
            o = !1;
          } else if (l.widget)
            for (let a of r)
              a.widget(this.view, l);
      } else if (s.type == vt.Text) {
        Td(t, n, s.from);
        for (let o of r)
          o.line(this.view, s, n);
      } else if (s.widget)
        for (let o of r)
          o.widget(this.view, s);
    for (let s of r)
      s.finish();
    i && this.view.scrollDOM.insertBefore(this.dom, e);
  }
  updateGutters(i) {
    let e = i.startState.facet(Po), t = i.state.facet(Po), n = i.docChanged || i.heightChanged || i.viewportChanged || !qe.eq(i.startState.facet(Ia), i.state.facet(Ia), i.view.viewport.from, i.view.viewport.to);
    if (e == t)
      for (let r of this.gutters)
        r.update(i) && (n = !0);
    else {
      n = !0;
      let r = [];
      for (let s of t) {
        let o = e.indexOf(s);
        o < 0 ? r.push(new k0(this.view, s)) : (this.gutters[o].update(i), r.push(this.gutters[o]));
      }
      for (let s of this.gutters)
        s.dom.remove(), r.indexOf(s) < 0 && s.destroy();
      for (let s of r)
        this.dom.appendChild(s.dom);
      this.gutters = r;
    }
    return n;
  }
  destroy() {
    for (let i of this.gutters)
      i.destroy();
    this.dom.remove();
  }
}, {
  provide: (i) => W.scrollMargins.of((e) => {
    let t = e.plugin(i);
    return !t || t.gutters.length == 0 || !t.fixed ? null : e.textDirection == Ce.LTR ? { left: t.dom.offsetWidth * e.scaleX } : { right: t.dom.offsetWidth * e.scaleX };
  })
});
function w0(i) {
  return Array.isArray(i) ? i : [i];
}
function Td(i, e, t) {
  for (; i.value && i.from <= t; )
    i.from == t && e.push(i.value), i.next();
}
class CM {
  constructor(e, t, n) {
    this.gutter = e, this.height = n, this.i = 0, this.cursor = qe.iter(e.markers, t.from);
  }
  addElement(e, t, n) {
    let { gutter: r } = this, s = (t.top - this.height) / e.scaleY, o = t.height / e.scaleY;
    if (this.i == r.elements.length) {
      let l = new Vw(e, o, s, n);
      r.elements.push(l), r.dom.appendChild(l.dom);
    } else
      r.elements[this.i].update(e, o, s, n);
    this.height = t.bottom, this.i++;
  }
  line(e, t, n) {
    let r = [];
    Td(this.cursor, r, t.from), n.length && (r = r.concat(n));
    let s = this.gutter.config.lineMarker(e, t, r);
    s && r.unshift(s);
    let o = this.gutter;
    r.length == 0 && !o.config.renderEmptyElements || this.addElement(e, t, r);
  }
  widget(e, t) {
    let n = this.gutter.config.widgetMarker(e, t.widget, t), r = n ? [n] : null;
    for (let s of e.state.facet(QM)) {
      let o = s(e, t.widget, t);
      o && (r || (r = [])).push(o);
    }
    r && this.addElement(e, t, r);
  }
  finish() {
    let e = this.gutter;
    for (; e.elements.length > this.i; ) {
      let t = e.elements.pop();
      e.dom.removeChild(t.dom), t.destroy();
    }
  }
}
class k0 {
  constructor(e, t) {
    this.view = e, this.config = t, this.elements = [], this.spacer = null, this.dom = document.createElement("div"), this.dom.className = "cm-gutter" + (this.config.class ? " " + this.config.class : "");
    for (let n in t.domEventHandlers)
      this.dom.addEventListener(n, (r) => {
        let s = r.target, o;
        if (s != this.dom && this.dom.contains(s)) {
          for (; s.parentNode != this.dom; )
            s = s.parentNode;
          let a = s.getBoundingClientRect();
          o = (a.top + a.bottom) / 2;
        } else
          o = r.clientY;
        let l = e.lineBlockAtHeight(o - e.documentTop);
        t.domEventHandlers[n](e, l, r) && r.preventDefault();
      });
    this.markers = w0(t.markers(e)), t.initialSpacer && (this.spacer = new Vw(e, 0, 0, [t.initialSpacer(e)]), this.dom.appendChild(this.spacer.dom), this.spacer.dom.style.cssText += "visibility: hidden; pointer-events: none");
  }
  update(e) {
    let t = this.markers;
    if (this.markers = w0(this.config.markers(e.view)), this.spacer && this.config.updateSpacer) {
      let r = this.config.updateSpacer(this.spacer.markers[0], e);
      r != this.spacer.markers[0] && this.spacer.update(e.view, 0, 0, [r]);
    }
    let n = e.view.viewport;
    return !qe.eq(this.markers, t, n.from, n.to) || (this.config.lineMarkerChange ? this.config.lineMarkerChange(e) : !1);
  }
  destroy() {
    for (let e of this.elements)
      e.destroy();
  }
}
class Vw {
  constructor(e, t, n, r) {
    this.height = -1, this.above = 0, this.markers = [], this.dom = document.createElement("div"), this.dom.className = "cm-gutterElement", this.update(e, t, n, r);
  }
  update(e, t, n, r) {
    this.height != t && (this.height = t, this.dom.style.height = t + "px"), this.above != n && (this.dom.style.marginTop = (this.above = n) ? n + "px" : ""), RM(this.markers, r) || this.setMarkers(e, r);
  }
  setMarkers(e, t) {
    let n = "cm-gutterElement", r = this.dom.firstChild;
    for (let s = 0, o = 0; ; ) {
      let l = o, a = s < t.length ? t[s++] : null, h = !1;
      if (a) {
        let c = a.elementClass;
        c && (n += " " + c);
        for (let f = o; f < this.markers.length; f++)
          if (this.markers[f].compare(a)) {
            l = f, h = !0;
            break;
          }
      } else
        l = this.markers.length;
      for (; o < l; ) {
        let c = this.markers[o++];
        if (c.toDOM) {
          c.destroy(r);
          let f = r.nextSibling;
          r.remove(), r = f;
        }
      }
      if (!a)
        break;
      a.toDOM && (h ? r = r.nextSibling : this.dom.insertBefore(a.toDOM(e), r)), h && o++;
    }
    this.dom.className = n, this.markers = t;
  }
  destroy() {
    this.setMarkers(null, []);
  }
}
function RM(i, e) {
  if (i.length != e.length)
    return !1;
  for (let t = 0; t < i.length; t++)
    if (!i[t].compare(e[t]))
      return !1;
  return !0;
}
const AM = /* @__PURE__ */ I.define(), EM = /* @__PURE__ */ I.define(), Nr = /* @__PURE__ */ I.define({
  combine(i) {
    return Ki(i, { formatNumber: String, domEventHandlers: {} }, {
      domEventHandlers(e, t) {
        let n = Object.assign({}, e);
        for (let r in t) {
          let s = n[r], o = t[r];
          n[r] = s ? (l, a, h) => s(l, a, h) || o(l, a, h) : o;
        }
        return n;
      }
    });
  }
});
class df extends yn {
  constructor(e) {
    super(), this.number = e;
  }
  eq(e) {
    return this.number == e.number;
  }
  toDOM() {
    return document.createTextNode(this.number);
  }
}
function Of(i, e) {
  return i.state.facet(Nr).formatNumber(e, i.state);
}
const MM = /* @__PURE__ */ Po.compute([Nr], (i) => ({
  class: "cm-lineNumbers",
  renderEmptyElements: !1,
  markers(e) {
    return e.state.facet(AM);
  },
  lineMarker(e, t, n) {
    return n.some((r) => r.toDOM) ? null : new df(Of(e, e.state.doc.lineAt(t.from).number));
  },
  widgetMarker: (e, t, n) => {
    for (let r of e.state.facet(EM)) {
      let s = r(e, t, n);
      if (s)
        return s;
    }
    return null;
  },
  lineMarkerChange: (e) => e.startState.facet(Nr) != e.state.facet(Nr),
  initialSpacer(e) {
    return new df(Of(e, v0(e.state.doc.lines)));
  },
  updateSpacer(e, t) {
    let n = Of(t.view, v0(t.view.state.doc.lines));
    return n == e.number ? e : new df(n);
  },
  domEventHandlers: i.facet(Nr).domEventHandlers
}));
function qM(i = {}) {
  return [
    Nr.of(i),
    Dw(),
    MM
  ];
}
function v0(i) {
  let e = 9;
  for (; e < i; )
    e = e * 10 + 9;
  return e;
}
const _M = /* @__PURE__ */ new class extends yn {
  constructor() {
    super(...arguments), this.elementClass = "cm-activeLineGutter";
  }
}(), XM = /* @__PURE__ */ Ia.compute(["selection"], (i) => {
  let e = [], t = -1;
  for (let n of i.selection.ranges) {
    let r = i.doc.lineAt(n.head).from;
    r > t && (t = r, e.push(_M.range(r)));
  }
  return qe.of(e);
});
function LM() {
  return XM;
}
const Ww = 1024;
let BM = 0, Ft = class {
  constructor(e, t) {
    this.from = e, this.to = t;
  }
}, se = class {
  /**
  Create a new node prop type.
  */
  constructor(e = {}) {
    this.id = BM++, this.perNode = !!e.perNode, this.deserialize = e.deserialize || (() => {
      throw new Error("This node type doesn't define a deserialize function");
    });
  }
  /**
  This is meant to be used with
  [`NodeSet.extend`](#common.NodeSet.extend) or
  [`LRParser.configure`](#lr.ParserConfig.props) to compute
  prop values for each node type in the set. Takes a [match
  object](#common.NodeType^match) or function that returns undefined
  if the node type doesn't get this prop, and the prop's value if
  it does.
  */
  add(e) {
    if (this.perNode)
      throw new RangeError("Can't add per-node props to node types");
    return typeof e != "function" && (e = ht.match(e)), (t) => {
      let n = e(t);
      return n === void 0 ? null : [this, n];
    };
  }
};
se.closedBy = new se({ deserialize: (i) => i.split(" ") });
se.openedBy = new se({ deserialize: (i) => i.split(" ") });
se.group = new se({ deserialize: (i) => i.split(" ") });
se.isolate = new se({ deserialize: (i) => {
  if (i && i != "rtl" && i != "ltr" && i != "auto")
    throw new RangeError("Invalid value for isolate: " + i);
  return i || "auto";
} });
se.contextHash = new se({ perNode: !0 });
se.lookAhead = new se({ perNode: !0 });
se.mounted = new se({ perNode: !0 });
class No {
  constructor(e, t, n) {
    this.tree = e, this.overlay = t, this.parser = n;
  }
  /**
  @internal
  */
  static get(e) {
    return e && e.props && e.props[se.mounted.id];
  }
}
const ZM = /* @__PURE__ */ Object.create(null);
let ht = class zw {
  /**
  @internal
  */
  constructor(e, t, n, r = 0) {
    this.name = e, this.props = t, this.id = n, this.flags = r;
  }
  /**
  Define a node type.
  */
  static define(e) {
    let t = e.props && e.props.length ? /* @__PURE__ */ Object.create(null) : ZM, n = (e.top ? 1 : 0) | (e.skipped ? 2 : 0) | (e.error ? 4 : 0) | (e.name == null ? 8 : 0), r = new zw(e.name || "", t, e.id, n);
    if (e.props) {
      for (let s of e.props)
        if (Array.isArray(s) || (s = s(r)), s) {
          if (s[0].perNode)
            throw new RangeError("Can't store a per-node prop on a node type");
          t[s[0].id] = s[1];
        }
    }
    return r;
  }
  /**
  Retrieves a node prop for this type. Will return `undefined` if
  the prop isn't present on this node.
  */
  prop(e) {
    return this.props[e.id];
  }
  /**
  True when this is the top node of a grammar.
  */
  get isTop() {
    return (this.flags & 1) > 0;
  }
  /**
  True when this node is produced by a skip rule.
  */
  get isSkipped() {
    return (this.flags & 2) > 0;
  }
  /**
  Indicates whether this is an error node.
  */
  get isError() {
    return (this.flags & 4) > 0;
  }
  /**
  When true, this node type doesn't correspond to a user-declared
  named node, for example because it is used to cache repetition.
  */
  get isAnonymous() {
    return (this.flags & 8) > 0;
  }
  /**
  Returns true when this node's name or one of its
  [groups](#common.NodeProp^group) matches the given string.
  */
  is(e) {
    if (typeof e == "string") {
      if (this.name == e)
        return !0;
      let t = this.prop(se.group);
      return t ? t.indexOf(e) > -1 : !1;
    }
    return this.id == e;
  }
  /**
  Create a function from node types to arbitrary values by
  specifying an object whose property names are node or
  [group](#common.NodeProp^group) names. Often useful with
  [`NodeProp.add`](#common.NodeProp.add). You can put multiple
  names, separated by spaces, in a single property name to map
  multiple node names to a single value.
  */
  static match(e) {
    let t = /* @__PURE__ */ Object.create(null);
    for (let n in e)
      for (let r of n.split(" "))
        t[r] = e[n];
    return (n) => {
      for (let r = n.prop(se.group), s = -1; s < (r ? r.length : 0); s++) {
        let o = t[s < 0 ? n.name : r[s]];
        if (o)
          return o;
      }
    };
  }
};
ht.none = new ht(
  "",
  /* @__PURE__ */ Object.create(null),
  0,
  8
  /* NodeFlag.Anonymous */
);
class kl {
  /**
  Create a set with the given types. The `id` property of each
  type should correspond to its position within the array.
  */
  constructor(e) {
    this.types = e;
    for (let t = 0; t < e.length; t++)
      if (e[t].id != t)
        throw new RangeError("Node type ids should correspond to array positions when creating a node set");
  }
  /**
  Create a copy of this set with some node properties added. The
  arguments to this method can be created with
  [`NodeProp.add`](#common.NodeProp.add).
  */
  extend(...e) {
    let t = [];
    for (let n of this.types) {
      let r = null;
      for (let s of e) {
        let o = s(n);
        o && (r || (r = Object.assign({}, n.props)), r[o[0].id] = o[1]);
      }
      t.push(r ? new ht(n.name, r, n.id, n.flags) : n);
    }
    return new kl(t);
  }
}
const ea = /* @__PURE__ */ new WeakMap(), Q0 = /* @__PURE__ */ new WeakMap();
var ve;
(function(i) {
  i[i.ExcludeBuffers = 1] = "ExcludeBuffers", i[i.IncludeAnonymous = 2] = "IncludeAnonymous", i[i.IgnoreMounts = 4] = "IgnoreMounts", i[i.IgnoreOverlays = 8] = "IgnoreOverlays";
})(ve || (ve = {}));
let Qe = class Cd {
  /**
  Construct a new tree. See also [`Tree.build`](#common.Tree^build).
  */
  constructor(e, t, n, r, s) {
    if (this.type = e, this.children = t, this.positions = n, this.length = r, this.props = null, s && s.length) {
      this.props = /* @__PURE__ */ Object.create(null);
      for (let [o, l] of s)
        this.props[typeof o == "number" ? o : o.id] = l;
    }
  }
  /**
  @internal
  */
  toString() {
    let e = No.get(this);
    if (e && !e.overlay)
      return e.tree.toString();
    let t = "";
    for (let n of this.children) {
      let r = n.toString();
      r && (t && (t += ","), t += r);
    }
    return this.type.name ? (/\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) + (t.length ? "(" + t + ")" : "") : t;
  }
  /**
  Get a [tree cursor](#common.TreeCursor) positioned at the top of
  the tree. Mode can be used to [control](#common.IterMode) which
  nodes the cursor visits.
  */
  cursor(e = 0) {
    return new wh(this.topNode, e);
  }
  /**
  Get a [tree cursor](#common.TreeCursor) pointing into this tree
  at the given position and side (see
  [`moveTo`](#common.TreeCursor.moveTo).
  */
  cursorAt(e, t = 0, n = 0) {
    let r = ea.get(this) || this.topNode, s = new wh(r);
    return s.moveTo(e, t), ea.set(this, s._tree), s;
  }
  /**
  Get a [syntax node](#common.SyntaxNode) object for the top of the
  tree.
  */
  get topNode() {
    return new ii(this, 0, 0, null);
  }
  /**
  Get the [syntax node](#common.SyntaxNode) at the given position.
  If `side` is -1, this will move into nodes that end at the
  position. If 1, it'll move into nodes that start at the
  position. With 0, it'll only enter nodes that cover the position
  from both sides.
  
  Note that this will not enter
  [overlays](#common.MountedTree.overlay), and you often want
  [`resolveInner`](#common.Tree.resolveInner) instead.
  */
  resolve(e, t = 0) {
    let n = jo(ea.get(this) || this.topNode, e, t, !1);
    return ea.set(this, n), n;
  }
  /**
  Like [`resolve`](#common.Tree.resolve), but will enter
  [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node
  pointing into the innermost overlaid tree at the given position
  (with parent links going through all parent structure, including
  the host trees).
  */
  resolveInner(e, t = 0) {
    let n = jo(Q0.get(this) || this.topNode, e, t, !0);
    return Q0.set(this, n), n;
  }
  /**
  In some situations, it can be useful to iterate through all
  nodes around a position, including those in overlays that don't
  directly cover the position. This method gives you an iterator
  that will produce all nodes, from small to big, around the given
  position.
  */
  resolveStack(e, t = 0) {
    return zM(this, e, t);
  }
  /**
  Iterate over the tree and its children, calling `enter` for any
  node that touches the `from`/`to` region (if given) before
  running over such a node's children, and `leave` (if given) when
  leaving the node. When `enter` returns `false`, that node will
  not have its children iterated over (or `leave` called).
  */
  iterate(e) {
    let { enter: t, leave: n, from: r = 0, to: s = this.length } = e, o = e.mode || 0, l = (o & ve.IncludeAnonymous) > 0;
    for (let a = this.cursor(o | ve.IncludeAnonymous); ; ) {
      let h = !1;
      if (a.from <= s && a.to >= r && (!l && a.type.isAnonymous || t(a) !== !1)) {
        if (a.firstChild())
          continue;
        h = !0;
      }
      for (; h && n && (l || !a.type.isAnonymous) && n(a), !a.nextSibling(); ) {
        if (!a.parent())
          return;
        h = !0;
      }
    }
  }
  /**
  Get the value of the given [node prop](#common.NodeProp) for this
  node. Works with both per-node and per-type props.
  */
  prop(e) {
    return e.perNode ? this.props ? this.props[e.id] : void 0 : this.type.prop(e);
  }
  /**
  Returns the node's [per-node props](#common.NodeProp.perNode) in a
  format that can be passed to the [`Tree`](#common.Tree)
  constructor.
  */
  get propValues() {
    let e = [];
    if (this.props)
      for (let t in this.props)
        e.push([+t, this.props[t]]);
    return e;
  }
  /**
  Balance the direct children of this tree, producing a copy of
  which may have children grouped into subtrees with type
  [`NodeType.none`](#common.NodeType^none).
  */
  balance(e = {}) {
    return this.children.length <= 8 ? this : Ep(ht.none, this.children, this.positions, 0, this.children.length, 0, this.length, (t, n, r) => new Cd(this.type, t, n, r, this.propValues), e.makeTree || ((t, n, r) => new Cd(ht.none, t, n, r)));
  }
  /**
  Build a tree from a postfix-ordered buffer of node information,
  or a cursor over such a buffer.
  */
  static build(e) {
    return IM(e);
  }
};
Qe.empty = new Qe(ht.none, [], [], 0);
let DM = class Iw {
  constructor(e, t) {
    this.buffer = e, this.index = t;
  }
  get id() {
    return this.buffer[this.index - 4];
  }
  get start() {
    return this.buffer[this.index - 3];
  }
  get end() {
    return this.buffer[this.index - 2];
  }
  get size() {
    return this.buffer[this.index - 1];
  }
  get pos() {
    return this.index;
  }
  next() {
    this.index -= 4;
  }
  fork() {
    return new Iw(this.buffer, this.index);
  }
}, ps = class Nw {
  /**
  Create a tree buffer.
  */
  constructor(e, t, n) {
    this.buffer = e, this.length = t, this.set = n;
  }
  /**
  @internal
  */
  get type() {
    return ht.none;
  }
  /**
  @internal
  */
  toString() {
    let e = [];
    for (let t = 0; t < this.buffer.length; )
      e.push(this.childString(t)), t = this.buffer[t + 3];
    return e.join(",");
  }
  /**
  @internal
  */
  childString(e) {
    let t = this.buffer[e], n = this.buffer[e + 3], r = this.set.types[t], s = r.name;
    if (/\W/.test(s) && !r.isError && (s = JSON.stringify(s)), e += 4, n == e)
      return s;
    let o = [];
    for (; e < n; )
      o.push(this.childString(e)), e = this.buffer[e + 3];
    return s + "(" + o.join(",") + ")";
  }
  /**
  @internal
  */
  findChild(e, t, n, r, s) {
    let { buffer: o } = this, l = -1;
    for (let a = e; a != t && !(jw(s, r, o[a + 1], o[a + 2]) && (l = a, n > 0)); a = o[a + 3])
      ;
    return l;
  }
  /**
  @internal
  */
  slice(e, t, n) {
    let r = this.buffer, s = new Uint16Array(t - e), o = 0;
    for (let l = e, a = 0; l < t; ) {
      s[a++] = r[l++], s[a++] = r[l++] - n;
      let h = s[a++] = r[l++] - n;
      s[a++] = r[l++] - e, o = Math.max(o, h);
    }
    return new Nw(s, o, this.set);
  }
};
function jw(i, e, t, n) {
  switch (i) {
    case -2:
      return t < e;
    case -1:
      return n >= e && t < e;
    case 0:
      return t < e && n > e;
    case 1:
      return t <= e && n > e;
    case 2:
      return n > e;
    case 4:
      return !0;
  }
}
function jo(i, e, t, n) {
  for (var r; i.from == i.to || (t < 1 ? i.from >= e : i.from > e) || (t > -1 ? i.to <= e : i.to < e); ) {
    let o = !n && i instanceof ii && i.index < 0 ? null : i.parent;
    if (!o)
      return i;
    i = o;
  }
  let s = n ? 0 : ve.IgnoreOverlays;
  if (n)
    for (let o = i, l = o.parent; l; o = l, l = o.parent)
      o instanceof ii && o.index < 0 && ((r = l.enter(e, t, s)) === null || r === void 0 ? void 0 : r.from) != o.from && (i = l);
  for (; ; ) {
    let o = i.enter(e, t, s);
    if (!o)
      return i;
    i = o;
  }
}
class Uw {
  cursor(e = 0) {
    return new wh(this, e);
  }
  getChild(e, t = null, n = null) {
    let r = P0(this, e, t, n);
    return r.length ? r[0] : null;
  }
  getChildren(e, t = null, n = null) {
    return P0(this, e, t, n);
  }
  resolve(e, t = 0) {
    return jo(this, e, t, !1);
  }
  resolveInner(e, t = 0) {
    return jo(this, e, t, !0);
  }
  matchContext(e) {
    return Rd(this.parent, e);
  }
  enterUnfinishedNodesBefore(e) {
    let t = this.childBefore(e), n = this;
    for (; t; ) {
      let r = t.lastChild;
      if (!r || r.to != t.to)
        break;
      r.type.isError && r.from == r.to ? (n = t, t = r.prevSibling) : t = r;
    }
    return n;
  }
  get node() {
    return this;
  }
  get next() {
    return this.parent;
  }
}
let ii = class Na extends Uw {
  constructor(e, t, n, r) {
    super(), this._tree = e, this.from = t, this.index = n, this._parent = r;
  }
  get type() {
    return this._tree.type;
  }
  get name() {
    return this._tree.type.name;
  }
  get to() {
    return this.from + this._tree.length;
  }
  nextChild(e, t, n, r, s = 0) {
    for (let o = this; ; ) {
      for (let { children: l, positions: a } = o._tree, h = t > 0 ? l.length : -1; e != h; e += t) {
        let c = l[e], f = a[e] + o.from;
        if (jw(r, n, f, f + c.length)) {
          if (c instanceof ps) {
            if (s & ve.ExcludeBuffers)
              continue;
            let u = c.findChild(0, c.buffer.length, t, n - f, r);
            if (u > -1)
              return new Uo(new VM(o, c, e, f), null, u);
          } else if (s & ve.IncludeAnonymous || !c.type.isAnonymous || Ap(c)) {
            let u;
            if (!(s & ve.IgnoreMounts) && (u = No.get(c)) && !u.overlay)
              return new Na(u.tree, f, e, o);
            let d = new Na(c, f, e, o);
            return s & ve.IncludeAnonymous || !d.type.isAnonymous ? d : d.nextChild(t < 0 ? c.children.length - 1 : 0, t, n, r);
          }
        }
      }
      if (s & ve.IncludeAnonymous || !o.type.isAnonymous || (o.index >= 0 ? e = o.index + t : e = t < 0 ? -1 : o._parent._tree.children.length, o = o._parent, !o))
        return null;
    }
  }
  get firstChild() {
    return this.nextChild(
      0,
      1,
      0,
      4
      /* Side.DontCare */
    );
  }
  get lastChild() {
    return this.nextChild(
      this._tree.children.length - 1,
      -1,
      0,
      4
      /* Side.DontCare */
    );
  }
  childAfter(e) {
    return this.nextChild(
      0,
      1,
      e,
      2
      /* Side.After */
    );
  }
  childBefore(e) {
    return this.nextChild(
      this._tree.children.length - 1,
      -1,
      e,
      -2
      /* Side.Before */
    );
  }
  enter(e, t, n = 0) {
    let r;
    if (!(n & ve.IgnoreOverlays) && (r = No.get(this._tree)) && r.overlay) {
      let s = e - this.from;
      for (let { from: o, to: l } of r.overlay)
        if ((t > 0 ? o <= s : o < s) && (t < 0 ? l >= s : l > s))
          return new Na(r.tree, r.overlay[0].from + this.from, -1, this);
    }
    return this.nextChild(0, 1, e, t, n);
  }
  nextSignificantParent() {
    let e = this;
    for (; e.type.isAnonymous && e._parent; )
      e = e._parent;
    return e;
  }
  get parent() {
    return this._parent ? this._parent.nextSignificantParent() : null;
  }
  get nextSibling() {
    return this._parent && this.index >= 0 ? this._parent.nextChild(
      this.index + 1,
      1,
      0,
      4
      /* Side.DontCare */
    ) : null;
  }
  get prevSibling() {
    return this._parent && this.index >= 0 ? this._parent.nextChild(
      this.index - 1,
      -1,
      0,
      4
      /* Side.DontCare */
    ) : null;
  }
  get tree() {
    return this._tree;
  }
  toTree() {
    return this._tree;
  }
  /**
  @internal
  */
  toString() {
    return this._tree.toString();
  }
};
function P0(i, e, t, n) {
  let r = i.cursor(), s = [];
  if (!r.firstChild())
    return s;
  if (t != null) {
    for (let o = !1; !o; )
      if (o = r.type.is(t), !r.nextSibling())
        return s;
  }
  for (; ; ) {
    if (n != null && r.type.is(n))
      return s;
    if (r.type.is(e) && s.push(r.node), !r.nextSibling())
      return n == null ? s : [];
  }
}
function Rd(i, e, t = e.length - 1) {
  for (let n = i; t >= 0; n = n.parent) {
    if (!n)
      return !1;
    if (!n.type.isAnonymous) {
      if (e[t] && e[t] != n.name)
        return !1;
      t--;
    }
  }
  return !0;
}
let VM = class {
  constructor(e, t, n, r) {
    this.parent = e, this.buffer = t, this.index = n, this.start = r;
  }
}, Uo = class Oo extends Uw {
  get name() {
    return this.type.name;
  }
  get from() {
    return this.context.start + this.context.buffer.buffer[this.index + 1];
  }
  get to() {
    return this.context.start + this.context.buffer.buffer[this.index + 2];
  }
  constructor(e, t, n) {
    super(), this.context = e, this._parent = t, this.index = n, this.type = e.buffer.set.types[e.buffer.buffer[n]];
  }
  child(e, t, n) {
    let { buffer: r } = this.context, s = r.findChild(this.index + 4, r.buffer[this.index + 3], e, t - this.context.start, n);
    return s < 0 ? null : new Oo(this.context, this, s);
  }
  get firstChild() {
    return this.child(
      1,
      0,
      4
      /* Side.DontCare */
    );
  }
  get lastChild() {
    return this.child(
      -1,
      0,
      4
      /* Side.DontCare */
    );
  }
  childAfter(e) {
    return this.child(
      1,
      e,
      2
      /* Side.After */
    );
  }
  childBefore(e) {
    return this.child(
      -1,
      e,
      -2
      /* Side.Before */
    );
  }
  enter(e, t, n = 0) {
    if (n & ve.ExcludeBuffers)
      return null;
    let { buffer: r } = this.context, s = r.findChild(this.index + 4, r.buffer[this.index + 3], t > 0 ? 1 : -1, e - this.context.start, t);
    return s < 0 ? null : new Oo(this.context, this, s);
  }
  get parent() {
    return this._parent || this.context.parent.nextSignificantParent();
  }
  externalSibling(e) {
    return this._parent ? null : this.context.parent.nextChild(
      this.context.index + e,
      e,
      0,
      4
      /* Side.DontCare */
    );
  }
  get nextSibling() {
    let { buffer: e } = this.context, t = e.buffer[this.index + 3];
    return t < (this._parent ? e.buffer[this._parent.index + 3] : e.buffer.length) ? new Oo(this.context, this._parent, t) : this.externalSibling(1);
  }
  get prevSibling() {
    let { buffer: e } = this.context, t = this._parent ? this._parent.index + 4 : 0;
    return this.index == t ? this.externalSibling(-1) : new Oo(this.context, this._parent, e.findChild(
      t,
      this.index,
      -1,
      0,
      4
      /* Side.DontCare */
    ));
  }
  get tree() {
    return null;
  }
  toTree() {
    let e = [], t = [], { buffer: n } = this.context, r = this.index + 4, s = n.buffer[this.index + 3];
    if (s > r) {
      let o = n.buffer[this.index + 1];
      e.push(n.slice(r, s, o)), t.push(0);
    }
    return new Qe(this.type, e, t, this.to - this.from);
  }
  /**
  @internal
  */
  toString() {
    return this.context.buffer.childString(this.index);
  }
};
function Yw(i) {
  if (!i.length)
    return null;
  let e = 0, t = i[0];
  for (let s = 1; s < i.length; s++) {
    let o = i[s];
    (o.from > t.from || o.to < t.to) && (t = o, e = s);
  }
  let n = t instanceof ii && t.index < 0 ? null : t.parent, r = i.slice();
  return n ? r[e] = n : r.splice(e, 1), new WM(r, t);
}
class WM {
  constructor(e, t) {
    this.heads = e, this.node = t;
  }
  get next() {
    return Yw(this.heads);
  }
}
function zM(i, e, t) {
  let n = i.resolveInner(e, t), r = null;
  for (let s = n instanceof ii ? n : n.context.parent; s; s = s.parent)
    if (s.index < 0) {
      let o = s.parent;
      (r || (r = [n])).push(o.resolve(e, t)), s = o;
    } else {
      let o = No.get(s.tree);
      if (o && o.overlay && o.overlay[0].from <= e && o.overlay[o.overlay.length - 1].to >= e) {
        let l = new ii(o.tree, o.overlay[0].from + s.from, -1, s);
        (r || (r = [n])).push(jo(l, e, t, !1));
      }
    }
  return r ? Yw(r) : n;
}
let wh = class {
  /**
  Shorthand for `.type.name`.
  */
  get name() {
    return this.type.name;
  }
  /**
  @internal
  */
  constructor(e, t = 0) {
    if (this.mode = t, this.buffer = null, this.stack = [], this.index = 0, this.bufferNode = null, e instanceof ii)
      this.yieldNode(e);
    else {
      this._tree = e.context.parent, this.buffer = e.context;
      for (let n = e._parent; n; n = n._parent)
        this.stack.unshift(n.index);
      this.bufferNode = e, this.yieldBuf(e.index);
    }
  }
  yieldNode(e) {
    return e ? (this._tree = e, this.type = e.type, this.from = e.from, this.to = e.to, !0) : !1;
  }
  yieldBuf(e, t) {
    this.index = e;
    let { start: n, buffer: r } = this.buffer;
    return this.type = t || r.set.types[r.buffer[e]], this.from = n + r.buffer[e + 1], this.to = n + r.buffer[e + 2], !0;
  }
  /**
  @internal
  */
  yield(e) {
    return e ? e instanceof ii ? (this.buffer = null, this.yieldNode(e)) : (this.buffer = e.context, this.yieldBuf(e.index, e.type)) : !1;
  }
  /**
  @internal
  */
  toString() {
    return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();
  }
  /**
  @internal
  */
  enterChild(e, t, n) {
    if (!this.buffer)
      return this.yield(this._tree.nextChild(e < 0 ? this._tree._tree.children.length - 1 : 0, e, t, n, this.mode));
    let { buffer: r } = this.buffer, s = r.findChild(this.index + 4, r.buffer[this.index + 3], e, t - this.buffer.start, n);
    return s < 0 ? !1 : (this.stack.push(this.index), this.yieldBuf(s));
  }
  /**
  Move the cursor to this node's first child. When this returns
  false, the node has no child, and the cursor has not been moved.
  */
  firstChild() {
    return this.enterChild(
      1,
      0,
      4
      /* Side.DontCare */
    );
  }
  /**
  Move the cursor to this node's last child.
  */
  lastChild() {
    return this.enterChild(
      -1,
      0,
      4
      /* Side.DontCare */
    );
  }
  /**
  Move the cursor to the first child that ends after `pos`.
  */
  childAfter(e) {
    return this.enterChild(
      1,
      e,
      2
      /* Side.After */
    );
  }
  /**
  Move to the last child that starts before `pos`.
  */
  childBefore(e) {
    return this.enterChild(
      -1,
      e,
      -2
      /* Side.Before */
    );
  }
  /**
  Move the cursor to the child around `pos`. If side is -1 the
  child may end at that position, when 1 it may start there. This
  will also enter [overlaid](#common.MountedTree.overlay)
  [mounted](#common.NodeProp^mounted) trees unless `overlays` is
  set to false.
  */
  enter(e, t, n = this.mode) {
    return this.buffer ? n & ve.ExcludeBuffers ? !1 : this.enterChild(1, e, t) : this.yield(this._tree.enter(e, t, n));
  }
  /**
  Move to the node's parent node, if this isn't the top node.
  */
  parent() {
    if (!this.buffer)
      return this.yieldNode(this.mode & ve.IncludeAnonymous ? this._tree._parent : this._tree.parent);
    if (this.stack.length)
      return this.yieldBuf(this.stack.pop());
    let e = this.mode & ve.IncludeAnonymous ? this.buffer.parent : this.buffer.parent.nextSignificantParent();
    return this.buffer = null, this.yieldNode(e);
  }
  /**
  @internal
  */
  sibling(e) {
    if (!this.buffer)
      return this._tree._parent ? this.yield(this._tree.index < 0 ? null : this._tree._parent.nextChild(this._tree.index + e, e, 0, 4, this.mode)) : !1;
    let { buffer: t } = this.buffer, n = this.stack.length - 1;
    if (e < 0) {
      let r = n < 0 ? 0 : this.stack[n] + 4;
      if (this.index != r)
        return this.yieldBuf(t.findChild(
          r,
          this.index,
          -1,
          0,
          4
          /* Side.DontCare */
        ));
    } else {
      let r = t.buffer[this.index + 3];
      if (r < (n < 0 ? t.buffer.length : t.buffer[this.stack[n] + 3]))
        return this.yieldBuf(r);
    }
    return n < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + e, e, 0, 4, this.mode)) : !1;
  }
  /**
  Move to this node's next sibling, if any.
  */
  nextSibling() {
    return this.sibling(1);
  }
  /**
  Move to this node's previous sibling, if any.
  */
  prevSibling() {
    return this.sibling(-1);
  }
  atLastNode(e) {
    let t, n, { buffer: r } = this;
    if (r) {
      if (e > 0) {
        if (this.index < r.buffer.buffer.length)
          return !1;
      } else
        for (let s = 0; s < this.index; s++)
          if (r.buffer.buffer[s + 3] < this.index)
            return !1;
      ({ index: t, parent: n } = r);
    } else
      ({ index: t, _parent: n } = this._tree);
    for (; n; { index: t, _parent: n } = n)
      if (t > -1)
        for (let s = t + e, o = e < 0 ? -1 : n._tree.children.length; s != o; s += e) {
          let l = n._tree.children[s];
          if (this.mode & ve.IncludeAnonymous || l instanceof ps || !l.type.isAnonymous || Ap(l))
            return !1;
        }
    return !0;
  }
  move(e, t) {
    if (t && this.enterChild(
      e,
      0,
      4
      /* Side.DontCare */
    ))
      return !0;
    for (; ; ) {
      if (this.sibling(e))
        return !0;
      if (this.atLastNode(e) || !this.parent())
        return !1;
    }
  }
  /**
  Move to the next node in a
  [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR)
  traversal, going from a node to its first child or, if the
  current node is empty or `enter` is false, its next sibling or
  the next sibling of the first parent node that has one.
  */
  next(e = !0) {
    return this.move(1, e);
  }
  /**
  Move to the next node in a last-to-first pre-order traversal. A
  node is followed by its last child or, if it has none, its
  previous sibling or the previous sibling of the first parent
  node that has one.
  */
  prev(e = !0) {
    return this.move(-1, e);
  }
  /**
  Move the cursor to the innermost node that covers `pos`. If
  `side` is -1, it will enter nodes that end at `pos`. If it is 1,
  it will enter nodes that start at `pos`.
  */
  moveTo(e, t = 0) {
    for (; (this.from == this.to || (t < 1 ? this.from >= e : this.from > e) || (t > -1 ? this.to <= e : this.to < e)) && this.parent(); )
      ;
    for (; this.enterChild(1, e, t); )
      ;
    return this;
  }
  /**
  Get a [syntax node](#common.SyntaxNode) at the cursor's current
  position.
  */
  get node() {
    if (!this.buffer)
      return this._tree;
    let e = this.bufferNode, t = null, n = 0;
    if (e && e.context == this.buffer)
      e: for (let r = this.index, s = this.stack.length; s >= 0; ) {
        for (let o = e; o; o = o._parent)
          if (o.index == r) {
            if (r == this.index)
              return o;
            t = o, n = s + 1;
            break e;
          }
        r = this.stack[--s];
      }
    for (let r = n; r < this.stack.length; r++)
      t = new Uo(this.buffer, t, this.stack[r]);
    return this.bufferNode = new Uo(this.buffer, t, this.index);
  }
  /**
  Get the [tree](#common.Tree) that represents the current node, if
  any. Will return null when the node is in a [tree
  buffer](#common.TreeBuffer).
  */
  get tree() {
    return this.buffer ? null : this._tree._tree;
  }
  /**
  Iterate over the current node and all its descendants, calling
  `enter` when entering a node and `leave`, if given, when leaving
  one. When `enter` returns `false`, any children of that node are
  skipped, and `leave` isn't called for it.
  */
  iterate(e, t) {
    for (let n = 0; ; ) {
      let r = !1;
      if (this.type.isAnonymous || e(this) !== !1) {
        if (this.firstChild()) {
          n++;
          continue;
        }
        this.type.isAnonymous || (r = !0);
      }
      for (; ; ) {
        if (r && t && t(this), r = this.type.isAnonymous, !n)
          return;
        if (this.nextSibling())
          break;
        this.parent(), n--, r = !0;
      }
    }
  }
  /**
  Test whether the current node matches a given context—a sequence
  of direct parent node names. Empty strings in the context array
  are treated as wildcards.
  */
  matchContext(e) {
    if (!this.buffer)
      return Rd(this.node.parent, e);
    let { buffer: t } = this.buffer, { types: n } = t.set;
    for (let r = e.length - 1, s = this.stack.length - 1; r >= 0; s--) {
      if (s < 0)
        return Rd(this._tree, e, r);
      let o = n[t.buffer[this.stack[s]]];
      if (!o.isAnonymous) {
        if (e[r] && e[r] != o.name)
          return !1;
        r--;
      }
    }
    return !0;
  }
};
function Ap(i) {
  return i.children.some((e) => e instanceof ps || !e.type.isAnonymous || Ap(e));
}
function IM(i) {
  var e;
  let { buffer: t, nodeSet: n, maxBufferLength: r = Ww, reused: s = [], minRepeatType: o = n.types.length } = i, l = Array.isArray(t) ? new DM(t, t.length) : t, a = n.types, h = 0, c = 0;
  function f(w, b, Q, R, A, _) {
    let { id: $, start: v, end: X, size: E } = l, L = c, G = h;
    for (; E < 0; )
      if (l.next(), E == -1) {
        let te = s[$];
        Q.push(te), R.push(v - w);
        return;
      } else if (E == -3) {
        h = $;
        return;
      } else if (E == -4) {
        c = $;
        return;
      } else
        throw new RangeError(`Unrecognized record size: ${E}`);
    let pe = a[$], U, j, re = v - w;
    if (X - v <= r && (j = m(l.pos - b, A))) {
      let te = new Uint16Array(j.size - j.skip), T = l.pos - j.size, N = te.length;
      for (; l.pos > T; )
        N = g(j.start, te, N);
      U = new ps(te, X - j.start, n), re = j.start - w;
    } else {
      let te = l.pos - E;
      l.next();
      let T = [], N = [], M = $ >= o ? $ : -1, he = 0, Se = X;
      for (; l.pos > te; )
        M >= 0 && l.id == M && l.size >= 0 ? (l.end <= Se - r && (O(T, N, v, he, l.end, Se, M, L, G), he = T.length, Se = l.end), l.next()) : _ > 2500 ? u(v, te, T, N) : f(v, te, T, N, M, _ + 1);
      if (M >= 0 && he > 0 && he < T.length && O(T, N, v, he, v, Se, M, L, G), T.reverse(), N.reverse(), M > -1 && he > 0) {
        let ct = d(pe, G);
        U = Ep(pe, T, N, 0, T.length, 0, X - v, ct, ct);
      } else
        U = p(pe, T, N, X - v, L - X, G);
    }
    Q.push(U), R.push(re);
  }
  function u(w, b, Q, R) {
    let A = [], _ = 0, $ = -1;
    for (; l.pos > b; ) {
      let { id: v, start: X, end: E, size: L } = l;
      if (L > 4)
        l.next();
      else {
        if ($ > -1 && X < $)
          break;
        $ < 0 && ($ = E - r), A.push(v, X, E), _++, l.next();
      }
    }
    if (_) {
      let v = new Uint16Array(_ * 4), X = A[A.length - 2];
      for (let E = A.length - 3, L = 0; E >= 0; E -= 3)
        v[L++] = A[E], v[L++] = A[E + 1] - X, v[L++] = A[E + 2] - X, v[L++] = L;
      Q.push(new ps(v, A[2] - X, n)), R.push(X - w);
    }
  }
  function d(w, b) {
    return (Q, R, A) => {
      let _ = 0, $ = Q.length - 1, v, X;
      if ($ >= 0 && (v = Q[$]) instanceof Qe) {
        if (!$ && v.type == w && v.length == A)
          return v;
        (X = v.prop(se.lookAhead)) && (_ = R[$] + v.length + X);
      }
      return p(w, Q, R, A, _, b);
    };
  }
  function O(w, b, Q, R, A, _, $, v, X) {
    let E = [], L = [];
    for (; w.length > R; )
      E.push(w.pop()), L.push(b.pop() + Q - A);
    w.push(p(n.types[$], E, L, _ - A, v - _, X)), b.push(A - Q);
  }
  function p(w, b, Q, R, A, _, $) {
    if (_) {
      let v = [se.contextHash, _];
      $ = $ ? [v].concat($) : [v];
    }
    if (A > 25) {
      let v = [se.lookAhead, A];
      $ = $ ? [v].concat($) : [v];
    }
    return new Qe(w, b, Q, R, $);
  }
  function m(w, b) {
    let Q = l.fork(), R = 0, A = 0, _ = 0, $ = Q.end - r, v = { size: 0, start: 0, skip: 0 };
    e: for (let X = Q.pos - w; Q.pos > X; ) {
      let E = Q.size;
      if (Q.id == b && E >= 0) {
        v.size = R, v.start = A, v.skip = _, _ += 4, R += 4, Q.next();
        continue;
      }
      let L = Q.pos - E;
      if (E < 0 || L < X || Q.start < $)
        break;
      let G = Q.id >= o ? 4 : 0, pe = Q.start;
      for (Q.next(); Q.pos > L; ) {
        if (Q.size < 0)
          if (Q.size == -3)
            G += 4;
          else
            break e;
        else Q.id >= o && (G += 4);
        Q.next();
      }
      A = pe, R += E, _ += G;
    }
    return (b < 0 || R == w) && (v.size = R, v.start = A, v.skip = _), v.size > 4 ? v : void 0;
  }
  function g(w, b, Q) {
    let { id: R, start: A, end: _, size: $ } = l;
    if (l.next(), $ >= 0 && R < o) {
      let v = Q;
      if ($ > 4) {
        let X = l.pos - ($ - 4);
        for (; l.pos > X; )
          Q = g(w, b, Q);
      }
      b[--Q] = v, b[--Q] = _ - w, b[--Q] = A - w, b[--Q] = R;
    } else $ == -3 ? h = R : $ == -4 && (c = R);
    return Q;
  }
  let S = [], x = [];
  for (; l.pos > 0; )
    f(i.start || 0, i.bufferStart || 0, S, x, -1, 0);
  let k = (e = i.length) !== null && e !== void 0 ? e : S.length ? x[0] + S[0].length : 0;
  return new Qe(a[i.topID], S.reverse(), x.reverse(), k);
}
const $0 = /* @__PURE__ */ new WeakMap();
function ja(i, e) {
  if (!i.isAnonymous || e instanceof ps || e.type != i)
    return 1;
  let t = $0.get(e);
  if (t == null) {
    t = 1;
    for (let n of e.children) {
      if (n.type != i || !(n instanceof Qe)) {
        t = 1;
        break;
      }
      t += ja(i, n);
    }
    $0.set(e, t);
  }
  return t;
}
function Ep(i, e, t, n, r, s, o, l, a) {
  let h = 0;
  for (let O = n; O < r; O++)
    h += ja(i, e[O]);
  let c = Math.ceil(
    h * 1.5 / 8
    /* Balance.BranchFactor */
  ), f = [], u = [];
  function d(O, p, m, g, S) {
    for (let x = m; x < g; ) {
      let k = x, w = p[x], b = ja(i, O[x]);
      for (x++; x < g; x++) {
        let Q = ja(i, O[x]);
        if (b + Q >= c)
          break;
        b += Q;
      }
      if (x == k + 1) {
        if (b > c) {
          let Q = O[k];
          d(Q.children, Q.positions, 0, Q.children.length, p[k] + S);
          continue;
        }
        f.push(O[k]);
      } else {
        let Q = p[x - 1] + O[x - 1].length - w;
        f.push(Ep(i, O, p, k, x, w, Q, null, a));
      }
      u.push(w + S - s);
    }
  }
  return d(e, t, n, r, 0), (l || a)(f, u, o);
}
class Mp {
  constructor() {
    this.map = /* @__PURE__ */ new WeakMap();
  }
  setBuffer(e, t, n) {
    let r = this.map.get(e);
    r || this.map.set(e, r = /* @__PURE__ */ new Map()), r.set(t, n);
  }
  getBuffer(e, t) {
    let n = this.map.get(e);
    return n && n.get(t);
  }
  /**
  Set the value for this syntax node.
  */
  set(e, t) {
    e instanceof Uo ? this.setBuffer(e.context.buffer, e.index, t) : e instanceof ii && this.map.set(e.tree, t);
  }
  /**
  Retrieve value for this syntax node, if it exists in the map.
  */
  get(e) {
    return e instanceof Uo ? this.getBuffer(e.context.buffer, e.index) : e instanceof ii ? this.map.get(e.tree) : void 0;
  }
  /**
  Set the value for the node that a cursor currently points to.
  */
  cursorSet(e, t) {
    e.buffer ? this.setBuffer(e.buffer.buffer, e.index, t) : this.map.set(e.tree, t);
  }
  /**
  Retrieve the value for the node that a cursor currently points
  to.
  */
  cursorGet(e) {
    return e.buffer ? this.getBuffer(e.buffer.buffer, e.index) : this.map.get(e.tree);
  }
}
let is = class Ad {
  /**
  Construct a tree fragment. You'll usually want to use
  [`addTree`](#common.TreeFragment^addTree) and
  [`applyChanges`](#common.TreeFragment^applyChanges) instead of
  calling this directly.
  */
  constructor(e, t, n, r, s = !1, o = !1) {
    this.from = e, this.to = t, this.tree = n, this.offset = r, this.open = (s ? 1 : 0) | (o ? 2 : 0);
  }
  /**
  Whether the start of the fragment represents the start of a
  parse, or the end of a change. (In the second case, it may not
  be safe to reuse some nodes at the start, depending on the
  parsing algorithm.)
  */
  get openStart() {
    return (this.open & 1) > 0;
  }
  /**
  Whether the end of the fragment represents the end of a
  full-document parse, or the start of a change.
  */
  get openEnd() {
    return (this.open & 2) > 0;
  }
  /**
  Create a set of fragments from a freshly parsed tree, or update
  an existing set of fragments by replacing the ones that overlap
  with a tree with content from the new tree. When `partial` is
  true, the parse is treated as incomplete, and the resulting
  fragment has [`openEnd`](#common.TreeFragment.openEnd) set to
  true.
  */
  static addTree(e, t = [], n = !1) {
    let r = [new Ad(0, e.length, e, 0, !1, n)];
    for (let s of t)
      s.to > e.length && r.push(s);
    return r;
  }
  /**
  Apply a set of edits to an array of fragments, removing or
  splitting fragments as necessary to remove edited ranges, and
  adjusting offsets for fragments that moved.
  */
  static applyChanges(e, t, n = 128) {
    if (!t.length)
      return e;
    let r = [], s = 1, o = e.length ? e[0] : null;
    for (let l = 0, a = 0, h = 0; ; l++) {
      let c = l < t.length ? t[l] : null, f = c ? c.fromA : 1e9;
      if (f - a >= n)
        for (; o && o.from < f; ) {
          let u = o;
          if (a >= u.from || f <= u.to || h) {
            let d = Math.max(u.from, a) - h, O = Math.min(u.to, f) - h;
            u = d >= O ? null : new Ad(d, O, u.tree, u.offset + h, l > 0, !!c);
          }
          if (u && r.push(u), o.to > f)
            break;
          o = s < e.length ? e[s++] : null;
        }
      if (!c)
        break;
      a = c.toA, h = c.toA - c.toB;
    }
    return r;
  }
}, qp = class {
  /**
  Start a parse, returning a [partial parse](#common.PartialParse)
  object. [`fragments`](#common.TreeFragment) can be passed in to
  make the parse incremental.
  
  By default, the entire input is parsed. You can pass `ranges`,
  which should be a sorted array of non-empty, non-overlapping
  ranges, to parse only those ranges. The tree returned in that
  case will start at `ranges[0].from`.
  */
  startParse(e, t, n) {
    return typeof e == "string" && (e = new NM(e)), n = n ? n.length ? n.map((r) => new Ft(r.from, r.to)) : [new Ft(0, 0)] : [new Ft(0, e.length)], this.createParse(e, t || [], n);
  }
  /**
  Run a full parse, returning the resulting tree.
  */
  parse(e, t, n) {
    let r = this.startParse(e, t, n);
    for (; ; ) {
      let s = r.advance();
      if (s)
        return s;
    }
  }
}, NM = class {
  constructor(e) {
    this.string = e;
  }
  get length() {
    return this.string.length;
  }
  chunk(e) {
    return this.string.slice(e);
  }
  get lineChunks() {
    return !1;
  }
  read(e, t) {
    return this.string.slice(e, t);
  }
};
function Gw(i) {
  return (e, t, n, r) => new UM(e, i, t, n, r);
}
class T0 {
  constructor(e, t, n, r, s) {
    this.parser = e, this.parse = t, this.overlay = n, this.target = r, this.from = s;
  }
}
function C0(i) {
  if (!i.length || i.some((e) => e.from >= e.to))
    throw new RangeError("Invalid inner parse ranges given: " + JSON.stringify(i));
}
class jM {
  constructor(e, t, n, r, s, o, l) {
    this.parser = e, this.predicate = t, this.mounts = n, this.index = r, this.start = s, this.target = o, this.prev = l, this.depth = 0, this.ranges = [];
  }
}
const Ed = new se({ perNode: !0 });
class UM {
  constructor(e, t, n, r, s) {
    this.nest = t, this.input = n, this.fragments = r, this.ranges = s, this.inner = [], this.innerDone = 0, this.baseTree = null, this.stoppedAt = null, this.baseParse = e;
  }
  advance() {
    if (this.baseParse) {
      let n = this.baseParse.advance();
      if (!n)
        return null;
      if (this.baseParse = null, this.baseTree = n, this.startInner(), this.stoppedAt != null)
        for (let r of this.inner)
          r.parse.stopAt(this.stoppedAt);
    }
    if (this.innerDone == this.inner.length) {
      let n = this.baseTree;
      return this.stoppedAt != null && (n = new Qe(n.type, n.children, n.positions, n.length, n.propValues.concat([[Ed, this.stoppedAt]]))), n;
    }
    let e = this.inner[this.innerDone], t = e.parse.advance();
    if (t) {
      this.innerDone++;
      let n = Object.assign(/* @__PURE__ */ Object.create(null), e.target.props);
      n[se.mounted.id] = new No(t, e.overlay, e.parser), e.target.props = n;
    }
    return null;
  }
  get parsedPos() {
    if (this.baseParse)
      return 0;
    let e = this.input.length;
    for (let t = this.innerDone; t < this.inner.length; t++)
      this.inner[t].from < e && (e = Math.min(e, this.inner[t].parse.parsedPos));
    return e;
  }
  stopAt(e) {
    if (this.stoppedAt = e, this.baseParse)
      this.baseParse.stopAt(e);
    else
      for (let t = this.innerDone; t < this.inner.length; t++)
        this.inner[t].parse.stopAt(e);
  }
  startInner() {
    let e = new FM(this.fragments), t = null, n = null, r = new wh(new ii(this.baseTree, this.ranges[0].from, 0, null), ve.IncludeAnonymous | ve.IgnoreMounts);
    e: for (let s, o; ; ) {
      let l = !0, a;
      if (this.stoppedAt != null && r.from >= this.stoppedAt)
        l = !1;
      else if (e.hasNode(r)) {
        if (t) {
          let h = t.mounts.find((c) => c.frag.from <= r.from && c.frag.to >= r.to && c.mount.overlay);
          if (h)
            for (let c of h.mount.overlay) {
              let f = c.from + h.pos, u = c.to + h.pos;
              f >= r.from && u <= r.to && !t.ranges.some((d) => d.from < u && d.to > f) && t.ranges.push({ from: f, to: u });
            }
        }
        l = !1;
      } else if (n && (o = YM(n.ranges, r.from, r.to)))
        l = o != 2;
      else if (!r.type.isAnonymous && (s = this.nest(r, this.input)) && (r.from < r.to || !s.overlay)) {
        r.tree || GM(r);
        let h = e.findMounts(r.from, s.parser);
        if (typeof s.overlay == "function")
          t = new jM(s.parser, s.overlay, h, this.inner.length, r.from, r.tree, t);
        else {
          let c = E0(this.ranges, s.overlay || (r.from < r.to ? [new Ft(r.from, r.to)] : []));
          c.length && C0(c), (c.length || !s.overlay) && this.inner.push(new T0(s.parser, c.length ? s.parser.startParse(this.input, M0(h, c), c) : s.parser.startParse(""), s.overlay ? s.overlay.map((f) => new Ft(f.from - r.from, f.to - r.from)) : null, r.tree, c.length ? c[0].from : r.from)), s.overlay ? c.length && (n = { ranges: c, depth: 0, prev: n }) : l = !1;
        }
      } else if (t && (a = t.predicate(r)) && (a === !0 && (a = new Ft(r.from, r.to)), a.from < a.to)) {
        let h = t.ranges.length - 1;
        h >= 0 && t.ranges[h].to == a.from ? t.ranges[h] = { from: t.ranges[h].from, to: a.to } : t.ranges.push(a);
      }
      if (l && r.firstChild())
        t && t.depth++, n && n.depth++;
      else
        for (; !r.nextSibling(); ) {
          if (!r.parent())
            break e;
          if (t && !--t.depth) {
            let h = E0(this.ranges, t.ranges);
            h.length && (C0(h), this.inner.splice(t.index, 0, new T0(t.parser, t.parser.startParse(this.input, M0(t.mounts, h), h), t.ranges.map((c) => new Ft(c.from - t.start, c.to - t.start)), t.target, h[0].from))), t = t.prev;
          }
          n && !--n.depth && (n = n.prev);
        }
    }
  }
}
function YM(i, e, t) {
  for (let n of i) {
    if (n.from >= t)
      break;
    if (n.to > e)
      return n.from <= e && n.to >= t ? 2 : 1;
  }
  return 0;
}
function R0(i, e, t, n, r, s) {
  if (e < t) {
    let o = i.buffer[e + 1];
    n.push(i.slice(e, t, o)), r.push(o - s);
  }
}
function GM(i) {
  let { node: e } = i, t = [], n = e.context.buffer;
  do
    t.push(i.index), i.parent();
  while (!i.tree);
  let r = i.tree, s = r.children.indexOf(n), o = r.children[s], l = o.buffer, a = [s];
  function h(c, f, u, d, O, p) {
    let m = t[p], g = [], S = [];
    R0(o, c, m, g, S, d);
    let x = l[m + 1], k = l[m + 2];
    a.push(g.length);
    let w = p ? h(m + 4, l[m + 3], o.set.types[l[m]], x, k - x, p - 1) : e.toTree();
    return g.push(w), S.push(x - d), R0(o, l[m + 3], f, g, S, d), new Qe(u, g, S, O);
  }
  r.children[s] = h(0, l.length, ht.none, 0, o.length, t.length - 1);
  for (let c of a) {
    let f = i.tree.children[c], u = i.tree.positions[c];
    i.yield(new ii(f, u + i.from, c, i._tree));
  }
}
class A0 {
  constructor(e, t) {
    this.offset = t, this.done = !1, this.cursor = e.cursor(ve.IncludeAnonymous | ve.IgnoreMounts);
  }
  // Move to the first node (in pre-order) that starts at or after `pos`.
  moveTo(e) {
    let { cursor: t } = this, n = e - this.offset;
    for (; !this.done && t.from < n; )
      t.to >= e && t.enter(n, 1, ve.IgnoreOverlays | ve.ExcludeBuffers) || t.next(!1) || (this.done = !0);
  }
  hasNode(e) {
    if (this.moveTo(e.from), !this.done && this.cursor.from + this.offset == e.from && this.cursor.tree)
      for (let t = this.cursor.tree; ; ) {
        if (t == e.tree)
          return !0;
        if (t.children.length && t.positions[0] == 0 && t.children[0] instanceof Qe)
          t = t.children[0];
        else
          break;
      }
    return !1;
  }
}
let FM = class {
  constructor(e) {
    var t;
    if (this.fragments = e, this.curTo = 0, this.fragI = 0, e.length) {
      let n = this.curFrag = e[0];
      this.curTo = (t = n.tree.prop(Ed)) !== null && t !== void 0 ? t : n.to, this.inner = new A0(n.tree, -n.offset);
    } else
      this.curFrag = this.inner = null;
  }
  hasNode(e) {
    for (; this.curFrag && e.from >= this.curTo; )
      this.nextFrag();
    return this.curFrag && this.curFrag.from <= e.from && this.curTo >= e.to && this.inner.hasNode(e);
  }
  nextFrag() {
    var e;
    if (this.fragI++, this.fragI == this.fragments.length)
      this.curFrag = this.inner = null;
    else {
      let t = this.curFrag = this.fragments[this.fragI];
      this.curTo = (e = t.tree.prop(Ed)) !== null && e !== void 0 ? e : t.to, this.inner = new A0(t.tree, -t.offset);
    }
  }
  findMounts(e, t) {
    var n;
    let r = [];
    if (this.inner) {
      this.inner.cursor.moveTo(e, 1);
      for (let s = this.inner.cursor.node; s; s = s.parent) {
        let o = (n = s.tree) === null || n === void 0 ? void 0 : n.prop(se.mounted);
        if (o && o.parser == t)
          for (let l = this.fragI; l < this.fragments.length; l++) {
            let a = this.fragments[l];
            if (a.from >= s.to)
              break;
            a.tree == this.curFrag.tree && r.push({
              frag: a,
              pos: s.from - a.offset,
              mount: o
            });
          }
      }
    }
    return r;
  }
};
function E0(i, e) {
  let t = null, n = e;
  for (let r = 1, s = 0; r < i.length; r++) {
    let o = i[r - 1].to, l = i[r].from;
    for (; s < n.length; s++) {
      let a = n[s];
      if (a.from >= l)
        break;
      a.to <= o || (t || (n = t = e.slice()), a.from < o ? (t[s] = new Ft(a.from, o), a.to > l && t.splice(s + 1, 0, new Ft(l, a.to))) : a.to > l ? t[s--] = new Ft(l, a.to) : t.splice(s--, 1));
    }
  }
  return n;
}
function HM(i, e, t, n) {
  let r = 0, s = 0, o = !1, l = !1, a = -1e9, h = [];
  for (; ; ) {
    let c = r == i.length ? 1e9 : o ? i[r].to : i[r].from, f = s == e.length ? 1e9 : l ? e[s].to : e[s].from;
    if (o != l) {
      let u = Math.max(a, t), d = Math.min(c, f, n);
      u < d && h.push(new Ft(u, d));
    }
    if (a = Math.min(c, f), a == 1e9)
      break;
    c == a && (o ? (o = !1, r++) : o = !0), f == a && (l ? (l = !1, s++) : l = !0);
  }
  return h;
}
function M0(i, e) {
  let t = [];
  for (let { pos: n, mount: r, frag: s } of i) {
    let o = n + (r.overlay ? r.overlay[0].from : 0), l = o + r.tree.length, a = Math.max(s.from, o), h = Math.min(s.to, l);
    if (r.overlay) {
      let c = r.overlay.map((u) => new Ft(u.from + n, u.to + n)), f = HM(e, c, a, h);
      for (let u = 0, d = a; ; u++) {
        let O = u == f.length, p = O ? h : f[u].from;
        if (p > d && t.push(new is(d, p, r.tree, -o, s.from >= d || s.openStart, s.to <= p || s.openEnd)), O)
          break;
        d = f[u].to;
      }
    } else
      t.push(new is(a, h, r.tree, -o, s.from >= o || s.openStart, s.to <= l || s.openEnd));
  }
  return t;
}
let KM = 0, Bi = class Md {
  /**
  @internal
  */
  constructor(e, t, n, r) {
    this.name = e, this.set = t, this.base = n, this.modified = r, this.id = KM++;
  }
  toString() {
    let { name: e } = this;
    for (let t of this.modified)
      t.name && (e = `${t.name}(${e})`);
    return e;
  }
  static define(e, t) {
    let n = typeof e == "string" ? e : "?";
    if (e instanceof Md && (t = e), t?.base)
      throw new Error("Can not derive from a modified tag");
    let r = new Md(n, [], null, []);
    if (r.set.push(r), t)
      for (let s of t.set)
        r.set.push(s);
    return r;
  }
  /**
  Define a tag _modifier_, which is a function that, given a tag,
  will return a tag that is a subtag of the original. Applying the
  same modifier to a twice tag will return the same value (`m1(t1)
  == m1(t1)`) and applying multiple modifiers will, regardless or
  order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).
  
  When multiple modifiers are applied to a given base tag, each
  smaller set of modifiers is registered as a parent, so that for
  example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,
  `m1(m3(t1)`, and so on.
  */
  static defineModifier(e) {
    let t = new q0(e);
    return (n) => n.modified.indexOf(t) > -1 ? n : q0.get(n.base || n, n.modified.concat(t).sort((r, s) => r.id - s.id));
  }
}, JM = 0, q0 = class Fw {
  constructor(e) {
    this.name = e, this.instances = [], this.id = JM++;
  }
  static get(e, t) {
    if (!t.length)
      return e;
    let n = t[0].instances.find((l) => l.base == e && eq(t, l.modified));
    if (n)
      return n;
    let r = [], s = new Bi(e.name, r, e, t);
    for (let l of t)
      l.instances.push(s);
    let o = tq(t);
    for (let l of e.set)
      if (!l.modified.length)
        for (let a of o)
          r.push(Fw.get(l, a));
    return s;
  }
};
function eq(i, e) {
  return i.length == e.length && i.every((t, n) => t == e[n]);
}
function tq(i) {
  let e = [[]];
  for (let t = 0; t < i.length; t++)
    for (let n = 0, r = e.length; n < r; n++)
      e.push(e[n].concat(i[t]));
  return e.sort((t, n) => n.length - t.length);
}
function ki(i) {
  let e = /* @__PURE__ */ Object.create(null);
  for (let t in i) {
    let n = i[t];
    Array.isArray(n) || (n = [n]);
    for (let r of t.split(" "))
      if (r) {
        let s = [], o = 2, l = r;
        for (let f = 0; ; ) {
          if (l == "..." && f > 0 && f + 3 == r.length) {
            o = 1;
            break;
          }
          let u = /^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(l);
          if (!u)
            throw new RangeError("Invalid path: " + r);
          if (s.push(u[0] == "*" ? "" : u[0][0] == '"' ? JSON.parse(u[0]) : u[0]), f += u[0].length, f == r.length)
            break;
          let d = r[f++];
          if (f == r.length && d == "!") {
            o = 0;
            break;
          }
          if (d != "/")
            throw new RangeError("Invalid path: " + r);
          l = r.slice(f);
        }
        let a = s.length - 1, h = s[a];
        if (!h)
          throw new RangeError("Invalid path: " + r);
        let c = new kh(n, o, a > 0 ? s.slice(0, a) : null);
        e[h] = c.sort(e[h]);
      }
  }
  return Hw.add(e);
}
const Hw = new se();
class kh {
  constructor(e, t, n, r) {
    this.tags = e, this.mode = t, this.context = n, this.next = r;
  }
  get opaque() {
    return this.mode == 0;
  }
  get inherit() {
    return this.mode == 1;
  }
  sort(e) {
    return !e || e.depth < this.depth ? (this.next = e, this) : (e.next = this.sort(e.next), e);
  }
  get depth() {
    return this.context ? this.context.length : 0;
  }
}
kh.empty = new kh([], 2, null);
function Kw(i, e) {
  let t = /* @__PURE__ */ Object.create(null);
  for (let s of i)
    if (!Array.isArray(s.tag))
      t[s.tag.id] = s.class;
    else
      for (let o of s.tag)
        t[o.id] = s.class;
  let { scope: n, all: r = null } = e || {};
  return {
    style: (s) => {
      let o = r;
      for (let l of s)
        for (let a of l.set) {
          let h = t[a.id];
          if (h) {
            o = o ? o + " " + h : h;
            break;
          }
        }
      return o;
    },
    scope: n
  };
}
function iq(i, e) {
  let t = null;
  for (let n of i) {
    let r = n.style(e);
    r && (t = t ? t + " " + r : r);
  }
  return t;
}
function nq(i, e, t, n = 0, r = i.length) {
  let s = new rq(n, Array.isArray(e) ? e : [e], t);
  s.highlightRange(i.cursor(), n, r, "", s.highlighters), s.flush(r);
}
let rq = class {
  constructor(e, t, n) {
    this.at = e, this.highlighters = t, this.span = n, this.class = "";
  }
  startSpan(e, t) {
    t != this.class && (this.flush(e), e > this.at && (this.at = e), this.class = t);
  }
  flush(e) {
    e > this.at && this.class && this.span(this.at, e, this.class);
  }
  highlightRange(e, t, n, r, s) {
    let { type: o, from: l, to: a } = e;
    if (l >= n || a <= t)
      return;
    o.isTop && (s = this.highlighters.filter((d) => !d.scope || d.scope(o)));
    let h = r, c = sq(e) || kh.empty, f = iq(s, c.tags);
    if (f && (h && (h += " "), h += f, c.mode == 1 && (r += (r ? " " : "") + f)), this.startSpan(Math.max(t, l), h), c.opaque)
      return;
    let u = e.tree && e.tree.prop(se.mounted);
    if (u && u.overlay) {
      let d = e.node.enter(u.overlay[0].from + l, 1), O = this.highlighters.filter((m) => !m.scope || m.scope(u.tree.type)), p = e.firstChild();
      for (let m = 0, g = l; ; m++) {
        let S = m < u.overlay.length ? u.overlay[m] : null, x = S ? S.from + l : a, k = Math.max(t, g), w = Math.min(n, x);
        if (k < w && p)
          for (; e.from < w && (this.highlightRange(e, k, w, r, s), this.startSpan(Math.min(w, e.to), h), !(e.to >= x || !e.nextSibling())); )
            ;
        if (!S || x > n)
          break;
        g = S.to + l, g > t && (this.highlightRange(d.cursor(), Math.max(t, S.from + l), Math.min(n, g), "", O), this.startSpan(Math.min(n, g), h));
      }
      p && e.parent();
    } else if (e.firstChild()) {
      u && (r = "");
      do
        if (!(e.to <= t)) {
          if (e.from >= n)
            break;
          this.highlightRange(e, t, n, r, s), this.startSpan(Math.min(n, e.to), h);
        }
      while (e.nextSibling());
      e.parent();
    }
  }
};
function sq(i) {
  let e = i.type.prop(Hw);
  for (; e && e.context && !i.matchContext(e.context); )
    e = e.next;
  return e || null;
}
const B = Bi.define, ta = B(), $n = B(), _0 = B($n), X0 = B($n), Tn = B(), ia = B(Tn), pf = B(Tn), _i = B(), Kn = B(_i), Ti = B(), Ci = B(), qd = B(), Ys = B(qd), na = B(), y = {
  /**
  A comment.
  */
  comment: ta,
  /**
  A line [comment](#highlight.tags.comment).
  */
  lineComment: B(ta),
  /**
  A block [comment](#highlight.tags.comment).
  */
  blockComment: B(ta),
  /**
  A documentation [comment](#highlight.tags.comment).
  */
  docComment: B(ta),
  /**
  Any kind of identifier.
  */
  name: $n,
  /**
  The [name](#highlight.tags.name) of a variable.
  */
  variableName: B($n),
  /**
  A type [name](#highlight.tags.name).
  */
  typeName: _0,
  /**
  A tag name (subtag of [`typeName`](#highlight.tags.typeName)).
  */
  tagName: B(_0),
  /**
  A property or field [name](#highlight.tags.name).
  */
  propertyName: X0,
  /**
  An attribute name (subtag of [`propertyName`](#highlight.tags.propertyName)).
  */
  attributeName: B(X0),
  /**
  The [name](#highlight.tags.name) of a class.
  */
  className: B($n),
  /**
  A label [name](#highlight.tags.name).
  */
  labelName: B($n),
  /**
  A namespace [name](#highlight.tags.name).
  */
  namespace: B($n),
  /**
  The [name](#highlight.tags.name) of a macro.
  */
  macroName: B($n),
  /**
  A literal value.
  */
  literal: Tn,
  /**
  A string [literal](#highlight.tags.literal).
  */
  string: ia,
  /**
  A documentation [string](#highlight.tags.string).
  */
  docString: B(ia),
  /**
  A character literal (subtag of [string](#highlight.tags.string)).
  */
  character: B(ia),
  /**
  An attribute value (subtag of [string](#highlight.tags.string)).
  */
  attributeValue: B(ia),
  /**
  A number [literal](#highlight.tags.literal).
  */
  number: pf,
  /**
  An integer [number](#highlight.tags.number) literal.
  */
  integer: B(pf),
  /**
  A floating-point [number](#highlight.tags.number) literal.
  */
  float: B(pf),
  /**
  A boolean [literal](#highlight.tags.literal).
  */
  bool: B(Tn),
  /**
  Regular expression [literal](#highlight.tags.literal).
  */
  regexp: B(Tn),
  /**
  An escape [literal](#highlight.tags.literal), for example a
  backslash escape in a string.
  */
  escape: B(Tn),
  /**
  A color [literal](#highlight.tags.literal).
  */
  color: B(Tn),
  /**
  A URL [literal](#highlight.tags.literal).
  */
  url: B(Tn),
  /**
  A language keyword.
  */
  keyword: Ti,
  /**
  The [keyword](#highlight.tags.keyword) for the self or this
  object.
  */
  self: B(Ti),
  /**
  The [keyword](#highlight.tags.keyword) for null.
  */
  null: B(Ti),
  /**
  A [keyword](#highlight.tags.keyword) denoting some atomic value.
  */
  atom: B(Ti),
  /**
  A [keyword](#highlight.tags.keyword) that represents a unit.
  */
  unit: B(Ti),
  /**
  A modifier [keyword](#highlight.tags.keyword).
  */
  modifier: B(Ti),
  /**
  A [keyword](#highlight.tags.keyword) that acts as an operator.
  */
  operatorKeyword: B(Ti),
  /**
  A control-flow related [keyword](#highlight.tags.keyword).
  */
  controlKeyword: B(Ti),
  /**
  A [keyword](#highlight.tags.keyword) that defines something.
  */
  definitionKeyword: B(Ti),
  /**
  A [keyword](#highlight.tags.keyword) related to defining or
  interfacing with modules.
  */
  moduleKeyword: B(Ti),
  /**
  An operator.
  */
  operator: Ci,
  /**
  An [operator](#highlight.tags.operator) that dereferences something.
  */
  derefOperator: B(Ci),
  /**
  Arithmetic-related [operator](#highlight.tags.operator).
  */
  arithmeticOperator: B(Ci),
  /**
  Logical [operator](#highlight.tags.operator).
  */
  logicOperator: B(Ci),
  /**
  Bit [operator](#highlight.tags.operator).
  */
  bitwiseOperator: B(Ci),
  /**
  Comparison [operator](#highlight.tags.operator).
  */
  compareOperator: B(Ci),
  /**
  [Operator](#highlight.tags.operator) that updates its operand.
  */
  updateOperator: B(Ci),
  /**
  [Operator](#highlight.tags.operator) that defines something.
  */
  definitionOperator: B(Ci),
  /**
  Type-related [operator](#highlight.tags.operator).
  */
  typeOperator: B(Ci),
  /**
  Control-flow [operator](#highlight.tags.operator).
  */
  controlOperator: B(Ci),
  /**
  Program or markup punctuation.
  */
  punctuation: qd,
  /**
  [Punctuation](#highlight.tags.punctuation) that separates
  things.
  */
  separator: B(qd),
  /**
  Bracket-style [punctuation](#highlight.tags.punctuation).
  */
  bracket: Ys,
  /**
  Angle [brackets](#highlight.tags.bracket) (usually `<` and `>`
  tokens).
  */
  angleBracket: B(Ys),
  /**
  Square [brackets](#highlight.tags.bracket) (usually `[` and `]`
  tokens).
  */
  squareBracket: B(Ys),
  /**
  Parentheses (usually `(` and `)` tokens). Subtag of
  [bracket](#highlight.tags.bracket).
  */
  paren: B(Ys),
  /**
  Braces (usually `{` and `}` tokens). Subtag of
  [bracket](#highlight.tags.bracket).
  */
  brace: B(Ys),
  /**
  Content, for example plain text in XML or markup documents.
  */
  content: _i,
  /**
  [Content](#highlight.tags.content) that represents a heading.
  */
  heading: Kn,
  /**
  A level 1 [heading](#highlight.tags.heading).
  */
  heading1: B(Kn),
  /**
  A level 2 [heading](#highlight.tags.heading).
  */
  heading2: B(Kn),
  /**
  A level 3 [heading](#highlight.tags.heading).
  */
  heading3: B(Kn),
  /**
  A level 4 [heading](#highlight.tags.heading).
  */
  heading4: B(Kn),
  /**
  A level 5 [heading](#highlight.tags.heading).
  */
  heading5: B(Kn),
  /**
  A level 6 [heading](#highlight.tags.heading).
  */
  heading6: B(Kn),
  /**
  A prose [content](#highlight.tags.content) separator (such as a horizontal rule).
  */
  contentSeparator: B(_i),
  /**
  [Content](#highlight.tags.content) that represents a list.
  */
  list: B(_i),
  /**
  [Content](#highlight.tags.content) that represents a quote.
  */
  quote: B(_i),
  /**
  [Content](#highlight.tags.content) that is emphasized.
  */
  emphasis: B(_i),
  /**
  [Content](#highlight.tags.content) that is styled strong.
  */
  strong: B(_i),
  /**
  [Content](#highlight.tags.content) that is part of a link.
  */
  link: B(_i),
  /**
  [Content](#highlight.tags.content) that is styled as code or
  monospace.
  */
  monospace: B(_i),
  /**
  [Content](#highlight.tags.content) that has a strike-through
  style.
  */
  strikethrough: B(_i),
  /**
  Inserted text in a change-tracking format.
  */
  inserted: B(),
  /**
  Deleted text.
  */
  deleted: B(),
  /**
  Changed text.
  */
  changed: B(),
  /**
  An invalid or unsyntactic element.
  */
  invalid: B(),
  /**
  Metadata or meta-instruction.
  */
  meta: na,
  /**
  [Metadata](#highlight.tags.meta) that applies to the entire
  document.
  */
  documentMeta: B(na),
  /**
  [Metadata](#highlight.tags.meta) that annotates or adds
  attributes to a given syntactic element.
  */
  annotation: B(na),
  /**
  Processing instruction or preprocessor directive. Subtag of
  [meta](#highlight.tags.meta).
  */
  processingInstruction: B(na),
  /**
  [Modifier](#highlight.Tag^defineModifier) that indicates that a
  given element is being defined. Expected to be used with the
  various [name](#highlight.tags.name) tags.
  */
  definition: Bi.defineModifier("definition"),
  /**
  [Modifier](#highlight.Tag^defineModifier) that indicates that
  something is constant. Mostly expected to be used with
  [variable names](#highlight.tags.variableName).
  */
  constant: Bi.defineModifier("constant"),
  /**
  [Modifier](#highlight.Tag^defineModifier) used to indicate that
  a [variable](#highlight.tags.variableName) or [property
  name](#highlight.tags.propertyName) is being called or defined
  as a function.
  */
  function: Bi.defineModifier("function"),
  /**
  [Modifier](#highlight.Tag^defineModifier) that can be applied to
  [names](#highlight.tags.name) to indicate that they belong to
  the language's standard environment.
  */
  standard: Bi.defineModifier("standard"),
  /**
  [Modifier](#highlight.Tag^defineModifier) that indicates a given
  [names](#highlight.tags.name) is local to some scope.
  */
  local: Bi.defineModifier("local"),
  /**
  A generic variant [modifier](#highlight.Tag^defineModifier) that
  can be used to tag language-specific alternative variants of
  some common tag. It is recommended for themes to define special
  forms of at least the [string](#highlight.tags.string) and
  [variable name](#highlight.tags.variableName) tags, since those
  come up a lot.
  */
  special: Bi.defineModifier("special")
};
for (let i in y) {
  let e = y[i];
  e instanceof Bi && (e.name = i);
}
Kw([
  { tag: y.link, class: "tok-link" },
  { tag: y.heading, class: "tok-heading" },
  { tag: y.emphasis, class: "tok-emphasis" },
  { tag: y.strong, class: "tok-strong" },
  { tag: y.keyword, class: "tok-keyword" },
  { tag: y.atom, class: "tok-atom" },
  { tag: y.bool, class: "tok-bool" },
  { tag: y.url, class: "tok-url" },
  { tag: y.labelName, class: "tok-labelName" },
  { tag: y.inserted, class: "tok-inserted" },
  { tag: y.deleted, class: "tok-deleted" },
  { tag: y.literal, class: "tok-literal" },
  { tag: y.string, class: "tok-string" },
  { tag: y.number, class: "tok-number" },
  { tag: [y.regexp, y.escape, y.special(y.string)], class: "tok-string2" },
  { tag: y.variableName, class: "tok-variableName" },
  { tag: y.local(y.variableName), class: "tok-variableName tok-local" },
  { tag: y.definition(y.variableName), class: "tok-variableName tok-definition" },
  { tag: y.special(y.variableName), class: "tok-variableName2" },
  { tag: y.definition(y.propertyName), class: "tok-propertyName tok-definition" },
  { tag: y.typeName, class: "tok-typeName" },
  { tag: y.namespace, class: "tok-namespace" },
  { tag: y.className, class: "tok-className" },
  { tag: y.macroName, class: "tok-macroName" },
  { tag: y.propertyName, class: "tok-propertyName" },
  { tag: y.operator, class: "tok-operator" },
  { tag: y.comment, class: "tok-comment" },
  { tag: y.meta, class: "tok-meta" },
  { tag: y.invalid, class: "tok-invalid" },
  { tag: y.punctuation, class: "tok-punctuation" }
]);
var mf;
const lr = /* @__PURE__ */ new se();
function _p(i) {
  return I.define({
    combine: i ? (e) => e.concat(i) : void 0
  });
}
const Xp = /* @__PURE__ */ new se();
let Ht = class {
  /**
  Construct a language object. If you need to invoke this
  directly, first define a data facet with
  [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet), and then
  configure your parser to [attach](https://codemirror.net/6/docs/ref/#language.languageDataProp) it
  to the language's outer syntax node.
  */
  constructor(e, t, n = [], r = "") {
    this.data = e, this.name = r, Be.prototype.hasOwnProperty("tree") || Object.defineProperty(Be.prototype, "tree", { get() {
      return ye(this);
    } }), this.parser = t, this.extension = [
      Un.of(this),
      Be.languageData.of((s, o, l) => {
        let a = L0(s, o, l), h = a.type.prop(lr);
        if (!h)
          return [];
        let c = s.facet(h), f = a.type.prop(Xp);
        if (f) {
          let u = a.resolve(o - a.from, l);
          for (let d of f)
            if (d.test(u, s)) {
              let O = s.facet(d.facet);
              return d.type == "replace" ? O : O.concat(c);
            }
        }
        return c;
      })
    ].concat(n);
  }
  /**
  Query whether this language is active at the given position.
  */
  isActiveAt(e, t, n = -1) {
    return L0(e, t, n).type.prop(lr) == this.data;
  }
  /**
  Find the document regions that were parsed using this language.
  The returned regions will _include_ any nested languages rooted
  in this language, when those exist.
  */
  findRegions(e) {
    let t = e.facet(Un);
    if (t?.data == this.data)
      return [{ from: 0, to: e.doc.length }];
    if (!t || !t.allowsNesting)
      return [];
    let n = [], r = (s, o) => {
      if (s.prop(lr) == this.data) {
        n.push({ from: o, to: o + s.length });
        return;
      }
      let l = s.prop(se.mounted);
      if (l) {
        if (l.tree.prop(lr) == this.data) {
          if (l.overlay)
            for (let a of l.overlay)
              n.push({ from: a.from + o, to: a.to + o });
          else
            n.push({ from: o, to: o + s.length });
          return;
        } else if (l.overlay) {
          let a = n.length;
          if (r(l.tree, l.overlay[0].from + o), n.length > a)
            return;
        }
      }
      for (let a = 0; a < s.children.length; a++) {
        let h = s.children[a];
        h instanceof Qe && r(h, s.positions[a] + o);
      }
    };
    return r(ye(e), 0), n;
  }
  /**
  Indicates whether this language allows nested languages. The
  default implementation returns true.
  */
  get allowsNesting() {
    return !0;
  }
};
Ht.setState = /* @__PURE__ */ le.define();
function L0(i, e, t) {
  let n = i.facet(Un), r = ye(i).topNode;
  if (!n || n.allowsNesting)
    for (let s = r; s; s = s.enter(e, t, ve.ExcludeBuffers))
      s.type.isTop && (r = s);
  return r;
}
class Si extends Ht {
  constructor(e, t, n) {
    super(e, t, [], n), this.parser = t;
  }
  /**
  Define a language from a parser.
  */
  static define(e) {
    let t = _p(e.languageData);
    return new Si(t, e.parser.configure({
      props: [lr.add((n) => n.isTop ? t : void 0)]
    }), e.name);
  }
  /**
  Create a new instance of this language with a reconfigured
  version of its parser and optionally a new name.
  */
  configure(e, t) {
    return new Si(this.data, this.parser.configure(e), t || this.name);
  }
  get allowsNesting() {
    return this.parser.hasWrappers();
  }
}
function ye(i) {
  let e = i.field(Ht.state, !1);
  return e ? e.tree : Qe.empty;
}
let oq = class {
  /**
  Create an input object for the given document.
  */
  constructor(e) {
    this.doc = e, this.cursorPos = 0, this.string = "", this.cursor = e.iter();
  }
  get length() {
    return this.doc.length;
  }
  syncTo(e) {
    return this.string = this.cursor.next(e - this.cursorPos).value, this.cursorPos = e + this.string.length, this.cursorPos - this.string.length;
  }
  chunk(e) {
    return this.syncTo(e), this.string;
  }
  get lineChunks() {
    return !0;
  }
  read(e, t) {
    let n = this.cursorPos - this.string.length;
    return e < n || t >= this.cursorPos ? this.doc.sliceString(e, t) : this.string.slice(e - n, t - n);
  }
}, Gs = null, Jw = class _d {
  constructor(e, t, n = [], r, s, o, l, a) {
    this.parser = e, this.state = t, this.fragments = n, this.tree = r, this.treeLen = s, this.viewport = o, this.skipped = l, this.scheduleOn = a, this.parse = null, this.tempSkipped = [];
  }
  /**
  @internal
  */
  static create(e, t, n) {
    return new _d(e, t, [], Qe.empty, 0, n, [], null);
  }
  startParse() {
    return this.parser.startParse(new oq(this.state.doc), this.fragments);
  }
  /**
  @internal
  */
  work(e, t) {
    return t != null && t >= this.state.doc.length && (t = void 0), this.tree != Qe.empty && this.isDone(t ?? this.state.doc.length) ? (this.takeTree(), !0) : this.withContext(() => {
      var n;
      if (typeof e == "number") {
        let r = Date.now() + e;
        e = () => Date.now() > r;
      }
      for (this.parse || (this.parse = this.startParse()), t != null && (this.parse.stoppedAt == null || this.parse.stoppedAt > t) && t < this.state.doc.length && this.parse.stopAt(t); ; ) {
        let r = this.parse.advance();
        if (r)
          if (this.fragments = this.withoutTempSkipped(is.addTree(r, this.fragments, this.parse.stoppedAt != null)), this.treeLen = (n = this.parse.stoppedAt) !== null && n !== void 0 ? n : this.state.doc.length, this.tree = r, this.parse = null, this.treeLen < (t ?? this.state.doc.length))
            this.parse = this.startParse();
          else
            return !0;
        if (e())
          return !1;
      }
    });
  }
  /**
  @internal
  */
  takeTree() {
    let e, t;
    this.parse && (e = this.parse.parsedPos) >= this.treeLen && ((this.parse.stoppedAt == null || this.parse.stoppedAt > e) && this.parse.stopAt(e), this.withContext(() => {
      for (; !(t = this.parse.advance()); )
        ;
    }), this.treeLen = e, this.tree = t, this.fragments = this.withoutTempSkipped(is.addTree(this.tree, this.fragments, !0)), this.parse = null);
  }
  withContext(e) {
    let t = Gs;
    Gs = this;
    try {
      return e();
    } finally {
      Gs = t;
    }
  }
  withoutTempSkipped(e) {
    for (let t; t = this.tempSkipped.pop(); )
      e = B0(e, t.from, t.to);
    return e;
  }
  /**
  @internal
  */
  changes(e, t) {
    let { fragments: n, tree: r, treeLen: s, viewport: o, skipped: l } = this;
    if (this.takeTree(), !e.empty) {
      let a = [];
      if (e.iterChangedRanges((h, c, f, u) => a.push({ fromA: h, toA: c, fromB: f, toB: u })), n = is.applyChanges(n, a), r = Qe.empty, s = 0, o = { from: e.mapPos(o.from, -1), to: e.mapPos(o.to, 1) }, this.skipped.length) {
        l = [];
        for (let h of this.skipped) {
          let c = e.mapPos(h.from, 1), f = e.mapPos(h.to, -1);
          c < f && l.push({ from: c, to: f });
        }
      }
    }
    return new _d(this.parser, t, n, r, s, o, l, this.scheduleOn);
  }
  /**
  @internal
  */
  updateViewport(e) {
    if (this.viewport.from == e.from && this.viewport.to == e.to)
      return !1;
    this.viewport = e;
    let t = this.skipped.length;
    for (let n = 0; n < this.skipped.length; n++) {
      let { from: r, to: s } = this.skipped[n];
      r < e.to && s > e.from && (this.fragments = B0(this.fragments, r, s), this.skipped.splice(n--, 1));
    }
    return this.skipped.length >= t ? !1 : (this.reset(), !0);
  }
  /**
  @internal
  */
  reset() {
    this.parse && (this.takeTree(), this.parse = null);
  }
  /**
  Notify the parse scheduler that the given region was skipped
  because it wasn't in view, and the parse should be restarted
  when it comes into view.
  */
  skipUntilInView(e, t) {
    this.skipped.push({ from: e, to: t });
  }
  /**
  Returns a parser intended to be used as placeholder when
  asynchronously loading a nested parser. It'll skip its input and
  mark it as not-really-parsed, so that the next update will parse
  it again.
  
  When `until` is given, a reparse will be scheduled when that
  promise resolves.
  */
  static getSkippingParser(e) {
    return new class extends qp {
      createParse(t, n, r) {
        let s = r[0].from, o = r[r.length - 1].to;
        return {
          parsedPos: s,
          advance() {
            let a = Gs;
            if (a) {
              for (let h of r)
                a.tempSkipped.push(h);
              e && (a.scheduleOn = a.scheduleOn ? Promise.all([a.scheduleOn, e]) : e);
            }
            return this.parsedPos = o, new Qe(ht.none, [], [], o - s);
          },
          stoppedAt: null,
          stopAt() {
          }
        };
      }
    }();
  }
  /**
  @internal
  */
  isDone(e) {
    e = Math.min(e, this.state.doc.length);
    let t = this.fragments;
    return this.treeLen >= e && t.length && t[0].from == 0 && t[0].to >= e;
  }
  /**
  Get the context for the current parse, or `null` if no editor
  parse is in progress.
  */
  static get() {
    return Gs;
  }
};
function B0(i, e, t) {
  return is.applyChanges(i, [{ fromA: e, toA: t, fromB: e, toB: t }]);
}
let Xd = class Ld {
  constructor(e) {
    this.context = e, this.tree = e.tree;
  }
  apply(e) {
    if (!e.docChanged && this.tree == this.context.tree)
      return this;
    let t = this.context.changes(e.changes, e.state), n = this.context.treeLen == e.startState.doc.length ? void 0 : Math.max(e.changes.mapPos(this.context.treeLen), t.viewport.to);
    return t.work(20, n) || t.takeTree(), new Ld(t);
  }
  static init(e) {
    let t = Math.min(3e3, e.doc.length), n = Jw.create(e.facet(Un).parser, e, { from: 0, to: t });
    return n.work(20, t) || n.takeTree(), new Ld(n);
  }
};
Ht.state = /* @__PURE__ */ gt.define({
  create: Xd.init,
  update(i, e) {
    for (let t of e.effects)
      if (t.is(Ht.setState))
        return t.value;
    return e.startState.facet(Un) != e.state.facet(Un) ? Xd.init(e.state) : i.apply(e);
  }
});
let ek = (i) => {
  let e = setTimeout(
    () => i(),
    500
    /* Work.MaxPause */
  );
  return () => clearTimeout(e);
};
typeof requestIdleCallback < "u" && (ek = (i) => {
  let e = -1, t = setTimeout(
    () => {
      e = requestIdleCallback(i, {
        timeout: 400
        /* Work.MinPause */
      });
    },
    100
    /* Work.MinPause */
  );
  return () => e < 0 ? clearTimeout(t) : cancelIdleCallback(e);
});
const gf = typeof navigator < "u" && (!((mf = navigator.scheduling) === null || mf === void 0) && mf.isInputPending) ? () => navigator.scheduling.isInputPending() : null, lq = /* @__PURE__ */ at.fromClass(class {
  constructor(e) {
    this.view = e, this.working = null, this.workScheduled = 0, this.chunkEnd = -1, this.chunkBudget = -1, this.work = this.work.bind(this), this.scheduleWork();
  }
  update(e) {
    let t = this.view.state.field(Ht.state).context;
    (t.updateViewport(e.view.viewport) || this.view.viewport.to > t.treeLen) && this.scheduleWork(), (e.docChanged || e.selectionSet) && (this.view.hasFocus && (this.chunkBudget += 50), this.scheduleWork()), this.checkAsyncSchedule(t);
  }
  scheduleWork() {
    if (this.working)
      return;
    let { state: e } = this.view, t = e.field(Ht.state);
    (t.tree != t.context.tree || !t.context.isDone(e.doc.length)) && (this.working = ek(this.work));
  }
  work(e) {
    this.working = null;
    let t = Date.now();
    if (this.chunkEnd < t && (this.chunkEnd < 0 || this.view.hasFocus) && (this.chunkEnd = t + 3e4, this.chunkBudget = 3e3), this.chunkBudget <= 0)
      return;
    let { state: n, viewport: { to: r } } = this.view, s = n.field(Ht.state);
    if (s.tree == s.context.tree && s.context.isDone(
      r + 1e5
      /* Work.MaxParseAhead */
    ))
      return;
    let o = Date.now() + Math.min(this.chunkBudget, 100, e && !gf ? Math.max(25, e.timeRemaining() - 5) : 1e9), l = s.context.treeLen < r && n.doc.length > r + 1e3, a = s.context.work(() => gf && gf() || Date.now() > o, r + (l ? 0 : 1e5));
    this.chunkBudget -= Date.now() - t, (a || this.chunkBudget <= 0) && (s.context.takeTree(), this.view.dispatch({ effects: Ht.setState.of(new Xd(s.context)) })), this.chunkBudget > 0 && !(a && !l) && this.scheduleWork(), this.checkAsyncSchedule(s.context);
  }
  checkAsyncSchedule(e) {
    e.scheduleOn && (this.workScheduled++, e.scheduleOn.then(() => this.scheduleWork()).catch((t) => Ct(this.view.state, t)).then(() => this.workScheduled--), e.scheduleOn = null);
  }
  destroy() {
    this.working && this.working();
  }
  isWorking() {
    return !!(this.working || this.workScheduled > 0);
  }
}, {
  eventHandlers: { focus() {
    this.scheduleWork();
  } }
}), Un = /* @__PURE__ */ I.define({
  combine(i) {
    return i.length ? i[0] : null;
  },
  enables: (i) => [
    Ht.state,
    lq,
    W.contentAttributes.compute([i], (e) => {
      let t = e.facet(i);
      return t && t.name ? { "data-language": t.name } : {};
    })
  ]
});
class Gi {
  /**
  Create a language support object.
  */
  constructor(e, t = []) {
    this.language = e, this.support = t, this.extension = [e, t];
  }
}
class vh {
  constructor(e, t, n, r, s, o = void 0) {
    this.name = e, this.alias = t, this.extensions = n, this.filename = r, this.loadFunc = s, this.support = o, this.loading = null;
  }
  /**
  Start loading the the language. Will return a promise that
  resolves to a [`LanguageSupport`](https://codemirror.net/6/docs/ref/#language.LanguageSupport)
  object when the language successfully loads.
  */
  load() {
    return this.loading || (this.loading = this.loadFunc().then((e) => this.support = e, (e) => {
      throw this.loading = null, e;
    }));
  }
  /**
  Create a language description.
  */
  static of(e) {
    let { load: t, support: n } = e;
    if (!t) {
      if (!n)
        throw new RangeError("Must pass either 'load' or 'support' to LanguageDescription.of");
      t = () => Promise.resolve(n);
    }
    return new vh(e.name, (e.alias || []).concat(e.name).map((r) => r.toLowerCase()), e.extensions || [], e.filename, t, n);
  }
  /**
  Look for a language in the given array of descriptions that
  matches the filename. Will first match
  [`filename`](https://codemirror.net/6/docs/ref/#language.LanguageDescription.filename) patterns,
  and then [extensions](https://codemirror.net/6/docs/ref/#language.LanguageDescription.extensions),
  and return the first language that matches.
  */
  static matchFilename(e, t) {
    for (let r of e)
      if (r.filename && r.filename.test(t))
        return r;
    let n = /\.([^.]+)$/.exec(t);
    if (n) {
      for (let r of e)
        if (r.extensions.indexOf(n[1]) > -1)
          return r;
    }
    return null;
  }
  /**
  Look for a language whose name or alias matches the the given
  name (case-insensitively). If `fuzzy` is true, and no direct
  matchs is found, this'll also search for a language whose name
  or alias occurs in the string (for names shorter than three
  characters, only when surrounded by non-word characters).
  */
  static matchLanguageName(e, t, n = !0) {
    t = t.toLowerCase();
    for (let r of e)
      if (r.alias.some((s) => s == t))
        return r;
    if (n)
      for (let r of e)
        for (let s of r.alias) {
          let o = t.indexOf(s);
          if (o > -1 && (s.length > 2 || !/\w/.test(t[o - 1]) && !/\w/.test(t[o + s.length])))
            return r;
        }
    return null;
  }
}
const aq = /* @__PURE__ */ I.define(), vl = /* @__PURE__ */ I.define({
  combine: (i) => {
    if (!i.length)
      return "  ";
    let e = i[0];
    if (!e || /\S/.test(e) || Array.from(e).some((t) => t != e[0]))
      throw new Error("Invalid indent unit: " + JSON.stringify(i[0]));
    return e;
  }
});
function Qh(i) {
  let e = i.facet(vl);
  return e.charCodeAt(0) == 9 ? i.tabSize * e.length : e.length;
}
function Yo(i, e) {
  let t = "", n = i.tabSize, r = i.facet(vl)[0];
  if (r == "	") {
    for (; e >= n; )
      t += "	", e -= n;
    r = " ";
  }
  for (let s = 0; s < e; s++)
    t += r;
  return t;
}
function Lp(i, e) {
  i instanceof Be && (i = new gc(i));
  for (let n of i.state.facet(aq)) {
    let r = n(i, e);
    if (r !== void 0)
      return r;
  }
  let t = ye(i.state);
  return t.length >= e ? hq(i, t, e) : null;
}
class gc {
  /**
  Create an indent context.
  */
  constructor(e, t = {}) {
    this.state = e, this.options = t, this.unit = Qh(e);
  }
  /**
  Get a description of the line at the given position, taking
  [simulated line
  breaks](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
  into account. If there is such a break at `pos`, the `bias`
  argument determines whether the part of the line line before or
  after the break is used.
  */
  lineAt(e, t = 1) {
    let n = this.state.doc.lineAt(e), { simulateBreak: r, simulateDoubleBreak: s } = this.options;
    return r != null && r >= n.from && r <= n.to ? s && r == e ? { text: "", from: e } : (t < 0 ? r < e : r <= e) ? { text: n.text.slice(r - n.from), from: r } : { text: n.text.slice(0, r - n.from), from: n.from } : n;
  }
  /**
  Get the text directly after `pos`, either the entire line
  or the next 100 characters, whichever is shorter.
  */
  textAfterPos(e, t = 1) {
    if (this.options.simulateDoubleBreak && e == this.options.simulateBreak)
      return "";
    let { text: n, from: r } = this.lineAt(e, t);
    return n.slice(e - r, Math.min(n.length, e + 100 - r));
  }
  /**
  Find the column for the given position.
  */
  column(e, t = 1) {
    let { text: n, from: r } = this.lineAt(e, t), s = this.countColumn(n, e - r), o = this.options.overrideIndentation ? this.options.overrideIndentation(r) : -1;
    return o > -1 && (s += o - this.countColumn(n, n.search(/\S|$/))), s;
  }
  /**
  Find the column position (taking tabs into account) of the given
  position in the given string.
  */
  countColumn(e, t = e.length) {
    return gi(e, this.state.tabSize, t);
  }
  /**
  Find the indentation column of the line at the given point.
  */
  lineIndent(e, t = 1) {
    let { text: n, from: r } = this.lineAt(e, t), s = this.options.overrideIndentation;
    if (s) {
      let o = s(r);
      if (o > -1)
        return o;
    }
    return this.countColumn(n, n.search(/\S|$/));
  }
  /**
  Returns the [simulated line
  break](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
  for this context, if any.
  */
  get simulatedBreak() {
    return this.options.simulateBreak || null;
  }
}
const Ji = /* @__PURE__ */ new se();
function hq(i, e, t) {
  let n = e.resolveStack(t), r = e.resolveInner(t, -1).resolve(t, 0).enterUnfinishedNodesBefore(t);
  if (r != n.node) {
    let s = [];
    for (let o = r; o && !(o.from == n.node.from && o.type == n.node.type); o = o.parent)
      s.push(o);
    for (let o = s.length - 1; o >= 0; o--)
      n = { node: s[o], next: n };
  }
  return tk(n, i, t);
}
function tk(i, e, t) {
  for (let n = i; n; n = n.next) {
    let r = fq(n.node);
    if (r)
      return r(Bp.create(e, t, n));
  }
  return 0;
}
function cq(i) {
  return i.pos == i.options.simulateBreak && i.options.simulateDoubleBreak;
}
function fq(i) {
  let e = i.type.prop(Ji);
  if (e)
    return e;
  let t = i.firstChild, n;
  if (t && (n = t.type.prop(se.closedBy))) {
    let r = i.lastChild, s = r && n.indexOf(r.name) > -1;
    return (o) => ik(o, !0, 1, void 0, s && !cq(o) ? r.from : void 0);
  }
  return i.parent == null ? uq : null;
}
function uq() {
  return 0;
}
class Bp extends gc {
  constructor(e, t, n) {
    super(e.state, e.options), this.base = e, this.pos = t, this.context = n;
  }
  /**
  The syntax tree node to which the indentation strategy
  applies.
  */
  get node() {
    return this.context.node;
  }
  /**
  @internal
  */
  static create(e, t, n) {
    return new Bp(e, t, n);
  }
  /**
  Get the text directly after `this.pos`, either the entire line
  or the next 100 characters, whichever is shorter.
  */
  get textAfter() {
    return this.textAfterPos(this.pos);
  }
  /**
  Get the indentation at the reference line for `this.node`, which
  is the line on which it starts, unless there is a node that is
  _not_ a parent of this node covering the start of that line. If
  so, the line at the start of that node is tried, again skipping
  on if it is covered by another such node.
  */
  get baseIndent() {
    return this.baseIndentFor(this.node);
  }
  /**
  Get the indentation for the reference line of the given node
  (see [`baseIndent`](https://codemirror.net/6/docs/ref/#language.TreeIndentContext.baseIndent)).
  */
  baseIndentFor(e) {
    let t = this.state.doc.lineAt(e.from);
    for (; ; ) {
      let n = e.resolve(t.from);
      for (; n.parent && n.parent.from == n.from; )
        n = n.parent;
      if (dq(n, e))
        break;
      t = this.state.doc.lineAt(n.from);
    }
    return this.lineIndent(t.from);
  }
  /**
  Continue looking for indentations in the node's parent nodes,
  and return the result of that.
  */
  continue() {
    return tk(this.context.next, this.base, this.pos);
  }
}
function dq(i, e) {
  for (let t = e; t; t = t.parent)
    if (i == t)
      return !0;
  return !1;
}
function Oq(i) {
  let e = i.node, t = e.childAfter(e.from), n = e.lastChild;
  if (!t)
    return null;
  let r = i.options.simulateBreak, s = i.state.doc.lineAt(t.from), o = r == null || r <= s.from ? s.to : Math.min(s.to, r);
  for (let l = t.to; ; ) {
    let a = e.childAfter(l);
    if (!a || a == n)
      return null;
    if (!a.type.isSkipped) {
      if (a.from >= o)
        return null;
      let h = /^ */.exec(s.text.slice(t.to - s.from))[0].length;
      return { from: t.from, to: t.to + h };
    }
    l = a.to;
  }
}
function ns({ closing: i, align: e = !0, units: t = 1 }) {
  return (n) => ik(n, e, t, i);
}
function ik(i, e, t, n, r) {
  let s = i.textAfter, o = s.match(/^\s*/)[0].length, l = n && s.slice(o, o + n.length) == n || r == i.pos + o, a = e ? Oq(i) : null;
  return a ? l ? i.column(a.from) : i.column(a.to) : i.baseIndent + (l ? 0 : i.unit * t);
}
const pq = (i) => i.baseIndent;
function Or({ except: i, units: e = 1 } = {}) {
  return (t) => {
    let n = i && i.test(t.textAfter);
    return t.baseIndent + (n ? 0 : e * t.unit);
  };
}
const mq = 200;
function gq() {
  return Be.transactionFilter.of((i) => {
    if (!i.docChanged || !i.isUserEvent("input.type") && !i.isUserEvent("input.complete"))
      return i;
    let e = i.startState.languageDataAt("indentOnInput", i.startState.selection.main.head);
    if (!e.length)
      return i;
    let t = i.newDoc, { head: n } = i.newSelection.main, r = t.lineAt(n);
    if (n > r.from + mq)
      return i;
    let s = t.sliceString(r.from, n);
    if (!e.some((h) => h.test(s)))
      return i;
    let { state: o } = i, l = -1, a = [];
    for (let { head: h } of o.selection.ranges) {
      let c = o.doc.lineAt(h);
      if (c.from == l)
        continue;
      l = c.from;
      let f = Lp(o, c.from);
      if (f == null)
        continue;
      let u = /^\s*/.exec(c.text)[0], d = Yo(o, f);
      u != d && a.push({ from: c.from, to: c.from + u.length, insert: d });
    }
    return a.length ? [i, { changes: a, sequential: !0 }] : i;
  });
}
const nk = /* @__PURE__ */ I.define(), vi = /* @__PURE__ */ new se();
function Ql(i) {
  let e = i.firstChild, t = i.lastChild;
  return e && e.to < t.from ? { from: e.to, to: t.type.isError ? i.to : t.from } : null;
}
function yq(i, e, t) {
  let n = ye(i);
  if (n.length < t)
    return null;
  let r = n.resolveStack(t, 1), s = null;
  for (let o = r; o; o = o.next) {
    let l = o.node;
    if (l.to <= t || l.from > t)
      continue;
    if (s && l.from < e)
      break;
    let a = l.type.prop(vi);
    if (a && (l.to < n.length - 50 || n.length == i.doc.length || !Sq(l))) {
      let h = a(l, i);
      h && h.from <= t && h.from >= e && h.to > t && (s = h);
    }
  }
  return s;
}
function Sq(i) {
  let e = i.lastChild;
  return e && e.to == i.to && e.type.isError;
}
function Ph(i, e, t) {
  for (let n of i.facet(nk)) {
    let r = n(i, e, t);
    if (r)
      return r;
  }
  return yq(i, e, t);
}
function rk(i, e) {
  let t = e.mapPos(i.from, 1), n = e.mapPos(i.to, -1);
  return t >= n ? void 0 : { from: t, to: n };
}
const yc = /* @__PURE__ */ le.define({ map: rk }), Pl = /* @__PURE__ */ le.define({ map: rk });
function sk(i) {
  let e = [];
  for (let { head: t } of i.state.selection.ranges)
    e.some((n) => n.from <= t && n.to >= t) || e.push(i.lineBlockAt(t));
  return e;
}
const Tr = /* @__PURE__ */ gt.define({
  create() {
    return K.none;
  },
  update(i, e) {
    i = i.map(e.changes);
    for (let t of e.effects)
      if (t.is(yc) && !bq(i, t.value.from, t.value.to)) {
        let { preparePlaceholder: n } = e.state.facet(ak), r = n ? K.replace({ widget: new $q(n(e.state, t.value)) }) : Z0;
        i = i.update({ add: [r.range(t.value.from, t.value.to)] });
      } else t.is(Pl) && (i = i.update({
        filter: (n, r) => t.value.from != n || t.value.to != r,
        filterFrom: t.value.from,
        filterTo: t.value.to
      }));
    if (e.selection) {
      let t = !1, { head: n } = e.selection.main;
      i.between(n, n, (r, s) => {
        r < n && s > n && (t = !0);
      }), t && (i = i.update({
        filterFrom: n,
        filterTo: n,
        filter: (r, s) => s <= n || r >= n
      }));
    }
    return i;
  },
  provide: (i) => W.decorations.from(i),
  toJSON(i, e) {
    let t = [];
    return i.between(0, e.doc.length, (n, r) => {
      t.push(n, r);
    }), t;
  },
  fromJSON(i) {
    if (!Array.isArray(i) || i.length % 2)
      throw new RangeError("Invalid JSON for fold state");
    let e = [];
    for (let t = 0; t < i.length; ) {
      let n = i[t++], r = i[t++];
      if (typeof n != "number" || typeof r != "number")
        throw new RangeError("Invalid JSON for fold state");
      e.push(Z0.range(n, r));
    }
    return K.set(e, !0);
  }
});
function $h(i, e, t) {
  var n;
  let r = null;
  return (n = i.field(Tr, !1)) === null || n === void 0 || n.between(e, t, (s, o) => {
    (!r || r.from > s) && (r = { from: s, to: o });
  }), r;
}
function bq(i, e, t) {
  let n = !1;
  return i.between(e, e, (r, s) => {
    r == e && s == t && (n = !0);
  }), n;
}
function ok(i, e) {
  return i.field(Tr, !1) ? e : e.concat(le.appendConfig.of(hk()));
}
const xq = (i) => {
  for (let e of sk(i)) {
    let t = Ph(i.state, e.from, e.to);
    if (t)
      return i.dispatch({ effects: ok(i.state, [yc.of(t), lk(i, t)]) }), !0;
  }
  return !1;
}, wq = (i) => {
  if (!i.state.field(Tr, !1))
    return !1;
  let e = [];
  for (let t of sk(i)) {
    let n = $h(i.state, t.from, t.to);
    n && e.push(Pl.of(n), lk(i, n, !1));
  }
  return e.length && i.dispatch({ effects: e }), e.length > 0;
};
function lk(i, e, t = !0) {
  let n = i.state.doc.lineAt(e.from).number, r = i.state.doc.lineAt(e.to).number;
  return W.announce.of(`${i.state.phrase(t ? "Folded lines" : "Unfolded lines")} ${n} ${i.state.phrase("to")} ${r}.`);
}
const kq = (i) => {
  let { state: e } = i, t = [];
  for (let n = 0; n < e.doc.length; ) {
    let r = i.lineBlockAt(n), s = Ph(e, r.from, r.to);
    s && t.push(yc.of(s)), n = (s ? i.lineBlockAt(s.to) : r).to + 1;
  }
  return t.length && i.dispatch({ effects: ok(i.state, t) }), !!t.length;
}, vq = (i) => {
  let e = i.state.field(Tr, !1);
  if (!e || !e.size)
    return !1;
  let t = [];
  return e.between(0, i.state.doc.length, (n, r) => {
    t.push(Pl.of({ from: n, to: r }));
  }), i.dispatch({ effects: t }), !0;
}, Qq = [
  { key: "Ctrl-Shift-[", mac: "Cmd-Alt-[", run: xq },
  { key: "Ctrl-Shift-]", mac: "Cmd-Alt-]", run: wq },
  { key: "Ctrl-Alt-[", run: kq },
  { key: "Ctrl-Alt-]", run: vq }
], Pq = {
  placeholderDOM: null,
  preparePlaceholder: null,
  placeholderText: "…"
}, ak = /* @__PURE__ */ I.define({
  combine(i) {
    return Ki(i, Pq);
  }
});
function hk(i) {
  return [Tr, Rq];
}
function ck(i, e) {
  let { state: t } = i, n = t.facet(ak), r = (o) => {
    let l = i.lineBlockAt(i.posAtDOM(o.target)), a = $h(i.state, l.from, l.to);
    a && i.dispatch({ effects: Pl.of(a) }), o.preventDefault();
  };
  if (n.placeholderDOM)
    return n.placeholderDOM(i, r, e);
  let s = document.createElement("span");
  return s.textContent = n.placeholderText, s.setAttribute("aria-label", t.phrase("folded code")), s.title = t.phrase("unfold"), s.className = "cm-foldPlaceholder", s.onclick = r, s;
}
const Z0 = /* @__PURE__ */ K.replace({ widget: /* @__PURE__ */ new class extends wn {
  toDOM(i) {
    return ck(i, null);
  }
}() });
class $q extends wn {
  constructor(e) {
    super(), this.value = e;
  }
  eq(e) {
    return this.value == e.value;
  }
  toDOM(e) {
    return ck(e, this.value);
  }
}
const Tq = {
  openText: "⌄",
  closedText: "›",
  markerDOM: null,
  domEventHandlers: {},
  foldingChanged: () => !1
};
class yf extends yn {
  constructor(e, t) {
    super(), this.config = e, this.open = t;
  }
  eq(e) {
    return this.config == e.config && this.open == e.open;
  }
  toDOM(e) {
    if (this.config.markerDOM)
      return this.config.markerDOM(this.open);
    let t = document.createElement("span");
    return t.textContent = this.open ? this.config.openText : this.config.closedText, t.title = e.state.phrase(this.open ? "Fold line" : "Unfold line"), t;
  }
}
function Cq(i = {}) {
  let e = Object.assign(Object.assign({}, Tq), i), t = new yf(e, !0), n = new yf(e, !1), r = at.fromClass(class {
    constructor(o) {
      this.from = o.viewport.from, this.markers = this.buildMarkers(o);
    }
    update(o) {
      (o.docChanged || o.viewportChanged || o.startState.facet(Un) != o.state.facet(Un) || o.startState.field(Tr, !1) != o.state.field(Tr, !1) || ye(o.startState) != ye(o.state) || e.foldingChanged(o)) && (this.markers = this.buildMarkers(o.view));
    }
    buildMarkers(o) {
      let l = new vr();
      for (let a of o.viewportLineBlocks) {
        let h = $h(o.state, a.from, a.to) ? n : Ph(o.state, a.from, a.to) ? t : null;
        h && l.add(a.from, a.from, h);
      }
      return l.finish();
    }
  }), { domEventHandlers: s } = e;
  return [
    r,
    $M({
      class: "cm-foldGutter",
      markers(o) {
        var l;
        return ((l = o.plugin(r)) === null || l === void 0 ? void 0 : l.markers) || qe.empty;
      },
      initialSpacer() {
        return new yf(e, !1);
      },
      domEventHandlers: Object.assign(Object.assign({}, s), { click: (o, l, a) => {
        if (s.click && s.click(o, l, a))
          return !0;
        let h = $h(o.state, l.from, l.to);
        if (h)
          return o.dispatch({ effects: Pl.of(h) }), !0;
        let c = Ph(o.state, l.from, l.to);
        return c ? (o.dispatch({ effects: yc.of(c) }), !0) : !1;
      } })
    }),
    hk()
  ];
}
const Rq = /* @__PURE__ */ W.baseTheme({
  ".cm-foldPlaceholder": {
    backgroundColor: "#eee",
    border: "1px solid #ddd",
    color: "#888",
    borderRadius: ".2em",
    margin: "0 1px",
    padding: "0 1px",
    cursor: "pointer"
  },
  ".cm-foldGutter span": {
    padding: "0 1px",
    cursor: "pointer"
  }
});
let fk = class uk {
  constructor(e, t) {
    this.specs = e;
    let n;
    function r(l) {
      let a = mt.newName();
      return (n || (n = /* @__PURE__ */ Object.create(null)))["." + a] = l, a;
    }
    const s = typeof t.all == "string" ? t.all : t.all ? r(t.all) : void 0, o = t.scope;
    this.scope = o instanceof Ht ? (l) => l.prop(lr) == o.data : o ? (l) => l == o : void 0, this.style = Kw(e.map((l) => ({
      tag: l.tag,
      class: l.class || r(Object.assign({}, l, { tag: null }))
    })), {
      all: s
    }).style, this.module = n ? new mt(n) : null, this.themeType = t.themeType;
  }
  /**
  Create a highlighter style that associates the given styles to
  the given tags. The specs must be objects that hold a style tag
  or array of tags in their `tag` property, and either a single
  `class` property providing a static CSS class (for highlighter
  that rely on external styling), or a
  [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style
  set of CSS properties (which define the styling for those tags).
  
  The CSS rules created for a highlighter will be emitted in the
  order of the spec's properties. That means that for elements that
  have multiple tags associated with them, styles defined further
  down in the list will have a higher CSS precedence than styles
  defined earlier.
  */
  static define(e, t) {
    return new uk(e, t || {});
  }
};
const Bd = /* @__PURE__ */ I.define(), dk = /* @__PURE__ */ I.define({
  combine(i) {
    return i.length ? [i[0]] : null;
  }
});
function Sf(i) {
  let e = i.facet(Bd);
  return e.length ? e : i.facet(dk);
}
function Ok(i, e) {
  let t = [Eq], n;
  return i instanceof fk && (i.module && t.push(W.styleModule.of(i.module)), n = i.themeType), e?.fallback ? t.push(dk.of(i)) : n ? t.push(Bd.computeN([W.darkTheme], (r) => r.facet(W.darkTheme) == (n == "dark") ? [i] : [])) : t.push(Bd.of(i)), t;
}
let Aq = class {
  constructor(e) {
    this.markCache = /* @__PURE__ */ Object.create(null), this.tree = ye(e.state), this.decorations = this.buildDeco(e, Sf(e.state)), this.decoratedTo = e.viewport.to;
  }
  update(e) {
    let t = ye(e.state), n = Sf(e.state), r = n != Sf(e.startState), { viewport: s } = e.view, o = e.changes.mapPos(this.decoratedTo, 1);
    t.length < s.to && !r && t.type == this.tree.type && o >= s.to ? (this.decorations = this.decorations.map(e.changes), this.decoratedTo = o) : (t != this.tree || e.viewportChanged || r) && (this.tree = t, this.decorations = this.buildDeco(e.view, n), this.decoratedTo = s.to);
  }
  buildDeco(e, t) {
    if (!t || !this.tree.length)
      return K.none;
    let n = new vr();
    for (let { from: r, to: s } of e.visibleRanges)
      nq(this.tree, t, (o, l, a) => {
        n.add(o, l, this.markCache[a] || (this.markCache[a] = K.mark({ class: a })));
      }, r, s);
    return n.finish();
  }
};
const Eq = /* @__PURE__ */ bn.high(/* @__PURE__ */ at.fromClass(Aq, {
  decorations: (i) => i.decorations
})), Mq = /* @__PURE__ */ fk.define([
  {
    tag: y.meta,
    color: "#404740"
  },
  {
    tag: y.link,
    textDecoration: "underline"
  },
  {
    tag: y.heading,
    textDecoration: "underline",
    fontWeight: "bold"
  },
  {
    tag: y.emphasis,
    fontStyle: "italic"
  },
  {
    tag: y.strong,
    fontWeight: "bold"
  },
  {
    tag: y.strikethrough,
    textDecoration: "line-through"
  },
  {
    tag: y.keyword,
    color: "#708"
  },
  {
    tag: [y.atom, y.bool, y.url, y.contentSeparator, y.labelName],
    color: "#219"
  },
  {
    tag: [y.literal, y.inserted],
    color: "#164"
  },
  {
    tag: [y.string, y.deleted],
    color: "#a11"
  },
  {
    tag: [y.regexp, y.escape, /* @__PURE__ */ y.special(y.string)],
    color: "#e40"
  },
  {
    tag: /* @__PURE__ */ y.definition(y.variableName),
    color: "#00f"
  },
  {
    tag: /* @__PURE__ */ y.local(y.variableName),
    color: "#30a"
  },
  {
    tag: [y.typeName, y.namespace],
    color: "#085"
  },
  {
    tag: y.className,
    color: "#167"
  },
  {
    tag: [/* @__PURE__ */ y.special(y.variableName), y.macroName],
    color: "#256"
  },
  {
    tag: /* @__PURE__ */ y.definition(y.propertyName),
    color: "#00c"
  },
  {
    tag: y.comment,
    color: "#940"
  },
  {
    tag: y.invalid,
    color: "#f00"
  }
]), qq = /* @__PURE__ */ W.baseTheme({
  "&.cm-focused .cm-matchingBracket": { backgroundColor: "#328c8252" },
  "&.cm-focused .cm-nonmatchingBracket": { backgroundColor: "#bb555544" }
}), pk = 1e4, mk = "()[]{}", gk = /* @__PURE__ */ I.define({
  combine(i) {
    return Ki(i, {
      afterCursor: !0,
      brackets: mk,
      maxScanDistance: pk,
      renderMatch: Lq
    });
  }
}), _q = /* @__PURE__ */ K.mark({ class: "cm-matchingBracket" }), Xq = /* @__PURE__ */ K.mark({ class: "cm-nonmatchingBracket" });
function Lq(i) {
  let e = [], t = i.matched ? _q : Xq;
  return e.push(t.range(i.start.from, i.start.to)), i.end && e.push(t.range(i.end.from, i.end.to)), e;
}
const Bq = /* @__PURE__ */ gt.define({
  create() {
    return K.none;
  },
  update(i, e) {
    if (!e.docChanged && !e.selection)
      return i;
    let t = [], n = e.state.facet(gk);
    for (let r of e.state.selection.ranges) {
      if (!r.empty)
        continue;
      let s = zi(e.state, r.head, -1, n) || r.head > 0 && zi(e.state, r.head - 1, 1, n) || n.afterCursor && (zi(e.state, r.head, 1, n) || r.head < e.state.doc.length && zi(e.state, r.head + 1, -1, n));
      s && (t = t.concat(n.renderMatch(s, e.state)));
    }
    return K.set(t, !0);
  },
  provide: (i) => W.decorations.from(i)
}), Zq = [
  Bq,
  qq
];
function Dq(i = {}) {
  return [gk.of(i), Zq];
}
const Zp = /* @__PURE__ */ new se();
function Zd(i, e, t) {
  let n = i.prop(e < 0 ? se.openedBy : se.closedBy);
  if (n)
    return n;
  if (i.name.length == 1) {
    let r = t.indexOf(i.name);
    if (r > -1 && r % 2 == (e < 0 ? 1 : 0))
      return [t[r + e]];
  }
  return null;
}
function Dd(i) {
  let e = i.type.prop(Zp);
  return e ? e(i.node) : i;
}
function zi(i, e, t, n = {}) {
  let r = n.maxScanDistance || pk, s = n.brackets || mk, o = ye(i), l = o.resolveInner(e, t);
  for (let a = l; a; a = a.parent) {
    let h = Zd(a.type, t, s);
    if (h && a.from < a.to) {
      let c = Dd(a);
      if (c && (t > 0 ? e >= c.from && e < c.to : e > c.from && e <= c.to))
        return Vq(i, e, t, a, c, h, s);
    }
  }
  return Wq(i, e, t, o, l.type, r, s);
}
function Vq(i, e, t, n, r, s, o) {
  let l = n.parent, a = { from: r.from, to: r.to }, h = 0, c = l?.cursor();
  if (c && (t < 0 ? c.childBefore(n.from) : c.childAfter(n.to)))
    do
      if (t < 0 ? c.to <= n.from : c.from >= n.to) {
        if (h == 0 && s.indexOf(c.type.name) > -1 && c.from < c.to) {
          let f = Dd(c);
          return { start: a, end: f ? { from: f.from, to: f.to } : void 0, matched: !0 };
        } else if (Zd(c.type, t, o))
          h++;
        else if (Zd(c.type, -t, o)) {
          if (h == 0) {
            let f = Dd(c);
            return {
              start: a,
              end: f && f.from < f.to ? { from: f.from, to: f.to } : void 0,
              matched: !1
            };
          }
          h--;
        }
      }
    while (t < 0 ? c.prevSibling() : c.nextSibling());
  return { start: a, matched: !1 };
}
function Wq(i, e, t, n, r, s, o) {
  let l = t < 0 ? i.sliceDoc(e - 1, e) : i.sliceDoc(e, e + 1), a = o.indexOf(l);
  if (a < 0 || a % 2 == 0 != t > 0)
    return null;
  let h = { from: t < 0 ? e - 1 : e, to: t > 0 ? e + 1 : e }, c = i.doc.iterRange(e, t > 0 ? i.doc.length : 0), f = 0;
  for (let u = 0; !c.next().done && u <= s; ) {
    let d = c.value;
    t < 0 && (u += d.length);
    let O = e + u * t;
    for (let p = t > 0 ? 0 : d.length - 1, m = t > 0 ? d.length : -1; p != m; p += t) {
      let g = o.indexOf(d[p]);
      if (!(g < 0 || n.resolveInner(O + p, 1).type != r))
        if (g % 2 == 0 == t > 0)
          f++;
        else {
          if (f == 1)
            return { start: h, end: { from: O + p, to: O + p + 1 }, matched: g >> 1 == a >> 1 };
          f--;
        }
    }
    t > 0 && (u += d.length);
  }
  return c.done ? { start: h, matched: !1 } : null;
}
const zq = /* @__PURE__ */ Object.create(null), D0 = [ht.none], V0 = [], W0 = /* @__PURE__ */ Object.create(null), Iq = /* @__PURE__ */ Object.create(null);
for (let [i, e] of [
  ["variable", "variableName"],
  ["variable-2", "variableName.special"],
  ["string-2", "string.special"],
  ["def", "variableName.definition"],
  ["tag", "tagName"],
  ["attribute", "attributeName"],
  ["type", "typeName"],
  ["builtin", "variableName.standard"],
  ["qualifier", "modifier"],
  ["error", "invalid"],
  ["header", "heading"],
  ["property", "propertyName"]
])
  Iq[i] = /* @__PURE__ */ Nq(zq, e);
function bf(i, e) {
  V0.indexOf(i) > -1 || (V0.push(i), console.warn(e));
}
function Nq(i, e) {
  let t = [];
  for (let l of e.split(" ")) {
    let a = [];
    for (let h of l.split(".")) {
      let c = i[h] || y[h];
      c ? typeof c == "function" ? a.length ? a = a.map(c) : bf(h, `Modifier ${h} used at start of tag`) : a.length ? bf(h, `Tag ${h} used as modifier`) : a = Array.isArray(c) ? c : [c] : bf(h, `Unknown highlighting tag ${h}`);
    }
    for (let h of a)
      t.push(h);
  }
  if (!t.length)
    return 0;
  let n = e.replace(/ /g, "_"), r = n + " " + t.map((l) => l.id), s = W0[r];
  if (s)
    return s.id;
  let o = W0[r] = ht.define({
    id: D0.length,
    name: n,
    props: [ki({ [n]: t })]
  });
  return D0.push(o), o.id;
}
Ce.RTL, Ce.LTR;
const jq = (i) => {
  let { state: e } = i, t = e.doc.lineAt(e.selection.main.from), n = Vp(i.state, t.from);
  return n.line ? Uq(i) : n.block ? Gq(i) : !1;
};
function Dp(i, e) {
  return ({ state: t, dispatch: n }) => {
    if (t.readOnly)
      return !1;
    let r = i(e, t);
    return r ? (n(t.update(r)), !0) : !1;
  };
}
const Uq = /* @__PURE__ */ Dp(
  Kq,
  0
  /* CommentOption.Toggle */
), Yq = /* @__PURE__ */ Dp(
  yk,
  0
  /* CommentOption.Toggle */
), Gq = /* @__PURE__ */ Dp(
  (i, e) => yk(i, e, Hq(e)),
  0
  /* CommentOption.Toggle */
);
function Vp(i, e) {
  let t = i.languageDataAt("commentTokens", e, 1);
  return t.length ? t[0] : {};
}
const Fs = 50;
function Fq(i, { open: e, close: t }, n, r) {
  let s = i.sliceDoc(n - Fs, n), o = i.sliceDoc(r, r + Fs), l = /\s*$/.exec(s)[0].length, a = /^\s*/.exec(o)[0].length, h = s.length - l;
  if (s.slice(h - e.length, h) == e && o.slice(a, a + t.length) == t)
    return {
      open: { pos: n - l, margin: l && 1 },
      close: { pos: r + a, margin: a && 1 }
    };
  let c, f;
  r - n <= 2 * Fs ? c = f = i.sliceDoc(n, r) : (c = i.sliceDoc(n, n + Fs), f = i.sliceDoc(r - Fs, r));
  let u = /^\s*/.exec(c)[0].length, d = /\s*$/.exec(f)[0].length, O = f.length - d - t.length;
  return c.slice(u, u + e.length) == e && f.slice(O, O + t.length) == t ? {
    open: {
      pos: n + u + e.length,
      margin: /\s/.test(c.charAt(u + e.length)) ? 1 : 0
    },
    close: {
      pos: r - d - t.length,
      margin: /\s/.test(f.charAt(O - 1)) ? 1 : 0
    }
  } : null;
}
function Hq(i) {
  let e = [];
  for (let t of i.selection.ranges) {
    let n = i.doc.lineAt(t.from), r = t.to <= n.to ? n : i.doc.lineAt(t.to);
    r.from > n.from && r.from == t.to && (r = t.to == n.to + 1 ? n : i.doc.lineAt(t.to - 1));
    let s = e.length - 1;
    s >= 0 && e[s].to > n.from ? e[s].to = r.to : e.push({ from: n.from + /^\s*/.exec(n.text)[0].length, to: r.to });
  }
  return e;
}
function yk(i, e, t = e.selection.ranges) {
  let n = t.map((s) => Vp(e, s.from).block);
  if (!n.every((s) => s))
    return null;
  let r = t.map((s, o) => Fq(e, n[o], s.from, s.to));
  if (i != 2 && !r.every((s) => s))
    return { changes: e.changes(t.map((s, o) => r[o] ? [] : [{ from: s.from, insert: n[o].open + " " }, { from: s.to, insert: " " + n[o].close }])) };
  if (i != 1 && r.some((s) => s)) {
    let s = [];
    for (let o = 0, l; o < r.length; o++)
      if (l = r[o]) {
        let a = n[o], { open: h, close: c } = l;
        s.push({ from: h.pos - a.open.length, to: h.pos + h.margin }, { from: c.pos - c.margin, to: c.pos + a.close.length });
      }
    return { changes: s };
  }
  return null;
}
function Kq(i, e, t = e.selection.ranges) {
  let n = [], r = -1;
  for (let { from: s, to: o } of t) {
    let l = n.length, a = 1e9, h = Vp(e, s).line;
    if (h) {
      for (let c = s; c <= o; ) {
        let f = e.doc.lineAt(c);
        if (f.from > r && (s == o || o > f.from)) {
          r = f.from;
          let u = /^\s*/.exec(f.text)[0].length, d = u == f.length, O = f.text.slice(u, u + h.length) == h ? u : -1;
          u < f.text.length && u < a && (a = u), n.push({ line: f, comment: O, token: h, indent: u, empty: d, single: !1 });
        }
        c = f.to + 1;
      }
      if (a < 1e9)
        for (let c = l; c < n.length; c++)
          n[c].indent < n[c].line.text.length && (n[c].indent = a);
      n.length == l + 1 && (n[l].single = !0);
    }
  }
  if (i != 2 && n.some((s) => s.comment < 0 && (!s.empty || s.single))) {
    let s = [];
    for (let { line: l, token: a, indent: h, empty: c, single: f } of n)
      (f || !c) && s.push({ from: l.from + h, insert: a + " " });
    let o = e.changes(s);
    return { changes: o, selection: e.selection.map(o, 1) };
  } else if (i != 1 && n.some((s) => s.comment >= 0)) {
    let s = [];
    for (let { line: o, comment: l, token: a } of n)
      if (l >= 0) {
        let h = o.from + l, c = h + a.length;
        o.text[c - o.from] == " " && c++, s.push({ from: h, to: c });
      }
    return { changes: s };
  }
  return null;
}
const Vd = /* @__PURE__ */ xn.define(), Jq = /* @__PURE__ */ xn.define(), e_ = /* @__PURE__ */ I.define(), Sk = /* @__PURE__ */ I.define({
  combine(i) {
    return Ki(i, {
      minDepth: 100,
      newGroupDelay: 500,
      joinToEvent: (e, t) => t
    }, {
      minDepth: Math.max,
      newGroupDelay: Math.min,
      joinToEvent: (e, t) => (n, r) => e(n, r) || t(n, r)
    });
  }
}), bk = /* @__PURE__ */ gt.define({
  create() {
    return Ii.empty;
  },
  update(i, e) {
    let t = e.state.facet(Sk), n = e.annotation(Vd);
    if (n) {
      let a = Rt.fromTransaction(e, n.selection), h = n.side, c = h == 0 ? i.undone : i.done;
      return a ? c = Th(c, c.length, t.minDepth, a) : c = kk(c, e.startState.selection), new Ii(h == 0 ? n.rest : c, h == 0 ? c : n.rest);
    }
    let r = e.annotation(Jq);
    if ((r == "full" || r == "before") && (i = i.isolate()), e.annotation(kt.addToHistory) === !1)
      return e.changes.empty ? i : i.addMapping(e.changes.desc);
    let s = Rt.fromTransaction(e), o = e.annotation(kt.time), l = e.annotation(kt.userEvent);
    return s ? i = i.addChanges(s, o, l, t, e) : e.selection && (i = i.addSelection(e.startState.selection, o, l, t.newGroupDelay)), (r == "full" || r == "after") && (i = i.isolate()), i;
  },
  toJSON(i) {
    return { done: i.done.map((e) => e.toJSON()), undone: i.undone.map((e) => e.toJSON()) };
  },
  fromJSON(i) {
    return new Ii(i.done.map(Rt.fromJSON), i.undone.map(Rt.fromJSON));
  }
});
function t_(i = {}) {
  return [
    bk,
    Sk.of(i),
    W.domEventHandlers({
      beforeinput(e, t) {
        let n = e.inputType == "historyUndo" ? xk : e.inputType == "historyRedo" ? Wd : null;
        return n ? (e.preventDefault(), n(t)) : !1;
      }
    })
  ];
}
function Sc(i, e) {
  return function({ state: t, dispatch: n }) {
    if (!e && t.readOnly)
      return !1;
    let r = t.field(bk, !1);
    if (!r)
      return !1;
    let s = r.pop(i, t, e);
    return s ? (n(s), !0) : !1;
  };
}
const xk = /* @__PURE__ */ Sc(0, !1), Wd = /* @__PURE__ */ Sc(1, !1), i_ = /* @__PURE__ */ Sc(0, !0), n_ = /* @__PURE__ */ Sc(1, !0);
class Rt {
  constructor(e, t, n, r, s) {
    this.changes = e, this.effects = t, this.mapped = n, this.startSelection = r, this.selectionsAfter = s;
  }
  setSelAfter(e) {
    return new Rt(this.changes, this.effects, this.mapped, this.startSelection, e);
  }
  toJSON() {
    var e, t, n;
    return {
      changes: (e = this.changes) === null || e === void 0 ? void 0 : e.toJSON(),
      mapped: (t = this.mapped) === null || t === void 0 ? void 0 : t.toJSON(),
      startSelection: (n = this.startSelection) === null || n === void 0 ? void 0 : n.toJSON(),
      selectionsAfter: this.selectionsAfter.map((r) => r.toJSON())
    };
  }
  static fromJSON(e) {
    return new Rt(e.changes && mi.fromJSON(e.changes), [], e.mapped && Kr.fromJSON(e.mapped), e.startSelection && C.fromJSON(e.startSelection), e.selectionsAfter.map(C.fromJSON));
  }
  // This does not check `addToHistory` and such, it assumes the
  // transaction needs to be converted to an item. Returns null when
  // there are no changes or effects in the transaction.
  static fromTransaction(e, t) {
    let n = Kt;
    for (let r of e.startState.facet(e_)) {
      let s = r(e);
      s.length && (n = n.concat(s));
    }
    return !n.length && e.changes.empty ? null : new Rt(e.changes.invert(e.startState.doc), n, void 0, t || e.startState.selection, Kt);
  }
  static selection(e) {
    return new Rt(void 0, Kt, void 0, void 0, e);
  }
}
function Th(i, e, t, n) {
  let r = e + 1 > t + 20 ? e - t - 1 : 0, s = i.slice(r, e);
  return s.push(n), s;
}
function r_(i, e) {
  let t = [], n = !1;
  return i.iterChangedRanges((r, s) => t.push(r, s)), e.iterChangedRanges((r, s, o, l) => {
    for (let a = 0; a < t.length; ) {
      let h = t[a++], c = t[a++];
      l >= h && o <= c && (n = !0);
    }
  }), n;
}
function s_(i, e) {
  return i.ranges.length == e.ranges.length && i.ranges.filter((t, n) => t.empty != e.ranges[n].empty).length === 0;
}
function wk(i, e) {
  return i.length ? e.length ? i.concat(e) : i : e;
}
const Kt = [], o_ = 200;
function kk(i, e) {
  if (i.length) {
    let t = i[i.length - 1], n = t.selectionsAfter.slice(Math.max(0, t.selectionsAfter.length - o_));
    return n.length && n[n.length - 1].eq(e) ? i : (n.push(e), Th(i, i.length - 1, 1e9, t.setSelAfter(n)));
  } else
    return [Rt.selection([e])];
}
function l_(i) {
  let e = i[i.length - 1], t = i.slice();
  return t[i.length - 1] = e.setSelAfter(e.selectionsAfter.slice(0, e.selectionsAfter.length - 1)), t;
}
function xf(i, e) {
  if (!i.length)
    return i;
  let t = i.length, n = Kt;
  for (; t; ) {
    let r = a_(i[t - 1], e, n);
    if (r.changes && !r.changes.empty || r.effects.length) {
      let s = i.slice(0, t);
      return s[t - 1] = r, s;
    } else
      e = r.mapped, t--, n = r.selectionsAfter;
  }
  return n.length ? [Rt.selection(n)] : Kt;
}
function a_(i, e, t) {
  let n = wk(i.selectionsAfter.length ? i.selectionsAfter.map((l) => l.map(e)) : Kt, t);
  if (!i.changes)
    return Rt.selection(n);
  let r = i.changes.map(e), s = e.mapDesc(i.changes, !0), o = i.mapped ? i.mapped.composeDesc(s) : s;
  return new Rt(r, le.mapEffects(i.effects, e), o, i.startSelection.map(s), n);
}
const h_ = /^(input\.type|delete)($|\.)/;
class Ii {
  constructor(e, t, n = 0, r = void 0) {
    this.done = e, this.undone = t, this.prevTime = n, this.prevUserEvent = r;
  }
  isolate() {
    return this.prevTime ? new Ii(this.done, this.undone) : this;
  }
  addChanges(e, t, n, r, s) {
    let o = this.done, l = o[o.length - 1];
    return l && l.changes && !l.changes.empty && e.changes && (!n || h_.test(n)) && (!l.selectionsAfter.length && t - this.prevTime < r.newGroupDelay && r.joinToEvent(s, r_(l.changes, e.changes)) || // For compose (but not compose.start) events, always join with previous event
    n == "input.type.compose") ? o = Th(o, o.length - 1, r.minDepth, new Rt(e.changes.compose(l.changes), wk(le.mapEffects(e.effects, l.changes), l.effects), l.mapped, l.startSelection, Kt)) : o = Th(o, o.length, r.minDepth, e), new Ii(o, Kt, t, n);
  }
  addSelection(e, t, n, r) {
    let s = this.done.length ? this.done[this.done.length - 1].selectionsAfter : Kt;
    return s.length > 0 && t - this.prevTime < r && n == this.prevUserEvent && n && /^select($|\.)/.test(n) && s_(s[s.length - 1], e) ? this : new Ii(kk(this.done, e), this.undone, t, n);
  }
  addMapping(e) {
    return new Ii(xf(this.done, e), xf(this.undone, e), this.prevTime, this.prevUserEvent);
  }
  pop(e, t, n) {
    let r = e == 0 ? this.done : this.undone;
    if (r.length == 0)
      return null;
    let s = r[r.length - 1], o = s.selectionsAfter[0] || t.selection;
    if (n && s.selectionsAfter.length)
      return t.update({
        selection: s.selectionsAfter[s.selectionsAfter.length - 1],
        annotations: Vd.of({ side: e, rest: l_(r), selection: o }),
        userEvent: e == 0 ? "select.undo" : "select.redo",
        scrollIntoView: !0
      });
    if (s.changes) {
      let l = r.length == 1 ? Kt : r.slice(0, r.length - 1);
      return s.mapped && (l = xf(l, s.mapped)), t.update({
        changes: s.changes,
        selection: s.startSelection,
        effects: s.effects,
        annotations: Vd.of({ side: e, rest: l, selection: o }),
        filter: !1,
        userEvent: e == 0 ? "undo" : "redo",
        scrollIntoView: !0
      });
    } else
      return null;
  }
}
Ii.empty = /* @__PURE__ */ new Ii(Kt, Kt);
const c_ = [
  { key: "Mod-z", run: xk, preventDefault: !0 },
  { key: "Mod-y", mac: "Mod-Shift-z", run: Wd, preventDefault: !0 },
  { linux: "Ctrl-Shift-z", run: Wd, preventDefault: !0 },
  { key: "Mod-u", run: i_, preventDefault: !0 },
  { key: "Alt-u", mac: "Mod-Shift-u", run: n_, preventDefault: !0 }
];
function qs(i, e) {
  return C.create(i.ranges.map(e), i.mainIndex);
}
function en(i, e) {
  return i.update({ selection: e, scrollIntoView: !0, userEvent: "select" });
}
function Qi({ state: i, dispatch: e }, t) {
  let n = qs(i.selection, t);
  return n.eq(i.selection, !0) ? !1 : (e(en(i, n)), !0);
}
function bc(i, e) {
  return C.cursor(e ? i.to : i.from);
}
function vk(i, e) {
  return Qi(i, (t) => t.empty ? i.moveByChar(t, e) : bc(t, e));
}
function yt(i) {
  return i.textDirectionAt(i.state.selection.main.head) == Ce.LTR;
}
const Qk = (i) => vk(i, !yt(i)), Pk = (i) => vk(i, yt(i));
function $k(i, e) {
  return Qi(i, (t) => t.empty ? i.moveByGroup(t, e) : bc(t, e));
}
const f_ = (i) => $k(i, !yt(i)), u_ = (i) => $k(i, yt(i));
function d_(i, e, t) {
  if (e.type.prop(t))
    return !0;
  let n = e.to - e.from;
  return n && (n > 2 || /[^\s,.;:]/.test(i.sliceDoc(e.from, e.to))) || e.firstChild;
}
function xc(i, e, t) {
  let n = ye(i).resolveInner(e.head), r = t ? se.closedBy : se.openedBy;
  for (let a = e.head; ; ) {
    let h = t ? n.childAfter(a) : n.childBefore(a);
    if (!h)
      break;
    d_(i, h, r) ? n = h : a = t ? h.to : h.from;
  }
  let s = n.type.prop(r), o, l;
  return s && (o = t ? zi(i, n.from, 1) : zi(i, n.to, -1)) && o.matched ? l = t ? o.end.to : o.end.from : l = t ? n.to : n.from, C.cursor(l, t ? -1 : 1);
}
const O_ = (i) => Qi(i, (e) => xc(i.state, e, !yt(i))), p_ = (i) => Qi(i, (e) => xc(i.state, e, yt(i)));
function Tk(i, e) {
  return Qi(i, (t) => {
    if (!t.empty)
      return bc(t, e);
    let n = i.moveVertically(t, e);
    return n.head != t.head ? n : i.moveToLineBoundary(t, e);
  });
}
const Ck = (i) => Tk(i, !1), Rk = (i) => Tk(i, !0);
function Ak(i) {
  let e = i.scrollDOM.clientHeight < i.scrollDOM.scrollHeight - 2, t = 0, n = 0, r;
  if (e) {
    for (let s of i.state.facet(W.scrollMargins)) {
      let o = s(i);
      o?.top && (t = Math.max(o?.top, t)), o?.bottom && (n = Math.max(o?.bottom, n));
    }
    r = i.scrollDOM.clientHeight - t - n;
  } else
    r = (i.dom.ownerDocument.defaultView || window).innerHeight;
  return {
    marginTop: t,
    marginBottom: n,
    selfScroll: e,
    height: Math.max(i.defaultLineHeight, r - 5)
  };
}
function Ek(i, e) {
  let t = Ak(i), { state: n } = i, r = qs(n.selection, (o) => o.empty ? i.moveVertically(o, e, t.height) : bc(o, e));
  if (r.eq(n.selection))
    return !1;
  let s;
  if (t.selfScroll) {
    let o = i.coordsAtPos(n.selection.main.head), l = i.scrollDOM.getBoundingClientRect(), a = l.top + t.marginTop, h = l.bottom - t.marginBottom;
    o && o.top > a && o.bottom < h && (s = W.scrollIntoView(r.main.head, { y: "start", yMargin: o.top - a }));
  }
  return i.dispatch(en(n, r), { effects: s }), !0;
}
const z0 = (i) => Ek(i, !1), zd = (i) => Ek(i, !0);
function Gn(i, e, t) {
  let n = i.lineBlockAt(e.head), r = i.moveToLineBoundary(e, t);
  if (r.head == e.head && r.head != (t ? n.to : n.from) && (r = i.moveToLineBoundary(e, t, !1)), !t && r.head == n.from && n.length) {
    let s = /^\s*/.exec(i.state.sliceDoc(n.from, Math.min(n.from + 100, n.to)))[0].length;
    s && e.head != n.from + s && (r = C.cursor(n.from + s));
  }
  return r;
}
const m_ = (i) => Qi(i, (e) => Gn(i, e, !0)), g_ = (i) => Qi(i, (e) => Gn(i, e, !1)), y_ = (i) => Qi(i, (e) => Gn(i, e, !yt(i))), S_ = (i) => Qi(i, (e) => Gn(i, e, yt(i))), b_ = (i) => Qi(i, (e) => C.cursor(i.lineBlockAt(e.head).from, 1)), x_ = (i) => Qi(i, (e) => C.cursor(i.lineBlockAt(e.head).to, -1));
function w_(i, e, t) {
  let n = !1, r = qs(i.selection, (s) => {
    let o = zi(i, s.head, -1) || zi(i, s.head, 1) || s.head > 0 && zi(i, s.head - 1, 1) || s.head < i.doc.length && zi(i, s.head + 1, -1);
    if (!o || !o.end)
      return s;
    n = !0;
    let l = o.start.from == s.head ? o.end.to : o.end.from;
    return C.cursor(l);
  });
  return n ? (e(en(i, r)), !0) : !1;
}
const k_ = ({ state: i, dispatch: e }) => w_(i, e);
function ni(i, e) {
  let t = qs(i.state.selection, (n) => {
    let r = e(n);
    return C.range(n.anchor, r.head, r.goalColumn, r.bidiLevel || void 0);
  });
  return t.eq(i.state.selection) ? !1 : (i.dispatch(en(i.state, t)), !0);
}
function Mk(i, e) {
  return ni(i, (t) => i.moveByChar(t, e));
}
const qk = (i) => Mk(i, !yt(i)), _k = (i) => Mk(i, yt(i));
function Xk(i, e) {
  return ni(i, (t) => i.moveByGroup(t, e));
}
const v_ = (i) => Xk(i, !yt(i)), Q_ = (i) => Xk(i, yt(i)), P_ = (i) => ni(i, (e) => xc(i.state, e, !yt(i))), $_ = (i) => ni(i, (e) => xc(i.state, e, yt(i)));
function Lk(i, e) {
  return ni(i, (t) => i.moveVertically(t, e));
}
const Bk = (i) => Lk(i, !1), Zk = (i) => Lk(i, !0);
function Dk(i, e) {
  return ni(i, (t) => i.moveVertically(t, e, Ak(i).height));
}
const I0 = (i) => Dk(i, !1), N0 = (i) => Dk(i, !0), T_ = (i) => ni(i, (e) => Gn(i, e, !0)), C_ = (i) => ni(i, (e) => Gn(i, e, !1)), R_ = (i) => ni(i, (e) => Gn(i, e, !yt(i))), A_ = (i) => ni(i, (e) => Gn(i, e, yt(i))), E_ = (i) => ni(i, (e) => C.cursor(i.lineBlockAt(e.head).from)), M_ = (i) => ni(i, (e) => C.cursor(i.lineBlockAt(e.head).to)), j0 = ({ state: i, dispatch: e }) => (e(en(i, { anchor: 0 })), !0), U0 = ({ state: i, dispatch: e }) => (e(en(i, { anchor: i.doc.length })), !0), Y0 = ({ state: i, dispatch: e }) => (e(en(i, { anchor: i.selection.main.anchor, head: 0 })), !0), G0 = ({ state: i, dispatch: e }) => (e(en(i, { anchor: i.selection.main.anchor, head: i.doc.length })), !0), q_ = ({ state: i, dispatch: e }) => (e(i.update({ selection: { anchor: 0, head: i.doc.length }, userEvent: "select" })), !0), __ = ({ state: i, dispatch: e }) => {
  let t = wc(i).map(({ from: n, to: r }) => C.range(n, Math.min(r + 1, i.doc.length)));
  return e(i.update({ selection: C.create(t), userEvent: "select" })), !0;
}, X_ = ({ state: i, dispatch: e }) => {
  let t = qs(i.selection, (n) => {
    let r = ye(i), s = r.resolveStack(n.from, 1);
    if (n.empty) {
      let o = r.resolveStack(n.from, -1);
      o.node.from >= s.node.from && o.node.to <= s.node.to && (s = o);
    }
    for (let o = s; o; o = o.next) {
      let { node: l } = o;
      if ((l.from < n.from && l.to >= n.to || l.to > n.to && l.from <= n.from) && o.next)
        return C.range(l.to, l.from);
    }
    return n;
  });
  return t.eq(i.selection) ? !1 : (e(en(i, t)), !0);
}, L_ = ({ state: i, dispatch: e }) => {
  let t = i.selection, n = null;
  return t.ranges.length > 1 ? n = C.create([t.main]) : t.main.empty || (n = C.create([C.cursor(t.main.head)])), n ? (e(en(i, n)), !0) : !1;
};
function $l(i, e) {
  if (i.state.readOnly)
    return !1;
  let t = "delete.selection", { state: n } = i, r = n.changeByRange((s) => {
    let { from: o, to: l } = s;
    if (o == l) {
      let a = e(s);
      a < o ? (t = "delete.backward", a = ra(i, a, !1)) : a > o && (t = "delete.forward", a = ra(i, a, !0)), o = Math.min(o, a), l = Math.max(l, a);
    } else
      o = ra(i, o, !1), l = ra(i, l, !0);
    return o == l ? { range: s } : { changes: { from: o, to: l }, range: C.cursor(o, o < s.head ? -1 : 1) };
  });
  return r.changes.empty ? !1 : (i.dispatch(n.update(r, {
    scrollIntoView: !0,
    userEvent: t,
    effects: t == "delete.selection" ? W.announce.of(n.phrase("Selection deleted")) : void 0
  })), !0);
}
function ra(i, e, t) {
  if (i instanceof W)
    for (let n of i.state.facet(W.atomicRanges).map((r) => r(i)))
      n.between(e, e, (r, s) => {
        r < e && s > e && (e = t ? s : r);
      });
  return e;
}
const Vk = (i, e, t) => $l(i, (n) => {
  let r = n.from, { state: s } = i, o = s.doc.lineAt(r), l, a;
  if (t && !e && r > o.from && r < o.from + 200 && !/[^ \t]/.test(l = o.text.slice(0, r - o.from))) {
    if (l[l.length - 1] == "	")
      return r - 1;
    let h = gi(l, s.tabSize), c = h % Qh(s) || Qh(s);
    for (let f = 0; f < c && l[l.length - 1 - f] == " "; f++)
      r--;
    a = r;
  } else
    a = ot(o.text, r - o.from, e, e) + o.from, a == r && o.number != (e ? s.doc.lines : 1) ? a += e ? 1 : -1 : !e && /[\ufe00-\ufe0f]/.test(o.text.slice(a - o.from, r - o.from)) && (a = ot(o.text, a - o.from, !1, !1) + o.from);
  return a;
}), Id = (i) => Vk(i, !1, !0), Wk = (i) => Vk(i, !0, !1), zk = (i, e) => $l(i, (t) => {
  let n = t.head, { state: r } = i, s = r.doc.lineAt(n), o = r.charCategorizer(n);
  for (let l = null; ; ) {
    if (n == (e ? s.to : s.from)) {
      n == t.head && s.number != (e ? r.doc.lines : 1) && (n += e ? 1 : -1);
      break;
    }
    let a = ot(s.text, n - s.from, e) + s.from, h = s.text.slice(Math.min(n, a) - s.from, Math.max(n, a) - s.from), c = o(h);
    if (l != null && c != l)
      break;
    (h != " " || n != t.head) && (l = c), n = a;
  }
  return n;
}), Ik = (i) => zk(i, !1), B_ = (i) => zk(i, !0), Z_ = (i) => $l(i, (e) => {
  let t = i.lineBlockAt(e.head).to;
  return e.head < t ? t : Math.min(i.state.doc.length, e.head + 1);
}), D_ = (i) => $l(i, (e) => {
  let t = i.moveToLineBoundary(e, !1).head;
  return e.head > t ? t : Math.max(0, e.head - 1);
}), V_ = (i) => $l(i, (e) => {
  let t = i.moveToLineBoundary(e, !0).head;
  return e.head < t ? t : Math.min(i.state.doc.length, e.head + 1);
}), W_ = ({ state: i, dispatch: e }) => {
  if (i.readOnly)
    return !1;
  let t = i.changeByRange((n) => ({
    changes: { from: n.from, to: n.to, insert: me.of(["", ""]) },
    range: C.cursor(n.from)
  }));
  return e(i.update(t, { scrollIntoView: !0, userEvent: "input" })), !0;
}, z_ = ({ state: i, dispatch: e }) => {
  if (i.readOnly)
    return !1;
  let t = i.changeByRange((n) => {
    if (!n.empty || n.from == 0 || n.from == i.doc.length)
      return { range: n };
    let r = n.from, s = i.doc.lineAt(r), o = r == s.from ? r - 1 : ot(s.text, r - s.from, !1) + s.from, l = r == s.to ? r + 1 : ot(s.text, r - s.from, !0) + s.from;
    return {
      changes: { from: o, to: l, insert: i.doc.slice(r, l).append(i.doc.slice(o, r)) },
      range: C.cursor(l)
    };
  });
  return t.changes.empty ? !1 : (e(i.update(t, { scrollIntoView: !0, userEvent: "move.character" })), !0);
};
function wc(i) {
  let e = [], t = -1;
  for (let n of i.selection.ranges) {
    let r = i.doc.lineAt(n.from), s = i.doc.lineAt(n.to);
    if (!n.empty && n.to == s.from && (s = i.doc.lineAt(n.to - 1)), t >= r.number) {
      let o = e[e.length - 1];
      o.to = s.to, o.ranges.push(n);
    } else
      e.push({ from: r.from, to: s.to, ranges: [n] });
    t = s.number + 1;
  }
  return e;
}
function Nk(i, e, t) {
  if (i.readOnly)
    return !1;
  let n = [], r = [];
  for (let s of wc(i)) {
    if (t ? s.to == i.doc.length : s.from == 0)
      continue;
    let o = i.doc.lineAt(t ? s.to + 1 : s.from - 1), l = o.length + 1;
    if (t) {
      n.push({ from: s.to, to: o.to }, { from: s.from, insert: o.text + i.lineBreak });
      for (let a of s.ranges)
        r.push(C.range(Math.min(i.doc.length, a.anchor + l), Math.min(i.doc.length, a.head + l)));
    } else {
      n.push({ from: o.from, to: s.from }, { from: s.to, insert: i.lineBreak + o.text });
      for (let a of s.ranges)
        r.push(C.range(a.anchor - l, a.head - l));
    }
  }
  return n.length ? (e(i.update({
    changes: n,
    scrollIntoView: !0,
    selection: C.create(r, i.selection.mainIndex),
    userEvent: "move.line"
  })), !0) : !1;
}
const I_ = ({ state: i, dispatch: e }) => Nk(i, e, !1), N_ = ({ state: i, dispatch: e }) => Nk(i, e, !0);
function jk(i, e, t) {
  if (i.readOnly)
    return !1;
  let n = [];
  for (let r of wc(i))
    t ? n.push({ from: r.from, insert: i.doc.slice(r.from, r.to) + i.lineBreak }) : n.push({ from: r.to, insert: i.lineBreak + i.doc.slice(r.from, r.to) });
  return e(i.update({ changes: n, scrollIntoView: !0, userEvent: "input.copyline" })), !0;
}
const j_ = ({ state: i, dispatch: e }) => jk(i, e, !1), U_ = ({ state: i, dispatch: e }) => jk(i, e, !0), Y_ = (i) => {
  if (i.state.readOnly)
    return !1;
  let { state: e } = i, t = e.changes(wc(e).map(({ from: r, to: s }) => (r > 0 ? r-- : s < e.doc.length && s++, { from: r, to: s }))), n = qs(e.selection, (r) => {
    let s;
    if (i.lineWrapping) {
      let o = i.lineBlockAt(r.head), l = i.coordsAtPos(r.head, r.assoc || 1);
      l && (s = o.bottom + i.documentTop - l.bottom + i.defaultLineHeight / 2);
    }
    return i.moveVertically(r, !0, s);
  }).map(t);
  return i.dispatch({ changes: t, selection: n, scrollIntoView: !0, userEvent: "delete.line" }), !0;
};
function G_(i, e) {
  if (/\(\)|\[\]|\{\}/.test(i.sliceDoc(e - 1, e + 1)))
    return { from: e, to: e };
  let t = ye(i).resolveInner(e), n = t.childBefore(e), r = t.childAfter(e), s;
  return n && r && n.to <= e && r.from >= e && (s = n.type.prop(se.closedBy)) && s.indexOf(r.name) > -1 && i.doc.lineAt(n.to).from == i.doc.lineAt(r.from).from && !/\S/.test(i.sliceDoc(n.to, r.from)) ? { from: n.to, to: r.from } : null;
}
const F0 = /* @__PURE__ */ Uk(!1), F_ = /* @__PURE__ */ Uk(!0);
function Uk(i) {
  return ({ state: e, dispatch: t }) => {
    if (e.readOnly)
      return !1;
    let n = e.changeByRange((r) => {
      let { from: s, to: o } = r, l = e.doc.lineAt(s), a = !i && s == o && G_(e, s);
      i && (s = o = (o <= l.to ? l : e.doc.lineAt(o)).to);
      let h = new gc(e, { simulateBreak: s, simulateDoubleBreak: !!a }), c = Lp(h, s);
      for (c == null && (c = gi(/^\s*/.exec(e.doc.lineAt(s).text)[0], e.tabSize)); o < l.to && /\s/.test(l.text[o - l.from]); )
        o++;
      a ? { from: s, to: o } = a : s > l.from && s < l.from + 100 && !/\S/.test(l.text.slice(0, s)) && (s = l.from);
      let f = ["", Yo(e, c)];
      return a && f.push(Yo(e, h.lineIndent(l.from, -1))), {
        changes: { from: s, to: o, insert: me.of(f) },
        range: C.cursor(s + 1 + f[1].length)
      };
    });
    return t(e.update(n, { scrollIntoView: !0, userEvent: "input" })), !0;
  };
}
function Wp(i, e) {
  let t = -1;
  return i.changeByRange((n) => {
    let r = [];
    for (let o = n.from; o <= n.to; ) {
      let l = i.doc.lineAt(o);
      l.number > t && (n.empty || n.to > l.from) && (e(l, r, n), t = l.number), o = l.to + 1;
    }
    let s = i.changes(r);
    return {
      changes: r,
      range: C.range(s.mapPos(n.anchor, 1), s.mapPos(n.head, 1))
    };
  });
}
const H_ = ({ state: i, dispatch: e }) => {
  if (i.readOnly)
    return !1;
  let t = /* @__PURE__ */ Object.create(null), n = new gc(i, { overrideIndentation: (s) => {
    let o = t[s];
    return o ?? -1;
  } }), r = Wp(i, (s, o, l) => {
    let a = Lp(n, s.from);
    if (a == null)
      return;
    /\S/.test(s.text) || (a = 0);
    let h = /^\s*/.exec(s.text)[0], c = Yo(i, a);
    (h != c || l.from < s.from + h.length) && (t[s.from] = a, o.push({ from: s.from, to: s.from + h.length, insert: c }));
  });
  return r.changes.empty || e(i.update(r, { userEvent: "indent" })), !0;
}, K_ = ({ state: i, dispatch: e }) => i.readOnly ? !1 : (e(i.update(Wp(i, (t, n) => {
  n.push({ from: t.from, insert: i.facet(vl) });
}), { userEvent: "input.indent" })), !0), J_ = ({ state: i, dispatch: e }) => i.readOnly ? !1 : (e(i.update(Wp(i, (t, n) => {
  let r = /^\s*/.exec(t.text)[0];
  if (!r)
    return;
  let s = gi(r, i.tabSize), o = 0, l = Yo(i, Math.max(0, s - Qh(i)));
  for (; o < r.length && o < l.length && r.charCodeAt(o) == l.charCodeAt(o); )
    o++;
  n.push({ from: t.from + o, to: t.from + r.length, insert: l.slice(o) });
}), { userEvent: "delete.dedent" })), !0), eX = (i) => (i.setTabFocusMode(), !0), tX = [
  { key: "Ctrl-b", run: Qk, shift: qk, preventDefault: !0 },
  { key: "Ctrl-f", run: Pk, shift: _k },
  { key: "Ctrl-p", run: Ck, shift: Bk },
  { key: "Ctrl-n", run: Rk, shift: Zk },
  { key: "Ctrl-a", run: b_, shift: E_ },
  { key: "Ctrl-e", run: x_, shift: M_ },
  { key: "Ctrl-d", run: Wk },
  { key: "Ctrl-h", run: Id },
  { key: "Ctrl-k", run: Z_ },
  { key: "Ctrl-Alt-h", run: Ik },
  { key: "Ctrl-o", run: W_ },
  { key: "Ctrl-t", run: z_ },
  { key: "Ctrl-v", run: zd }
], iX = /* @__PURE__ */ [
  { key: "ArrowLeft", run: Qk, shift: qk, preventDefault: !0 },
  { key: "Mod-ArrowLeft", mac: "Alt-ArrowLeft", run: f_, shift: v_, preventDefault: !0 },
  { mac: "Cmd-ArrowLeft", run: y_, shift: R_, preventDefault: !0 },
  { key: "ArrowRight", run: Pk, shift: _k, preventDefault: !0 },
  { key: "Mod-ArrowRight", mac: "Alt-ArrowRight", run: u_, shift: Q_, preventDefault: !0 },
  { mac: "Cmd-ArrowRight", run: S_, shift: A_, preventDefault: !0 },
  { key: "ArrowUp", run: Ck, shift: Bk, preventDefault: !0 },
  { mac: "Cmd-ArrowUp", run: j0, shift: Y0 },
  { mac: "Ctrl-ArrowUp", run: z0, shift: I0 },
  { key: "ArrowDown", run: Rk, shift: Zk, preventDefault: !0 },
  { mac: "Cmd-ArrowDown", run: U0, shift: G0 },
  { mac: "Ctrl-ArrowDown", run: zd, shift: N0 },
  { key: "PageUp", run: z0, shift: I0 },
  { key: "PageDown", run: zd, shift: N0 },
  { key: "Home", run: g_, shift: C_, preventDefault: !0 },
  { key: "Mod-Home", run: j0, shift: Y0 },
  { key: "End", run: m_, shift: T_, preventDefault: !0 },
  { key: "Mod-End", run: U0, shift: G0 },
  { key: "Enter", run: F0, shift: F0 },
  { key: "Mod-a", run: q_ },
  { key: "Backspace", run: Id, shift: Id },
  { key: "Delete", run: Wk },
  { key: "Mod-Backspace", mac: "Alt-Backspace", run: Ik },
  { key: "Mod-Delete", mac: "Alt-Delete", run: B_ },
  { mac: "Mod-Backspace", run: D_ },
  { mac: "Mod-Delete", run: V_ }
].concat(/* @__PURE__ */ tX.map((i) => ({ mac: i.key, run: i.run, shift: i.shift }))), nX = /* @__PURE__ */ [
  { key: "Alt-ArrowLeft", mac: "Ctrl-ArrowLeft", run: O_, shift: P_ },
  { key: "Alt-ArrowRight", mac: "Ctrl-ArrowRight", run: p_, shift: $_ },
  { key: "Alt-ArrowUp", run: I_ },
  { key: "Shift-Alt-ArrowUp", run: j_ },
  { key: "Alt-ArrowDown", run: N_ },
  { key: "Shift-Alt-ArrowDown", run: U_ },
  { key: "Escape", run: L_ },
  { key: "Mod-Enter", run: F_ },
  { key: "Alt-l", mac: "Ctrl-l", run: __ },
  { key: "Mod-i", run: X_, preventDefault: !0 },
  { key: "Mod-[", run: J_ },
  { key: "Mod-]", run: K_ },
  { key: "Mod-Alt-\\", run: H_ },
  { key: "Shift-Mod-k", run: Y_ },
  { key: "Shift-Mod-\\", run: k_ },
  { key: "Mod-/", run: jq },
  { key: "Alt-A", run: Yq },
  { key: "Ctrl-m", mac: "Shift-Alt-m", run: eX }
].concat(iX), H0 = typeof String.prototype.normalize == "function" ? (i) => i.normalize("NFKD") : (i) => i;
class ms {
  /**
  Create a text cursor. The query is the search string, `from` to
  `to` provides the region to search.
  
  When `normalize` is given, it will be called, on both the query
  string and the content it is matched against, before comparing.
  You can, for example, create a case-insensitive search by
  passing `s => s.toLowerCase()`.
  
  Text is always normalized with
  [`.normalize("NFKD")`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize)
  (when supported).
  */
  constructor(e, t, n = 0, r = e.length, s, o) {
    this.test = o, this.value = { from: 0, to: 0 }, this.done = !1, this.matches = [], this.buffer = "", this.bufferPos = 0, this.iter = e.iterRange(n, r), this.bufferStart = n, this.normalize = s ? (l) => s(H0(l)) : H0, this.query = this.normalize(t);
  }
  peek() {
    if (this.bufferPos == this.buffer.length) {
      if (this.bufferStart += this.buffer.length, this.iter.next(), this.iter.done)
        return -1;
      this.bufferPos = 0, this.buffer = this.iter.value;
    }
    return Pt(this.buffer, this.bufferPos);
  }
  /**
  Look for the next match. Updates the iterator's
  [`value`](https://codemirror.net/6/docs/ref/#search.SearchCursor.value) and
  [`done`](https://codemirror.net/6/docs/ref/#search.SearchCursor.done) properties. Should be called
  at least once before using the cursor.
  */
  next() {
    for (; this.matches.length; )
      this.matches.pop();
    return this.nextOverlapping();
  }
  /**
  The `next` method will ignore matches that partially overlap a
  previous match. This method behaves like `next`, but includes
  such matches.
  */
  nextOverlapping() {
    for (; ; ) {
      let e = this.peek();
      if (e < 0)
        return this.done = !0, this;
      let t = pp(e), n = this.bufferStart + this.bufferPos;
      this.bufferPos += Di(e);
      let r = this.normalize(t);
      if (r.length)
        for (let s = 0, o = n; ; s++) {
          let l = r.charCodeAt(s), a = this.match(l, o, this.bufferPos + this.bufferStart);
          if (s == r.length - 1) {
            if (a)
              return this.value = a, this;
            break;
          }
          o == n && s < t.length && t.charCodeAt(s) == l && o++;
        }
    }
  }
  match(e, t, n) {
    let r = null;
    for (let s = 0; s < this.matches.length; s += 2) {
      let o = this.matches[s], l = !1;
      this.query.charCodeAt(o) == e && (o == this.query.length - 1 ? r = { from: this.matches[s + 1], to: n } : (this.matches[s]++, l = !0)), l || (this.matches.splice(s, 2), s -= 2);
    }
    return this.query.charCodeAt(0) == e && (this.query.length == 1 ? r = { from: t, to: n } : this.matches.push(1, t)), r && this.test && !this.test(r.from, r.to, this.buffer, this.bufferStart) && (r = null), r;
  }
}
typeof Symbol < "u" && (ms.prototype[Symbol.iterator] = function() {
  return this;
});
const Yk = { from: -1, to: -1, match: /* @__PURE__ */ /.*/.exec("") }, zp = "gm" + (/x/.unicode == null ? "" : "u");
class Gk {
  /**
  Create a cursor that will search the given range in the given
  document. `query` should be the raw pattern (as you'd pass it to
  `new RegExp`).
  */
  constructor(e, t, n, r = 0, s = e.length) {
    if (this.text = e, this.to = s, this.curLine = "", this.done = !1, this.value = Yk, /\\[sWDnr]|\n|\r|\[\^/.test(t))
      return new Fk(e, t, n, r, s);
    this.re = new RegExp(t, zp + (n?.ignoreCase ? "i" : "")), this.test = n?.test, this.iter = e.iter();
    let o = e.lineAt(r);
    this.curLineStart = o.from, this.matchPos = Ch(e, r), this.getLine(this.curLineStart);
  }
  getLine(e) {
    this.iter.next(e), this.iter.lineBreak ? this.curLine = "" : (this.curLine = this.iter.value, this.curLineStart + this.curLine.length > this.to && (this.curLine = this.curLine.slice(0, this.to - this.curLineStart)), this.iter.next());
  }
  nextLine() {
    this.curLineStart = this.curLineStart + this.curLine.length + 1, this.curLineStart > this.to ? this.curLine = "" : this.getLine(0);
  }
  /**
  Move to the next match, if there is one.
  */
  next() {
    for (let e = this.matchPos - this.curLineStart; ; ) {
      this.re.lastIndex = e;
      let t = this.matchPos <= this.to && this.re.exec(this.curLine);
      if (t) {
        let n = this.curLineStart + t.index, r = n + t[0].length;
        if (this.matchPos = Ch(this.text, r + (n == r ? 1 : 0)), n == this.curLineStart + this.curLine.length && this.nextLine(), (n < r || n > this.value.to) && (!this.test || this.test(n, r, t)))
          return this.value = { from: n, to: r, match: t }, this;
        e = this.matchPos - this.curLineStart;
      } else if (this.curLineStart + this.curLine.length < this.to)
        this.nextLine(), e = 0;
      else
        return this.done = !0, this;
    }
  }
}
const wf = /* @__PURE__ */ new WeakMap();
class rs {
  constructor(e, t) {
    this.from = e, this.text = t;
  }
  get to() {
    return this.from + this.text.length;
  }
  static get(e, t, n) {
    let r = wf.get(e);
    if (!r || r.from >= n || r.to <= t) {
      let l = new rs(t, e.sliceString(t, n));
      return wf.set(e, l), l;
    }
    if (r.from == t && r.to == n)
      return r;
    let { text: s, from: o } = r;
    return o > t && (s = e.sliceString(t, o) + s, o = t), r.to < n && (s += e.sliceString(r.to, n)), wf.set(e, new rs(o, s)), new rs(t, s.slice(t - o, n - o));
  }
}
class Fk {
  constructor(e, t, n, r, s) {
    this.text = e, this.to = s, this.done = !1, this.value = Yk, this.matchPos = Ch(e, r), this.re = new RegExp(t, zp + (n?.ignoreCase ? "i" : "")), this.test = n?.test, this.flat = rs.get(e, r, this.chunkEnd(
      r + 5e3
      /* Chunk.Base */
    ));
  }
  chunkEnd(e) {
    return e >= this.to ? this.to : this.text.lineAt(e).to;
  }
  next() {
    for (; ; ) {
      let e = this.re.lastIndex = this.matchPos - this.flat.from, t = this.re.exec(this.flat.text);
      if (t && !t[0] && t.index == e && (this.re.lastIndex = e + 1, t = this.re.exec(this.flat.text)), t) {
        let n = this.flat.from + t.index, r = n + t[0].length;
        if ((this.flat.to >= this.to || t.index + t[0].length <= this.flat.text.length - 10) && (!this.test || this.test(n, r, t)))
          return this.value = { from: n, to: r, match: t }, this.matchPos = Ch(this.text, r + (n == r ? 1 : 0)), this;
      }
      if (this.flat.to == this.to)
        return this.done = !0, this;
      this.flat = rs.get(this.text, this.flat.from, this.chunkEnd(this.flat.from + this.flat.text.length * 2));
    }
  }
}
typeof Symbol < "u" && (Gk.prototype[Symbol.iterator] = Fk.prototype[Symbol.iterator] = function() {
  return this;
});
function rX(i) {
  try {
    return new RegExp(i, zp), !0;
  } catch {
    return !1;
  }
}
function Ch(i, e) {
  if (e >= i.length)
    return e;
  let t = i.lineAt(e), n;
  for (; e < t.to && (n = t.text.charCodeAt(e - t.from)) >= 56320 && n < 57344; )
    e++;
  return e;
}
function Nd(i) {
  let e = String(i.state.doc.lineAt(i.state.selection.main.head).number), t = we("input", { class: "cm-textfield", name: "line", value: e }), n = we("form", {
    class: "cm-gotoLine",
    onkeydown: (s) => {
      s.keyCode == 27 ? (s.preventDefault(), i.dispatch({ effects: $o.of(!1) }), i.focus()) : s.keyCode == 13 && (s.preventDefault(), r());
    },
    onsubmit: (s) => {
      s.preventDefault(), r();
    }
  }, we("label", i.state.phrase("Go to line"), ": ", t), " ", we("button", { class: "cm-button", type: "submit" }, i.state.phrase("go")), we("button", {
    name: "close",
    onclick: () => {
      i.dispatch({ effects: $o.of(!1) }), i.focus();
    },
    "aria-label": i.state.phrase("close"),
    type: "button"
  }, ["×"]));
  function r() {
    let s = /^([+-])?(\d+)?(:\d+)?(%)?$/.exec(t.value);
    if (!s)
      return;
    let { state: o } = i, l = o.doc.lineAt(o.selection.main.head), [, a, h, c, f] = s, u = c ? +c.slice(1) : 0, d = h ? +h : l.number;
    if (h && f) {
      let m = d / 100;
      a && (m = m * (a == "-" ? -1 : 1) + l.number / o.doc.lines), d = Math.round(o.doc.lines * m);
    } else h && a && (d = d * (a == "-" ? -1 : 1) + l.number);
    let O = o.doc.line(Math.max(1, Math.min(o.doc.lines, d))), p = C.cursor(O.from + Math.max(0, Math.min(u, O.length)));
    i.dispatch({
      effects: [$o.of(!1), W.scrollIntoView(p.from, { y: "center" })],
      selection: p
    }), i.focus();
  }
  return { dom: n };
}
const $o = /* @__PURE__ */ le.define(), K0 = /* @__PURE__ */ gt.define({
  create() {
    return !0;
  },
  update(i, e) {
    for (let t of e.effects)
      t.is($o) && (i = t.value);
    return i;
  },
  provide: (i) => Io.from(i, (e) => e ? Nd : null)
}), sX = (i) => {
  let e = zo(i, Nd);
  if (!e) {
    let t = [$o.of(!0)];
    i.state.field(K0, !1) == null && t.push(le.appendConfig.of([K0, oX])), i.dispatch({ effects: t }), e = zo(i, Nd);
  }
  return e && e.dom.querySelector("input").select(), !0;
}, oX = /* @__PURE__ */ W.baseTheme({
  ".cm-panel.cm-gotoLine": {
    padding: "2px 6px 4px",
    position: "relative",
    "& label": { fontSize: "80%" },
    "& [name=close]": {
      position: "absolute",
      top: "0",
      bottom: "0",
      right: "4px",
      backgroundColor: "inherit",
      border: "none",
      font: "inherit",
      padding: "0"
    }
  }
}), lX = {
  highlightWordAroundCursor: !1,
  minSelectionLength: 1,
  maxMatches: 100,
  wholeWords: !1
}, aX = /* @__PURE__ */ I.define({
  combine(i) {
    return Ki(i, lX, {
      highlightWordAroundCursor: (e, t) => e || t,
      minSelectionLength: Math.min,
      maxMatches: Math.min
    });
  }
});
function hX(i) {
  return [OX, dX];
}
const cX = /* @__PURE__ */ K.mark({ class: "cm-selectionMatch" }), fX = /* @__PURE__ */ K.mark({ class: "cm-selectionMatch cm-selectionMatch-main" });
function J0(i, e, t, n) {
  return (t == 0 || i(e.sliceDoc(t - 1, t)) != Me.Word) && (n == e.doc.length || i(e.sliceDoc(n, n + 1)) != Me.Word);
}
function uX(i, e, t, n) {
  return i(e.sliceDoc(t, t + 1)) == Me.Word && i(e.sliceDoc(n - 1, n)) == Me.Word;
}
const dX = /* @__PURE__ */ at.fromClass(class {
  constructor(i) {
    this.decorations = this.getDeco(i);
  }
  update(i) {
    (i.selectionSet || i.docChanged || i.viewportChanged) && (this.decorations = this.getDeco(i.view));
  }
  getDeco(i) {
    let e = i.state.facet(aX), { state: t } = i, n = t.selection;
    if (n.ranges.length > 1)
      return K.none;
    let r = n.main, s, o = null;
    if (r.empty) {
      if (!e.highlightWordAroundCursor)
        return K.none;
      let a = t.wordAt(r.head);
      if (!a)
        return K.none;
      o = t.charCategorizer(r.head), s = t.sliceDoc(a.from, a.to);
    } else {
      let a = r.to - r.from;
      if (a < e.minSelectionLength || a > 200)
        return K.none;
      if (e.wholeWords) {
        if (s = t.sliceDoc(r.from, r.to), o = t.charCategorizer(r.head), !(J0(o, t, r.from, r.to) && uX(o, t, r.from, r.to)))
          return K.none;
      } else if (s = t.sliceDoc(r.from, r.to), !s)
        return K.none;
    }
    let l = [];
    for (let a of i.visibleRanges) {
      let h = new ms(t.doc, s, a.from, a.to);
      for (; !h.next().done; ) {
        let { from: c, to: f } = h.value;
        if ((!o || J0(o, t, c, f)) && (r.empty && c <= r.from && f >= r.to ? l.push(fX.range(c, f)) : (c >= r.to || f <= r.from) && l.push(cX.range(c, f)), l.length > e.maxMatches))
          return K.none;
      }
    }
    return K.set(l);
  }
}, {
  decorations: (i) => i.decorations
}), OX = /* @__PURE__ */ W.baseTheme({
  ".cm-selectionMatch": { backgroundColor: "#99ff7780" },
  ".cm-searchMatch .cm-selectionMatch": { backgroundColor: "transparent" }
}), pX = ({ state: i, dispatch: e }) => {
  let { selection: t } = i, n = C.create(t.ranges.map((r) => i.wordAt(r.head) || C.cursor(r.head)), t.mainIndex);
  return n.eq(t) ? !1 : (e(i.update({ selection: n })), !0);
};
function mX(i, e) {
  let { main: t, ranges: n } = i.selection, r = i.wordAt(t.head), s = r && r.from == t.from && r.to == t.to;
  for (let o = !1, l = new ms(i.doc, e, n[n.length - 1].to); ; )
    if (l.next(), l.done) {
      if (o)
        return null;
      l = new ms(i.doc, e, 0, Math.max(0, n[n.length - 1].from - 1)), o = !0;
    } else {
      if (o && n.some((a) => a.from == l.value.from))
        continue;
      if (s) {
        let a = i.wordAt(l.value.from);
        if (!a || a.from != l.value.from || a.to != l.value.to)
          continue;
      }
      return l.value;
    }
}
const gX = ({ state: i, dispatch: e }) => {
  let { ranges: t } = i.selection;
  if (t.some((s) => s.from === s.to))
    return pX({ state: i, dispatch: e });
  let n = i.sliceDoc(t[0].from, t[0].to);
  if (i.selection.ranges.some((s) => i.sliceDoc(s.from, s.to) != n))
    return !1;
  let r = mX(i, n);
  return r ? (e(i.update({
    selection: i.selection.addRange(C.range(r.from, r.to), !1),
    effects: W.scrollIntoView(r.to)
  })), !0) : !1;
}, _s = /* @__PURE__ */ I.define({
  combine(i) {
    return Ki(i, {
      top: !1,
      caseSensitive: !1,
      literal: !1,
      regexp: !1,
      wholeWord: !1,
      createPanel: (e) => new CX(e),
      scrollToMatch: (e) => W.scrollIntoView(e)
    });
  }
});
class Hk {
  /**
  Create a query object.
  */
  constructor(e) {
    this.search = e.search, this.caseSensitive = !!e.caseSensitive, this.literal = !!e.literal, this.regexp = !!e.regexp, this.replace = e.replace || "", this.valid = !!this.search && (!this.regexp || rX(this.search)), this.unquoted = this.unquote(this.search), this.wholeWord = !!e.wholeWord;
  }
  /**
  @internal
  */
  unquote(e) {
    return this.literal ? e : e.replace(/\\([nrt\\])/g, (t, n) => n == "n" ? `
` : n == "r" ? "\r" : n == "t" ? "	" : "\\");
  }
  /**
  Compare this query to another query.
  */
  eq(e) {
    return this.search == e.search && this.replace == e.replace && this.caseSensitive == e.caseSensitive && this.regexp == e.regexp && this.wholeWord == e.wholeWord;
  }
  /**
  @internal
  */
  create() {
    return this.regexp ? new xX(this) : new SX(this);
  }
  /**
  Get a search cursor for this query, searching through the given
  range in the given state.
  */
  getCursor(e, t = 0, n) {
    let r = e.doc ? e : Be.create({ doc: e });
    return n == null && (n = r.doc.length), this.regexp ? Dr(this, r, t, n) : Zr(this, r, t, n);
  }
}
let Kk = class {
  constructor(e) {
    this.spec = e;
  }
};
function Zr(i, e, t, n) {
  return new ms(e.doc, i.unquoted, t, n, i.caseSensitive ? void 0 : (r) => r.toLowerCase(), i.wholeWord ? yX(e.doc, e.charCategorizer(e.selection.main.head)) : void 0);
}
function yX(i, e) {
  return (t, n, r, s) => ((s > t || s + r.length < n) && (s = Math.max(0, t - 2), r = i.sliceString(s, Math.min(i.length, n + 2))), (e(Rh(r, t - s)) != Me.Word || e(Ah(r, t - s)) != Me.Word) && (e(Ah(r, n - s)) != Me.Word || e(Rh(r, n - s)) != Me.Word));
}
class SX extends Kk {
  constructor(e) {
    super(e);
  }
  nextMatch(e, t, n) {
    let r = Zr(this.spec, e, n, e.doc.length).nextOverlapping();
    if (r.done) {
      let s = Math.min(e.doc.length, t + this.spec.unquoted.length);
      r = Zr(this.spec, e, 0, s).nextOverlapping();
    }
    return r.done || r.value.from == t && r.value.to == n ? null : r.value;
  }
  // Searching in reverse is, rather than implementing an inverted search
  // cursor, done by scanning chunk after chunk forward.
  prevMatchInRange(e, t, n) {
    for (let r = n; ; ) {
      let s = Math.max(t, r - 1e4 - this.spec.unquoted.length), o = Zr(this.spec, e, s, r), l = null;
      for (; !o.nextOverlapping().done; )
        l = o.value;
      if (l)
        return l;
      if (s == t)
        return null;
      r -= 1e4;
    }
  }
  prevMatch(e, t, n) {
    let r = this.prevMatchInRange(e, 0, t);
    return r || (r = this.prevMatchInRange(e, Math.max(0, n - this.spec.unquoted.length), e.doc.length)), r && (r.from != t || r.to != n) ? r : null;
  }
  getReplacement(e) {
    return this.spec.unquote(this.spec.replace);
  }
  matchAll(e, t) {
    let n = Zr(this.spec, e, 0, e.doc.length), r = [];
    for (; !n.next().done; ) {
      if (r.length >= t)
        return null;
      r.push(n.value);
    }
    return r;
  }
  highlight(e, t, n, r) {
    let s = Zr(this.spec, e, Math.max(0, t - this.spec.unquoted.length), Math.min(n + this.spec.unquoted.length, e.doc.length));
    for (; !s.next().done; )
      r(s.value.from, s.value.to);
  }
}
function Dr(i, e, t, n) {
  return new Gk(e.doc, i.search, {
    ignoreCase: !i.caseSensitive,
    test: i.wholeWord ? bX(e.charCategorizer(e.selection.main.head)) : void 0
  }, t, n);
}
function Rh(i, e) {
  return i.slice(ot(i, e, !1), e);
}
function Ah(i, e) {
  return i.slice(e, ot(i, e));
}
function bX(i) {
  return (e, t, n) => !n[0].length || (i(Rh(n.input, n.index)) != Me.Word || i(Ah(n.input, n.index)) != Me.Word) && (i(Ah(n.input, n.index + n[0].length)) != Me.Word || i(Rh(n.input, n.index + n[0].length)) != Me.Word);
}
class xX extends Kk {
  nextMatch(e, t, n) {
    let r = Dr(this.spec, e, n, e.doc.length).next();
    return r.done && (r = Dr(this.spec, e, 0, t).next()), r.done ? null : r.value;
  }
  prevMatchInRange(e, t, n) {
    for (let r = 1; ; r++) {
      let s = Math.max(
        t,
        n - r * 1e4
        /* FindPrev.ChunkSize */
      ), o = Dr(this.spec, e, s, n), l = null;
      for (; !o.next().done; )
        l = o.value;
      if (l && (s == t || l.from > s + 10))
        return l;
      if (s == t)
        return null;
    }
  }
  prevMatch(e, t, n) {
    return this.prevMatchInRange(e, 0, t) || this.prevMatchInRange(e, n, e.doc.length);
  }
  getReplacement(e) {
    return this.spec.unquote(this.spec.replace).replace(/\$([$&]|\d+)/g, (t, n) => {
      if (n == "&")
        return e.match[0];
      if (n == "$")
        return "$";
      for (let r = n.length; r > 0; r--) {
        let s = +n.slice(0, r);
        if (s > 0 && s < e.match.length)
          return e.match[s] + n.slice(r);
      }
      return t;
    });
  }
  matchAll(e, t) {
    let n = Dr(this.spec, e, 0, e.doc.length), r = [];
    for (; !n.next().done; ) {
      if (r.length >= t)
        return null;
      r.push(n.value);
    }
    return r;
  }
  highlight(e, t, n, r) {
    let s = Dr(this.spec, e, Math.max(
      0,
      t - 250
      /* RegExp.HighlightMargin */
    ), Math.min(n + 250, e.doc.length));
    for (; !s.next().done; )
      r(s.value.from, s.value.to);
  }
}
const Go = /* @__PURE__ */ le.define(), Ip = /* @__PURE__ */ le.define(), Vn = /* @__PURE__ */ gt.define({
  create(i) {
    return new kf(jd(i).create(), null);
  },
  update(i, e) {
    for (let t of e.effects)
      t.is(Go) ? i = new kf(t.value.create(), i.panel) : t.is(Ip) && (i = new kf(i.query, t.value ? Np : null));
    return i;
  },
  provide: (i) => Io.from(i, (e) => e.panel)
});
class kf {
  constructor(e, t) {
    this.query = e, this.panel = t;
  }
}
const wX = /* @__PURE__ */ K.mark({ class: "cm-searchMatch" }), kX = /* @__PURE__ */ K.mark({ class: "cm-searchMatch cm-searchMatch-selected" }), vX = /* @__PURE__ */ at.fromClass(class {
  constructor(i) {
    this.view = i, this.decorations = this.highlight(i.state.field(Vn));
  }
  update(i) {
    let e = i.state.field(Vn);
    (e != i.startState.field(Vn) || i.docChanged || i.selectionSet || i.viewportChanged) && (this.decorations = this.highlight(e));
  }
  highlight({ query: i, panel: e }) {
    if (!e || !i.spec.valid)
      return K.none;
    let { view: t } = this, n = new vr();
    for (let r = 0, s = t.visibleRanges, o = s.length; r < o; r++) {
      let { from: l, to: a } = s[r];
      for (; r < o - 1 && a > s[r + 1].from - 2 * 250; )
        a = s[++r].to;
      i.highlight(t.state, l, a, (h, c) => {
        let f = t.state.selection.ranges.some((u) => u.from == h && u.to == c);
        n.add(h, c, f ? kX : wX);
      });
    }
    return n.finish();
  }
}, {
  decorations: (i) => i.decorations
});
function Tl(i) {
  return (e) => {
    let t = e.state.field(Vn, !1);
    return t && t.query.spec.valid ? i(e, t) : tv(e);
  };
}
const Eh = /* @__PURE__ */ Tl((i, { query: e }) => {
  let { to: t } = i.state.selection.main, n = e.nextMatch(i.state, t, t);
  if (!n)
    return !1;
  let r = C.single(n.from, n.to), s = i.state.facet(_s);
  return i.dispatch({
    selection: r,
    effects: [jp(i, n), s.scrollToMatch(r.main, i)],
    userEvent: "select.search"
  }), ev(i), !0;
}), Mh = /* @__PURE__ */ Tl((i, { query: e }) => {
  let { state: t } = i, { from: n } = t.selection.main, r = e.prevMatch(t, n, n);
  if (!r)
    return !1;
  let s = C.single(r.from, r.to), o = i.state.facet(_s);
  return i.dispatch({
    selection: s,
    effects: [jp(i, r), o.scrollToMatch(s.main, i)],
    userEvent: "select.search"
  }), ev(i), !0;
}), QX = /* @__PURE__ */ Tl((i, { query: e }) => {
  let t = e.matchAll(i.state, 1e3);
  return !t || !t.length ? !1 : (i.dispatch({
    selection: C.create(t.map((n) => C.range(n.from, n.to))),
    userEvent: "select.search.matches"
  }), !0);
}), PX = ({ state: i, dispatch: e }) => {
  let t = i.selection;
  if (t.ranges.length > 1 || t.main.empty)
    return !1;
  let { from: n, to: r } = t.main, s = [], o = 0;
  for (let l = new ms(i.doc, i.sliceDoc(n, r)); !l.next().done; ) {
    if (s.length > 1e3)
      return !1;
    l.value.from == n && (o = s.length), s.push(C.range(l.value.from, l.value.to));
  }
  return e(i.update({
    selection: C.create(s, o),
    userEvent: "select.search.matches"
  })), !0;
}, e1 = /* @__PURE__ */ Tl((i, { query: e }) => {
  let { state: t } = i, { from: n, to: r } = t.selection.main;
  if (t.readOnly)
    return !1;
  let s = e.nextMatch(t, n, n);
  if (!s)
    return !1;
  let o = s, l = [], a, h, c = [];
  o.from == n && o.to == r && (h = t.toText(e.getReplacement(o)), l.push({ from: o.from, to: o.to, insert: h }), o = e.nextMatch(t, o.from, o.to), c.push(W.announce.of(t.phrase("replaced match on line $", t.doc.lineAt(n).number) + ".")));
  let f = i.state.changes(l);
  return o && (a = C.single(o.from, o.to).map(f), c.push(jp(i, o)), c.push(t.facet(_s).scrollToMatch(a.main, i))), i.dispatch({
    changes: f,
    selection: a,
    effects: c,
    userEvent: "input.replace"
  }), !0;
}), $X = /* @__PURE__ */ Tl((i, { query: e }) => {
  if (i.state.readOnly)
    return !1;
  let t = e.matchAll(i.state, 1e9).map((r) => {
    let { from: s, to: o } = r;
    return { from: s, to: o, insert: e.getReplacement(r) };
  });
  if (!t.length)
    return !1;
  let n = i.state.phrase("replaced $ matches", t.length) + ".";
  return i.dispatch({
    changes: t,
    effects: W.announce.of(n),
    userEvent: "input.replace.all"
  }), !0;
});
function Np(i) {
  return i.state.facet(_s).createPanel(i);
}
function jd(i, e) {
  var t, n, r, s, o;
  let l = i.selection.main, a = l.empty || l.to > l.from + 100 ? "" : i.sliceDoc(l.from, l.to);
  if (e && !a)
    return e;
  let h = i.facet(_s);
  return new Hk({
    search: ((t = e?.literal) !== null && t !== void 0 ? t : h.literal) ? a : a.replace(/\n/g, "\\n"),
    caseSensitive: (n = e?.caseSensitive) !== null && n !== void 0 ? n : h.caseSensitive,
    literal: (r = e?.literal) !== null && r !== void 0 ? r : h.literal,
    regexp: (s = e?.regexp) !== null && s !== void 0 ? s : h.regexp,
    wholeWord: (o = e?.wholeWord) !== null && o !== void 0 ? o : h.wholeWord
  });
}
function Jk(i) {
  let e = zo(i, Np);
  return e && e.dom.querySelector("[main-field]");
}
function ev(i) {
  let e = Jk(i);
  e && e == i.root.activeElement && e.select();
}
const tv = (i) => {
  let e = i.state.field(Vn, !1);
  if (e && e.panel) {
    let t = Jk(i);
    if (t && t != i.root.activeElement) {
      let n = jd(i.state, e.query.spec);
      n.valid && i.dispatch({ effects: Go.of(n) }), t.focus(), t.select();
    }
  } else
    i.dispatch({ effects: [
      Ip.of(!0),
      e ? Go.of(jd(i.state, e.query.spec)) : le.appendConfig.of(AX)
    ] });
  return !0;
}, iv = (i) => {
  let e = i.state.field(Vn, !1);
  if (!e || !e.panel)
    return !1;
  let t = zo(i, Np);
  return t && t.dom.contains(i.root.activeElement) && i.focus(), i.dispatch({ effects: Ip.of(!1) }), !0;
}, TX = [
  { key: "Mod-f", run: tv, scope: "editor search-panel" },
  { key: "F3", run: Eh, shift: Mh, scope: "editor search-panel", preventDefault: !0 },
  { key: "Mod-g", run: Eh, shift: Mh, scope: "editor search-panel", preventDefault: !0 },
  { key: "Escape", run: iv, scope: "editor search-panel" },
  { key: "Mod-Shift-l", run: PX },
  { key: "Mod-Alt-g", run: sX },
  { key: "Mod-d", run: gX, preventDefault: !0 }
];
class CX {
  constructor(e) {
    this.view = e;
    let t = this.query = e.state.field(Vn).query.spec;
    this.commit = this.commit.bind(this), this.searchField = we("input", {
      value: t.search,
      placeholder: qt(e, "Find"),
      "aria-label": qt(e, "Find"),
      class: "cm-textfield",
      name: "search",
      form: "",
      "main-field": "true",
      onchange: this.commit,
      onkeyup: this.commit
    }), this.replaceField = we("input", {
      value: t.replace,
      placeholder: qt(e, "Replace"),
      "aria-label": qt(e, "Replace"),
      class: "cm-textfield",
      name: "replace",
      form: "",
      onchange: this.commit,
      onkeyup: this.commit
    }), this.caseField = we("input", {
      type: "checkbox",
      name: "case",
      form: "",
      checked: t.caseSensitive,
      onchange: this.commit
    }), this.reField = we("input", {
      type: "checkbox",
      name: "re",
      form: "",
      checked: t.regexp,
      onchange: this.commit
    }), this.wordField = we("input", {
      type: "checkbox",
      name: "word",
      form: "",
      checked: t.wholeWord,
      onchange: this.commit
    });
    function n(r, s, o) {
      return we("button", { class: "cm-button", name: r, onclick: s, type: "button" }, o);
    }
    this.dom = we("div", { onkeydown: (r) => this.keydown(r), class: "cm-search" }, [
      this.searchField,
      n("next", () => Eh(e), [qt(e, "next")]),
      n("prev", () => Mh(e), [qt(e, "previous")]),
      n("select", () => QX(e), [qt(e, "all")]),
      we("label", null, [this.caseField, qt(e, "match case")]),
      we("label", null, [this.reField, qt(e, "regexp")]),
      we("label", null, [this.wordField, qt(e, "by word")]),
      ...e.state.readOnly ? [] : [
        we("br"),
        this.replaceField,
        n("replace", () => e1(e), [qt(e, "replace")]),
        n("replaceAll", () => $X(e), [qt(e, "replace all")])
      ],
      we("button", {
        name: "close",
        onclick: () => iv(e),
        "aria-label": qt(e, "close"),
        type: "button"
      }, ["×"])
    ]);
  }
  commit() {
    let e = new Hk({
      search: this.searchField.value,
      caseSensitive: this.caseField.checked,
      regexp: this.reField.checked,
      wholeWord: this.wordField.checked,
      replace: this.replaceField.value
    });
    e.eq(this.query) || (this.query = e, this.view.dispatch({ effects: Go.of(e) }));
  }
  keydown(e) {
    L5(this.view, e, "search-panel") ? e.preventDefault() : e.keyCode == 13 && e.target == this.searchField ? (e.preventDefault(), (e.shiftKey ? Mh : Eh)(this.view)) : e.keyCode == 13 && e.target == this.replaceField && (e.preventDefault(), e1(this.view));
  }
  update(e) {
    for (let t of e.transactions)
      for (let n of t.effects)
        n.is(Go) && !n.value.eq(this.query) && this.setQuery(n.value);
  }
  setQuery(e) {
    this.query = e, this.searchField.value = e.search, this.replaceField.value = e.replace, this.caseField.checked = e.caseSensitive, this.reField.checked = e.regexp, this.wordField.checked = e.wholeWord;
  }
  mount() {
    this.searchField.select();
  }
  get pos() {
    return 80;
  }
  get top() {
    return this.view.state.facet(_s).top;
  }
}
function qt(i, e) {
  return i.state.phrase(e);
}
const sa = 30, oa = /[\s\.,:;?!]/;
function jp(i, { from: e, to: t }) {
  let n = i.state.doc.lineAt(e), r = i.state.doc.lineAt(t).to, s = Math.max(n.from, e - sa), o = Math.min(r, t + sa), l = i.state.sliceDoc(s, o);
  if (s != n.from) {
    for (let a = 0; a < sa; a++)
      if (!oa.test(l[a + 1]) && oa.test(l[a])) {
        l = l.slice(a);
        break;
      }
  }
  if (o != r) {
    for (let a = l.length - 1; a > l.length - sa; a--)
      if (!oa.test(l[a - 1]) && oa.test(l[a])) {
        l = l.slice(0, a);
        break;
      }
  }
  return W.announce.of(`${i.state.phrase("current match")}. ${l} ${i.state.phrase("on line")} ${n.number}.`);
}
const RX = /* @__PURE__ */ W.baseTheme({
  ".cm-panel.cm-search": {
    padding: "2px 6px 4px",
    position: "relative",
    "& [name=close]": {
      position: "absolute",
      top: "0",
      right: "4px",
      backgroundColor: "inherit",
      border: "none",
      font: "inherit",
      padding: 0,
      margin: 0
    },
    "& input, & button, & label": {
      margin: ".2em .6em .2em 0"
    },
    "& input[type=checkbox]": {
      marginRight: ".2em"
    },
    "& label": {
      fontSize: "80%",
      whiteSpace: "pre"
    }
  },
  "&light .cm-searchMatch": { backgroundColor: "#ffff0054" },
  "&dark .cm-searchMatch": { backgroundColor: "#00ffff8a" },
  "&light .cm-searchMatch-selected": { backgroundColor: "#ff6a0054" },
  "&dark .cm-searchMatch-selected": { backgroundColor: "#ff00ff8a" }
}), AX = [
  Vn,
  /* @__PURE__ */ bn.low(vX),
  RX
];
class Up {
  /**
  Create a new completion context. (Mostly useful for testing
  completion sources—in the editor, the extension will create
  these for you.)
  */
  constructor(e, t, n, r) {
    this.state = e, this.pos = t, this.explicit = n, this.view = r, this.abortListeners = [], this.abortOnDocChange = !1;
  }
  /**
  Get the extent, content, and (if there is a token) type of the
  token before `this.pos`.
  */
  tokenBefore(e) {
    let t = ye(this.state).resolveInner(this.pos, -1);
    for (; t && e.indexOf(t.name) < 0; )
      t = t.parent;
    return t ? {
      from: t.from,
      to: this.pos,
      text: this.state.sliceDoc(t.from, this.pos),
      type: t.type
    } : null;
  }
  /**
  Get the match of the given expression directly before the
  cursor.
  */
  matchBefore(e) {
    let t = this.state.doc.lineAt(this.pos), n = Math.max(t.from, this.pos - 250), r = t.text.slice(n - t.from, this.pos - t.from), s = r.search(nv(e, !1));
    return s < 0 ? null : { from: n + s, to: this.pos, text: r.slice(s) };
  }
  /**
  Yields true when the query has been aborted. Can be useful in
  asynchronous queries to avoid doing work that will be ignored.
  */
  get aborted() {
    return this.abortListeners == null;
  }
  /**
  Allows you to register abort handlers, which will be called when
  the query is
  [aborted](https://codemirror.net/6/docs/ref/#autocomplete.CompletionContext.aborted).
  
  By default, running queries will not be aborted for regular
  typing or backspacing, on the assumption that they are likely to
  return a result with a
  [`validFor`](https://codemirror.net/6/docs/ref/#autocomplete.CompletionResult.validFor) field that
  allows the result to be used after all. Passing `onDocChange:
  true` will cause this query to be aborted for any document
  change.
  */
  addEventListener(e, t, n) {
    e == "abort" && this.abortListeners && (this.abortListeners.push(t), n && n.onDocChange && (this.abortOnDocChange = !0));
  }
}
function t1(i) {
  let e = Object.keys(i).join(""), t = /\w/.test(e);
  return t && (e = e.replace(/\w/g, "")), `[${t ? "\\w" : ""}${e.replace(/[^\w\s]/g, "\\$&")}]`;
}
function EX(i) {
  let e = /* @__PURE__ */ Object.create(null), t = /* @__PURE__ */ Object.create(null);
  for (let { label: r } of i) {
    e[r[0]] = !0;
    for (let s = 1; s < r.length; s++)
      t[r[s]] = !0;
  }
  let n = t1(e) + t1(t) + "*$";
  return [new RegExp("^" + n), new RegExp(n)];
}
function kc(i) {
  let e = i.map((r) => typeof r == "string" ? { label: r } : r), [t, n] = e.every((r) => /^\w+$/.test(r.label)) ? [/\w*$/, /\w+$/] : EX(e);
  return (r) => {
    let s = r.matchBefore(n);
    return s || r.explicit ? { from: s ? s.from : r.pos, options: e, validFor: t } : null;
  };
}
function Yp(i, e) {
  return (t) => {
    for (let n = ye(t.state).resolveInner(t.pos, -1); n; n = n.parent) {
      if (i.indexOf(n.name) > -1)
        return null;
      if (n.type.isTop)
        break;
    }
    return e(t);
  };
}
class i1 {
  constructor(e, t, n, r) {
    this.completion = e, this.source = t, this.match = n, this.score = r;
  }
}
function pr(i) {
  return i.selection.main.from;
}
function nv(i, e) {
  var t;
  let { source: n } = i, r = e && n[0] != "^", s = n[n.length - 1] != "$";
  return !r && !s ? i : new RegExp(`${r ? "^" : ""}(?:${n})${s ? "$" : ""}`, (t = i.flags) !== null && t !== void 0 ? t : i.ignoreCase ? "i" : "");
}
const Gp = /* @__PURE__ */ xn.define();
function MX(i, e, t, n) {
  let { main: r } = i.selection, s = t - r.from, o = n - r.from;
  return Object.assign(Object.assign({}, i.changeByRange((l) => {
    if (l != r && t != n && i.sliceDoc(l.from + s, l.from + o) != i.sliceDoc(t, n))
      return { range: l };
    let a = i.toText(e);
    return {
      changes: { from: l.from + s, to: n == r.from ? l.to : l.from + o, insert: a },
      range: C.cursor(l.from + s + a.length)
    };
  })), { scrollIntoView: !0, userEvent: "input.complete" });
}
const n1 = /* @__PURE__ */ new WeakMap();
function qX(i) {
  if (!Array.isArray(i))
    return i;
  let e = n1.get(i);
  return e || n1.set(i, e = kc(i)), e;
}
const qh = /* @__PURE__ */ le.define(), Fo = /* @__PURE__ */ le.define();
class _X {
  constructor(e) {
    this.pattern = e, this.chars = [], this.folded = [], this.any = [], this.precise = [], this.byWord = [], this.score = 0, this.matched = [];
    for (let t = 0; t < e.length; ) {
      let n = Pt(e, t), r = Di(n);
      this.chars.push(n);
      let s = e.slice(t, t + r), o = s.toUpperCase();
      this.folded.push(Pt(o == s ? s.toLowerCase() : o, 0)), t += r;
    }
    this.astral = e.length != this.chars.length;
  }
  ret(e, t) {
    return this.score = e, this.matched = t, this;
  }
  // Matches a given word (completion) against the pattern (input).
  // Will return a boolean indicating whether there was a match and,
  // on success, set `this.score` to the score, `this.matched` to an
  // array of `from, to` pairs indicating the matched parts of `word`.
  //
  // The score is a number that is more negative the worse the match
  // is. See `Penalty` above.
  match(e) {
    if (this.pattern.length == 0)
      return this.ret(-100, []);
    if (e.length < this.pattern.length)
      return null;
    let { chars: t, folded: n, any: r, precise: s, byWord: o } = this;
    if (t.length == 1) {
      let S = Pt(e, 0), x = Di(S), k = x == e.length ? 0 : -100;
      if (S != t[0]) if (S == n[0])
        k += -200;
      else
        return null;
      return this.ret(k, [0, x]);
    }
    let l = e.indexOf(this.pattern);
    if (l == 0)
      return this.ret(e.length == this.pattern.length ? 0 : -100, [0, this.pattern.length]);
    let a = t.length, h = 0;
    if (l < 0) {
      for (let S = 0, x = Math.min(e.length, 200); S < x && h < a; ) {
        let k = Pt(e, S);
        (k == t[h] || k == n[h]) && (r[h++] = S), S += Di(k);
      }
      if (h < a)
        return null;
    }
    let c = 0, f = 0, u = !1, d = 0, O = -1, p = -1, m = /[a-z]/.test(e), g = !0;
    for (let S = 0, x = Math.min(e.length, 200), k = 0; S < x && f < a; ) {
      let w = Pt(e, S);
      l < 0 && (c < a && w == t[c] && (s[c++] = S), d < a && (w == t[d] || w == n[d] ? (d == 0 && (O = S), p = S + 1, d++) : d = 0));
      let b, Q = w < 255 ? w >= 48 && w <= 57 || w >= 97 && w <= 122 ? 2 : w >= 65 && w <= 90 ? 1 : 0 : (b = pp(w)) != b.toLowerCase() ? 1 : b != b.toUpperCase() ? 2 : 0;
      (!S || Q == 1 && m || k == 0 && Q != 0) && (t[f] == w || n[f] == w && (u = !0) ? o[f++] = S : o.length && (g = !1)), k = Q, S += Di(w);
    }
    return f == a && o[0] == 0 && g ? this.result(-100 + (u ? -200 : 0), o, e) : d == a && O == 0 ? this.ret(-200 - e.length + (p == e.length ? 0 : -100), [0, p]) : l > -1 ? this.ret(-700 - e.length, [l, l + this.pattern.length]) : d == a ? this.ret(-900 - e.length, [O, p]) : f == a ? this.result(-100 + (u ? -200 : 0) + -700 + (g ? 0 : -1100), o, e) : t.length == 2 ? null : this.result((r[0] ? -700 : 0) + -200 + -1100, r, e);
  }
  result(e, t, n) {
    let r = [], s = 0;
    for (let o of t) {
      let l = o + (this.astral ? Di(Pt(n, o)) : 1);
      s && r[s - 1] == o ? r[s - 1] = l : (r[s++] = o, r[s++] = l);
    }
    return this.ret(e - n.length, r);
  }
}
class XX {
  constructor(e) {
    this.pattern = e, this.matched = [], this.score = 0, this.folded = e.toLowerCase();
  }
  match(e) {
    if (e.length < this.pattern.length)
      return null;
    let t = e.slice(0, this.pattern.length), n = t == this.pattern ? 0 : t.toLowerCase() == this.folded ? -200 : null;
    return n == null ? null : (this.matched = [0, t.length], this.score = n + (e.length == this.pattern.length ? 0 : -100), this);
  }
}
const He = /* @__PURE__ */ I.define({
  combine(i) {
    return Ki(i, {
      activateOnTyping: !0,
      activateOnCompletion: () => !1,
      activateOnTypingDelay: 100,
      selectOnOpen: !0,
      override: null,
      closeOnBlur: !0,
      maxRenderedOptions: 100,
      defaultKeymap: !0,
      tooltipClass: () => "",
      optionClass: () => "",
      aboveCursor: !1,
      icons: !0,
      addToOptions: [],
      positionInfo: LX,
      filterStrict: !1,
      compareCompletions: (e, t) => e.label.localeCompare(t.label),
      interactionDelay: 75,
      updateSyncTime: 100
    }, {
      defaultKeymap: (e, t) => e && t,
      closeOnBlur: (e, t) => e && t,
      icons: (e, t) => e && t,
      tooltipClass: (e, t) => (n) => r1(e(n), t(n)),
      optionClass: (e, t) => (n) => r1(e(n), t(n)),
      addToOptions: (e, t) => e.concat(t),
      filterStrict: (e, t) => e || t
    });
  }
});
function r1(i, e) {
  return i ? e ? i + " " + e : i : e;
}
function LX(i, e, t, n, r, s) {
  let o = i.textDirection == Ce.RTL, l = o, a = !1, h = "top", c, f, u = e.left - r.left, d = r.right - e.right, O = n.right - n.left, p = n.bottom - n.top;
  if (l && u < Math.min(O, d) ? l = !1 : !l && d < Math.min(O, u) && (l = !0), O <= (l ? u : d))
    c = Math.max(r.top, Math.min(t.top, r.bottom - p)) - e.top, f = Math.min(400, l ? u : d);
  else {
    a = !0, f = Math.min(
      400,
      (o ? e.right : r.right - e.left) - 30
      /* Info.Margin */
    );
    let S = r.bottom - e.bottom;
    S >= p || S > e.top ? c = t.bottom - e.top : (h = "bottom", c = e.bottom - t.top);
  }
  let m = (e.bottom - e.top) / s.offsetHeight, g = (e.right - e.left) / s.offsetWidth;
  return {
    style: `${h}: ${c / m}px; max-width: ${f / g}px`,
    class: "cm-completionInfo-" + (a ? o ? "left-narrow" : "right-narrow" : l ? "left" : "right")
  };
}
function BX(i) {
  let e = i.addToOptions.slice();
  return i.icons && e.push({
    render(t) {
      let n = document.createElement("div");
      return n.classList.add("cm-completionIcon"), t.type && n.classList.add(...t.type.split(/\s+/g).map((r) => "cm-completionIcon-" + r)), n.setAttribute("aria-hidden", "true"), n;
    },
    position: 20
  }), e.push({
    render(t, n, r, s) {
      let o = document.createElement("span");
      o.className = "cm-completionLabel";
      let l = t.displayLabel || t.label, a = 0;
      for (let h = 0; h < s.length; ) {
        let c = s[h++], f = s[h++];
        c > a && o.appendChild(document.createTextNode(l.slice(a, c)));
        let u = o.appendChild(document.createElement("span"));
        u.appendChild(document.createTextNode(l.slice(c, f))), u.className = "cm-completionMatchedText", a = f;
      }
      return a < l.length && o.appendChild(document.createTextNode(l.slice(a))), o;
    },
    position: 50
  }, {
    render(t) {
      if (!t.detail)
        return null;
      let n = document.createElement("span");
      return n.className = "cm-completionDetail", n.textContent = t.detail, n;
    },
    position: 80
  }), e.sort((t, n) => t.position - n.position).map((t) => t.render);
}
function vf(i, e, t) {
  if (i <= t)
    return { from: 0, to: i };
  if (e < 0 && (e = 0), e <= i >> 1) {
    let r = Math.floor(e / t);
    return { from: r * t, to: (r + 1) * t };
  }
  let n = Math.floor((i - e) / t);
  return { from: i - (n + 1) * t, to: i - n * t };
}
class ZX {
  constructor(e, t, n) {
    this.view = e, this.stateField = t, this.applyCompletion = n, this.info = null, this.infoDestroy = null, this.placeInfoReq = {
      read: () => this.measureInfo(),
      write: (a) => this.placeInfo(a),
      key: this
    }, this.space = null, this.currentClass = "";
    let r = e.state.field(t), { options: s, selected: o } = r.open, l = e.state.facet(He);
    this.optionContent = BX(l), this.optionClass = l.optionClass, this.tooltipClass = l.tooltipClass, this.range = vf(s.length, o, l.maxRenderedOptions), this.dom = document.createElement("div"), this.dom.className = "cm-tooltip-autocomplete", this.updateTooltipClass(e.state), this.dom.addEventListener("mousedown", (a) => {
      let { options: h } = e.state.field(t).open;
      for (let c = a.target, f; c && c != this.dom; c = c.parentNode)
        if (c.nodeName == "LI" && (f = /-(\d+)$/.exec(c.id)) && +f[1] < h.length) {
          this.applyCompletion(e, h[+f[1]]), a.preventDefault();
          return;
        }
    }), this.dom.addEventListener("focusout", (a) => {
      let h = e.state.field(this.stateField, !1);
      h && h.tooltip && e.state.facet(He).closeOnBlur && a.relatedTarget != e.contentDOM && e.dispatch({ effects: Fo.of(null) });
    }), this.showOptions(s, r.id);
  }
  mount() {
    this.updateSel();
  }
  showOptions(e, t) {
    this.list && this.list.remove(), this.list = this.dom.appendChild(this.createListBox(e, t, this.range)), this.list.addEventListener("scroll", () => {
      this.info && this.view.requestMeasure(this.placeInfoReq);
    });
  }
  update(e) {
    var t;
    let n = e.state.field(this.stateField), r = e.startState.field(this.stateField);
    if (this.updateTooltipClass(e.state), n != r) {
      let { options: s, selected: o, disabled: l } = n.open;
      (!r.open || r.open.options != s) && (this.range = vf(s.length, o, e.state.facet(He).maxRenderedOptions), this.showOptions(s, n.id)), this.updateSel(), l != ((t = r.open) === null || t === void 0 ? void 0 : t.disabled) && this.dom.classList.toggle("cm-tooltip-autocomplete-disabled", !!l);
    }
  }
  updateTooltipClass(e) {
    let t = this.tooltipClass(e);
    if (t != this.currentClass) {
      for (let n of this.currentClass.split(" "))
        n && this.dom.classList.remove(n);
      for (let n of t.split(" "))
        n && this.dom.classList.add(n);
      this.currentClass = t;
    }
  }
  positioned(e) {
    this.space = e, this.info && this.view.requestMeasure(this.placeInfoReq);
  }
  updateSel() {
    let e = this.view.state.field(this.stateField), t = e.open;
    if ((t.selected > -1 && t.selected < this.range.from || t.selected >= this.range.to) && (this.range = vf(t.options.length, t.selected, this.view.state.facet(He).maxRenderedOptions), this.showOptions(t.options, e.id)), this.updateSelectedOption(t.selected)) {
      this.destroyInfo();
      let { completion: n } = t.options[t.selected], { info: r } = n;
      if (!r)
        return;
      let s = typeof r == "string" ? document.createTextNode(r) : r(n);
      if (!s)
        return;
      "then" in s ? s.then((o) => {
        o && this.view.state.field(this.stateField, !1) == e && this.addInfoPane(o, n);
      }).catch((o) => Ct(this.view.state, o, "completion info")) : this.addInfoPane(s, n);
    }
  }
  addInfoPane(e, t) {
    this.destroyInfo();
    let n = this.info = document.createElement("div");
    if (n.className = "cm-tooltip cm-completionInfo", e.nodeType != null)
      n.appendChild(e), this.infoDestroy = null;
    else {
      let { dom: r, destroy: s } = e;
      n.appendChild(r), this.infoDestroy = s || null;
    }
    this.dom.appendChild(n), this.view.requestMeasure(this.placeInfoReq);
  }
  updateSelectedOption(e) {
    let t = null;
    for (let n = this.list.firstChild, r = this.range.from; n; n = n.nextSibling, r++)
      n.nodeName != "LI" || !n.id ? r-- : r == e ? n.hasAttribute("aria-selected") || (n.setAttribute("aria-selected", "true"), t = n) : n.hasAttribute("aria-selected") && n.removeAttribute("aria-selected");
    return t && VX(this.list, t), t;
  }
  measureInfo() {
    let e = this.dom.querySelector("[aria-selected]");
    if (!e || !this.info)
      return null;
    let t = this.dom.getBoundingClientRect(), n = this.info.getBoundingClientRect(), r = e.getBoundingClientRect(), s = this.space;
    if (!s) {
      let o = this.dom.ownerDocument.documentElement;
      s = { left: 0, top: 0, right: o.clientWidth, bottom: o.clientHeight };
    }
    return r.top > Math.min(s.bottom, t.bottom) - 10 || r.bottom < Math.max(s.top, t.top) + 10 ? null : this.view.state.facet(He).positionInfo(this.view, t, r, n, s, this.dom);
  }
  placeInfo(e) {
    this.info && (e ? (e.style && (this.info.style.cssText = e.style), this.info.className = "cm-tooltip cm-completionInfo " + (e.class || "")) : this.info.style.cssText = "top: -1e6px");
  }
  createListBox(e, t, n) {
    const r = document.createElement("ul");
    r.id = t, r.setAttribute("role", "listbox"), r.setAttribute("aria-expanded", "true"), r.setAttribute("aria-label", this.view.state.phrase("Completions")), r.addEventListener("mousedown", (o) => {
      o.target == r && o.preventDefault();
    });
    let s = null;
    for (let o = n.from; o < n.to; o++) {
      let { completion: l, match: a } = e[o], { section: h } = l;
      if (h) {
        let u = typeof h == "string" ? h : h.name;
        if (u != s && (o > n.from || n.from == 0))
          if (s = u, typeof h != "string" && h.header)
            r.appendChild(h.header(h));
          else {
            let d = r.appendChild(document.createElement("completion-section"));
            d.textContent = u;
          }
      }
      const c = r.appendChild(document.createElement("li"));
      c.id = t + "-" + o, c.setAttribute("role", "option");
      let f = this.optionClass(l);
      f && (c.className = f);
      for (let u of this.optionContent) {
        let d = u(l, this.view.state, this.view, a);
        d && c.appendChild(d);
      }
    }
    return n.from && r.classList.add("cm-completionListIncompleteTop"), n.to < e.length && r.classList.add("cm-completionListIncompleteBottom"), r;
  }
  destroyInfo() {
    this.info && (this.infoDestroy && this.infoDestroy(), this.info.remove(), this.info = null);
  }
  destroy() {
    this.destroyInfo();
  }
}
function DX(i, e) {
  return (t) => new ZX(t, i, e);
}
function VX(i, e) {
  let t = i.getBoundingClientRect(), n = e.getBoundingClientRect(), r = t.height / i.offsetHeight;
  n.top < t.top ? i.scrollTop -= (t.top - n.top) / r : n.bottom > t.bottom && (i.scrollTop += (n.bottom - t.bottom) / r);
}
function s1(i) {
  return (i.boost || 0) * 100 + (i.apply ? 10 : 0) + (i.info ? 5 : 0) + (i.type ? 1 : 0);
}
function WX(i, e) {
  let t = [], n = null, r = (h) => {
    t.push(h);
    let { section: c } = h.completion;
    if (c) {
      n || (n = []);
      let f = typeof c == "string" ? c : c.name;
      n.some((u) => u.name == f) || n.push(typeof c == "string" ? { name: f } : c);
    }
  }, s = e.facet(He);
  for (let h of i)
    if (h.hasResult()) {
      let c = h.result.getMatch;
      if (h.result.filter === !1)
        for (let f of h.result.options)
          r(new i1(f, h.source, c ? c(f) : [], 1e9 - t.length));
      else {
        let f = e.sliceDoc(h.from, h.to), u, d = s.filterStrict ? new XX(f) : new _X(f);
        for (let O of h.result.options)
          if (u = d.match(O.label)) {
            let p = O.displayLabel ? c ? c(O, u.matched) : [] : u.matched;
            r(new i1(O, h.source, p, u.score + (O.boost || 0)));
          }
      }
    }
  if (n) {
    let h = /* @__PURE__ */ Object.create(null), c = 0, f = (u, d) => {
      var O, p;
      return ((O = u.rank) !== null && O !== void 0 ? O : 1e9) - ((p = d.rank) !== null && p !== void 0 ? p : 1e9) || (u.name < d.name ? -1 : 1);
    };
    for (let u of n.sort(f))
      c -= 1e5, h[u.name] = c;
    for (let u of t) {
      let { section: d } = u.completion;
      d && (u.score += h[typeof d == "string" ? d : d.name]);
    }
  }
  let o = [], l = null, a = s.compareCompletions;
  for (let h of t.sort((c, f) => f.score - c.score || a(c.completion, f.completion))) {
    let c = h.completion;
    !l || l.label != c.label || l.detail != c.detail || l.type != null && c.type != null && l.type != c.type || l.apply != c.apply || l.boost != c.boost ? o.push(h) : s1(h.completion) > s1(l) && (o[o.length - 1] = h), l = h.completion;
  }
  return o;
}
class jr {
  constructor(e, t, n, r, s, o) {
    this.options = e, this.attrs = t, this.tooltip = n, this.timestamp = r, this.selected = s, this.disabled = o;
  }
  setSelected(e, t) {
    return e == this.selected || e >= this.options.length ? this : new jr(this.options, o1(t, e), this.tooltip, this.timestamp, e, this.disabled);
  }
  static build(e, t, n, r, s, o) {
    if (r && !o && e.some((h) => h.isPending))
      return r.setDisabled();
    let l = WX(e, t);
    if (!l.length)
      return r && e.some((h) => h.isPending) ? r.setDisabled() : null;
    let a = t.facet(He).selectOnOpen ? 0 : -1;
    if (r && r.selected != a && r.selected != -1) {
      let h = r.options[r.selected].completion;
      for (let c = 0; c < l.length; c++)
        if (l[c].completion == h) {
          a = c;
          break;
        }
    }
    return new jr(l, o1(n, a), {
      pos: e.reduce((h, c) => c.hasResult() ? Math.min(h, c.from) : h, 1e8),
      create: YX,
      above: s.aboveCursor
    }, r ? r.timestamp : Date.now(), a, !1);
  }
  map(e) {
    return new jr(this.options, this.attrs, Object.assign(Object.assign({}, this.tooltip), { pos: e.mapPos(this.tooltip.pos) }), this.timestamp, this.selected, this.disabled);
  }
  setDisabled() {
    return new jr(this.options, this.attrs, this.tooltip, this.timestamp, this.selected, !0);
  }
}
class _h {
  constructor(e, t, n) {
    this.active = e, this.id = t, this.open = n;
  }
  static start() {
    return new _h(jX, "cm-ac-" + Math.floor(Math.random() * 2e6).toString(36), null);
  }
  update(e) {
    let { state: t } = e, n = t.facet(He), s = (n.override || t.languageDataAt("autocomplete", pr(t)).map(qX)).map((a) => (this.active.find((c) => c.source == a) || new Jt(
      a,
      this.active.some(
        (c) => c.state != 0
        /* State.Inactive */
      ) ? 1 : 0
      /* State.Inactive */
    )).update(e, n));
    s.length == this.active.length && s.every((a, h) => a == this.active[h]) && (s = this.active);
    let o = this.open, l = e.effects.some((a) => a.is(Fp));
    o && e.docChanged && (o = o.map(e.changes)), e.selection || s.some((a) => a.hasResult() && e.changes.touchesRange(a.from, a.to)) || !zX(s, this.active) || l ? o = jr.build(s, t, this.id, o, n, l) : o && o.disabled && !s.some((a) => a.isPending) && (o = null), !o && s.every((a) => !a.isPending) && s.some((a) => a.hasResult()) && (s = s.map((a) => a.hasResult() ? new Jt(
      a.source,
      0
      /* State.Inactive */
    ) : a));
    for (let a of e.effects)
      a.is(sv) && (o = o && o.setSelected(a.value, this.id));
    return s == this.active && o == this.open ? this : new _h(s, this.id, o);
  }
  get tooltip() {
    return this.open ? this.open.tooltip : null;
  }
  get attrs() {
    return this.open ? this.open.attrs : this.active.length ? IX : NX;
  }
}
function zX(i, e) {
  if (i == e)
    return !0;
  for (let t = 0, n = 0; ; ) {
    for (; t < i.length && !i[t].hasResult(); )
      t++;
    for (; n < e.length && !e[n].hasResult(); )
      n++;
    let r = t == i.length, s = n == e.length;
    if (r || s)
      return r == s;
    if (i[t++].result != e[n++].result)
      return !1;
  }
}
const IX = {
  "aria-autocomplete": "list"
}, NX = {};
function o1(i, e) {
  let t = {
    "aria-autocomplete": "list",
    "aria-haspopup": "listbox",
    "aria-controls": i
  };
  return e > -1 && (t["aria-activedescendant"] = i + "-" + e), t;
}
const jX = [];
function rv(i, e) {
  if (i.isUserEvent("input.complete")) {
    let n = i.annotation(Gp);
    if (n && e.activateOnCompletion(n))
      return 12;
  }
  let t = i.isUserEvent("input.type");
  return t && e.activateOnTyping ? 5 : t ? 1 : i.isUserEvent("delete.backward") ? 2 : i.selection ? 8 : i.docChanged ? 16 : 0;
}
class Jt {
  constructor(e, t, n = !1) {
    this.source = e, this.state = t, this.explicit = n;
  }
  hasResult() {
    return !1;
  }
  get isPending() {
    return this.state == 1;
  }
  update(e, t) {
    let n = rv(e, t), r = this;
    (n & 8 || n & 16 && this.touches(e)) && (r = new Jt(
      r.source,
      0
      /* State.Inactive */
    )), n & 4 && r.state == 0 && (r = new Jt(
      this.source,
      1
      /* State.Pending */
    )), r = r.updateFor(e, n);
    for (let s of e.effects)
      if (s.is(qh))
        r = new Jt(r.source, 1, s.value);
      else if (s.is(Fo))
        r = new Jt(
          r.source,
          0
          /* State.Inactive */
        );
      else if (s.is(Fp))
        for (let o of s.value)
          o.source == r.source && (r = o);
    return r;
  }
  updateFor(e, t) {
    return this.map(e.changes);
  }
  map(e) {
    return this;
  }
  touches(e) {
    return e.changes.touchesRange(pr(e.state));
  }
}
class ss extends Jt {
  constructor(e, t, n, r, s, o) {
    super(e, 3, t), this.limit = n, this.result = r, this.from = s, this.to = o;
  }
  hasResult() {
    return !0;
  }
  updateFor(e, t) {
    var n;
    if (!(t & 3))
      return this.map(e.changes);
    let r = this.result;
    r.map && !e.changes.empty && (r = r.map(r, e.changes));
    let s = e.changes.mapPos(this.from), o = e.changes.mapPos(this.to, 1), l = pr(e.state);
    if (l > o || !r || t & 2 && (pr(e.startState) == this.from || l < this.limit))
      return new Jt(
        this.source,
        t & 4 ? 1 : 0
        /* State.Inactive */
      );
    let a = e.changes.mapPos(this.limit);
    return UX(r.validFor, e.state, s, o) ? new ss(this.source, this.explicit, a, r, s, o) : r.update && (r = r.update(r, s, o, new Up(e.state, l, !1))) ? new ss(this.source, this.explicit, a, r, r.from, (n = r.to) !== null && n !== void 0 ? n : pr(e.state)) : new Jt(this.source, 1, this.explicit);
  }
  map(e) {
    return e.empty ? this : (this.result.map ? this.result.map(this.result, e) : this.result) ? new ss(this.source, this.explicit, e.mapPos(this.limit), this.result, e.mapPos(this.from), e.mapPos(this.to, 1)) : new Jt(
      this.source,
      0
      /* State.Inactive */
    );
  }
  touches(e) {
    return e.changes.touchesRange(this.from, this.to);
  }
}
function UX(i, e, t, n) {
  if (!i)
    return !1;
  let r = e.sliceDoc(t, n);
  return typeof i == "function" ? i(r, t, n, e) : nv(i, !0).test(r);
}
const Fp = /* @__PURE__ */ le.define({
  map(i, e) {
    return i.map((t) => t.map(e));
  }
}), sv = /* @__PURE__ */ le.define(), Tt = /* @__PURE__ */ gt.define({
  create() {
    return _h.start();
  },
  update(i, e) {
    return i.update(e);
  },
  provide: (i) => [
    Rp.from(i, (e) => e.tooltip),
    W.contentAttributes.from(i, (e) => e.attrs)
  ]
});
function Hp(i, e) {
  const t = e.completion.apply || e.completion.label;
  let n = i.state.field(Tt).active.find((r) => r.source == e.source);
  return n instanceof ss ? (typeof t == "string" ? i.dispatch(Object.assign(Object.assign({}, MX(i.state, t, n.from, n.to)), { annotations: Gp.of(e.completion) })) : t(i, e.completion, n.from, n.to), !0) : !1;
}
const YX = /* @__PURE__ */ DX(Tt, Hp);
function la(i, e = "option") {
  return (t) => {
    let n = t.state.field(Tt, !1);
    if (!n || !n.open || n.open.disabled || Date.now() - n.open.timestamp < t.state.facet(He).interactionDelay)
      return !1;
    let r = 1, s;
    e == "page" && (s = Bw(t, n.open.tooltip)) && (r = Math.max(2, Math.floor(s.dom.offsetHeight / s.dom.querySelector("li").offsetHeight) - 1));
    let { length: o } = n.open.options, l = n.open.selected > -1 ? n.open.selected + r * (i ? 1 : -1) : i ? 0 : o - 1;
    return l < 0 ? l = e == "page" ? 0 : o - 1 : l >= o && (l = e == "page" ? o - 1 : 0), t.dispatch({ effects: sv.of(l) }), !0;
  };
}
const GX = (i) => {
  let e = i.state.field(Tt, !1);
  return i.state.readOnly || !e || !e.open || e.open.selected < 0 || e.open.disabled || Date.now() - e.open.timestamp < i.state.facet(He).interactionDelay ? !1 : Hp(i, e.open.options[e.open.selected]);
}, l1 = (i) => i.state.field(Tt, !1) ? (i.dispatch({ effects: qh.of(!0) }), !0) : !1, FX = (i) => {
  let e = i.state.field(Tt, !1);
  return !e || !e.active.some(
    (t) => t.state != 0
    /* State.Inactive */
  ) ? !1 : (i.dispatch({ effects: Fo.of(null) }), !0);
};
class HX {
  constructor(e, t) {
    this.active = e, this.context = t, this.time = Date.now(), this.updates = [], this.done = void 0;
  }
}
const KX = 50, JX = 1e3, eL = /* @__PURE__ */ at.fromClass(class {
  constructor(i) {
    this.view = i, this.debounceUpdate = -1, this.running = [], this.debounceAccept = -1, this.pendingStart = !1, this.composing = 0;
    for (let e of i.state.field(Tt).active)
      e.isPending && this.startQuery(e);
  }
  update(i) {
    let e = i.state.field(Tt), t = i.state.facet(He);
    if (!i.selectionSet && !i.docChanged && i.startState.field(Tt) == e)
      return;
    let n = i.transactions.some((s) => {
      let o = rv(s, t);
      return o & 8 || (s.selection || s.docChanged) && !(o & 3);
    });
    for (let s = 0; s < this.running.length; s++) {
      let o = this.running[s];
      if (n || o.context.abortOnDocChange && i.docChanged || o.updates.length + i.transactions.length > KX && Date.now() - o.time > JX) {
        for (let l of o.context.abortListeners)
          try {
            l();
          } catch (a) {
            Ct(this.view.state, a);
          }
        o.context.abortListeners = null, this.running.splice(s--, 1);
      } else
        o.updates.push(...i.transactions);
    }
    this.debounceUpdate > -1 && clearTimeout(this.debounceUpdate), i.transactions.some((s) => s.effects.some((o) => o.is(qh))) && (this.pendingStart = !0);
    let r = this.pendingStart ? 50 : t.activateOnTypingDelay;
    if (this.debounceUpdate = e.active.some((s) => s.isPending && !this.running.some((o) => o.active.source == s.source)) ? setTimeout(() => this.startUpdate(), r) : -1, this.composing != 0)
      for (let s of i.transactions)
        s.isUserEvent("input.type") ? this.composing = 2 : this.composing == 2 && s.selection && (this.composing = 3);
  }
  startUpdate() {
    this.debounceUpdate = -1, this.pendingStart = !1;
    let { state: i } = this.view, e = i.field(Tt);
    for (let t of e.active)
      t.isPending && !this.running.some((n) => n.active.source == t.source) && this.startQuery(t);
    this.running.length && e.open && e.open.disabled && (this.debounceAccept = setTimeout(() => this.accept(), this.view.state.facet(He).updateSyncTime));
  }
  startQuery(i) {
    let { state: e } = this.view, t = pr(e), n = new Up(e, t, i.explicit, this.view), r = new HX(i, n);
    this.running.push(r), Promise.resolve(i.source(n)).then((s) => {
      r.context.aborted || (r.done = s || null, this.scheduleAccept());
    }, (s) => {
      this.view.dispatch({ effects: Fo.of(null) }), Ct(this.view.state, s);
    });
  }
  scheduleAccept() {
    this.running.every((i) => i.done !== void 0) ? this.accept() : this.debounceAccept < 0 && (this.debounceAccept = setTimeout(() => this.accept(), this.view.state.facet(He).updateSyncTime));
  }
  // For each finished query in this.running, try to create a result
  // or, if appropriate, restart the query.
  accept() {
    var i;
    this.debounceAccept > -1 && clearTimeout(this.debounceAccept), this.debounceAccept = -1;
    let e = [], t = this.view.state.facet(He), n = this.view.state.field(Tt);
    for (let r = 0; r < this.running.length; r++) {
      let s = this.running[r];
      if (s.done === void 0)
        continue;
      if (this.running.splice(r--, 1), s.done) {
        let l = pr(s.updates.length ? s.updates[0].startState : this.view.state), a = Math.min(l, s.done.from + (s.active.explicit ? 0 : 1)), h = new ss(s.active.source, s.active.explicit, a, s.done, s.done.from, (i = s.done.to) !== null && i !== void 0 ? i : l);
        for (let c of s.updates)
          h = h.update(c, t);
        if (h.hasResult()) {
          e.push(h);
          continue;
        }
      }
      let o = n.active.find((l) => l.source == s.active.source);
      if (o && o.isPending)
        if (s.done == null) {
          let l = new Jt(
            s.active.source,
            0
            /* State.Inactive */
          );
          for (let a of s.updates)
            l = l.update(a, t);
          l.isPending || e.push(l);
        } else
          this.startQuery(o);
    }
    (e.length || n.open && n.open.disabled) && this.view.dispatch({ effects: Fp.of(e) });
  }
}, {
  eventHandlers: {
    blur(i) {
      let e = this.view.state.field(Tt, !1);
      if (e && e.tooltip && this.view.state.facet(He).closeOnBlur) {
        let t = e.open && Bw(this.view, e.open.tooltip);
        (!t || !t.dom.contains(i.relatedTarget)) && setTimeout(() => this.view.dispatch({ effects: Fo.of(null) }), 10);
      }
    },
    compositionstart() {
      this.composing = 1;
    },
    compositionend() {
      this.composing == 3 && setTimeout(() => this.view.dispatch({ effects: qh.of(!1) }), 20), this.composing = 0;
    }
  }
}), tL = typeof navigator == "object" && /* @__PURE__ */ /Win/.test(navigator.platform), iL = /* @__PURE__ */ bn.highest(/* @__PURE__ */ W.domEventHandlers({
  keydown(i, e) {
    let t = e.state.field(Tt, !1);
    if (!t || !t.open || t.open.disabled || t.open.selected < 0 || i.key.length > 1 || i.ctrlKey && !(tL && i.altKey) || i.metaKey)
      return !1;
    let n = t.open.options[t.open.selected], r = t.active.find((o) => o.source == n.source), s = n.completion.commitCharacters || r.result.commitCharacters;
    return s && s.indexOf(i.key) > -1 && Hp(e, n), !1;
  }
})), ov = /* @__PURE__ */ W.baseTheme({
  ".cm-tooltip.cm-tooltip-autocomplete": {
    "& > ul": {
      fontFamily: "monospace",
      whiteSpace: "nowrap",
      overflow: "hidden auto",
      maxWidth_fallback: "700px",
      maxWidth: "min(700px, 95vw)",
      minWidth: "250px",
      maxHeight: "10em",
      height: "100%",
      listStyle: "none",
      margin: 0,
      padding: 0,
      "& > li, & > completion-section": {
        padding: "1px 3px",
        lineHeight: 1.2
      },
      "& > li": {
        overflowX: "hidden",
        textOverflow: "ellipsis",
        cursor: "pointer"
      },
      "& > completion-section": {
        display: "list-item",
        borderBottom: "1px solid silver",
        paddingLeft: "0.5em",
        opacity: 0.7
      }
    }
  },
  "&light .cm-tooltip-autocomplete ul li[aria-selected]": {
    background: "#17c",
    color: "white"
  },
  "&light .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
    background: "#777"
  },
  "&dark .cm-tooltip-autocomplete ul li[aria-selected]": {
    background: "#347",
    color: "white"
  },
  "&dark .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
    background: "#444"
  },
  ".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after": {
    content: '"···"',
    opacity: 0.5,
    display: "block",
    textAlign: "center"
  },
  ".cm-tooltip.cm-completionInfo": {
    position: "absolute",
    padding: "3px 9px",
    width: "max-content",
    maxWidth: "400px",
    boxSizing: "border-box",
    whiteSpace: "pre-line"
  },
  ".cm-completionInfo.cm-completionInfo-left": { right: "100%" },
  ".cm-completionInfo.cm-completionInfo-right": { left: "100%" },
  ".cm-completionInfo.cm-completionInfo-left-narrow": { right: "30px" },
  ".cm-completionInfo.cm-completionInfo-right-narrow": { left: "30px" },
  "&light .cm-snippetField": { backgroundColor: "#00000022" },
  "&dark .cm-snippetField": { backgroundColor: "#ffffff22" },
  ".cm-snippetFieldPosition": {
    verticalAlign: "text-top",
    width: 0,
    height: "1.15em",
    display: "inline-block",
    margin: "0 -0.7px -.7em",
    borderLeft: "1.4px dotted #888"
  },
  ".cm-completionMatchedText": {
    textDecoration: "underline"
  },
  ".cm-completionDetail": {
    marginLeft: "0.5em",
    fontStyle: "italic"
  },
  ".cm-completionIcon": {
    fontSize: "90%",
    width: ".8em",
    display: "inline-block",
    textAlign: "center",
    paddingRight: ".6em",
    opacity: "0.6",
    boxSizing: "content-box"
  },
  ".cm-completionIcon-function, .cm-completionIcon-method": {
    "&:after": { content: "'ƒ'" }
  },
  ".cm-completionIcon-class": {
    "&:after": { content: "'○'" }
  },
  ".cm-completionIcon-interface": {
    "&:after": { content: "'◌'" }
  },
  ".cm-completionIcon-variable": {
    "&:after": { content: "'𝑥'" }
  },
  ".cm-completionIcon-constant": {
    "&:after": { content: "'𝐶'" }
  },
  ".cm-completionIcon-type": {
    "&:after": { content: "'𝑡'" }
  },
  ".cm-completionIcon-enum": {
    "&:after": { content: "'∪'" }
  },
  ".cm-completionIcon-property": {
    "&:after": { content: "'□'" }
  },
  ".cm-completionIcon-keyword": {
    "&:after": { content: "'🔑︎'" }
    // Disable emoji rendering
  },
  ".cm-completionIcon-namespace": {
    "&:after": { content: "'▢'" }
  },
  ".cm-completionIcon-text": {
    "&:after": { content: "'abc'", fontSize: "50%", verticalAlign: "middle" }
  }
});
class nL {
  constructor(e, t, n, r) {
    this.field = e, this.line = t, this.from = n, this.to = r;
  }
}
class Kp {
  constructor(e, t, n) {
    this.field = e, this.from = t, this.to = n;
  }
  map(e) {
    let t = e.mapPos(this.from, -1, st.TrackDel), n = e.mapPos(this.to, 1, st.TrackDel);
    return t == null || n == null ? null : new Kp(this.field, t, n);
  }
}
class Jp {
  constructor(e, t) {
    this.lines = e, this.fieldPositions = t;
  }
  instantiate(e, t) {
    let n = [], r = [t], s = e.doc.lineAt(t), o = /^\s*/.exec(s.text)[0];
    for (let a of this.lines) {
      if (n.length) {
        let h = o, c = /^\t*/.exec(a)[0].length;
        for (let f = 0; f < c; f++)
          h += e.facet(vl);
        r.push(t + h.length - c), a = h + a.slice(c);
      }
      n.push(a), t += a.length + 1;
    }
    let l = this.fieldPositions.map((a) => new Kp(a.field, r[a.line] + a.from, r[a.line] + a.to));
    return { text: n, ranges: l };
  }
  static parse(e) {
    let t = [], n = [], r = [], s;
    for (let o of e.split(/\r\n?|\n/)) {
      for (; s = /[#$]\{(?:(\d+)(?::([^}]*))?|((?:\\[{}]|[^}])*))\}/.exec(o); ) {
        let l = s[1] ? +s[1] : null, a = s[2] || s[3] || "", h = -1, c = a.replace(/\\[{}]/g, (f) => f[1]);
        for (let f = 0; f < t.length; f++)
          (l != null ? t[f].seq == l : c && t[f].name == c) && (h = f);
        if (h < 0) {
          let f = 0;
          for (; f < t.length && (l == null || t[f].seq != null && t[f].seq < l); )
            f++;
          t.splice(f, 0, { seq: l, name: c }), h = f;
          for (let u of r)
            u.field >= h && u.field++;
        }
        r.push(new nL(h, n.length, s.index, s.index + c.length)), o = o.slice(0, s.index) + a + o.slice(s.index + s[0].length);
      }
      o = o.replace(/\\([{}])/g, (l, a, h) => {
        for (let c of r)
          c.line == n.length && c.from > h && (c.from--, c.to--);
        return a;
      }), n.push(o);
    }
    return new Jp(n, r);
  }
}
let rL = /* @__PURE__ */ K.widget({ widget: /* @__PURE__ */ new class extends wn {
  toDOM() {
    let i = document.createElement("span");
    return i.className = "cm-snippetFieldPosition", i;
  }
  ignoreEvent() {
    return !1;
  }
}() }), sL = /* @__PURE__ */ K.mark({ class: "cm-snippetField" });
class Xs {
  constructor(e, t) {
    this.ranges = e, this.active = t, this.deco = K.set(e.map((n) => (n.from == n.to ? rL : sL).range(n.from, n.to)));
  }
  map(e) {
    let t = [];
    for (let n of this.ranges) {
      let r = n.map(e);
      if (!r)
        return null;
      t.push(r);
    }
    return new Xs(t, this.active);
  }
  selectionInsideField(e) {
    return e.ranges.every((t) => this.ranges.some((n) => n.field == this.active && n.from <= t.from && n.to >= t.to));
  }
}
const Cl = /* @__PURE__ */ le.define({
  map(i, e) {
    return i && i.map(e);
  }
}), oL = /* @__PURE__ */ le.define(), Ho = /* @__PURE__ */ gt.define({
  create() {
    return null;
  },
  update(i, e) {
    for (let t of e.effects) {
      if (t.is(Cl))
        return t.value;
      if (t.is(oL) && i)
        return new Xs(i.ranges, t.value);
    }
    return i && e.docChanged && (i = i.map(e.changes)), i && e.selection && !i.selectionInsideField(e.selection) && (i = null), i;
  },
  provide: (i) => W.decorations.from(i, (e) => e ? e.deco : K.none)
});
function em(i, e) {
  return C.create(i.filter((t) => t.field == e).map((t) => C.range(t.from, t.to)));
}
function lL(i) {
  let e = Jp.parse(i);
  return (t, n, r, s) => {
    let { text: o, ranges: l } = e.instantiate(t.state, r), { main: a } = t.state.selection, h = {
      changes: { from: r, to: s == a.from ? a.to : s, insert: me.of(o) },
      scrollIntoView: !0,
      annotations: n ? [Gp.of(n), kt.userEvent.of("input.complete")] : void 0
    };
    if (l.length && (h.selection = em(l, 0)), l.some((c) => c.field > 0)) {
      let c = new Xs(l, 0), f = h.effects = [Cl.of(c)];
      t.state.field(Ho, !1) === void 0 && f.push(le.appendConfig.of([Ho, uL, dL, ov]));
    }
    t.dispatch(t.state.update(h));
  };
}
function lv(i) {
  return ({ state: e, dispatch: t }) => {
    let n = e.field(Ho, !1);
    if (!n || i < 0 && n.active == 0)
      return !1;
    let r = n.active + i, s = i > 0 && !n.ranges.some((o) => o.field == r + i);
    return t(e.update({
      selection: em(n.ranges, r),
      effects: Cl.of(s ? null : new Xs(n.ranges, r)),
      scrollIntoView: !0
    })), !0;
  };
}
const aL = ({ state: i, dispatch: e }) => i.field(Ho, !1) ? (e(i.update({ effects: Cl.of(null) })), !0) : !1, hL = /* @__PURE__ */ lv(1), cL = /* @__PURE__ */ lv(-1), fL = [
  { key: "Tab", run: hL, shift: cL },
  { key: "Escape", run: aL }
], a1 = /* @__PURE__ */ I.define({
  combine(i) {
    return i.length ? i[0] : fL;
  }
}), uL = /* @__PURE__ */ bn.highest(/* @__PURE__ */ xl.compute([a1], (i) => i.facet(a1)));
function Xe(i, e) {
  return Object.assign(Object.assign({}, e), { apply: lL(i) });
}
const dL = /* @__PURE__ */ W.domEventHandlers({
  mousedown(i, e) {
    let t = e.state.field(Ho, !1), n;
    if (!t || (n = e.posAtCoords({ x: i.clientX, y: i.clientY })) == null)
      return !1;
    let r = t.ranges.find((s) => s.from <= n && s.to >= n);
    return !r || r.field == t.active ? !1 : (e.dispatch({
      selection: em(t.ranges, r.field),
      effects: Cl.of(t.ranges.some((s) => s.field > r.field) ? new Xs(t.ranges, r.field) : null),
      scrollIntoView: !0
    }), !0);
  }
}), Ko = {
  brackets: ["(", "[", "{", "'", '"'],
  before: ")]}:;>",
  stringPrefixes: []
}, ar = /* @__PURE__ */ le.define({
  map(i, e) {
    let t = e.mapPos(i, -1, st.TrackAfter);
    return t ?? void 0;
  }
}), tm = /* @__PURE__ */ new class extends kr {
}();
tm.startSide = 1;
tm.endSide = -1;
const av = /* @__PURE__ */ gt.define({
  create() {
    return qe.empty;
  },
  update(i, e) {
    if (i = i.map(e.changes), e.selection) {
      let t = e.state.doc.lineAt(e.selection.main.head);
      i = i.update({ filter: (n) => n >= t.from && n <= t.to });
    }
    for (let t of e.effects)
      t.is(ar) && (i = i.update({ add: [tm.range(t.value, t.value + 1)] }));
    return i;
  }
});
function OL() {
  return [mL, av];
}
const Qf = "()[]{}<>«»»«［］｛｝";
function hv(i) {
  for (let e = 0; e < Qf.length; e += 2)
    if (Qf.charCodeAt(e) == i)
      return Qf.charAt(e + 1);
  return pp(i < 128 ? i : i + 1);
}
function cv(i, e) {
  return i.languageDataAt("closeBrackets", e)[0] || Ko;
}
const pL = typeof navigator == "object" && /* @__PURE__ */ /Android\b/.test(navigator.userAgent), mL = /* @__PURE__ */ W.inputHandler.of((i, e, t, n) => {
  if ((pL ? i.composing : i.compositionStarted) || i.state.readOnly)
    return !1;
  let r = i.state.selection.main;
  if (n.length > 2 || n.length == 2 && Di(Pt(n, 0)) == 1 || e != r.from || t != r.to)
    return !1;
  let s = SL(i.state, n);
  return s ? (i.dispatch(s), !0) : !1;
}), gL = ({ state: i, dispatch: e }) => {
  if (i.readOnly)
    return !1;
  let n = cv(i, i.selection.main.head).brackets || Ko.brackets, r = null, s = i.changeByRange((o) => {
    if (o.empty) {
      let l = bL(i.doc, o.head);
      for (let a of n)
        if (a == l && vc(i.doc, o.head) == hv(Pt(a, 0)))
          return {
            changes: { from: o.head - a.length, to: o.head + a.length },
            range: C.cursor(o.head - a.length)
          };
    }
    return { range: r = o };
  });
  return r || e(i.update(s, { scrollIntoView: !0, userEvent: "delete.backward" })), !r;
}, yL = [
  { key: "Backspace", run: gL }
];
function SL(i, e) {
  let t = cv(i, i.selection.main.head), n = t.brackets || Ko.brackets;
  for (let r of n) {
    let s = hv(Pt(r, 0));
    if (e == r)
      return s == r ? kL(i, r, n.indexOf(r + r + r) > -1, t) : xL(i, r, s, t.before || Ko.before);
    if (e == s && fv(i, i.selection.main.from))
      return wL(i, r, s);
  }
  return null;
}
function fv(i, e) {
  let t = !1;
  return i.field(av).between(0, i.doc.length, (n) => {
    n == e && (t = !0);
  }), t;
}
function vc(i, e) {
  let t = i.sliceString(e, e + 2);
  return t.slice(0, Di(Pt(t, 0)));
}
function bL(i, e) {
  let t = i.sliceString(e - 2, e);
  return Di(Pt(t, 0)) == t.length ? t : t.slice(1);
}
function xL(i, e, t, n) {
  let r = null, s = i.changeByRange((o) => {
    if (!o.empty)
      return {
        changes: [{ insert: e, from: o.from }, { insert: t, from: o.to }],
        effects: ar.of(o.to + e.length),
        range: C.range(o.anchor + e.length, o.head + e.length)
      };
    let l = vc(i.doc, o.head);
    return !l || /\s/.test(l) || n.indexOf(l) > -1 ? {
      changes: { insert: e + t, from: o.head },
      effects: ar.of(o.head + e.length),
      range: C.cursor(o.head + e.length)
    } : { range: r = o };
  });
  return r ? null : i.update(s, {
    scrollIntoView: !0,
    userEvent: "input.type"
  });
}
function wL(i, e, t) {
  let n = null, r = i.changeByRange((s) => s.empty && vc(i.doc, s.head) == t ? {
    changes: { from: s.head, to: s.head + t.length, insert: t },
    range: C.cursor(s.head + t.length)
  } : n = { range: s });
  return n ? null : i.update(r, {
    scrollIntoView: !0,
    userEvent: "input.type"
  });
}
function kL(i, e, t, n) {
  let r = n.stringPrefixes || Ko.stringPrefixes, s = null, o = i.changeByRange((l) => {
    if (!l.empty)
      return {
        changes: [{ insert: e, from: l.from }, { insert: e, from: l.to }],
        effects: ar.of(l.to + e.length),
        range: C.range(l.anchor + e.length, l.head + e.length)
      };
    let a = l.head, h = vc(i.doc, a), c;
    if (h == e) {
      if (h1(i, a))
        return {
          changes: { insert: e + e, from: a },
          effects: ar.of(a + e.length),
          range: C.cursor(a + e.length)
        };
      if (fv(i, a)) {
        let u = t && i.sliceDoc(a, a + e.length * 3) == e + e + e ? e + e + e : e;
        return {
          changes: { from: a, to: a + u.length, insert: u },
          range: C.cursor(a + u.length)
        };
      }
    } else {
      if (t && i.sliceDoc(a - 2 * e.length, a) == e + e && (c = c1(i, a - 2 * e.length, r)) > -1 && h1(i, c))
        return {
          changes: { insert: e + e + e + e, from: a },
          effects: ar.of(a + e.length),
          range: C.cursor(a + e.length)
        };
      if (i.charCategorizer(a)(h) != Me.Word && c1(i, a, r) > -1 && !vL(i, a, e, r))
        return {
          changes: { insert: e + e, from: a },
          effects: ar.of(a + e.length),
          range: C.cursor(a + e.length)
        };
    }
    return { range: s = l };
  });
  return s ? null : i.update(o, {
    scrollIntoView: !0,
    userEvent: "input.type"
  });
}
function h1(i, e) {
  let t = ye(i).resolveInner(e + 1);
  return t.parent && t.from == e;
}
function vL(i, e, t, n) {
  let r = ye(i).resolveInner(e, -1), s = n.reduce((o, l) => Math.max(o, l.length), 0);
  for (let o = 0; o < 5; o++) {
    let l = i.sliceDoc(r.from, Math.min(r.to, r.from + t.length + s)), a = l.indexOf(t);
    if (!a || a > -1 && n.indexOf(l.slice(0, a)) > -1) {
      let c = r.firstChild;
      for (; c && c.from == r.from && c.to - c.from > t.length + a; ) {
        if (i.sliceDoc(c.to - t.length, c.to) == t)
          return !1;
        c = c.firstChild;
      }
      return !0;
    }
    let h = r.to == e && r.parent;
    if (!h)
      break;
    r = h;
  }
  return !1;
}
function c1(i, e, t) {
  let n = i.charCategorizer(e);
  if (n(i.sliceDoc(e - 1, e)) != Me.Word)
    return e;
  for (let r of t) {
    let s = e - r.length;
    if (i.sliceDoc(s, e) == r && n(i.sliceDoc(s - 1, s)) != Me.Word)
      return s;
  }
  return -1;
}
function QL(i = {}) {
  return [
    iL,
    Tt,
    He.of(i),
    eL,
    PL,
    ov
  ];
}
const uv = [
  { key: "Ctrl-Space", run: l1 },
  { mac: "Alt-`", run: l1 },
  { key: "Escape", run: FX },
  { key: "ArrowDown", run: /* @__PURE__ */ la(!0) },
  { key: "ArrowUp", run: /* @__PURE__ */ la(!1) },
  { key: "PageDown", run: /* @__PURE__ */ la(!0, "page") },
  { key: "PageUp", run: /* @__PURE__ */ la(!1, "page") },
  { key: "Enter", run: GX }
], PL = /* @__PURE__ */ bn.highest(/* @__PURE__ */ xl.computeN([He], (i) => i.facet(He).defaultKeymap ? [uv] : []));
class f1 {
  constructor(e, t, n) {
    this.from = e, this.to = t, this.diagnostic = n;
  }
}
class sr {
  constructor(e, t, n) {
    this.diagnostics = e, this.panel = t, this.selected = n;
  }
  static init(e, t, n) {
    let r = n.facet(Jo).markerFilter;
    r && (e = r(e, n));
    let s = e.slice().sort((c, f) => c.from - f.from || c.to - f.to), o = new vr(), l = [], a = 0;
    for (let c = 0; ; ) {
      let f = c == s.length ? null : s[c];
      if (!f && !l.length)
        break;
      let u, d;
      for (l.length ? (u = a, d = l.reduce((p, m) => Math.min(p, m.to), f && f.from > u ? f.from : 1e8)) : (u = f.from, d = f.to, l.push(f), c++); c < s.length; ) {
        let p = s[c];
        if (p.from == u && (p.to > p.from || p.to == u))
          l.push(p), c++, d = Math.min(p.to, d);
        else {
          d = Math.min(p.from, d);
          break;
        }
      }
      let O = ZL(l);
      if (l.some((p) => p.from == p.to || p.from == p.to - 1 && n.doc.lineAt(p.from).to == p.from))
        o.add(u, u, K.widget({
          widget: new _L(O),
          diagnostics: l.slice()
        }));
      else {
        let p = l.reduce((m, g) => g.markClass ? m + " " + g.markClass : m, "");
        o.add(u, d, K.mark({
          class: "cm-lintRange cm-lintRange-" + O + p,
          diagnostics: l.slice(),
          inclusiveEnd: l.some((m) => m.to > d)
        }));
      }
      a = d;
      for (let p = 0; p < l.length; p++)
        l[p].to <= a && l.splice(p--, 1);
    }
    let h = o.finish();
    return new sr(h, t, gs(h));
  }
}
function gs(i, e = null, t = 0) {
  let n = null;
  return i.between(t, 1e9, (r, s, { spec: o }) => {
    if (!(e && o.diagnostics.indexOf(e) < 0))
      if (!n)
        n = new f1(r, s, e || o.diagnostics[0]);
      else {
        if (o.diagnostics.indexOf(n.diagnostic) < 0)
          return !1;
        n = new f1(n.from, s, n.diagnostic);
      }
  }), n;
}
function $L(i, e) {
  let t = e.pos, n = e.end || t, r = i.state.facet(Jo).hideOn(i, t, n);
  if (r != null)
    return r;
  let s = i.startState.doc.lineAt(e.pos);
  return !!(i.effects.some((o) => o.is(dv)) || i.changes.touchesRange(s.from, Math.max(s.to, n)));
}
function TL(i, e) {
  return i.field(Vt, !1) ? e : e.concat(le.appendConfig.of(DL));
}
const dv = /* @__PURE__ */ le.define(), im = /* @__PURE__ */ le.define(), Ov = /* @__PURE__ */ le.define(), Vt = /* @__PURE__ */ gt.define({
  create() {
    return new sr(K.none, null, null);
  },
  update(i, e) {
    if (e.docChanged && i.diagnostics.size) {
      let t = i.diagnostics.map(e.changes), n = null, r = i.panel;
      if (i.selected) {
        let s = e.changes.mapPos(i.selected.from, 1);
        n = gs(t, i.selected.diagnostic, s) || gs(t, null, s);
      }
      !t.size && r && e.state.facet(Jo).autoPanel && (r = null), i = new sr(t, r, n);
    }
    for (let t of e.effects)
      if (t.is(dv)) {
        let n = e.state.facet(Jo).autoPanel ? t.value.length ? el.open : null : i.panel;
        i = sr.init(t.value, n, e.state);
      } else t.is(im) ? i = new sr(i.diagnostics, t.value ? el.open : null, i.selected) : t.is(Ov) && (i = new sr(i.diagnostics, i.panel, t.value));
    return i;
  },
  provide: (i) => [
    Io.from(i, (e) => e.panel),
    W.decorations.from(i, (e) => e.diagnostics)
  ]
}), CL = /* @__PURE__ */ K.mark({ class: "cm-lintRange cm-lintRange-active" });
function RL(i, e, t) {
  let { diagnostics: n } = i.state.field(Vt), r, s = -1, o = -1;
  n.between(e - (t < 0 ? 1 : 0), e + (t > 0 ? 1 : 0), (a, h, { spec: c }) => {
    if (e >= a && e <= h && (a == h || (e > a || t > 0) && (e < h || t < 0)))
      return r = c.diagnostics, s = a, o = h, !1;
  });
  let l = i.state.facet(Jo).tooltipFilter;
  return r && l && (r = l(r, i.state)), r ? {
    pos: s,
    end: o,
    above: i.state.doc.lineAt(s).to < o,
    create() {
      return { dom: AL(i, r) };
    }
  } : null;
}
function AL(i, e) {
  return we("ul", { class: "cm-tooltip-lint" }, e.map((t) => mv(i, t, !1)));
}
const EL = (i) => {
  let e = i.state.field(Vt, !1);
  (!e || !e.panel) && i.dispatch({ effects: TL(i.state, [im.of(!0)]) });
  let t = zo(i, el.open);
  return t && t.dom.querySelector(".cm-panel-lint ul").focus(), !0;
}, u1 = (i) => {
  let e = i.state.field(Vt, !1);
  return !e || !e.panel ? !1 : (i.dispatch({ effects: im.of(!1) }), !0);
}, ML = (i) => {
  let e = i.state.field(Vt, !1);
  if (!e)
    return !1;
  let t = i.state.selection.main, n = e.diagnostics.iter(t.to + 1);
  return !n.value && (n = e.diagnostics.iter(0), !n.value || n.from == t.from && n.to == t.to) ? !1 : (i.dispatch({ selection: { anchor: n.from, head: n.to }, scrollIntoView: !0 }), !0);
}, qL = [
  { key: "Mod-Shift-m", run: EL, preventDefault: !0 },
  { key: "F8", run: ML }
], Jo = /* @__PURE__ */ I.define({
  combine(i) {
    return Object.assign({ sources: i.map((e) => e.source).filter((e) => e != null) }, Ki(i.map((e) => e.config), {
      delay: 750,
      markerFilter: null,
      tooltipFilter: null,
      needsRefresh: null,
      hideOn: () => null
    }, {
      needsRefresh: (e, t) => e ? t ? (n) => e(n) || t(n) : e : t
    }));
  }
});
function pv(i) {
  let e = [];
  if (i)
    e: for (let { name: t } of i) {
      for (let n = 0; n < t.length; n++) {
        let r = t[n];
        if (/[a-zA-Z]/.test(r) && !e.some((s) => s.toLowerCase() == r.toLowerCase())) {
          e.push(r);
          continue e;
        }
      }
      e.push("");
    }
  return e;
}
function mv(i, e, t) {
  var n;
  let r = t ? pv(e.actions) : [];
  return we("li", { class: "cm-diagnostic cm-diagnostic-" + e.severity }, we("span", { class: "cm-diagnosticText" }, e.renderMessage ? e.renderMessage(i) : e.message), (n = e.actions) === null || n === void 0 ? void 0 : n.map((s, o) => {
    let l = !1, a = (u) => {
      if (u.preventDefault(), l)
        return;
      l = !0;
      let d = gs(i.state.field(Vt).diagnostics, e);
      d && s.apply(i, d.from, d.to);
    }, { name: h } = s, c = r[o] ? h.indexOf(r[o]) : -1, f = c < 0 ? h : [
      h.slice(0, c),
      we("u", h.slice(c, c + 1)),
      h.slice(c + 1)
    ];
    return we("button", {
      type: "button",
      class: "cm-diagnosticAction",
      onclick: a,
      onmousedown: a,
      "aria-label": ` Action: ${h}${c < 0 ? "" : ` (access key "${r[o]})"`}.`
    }, f);
  }), e.source && we("div", { class: "cm-diagnosticSource" }, e.source));
}
class _L extends wn {
  constructor(e) {
    super(), this.sev = e;
  }
  eq(e) {
    return e.sev == this.sev;
  }
  toDOM() {
    return we("span", { class: "cm-lintPoint cm-lintPoint-" + this.sev });
  }
}
class d1 {
  constructor(e, t) {
    this.diagnostic = t, this.id = "item_" + Math.floor(Math.random() * 4294967295).toString(16), this.dom = mv(e, t, !0), this.dom.id = this.id, this.dom.setAttribute("role", "option");
  }
}
class el {
  constructor(e) {
    this.view = e, this.items = [];
    let t = (r) => {
      if (r.keyCode == 27)
        u1(this.view), this.view.focus();
      else if (r.keyCode == 38 || r.keyCode == 33)
        this.moveSelection((this.selectedIndex - 1 + this.items.length) % this.items.length);
      else if (r.keyCode == 40 || r.keyCode == 34)
        this.moveSelection((this.selectedIndex + 1) % this.items.length);
      else if (r.keyCode == 36)
        this.moveSelection(0);
      else if (r.keyCode == 35)
        this.moveSelection(this.items.length - 1);
      else if (r.keyCode == 13)
        this.view.focus();
      else if (r.keyCode >= 65 && r.keyCode <= 90 && this.selectedIndex >= 0) {
        let { diagnostic: s } = this.items[this.selectedIndex], o = pv(s.actions);
        for (let l = 0; l < o.length; l++)
          if (o[l].toUpperCase().charCodeAt(0) == r.keyCode) {
            let a = gs(this.view.state.field(Vt).diagnostics, s);
            a && s.actions[l].apply(e, a.from, a.to);
          }
      } else
        return;
      r.preventDefault();
    }, n = (r) => {
      for (let s = 0; s < this.items.length; s++)
        this.items[s].dom.contains(r.target) && this.moveSelection(s);
    };
    this.list = we("ul", {
      tabIndex: 0,
      role: "listbox",
      "aria-label": this.view.state.phrase("Diagnostics"),
      onkeydown: t,
      onclick: n
    }), this.dom = we("div", { class: "cm-panel-lint" }, this.list, we("button", {
      type: "button",
      name: "close",
      "aria-label": this.view.state.phrase("close"),
      onclick: () => u1(this.view)
    }, "×")), this.update();
  }
  get selectedIndex() {
    let e = this.view.state.field(Vt).selected;
    if (!e)
      return -1;
    for (let t = 0; t < this.items.length; t++)
      if (this.items[t].diagnostic == e.diagnostic)
        return t;
    return -1;
  }
  update() {
    let { diagnostics: e, selected: t } = this.view.state.field(Vt), n = 0, r = !1, s = null, o = /* @__PURE__ */ new Set();
    for (e.between(0, this.view.state.doc.length, (l, a, { spec: h }) => {
      for (let c of h.diagnostics) {
        if (o.has(c))
          continue;
        o.add(c);
        let f = -1, u;
        for (let d = n; d < this.items.length; d++)
          if (this.items[d].diagnostic == c) {
            f = d;
            break;
          }
        f < 0 ? (u = new d1(this.view, c), this.items.splice(n, 0, u), r = !0) : (u = this.items[f], f > n && (this.items.splice(n, f - n), r = !0)), t && u.diagnostic == t.diagnostic ? u.dom.hasAttribute("aria-selected") || (u.dom.setAttribute("aria-selected", "true"), s = u) : u.dom.hasAttribute("aria-selected") && u.dom.removeAttribute("aria-selected"), n++;
      }
    }); n < this.items.length && !(this.items.length == 1 && this.items[0].diagnostic.from < 0); )
      r = !0, this.items.pop();
    this.items.length == 0 && (this.items.push(new d1(this.view, {
      from: -1,
      to: -1,
      severity: "info",
      message: this.view.state.phrase("No diagnostics")
    })), r = !0), s ? (this.list.setAttribute("aria-activedescendant", s.id), this.view.requestMeasure({
      key: this,
      read: () => ({ sel: s.dom.getBoundingClientRect(), panel: this.list.getBoundingClientRect() }),
      write: ({ sel: l, panel: a }) => {
        let h = a.height / this.list.offsetHeight;
        l.top < a.top ? this.list.scrollTop -= (a.top - l.top) / h : l.bottom > a.bottom && (this.list.scrollTop += (l.bottom - a.bottom) / h);
      }
    })) : this.selectedIndex < 0 && this.list.removeAttribute("aria-activedescendant"), r && this.sync();
  }
  sync() {
    let e = this.list.firstChild;
    function t() {
      let n = e;
      e = n.nextSibling, n.remove();
    }
    for (let n of this.items)
      if (n.dom.parentNode == this.list) {
        for (; e != n.dom; )
          t();
        e = n.dom.nextSibling;
      } else
        this.list.insertBefore(n.dom, e);
    for (; e; )
      t();
  }
  moveSelection(e) {
    if (this.selectedIndex < 0)
      return;
    let t = this.view.state.field(Vt), n = gs(t.diagnostics, this.items[e].diagnostic);
    n && this.view.dispatch({
      selection: { anchor: n.from, head: n.to },
      scrollIntoView: !0,
      effects: Ov.of(n)
    });
  }
  static open(e) {
    return new el(e);
  }
}
function XL(i, e = 'viewBox="0 0 40 40"') {
  return `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" ${e}>${encodeURIComponent(i)}</svg>')`;
}
function aa(i) {
  return XL(`<path d="m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0" stroke="${i}" fill="none" stroke-width=".7"/>`, 'width="6" height="3"');
}
const LL = /* @__PURE__ */ W.baseTheme({
  ".cm-diagnostic": {
    padding: "3px 6px 3px 8px",
    marginLeft: "-1px",
    display: "block",
    whiteSpace: "pre-wrap"
  },
  ".cm-diagnostic-error": { borderLeft: "5px solid #d11" },
  ".cm-diagnostic-warning": { borderLeft: "5px solid orange" },
  ".cm-diagnostic-info": { borderLeft: "5px solid #999" },
  ".cm-diagnostic-hint": { borderLeft: "5px solid #66d" },
  ".cm-diagnosticAction": {
    font: "inherit",
    border: "none",
    padding: "2px 4px",
    backgroundColor: "#444",
    color: "white",
    borderRadius: "3px",
    marginLeft: "8px",
    cursor: "pointer"
  },
  ".cm-diagnosticSource": {
    fontSize: "70%",
    opacity: 0.7
  },
  ".cm-lintRange": {
    backgroundPosition: "left bottom",
    backgroundRepeat: "repeat-x",
    paddingBottom: "0.7px"
  },
  ".cm-lintRange-error": { backgroundImage: /* @__PURE__ */ aa("#d11") },
  ".cm-lintRange-warning": { backgroundImage: /* @__PURE__ */ aa("orange") },
  ".cm-lintRange-info": { backgroundImage: /* @__PURE__ */ aa("#999") },
  ".cm-lintRange-hint": { backgroundImage: /* @__PURE__ */ aa("#66d") },
  ".cm-lintRange-active": { backgroundColor: "#ffdd9980" },
  ".cm-tooltip-lint": {
    padding: 0,
    margin: 0
  },
  ".cm-lintPoint": {
    position: "relative",
    "&:after": {
      content: '""',
      position: "absolute",
      bottom: 0,
      left: "-2px",
      borderLeft: "3px solid transparent",
      borderRight: "3px solid transparent",
      borderBottom: "4px solid #d11"
    }
  },
  ".cm-lintPoint-warning": {
    "&:after": { borderBottomColor: "orange" }
  },
  ".cm-lintPoint-info": {
    "&:after": { borderBottomColor: "#999" }
  },
  ".cm-lintPoint-hint": {
    "&:after": { borderBottomColor: "#66d" }
  },
  ".cm-panel.cm-panel-lint": {
    position: "relative",
    "& ul": {
      maxHeight: "100px",
      overflowY: "auto",
      "& [aria-selected]": {
        backgroundColor: "#ddd",
        "& u": { textDecoration: "underline" }
      },
      "&:focus [aria-selected]": {
        background_fallback: "#bdf",
        backgroundColor: "Highlight",
        color_fallback: "white",
        color: "HighlightText"
      },
      "& u": { textDecoration: "none" },
      padding: 0,
      margin: 0
    },
    "& [name=close]": {
      position: "absolute",
      top: "0",
      right: "2px",
      background: "inherit",
      border: "none",
      font: "inherit",
      padding: 0,
      margin: 0
    }
  }
});
function BL(i) {
  return i == "error" ? 4 : i == "warning" ? 3 : i == "info" ? 2 : 1;
}
function ZL(i) {
  let e = "hint", t = 1;
  for (let n of i) {
    let r = BL(n.severity);
    r > t && (t = r, e = n.severity);
  }
  return e;
}
const DL = [
  Vt,
  /* @__PURE__ */ W.decorations.compute([Vt], (i) => {
    let { selected: e, panel: t } = i.field(Vt);
    return !e || !t || e.from == e.to ? K.none : K.set([
      CL.range(e.from, e.to)
    ]);
  }),
  /* @__PURE__ */ kM(RL, { hideOn: $L }),
  LL
], VL = [
  qM(),
  LM(),
  eM(),
  t_(),
  Cq(),
  z5(),
  Y5(),
  Be.allowMultipleSelections.of(!0),
  gq(),
  Ok(Mq, { fallback: !0 }),
  Dq(),
  OL(),
  QL(),
  uM(),
  pM(),
  oM(),
  hX(),
  xl.of([
    ...yL,
    ...nX,
    ...TX,
    ...c_,
    ...Qq,
    ...uv,
    ...qL
  ])
];
class Xh {
  /**
  @internal
  */
  constructor(e, t, n, r, s, o, l, a, h, c = 0, f) {
    this.p = e, this.stack = t, this.state = n, this.reducePos = r, this.pos = s, this.score = o, this.buffer = l, this.bufferBase = a, this.curContext = h, this.lookAhead = c, this.parent = f;
  }
  /**
  @internal
  */
  toString() {
    return `[${this.stack.filter((e, t) => t % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? "!" + this.score : ""}`;
  }
  // Start an empty stack
  /**
  @internal
  */
  static start(e, t, n = 0) {
    let r = e.parser.context;
    return new Xh(e, [], t, n, n, 0, [], 0, r ? new O1(r, r.start) : null, 0, null);
  }
  /**
  The stack's current [context](#lr.ContextTracker) value, if
  any. Its type will depend on the context tracker's type
  parameter, or it will be `null` if there is no context
  tracker.
  */
  get context() {
    return this.curContext ? this.curContext.context : null;
  }
  // Push a state onto the stack, tracking its start position as well
  // as the buffer base at that point.
  /**
  @internal
  */
  pushState(e, t) {
    this.stack.push(this.state, t, this.bufferBase + this.buffer.length), this.state = e;
  }
  // Apply a reduce action
  /**
  @internal
  */
  reduce(e) {
    var t;
    let n = e >> 19, r = e & 65535, { parser: s } = this.p, o = this.reducePos < this.pos - 25;
    o && this.setLookAhead(this.pos);
    let l = s.dynamicPrecedence(r);
    if (l && (this.score += l), n == 0) {
      this.pushState(s.getGoto(this.state, r, !0), this.reducePos), r < s.minRepeatTerm && this.storeNode(r, this.reducePos, this.reducePos, o ? 8 : 4, !0), this.reduceContext(r, this.reducePos);
      return;
    }
    let a = this.stack.length - (n - 1) * 3 - (e & 262144 ? 6 : 0), h = a ? this.stack[a - 2] : this.p.ranges[0].from, c = this.reducePos - h;
    c >= 2e3 && !(!((t = this.p.parser.nodeSet.types[r]) === null || t === void 0) && t.isAnonymous) && (h == this.p.lastBigReductionStart ? (this.p.bigReductionCount++, this.p.lastBigReductionSize = c) : this.p.lastBigReductionSize < c && (this.p.bigReductionCount = 1, this.p.lastBigReductionStart = h, this.p.lastBigReductionSize = c));
    let f = a ? this.stack[a - 1] : 0, u = this.bufferBase + this.buffer.length - f;
    if (r < s.minRepeatTerm || e & 131072) {
      let d = s.stateFlag(
        this.state,
        1
        /* StateFlag.Skipped */
      ) ? this.pos : this.reducePos;
      this.storeNode(r, h, d, u + 4, !0);
    }
    if (e & 262144)
      this.state = this.stack[a];
    else {
      let d = this.stack[a - 3];
      this.state = s.getGoto(d, r, !0);
    }
    for (; this.stack.length > a; )
      this.stack.pop();
    this.reduceContext(r, h);
  }
  // Shift a value into the buffer
  /**
  @internal
  */
  storeNode(e, t, n, r = 4, s = !1) {
    if (e == 0 && (!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {
      let o = this, l = this.buffer.length;
      if (l == 0 && o.parent && (l = o.bufferBase - o.parent.bufferBase, o = o.parent), l > 0 && o.buffer[l - 4] == 0 && o.buffer[l - 1] > -1) {
        if (t == n)
          return;
        if (o.buffer[l - 2] >= t) {
          o.buffer[l - 2] = n;
          return;
        }
      }
    }
    if (!s || this.pos == n)
      this.buffer.push(e, t, n, r);
    else {
      let o = this.buffer.length;
      if (o > 0 && this.buffer[o - 4] != 0) {
        let l = !1;
        for (let a = o; a > 0 && this.buffer[a - 2] > n; a -= 4)
          if (this.buffer[a - 1] >= 0) {
            l = !0;
            break;
          }
        if (l)
          for (; o > 0 && this.buffer[o - 2] > n; )
            this.buffer[o] = this.buffer[o - 4], this.buffer[o + 1] = this.buffer[o - 3], this.buffer[o + 2] = this.buffer[o - 2], this.buffer[o + 3] = this.buffer[o - 1], o -= 4, r > 4 && (r -= 4);
      }
      this.buffer[o] = e, this.buffer[o + 1] = t, this.buffer[o + 2] = n, this.buffer[o + 3] = r;
    }
  }
  // Apply a shift action
  /**
  @internal
  */
  shift(e, t, n, r) {
    if (e & 131072)
      this.pushState(e & 65535, this.pos);
    else if ((e & 262144) == 0) {
      let s = e, { parser: o } = this.p;
      (r > this.pos || t <= o.maxNode) && (this.pos = r, o.stateFlag(
        s,
        1
        /* StateFlag.Skipped */
      ) || (this.reducePos = r)), this.pushState(s, n), this.shiftContext(t, n), t <= o.maxNode && this.buffer.push(t, n, r, 4);
    } else
      this.pos = r, this.shiftContext(t, n), t <= this.p.parser.maxNode && this.buffer.push(t, n, r, 4);
  }
  // Apply an action
  /**
  @internal
  */
  apply(e, t, n, r) {
    e & 65536 ? this.reduce(e) : this.shift(e, t, n, r);
  }
  // Add a prebuilt (reused) node into the buffer.
  /**
  @internal
  */
  useNode(e, t) {
    let n = this.p.reused.length - 1;
    (n < 0 || this.p.reused[n] != e) && (this.p.reused.push(e), n++);
    let r = this.pos;
    this.reducePos = this.pos = r + e.length, this.pushState(t, r), this.buffer.push(
      n,
      r,
      this.reducePos,
      -1
      /* size == -1 means this is a reused value */
    ), this.curContext && this.updateContext(this.curContext.tracker.reuse(this.curContext.context, e, this, this.p.stream.reset(this.pos - e.length)));
  }
  // Split the stack. Due to the buffer sharing and the fact
  // that `this.stack` tends to stay quite shallow, this isn't very
  // expensive.
  /**
  @internal
  */
  split() {
    let e = this, t = e.buffer.length;
    for (; t > 0 && e.buffer[t - 2] > e.reducePos; )
      t -= 4;
    let n = e.buffer.slice(t), r = e.bufferBase + t;
    for (; e && r == e.bufferBase; )
      e = e.parent;
    return new Xh(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, n, r, this.curContext, this.lookAhead, e);
  }
  // Try to recover from an error by 'deleting' (ignoring) one token.
  /**
  @internal
  */
  recoverByDelete(e, t) {
    let n = e <= this.p.parser.maxNode;
    n && this.storeNode(e, this.pos, t, 4), this.storeNode(0, this.pos, t, n ? 8 : 4), this.pos = this.reducePos = t, this.score -= 190;
  }
  /**
  Check if the given term would be able to be shifted (optionally
  after some reductions) on this stack. This can be useful for
  external tokenizers that want to make sure they only provide a
  given token when it applies.
  */
  canShift(e) {
    for (let t = new WL(this); ; ) {
      let n = this.p.parser.stateSlot(
        t.state,
        4
        /* ParseState.DefaultReduce */
      ) || this.p.parser.hasAction(t.state, e);
      if (n == 0)
        return !1;
      if ((n & 65536) == 0)
        return !0;
      t.reduce(n);
    }
  }
  // Apply up to Recover.MaxNext recovery actions that conceptually
  // inserts some missing token or rule.
  /**
  @internal
  */
  recoverByInsert(e) {
    if (this.stack.length >= 300)
      return [];
    let t = this.p.parser.nextStates(this.state);
    if (t.length > 8 || this.stack.length >= 120) {
      let r = [];
      for (let s = 0, o; s < t.length; s += 2)
        (o = t[s + 1]) != this.state && this.p.parser.hasAction(o, e) && r.push(t[s], o);
      if (this.stack.length < 120)
        for (let s = 0; r.length < 8 && s < t.length; s += 2) {
          let o = t[s + 1];
          r.some((l, a) => a & 1 && l == o) || r.push(t[s], o);
        }
      t = r;
    }
    let n = [];
    for (let r = 0; r < t.length && n.length < 4; r += 2) {
      let s = t[r + 1];
      if (s == this.state)
        continue;
      let o = this.split();
      o.pushState(s, this.pos), o.storeNode(0, o.pos, o.pos, 4, !0), o.shiftContext(t[r], this.pos), o.reducePos = this.pos, o.score -= 200, n.push(o);
    }
    return n;
  }
  // Force a reduce, if possible. Return false if that can't
  // be done.
  /**
  @internal
  */
  forceReduce() {
    let { parser: e } = this.p, t = e.stateSlot(
      this.state,
      5
      /* ParseState.ForcedReduce */
    );
    if ((t & 65536) == 0)
      return !1;
    if (!e.validAction(this.state, t)) {
      let n = t >> 19, r = t & 65535, s = this.stack.length - n * 3;
      if (s < 0 || e.getGoto(this.stack[s], r, !1) < 0) {
        let o = this.findForcedReduction();
        if (o == null)
          return !1;
        t = o;
      }
      this.storeNode(0, this.pos, this.pos, 4, !0), this.score -= 100;
    }
    return this.reducePos = this.pos, this.reduce(t), !0;
  }
  /**
  Try to scan through the automaton to find some kind of reduction
  that can be applied. Used when the regular ForcedReduce field
  isn't a valid action. @internal
  */
  findForcedReduction() {
    let { parser: e } = this.p, t = [], n = (r, s) => {
      if (!t.includes(r))
        return t.push(r), e.allActions(r, (o) => {
          if (!(o & 393216)) if (o & 65536) {
            let l = (o >> 19) - s;
            if (l > 1) {
              let a = o & 65535, h = this.stack.length - l * 3;
              if (h >= 0 && e.getGoto(this.stack[h], a, !1) >= 0)
                return l << 19 | 65536 | a;
            }
          } else {
            let l = n(o, s + 1);
            if (l != null)
              return l;
          }
        });
    };
    return n(this.state, 0);
  }
  /**
  @internal
  */
  forceAll() {
    for (; !this.p.parser.stateFlag(
      this.state,
      2
      /* StateFlag.Accepting */
    ); )
      if (!this.forceReduce()) {
        this.storeNode(0, this.pos, this.pos, 4, !0);
        break;
      }
    return this;
  }
  /**
  Check whether this state has no further actions (assumed to be a direct descendant of the
  top state, since any other states must be able to continue
  somehow). @internal
  */
  get deadEnd() {
    if (this.stack.length != 3)
      return !1;
    let { parser: e } = this.p;
    return e.data[e.stateSlot(
      this.state,
      1
      /* ParseState.Actions */
    )] == 65535 && !e.stateSlot(
      this.state,
      4
      /* ParseState.DefaultReduce */
    );
  }
  /**
  Restart the stack (put it back in its start state). Only safe
  when this.stack.length == 3 (state is directly below the top
  state). @internal
  */
  restart() {
    this.storeNode(0, this.pos, this.pos, 4, !0), this.state = this.stack[0], this.stack.length = 0;
  }
  /**
  @internal
  */
  sameState(e) {
    if (this.state != e.state || this.stack.length != e.stack.length)
      return !1;
    for (let t = 0; t < this.stack.length; t += 3)
      if (this.stack[t] != e.stack[t])
        return !1;
    return !0;
  }
  /**
  Get the parser used by this stack.
  */
  get parser() {
    return this.p.parser;
  }
  /**
  Test whether a given dialect (by numeric ID, as exported from
  the terms file) is enabled.
  */
  dialectEnabled(e) {
    return this.p.parser.dialect.flags[e];
  }
  shiftContext(e, t) {
    this.curContext && this.updateContext(this.curContext.tracker.shift(this.curContext.context, e, this, this.p.stream.reset(t)));
  }
  reduceContext(e, t) {
    this.curContext && this.updateContext(this.curContext.tracker.reduce(this.curContext.context, e, this, this.p.stream.reset(t)));
  }
  /**
  @internal
  */
  emitContext() {
    let e = this.buffer.length - 1;
    (e < 0 || this.buffer[e] != -3) && this.buffer.push(this.curContext.hash, this.pos, this.pos, -3);
  }
  /**
  @internal
  */
  emitLookAhead() {
    let e = this.buffer.length - 1;
    (e < 0 || this.buffer[e] != -4) && this.buffer.push(this.lookAhead, this.pos, this.pos, -4);
  }
  updateContext(e) {
    if (e != this.curContext.context) {
      let t = new O1(this.curContext.tracker, e);
      t.hash != this.curContext.hash && this.emitContext(), this.curContext = t;
    }
  }
  /**
  @internal
  */
  setLookAhead(e) {
    e > this.lookAhead && (this.emitLookAhead(), this.lookAhead = e);
  }
  /**
  @internal
  */
  close() {
    this.curContext && this.curContext.tracker.strict && this.emitContext(), this.lookAhead > 0 && this.emitLookAhead();
  }
}
class O1 {
  constructor(e, t) {
    this.tracker = e, this.context = t, this.hash = e.strict ? e.hash(t) : 0;
  }
}
class WL {
  constructor(e) {
    this.start = e, this.state = e.state, this.stack = e.stack, this.base = this.stack.length;
  }
  reduce(e) {
    let t = e & 65535, n = e >> 19;
    n == 0 ? (this.stack == this.start.stack && (this.stack = this.stack.slice()), this.stack.push(this.state, 0, 0), this.base += 3) : this.base -= (n - 1) * 3;
    let r = this.start.p.parser.getGoto(this.stack[this.base - 3], t, !0);
    this.state = r;
  }
}
class Lh {
  constructor(e, t, n) {
    this.stack = e, this.pos = t, this.index = n, this.buffer = e.buffer, this.index == 0 && this.maybeNext();
  }
  static create(e, t = e.bufferBase + e.buffer.length) {
    return new Lh(e, t, t - e.bufferBase);
  }
  maybeNext() {
    let e = this.stack.parent;
    e != null && (this.index = this.stack.bufferBase - e.bufferBase, this.stack = e, this.buffer = e.buffer);
  }
  get id() {
    return this.buffer[this.index - 4];
  }
  get start() {
    return this.buffer[this.index - 3];
  }
  get end() {
    return this.buffer[this.index - 2];
  }
  get size() {
    return this.buffer[this.index - 1];
  }
  next() {
    this.index -= 4, this.pos -= 4, this.index == 0 && this.maybeNext();
  }
  fork() {
    return new Lh(this.stack, this.pos, this.index);
  }
}
function po(i, e = Uint16Array) {
  if (typeof i != "string")
    return i;
  let t = null;
  for (let n = 0, r = 0; n < i.length; ) {
    let s = 0;
    for (; ; ) {
      let o = i.charCodeAt(n++), l = !1;
      if (o == 126) {
        s = 65535;
        break;
      }
      o >= 92 && o--, o >= 34 && o--;
      let a = o - 32;
      if (a >= 46 && (a -= 46, l = !0), s += a, l)
        break;
      s *= 46;
    }
    t ? t[r++] = s : t = new e(s);
  }
  return t;
}
class Ua {
  constructor() {
    this.start = -1, this.value = -1, this.end = -1, this.extended = -1, this.lookAhead = 0, this.mask = 0, this.context = 0;
  }
}
const p1 = new Ua();
class zL {
  /**
  @internal
  */
  constructor(e, t) {
    this.input = e, this.ranges = t, this.chunk = "", this.chunkOff = 0, this.chunk2 = "", this.chunk2Pos = 0, this.next = -1, this.token = p1, this.rangeIndex = 0, this.pos = this.chunkPos = t[0].from, this.range = t[0], this.end = t[t.length - 1].to, this.readNext();
  }
  /**
  @internal
  */
  resolveOffset(e, t) {
    let n = this.range, r = this.rangeIndex, s = this.pos + e;
    for (; s < n.from; ) {
      if (!r)
        return null;
      let o = this.ranges[--r];
      s -= n.from - o.to, n = o;
    }
    for (; t < 0 ? s > n.to : s >= n.to; ) {
      if (r == this.ranges.length - 1)
        return null;
      let o = this.ranges[++r];
      s += o.from - n.to, n = o;
    }
    return s;
  }
  /**
  @internal
  */
  clipPos(e) {
    if (e >= this.range.from && e < this.range.to)
      return e;
    for (let t of this.ranges)
      if (t.to > e)
        return Math.max(e, t.from);
    return this.end;
  }
  /**
  Look at a code unit near the stream position. `.peek(0)` equals
  `.next`, `.peek(-1)` gives you the previous character, and so
  on.
  
  Note that looking around during tokenizing creates dependencies
  on potentially far-away content, which may reduce the
  effectiveness incremental parsing—when looking forward—or even
  cause invalid reparses when looking backward more than 25 code
  units, since the library does not track lookbehind.
  */
  peek(e) {
    let t = this.chunkOff + e, n, r;
    if (t >= 0 && t < this.chunk.length)
      n = this.pos + e, r = this.chunk.charCodeAt(t);
    else {
      let s = this.resolveOffset(e, 1);
      if (s == null)
        return -1;
      if (n = s, n >= this.chunk2Pos && n < this.chunk2Pos + this.chunk2.length)
        r = this.chunk2.charCodeAt(n - this.chunk2Pos);
      else {
        let o = this.rangeIndex, l = this.range;
        for (; l.to <= n; )
          l = this.ranges[++o];
        this.chunk2 = this.input.chunk(this.chunk2Pos = n), n + this.chunk2.length > l.to && (this.chunk2 = this.chunk2.slice(0, l.to - n)), r = this.chunk2.charCodeAt(0);
      }
    }
    return n >= this.token.lookAhead && (this.token.lookAhead = n + 1), r;
  }
  /**
  Accept a token. By default, the end of the token is set to the
  current stream position, but you can pass an offset (relative to
  the stream position) to change that.
  */
  acceptToken(e, t = 0) {
    let n = t ? this.resolveOffset(t, -1) : this.pos;
    if (n == null || n < this.token.start)
      throw new RangeError("Token end out of bounds");
    this.token.value = e, this.token.end = n;
  }
  /**
  Accept a token ending at a specific given position.
  */
  acceptTokenTo(e, t) {
    this.token.value = e, this.token.end = t;
  }
  getChunk() {
    if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {
      let { chunk: e, chunkPos: t } = this;
      this.chunk = this.chunk2, this.chunkPos = this.chunk2Pos, this.chunk2 = e, this.chunk2Pos = t, this.chunkOff = this.pos - this.chunkPos;
    } else {
      this.chunk2 = this.chunk, this.chunk2Pos = this.chunkPos;
      let e = this.input.chunk(this.pos), t = this.pos + e.length;
      this.chunk = t > this.range.to ? e.slice(0, this.range.to - this.pos) : e, this.chunkPos = this.pos, this.chunkOff = 0;
    }
  }
  readNext() {
    return this.chunkOff >= this.chunk.length && (this.getChunk(), this.chunkOff == this.chunk.length) ? this.next = -1 : this.next = this.chunk.charCodeAt(this.chunkOff);
  }
  /**
  Move the stream forward N (defaults to 1) code units. Returns
  the new value of [`next`](#lr.InputStream.next).
  */
  advance(e = 1) {
    for (this.chunkOff += e; this.pos + e >= this.range.to; ) {
      if (this.rangeIndex == this.ranges.length - 1)
        return this.setDone();
      e -= this.range.to - this.pos, this.range = this.ranges[++this.rangeIndex], this.pos = this.range.from;
    }
    return this.pos += e, this.pos >= this.token.lookAhead && (this.token.lookAhead = this.pos + 1), this.readNext();
  }
  setDone() {
    return this.pos = this.chunkPos = this.end, this.range = this.ranges[this.rangeIndex = this.ranges.length - 1], this.chunk = "", this.next = -1;
  }
  /**
  @internal
  */
  reset(e, t) {
    if (t ? (this.token = t, t.start = e, t.lookAhead = e + 1, t.value = t.extended = -1) : this.token = p1, this.pos != e) {
      if (this.pos = e, e == this.end)
        return this.setDone(), this;
      for (; e < this.range.from; )
        this.range = this.ranges[--this.rangeIndex];
      for (; e >= this.range.to; )
        this.range = this.ranges[++this.rangeIndex];
      e >= this.chunkPos && e < this.chunkPos + this.chunk.length ? this.chunkOff = e - this.chunkPos : (this.chunk = "", this.chunkOff = 0), this.readNext();
    }
    return this;
  }
  /**
  @internal
  */
  read(e, t) {
    if (e >= this.chunkPos && t <= this.chunkPos + this.chunk.length)
      return this.chunk.slice(e - this.chunkPos, t - this.chunkPos);
    if (e >= this.chunk2Pos && t <= this.chunk2Pos + this.chunk2.length)
      return this.chunk2.slice(e - this.chunk2Pos, t - this.chunk2Pos);
    if (e >= this.range.from && t <= this.range.to)
      return this.input.read(e, t);
    let n = "";
    for (let r of this.ranges) {
      if (r.from >= t)
        break;
      r.to > e && (n += this.input.read(Math.max(r.from, e), Math.min(r.to, t)));
    }
    return n;
  }
}
class os {
  constructor(e, t) {
    this.data = e, this.id = t;
  }
  token(e, t) {
    let { parser: n } = t.p;
    gv(this.data, e, t, this.id, n.data, n.tokenPrecTable);
  }
}
os.prototype.contextual = os.prototype.fallback = os.prototype.extend = !1;
class Bh {
  constructor(e, t, n) {
    this.precTable = t, this.elseToken = n, this.data = typeof e == "string" ? po(e) : e;
  }
  token(e, t) {
    let n = e.pos, r = 0;
    for (; ; ) {
      let s = e.next < 0, o = e.resolveOffset(1, 1);
      if (gv(this.data, e, t, 0, this.data, this.precTable), e.token.value > -1)
        break;
      if (this.elseToken == null)
        return;
      if (s || r++, o == null)
        break;
      e.reset(o, e.token);
    }
    r && (e.reset(n, e.token), e.acceptToken(this.elseToken, r));
  }
}
Bh.prototype.contextual = os.prototype.fallback = os.prototype.extend = !1;
class Ze {
  /**
  Create a tokenizer. The first argument is the function that,
  given an input stream, scans for the types of tokens it
  recognizes at the stream's position, and calls
  [`acceptToken`](#lr.InputStream.acceptToken) when it finds
  one.
  */
  constructor(e, t = {}) {
    this.token = e, this.contextual = !!t.contextual, this.fallback = !!t.fallback, this.extend = !!t.extend;
  }
}
function gv(i, e, t, n, r, s) {
  let o = 0, l = 1 << n, { dialect: a } = t.p.parser;
  e: for (; (l & i[o]) != 0; ) {
    let h = i[o + 1];
    for (let d = o + 3; d < h; d += 2)
      if ((i[d + 1] & l) > 0) {
        let O = i[d];
        if (a.allows(O) && (e.token.value == -1 || e.token.value == O || IL(O, e.token.value, r, s))) {
          e.acceptToken(O);
          break;
        }
      }
    let c = e.next, f = 0, u = i[o + 2];
    if (e.next < 0 && u > f && i[h + u * 3 - 3] == 65535) {
      o = i[h + u * 3 - 1];
      continue e;
    }
    for (; f < u; ) {
      let d = f + u >> 1, O = h + d + (d << 1), p = i[O], m = i[O + 1] || 65536;
      if (c < p)
        u = d;
      else if (c >= m)
        f = d + 1;
      else {
        o = i[O + 2], e.advance();
        continue e;
      }
    }
    break;
  }
}
function m1(i, e, t) {
  for (let n = e, r; (r = i[n]) != 65535; n++)
    if (r == t)
      return n - e;
  return -1;
}
function IL(i, e, t, n) {
  let r = m1(t, n, e);
  return r < 0 || m1(t, n, i) < r;
}
const _t = typeof process < "u" && process.env && /\bparse\b/.test(process.env.LOG);
let Pf = null;
function g1(i, e, t) {
  let n = i.cursor(ve.IncludeAnonymous);
  for (n.moveTo(e); ; )
    if (!(t < 0 ? n.childBefore(e) : n.childAfter(e)))
      for (; ; ) {
        if ((t < 0 ? n.to < e : n.from > e) && !n.type.isError)
          return t < 0 ? Math.max(0, Math.min(
            n.to - 1,
            e - 25
            /* Lookahead.Margin */
          )) : Math.min(i.length, Math.max(
            n.from + 1,
            e + 25
            /* Lookahead.Margin */
          ));
        if (t < 0 ? n.prevSibling() : n.nextSibling())
          break;
        if (!n.parent())
          return t < 0 ? 0 : i.length;
      }
}
let NL = class {
  constructor(e, t) {
    this.fragments = e, this.nodeSet = t, this.i = 0, this.fragment = null, this.safeFrom = -1, this.safeTo = -1, this.trees = [], this.start = [], this.index = [], this.nextFragment();
  }
  nextFragment() {
    let e = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];
    if (e) {
      for (this.safeFrom = e.openStart ? g1(e.tree, e.from + e.offset, 1) - e.offset : e.from, this.safeTo = e.openEnd ? g1(e.tree, e.to + e.offset, -1) - e.offset : e.to; this.trees.length; )
        this.trees.pop(), this.start.pop(), this.index.pop();
      this.trees.push(e.tree), this.start.push(-e.offset), this.index.push(0), this.nextStart = this.safeFrom;
    } else
      this.nextStart = 1e9;
  }
  // `pos` must be >= any previously given `pos` for this cursor
  nodeAt(e) {
    if (e < this.nextStart)
      return null;
    for (; this.fragment && this.safeTo <= e; )
      this.nextFragment();
    if (!this.fragment)
      return null;
    for (; ; ) {
      let t = this.trees.length - 1;
      if (t < 0)
        return this.nextFragment(), null;
      let n = this.trees[t], r = this.index[t];
      if (r == n.children.length) {
        this.trees.pop(), this.start.pop(), this.index.pop();
        continue;
      }
      let s = n.children[r], o = this.start[t] + n.positions[r];
      if (o > e)
        return this.nextStart = o, null;
      if (s instanceof Qe) {
        if (o == e) {
          if (o < this.safeFrom)
            return null;
          let l = o + s.length;
          if (l <= this.safeTo) {
            let a = s.prop(se.lookAhead);
            if (!a || l + a < this.fragment.to)
              return s;
          }
        }
        this.index[t]++, o + s.length >= Math.max(this.safeFrom, e) && (this.trees.push(s), this.start.push(o), this.index.push(0));
      } else
        this.index[t]++, this.nextStart = o + s.length;
    }
  }
};
class jL {
  constructor(e, t) {
    this.stream = t, this.tokens = [], this.mainToken = null, this.actions = [], this.tokens = e.tokenizers.map((n) => new Ua());
  }
  getActions(e) {
    let t = 0, n = null, { parser: r } = e.p, { tokenizers: s } = r, o = r.stateSlot(
      e.state,
      3
      /* ParseState.TokenizerMask */
    ), l = e.curContext ? e.curContext.hash : 0, a = 0;
    for (let h = 0; h < s.length; h++) {
      if ((1 << h & o) == 0)
        continue;
      let c = s[h], f = this.tokens[h];
      if (!(n && !c.fallback) && ((c.contextual || f.start != e.pos || f.mask != o || f.context != l) && (this.updateCachedToken(f, c, e), f.mask = o, f.context = l), f.lookAhead > f.end + 25 && (a = Math.max(f.lookAhead, a)), f.value != 0)) {
        let u = t;
        if (f.extended > -1 && (t = this.addActions(e, f.extended, f.end, t)), t = this.addActions(e, f.value, f.end, t), !c.extend && (n = f, t > u))
          break;
      }
    }
    for (; this.actions.length > t; )
      this.actions.pop();
    return a && e.setLookAhead(a), !n && e.pos == this.stream.end && (n = new Ua(), n.value = e.p.parser.eofTerm, n.start = n.end = e.pos, t = this.addActions(e, n.value, n.end, t)), this.mainToken = n, this.actions;
  }
  getMainToken(e) {
    if (this.mainToken)
      return this.mainToken;
    let t = new Ua(), { pos: n, p: r } = e;
    return t.start = n, t.end = Math.min(n + 1, r.stream.end), t.value = n == r.stream.end ? r.parser.eofTerm : 0, t;
  }
  updateCachedToken(e, t, n) {
    let r = this.stream.clipPos(n.pos);
    if (t.token(this.stream.reset(r, e), n), e.value > -1) {
      let { parser: s } = n.p;
      for (let o = 0; o < s.specialized.length; o++)
        if (s.specialized[o] == e.value) {
          let l = s.specializers[o](this.stream.read(e.start, e.end), n);
          if (l >= 0 && n.p.parser.dialect.allows(l >> 1)) {
            (l & 1) == 0 ? e.value = l >> 1 : e.extended = l >> 1;
            break;
          }
        }
    } else
      e.value = 0, e.end = this.stream.clipPos(r + 1);
  }
  putAction(e, t, n, r) {
    for (let s = 0; s < r; s += 3)
      if (this.actions[s] == e)
        return r;
    return this.actions[r++] = e, this.actions[r++] = t, this.actions[r++] = n, r;
  }
  addActions(e, t, n, r) {
    let { state: s } = e, { parser: o } = e.p, { data: l } = o;
    for (let a = 0; a < 2; a++)
      for (let h = o.stateSlot(
        s,
        a ? 2 : 1
        /* ParseState.Actions */
      ); ; h += 3) {
        if (l[h] == 65535)
          if (l[h + 1] == 1)
            h = hn(l, h + 2);
          else {
            r == 0 && l[h + 1] == 2 && (r = this.putAction(hn(l, h + 2), t, n, r));
            break;
          }
        l[h] == t && (r = this.putAction(hn(l, h + 1), t, n, r));
      }
    return r;
  }
}
class UL {
  constructor(e, t, n, r) {
    this.parser = e, this.input = t, this.ranges = r, this.recovering = 0, this.nextStackID = 9812, this.minStackPos = 0, this.reused = [], this.stoppedAt = null, this.lastBigReductionStart = -1, this.lastBigReductionSize = 0, this.bigReductionCount = 0, this.stream = new zL(t, r), this.tokens = new jL(e, this.stream), this.topTerm = e.top[1];
    let { from: s } = r[0];
    this.stacks = [Xh.start(this, e.top[0], s)], this.fragments = n.length && this.stream.end - s > e.bufferLength * 4 ? new NL(n, e.nodeSet) : null;
  }
  get parsedPos() {
    return this.minStackPos;
  }
  // Move the parser forward. This will process all parse stacks at
  // `this.pos` and try to advance them to a further position. If no
  // stack for such a position is found, it'll start error-recovery.
  //
  // When the parse is finished, this will return a syntax tree. When
  // not, it returns `null`.
  advance() {
    let e = this.stacks, t = this.minStackPos, n = this.stacks = [], r, s;
    if (this.bigReductionCount > 300 && e.length == 1) {
      let [o] = e;
      for (; o.forceReduce() && o.stack.length && o.stack[o.stack.length - 2] >= this.lastBigReductionStart; )
        ;
      this.bigReductionCount = this.lastBigReductionSize = 0;
    }
    for (let o = 0; o < e.length; o++) {
      let l = e[o];
      for (; ; ) {
        if (this.tokens.mainToken = null, l.pos > t)
          n.push(l);
        else {
          if (this.advanceStack(l, n, e))
            continue;
          {
            r || (r = [], s = []), r.push(l);
            let a = this.tokens.getMainToken(l);
            s.push(a.value, a.end);
          }
        }
        break;
      }
    }
    if (!n.length) {
      let o = r && GL(r);
      if (o)
        return _t && console.log("Finish with " + this.stackID(o)), this.stackToTree(o);
      if (this.parser.strict)
        throw _t && r && console.log("Stuck with token " + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : "none")), new SyntaxError("No parse at " + t);
      this.recovering || (this.recovering = 5);
    }
    if (this.recovering && r) {
      let o = this.stoppedAt != null && r[0].pos > this.stoppedAt ? r[0] : this.runRecovery(r, s, n);
      if (o)
        return _t && console.log("Force-finish " + this.stackID(o)), this.stackToTree(o.forceAll());
    }
    if (this.recovering) {
      let o = this.recovering == 1 ? 1 : this.recovering * 3;
      if (n.length > o)
        for (n.sort((l, a) => a.score - l.score); n.length > o; )
          n.pop();
      n.some((l) => l.reducePos > t) && this.recovering--;
    } else if (n.length > 1) {
      e: for (let o = 0; o < n.length - 1; o++) {
        let l = n[o];
        for (let a = o + 1; a < n.length; a++) {
          let h = n[a];
          if (l.sameState(h) || l.buffer.length > 500 && h.buffer.length > 500)
            if ((l.score - h.score || l.buffer.length - h.buffer.length) > 0)
              n.splice(a--, 1);
            else {
              n.splice(o--, 1);
              continue e;
            }
        }
      }
      n.length > 12 && n.splice(
        12,
        n.length - 12
        /* Rec.MaxStackCount */
      );
    }
    this.minStackPos = n[0].pos;
    for (let o = 1; o < n.length; o++)
      n[o].pos < this.minStackPos && (this.minStackPos = n[o].pos);
    return null;
  }
  stopAt(e) {
    if (this.stoppedAt != null && this.stoppedAt < e)
      throw new RangeError("Can't move stoppedAt forward");
    this.stoppedAt = e;
  }
  // Returns an updated version of the given stack, or null if the
  // stack can't advance normally. When `split` and `stacks` are
  // given, stacks split off by ambiguous operations will be pushed to
  // `split`, or added to `stacks` if they move `pos` forward.
  advanceStack(e, t, n) {
    let r = e.pos, { parser: s } = this, o = _t ? this.stackID(e) + " -> " : "";
    if (this.stoppedAt != null && r > this.stoppedAt)
      return e.forceReduce() ? e : null;
    if (this.fragments) {
      let h = e.curContext && e.curContext.tracker.strict, c = h ? e.curContext.hash : 0;
      for (let f = this.fragments.nodeAt(r); f; ) {
        let u = this.parser.nodeSet.types[f.type.id] == f.type ? s.getGoto(e.state, f.type.id) : -1;
        if (u > -1 && f.length && (!h || (f.prop(se.contextHash) || 0) == c))
          return e.useNode(f, u), _t && console.log(o + this.stackID(e) + ` (via reuse of ${s.getName(f.type.id)})`), !0;
        if (!(f instanceof Qe) || f.children.length == 0 || f.positions[0] > 0)
          break;
        let d = f.children[0];
        if (d instanceof Qe && f.positions[0] == 0)
          f = d;
        else
          break;
      }
    }
    let l = s.stateSlot(
      e.state,
      4
      /* ParseState.DefaultReduce */
    );
    if (l > 0)
      return e.reduce(l), _t && console.log(o + this.stackID(e) + ` (via always-reduce ${s.getName(
        l & 65535
        /* Action.ValueMask */
      )})`), !0;
    if (e.stack.length >= 8400)
      for (; e.stack.length > 6e3 && e.forceReduce(); )
        ;
    let a = this.tokens.getActions(e);
    for (let h = 0; h < a.length; ) {
      let c = a[h++], f = a[h++], u = a[h++], d = h == a.length || !n, O = d ? e : e.split(), p = this.tokens.mainToken;
      if (O.apply(c, f, p ? p.start : O.pos, u), _t && console.log(o + this.stackID(O) + ` (via ${(c & 65536) == 0 ? "shift" : `reduce of ${s.getName(
        c & 65535
        /* Action.ValueMask */
      )}`} for ${s.getName(f)} @ ${r}${O == e ? "" : ", split"})`), d)
        return !0;
      O.pos > r ? t.push(O) : n.push(O);
    }
    return !1;
  }
  // Advance a given stack forward as far as it will go. Returns the
  // (possibly updated) stack if it got stuck, or null if it moved
  // forward and was given to `pushStackDedup`.
  advanceFully(e, t) {
    let n = e.pos;
    for (; ; ) {
      if (!this.advanceStack(e, null, null))
        return !1;
      if (e.pos > n)
        return y1(e, t), !0;
    }
  }
  runRecovery(e, t, n) {
    let r = null, s = !1;
    for (let o = 0; o < e.length; o++) {
      let l = e[o], a = t[o << 1], h = t[(o << 1) + 1], c = _t ? this.stackID(l) + " -> " : "";
      if (l.deadEnd && (s || (s = !0, l.restart(), _t && console.log(c + this.stackID(l) + " (restarted)"), this.advanceFully(l, n))))
        continue;
      let f = l.split(), u = c;
      for (let d = 0; f.forceReduce() && d < 10 && (_t && console.log(u + this.stackID(f) + " (via force-reduce)"), !this.advanceFully(f, n)); d++)
        _t && (u = this.stackID(f) + " -> ");
      for (let d of l.recoverByInsert(a))
        _t && console.log(c + this.stackID(d) + " (via recover-insert)"), this.advanceFully(d, n);
      this.stream.end > l.pos ? (h == l.pos && (h++, a = 0), l.recoverByDelete(a, h), _t && console.log(c + this.stackID(l) + ` (via recover-delete ${this.parser.getName(a)})`), y1(l, n)) : (!r || r.score < l.score) && (r = l);
    }
    return r;
  }
  // Convert the stack's buffer to a syntax tree.
  stackToTree(e) {
    return e.close(), Qe.build({
      buffer: Lh.create(e),
      nodeSet: this.parser.nodeSet,
      topID: this.topTerm,
      maxBufferLength: this.parser.bufferLength,
      reused: this.reused,
      start: this.ranges[0].from,
      length: e.pos - this.ranges[0].from,
      minRepeatType: this.parser.minRepeatTerm
    });
  }
  stackID(e) {
    let t = (Pf || (Pf = /* @__PURE__ */ new WeakMap())).get(e);
    return t || Pf.set(e, t = String.fromCodePoint(this.nextStackID++)), t + e;
  }
}
function y1(i, e) {
  for (let t = 0; t < e.length; t++) {
    let n = e[t];
    if (n.pos == i.pos && n.sameState(i)) {
      e[t].score < i.score && (e[t] = i);
      return;
    }
  }
  e.push(i);
}
class YL {
  constructor(e, t, n) {
    this.source = e, this.flags = t, this.disabled = n;
  }
  allows(e) {
    return !this.disabled || this.disabled[e] == 0;
  }
}
const $f = (i) => i;
class Rl {
  /**
  Define a context tracker.
  */
  constructor(e) {
    this.start = e.start, this.shift = e.shift || $f, this.reduce = e.reduce || $f, this.reuse = e.reuse || $f, this.hash = e.hash || (() => 0), this.strict = e.strict !== !1;
  }
}
class bi extends qp {
  /**
  @internal
  */
  constructor(e) {
    if (super(), this.wrappers = [], e.version != 14)
      throw new RangeError(`Parser version (${e.version}) doesn't match runtime version (14)`);
    let t = e.nodeNames.split(" ");
    this.minRepeatTerm = t.length;
    for (let l = 0; l < e.repeatNodeCount; l++)
      t.push("");
    let n = Object.keys(e.topRules).map((l) => e.topRules[l][1]), r = [];
    for (let l = 0; l < t.length; l++)
      r.push([]);
    function s(l, a, h) {
      r[l].push([a, a.deserialize(String(h))]);
    }
    if (e.nodeProps)
      for (let l of e.nodeProps) {
        let a = l[0];
        typeof a == "string" && (a = se[a]);
        for (let h = 1; h < l.length; ) {
          let c = l[h++];
          if (c >= 0)
            s(c, a, l[h++]);
          else {
            let f = l[h + -c];
            for (let u = -c; u > 0; u--)
              s(l[h++], a, f);
            h++;
          }
        }
      }
    this.nodeSet = new kl(t.map((l, a) => ht.define({
      name: a >= this.minRepeatTerm ? void 0 : l,
      id: a,
      props: r[a],
      top: n.indexOf(a) > -1,
      error: a == 0,
      skipped: e.skippedNodes && e.skippedNodes.indexOf(a) > -1
    }))), e.propSources && (this.nodeSet = this.nodeSet.extend(...e.propSources)), this.strict = !1, this.bufferLength = Ww;
    let o = po(e.tokenData);
    this.context = e.context, this.specializerSpecs = e.specialized || [], this.specialized = new Uint16Array(this.specializerSpecs.length);
    for (let l = 0; l < this.specializerSpecs.length; l++)
      this.specialized[l] = this.specializerSpecs[l].term;
    this.specializers = this.specializerSpecs.map(S1), this.states = po(e.states, Uint32Array), this.data = po(e.stateData), this.goto = po(e.goto), this.maxTerm = e.maxTerm, this.tokenizers = e.tokenizers.map((l) => typeof l == "number" ? new os(o, l) : l), this.topRules = e.topRules, this.dialects = e.dialects || {}, this.dynamicPrecedences = e.dynamicPrecedences || null, this.tokenPrecTable = e.tokenPrec, this.termNames = e.termNames || null, this.maxNode = this.nodeSet.types.length - 1, this.dialect = this.parseDialect(), this.top = this.topRules[Object.keys(this.topRules)[0]];
  }
  createParse(e, t, n) {
    let r = new UL(this, e, t, n);
    for (let s of this.wrappers)
      r = s(r, e, t, n);
    return r;
  }
  /**
  Get a goto table entry @internal
  */
  getGoto(e, t, n = !1) {
    let r = this.goto;
    if (t >= r[0])
      return -1;
    for (let s = r[t + 1]; ; ) {
      let o = r[s++], l = o & 1, a = r[s++];
      if (l && n)
        return a;
      for (let h = s + (o >> 1); s < h; s++)
        if (r[s] == e)
          return a;
      if (l)
        return -1;
    }
  }
  /**
  Check if this state has an action for a given terminal @internal
  */
  hasAction(e, t) {
    let n = this.data;
    for (let r = 0; r < 2; r++)
      for (let s = this.stateSlot(
        e,
        r ? 2 : 1
        /* ParseState.Actions */
      ), o; ; s += 3) {
        if ((o = n[s]) == 65535)
          if (n[s + 1] == 1)
            o = n[s = hn(n, s + 2)];
          else {
            if (n[s + 1] == 2)
              return hn(n, s + 2);
            break;
          }
        if (o == t || o == 0)
          return hn(n, s + 1);
      }
    return 0;
  }
  /**
  @internal
  */
  stateSlot(e, t) {
    return this.states[e * 6 + t];
  }
  /**
  @internal
  */
  stateFlag(e, t) {
    return (this.stateSlot(
      e,
      0
      /* ParseState.Flags */
    ) & t) > 0;
  }
  /**
  @internal
  */
  validAction(e, t) {
    return !!this.allActions(e, (n) => n == t ? !0 : null);
  }
  /**
  @internal
  */
  allActions(e, t) {
    let n = this.stateSlot(
      e,
      4
      /* ParseState.DefaultReduce */
    ), r = n ? t(n) : void 0;
    for (let s = this.stateSlot(
      e,
      1
      /* ParseState.Actions */
    ); r == null; s += 3) {
      if (this.data[s] == 65535)
        if (this.data[s + 1] == 1)
          s = hn(this.data, s + 2);
        else
          break;
      r = t(hn(this.data, s + 1));
    }
    return r;
  }
  /**
  Get the states that can follow this one through shift actions or
  goto jumps. @internal
  */
  nextStates(e) {
    let t = [];
    for (let n = this.stateSlot(
      e,
      1
      /* ParseState.Actions */
    ); ; n += 3) {
      if (this.data[n] == 65535)
        if (this.data[n + 1] == 1)
          n = hn(this.data, n + 2);
        else
          break;
      if ((this.data[n + 2] & 1) == 0) {
        let r = this.data[n + 1];
        t.some((s, o) => o & 1 && s == r) || t.push(this.data[n], r);
      }
    }
    return t;
  }
  /**
  Configure the parser. Returns a new parser instance that has the
  given settings modified. Settings not provided in `config` are
  kept from the original parser.
  */
  configure(e) {
    let t = Object.assign(Object.create(bi.prototype), this);
    if (e.props && (t.nodeSet = this.nodeSet.extend(...e.props)), e.top) {
      let n = this.topRules[e.top];
      if (!n)
        throw new RangeError(`Invalid top rule name ${e.top}`);
      t.top = n;
    }
    return e.tokenizers && (t.tokenizers = this.tokenizers.map((n) => {
      let r = e.tokenizers.find((s) => s.from == n);
      return r ? r.to : n;
    })), e.specializers && (t.specializers = this.specializers.slice(), t.specializerSpecs = this.specializerSpecs.map((n, r) => {
      let s = e.specializers.find((l) => l.from == n.external);
      if (!s)
        return n;
      let o = Object.assign(Object.assign({}, n), { external: s.to });
      return t.specializers[r] = S1(o), o;
    })), e.contextTracker && (t.context = e.contextTracker), e.dialect && (t.dialect = this.parseDialect(e.dialect)), e.strict != null && (t.strict = e.strict), e.wrap && (t.wrappers = t.wrappers.concat(e.wrap)), e.bufferLength != null && (t.bufferLength = e.bufferLength), t;
  }
  /**
  Tells you whether any [parse wrappers](#lr.ParserConfig.wrap)
  are registered for this parser.
  */
  hasWrappers() {
    return this.wrappers.length > 0;
  }
  /**
  Returns the name associated with a given term. This will only
  work for all terms when the parser was generated with the
  `--names` option. By default, only the names of tagged terms are
  stored.
  */
  getName(e) {
    return this.termNames ? this.termNames[e] : String(e <= this.maxNode && this.nodeSet.types[e].name || e);
  }
  /**
  The eof term id is always allocated directly after the node
  types. @internal
  */
  get eofTerm() {
    return this.maxNode + 1;
  }
  /**
  The type of top node produced by the parser.
  */
  get topNode() {
    return this.nodeSet.types[this.top[1]];
  }
  /**
  @internal
  */
  dynamicPrecedence(e) {
    let t = this.dynamicPrecedences;
    return t == null ? 0 : t[e] || 0;
  }
  /**
  @internal
  */
  parseDialect(e) {
    let t = Object.keys(this.dialects), n = t.map(() => !1);
    if (e)
      for (let s of e.split(" ")) {
        let o = t.indexOf(s);
        o >= 0 && (n[o] = !0);
      }
    let r = null;
    for (let s = 0; s < t.length; s++)
      if (!n[s])
        for (let o = this.dialects[t[s]], l; (l = this.data[o++]) != 65535; )
          (r || (r = new Uint8Array(this.maxTerm + 1)))[l] = 1;
    return new YL(e, n, r);
  }
  /**
  Used by the output of the parser generator. Not available to
  user code. @hide
  */
  static deserialize(e) {
    return new bi(e);
  }
}
function hn(i, e) {
  return i[e] | i[e + 1] << 16;
}
function GL(i) {
  let e = null;
  for (let t of i) {
    let n = t.p.stoppedAt;
    (t.pos == t.p.stream.end || n != null && t.pos > n) && t.p.parser.stateFlag(
      t.state,
      2
      /* StateFlag.Accepting */
    ) && (!e || e.score < t.score) && (e = t);
  }
  return e;
}
function S1(i) {
  if (i.external) {
    let e = i.extend ? 1 : 0;
    return (t, n) => i.external(t, n) << 1 | e;
  }
  return i.get;
}
const FL = 315, HL = 316, b1 = 1, KL = 2, JL = 3, eB = 4, tB = 317, iB = 319, nB = 320, rB = 5, sB = 6, oB = 0, Ud = [
  9,
  10,
  11,
  12,
  13,
  32,
  133,
  160,
  5760,
  8192,
  8193,
  8194,
  8195,
  8196,
  8197,
  8198,
  8199,
  8200,
  8201,
  8202,
  8232,
  8233,
  8239,
  8287,
  12288
], yv = 125, lB = 59, Yd = 47, aB = 42, hB = 43, cB = 45, fB = 60, uB = 44, dB = 63, OB = 46, pB = 91, mB = new Rl({
  start: !1,
  shift(i, e) {
    return e == rB || e == sB || e == iB ? i : e == nB;
  },
  strict: !1
}), gB = new Ze((i, e) => {
  let { next: t } = i;
  (t == yv || t == -1 || e.context) && i.acceptToken(tB);
}, { contextual: !0, fallback: !0 }), yB = new Ze((i, e) => {
  let { next: t } = i, n;
  Ud.indexOf(t) > -1 || t == Yd && ((n = i.peek(1)) == Yd || n == aB) || t != yv && t != lB && t != -1 && !e.context && i.acceptToken(FL);
}, { contextual: !0 }), SB = new Ze((i, e) => {
  i.next == pB && !e.context && i.acceptToken(HL);
}, { contextual: !0 }), bB = new Ze((i, e) => {
  let { next: t } = i;
  if (t == hB || t == cB) {
    if (i.advance(), t == i.next) {
      i.advance();
      let n = !e.context && e.canShift(b1);
      i.acceptToken(n ? b1 : KL);
    }
  } else t == dB && i.peek(1) == OB && (i.advance(), i.advance(), (i.next < 48 || i.next > 57) && i.acceptToken(JL));
}, { contextual: !0 });
function Tf(i, e) {
  return i >= 65 && i <= 90 || i >= 97 && i <= 122 || i == 95 || i >= 192 || !e && i >= 48 && i <= 57;
}
const xB = new Ze((i, e) => {
  if (i.next != fB || !e.dialectEnabled(oB) || (i.advance(), i.next == Yd)) return;
  let t = 0;
  for (; Ud.indexOf(i.next) > -1; )
    i.advance(), t++;
  if (Tf(i.next, !0)) {
    for (i.advance(), t++; Tf(i.next, !1); )
      i.advance(), t++;
    for (; Ud.indexOf(i.next) > -1; )
      i.advance(), t++;
    if (i.next == uB) return;
    for (let n = 0; ; n++) {
      if (n == 7) {
        if (!Tf(i.next, !0)) return;
        break;
      }
      if (i.next != "extends".charCodeAt(n)) break;
      i.advance(), t++;
    }
  }
  i.acceptToken(eB, -t);
}), wB = ki({
  "get set async static": y.modifier,
  "for while do if else switch try catch finally return throw break continue default case": y.controlKeyword,
  "in of await yield void typeof delete instanceof as satisfies": y.operatorKeyword,
  "let var const using function class extends": y.definitionKeyword,
  "import export from": y.moduleKeyword,
  "with debugger new": y.keyword,
  TemplateString: y.special(y.string),
  super: y.atom,
  BooleanLiteral: y.bool,
  this: y.self,
  null: y.null,
  Star: y.modifier,
  VariableName: y.variableName,
  "CallExpression/VariableName TaggedTemplateExpression/VariableName": y.function(y.variableName),
  VariableDefinition: y.definition(y.variableName),
  Label: y.labelName,
  PropertyName: y.propertyName,
  PrivatePropertyName: y.special(y.propertyName),
  "CallExpression/MemberExpression/PropertyName": y.function(y.propertyName),
  "FunctionDeclaration/VariableDefinition": y.function(y.definition(y.variableName)),
  "ClassDeclaration/VariableDefinition": y.definition(y.className),
  "NewExpression/VariableName": y.className,
  PropertyDefinition: y.definition(y.propertyName),
  PrivatePropertyDefinition: y.definition(y.special(y.propertyName)),
  UpdateOp: y.updateOperator,
  "LineComment Hashbang": y.lineComment,
  BlockComment: y.blockComment,
  Number: y.number,
  String: y.string,
  Escape: y.escape,
  ArithOp: y.arithmeticOperator,
  LogicOp: y.logicOperator,
  BitOp: y.bitwiseOperator,
  CompareOp: y.compareOperator,
  RegExp: y.regexp,
  Equals: y.definitionOperator,
  Arrow: y.function(y.punctuation),
  ": Spread": y.punctuation,
  "( )": y.paren,
  "[ ]": y.squareBracket,
  "{ }": y.brace,
  "InterpolationStart InterpolationEnd": y.special(y.brace),
  ".": y.derefOperator,
  ", ;": y.separator,
  "@": y.meta,
  TypeName: y.typeName,
  TypeDefinition: y.definition(y.typeName),
  "type enum interface implements namespace module declare": y.definitionKeyword,
  "abstract global Privacy readonly override": y.modifier,
  "is keyof unique infer asserts": y.operatorKeyword,
  JSXAttributeValue: y.attributeValue,
  JSXText: y.content,
  "JSXStartTag JSXStartCloseTag JSXSelfCloseEndTag JSXEndTag": y.angleBracket,
  "JSXIdentifier JSXNameSpacedName": y.tagName,
  "JSXAttribute/JSXIdentifier JSXAttribute/JSXNameSpacedName": y.attributeName,
  "JSXBuiltin/JSXIdentifier": y.standard(y.tagName)
}), kB = { __proto__: null, export: 20, as: 25, from: 33, default: 36, async: 41, function: 42, in: 52, out: 55, const: 56, extends: 60, this: 64, true: 72, false: 72, null: 84, void: 88, typeof: 92, super: 108, new: 142, delete: 154, yield: 163, await: 167, class: 172, public: 235, private: 235, protected: 235, readonly: 237, instanceof: 256, satisfies: 259, import: 292, keyof: 349, unique: 353, infer: 359, asserts: 395, is: 397, abstract: 417, implements: 419, type: 421, let: 424, var: 426, using: 429, interface: 435, enum: 439, namespace: 445, module: 447, declare: 451, global: 455, for: 474, of: 483, while: 486, with: 490, do: 494, if: 498, else: 500, switch: 504, case: 510, try: 516, catch: 520, finally: 524, return: 528, throw: 532, break: 536, continue: 540, debugger: 544 }, vB = { __proto__: null, async: 129, get: 131, set: 133, declare: 195, public: 197, private: 197, protected: 197, static: 199, abstract: 201, override: 203, readonly: 209, accessor: 211, new: 401 }, QB = { __proto__: null, "<": 193 }, PB = bi.deserialize({
  version: 14,
  states: "$EOQ%TQlOOO%[QlOOO'_QpOOP(lO`OOO*zQ!0MxO'#CiO+RO#tO'#CjO+aO&jO'#CjO+oO#@ItO'#DaO.QQlO'#DgO.bQlO'#DrO%[QlO'#DzO0fQlO'#ESOOQ!0Lf'#E['#E[O1PQ`O'#EXOOQO'#Ep'#EpOOQO'#Ik'#IkO1XQ`O'#GsO1dQ`O'#EoO1iQ`O'#EoO3hQ!0MxO'#JqO6[Q!0MxO'#JrO6uQ`O'#F]O6zQ,UO'#FtOOQ!0Lf'#Ff'#FfO7VO7dO'#FfO7eQMhO'#F|O9[Q`O'#F{OOQ!0Lf'#Jr'#JrOOQ!0Lb'#Jq'#JqO9aQ`O'#GwOOQ['#K^'#K^O9lQ`O'#IXO9qQ!0LrO'#IYOOQ['#J_'#J_OOQ['#I^'#I^Q`QlOOQ`QlOOO9yQ!L^O'#DvO:QQlO'#EOO:XQlO'#EQO9gQ`O'#GsO:`QMhO'#CoO:nQ`O'#EnO:yQ`O'#EyO;OQMhO'#FeO;mQ`O'#GsOOQO'#K_'#K_O;rQ`O'#K_O<QQ`O'#G{O<QQ`O'#G|O<QQ`O'#HOO9gQ`O'#HRO<wQ`O'#HUO>`Q`O'#CeO>pQ`O'#HbO>xQ`O'#HhO>xQ`O'#HjO`QlO'#HlO>xQ`O'#HnO>xQ`O'#HqO>}Q`O'#HwO?SQ!0LsO'#H}O%[QlO'#IPO?_Q!0LsO'#IRO?jQ!0LsO'#ITO9qQ!0LrO'#IVO?uQ!0MxO'#CiO@wQpO'#DlQOQ`OOO%[QlO'#EQOA_Q`O'#ETO:`QMhO'#EnOAjQ`O'#EnOAuQ!bO'#FeOOQ['#Cg'#CgOOQ!0Lb'#Dq'#DqOOQ!0Lb'#Ju'#JuO%[QlO'#JuOOQO'#Jx'#JxOOQO'#Ig'#IgOBuQpO'#EgOOQ!0Lb'#Ef'#EfOOQ!0Lb'#J|'#J|OCqQ!0MSO'#EgOC{QpO'#EWOOQO'#Jw'#JwODaQpO'#JxOEnQpO'#EWOC{QpO'#EgPE{O&2DjO'#CbPOOO)CD|)CD|OOOO'#I_'#I_OFWO#tO,59UOOQ!0Lh,59U,59UOOOO'#I`'#I`OFfO&jO,59UOFtQ!L^O'#DcOOOO'#Ib'#IbOF{O#@ItO,59{OOQ!0Lf,59{,59{OGZQlO'#IcOGnQ`O'#JsOImQ!fO'#JsO+}QlO'#JsOItQ`O,5:ROJ[Q`O'#EpOJiQ`O'#KSOJtQ`O'#KROJtQ`O'#KROJ|Q`O,5;^OKRQ`O'#KQOOQ!0Ln,5:^,5:^OKYQlO,5:^OMWQ!0MxO,5:fOMwQ`O,5:nONbQ!0LrO'#KPONiQ`O'#KOO9aQ`O'#KOON}Q`O'#KOO! VQ`O,5;]O! [Q`O'#KOO!#aQ!fO'#JrOOQ!0Lh'#Ci'#CiO%[QlO'#ESO!$PQ!fO,5:sOOQS'#Jy'#JyOOQO-E<i-E<iO9gQ`O,5=_O!$gQ`O,5=_O!$lQlO,5;ZO!&oQMhO'#EkO!(YQ`O,5;ZO!(_QlO'#DyO!(iQpO,5;dO!(qQpO,5;dO%[QlO,5;dOOQ['#FT'#FTOOQ['#FV'#FVO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eOOQ['#FZ'#FZO!)PQlO,5;tOOQ!0Lf,5;y,5;yOOQ!0Lf,5;z,5;zOOQ!0Lf,5;|,5;|O%[QlO'#IoO!+SQ!0LrO,5<iO%[QlO,5;eO!&oQMhO,5;eO!+qQMhO,5;eO!-cQMhO'#E^O%[QlO,5;wOOQ!0Lf,5;{,5;{O!-jQ,UO'#FjO!.gQ,UO'#KWO!.RQ,UO'#KWO!.nQ,UO'#KWOOQO'#KW'#KWO!/SQ,UO,5<SOOOW,5<`,5<`O!/eQlO'#FvOOOW'#In'#InO7VO7dO,5<QO!/lQ,UO'#FxOOQ!0Lf,5<Q,5<QO!0]Q$IUO'#CyOOQ!0Lh'#C}'#C}O!0pO#@ItO'#DRO!1^QMjO,5<eO!1eQ`O,5<hO!3QQ(CWO'#GXO!3_Q`O'#GYO!3dQ`O'#GYO!5SQ(CWO'#G^O!6XQpO'#GbOOQO'#Gn'#GnO!+xQMhO'#GmOOQO'#Gp'#GpO!+xQMhO'#GoO!6zQ$IUO'#JkOOQ!0Lh'#Jk'#JkO!7UQ`O'#JjO!7dQ`O'#JiO!7lQ`O'#CuOOQ!0Lh'#C{'#C{O!7}Q`O'#C}OOQ!0Lh'#DV'#DVOOQ!0Lh'#DX'#DXO1SQ`O'#DZO!+xQMhO'#GPO!+xQMhO'#GRO!8SQ`O'#GTO!8XQ`O'#GUO!3dQ`O'#G[O!+xQMhO'#GaO<QQ`O'#JjO!8^Q`O'#EqO!8{Q`O,5<gOOQ!0Lb'#Cr'#CrO!9TQ`O'#ErO!9}QpO'#EsOOQ!0Lb'#KQ'#KQO!:UQ!0LrO'#K`O9qQ!0LrO,5=cO`QlO,5>sOOQ['#Jg'#JgOOQ[,5>t,5>tOOQ[-E<[-E<[O!<TQ!0MxO,5:bO!9xQpO,5:`O!>nQ!0MxO,5:jO%[QlO,5:jO!AUQ!0MxO,5:lOOQO,5@y,5@yO!AuQMhO,5=_O!BTQ!0LrO'#JhO9[Q`O'#JhO!BfQ!0LrO,59ZO!BqQpO,59ZO!ByQMhO,59ZO:`QMhO,59ZO!CUQ`O,5;ZO!C^Q`O'#HaO!CrQ`O'#KcO%[QlO,5;}O!9xQpO,5<PO!CzQ`O,5=zO!DPQ`O,5=zO!DUQ`O,5=zO9qQ!0LrO,5=zO<QQ`O,5=jOOQO'#Cy'#CyO!DdQpO,5=gO!DlQMhO,5=hO!DwQ`O,5=jO!D|Q!bO,5=mO!EUQ`O'#K_O>}Q`O'#HWO9gQ`O'#HYO!EZQ`O'#HYO:`QMhO'#H[O!E`Q`O'#H[OOQ[,5=p,5=pO!EeQ`O'#H]O!EvQ`O'#CoO!E{Q`O,59PO!FVQ`O,59PO!H[QlO,59POOQ[,59P,59PO!HlQ!0LrO,59PO%[QlO,59PO!JwQlO'#HdOOQ['#He'#HeOOQ['#Hf'#HfO`QlO,5=|O!K_Q`O,5=|O`QlO,5>SO`QlO,5>UO!KdQ`O,5>WO`QlO,5>YO!KiQ`O,5>]O!KnQlO,5>cOOQ[,5>i,5>iO%[QlO,5>iO9qQ!0LrO,5>kOOQ[,5>m,5>mO# xQ`O,5>mOOQ[,5>o,5>oO# xQ`O,5>oOOQ[,5>q,5>qO#!fQpO'#D_O%[QlO'#JuO##XQpO'#JuO##cQpO'#DmO##tQpO'#DmO#&VQlO'#DmO#&^Q`O'#JtO#&fQ`O,5:WO#&kQ`O'#EtO#&yQ`O'#KTO#'RQ`O,5;_O#'WQpO'#DmO#'eQpO'#EVOOQ!0Lf,5:o,5:oO%[QlO,5:oO#'lQ`O,5:oO>}Q`O,5;YO!BqQpO,5;YO!ByQMhO,5;YO:`QMhO,5;YO#'tQ`O,5@aO#'yQ07dO,5:sOOQO-E<e-E<eO#)PQ!0MSO,5;ROC{QpO,5:rO#)ZQpO,5:rOC{QpO,5;RO!BfQ!0LrO,5:rOOQ!0Lb'#Ej'#EjOOQO,5;R,5;RO%[QlO,5;RO#)hQ!0LrO,5;RO#)sQ!0LrO,5;RO!BqQpO,5:rOOQO,5;X,5;XO#*RQ!0LrO,5;RPOOO'#I]'#I]P#*gO&2DjO,58|POOO,58|,58|OOOO-E<]-E<]OOQ!0Lh1G.p1G.pOOOO-E<^-E<^OOOO,59},59}O#*rQ!bO,59}OOOO-E<`-E<`OOQ!0Lf1G/g1G/gO#*wQ!fO,5>}O+}QlO,5>}OOQO,5?T,5?TO#+RQlO'#IcOOQO-E<a-E<aO#+`Q`O,5@_O#+hQ!fO,5@_O#+oQ`O,5@mOOQ!0Lf1G/m1G/mO%[QlO,5@nO#+wQ`O'#IiOOQO-E<g-E<gO#+oQ`O,5@mOOQ!0Lb1G0x1G0xOOQ!0Ln1G/x1G/xOOQ!0Ln1G0Y1G0YO%[QlO,5@kO#,]Q!0LrO,5@kO#,nQ!0LrO,5@kO#,uQ`O,5@jO9aQ`O,5@jO#,}Q`O,5@jO#-]Q`O'#IlO#,uQ`O,5@jOOQ!0Lb1G0w1G0wO!(iQpO,5:uO!(tQpO,5:uOOQS,5:w,5:wO#-}QdO,5:wO#.VQMhO1G2yO9gQ`O1G2yOOQ!0Lf1G0u1G0uO#.eQ!0MxO1G0uO#/jQ!0MvO,5;VOOQ!0Lh'#GW'#GWO#0WQ!0MzO'#JkO!$lQlO1G0uO#2cQ!fO'#JvO%[QlO'#JvO#2mQ`O,5:eOOQ!0Lh'#D_'#D_OOQ!0Lf1G1O1G1OO%[QlO1G1OOOQ!0Lf1G1f1G1fO#2rQ`O1G1OO#5WQ!0MxO1G1PO#5_Q!0MxO1G1PO#7uQ!0MxO1G1PO#7|Q!0MxO1G1PO#:dQ!0MxO1G1PO#<zQ!0MxO1G1PO#=RQ!0MxO1G1PO#=YQ!0MxO1G1PO#?pQ!0MxO1G1PO#?wQ!0MxO1G1PO#BUQ?MtO'#CiO#DPQ?MtO1G1`O#DWQ?MtO'#JrO#DkQ!0MxO,5?ZOOQ!0Lb-E<m-E<mO#FxQ!0MxO1G1PO#GuQ!0MzO1G1POOQ!0Lf1G1P1G1PO#HxQMjO'#J{O#ISQ`O,5:xO#IXQ!0MxO1G1cO#I{Q,UO,5<WO#JTQ,UO,5<XO#J]Q,UO'#FoO#JtQ`O'#FnOOQO'#KX'#KXOOQO'#Im'#ImO#JyQ,UO1G1nOOQ!0Lf1G1n1G1nOOOW1G1y1G1yO#K[Q?MtO'#JqO#KfQ`O,5<bO!)PQlO,5<bOOOW-E<l-E<lOOQ!0Lf1G1l1G1lO#KkQpO'#KWOOQ!0Lf,5<d,5<dO#KsQpO,5<dO#KxQMhO'#DTOOOO'#Ia'#IaO#LPO#@ItO,59mOOQ!0Lh,59m,59mO%[QlO1G2PO!8XQ`O'#IqO#L[Q`O,5<zOOQ!0Lh,5<w,5<wO!+xQMhO'#ItO#LxQMjO,5=XO!+xQMhO'#IvO#MkQMjO,5=ZO!&oQMhO,5=]OOQO1G2S1G2SO#MuQ!dO'#CrO#NYQ(CWO'#ErO$ _QpO'#GbO$ uQ!dO,5<sO$ |Q`O'#KZO9aQ`O'#KZO$![Q`O,5<uO!+xQMhO,5<tO$!aQ`O'#GZO$!rQ`O,5<tO$!wQ!dO'#GWO$#UQ!dO'#K[O$#`Q`O'#K[O!&oQMhO'#K[O$#eQ`O,5<xO$#jQlO'#JuO$#tQpO'#GcO##tQpO'#GcO$$VQ`O'#GgO!3dQ`O'#GkO$$[Q!0LrO'#IsO$$gQpO,5<|OOQ!0Lp,5<|,5<|O$$nQpO'#GcO$${QpO'#GdO$%^QpO'#GdO$%cQMjO,5=XO$%sQMjO,5=ZOOQ!0Lh,5=^,5=^O!+xQMhO,5@UO!+xQMhO,5@UO$&TQ`O'#IxO$&iQ`O,5@TO$&qQ`O,59aOOQ!0Lh,59i,59iO$'hQ$IYO,59uOOQ!0Lh'#Jo'#JoO$(ZQMjO,5<kO$(|QMjO,5<mO@oQ`O,5<oOOQ!0Lh,5<p,5<pO$)WQ`O,5<vO$)]QMjO,5<{O$)mQ`O,5@UO$){Q`O'#KOO!$lQlO1G2RO$*QQ`O1G2RO9aQ`O'#KRO9aQ`O'#EtO%[QlO'#EtO9aQ`O'#IzO$*VQ!0LrO,5@zOOQ[1G2}1G2}OOQ[1G4_1G4_OOQ!0Lf1G/|1G/|OOQ!0Lf1G/z1G/zO$,XQ!0MxO1G0UOOQ[1G2y1G2yO!&oQMhO1G2yO%[QlO1G2yO#.YQ`O1G2yO$.]QMhO'#EkOOQ!0Lb,5@S,5@SO$.jQ!0LrO,5@SOOQ[1G.u1G.uO!BfQ!0LrO1G.uO!BqQpO1G.uO!ByQMhO1G.uO$.{Q`O1G0uO$/QQ`O'#CiO$/]Q`O'#KdO$/eQ`O,5={O$/jQ`O'#KdO$/oQ`O'#KdO$/}Q`O'#JQO$0]Q`O,5@}O$0eQ!fO1G1iOOQ!0Lf1G1k1G1kO9gQ`O1G3fO@oQ`O1G3fO$0lQ`O1G3fO$0qQ`O1G3fOOQ[1G3f1G3fO!DwQ`O1G3UO!&oQMhO1G3RO$0vQ`O1G3ROOQ[1G3S1G3SO!&oQMhO1G3SO$0{Q`O1G3SO$1TQpO'#HQOOQ[1G3U1G3UO!6SQpO'#I|O!D|Q!bO1G3XOOQ[1G3X1G3XOOQ[,5=r,5=rO$1]QMhO,5=tO9gQ`O,5=tO$$VQ`O,5=vO9[Q`O,5=vO!BqQpO,5=vO!ByQMhO,5=vO:`QMhO,5=vO$1kQ`O'#KbO$1vQ`O,5=wOOQ[1G.k1G.kO$1{Q!0LrO1G.kO@oQ`O1G.kO$2WQ`O1G.kO9qQ!0LrO1G.kO$4`Q!fO,5APO$4mQ`O,5APO9aQ`O,5APO$4xQlO,5>OO$5PQ`O,5>OOOQ[1G3h1G3hO`QlO1G3hOOQ[1G3n1G3nOOQ[1G3p1G3pO>xQ`O1G3rO$5UQlO1G3tO$9YQlO'#HsOOQ[1G3w1G3wO$9gQ`O'#HyO>}Q`O'#H{OOQ[1G3}1G3}O$9oQlO1G3}O9qQ!0LrO1G4TOOQ[1G4V1G4VOOQ!0Lb'#G_'#G_O9qQ!0LrO1G4XO9qQ!0LrO1G4ZO$=vQ`O,5@aO!)PQlO,5;`O9aQ`O,5;`O>}Q`O,5:XO!)PQlO,5:XO!BqQpO,5:XO$={Q?MtO,5:XOOQO,5;`,5;`O$>VQpO'#IdO$>mQ`O,5@`OOQ!0Lf1G/r1G/rO$>uQpO'#IjO$?PQ`O,5@oOOQ!0Lb1G0y1G0yO##tQpO,5:XOOQO'#If'#IfO$?XQpO,5:qOOQ!0Ln,5:q,5:qO#'oQ`O1G0ZOOQ!0Lf1G0Z1G0ZO%[QlO1G0ZOOQ!0Lf1G0t1G0tO>}Q`O1G0tO!BqQpO1G0tO!ByQMhO1G0tOOQ!0Lb1G5{1G5{O!BfQ!0LrO1G0^OOQO1G0m1G0mO%[QlO1G0mO$?`Q!0LrO1G0mO$?kQ!0LrO1G0mO!BqQpO1G0^OC{QpO1G0^O$?yQ!0LrO1G0mOOQO1G0^1G0^O$@_Q!0MxO1G0mPOOO-E<Z-E<ZPOOO1G.h1G.hOOOO1G/i1G/iO$@iQ!bO,5<iO$@qQ!fO1G4iOOQO1G4o1G4oO%[QlO,5>}O$@{Q`O1G5yO$ATQ`O1G6XO$A]Q!fO1G6YO9aQ`O,5?TO$AgQ!0MxO1G6VO%[QlO1G6VO$AwQ!0LrO1G6VO$BYQ`O1G6UO$BYQ`O1G6UO9aQ`O1G6UO$BbQ`O,5?WO9aQ`O,5?WOOQO,5?W,5?WO$BvQ`O,5?WO$){Q`O,5?WOOQO-E<j-E<jOOQS1G0a1G0aOOQS1G0c1G0cO#.QQ`O1G0cOOQ[7+(e7+(eO!&oQMhO7+(eO%[QlO7+(eO$CUQ`O7+(eO$CaQMhO7+(eO$CoQ!0MzO,5=XO$EzQ!0MzO,5=ZO$HVQ!0MzO,5=XO$JhQ!0MzO,5=ZO$LyQ!0MzO,59uO% OQ!0MzO,5<kO%#ZQ!0MzO,5<mO%%fQ!0MzO,5<{OOQ!0Lf7+&a7+&aO%'wQ!0MxO7+&aO%(kQlO'#IeO%(xQ`O,5@bO%)QQ!fO,5@bOOQ!0Lf1G0P1G0PO%)[Q`O7+&jOOQ!0Lf7+&j7+&jO%)aQ?MtO,5:fO%[QlO7+&zO%)kQ?MtO,5:bO%)xQ?MtO,5:jO%*SQ?MtO,5:lO%*^QMhO'#IhO%*hQ`O,5@gOOQ!0Lh1G0d1G0dOOQO1G1r1G1rOOQO1G1s1G1sO%*pQ!jO,5<ZO!)PQlO,5<YOOQO-E<k-E<kOOQ!0Lf7+'Y7+'YOOOW7+'e7+'eOOOW1G1|1G1|O%*{Q`O1G1|OOQ!0Lf1G2O1G2OOOOO,59o,59oO%+QQ!dO,59oOOOO-E<_-E<_OOQ!0Lh1G/X1G/XO%+XQ!0MxO7+'kOOQ!0Lh,5?],5?]O%+{QMhO1G2fP%,SQ`O'#IqPOQ!0Lh-E<o-E<oO%,pQMjO,5?`OOQ!0Lh-E<r-E<rO%-cQMjO,5?bOOQ!0Lh-E<t-E<tO%-mQ!dO1G2wO%-tQ!dO'#CrO%.[QMhO'#KRO$#jQlO'#JuOOQ!0Lh1G2_1G2_O%.cQ`O'#IpO%.wQ`O,5@uO%.wQ`O,5@uO%/PQ`O,5@uO%/[Q`O,5@uOOQO1G2a1G2aO%/jQMjO1G2`O!+xQMhO1G2`O%/zQ(CWO'#IrO%0XQ`O,5@vO!&oQMhO,5@vO%0aQ!dO,5@vOOQ!0Lh1G2d1G2dO%2qQ!fO'#CiO%2{Q`O,5=POOQ!0Lb,5<},5<}O%3TQpO,5<}OOQ!0Lb,5=O,5=OOClQ`O,5<}O%3`QpO,5<}OOQ!0Lb,5=R,5=RO$){Q`O,5=VOOQO,5?_,5?_OOQO-E<q-E<qOOQ!0Lp1G2h1G2hO##tQpO,5<}O$#jQlO,5=PO%3nQ`O,5=OO%3yQpO,5=OO!+xQMhO'#ItO%4sQMjO1G2sO!+xQMhO'#IvO%5fQMjO1G2uO%5pQMjO1G5pO%5zQMjO1G5pOOQO,5?d,5?dOOQO-E<v-E<vOOQO1G.{1G.{O!9xQpO,59wO%[QlO,59wOOQ!0Lh,5<j,5<jO%6XQ`O1G2ZO!+xQMhO1G2bO!+xQMhO1G5pO!+xQMhO1G5pO%6^Q!0MxO7+'mOOQ!0Lf7+'m7+'mO!$lQlO7+'mO%7QQ`O,5;`OOQ!0Lb,5?f,5?fOOQ!0Lb-E<x-E<xO%7VQ!dO'#K]O#'oQ`O7+(eO4UQ!fO7+(eO$CXQ`O7+(eO%7aQ!0MvO'#CiO%7tQ!0MvO,5=SO%8fQ`O,5=SO%8nQ`O,5=SOOQ!0Lb1G5n1G5nOOQ[7+$a7+$aO!BfQ!0LrO7+$aO!BqQpO7+$aO!$lQlO7+&aO%8sQ`O'#JPO%9[Q`O,5AOOOQO1G3g1G3gO9gQ`O,5AOO%9[Q`O,5AOO%9dQ`O,5AOOOQO,5?l,5?lOOQO-E=O-E=OOOQ!0Lf7+'T7+'TO%9iQ`O7+)QO9qQ!0LrO7+)QO9gQ`O7+)QO@oQ`O7+)QOOQ[7+(p7+(pO%9nQ!0MvO7+(mO!&oQMhO7+(mO!DrQ`O7+(nOOQ[7+(n7+(nO!&oQMhO7+(nO%9xQ`O'#KaO%:TQ`O,5=lOOQO,5?h,5?hOOQO-E<z-E<zOOQ[7+(s7+(sO%;gQpO'#HZOOQ[1G3`1G3`O!&oQMhO1G3`O%[QlO1G3`O%;nQ`O1G3`O%;yQMhO1G3`O9qQ!0LrO1G3bO$$VQ`O1G3bO9[Q`O1G3bO!BqQpO1G3bO!ByQMhO1G3bO%<XQ`O'#JOO%<mQ`O,5@|O%<uQpO,5@|OOQ!0Lb1G3c1G3cOOQ[7+$V7+$VO@oQ`O7+$VO9qQ!0LrO7+$VO%=QQ`O7+$VO%[QlO1G6kO%[QlO1G6lO%=VQ!0LrO1G6kO%=aQlO1G3jO%=hQ`O1G3jO%=mQlO1G3jOOQ[7+)S7+)SO9qQ!0LrO7+)^O`QlO7+)`OOQ['#Kg'#KgOOQ['#JR'#JRO%=tQlO,5>_OOQ[,5>_,5>_O%[QlO'#HtO%>RQ`O'#HvOOQ[,5>e,5>eO9aQ`O,5>eOOQ[,5>g,5>gOOQ[7+)i7+)iOOQ[7+)o7+)oOOQ[7+)s7+)sOOQ[7+)u7+)uO%>WQpO1G5{O%>rQ?MtO1G0zO%>|Q`O1G0zOOQO1G/s1G/sO%?XQ?MtO1G/sO>}Q`O1G/sO!)PQlO'#DmOOQO,5?O,5?OOOQO-E<b-E<bOOQO,5?U,5?UOOQO-E<h-E<hO!BqQpO1G/sOOQO-E<d-E<dOOQ!0Ln1G0]1G0]OOQ!0Lf7+%u7+%uO#'oQ`O7+%uOOQ!0Lf7+&`7+&`O>}Q`O7+&`O!BqQpO7+&`OOQO7+%x7+%xO$@_Q!0MxO7+&XOOQO7+&X7+&XO%[QlO7+&XO%?cQ!0LrO7+&XO!BfQ!0LrO7+%xO!BqQpO7+%xO%?nQ!0LrO7+&XO%?|Q!0MxO7++qO%[QlO7++qO%@^Q`O7++pO%@^Q`O7++pOOQO1G4r1G4rO9aQ`O1G4rO%@fQ`O1G4rOOQS7+%}7+%}O#'oQ`O<<LPO4UQ!fO<<LPO%@tQ`O<<LPOOQ[<<LP<<LPO!&oQMhO<<LPO%[QlO<<LPO%@|Q`O<<LPO%AXQ!0MzO,5?`O%CdQ!0MzO,5?bO%EoQ!0MzO1G2`O%HQQ!0MzO1G2sO%J]Q!0MzO1G2uO%LhQ!fO,5?PO%[QlO,5?POOQO-E<c-E<cO%LrQ`O1G5|OOQ!0Lf<<JU<<JUO%LzQ?MtO1G0uO& RQ?MtO1G1PO& YQ?MtO1G1PO&#ZQ?MtO1G1PO&#bQ?MtO1G1PO&%cQ?MtO1G1PO&'dQ?MtO1G1PO&'kQ?MtO1G1PO&'rQ?MtO1G1PO&)sQ?MtO1G1PO&)zQ?MtO1G1PO&*RQ!0MxO<<JfO&+yQ?MtO1G1PO&,vQ?MvO1G1PO&-yQ?MvO'#JkO&0PQ?MtO1G1cO&0^Q?MtO1G0UO&0hQMjO,5?SOOQO-E<f-E<fO!)PQlO'#FqOOQO'#KY'#KYOOQO1G1u1G1uO&0rQ`O1G1tO&0wQ?MtO,5?ZOOOW7+'h7+'hOOOO1G/Z1G/ZO&1RQ!dO1G4wOOQ!0Lh7+(Q7+(QP!&oQMhO,5?]O!+xQMhO7+(cO&1YQ`O,5?[O9aQ`O,5?[OOQO-E<n-E<nO&1hQ`O1G6aO&1hQ`O1G6aO&1pQ`O1G6aO&1{QMjO7+'zO&2]Q!dO,5?^O&2gQ`O,5?^O!&oQMhO,5?^OOQO-E<p-E<pO&2lQ!dO1G6bO&2vQ`O1G6bO&3OQ`O1G2kO!&oQMhO1G2kOOQ!0Lb1G2i1G2iOOQ!0Lb1G2j1G2jO%3TQpO1G2iO!BqQpO1G2iOClQ`O1G2iOOQ!0Lb1G2q1G2qO&3TQpO1G2iO&3cQ`O1G2kO$){Q`O1G2jOClQ`O1G2jO$#jQlO1G2kO&3kQ`O1G2jO&4_QMjO,5?`OOQ!0Lh-E<s-E<sO&5QQMjO,5?bOOQ!0Lh-E<u-E<uO!+xQMhO7++[OOQ!0Lh1G/c1G/cO&5[Q`O1G/cOOQ!0Lh7+'u7+'uO&5aQMjO7+'|O&5qQMjO7++[O&5{QMjO7++[O&6YQ!0MxO<<KXOOQ!0Lf<<KX<<KXO&6|Q`O1G0zO!&oQMhO'#IyO&7RQ`O,5@wO&9TQ!fO<<LPO!&oQMhO1G2nO&9[Q!0LrO1G2nOOQ[<<G{<<G{O!BfQ!0LrO<<G{O&9mQ!0MxO<<I{OOQ!0Lf<<I{<<I{OOQO,5?k,5?kO&:aQ`O,5?kO&:fQ`O,5?kOOQO-E<}-E<}O&:tQ`O1G6jO&:tQ`O1G6jO9gQ`O1G6jO@oQ`O<<LlOOQ[<<Ll<<LlO&:|Q`O<<LlO9qQ!0LrO<<LlOOQ[<<LX<<LXO%9nQ!0MvO<<LXOOQ[<<LY<<LYO!DrQ`O<<LYO&;RQpO'#I{O&;^Q`O,5@{O!)PQlO,5@{OOQ[1G3W1G3WOOQO'#I}'#I}O9qQ!0LrO'#I}O&;fQpO,5=uOOQ[,5=u,5=uO&;mQpO'#EgO&;tQpO'#GeO&;yQ`O7+(zO&<OQ`O7+(zOOQ[7+(z7+(zO!&oQMhO7+(zO%[QlO7+(zO&<WQ`O7+(zOOQ[7+(|7+(|O9qQ!0LrO7+(|O$$VQ`O7+(|O9[Q`O7+(|O!BqQpO7+(|O&<cQ`O,5?jOOQO-E<|-E<|OOQO'#H^'#H^O&<nQ`O1G6hO9qQ!0LrO<<GqOOQ[<<Gq<<GqO@oQ`O<<GqO&<vQ`O7+,VO&<{Q`O7+,WO%[QlO7+,VO%[QlO7+,WOOQ[7+)U7+)UO&=QQ`O7+)UO&=VQlO7+)UO&=^Q`O7+)UOOQ[<<Lx<<LxOOQ[<<Lz<<LzOOQ[-E=P-E=POOQ[1G3y1G3yO&=cQ`O,5>`OOQ[,5>b,5>bO&=hQ`O1G4PO9aQ`O7+&fO!)PQlO7+&fOOQO7+%_7+%_O&=mQ?MtO1G6YO>}Q`O7+%_OOQ!0Lf<<Ia<<IaOOQ!0Lf<<Iz<<IzO>}Q`O<<IzOOQO<<Is<<IsO$@_Q!0MxO<<IsO%[QlO<<IsOOQO<<Id<<IdO!BfQ!0LrO<<IdO&=wQ!0LrO<<IsO&>SQ!0MxO<= ]O&>dQ`O<= [OOQO7+*^7+*^O9aQ`O7+*^OOQ[ANAkANAkO&>lQ!fOANAkO!&oQMhOANAkO#'oQ`OANAkO4UQ!fOANAkO&>sQ`OANAkO%[QlOANAkO&>{Q!0MzO7+'zO&A^Q!0MzO,5?`O&CiQ!0MzO,5?bO&EtQ!0MzO7+'|O&HVQ!fO1G4kO&HaQ?MtO7+&aO&JeQ?MvO,5=XO&LlQ?MvO,5=ZO&L|Q?MvO,5=XO&M^Q?MvO,5=ZO&MnQ?MvO,59uO' tQ?MvO,5<kO'#wQ?MvO,5<mO'&]Q?MvO,5<{O'(RQ?MtO7+'kO'(`Q?MtO7+'mO'(mQ`O,5<]OOQO7+'`7+'`OOQ!0Lh7+*c7+*cO'(rQMjO<<K}OOQO1G4v1G4vO'(yQ`O1G4vO')UQ`O1G4vO')dQ`O7++{O')dQ`O7++{O!&oQMhO1G4xO')lQ!dO1G4xO')vQ`O7++|O'*OQ`O7+(VO'*ZQ!dO7+(VOOQ!0Lb7+(T7+(TOOQ!0Lb7+(U7+(UO!BqQpO7+(TOClQ`O7+(TO'*eQ`O7+(VO!&oQMhO7+(VO$){Q`O7+(UO'*jQ`O7+(VOClQ`O7+(UO'*rQMjO<<NvOOQ!0Lh7+$}7+$}O!+xQMhO<<NvO'*|Q!dO,5?eOOQO-E<w-E<wO'+WQ!0MvO7+(YO!&oQMhO7+(YOOQ[AN=gAN=gO9gQ`O1G5VOOQO1G5V1G5VO'+hQ`O1G5VO'+mQ`O7+,UO'+mQ`O7+,UO9qQ!0LrOANBWO@oQ`OANBWOOQ[ANBWANBWOOQ[ANAsANAsOOQ[ANAtANAtO'+uQ`O,5?gOOQO-E<y-E<yO',QQ?MtO1G6gOOQO,5?i,5?iOOQO-E<{-E<{OOQ[1G3a1G3aO',[Q`O,5=POOQ[<<Lf<<LfO!&oQMhO<<LfO&;yQ`O<<LfO',aQ`O<<LfO%[QlO<<LfOOQ[<<Lh<<LhO9qQ!0LrO<<LhO$$VQ`O<<LhO9[Q`O<<LhO',iQpO1G5UO',tQ`O7+,SOOQ[AN=]AN=]O9qQ!0LrOAN=]OOQ[<= q<= qOOQ[<= r<= rO',|Q`O<= qO'-RQ`O<= rOOQ[<<Lp<<LpO'-WQ`O<<LpO'-]QlO<<LpOOQ[1G3z1G3zO>}Q`O7+)kO'-dQ`O<<JQO'-oQ?MtO<<JQOOQO<<Hy<<HyOOQ!0LfAN?fAN?fOOQOAN?_AN?_O$@_Q!0MxOAN?_OOQOAN?OAN?OO%[QlOAN?_OOQO<<Mx<<MxOOQ[G27VG27VO!&oQMhOG27VO#'oQ`OG27VO'-yQ!fOG27VO4UQ!fOG27VO'.QQ`OG27VO'.YQ?MtO<<JfO'.gQ?MvO1G2`O'0]Q?MvO,5?`O'2`Q?MvO,5?bO'4cQ?MvO1G2sO'6fQ?MvO1G2uO'8iQ?MtO<<KXO'8vQ?MtO<<I{OOQO1G1w1G1wO!+xQMhOANAiOOQO7+*b7+*bO'9TQ`O7+*bO'9`Q`O<= gO'9hQ!dO7+*dOOQ!0Lb<<Kq<<KqO$){Q`O<<KqOClQ`O<<KqO'9rQ`O<<KqO!&oQMhO<<KqOOQ!0Lb<<Ko<<KoO!BqQpO<<KoO'9}Q!dO<<KqOOQ!0Lb<<Kp<<KpO':XQ`O<<KqO!&oQMhO<<KqO$){Q`O<<KpO':^QMjOANDbO':hQ!0MvO<<KtOOQO7+*q7+*qO9gQ`O7+*qO':xQ`O<= pOOQ[G27rG27rO9qQ!0LrOG27rO!)PQlO1G5RO';QQ`O7+,RO';YQ`O1G2kO&;yQ`OANBQOOQ[ANBQANBQO!&oQMhOANBQO';_Q`OANBQOOQ[ANBSANBSO9qQ!0LrOANBSO$$VQ`OANBSOOQO'#H_'#H_OOQO7+*p7+*pOOQ[G22wG22wOOQ[ANE]ANE]OOQ[ANE^ANE^OOQ[ANB[ANB[O';gQ`OANB[OOQ[<<MV<<MVO!)PQlOAN?lOOQOG24yG24yO$@_Q!0MxOG24yO#'oQ`OLD,qOOQ[LD,qLD,qO!&oQMhOLD,qO';lQ!fOLD,qO';sQ?MvO7+'zO'=iQ?MvO,5?`O'?lQ?MvO,5?bO'AoQ?MvO7+'|O'CeQMjOG27TOOQO<<M|<<M|OOQ!0LbANA]ANA]O$){Q`OANA]OClQ`OANA]O'CuQ!dOANA]OOQ!0LbANAZANAZO'C|Q`OANA]O!&oQMhOANA]O'DXQ!dOANA]OOQ!0LbANA[ANA[OOQO<<N]<<N]OOQ[LD-^LD-^O'DcQ?MtO7+*mOOQO'#Gf'#GfOOQ[G27lG27lO&;yQ`OG27lO!&oQMhOG27lOOQ[G27nG27nO9qQ!0LrOG27nOOQ[G27vG27vO'DmQ?MtOG25WOOQOLD*eLD*eOOQ[!$(!]!$(!]O#'oQ`O!$(!]O!&oQMhO!$(!]O'DwQ!0MzOG27TOOQ!0LbG26wG26wO$){Q`OG26wO'GYQ`OG26wOClQ`OG26wO'GeQ!dOG26wO!&oQMhOG26wOOQ[LD-WLD-WO&;yQ`OLD-WOOQ[LD-YLD-YOOQ[!)9Ew!)9EwO#'oQ`O!)9EwOOQ!0LbLD,cLD,cO$){Q`OLD,cOClQ`OLD,cO'GlQ`OLD,cO'GwQ!dOLD,cOOQ[!$(!r!$(!rOOQ[!.K;c!.K;cO'HOQ?MvOG27TOOQ!0Lb!$( }!$( }O$){Q`O!$( }OClQ`O!$( }O'ItQ`O!$( }OOQ!0Lb!)9Ei!)9EiO$){Q`O!)9EiOClQ`O!)9EiOOQ!0Lb!.K;T!.K;TO$){Q`O!.K;TOOQ!0Lb!4/0o!4/0oO!)PQlO'#DzO1PQ`O'#EXO'JPQ!fO'#JqO'JWQ!L^O'#DvO'J_QlO'#EOO'JfQ!fO'#CiO'L|Q!fO'#CiO!)PQlO'#EQO'M^QlO,5;ZO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO'#IoO( aQ`O,5<iO!)PQlO,5;eO( iQMhO,5;eO(#SQMhO,5;eO!)PQlO,5;wO!&oQMhO'#GmO( iQMhO'#GmO!&oQMhO'#GoO( iQMhO'#GoO1SQ`O'#DZO1SQ`O'#DZO!&oQMhO'#GPO( iQMhO'#GPO!&oQMhO'#GRO( iQMhO'#GRO!&oQMhO'#GaO( iQMhO'#GaO!)PQlO,5:jO(#ZQpO'#D_O(#eQpO'#JuO!)PQlO,5@nO'M^QlO1G0uO(#oQ?MtO'#CiO!)PQlO1G2PO!&oQMhO'#ItO( iQMhO'#ItO!&oQMhO'#IvO( iQMhO'#IvO(#yQ!dO'#CrO!&oQMhO,5<tO( iQMhO,5<tO'M^QlO1G2RO!)PQlO7+&zO!&oQMhO1G2`O( iQMhO1G2`O!&oQMhO'#ItO( iQMhO'#ItO!&oQMhO'#IvO( iQMhO'#IvO!&oQMhO1G2bO( iQMhO1G2bO'M^QlO7+'mO'M^QlO7+&aO!&oQMhOANAiO( iQMhOANAiO($^Q`O'#EoO($cQ`O'#EoO($kQ`O'#F]O($pQ`O'#EyO($uQ`O'#KSO(%QQ`O'#KQO(%]Q`O,5;ZO(%bQMjO,5<eO(%iQ`O'#GYO(%nQ`O'#GYO(%sQ`O,5<gO(%{Q`O,5;ZO(&TQ?MtO1G1`O(&[Q`O,5<tO(&aQ`O,5<tO(&fQ`O,5<vO(&kQ`O,5<vO(&pQ`O1G2RO(&uQ`O1G0uO(&zQMjO<<K}O('RQMjO<<K}O7eQMhO'#F|O9[Q`O'#F{OAjQ`O'#EnO!)PQlO,5;tO!3dQ`O'#GYO!3dQ`O'#GYO!3dQ`O'#G[O!3dQ`O'#G[O!+xQMhO7+(cO!+xQMhO7+(cO%-mQ!dO1G2wO%-mQ!dO1G2wO!&oQMhO,5=]O!&oQMhO,5=]",
  stateData: "((X~O'{OS'|OSTOS'}RQ~OPYOQYOSfOY!VOaqOdzOeyOl!POpkOrYOskOtkOzkO|YO!OYO!SWO!WkO!XkO!_XO!iuO!lZO!oYO!pYO!qYO!svO!uwO!xxO!|]O$W|O$niO%h}O%j!QO%l!OO%m!OO%n!OO%q!RO%s!SO%v!TO%w!TO%y!UO&V!WO&]!XO&_!YO&a!ZO&c![O&f!]O&l!^O&r!_O&t!`O&v!aO&x!bO&z!cO(SSO(UTO(XUO(`VO(n[O~OWtO~P`OPYOQYOSfOd!jOe!iOpkOrYOskOtkOzkO|YO!OYO!SWO!WkO!XkO!_!eO!iuO!lZO!oYO!pYO!qYO!svO!u!gO!x!hO$W!kO$niO(S!dO(UTO(XUO(`VO(n[O~Oa!wOs!nO!S!oO!b!yO!c!vO!d!vO!|;wO#T!pO#U!pO#V!xO#W!pO#X!pO#[!zO#]!zO(T!lO(UTO(XUO(d!mO(n!sO~O'}!{O~OP]XR]X[]Xa]Xj]Xr]X!Q]X!S]X!]]X!l]X!p]X#R]X#S]X#`]X#kfX#n]X#o]X#p]X#q]X#r]X#s]X#t]X#u]X#v]X#x]X#z]X#{]X$Q]X'y]X(`]X(q]X(x]X(y]X~O!g%RX~P(qO_!}O(U#PO(V!}O(W#PO~O_#QO(W#PO(X#PO(Y#QO~Ox#SO!U#TO(a#TO(b#VO~OPYOQYOSfOd!jOe!iOpkOrYOskOtkOzkO|YO!OYO!SWO!WkO!XkO!_!eO!iuO!lZO!oYO!pYO!qYO!svO!u!gO!x!hO$W!kO$niO(S;{O(UTO(XUO(`VO(n[O~O![#ZO!]#WO!Y(gP!Y(uP~P+}O!^#cO~P`OPYOQYOSfOd!jOe!iOrYOskOtkOzkO|YO!OYO!SWO!WkO!XkO!_!eO!iuO!lZO!oYO!pYO!qYO!svO!u!gO!x!hO$W!kO$niO(UTO(XUO(`VO(n[O~Op#mO![#iO!|]O#i#lO#j#iO(S;|O!k(rP~P.iO!l#oO(S#nO~O!x#sO!|]O%h#tO~O#k#uO~O!g#vO#k#uO~OP$[OR#zO[$cOj$ROr$aO!Q#yO!S#{O!]$_O!l#xO!p$[O#R$RO#n$OO#o$PO#p$PO#q$PO#r$QO#s$RO#t$RO#u$bO#v$SO#x$UO#z$WO#{$XO(`VO(q$YO(x#|O(y#}O~Oa(eX'y(eX'v(eX!k(eX!Y(eX!_(eX%i(eX!g(eX~P1qO#S$dO#`$eO$Q$eOP(fXR(fX[(fXj(fXr(fX!Q(fX!S(fX!](fX!l(fX!p(fX#R(fX#n(fX#o(fX#p(fX#q(fX#r(fX#s(fX#t(fX#u(fX#v(fX#x(fX#z(fX#{(fX(`(fX(q(fX(x(fX(y(fX!_(fX%i(fX~Oa(fX'y(fX'v(fX!Y(fX!k(fXv(fX!g(fX~P4UO#`$eO~O$]$hO$_$gO$f$mO~OSfO!_$nO$i$oO$k$qO~Oh%VOj%cOk%cOl%cOp%WOr%XOs$tOt$tOz%YO|%ZO!O%[O!S${O!_$|O!i%aO!l$xO#j%bO$W%_O$t%]O$v%^O$y%`O(S$sO(UTO(XUO(`$uO(x$}O(y%POg(]P~O!l%dO~O!S%gO!_%hO(S%fO~O!g%lO~Oa%mO'y%mO~O!Q%qO~P%[O(T!lO~P%[O%n%uO~P%[Oh%VO!l%dO(S%fO(T!lO~Oe%|O!l%dO(S%fO~Oj$RO~O!Q&RO!_&OO!l&QO%j&UO(S%fO(T!lO(UTO(XUO`)VP~O!x#sO~O%s&WO!S)RX!_)RX(S)RX~O(S&XO~Ol!PO!u&^O%j!QO%l!OO%m!OO%n!OO%q!RO%s!SO%v!TO%w!TO~Od&cOe&bO!x&`O%h&aO%{&_O~P<VOd&fOeyOl!PO!_&eO!u&^O!xxO!|]O%h}O%l!OO%m!OO%n!OO%q!RO%s!SO%v!TO%w!TO%y!UO~Ob&iO#`&lO%j&gO(T!lO~P=[O!l&mO!u&qO~O!l#oO~O!_XO~Oa%mO'w&yO'y%mO~Oa%mO'w&|O'y%mO~Oa%mO'w'OO'y%mO~O'v]X!Y]Xv]X!k]X&Z]X!_]X%i]X!g]X~P(qO!b']O!c'UO!d'UO(T!lO(UTO(XUO~Os'SO!S'RO!['VO(d'QO!^(hP!^(wP~P@cOn'`O!_'^O(S%fO~Oe'eO!l%dO(S%fO~O!Q&RO!l&QO~Os!nO!S!oO!|;wO#T!pO#U!pO#W!pO#X!pO(T!lO(UTO(XUO(d!mO(n!sO~O!b'kO!c'jO!d'jO#V!pO#['lO#]'lO~PA}Oa%mOh%VO!g#vO!l%dO'y%mO(q'nO~O!p'rO#`'pO~PC]Os!nO!S!oO(UTO(XUO(d!mO(n!sO~O!_XOs(lX!S(lX!b(lX!c(lX!d(lX!|(lX#T(lX#U(lX#V(lX#W(lX#X(lX#[(lX#](lX(T(lX(U(lX(X(lX(d(lX(n(lX~O!c'jO!d'jO(T!lO~PC{O(O'vO(P'vO(Q'xO~O_!}O(U'zO(V!}O(W'zO~O_#QO(W'zO(X'zO(Y#QO~Ov'|O~P%[Ox#SO!U#TO(a#TO(b(PO~O![(RO!Y'VX!Y']X!]'VX!]']X~P+}O!](TO!Y(gX~OP$[OR#zO[$cOj$ROr$aO!Q#yO!S#{O!](TO!l#xO!p$[O#R$RO#n$OO#o$PO#p$PO#q$PO#r$QO#s$RO#t$RO#u$bO#v$SO#x$UO#z$WO#{$XO(`VO(q$YO(x#|O(y#}O~O!Y(gX~PGvO!Y(YO~O!Y(tX!](tX!g(tX!k(tX(q(tX~O#`(tX#k#dX!^(tX~PIyO#`(ZO!Y(vX!](vX~O!]([O!Y(uX~O!Y(_O~O#`$eO~PIyO!^(`O~P`OR#zO!Q#yO!S#{O!l#xO(`VOP!na[!naj!nar!na!]!na!p!na#R!na#n!na#o!na#p!na#q!na#r!na#s!na#t!na#u!na#v!na#x!na#z!na#{!na(q!na(x!na(y!na~Oa!na'y!na'v!na!Y!na!k!nav!na!_!na%i!na!g!na~PKaO!k(aO~O!g#vO#`(bO(q'nO!](sXa(sX'y(sX~O!k(sX~PM|O!S%gO!_%hO!|]O#i(gO#j(fO(S%fO~O!](hO!k(rX~O!k(jO~O!S%gO!_%hO#j(fO(S%fO~OP(fXR(fX[(fXj(fXr(fX!Q(fX!S(fX!](fX!l(fX!p(fX#R(fX#n(fX#o(fX#p(fX#q(fX#r(fX#s(fX#t(fX#u(fX#v(fX#x(fX#z(fX#{(fX(`(fX(q(fX(x(fX(y(fX~O!g#vO!k(fX~P! jOR(lO!Q(kO!l#xO#S$dO!|!{a!S!{a~O!x!{a%h!{a!_!{a#i!{a#j!{a(S!{a~P!#kO!x(pO~OPYOQYOSfOd!jOe!iOpkOrYOskOtkOzkO|YO!OYO!SWO!WkO!XkO!_XO!iuO!lZO!oYO!pYO!qYO!svO!u!gO!x!hO$W!kO$niO(S!dO(UTO(XUO(`VO(n[O~Oh%VOp%WOr%XOs$tOt$tOz%YO|%ZO!O<eO!S${O!_$|O!i=vO!l$xO#j<kO$W%_O$t<gO$v<iO$y%`O(S(tO(UTO(XUO(`$uO(x$}O(y%PO~O#k(vO~O![(xO!k(jP~P%[O(d(zO(n[O~O!S(|O!l#xO(d(zO(n[O~OP;vOQ;vOSfOd=rOe!iOpkOr;vOskOtkOzkO|;vO!O;vO!SWO!WkO!XkO!_!eO!i;yO!lZO!o;vO!p;vO!q;vO!s;zO!u;}O!x!hO$W!kO$n=pO(S)ZO(UTO(XUO(`VO(n[O~O!]$_Oa$qa'y$qa'v$qa!k$qa!Y$qa!_$qa%i$qa!g$qa~Ol)bO~P!&oOh%VOp%WOr%XOs$tOt$tOz%YO|%ZO!O%[O!S${O!_$|O!i%aO!l$xO#j%bO$W%_O$t%]O$v%^O$y%`O(S(tO(UTO(XUO(`$uO(x$}O(y%PO~Og(oP~P!+xO!Q)gO!g)fO!_$^X$Z$^X$]$^X$_$^X$f$^X~O!g)fO!_(zX$Z(zX$](zX$_(zX$f(zX~O!Q)gO~P!.RO!Q)gO!_(zX$Z(zX$](zX$_(zX$f(zX~O!_)iO$Z)mO$])hO$_)hO$f)nO~O![)qO~P!)PO$]$hO$_$gO$f)uO~On$zX!Q$zX#S$zX'x$zX(x$zX(y$zX~OgmXg$zXnmX!]mX#`mX~P!/wOx)wO(a)xO(b)zO~On*TO!Q)|O'x)}O(x$}O(y%PO~Og){O~P!0{Og*UO~Oh%VOp%WOr%XOs$tOt$tOz%YO|%ZO!O<eO!S*WO!_*XO!i=vO!l$xO#j<kO$W%_O$t<gO$v<iO$y%`O(UTO(XUO(`$uO(x$}O(y%PO~O![*[O(S*VO!k(}P~P!1jO#k*^O~O!l*_O~Oh%VOp%WOr%XOs$tOt$tOz%YO|%ZO!O<eO!S${O!_$|O!i=vO!l$xO#j<kO$W%_O$t<gO$v<iO$y%`O(S*aO(UTO(XUO(`$uO(x$}O(y%PO~O![*dO!Y)OP~P!3iOr*pOs!nO!S*fO!b*nO!c*hO!d*hO!l*_O#[*oO%`*jO(T!lO(UTO(XUO(d!mO~O!^*mO~P!5^O#S$dOn(_X!Q(_X'x(_X(x(_X(y(_X!](_X#`(_X~Og(_X$O(_X~P!6`On*uO#`*tOg(^X!](^X~O!]*vOg(]X~Oj%cOk%cOl%cO(S&XOg(]P~Os*yO~O!l+OO~O(S(tO~Op+TO!S%gO![#iO!_%hO!|]O#i#lO#j#iO(S%fO!k(rP~O!g#vO#k+UO~O!S%gO![+WO!]([O!_%hO(S%fO!Y(uP~Os'YO!S+YO![+XO(UTO(XUO(d(zO~O!^(wP~P!9iO!]+ZOa)SX'y)SX~OP$[OR#zO[$cOj$ROr$aO!Q#yO!S#{O!l#xO!p$[O#R$RO#n$OO#o$PO#p$PO#q$PO#r$QO#s$RO#t$RO#u$bO#v$SO#x$UO#z$WO#{$XO(`VO(q$YO(x#|O(y#}O~Oa!ja!]!ja'y!ja'v!ja!Y!ja!k!jav!ja!_!ja%i!ja!g!ja~P!:aOR#zO!Q#yO!S#{O!l#xO(`VOP!ra[!raj!rar!ra!]!ra!p!ra#R!ra#n!ra#o!ra#p!ra#q!ra#r!ra#s!ra#t!ra#u!ra#v!ra#x!ra#z!ra#{!ra(q!ra(x!ra(y!ra~Oa!ra'y!ra'v!ra!Y!ra!k!rav!ra!_!ra%i!ra!g!ra~P!<wOR#zO!Q#yO!S#{O!l#xO(`VOP!ta[!taj!tar!ta!]!ta!p!ta#R!ta#n!ta#o!ta#p!ta#q!ta#r!ta#s!ta#t!ta#u!ta#v!ta#x!ta#z!ta#{!ta(q!ta(x!ta(y!ta~Oa!ta'y!ta'v!ta!Y!ta!k!tav!ta!_!ta%i!ta!g!ta~P!?_Oh%VOn+dO!_'^O%i+cO~O!g+fOa([X!_([X'y([X!]([X~Oa%mO!_XO'y%mO~Oh%VO!l%dO~Oh%VO!l%dO(S%fO~O!g#vO#k(vO~Ob+qO%j+rO(S+nO(UTO(XUO!^)WP~O!]+sO`)VX~O[+wO~O`+xO~O!_&OO(S%fO(T!lO`)VP~Oh%VO#`+}O~Oh%VOn,QO!_$|O~O!_,SO~O!Q,UO!_XO~O%n%uO~O!x,ZO~Oe,`O~Ob,aO(S#nO(UTO(XUO!^)UP~Oe%|O~O%j!QO(S&XO~P=[O[,fO`,eO~OPYOQYOSfOdzOeyOpkOrYOskOtkOzkO|YO!OYO!SWO!WkO!XkO!iuO!lZO!oYO!pYO!qYO!svO!xxO!|]O$niO%h}O(UTO(XUO(`VO(n[O~O!_!eO!u!gO$W!kO(S!dO~P!F_O`,eOa%mO'y%mO~OPYOQYOSfOd!jOe!iOpkOrYOskOtkOzkO|YO!OYO!SWO!WkO!XkO!_!eO!iuO!lZO!oYO!pYO!qYO!svO!x!hO$W!kO$niO(S!dO(UTO(XUO(`VO(n[O~Oa,kOl!OO!uwO%l!OO%m!OO%n!OO~P!HwO!l&mO~O&],qO~O!_,sO~O&n,uO&p,vOP&kaQ&kaS&kaY&kaa&kad&kae&kal&kap&kar&kas&kat&kaz&ka|&ka!O&ka!S&ka!W&ka!X&ka!_&ka!i&ka!l&ka!o&ka!p&ka!q&ka!s&ka!u&ka!x&ka!|&ka$W&ka$n&ka%h&ka%j&ka%l&ka%m&ka%n&ka%q&ka%s&ka%v&ka%w&ka%y&ka&V&ka&]&ka&_&ka&a&ka&c&ka&f&ka&l&ka&r&ka&t&ka&v&ka&x&ka&z&ka'v&ka(S&ka(U&ka(X&ka(`&ka(n&ka!^&ka&d&kab&ka&i&ka~O(S,{O~Oh!eX!]!RX!^!RX!g!RX!g!eX!l!eX#`!RX~O!]!eX!^!eX~P# }O!g-QO#`-POh(iX!]#hX!^#hX!g(iX!l(iX~O!](iX!^(iX~P#!pOh%VO!g-SO!l%dO!]!aX!^!aX~Os!nO!S!oO(UTO(XUO(d!mO~OP;vOQ;vOSfOd=rOe!iOpkOr;vOskOtkOzkO|;vO!O;vO!SWO!WkO!XkO!_!eO!i;yO!lZO!o;vO!p;vO!q;vO!s;zO!u;}O!x!hO$W!kO$n=pO(UTO(XUO(`VO(n[O~O(S<rO~P#$VO!]-WO!^(hX~O!^-YO~O!g-QO#`-PO!]#hX!^#hX~O!]-ZO!^(wX~O!^-]O~O!c-^O!d-^O(T!lO~P##tO!^-aO~P'_On-dO!_'^O~O!Y-iO~Os!{a!b!{a!c!{a!d!{a#T!{a#U!{a#V!{a#W!{a#X!{a#[!{a#]!{a(T!{a(U!{a(X!{a(d!{a(n!{a~P!#kO!p-nO#`-lO~PC]O!c-pO!d-pO(T!lO~PC{Oa%mO#`-lO'y%mO~Oa%mO!g#vO#`-lO'y%mO~Oa%mO!g#vO!p-nO#`-lO'y%mO(q'nO~O(O'vO(P'vO(Q-uO~Ov-vO~O!Y'Va!]'Va~P!:aO![-zO!Y'VX!]'VX~P%[O!](TO!Y(ga~O!Y(ga~PGvO!]([O!Y(ua~O!S%gO![.OO!_%hO(S%fO!Y']X!]']X~O#`.QO!](sa!k(saa(sa'y(sa~O!g#vO~P#,]O!](hO!k(ra~O!S%gO!_%hO#j.UO(S%fO~Op.ZO!S%gO![.WO!_%hO!|]O#i.YO#j.WO(S%fO!]'`X!k'`X~OR._O!l#xO~Oh%VOn.bO!_'^O%i.aO~Oa#ci!]#ci'y#ci'v#ci!Y#ci!k#civ#ci!_#ci%i#ci!g#ci~P!:aOn=|O!Q)|O'x)}O(x$}O(y%PO~O#k#_aa#_a#`#_a'y#_a!]#_a!k#_a!_#_a!Y#_a~P#/XO#k(_XP(_XR(_X[(_Xa(_Xj(_Xr(_X!S(_X!l(_X!p(_X#R(_X#n(_X#o(_X#p(_X#q(_X#r(_X#s(_X#t(_X#u(_X#v(_X#x(_X#z(_X#{(_X'y(_X(`(_X(q(_X!k(_X!Y(_X'v(_Xv(_X!_(_X%i(_X!g(_X~P!6`O!].oO!k(jX~P!:aO!k.rO~O!Y.tO~OP$[OR#zO!Q#yO!S#{O!l#xO!p$[O(`VO[#mia#mij#mir#mi!]#mi#R#mi#o#mi#p#mi#q#mi#r#mi#s#mi#t#mi#u#mi#v#mi#x#mi#z#mi#{#mi'y#mi(q#mi(x#mi(y#mi'v#mi!Y#mi!k#miv#mi!_#mi%i#mi!g#mi~O#n#mi~P#2wO#n$OO~P#2wOP$[OR#zOr$aO!Q#yO!S#{O!l#xO!p$[O#n$OO#o$PO#p$PO#q$PO(`VO[#mia#mij#mi!]#mi#R#mi#s#mi#t#mi#u#mi#v#mi#x#mi#z#mi#{#mi'y#mi(q#mi(x#mi(y#mi'v#mi!Y#mi!k#miv#mi!_#mi%i#mi!g#mi~O#r#mi~P#5fO#r$QO~P#5fOP$[OR#zO[$cOj$ROr$aO!Q#yO!S#{O!l#xO!p$[O#R$RO#n$OO#o$PO#p$PO#q$PO#r$QO#s$RO#t$RO#u$bO(`VOa#mi!]#mi#x#mi#z#mi#{#mi'y#mi(q#mi(x#mi(y#mi'v#mi!Y#mi!k#miv#mi!_#mi%i#mi!g#mi~O#v#mi~P#8TOP$[OR#zO[$cOj$ROr$aO!Q#yO!S#{O!l#xO!p$[O#R$RO#n$OO#o$PO#p$PO#q$PO#r$QO#s$RO#t$RO#u$bO#v$SO(`VO(y#}Oa#mi!]#mi#z#mi#{#mi'y#mi(q#mi(x#mi'v#mi!Y#mi!k#miv#mi!_#mi%i#mi!g#mi~O#x$UO~P#:kO#x#mi~P#:kO#v$SO~P#8TOP$[OR#zO[$cOj$ROr$aO!Q#yO!S#{O!l#xO!p$[O#R$RO#n$OO#o$PO#p$PO#q$PO#r$QO#s$RO#t$RO#u$bO#v$SO#x$UO(`VO(x#|O(y#}Oa#mi!]#mi#{#mi'y#mi(q#mi'v#mi!Y#mi!k#miv#mi!_#mi%i#mi!g#mi~O#z#mi~P#=aO#z$WO~P#=aOP]XR]X[]Xj]Xr]X!Q]X!S]X!l]X!p]X#R]X#S]X#`]X#kfX#n]X#o]X#p]X#q]X#r]X#s]X#t]X#u]X#v]X#x]X#z]X#{]X$Q]X(`]X(q]X(x]X(y]X!]]X!^]X~O$O]X~P#@OOP$[OR#zO[<_Oj<SOr<]O!Q#yO!S#{O!l#xO!p$[O#R<SO#n<PO#o<QO#p<QO#q<QO#r<RO#s<SO#t<SO#u<^O#v<TO#x<VO#z<XO#{<YO(`VO(q$YO(x#|O(y#}O~O$O.vO~P#B]O#S$dO#`<`O$Q<`O$O(fX!^(fX~P! jOa'ca!]'ca'y'ca'v'ca!k'ca!Y'cav'ca!_'ca%i'ca!g'ca~P!:aO[#mia#mij#mir#mi!]#mi#R#mi#r#mi#s#mi#t#mi#u#mi#v#mi#x#mi#z#mi#{#mi'y#mi(q#mi'v#mi!Y#mi!k#miv#mi!_#mi%i#mi!g#mi~OP$[OR#zO!Q#yO!S#{O!l#xO!p$[O#n$OO#o$PO#p$PO#q$PO(`VO(x#mi(y#mi~P#E_On=|O!Q)|O'x)}O(x$}O(y%POP#miR#mi!S#mi!l#mi!p#mi#n#mi#o#mi#p#mi#q#mi(`#mi~P#E_O!].zOg(oX~P!0{Og.|O~Oa$Pi!]$Pi'y$Pi'v$Pi!Y$Pi!k$Piv$Pi!_$Pi%i$Pi!g$Pi~P!:aO$].}O$_.}O~O$]/OO$_/OO~O!g)fO#`/PO!_$cX$Z$cX$]$cX$_$cX$f$cX~O![/QO~O!_)iO$Z/SO$])hO$_)hO$f/TO~O!]<ZO!^(eX~P#B]O!^/UO~O!g)fO$f(zX~O$f/WO~Ov/XO~P!&oOx)wO(a)xO(b/[O~O!S/_O~O(x$}On%aa!Q%aa'x%aa(y%aa!]%aa#`%aa~Og%aa$O%aa~P#LaO(y%POn%ca!Q%ca'x%ca(x%ca!]%ca#`%ca~Og%ca$O%ca~P#MSO!]fX!gfX!kfX!k$zX(qfX~P!/wO![/hO!]([O(S/gO!Y(uP!Y)OP~P!1jOr*pO!b*nO!c*hO!d*hO!l*_O#[*oO%`*jO(T!lO(UTO(XUO~Os<oO!S/iO![+XO!^*mO(d<nO!^(wP~P#NmO!k/jO~P#/XO!]/kO!g#vO(q'nO!k(}X~O!k/pO~O!S%gO![*[O!_%hO(S%fO!k(}P~O#k/rO~O!Y$zX!]$zX!g%RX~P!/wO!]/sO!Y)OX~P#/XO!g/uO~O!Y/wO~OpkO(S/xO~P.iOh%VOr/}O!g#vO!l%dO(q'nO~O!g+fO~Oa%mO!]0RO'y%mO~O!^0TO~P!5^O!c0UO!d0UO(T!lO~P##tOs!nO!S0VO(UTO(XUO(d!mO~O#[0XO~Og%aa!]%aa#`%aa$O%aa~P!0{Og%ca!]%ca#`%ca$O%ca~P!0{Oj%cOk%cOl%cO(S&XOg'lX!]'lX~O!]*vOg(]a~Og0bO~OR0cO!Q0cO!S0dO#S$dOn}a'x}a(x}a(y}a!]}a#`}a~Og}a$O}a~P$&vO!Q)|O'x)}On$sa(x$sa(y$sa!]$sa#`$sa~Og$sa$O$sa~P$'rO!Q)|O'x)}On$ua(x$ua(y$ua!]$ua#`$ua~Og$ua$O$ua~P$(eO#k0gO~Og%Ta!]%Ta#`%Ta$O%Ta~P!0{On0iO#`0hOg(^a!](^a~O!g#vO~O#k0lO~O!]+ZOa)Sa'y)Sa~OR#zO!Q#yO!S#{O!l#xO(`VOP!ri[!rij!rir!ri!]!ri!p!ri#R!ri#n!ri#o!ri#p!ri#q!ri#r!ri#s!ri#t!ri#u!ri#v!ri#x!ri#z!ri#{!ri(q!ri(x!ri(y!ri~Oa!ri'y!ri'v!ri!Y!ri!k!riv!ri!_!ri%i!ri!g!ri~P$*bOh%VOr%XOs$tOt$tOz%YO|%ZO!O<eO!S${O!_$|O!i=vO!l$xO#j<kO$W%_O$t<gO$v<iO$y%`O(UTO(XUO(`$uO(x$}O(y%PO~Op0uO%]0vO(S0tO~P$,xO!g+fOa([a!_([a'y([a!]([a~O#k0|O~O[]X!]fX!^fX~O!]0}O!^)WX~O!^1PO~O[1QO~Ob1SO(S+nO(UTO(XUO~O!_&OO(S%fO`'tX!]'tX~O!]+sO`)Va~O!k1VO~P!:aO[1YO~O`1ZO~O#`1^O~On1aO!_$|O~O(d(zO!^)TP~Oh%VOn1jO!_1gO%i1iO~O[1tO!]1rO!^)UX~O!^1uO~O`1wOa%mO'y%mO~O(S#nO(UTO(XUO~O#S$dO#`$eO$Q$eOP(fXR(fX[(fXr(fX!Q(fX!S(fX!](fX!l(fX!p(fX#R(fX#n(fX#o(fX#p(fX#q(fX#r(fX#s(fX#t(fX#u(fX#v(fX#x(fX#z(fX#{(fX(`(fX(q(fX(x(fX(y(fX~Oj1zO&Z1{Oa(fX~P$2cOj1zO#`$eO&Z1{O~Oa1}O~P%[Oa2PO~O&d2SOP&biQ&biS&biY&bia&bid&bie&bil&bip&bir&bis&bit&biz&bi|&bi!O&bi!S&bi!W&bi!X&bi!_&bi!i&bi!l&bi!o&bi!p&bi!q&bi!s&bi!u&bi!x&bi!|&bi$W&bi$n&bi%h&bi%j&bi%l&bi%m&bi%n&bi%q&bi%s&bi%v&bi%w&bi%y&bi&V&bi&]&bi&_&bi&a&bi&c&bi&f&bi&l&bi&r&bi&t&bi&v&bi&x&bi&z&bi'v&bi(S&bi(U&bi(X&bi(`&bi(n&bi!^&bib&bi&i&bi~Ob2YO!^2WO&i2XO~P`O!_XO!l2[O~O&p,vOP&kiQ&kiS&kiY&kia&kid&kie&kil&kip&kir&kis&kit&kiz&ki|&ki!O&ki!S&ki!W&ki!X&ki!_&ki!i&ki!l&ki!o&ki!p&ki!q&ki!s&ki!u&ki!x&ki!|&ki$W&ki$n&ki%h&ki%j&ki%l&ki%m&ki%n&ki%q&ki%s&ki%v&ki%w&ki%y&ki&V&ki&]&ki&_&ki&a&ki&c&ki&f&ki&l&ki&r&ki&t&ki&v&ki&x&ki&z&ki'v&ki(S&ki(U&ki(X&ki(`&ki(n&ki!^&ki&d&kib&ki&i&ki~O!Y2bO~O!]!aa!^!aa~P#B]Os!nO!S!oO![2hO(d!mO!]'WX!^'WX~P@cO!]-WO!^(ha~O!]'^X!^'^X~P!9iO!]-ZO!^(wa~O!^2oO~P'_Oa%mO#`2xO'y%mO~Oa%mO!g#vO#`2xO'y%mO~Oa%mO!g#vO!p2|O#`2xO'y%mO(q'nO~Oa%mO'y%mO~P!:aO!]$_Ov$qa~O!Y'Vi!]'Vi~P!:aO!](TO!Y(gi~O!]([O!Y(ui~O!Y(vi!](vi~P!:aO!](si!k(sia(si'y(si~P!:aO#`3OO!](si!k(sia(si'y(si~O!](hO!k(ri~O!S%gO!_%hO!|]O#i3TO#j3SO(S%fO~O!S%gO!_%hO#j3SO(S%fO~On3[O!_'^O%i3ZO~Oh%VOn3[O!_'^O%i3ZO~O#k%aaP%aaR%aa[%aaa%aaj%aar%aa!S%aa!l%aa!p%aa#R%aa#n%aa#o%aa#p%aa#q%aa#r%aa#s%aa#t%aa#u%aa#v%aa#x%aa#z%aa#{%aa'y%aa(`%aa(q%aa!k%aa!Y%aa'v%aav%aa!_%aa%i%aa!g%aa~P#LaO#k%caP%caR%ca[%caa%caj%car%ca!S%ca!l%ca!p%ca#R%ca#n%ca#o%ca#p%ca#q%ca#r%ca#s%ca#t%ca#u%ca#v%ca#x%ca#z%ca#{%ca'y%ca(`%ca(q%ca!k%ca!Y%ca'v%cav%ca!_%ca%i%ca!g%ca~P#MSO#k%aaP%aaR%aa[%aaa%aaj%aar%aa!S%aa!]%aa!l%aa!p%aa#R%aa#n%aa#o%aa#p%aa#q%aa#r%aa#s%aa#t%aa#u%aa#v%aa#x%aa#z%aa#{%aa'y%aa(`%aa(q%aa!k%aa!Y%aa'v%aa#`%aav%aa!_%aa%i%aa!g%aa~P#/XO#k%caP%caR%ca[%caa%caj%car%ca!S%ca!]%ca!l%ca!p%ca#R%ca#n%ca#o%ca#p%ca#q%ca#r%ca#s%ca#t%ca#u%ca#v%ca#x%ca#z%ca#{%ca'y%ca(`%ca(q%ca!k%ca!Y%ca'v%ca#`%cav%ca!_%ca%i%ca!g%ca~P#/XO#k}aP}a[}aa}aj}ar}a!l}a!p}a#R}a#n}a#o}a#p}a#q}a#r}a#s}a#t}a#u}a#v}a#x}a#z}a#{}a'y}a(`}a(q}a!k}a!Y}a'v}av}a!_}a%i}a!g}a~P$&vO#k$saP$saR$sa[$saa$saj$sar$sa!S$sa!l$sa!p$sa#R$sa#n$sa#o$sa#p$sa#q$sa#r$sa#s$sa#t$sa#u$sa#v$sa#x$sa#z$sa#{$sa'y$sa(`$sa(q$sa!k$sa!Y$sa'v$sav$sa!_$sa%i$sa!g$sa~P$'rO#k$uaP$uaR$ua[$uaa$uaj$uar$ua!S$ua!l$ua!p$ua#R$ua#n$ua#o$ua#p$ua#q$ua#r$ua#s$ua#t$ua#u$ua#v$ua#x$ua#z$ua#{$ua'y$ua(`$ua(q$ua!k$ua!Y$ua'v$uav$ua!_$ua%i$ua!g$ua~P$(eO#k%TaP%TaR%Ta[%Taa%Taj%Tar%Ta!S%Ta!]%Ta!l%Ta!p%Ta#R%Ta#n%Ta#o%Ta#p%Ta#q%Ta#r%Ta#s%Ta#t%Ta#u%Ta#v%Ta#x%Ta#z%Ta#{%Ta'y%Ta(`%Ta(q%Ta!k%Ta!Y%Ta'v%Ta#`%Tav%Ta!_%Ta%i%Ta!g%Ta~P#/XOa#cq!]#cq'y#cq'v#cq!Y#cq!k#cqv#cq!_#cq%i#cq!g#cq~P!:aO![3dO!]'XX!k'XX~P%[O!].oO!k(ja~O!].oO!k(ja~P!:aO!Y3gO~O$O!na!^!na~PKaO$O!ja!]!ja!^!ja~P#B]O$O!ra!^!ra~P!<wO$O!ta!^!ta~P!?_Og'[X!]'[X~P!+xO!].zOg(oa~OSfO!_3{O$d3|O~O!^4QO~Ov4RO~P#/XOa$mq!]$mq'y$mq'v$mq!Y$mq!k$mqv$mq!_$mq%i$mq!g$mq~P!:aO!Y4TO~P!&oO!S4UO~O!Q)|O'x)}O(y%POn'ha(x'ha!]'ha#`'ha~Og'ha$O'ha~P%,XO!Q)|O'x)}On'ja(x'ja(y'ja!]'ja#`'ja~Og'ja$O'ja~P%,zO(q$YO~P#/XO!YfX!Y$zX!]fX!]$zX!g%RX#`fX~P!/wO(S<xO~P!1jO!S%gO![4XO!_%hO(S%fO!]'dX!k'dX~O!]/kO!k(}a~O!]/kO!g#vO!k(}a~O!]/kO!g#vO(q'nO!k(}a~Og$|i!]$|i#`$|i$O$|i~P!0{O![4aO!Y'fX!]'fX~P!3iO!]/sO!Y)Oa~O!]/sO!Y)Oa~P#/XOP]XR]X[]Xj]Xr]X!Q]X!S]X!Y]X!]]X!l]X!p]X#R]X#S]X#`]X#kfX#n]X#o]X#p]X#q]X#r]X#s]X#t]X#u]X#v]X#x]X#z]X#{]X$Q]X(`]X(q]X(x]X(y]X~Oj%YX!g%YX~P%0kOj4fO!g#vO~Oh%VO!g#vO!l%dO~Oh%VOr4kO!l%dO(q'nO~Or4pO!g#vO(q'nO~Os!nO!S4qO(UTO(XUO(d!mO~O(x$}On%ai!Q%ai'x%ai(y%ai!]%ai#`%ai~Og%ai$O%ai~P%4[O(y%POn%ci!Q%ci'x%ci(x%ci!]%ci#`%ci~Og%ci$O%ci~P%4}Og(^i!](^i~P!0{O#`4wOg(^i!](^i~P!0{O!k4zO~Oa$oq!]$oq'y$oq'v$oq!Y$oq!k$oqv$oq!_$oq%i$oq!g$oq~P!:aO!Y5QO~O!]5RO!_)PX~P#/XOa$zX!_$zX%^]X'y$zX!]$zX~P!/wO%^5UOaoXnoX!QoX!_oX'xoX'yoX(xoX(yoX!]oX~Op5VO(S#nO~O%^5UO~Ob5]O%j5^O(S+nO(UTO(XUO!]'sX!^'sX~O!]0}O!^)Wa~O[5bO~O`5cO~Oa%mO'y%mO~P#/XO!]5kO#`5mO!^)TX~O!^5nO~Or5tOs!nO!S*fO!b!yO!c!vO!d!vO!|;wO#T!pO#U!pO#V!pO#W!pO#X!pO#[5sO#]!zO(T!lO(UTO(XUO(d!mO(n!sO~O!^5rO~P%:YOn5yO!_1gO%i5xO~Oh%VOn5yO!_1gO%i5xO~Ob6QO(S#nO(UTO(XUO!]'rX!^'rX~O!]1rO!^)Ua~O(UTO(XUO(d6SO~O`6WO~Oj6ZO&Z6[O~PM|O!k6]O~P%[Oa6_O~Oa6_O~P%[Ob2YO!^6dO&i2XO~P`O!g6fO~O!g6hOh(ii!](ii!^(ii!g(ii!l(iir(ii(q(ii~O!]#hi!^#hi~P#B]O#`6iO!]#hi!^#hi~O!]!ai!^!ai~P#B]Oa%mO#`6rO'y%mO~Oa%mO!g#vO#`6rO'y%mO~O!](sq!k(sqa(sq'y(sq~P!:aO!](hO!k(rq~O!S%gO!_%hO#j6yO(S%fO~O!_'^O%i6|O~On7QO!_'^O%i6|O~O#k'haP'haR'ha['haa'haj'har'ha!S'ha!l'ha!p'ha#R'ha#n'ha#o'ha#p'ha#q'ha#r'ha#s'ha#t'ha#u'ha#v'ha#x'ha#z'ha#{'ha'y'ha(`'ha(q'ha!k'ha!Y'ha'v'hav'ha!_'ha%i'ha!g'ha~P%,XO#k'jaP'jaR'ja['jaa'jaj'jar'ja!S'ja!l'ja!p'ja#R'ja#n'ja#o'ja#p'ja#q'ja#r'ja#s'ja#t'ja#u'ja#v'ja#x'ja#z'ja#{'ja'y'ja(`'ja(q'ja!k'ja!Y'ja'v'jav'ja!_'ja%i'ja!g'ja~P%,zO#k$|iP$|iR$|i[$|ia$|ij$|ir$|i!S$|i!]$|i!l$|i!p$|i#R$|i#n$|i#o$|i#p$|i#q$|i#r$|i#s$|i#t$|i#u$|i#v$|i#x$|i#z$|i#{$|i'y$|i(`$|i(q$|i!k$|i!Y$|i'v$|i#`$|iv$|i!_$|i%i$|i!g$|i~P#/XO#k%aiP%aiR%ai[%aia%aij%air%ai!S%ai!l%ai!p%ai#R%ai#n%ai#o%ai#p%ai#q%ai#r%ai#s%ai#t%ai#u%ai#v%ai#x%ai#z%ai#{%ai'y%ai(`%ai(q%ai!k%ai!Y%ai'v%aiv%ai!_%ai%i%ai!g%ai~P%4[O#k%ciP%ciR%ci[%cia%cij%cir%ci!S%ci!l%ci!p%ci#R%ci#n%ci#o%ci#p%ci#q%ci#r%ci#s%ci#t%ci#u%ci#v%ci#x%ci#z%ci#{%ci'y%ci(`%ci(q%ci!k%ci!Y%ci'v%civ%ci!_%ci%i%ci!g%ci~P%4}O!]'Xa!k'Xa~P!:aO!].oO!k(ji~O$O#ci!]#ci!^#ci~P#B]OP$[OR#zO!Q#yO!S#{O!l#xO!p$[O(`VO[#mij#mir#mi#R#mi#o#mi#p#mi#q#mi#r#mi#s#mi#t#mi#u#mi#v#mi#x#mi#z#mi#{#mi$O#mi(q#mi(x#mi(y#mi!]#mi!^#mi~O#n#mi~P%MXO#n<PO~P%MXOP$[OR#zOr<]O!Q#yO!S#{O!l#xO!p$[O#n<PO#o<QO#p<QO#q<QO(`VO[#mij#mi#R#mi#s#mi#t#mi#u#mi#v#mi#x#mi#z#mi#{#mi$O#mi(q#mi(x#mi(y#mi!]#mi!^#mi~O#r#mi~P& aO#r<RO~P& aOP$[OR#zO[<_Oj<SOr<]O!Q#yO!S#{O!l#xO!p$[O#R<SO#n<PO#o<QO#p<QO#q<QO#r<RO#s<SO#t<SO#u<^O(`VO#x#mi#z#mi#{#mi$O#mi(q#mi(x#mi(y#mi!]#mi!^#mi~O#v#mi~P&#iOP$[OR#zO[<_Oj<SOr<]O!Q#yO!S#{O!l#xO!p$[O#R<SO#n<PO#o<QO#p<QO#q<QO#r<RO#s<SO#t<SO#u<^O#v<TO(`VO(y#}O#z#mi#{#mi$O#mi(q#mi(x#mi!]#mi!^#mi~O#x<VO~P&%jO#x#mi~P&%jO#v<TO~P&#iOP$[OR#zO[<_Oj<SOr<]O!Q#yO!S#{O!l#xO!p$[O#R<SO#n<PO#o<QO#p<QO#q<QO#r<RO#s<SO#t<SO#u<^O#v<TO#x<VO(`VO(x#|O(y#}O#{#mi$O#mi(q#mi!]#mi!^#mi~O#z#mi~P&'yO#z<XO~P&'yOa#|y!]#|y'y#|y'v#|y!Y#|y!k#|yv#|y!_#|y%i#|y!g#|y~P!:aO[#mij#mir#mi#R#mi#r#mi#s#mi#t#mi#u#mi#v#mi#x#mi#z#mi#{#mi$O#mi(q#mi!]#mi!^#mi~OP$[OR#zO!Q#yO!S#{O!l#xO!p$[O#n<PO#o<QO#p<QO#q<QO(`VO(x#mi(y#mi~P&*uOn=}O!Q)|O'x)}O(x$}O(y%POP#miR#mi!S#mi!l#mi!p#mi#n#mi#o#mi#p#mi#q#mi(`#mi~P&*uO#S$dOP(_XR(_X[(_Xj(_Xn(_Xr(_X!Q(_X!S(_X!l(_X!p(_X#R(_X#n(_X#o(_X#p(_X#q(_X#r(_X#s(_X#t(_X#u(_X#v(_X#x(_X#z(_X#{(_X$O(_X'x(_X(`(_X(q(_X(x(_X(y(_X!](_X!^(_X~O$O$Pi!]$Pi!^$Pi~P#B]O$O!ri!^!ri~P$*bOg'[a!]'[a~P!0{O!^7dO~O!]'ca!^'ca~P#B]O!Y7eO~P#/XO!g#vO(q'nO!]'da!k'da~O!]/kO!k(}i~O!]/kO!g#vO!k(}i~Og$|q!]$|q#`$|q$O$|q~P!0{O!Y'fa!]'fa~P#/XO!g7lO~O!]/sO!Y)Oi~P#/XO!]/sO!Y)Oi~O!Y7oO~Oh%VOr7tO!l%dO(q'nO~Oj7vO!g#vO~Or7yO!g#vO(q'nO~O!Q)|O'x)}O(y%POn'ia(x'ia!]'ia#`'ia~Og'ia$O'ia~P&3vO!Q)|O'x)}On'ka(x'ka(y'ka!]'ka#`'ka~Og'ka$O'ka~P&4iO!Y7{O~Og%Oq!]%Oq#`%Oq$O%Oq~P!0{Og(^q!](^q~P!0{O#`7|Og(^q!](^q~P!0{Oa$oy!]$oy'y$oy'v$oy!Y$oy!k$oyv$oy!_$oy%i$oy!g$oy~P!:aO!g6hO~O!]5RO!_)Pa~O!_'^OP$TaR$Ta[$Taj$Tar$Ta!Q$Ta!S$Ta!]$Ta!l$Ta!p$Ta#R$Ta#n$Ta#o$Ta#p$Ta#q$Ta#r$Ta#s$Ta#t$Ta#u$Ta#v$Ta#x$Ta#z$Ta#{$Ta(`$Ta(q$Ta(x$Ta(y$Ta~O%i6|O~P&7ZO%^8QOa%[i!_%[i'y%[i!]%[i~Oa#cy!]#cy'y#cy'v#cy!Y#cy!k#cyv#cy!_#cy%i#cy!g#cy~P!:aO[8SO~Ob8UO(S+nO(UTO(XUO~O!]0}O!^)Wi~O`8YO~O(d(zO!]'oX!^'oX~O!]5kO!^)Ta~O!^8cO~P%:YO(n!sO~P$${O#[8dO~O!_1gO~O!_1gO%i8fO~On8iO!_1gO%i8fO~O[8nO!]'ra!^'ra~O!]1rO!^)Ui~O!k8rO~O!k8sO~O!k8vO~O!k8vO~P%[Oa8xO~O!g8yO~O!k8zO~O!](vi!^(vi~P#B]Oa%mO#`9SO'y%mO~O!](sy!k(sya(sy'y(sy~P!:aO!](hO!k(ry~O%i9VO~P&7ZO!_'^O%i9VO~O#k$|qP$|qR$|q[$|qa$|qj$|qr$|q!S$|q!]$|q!l$|q!p$|q#R$|q#n$|q#o$|q#p$|q#q$|q#r$|q#s$|q#t$|q#u$|q#v$|q#x$|q#z$|q#{$|q'y$|q(`$|q(q$|q!k$|q!Y$|q'v$|q#`$|qv$|q!_$|q%i$|q!g$|q~P#/XO#k'iaP'iaR'ia['iaa'iaj'iar'ia!S'ia!l'ia!p'ia#R'ia#n'ia#o'ia#p'ia#q'ia#r'ia#s'ia#t'ia#u'ia#v'ia#x'ia#z'ia#{'ia'y'ia(`'ia(q'ia!k'ia!Y'ia'v'iav'ia!_'ia%i'ia!g'ia~P&3vO#k'kaP'kaR'ka['kaa'kaj'kar'ka!S'ka!l'ka!p'ka#R'ka#n'ka#o'ka#p'ka#q'ka#r'ka#s'ka#t'ka#u'ka#v'ka#x'ka#z'ka#{'ka'y'ka(`'ka(q'ka!k'ka!Y'ka'v'kav'ka!_'ka%i'ka!g'ka~P&4iO#k%OqP%OqR%Oq[%Oqa%Oqj%Oqr%Oq!S%Oq!]%Oq!l%Oq!p%Oq#R%Oq#n%Oq#o%Oq#p%Oq#q%Oq#r%Oq#s%Oq#t%Oq#u%Oq#v%Oq#x%Oq#z%Oq#{%Oq'y%Oq(`%Oq(q%Oq!k%Oq!Y%Oq'v%Oq#`%Oqv%Oq!_%Oq%i%Oq!g%Oq~P#/XO!]'Xi!k'Xi~P!:aO$O#cq!]#cq!^#cq~P#B]O(x$}OP%aaR%aa[%aaj%aar%aa!S%aa!l%aa!p%aa#R%aa#n%aa#o%aa#p%aa#q%aa#r%aa#s%aa#t%aa#u%aa#v%aa#x%aa#z%aa#{%aa$O%aa(`%aa(q%aa!]%aa!^%aa~On%aa!Q%aa'x%aa(y%aa~P&HnO(y%POP%caR%ca[%caj%car%ca!S%ca!l%ca!p%ca#R%ca#n%ca#o%ca#p%ca#q%ca#r%ca#s%ca#t%ca#u%ca#v%ca#x%ca#z%ca#{%ca$O%ca(`%ca(q%ca!]%ca!^%ca~On%ca!Q%ca'x%ca(x%ca~P&JuOn=}O!Q)|O'x)}O(y%PO~P&HnOn=}O!Q)|O'x)}O(x$}O~P&JuOR0cO!Q0cO!S0dO#S$dOP}a[}aj}an}ar}a!l}a!p}a#R}a#n}a#o}a#p}a#q}a#r}a#s}a#t}a#u}a#v}a#x}a#z}a#{}a$O}a'x}a(`}a(q}a(x}a(y}a!]}a!^}a~O!Q)|O'x)}OP$saR$sa[$saj$san$sar$sa!S$sa!l$sa!p$sa#R$sa#n$sa#o$sa#p$sa#q$sa#r$sa#s$sa#t$sa#u$sa#v$sa#x$sa#z$sa#{$sa$O$sa(`$sa(q$sa(x$sa(y$sa!]$sa!^$sa~O!Q)|O'x)}OP$uaR$ua[$uaj$uan$uar$ua!S$ua!l$ua!p$ua#R$ua#n$ua#o$ua#p$ua#q$ua#r$ua#s$ua#t$ua#u$ua#v$ua#x$ua#z$ua#{$ua$O$ua(`$ua(q$ua(x$ua(y$ua!]$ua!^$ua~On=}O!Q)|O'x)}O(x$}O(y%PO~OP%TaR%Ta[%Taj%Tar%Ta!S%Ta!l%Ta!p%Ta#R%Ta#n%Ta#o%Ta#p%Ta#q%Ta#r%Ta#s%Ta#t%Ta#u%Ta#v%Ta#x%Ta#z%Ta#{%Ta$O%Ta(`%Ta(q%Ta!]%Ta!^%Ta~P'%zO$O$mq!]$mq!^$mq~P#B]O$O$oq!]$oq!^$oq~P#B]O!^9dO~O$O9eO~P!0{O!g#vO!]'di!k'di~O!g#vO(q'nO!]'di!k'di~O!]/kO!k(}q~O!Y'fi!]'fi~P#/XO!]/sO!Y)Oq~Or9lO!g#vO(q'nO~O[9nO!Y9mO~P#/XO!Y9mO~Oj9tO!g#vO~Og(^y!](^y~P!0{O!]'ma!_'ma~P#/XOa%[q!_%[q'y%[q!]%[q~P#/XO[9yO~O!]0}O!^)Wq~O#`9}O!]'oa!^'oa~O!]5kO!^)Ti~P#B]O!S:PO~O!_1gO%i:SO~O(UTO(XUO(d:XO~O!]1rO!^)Uq~O!k:[O~O!k:]O~O!k:^O~O!k:^O~P%[O#`:aO!]#hy!^#hy~O!]#hy!^#hy~P#B]O%i:fO~P&7ZO!_'^O%i:fO~O$O#|y!]#|y!^#|y~P#B]OP$|iR$|i[$|ij$|ir$|i!S$|i!l$|i!p$|i#R$|i#n$|i#o$|i#p$|i#q$|i#r$|i#s$|i#t$|i#u$|i#v$|i#x$|i#z$|i#{$|i$O$|i(`$|i(q$|i!]$|i!^$|i~P'%zO!Q)|O'x)}O(y%POP'haR'ha['haj'han'har'ha!S'ha!l'ha!p'ha#R'ha#n'ha#o'ha#p'ha#q'ha#r'ha#s'ha#t'ha#u'ha#v'ha#x'ha#z'ha#{'ha$O'ha(`'ha(q'ha(x'ha!]'ha!^'ha~O!Q)|O'x)}OP'jaR'ja['jaj'jan'jar'ja!S'ja!l'ja!p'ja#R'ja#n'ja#o'ja#p'ja#q'ja#r'ja#s'ja#t'ja#u'ja#v'ja#x'ja#z'ja#{'ja$O'ja(`'ja(q'ja(x'ja(y'ja!]'ja!^'ja~O(x$}OP%aiR%ai[%aij%ain%air%ai!Q%ai!S%ai!l%ai!p%ai#R%ai#n%ai#o%ai#p%ai#q%ai#r%ai#s%ai#t%ai#u%ai#v%ai#x%ai#z%ai#{%ai$O%ai'x%ai(`%ai(q%ai(y%ai!]%ai!^%ai~O(y%POP%ciR%ci[%cij%cin%cir%ci!Q%ci!S%ci!l%ci!p%ci#R%ci#n%ci#o%ci#p%ci#q%ci#r%ci#s%ci#t%ci#u%ci#v%ci#x%ci#z%ci#{%ci$O%ci'x%ci(`%ci(q%ci(x%ci!]%ci!^%ci~O$O$oy!]$oy!^$oy~P#B]O$O#cy!]#cy!^#cy~P#B]O!g#vO!]'dq!k'dq~O!]/kO!k(}y~O!Y'fq!]'fq~P#/XOr:pO!g#vO(q'nO~O[:tO!Y:sO~P#/XO!Y:sO~Og(^!R!](^!R~P!0{Oa%[y!_%[y'y%[y!]%[y~P#/XO!]0}O!^)Wy~O!]5kO!^)Tq~O(S:zO~O!_1gO%i:}O~O!k;QO~O%i;VO~P&7ZOP$|qR$|q[$|qj$|qr$|q!S$|q!l$|q!p$|q#R$|q#n$|q#o$|q#p$|q#q$|q#r$|q#s$|q#t$|q#u$|q#v$|q#x$|q#z$|q#{$|q$O$|q(`$|q(q$|q!]$|q!^$|q~P'%zO!Q)|O'x)}O(y%POP'iaR'ia['iaj'ian'iar'ia!S'ia!l'ia!p'ia#R'ia#n'ia#o'ia#p'ia#q'ia#r'ia#s'ia#t'ia#u'ia#v'ia#x'ia#z'ia#{'ia$O'ia(`'ia(q'ia(x'ia!]'ia!^'ia~O!Q)|O'x)}OP'kaR'ka['kaj'kan'kar'ka!S'ka!l'ka!p'ka#R'ka#n'ka#o'ka#p'ka#q'ka#r'ka#s'ka#t'ka#u'ka#v'ka#x'ka#z'ka#{'ka$O'ka(`'ka(q'ka(x'ka(y'ka!]'ka!^'ka~OP%OqR%Oq[%Oqj%Oqr%Oq!S%Oq!l%Oq!p%Oq#R%Oq#n%Oq#o%Oq#p%Oq#q%Oq#r%Oq#s%Oq#t%Oq#u%Oq#v%Oq#x%Oq#z%Oq#{%Oq$O%Oq(`%Oq(q%Oq!]%Oq!^%Oq~P'%zOg%e!Z!]%e!Z#`%e!Z$O%e!Z~P!0{O!Y;ZO~P#/XOr;[O!g#vO(q'nO~O[;^O!Y;ZO~P#/XO!]'oq!^'oq~P#B]O!]#h!Z!^#h!Z~P#B]O#k%e!ZP%e!ZR%e!Z[%e!Za%e!Zj%e!Zr%e!Z!S%e!Z!]%e!Z!l%e!Z!p%e!Z#R%e!Z#n%e!Z#o%e!Z#p%e!Z#q%e!Z#r%e!Z#s%e!Z#t%e!Z#u%e!Z#v%e!Z#x%e!Z#z%e!Z#{%e!Z'y%e!Z(`%e!Z(q%e!Z!k%e!Z!Y%e!Z'v%e!Z#`%e!Zv%e!Z!_%e!Z%i%e!Z!g%e!Z~P#/XOr;fO!g#vO(q'nO~O!Y;gO~P#/XOr;nO!g#vO(q'nO~O!Y;oO~P#/XOP%e!ZR%e!Z[%e!Zj%e!Zr%e!Z!S%e!Z!l%e!Z!p%e!Z#R%e!Z#n%e!Z#o%e!Z#p%e!Z#q%e!Z#r%e!Z#s%e!Z#t%e!Z#u%e!Z#v%e!Z#x%e!Z#z%e!Z#{%e!Z$O%e!Z(`%e!Z(q%e!Z!]%e!Z!^%e!Z~P'%zOr;rO!g#vO(q'nO~Ov(eX~P1qO!Q%qO~P!)PO(T!lO~P!)PO!YfX!]fX#`fX~P%0kOP]XR]X[]Xj]Xr]X!Q]X!S]X!]]X!]fX!l]X!p]X#R]X#S]X#`]X#`fX#kfX#n]X#o]X#p]X#q]X#r]X#s]X#t]X#u]X#v]X#x]X#z]X#{]X$Q]X(`]X(q]X(x]X(y]X~O!gfX!k]X!kfX(qfX~P'JsOP;vOQ;vOSfOd=rOe!iOpkOr;vOskOtkOzkO|;vO!O;vO!SWO!WkO!XkO!_XO!i;yO!lZO!o;vO!p;vO!q;vO!s;zO!u;}O!x!hO$W!kO$n=pO(S)ZO(UTO(XUO(`VO(n[O~O!]<ZO!^$qa~Oh%VOp%WOr%XOs$tOt$tOz%YO|%ZO!O<fO!S${O!_$|O!i=wO!l$xO#j<lO$W%_O$t<hO$v<jO$y%`O(S(tO(UTO(XUO(`$uO(x$}O(y%PO~Ol)bO~P( iOr!eX(q!eX~P# }Or(iX(q(iX~P#!pO!^]X!^fX~P'JsO!YfX!Y$zX!]fX!]$zX#`fX~P!/wO#k<OO~O!g#vO#k<OO~O#`<`O~Oj<SO~O#`<pO!](vX!^(vX~O#`<`O!](tX!^(tX~O#k<qO~Og<sO~P!0{O#k<yO~O#k<zO~O!g#vO#k<{O~O!g#vO#k<qO~O$O<|O~P#B]O#k<}O~O#k=OO~O#k=TO~O#k=UO~O#k=VO~O#k=WO~O$O=XO~P!0{O$O=YO~P!0{Ok#S#T#U#W#X#[#i#j#u$n$t$v$y%]%^%h%i%j%q%s%v%w%y%{~'}T#o!X'{(T#ps#n#qr!Q'|$]'|(S$_(d~",
  goto: "$8g)[PPPPPP)]PP)`P)qP+R/WPPPP6bPP6xPP<pPPP@dP@zP@zPPP@zPCSP@zP@zP@zPCWPC]PCzPHtPPPHxPPPPHxK{PPPLRLsPHxPHxPP! RHxPPPHxPHxP!#YHxP!&p!'u!(OP!(r!(v!(r!,TPPPPPPP!,t!'uPP!-U!.vP!2SHxHx!2X!5e!:R!:R!>QPPP!>YHxPPPPPPPPP!AiP!BvPPHx!DXPHxPHxHxHxHxHxPHx!EkP!HuP!K{P!LP!LZ!L_!L_P!HrP!Lc!LcP# iP# mHxPHx# s#$xCW@zP@zP@z@zP#&V@z@z#(i@z#+a@z#-m@z@z#.]#0q#0q#0v#1P#0q#1[PP#0qP@z#1t@z#5s@z@z6bPPP#9xPPP#:c#:cP#:cP#:y#:cPP#;PP#:vP#:v#;d#:v#<O#<U#<X)`#<[)`P#<c#<c#<cP)`P)`P)`P)`PP)`P#<i#<lP#<l)`P#<pP#<sP)`P)`P)`P)`P)`P)`)`PP#<y#=P#=[#=b#=h#=n#=t#>S#>Y#>d#>j#>t#>z#?[#?b#@S#@f#@l#@r#AQ#Ag#C[#Cj#Cq#E]#Ek#G]#Gk#Gq#Gw#G}#HX#H_#He#Ho#IR#IXPPPPPPPPPPP#I_PPPPPPP#JS#MZ#Ns#Nz$ SPPP$&nP$&w$)p$0Z$0^$0a$1`$1c$1j$1rP$1x$1{P$2i$2m$3e$4s$4x$5`PP$5e$5k$5o$5r$5v$5z$6v$7_$7v$7z$7}$8Q$8W$8Z$8_$8cR!|RoqOXst!Z#d%l&p&r&s&u,n,s2S2VY!vQ'^-`1g5qQ%svQ%{yQ&S|Q&h!VS'U!e-WQ'd!iS'j!r!yU*h$|*X*lQ+l%|Q+y&UQ,_&bQ-^']Q-h'eQ-p'kQ0U*nQ1q,`R<m;z%SdOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y,k,n,s-d-l-z.Q.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3d4q5y6Z6[6_6r8i8x9SS#q];w!r)]$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sU*{%[<e<fQ+q&OQ,a&eQ,h&mQ0r+dQ0w+fQ1S+rQ1y,fQ3W.bQ5V0vQ5]0}Q6Q1rQ7O3[Q8U5^R9Y7Q'QkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=s!S!nQ!r!v!y!z$|'U']'^'j'k'l*h*l*n*o-W-^-`-p0U0X1g5q5s%[$ti#v$b$c$d$x${%O%Q%]%^%b)w*P*R*T*W*^*d*t*u+c+f+},Q.a.z/_/h/r/s/u0Y0[0g0h0i1^1a1i3Z4U4V4a4f4w5R5U5x6|7l7v7|8Q8f9V9e9n9t:S:f:t:};V;^<^<_<a<b<c<d<g<h<i<j<k<l<t<u<v<w<y<z<}=O=P=Q=R=S=T=U=X=Y=p=x=y=|=}Q&V|Q'S!eS'Y%h-ZQ+q&OQ,a&eQ0f+OQ1S+rQ1X+xQ1x,eQ1y,fQ5]0}Q5f1ZQ6Q1rQ6T1tQ6U1wQ8U5^Q8X5cQ8q6WQ9|8YQ:Y8nR<o*XrnOXst!V!Z#d%l&g&p&r&s&u,n,s2S2VR,c&i&z^OPXYstuvwz!Z!`!g!j!o#S#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=r=s[#]WZ#W#Z'V(R!b%im#h#i#l$x%d%g([(f(g(h*W*[*_+W+X+Z,j-Q.O.U.V.W.Y/h/k2[3S3T4X6h6yQ%vxQ%zyS&P|&UQ&]!TQ'a!hQ'c!iQ(o#sS+k%{%|Q+o&OQ,Y&`Q,^&bS-g'd'eQ.d(pQ0{+lQ1R+rQ1T+sQ1W+wQ1l,ZS1p,_,`Q2t-hQ5[0}Q5`1QQ5e1YQ6P1qQ8T5^Q8W5bQ9x8SR:w9y!U$zi$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=y!^%xy!i!u%z%{%|'T'c'd'e'i's*g+k+l-T-g-h-o/{0O0{2m2t2{4i4j4m7s9pQ+e%vQ,O&YQ,R&ZQ,]&bQ.c(oQ1k,YU1o,^,_,`Q3].dQ5z1lS6O1p1qQ8m6P#f=t#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}o=u<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=YW%Ti%V*v=pS&Y!Q&gQ&Z!RQ&[!SQ+S%cR+|&W%]%Si#v$b$c$d$x${%O%Q%]%^%b)w*P*R*T*W*^*d*t*u+c+f+},Q.a.z/_/h/r/s/u0Y0[0g0h0i1^1a1i3Z4U4V4a4f4w5R5U5x6|7l7v7|8Q8f9V9e9n9t:S:f:t:};V;^<^<_<a<b<c<d<g<h<i<j<k<l<t<u<v<w<y<z<}=O=P=Q=R=S=T=U=X=Y=p=x=y=|=}T)x$u)yV*{%[<e<fW'Y!e%h*X-ZS({#y#zQ+`%qQ+v&RS.](k(lQ1b,SQ4x0cR8^5k'QkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=s$i$^c#Y#e%p%r%t(Q(W(r(w)P)Q)R)S)T)U)V)W)X)Y)[)^)`)e)o+a+u-U-s-x-}.P.n.q.u.w.x.y/]0j2c2f2v2}3c3h3i3j3k3l3m3n3o3p3q3r3s3t3w3x4P5O5Y6k6q6v7V7W7a7b8`8|9Q9[9b9c:c:y;R;x=gT#TV#U'RkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sQ'W!eR2i-W!W!nQ!e!r!v!y!z$|'U']'^'j'k'l*X*h*l*n*o-W-^-`-p0U0X1g5q5sR1d,UnqOXst!Z#d%l&p&r&s&u,n,s2S2VQ&w!^Q't!xS(q#u<OQ+i%yQ,W&]Q,X&_Q-e'bQ-r'mS.m(v<qS0k+U<{Q0y+jQ1f,VQ2Z,uQ2],vQ2e-RQ2r-fQ2u-jS5P0l=VQ5W0zS5Z0|=WQ6j2gQ6n2sQ6s2zQ8R5XQ8}6lQ9O6oQ9R6tR:`8z$d$]c#Y#e%r%t(Q(W(r(w)P)Q)R)S)T)U)V)W)X)Y)[)^)`)e)o+a+u-U-s-x-}.P.n.q.u.x.y/]0j2c2f2v2}3c3h3i3j3k3l3m3n3o3p3q3r3s3t3w3x4P5O5Y6k6q6v7V7W7a7b8`8|9Q9[9b9c:c:y;R;x=gS(m#p'gQ(}#zS+_%p.wS.^(l(nR3U._'QkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sS#q];wQ&r!XQ&s!YQ&u![Q&v!]R2R,qQ'_!hQ+b%vQ-c'aS.`(o+eQ2p-bW3Y.c.d0q0sQ6m2qW6z3V3X3]5TU9U6{6}7PU:e9W9X9ZS;T:d:gQ;b;UR;j;cU!wQ'^-`T5o1g5q!Q_OXZ`st!V!Z#d#h%d%l&g&i&p&r&s&u(h,n,s.V2S2V]!pQ!r'^-`1g5qT#q];w%^{OPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9SS({#y#zS.](k(l!s=^$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sU$fd)],hS(n#p'gU*s%R(u3vU0e*z.i7]Q5T0rQ6{3WQ9X7OR:g9Ym!tQ!r!v!y!z'^'j'k'l-`-p1g5q5sQ'r!uS(d#g1|S-n'i'uQ/n*ZQ/{*gQ2|-qQ4]/oQ4i/}Q4j0OQ4o0WQ7h4WS7s4k4mS7w4p4rQ9g7iQ9k7oQ9p7tQ9u7yS:o9l9mS;Y:p:sS;e;Z;[S;m;f;gS;q;n;oR;t;rQ#wbQ'q!uS(c#g1|S(e#m+TQ+V%eQ+g%wQ+m%}U-m'i'r'uQ.R(dQ/m*ZQ/|*gQ0P*iQ0x+hQ1m,[S2y-n-qQ3R.ZS4[/n/oQ4e/yS4h/{0WQ4l0QQ5|1nQ6u2|Q7g4WQ7k4]U7r4i4o4rQ7u4nQ8k5}S9f7h7iQ9j7oQ9r7wQ9s7xQ:V8lQ:m9gS:n9k9mQ:v9uQ;P:WS;X:o:sS;d;Y;ZS;l;e;gS;p;m;oQ;s;qQ;u;tQ=a=[Q=l=eR=m=fV!wQ'^-`%^aOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9SS#wz!j!r=Z$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sR=a=r%^bOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9SQ%ej!^%wy!i!u%z%{%|'T'c'd'e'i's*g+k+l-T-g-h-o/{0O0{2m2t2{4i4j4m7s9pS%}z!jQ+h%xQ,[&bW1n,],^,_,`U5}1o1p1qS8l6O6PQ:W8m!r=[$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sQ=e=qR=f=r%QeOPXYstuvw!Z!`!g!o#S#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&p&r&s&u&y'R'`'p(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9SY#bWZ#W#Z(R!b%im#h#i#l$x%d%g([(f(g(h*W*[*_+W+X+Z,j-Q.O.U.V.W.Y/h/k2[3S3T4X6h6yQ,i&m!p=]$Z$n)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sR=`'VU'Z!e%h*XR2k-Z%SdOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y,k,n,s-d-l-z.Q.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3d4q5y6Z6[6_6r8i8x9S!r)]$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sQ,h&mQ0r+dQ3W.bQ7O3[R9Y7Q!b$Tc#Y%p(Q(W(r(w)X)Y)^)e+u-s-x-}.P.n.q/]0j2v2}3c3s5O5Y6q6v7V9Q:c;x!P<U)[)o-U.w2c2f3h3q3r3w4P6k7W7a7b8`8|9[9b9c:y;R=g!f$Vc#Y%p(Q(W(r(w)U)V)X)Y)^)e+u-s-x-}.P.n.q/]0j2v2}3c3s5O5Y6q6v7V9Q:c;x!T<W)[)o-U.w2c2f3h3n3o3q3r3w4P6k7W7a7b8`8|9[9b9c:y;R=g!^$Zc#Y%p(Q(W(r(w)^)e+u-s-x-}.P.n.q/]0j2v2}3c3s5O5Y6q6v7V9Q:c;xQ4V/fz=s)[)o-U.w2c2f3h3w4P6k7W7a7b8`8|9[9b9c:y;R=gQ=x=zR=y={'QkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sS$oh$pR3|/P'XgOPWXYZhstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n$p%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/P/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sT$kf$qQ$ifS)h$l)lR)t$qT$jf$qT)j$l)l'XhOPWXYZhstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n$p%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/P/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sT$oh$pQ$rhR)s$p%^jOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9S!s=q$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=s#glOPXZst!Z!`!o#S#d#o#{$n%l&i&l&m&p&r&s&u&y'R'`(|)q*f+Y+d,k,n,s-d.b/Q/i0V0d1j1z1{1}2P2S2V2X3[3{4q5y6Z6[6_7Q8i8x!U%Ri$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=y#f(u#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}Q+P%`Q/^)|o3v<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=Y!U$yi$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=yQ*`$zU*i$|*X*lQ+Q%aQ0Q*j#f=c#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}n=d<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=YQ=h=tQ=i=uQ=j=vR=k=w!U%Ri$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=y#f(u#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}o3v<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=YnoOXst!Z#d%l&p&r&s&u,n,s2S2VS*c${*WQ,|&|Q,}'OR4`/s%[%Si#v$b$c$d$x${%O%Q%]%^%b)w*P*R*T*W*^*d*t*u+c+f+},Q.a.z/_/h/r/s/u0Y0[0g0h0i1^1a1i3Z4U4V4a4f4w5R5U5x6|7l7v7|8Q8f9V9e9n9t:S:f:t:};V;^<^<_<a<b<c<d<g<h<i<j<k<l<t<u<v<w<y<z<}=O=P=Q=R=S=T=U=X=Y=p=x=y=|=}Q,P&ZQ1`,RQ5i1_R8]5jV*k$|*X*lU*k$|*X*lT5p1g5qS/y*f/iQ4n0VT7x4q:PQ+g%wQ0P*iQ0x+hQ1m,[Q5|1nQ8k5}Q:V8lR;P:W!U%Oi$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=yx*P$v)c*Q*r+R/q0^0_3y4^4{4|4}7f7z9v:l=b=n=oS0Y*q0Z#f<a#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}n<b<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=Y!d<t(s)a*Y*b.e.h.l/Y/f/v0p1]3`4S4_4c5h7R7U7m7p7}8P9i9q9w:q:u;W;];h=z={`<u3u7X7[7`9]:h:k;kS=P.g3aT=Q7Z9`!U%Qi$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=y|*R$v)c*S*q+R/b/q0^0_3y4^4s4{4|4}7f7z9v:l=b=n=oS0[*r0]#f<c#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}n<d<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=Y!h<v(s)a*Y*b.f.g.l/Y/f/v0p1]3^3`4S4_4c5h7R7S7U7m7p7}8P9i9q9w:q:u;W;];h=z={d<w3u7Y7Z7`9]9^:h:i:k;kS=R.h3bT=S7[9arnOXst!V!Z#d%l&g&p&r&s&u,n,s2S2VQ&d!UR,k&mrnOXst!V!Z#d%l&g&p&r&s&u,n,s2S2VR&d!UQ,T&[R1[+|snOXst!V!Z#d%l&g&p&r&s&u,n,s2S2VQ1h,YS5w1k1lU8e5u5v5zS:R8g8hS:{:Q:TQ;_:|R;i;`Q&k!VR,d&gR6T1tR:Y8nS&P|&UR1T+sQ&p!WR,n&qR,t&vT2T,s2VR,x&wQ,w&wR2^,xQ'w!{R-t'wSsOtQ#dXT%os#dQ#OTR'y#OQ#RUR'{#RQ)y$uR/Z)yQ#UVR(O#UQ#XWU(U#X(V-{Q(V#YR-{(WQ-X'WR2j-XQ.p(wS3e.p3fR3f.qQ-`'^R2n-`Y!rQ'^-`1g5qR'h!rQ.{)cR3z.{U#_W%g*WU(]#_(^-|Q(^#`R-|(XQ-['ZR2l-[t`OXst!V!Z#d%l&g&i&p&r&s&u,n,s2S2VS#hZ%dU#r`#h.VR.V(hQ(i#jQ.S(eW.[(i.S3P6wQ3P.TR6w3QQ)l$lR/R)lQ$phR)r$pQ$`cU)_$`-w<[Q-w;xR<[)oQ/l*ZW4Y/l4Z7j9hU4Z/m/n/oS7j4[4]R9h7k$e*O$v(s)a)c*Y*b*q*r*|*}+R.g.h.j.k.l/Y/b/d/f/q/v0^0_0p1]3^3_3`3u3y4S4^4_4c4s4u4{4|4}5h7R7S7T7U7Z7[7^7_7`7f7m7p7z7}8P9]9^9_9i9q9v9w:h:i:j:k:l:q:u;W;];h;k=b=n=o=z={Q/t*bU4b/t4d7nQ4d/vR7n4cS*l$|*XR0S*lx*Q$v)c*q*r+R/q0^0_3y4^4{4|4}7f7z9v:l=b=n=o!d.e(s)a*Y*b.g.h.l/Y/f/v0p1]3`4S4_4c5h7R7U7m7p7}8P9i9q9w:q:u;W;];h=z={U/c*Q.e7Xa7X3u7Z7[7`9]:h:k;kQ0Z*qQ3a.gU4t0Z3a9`R9`7Z|*S$v)c*q*r+R/b/q0^0_3y4^4s4{4|4}7f7z9v:l=b=n=o!h.f(s)a*Y*b.g.h.l/Y/f/v0p1]3^3`4S4_4c5h7R7S7U7m7p7}8P9i9q9w:q:u;W;];h=z={U/e*S.f7Ye7Y3u7Z7[7`9]9^:h:i:k;kQ0]*rQ3b.hU4v0]3b9aR9a7[Q*w%UR0a*wQ5S0pR8O5SQ+[%jR0o+[Q5l1bS8_5l:OR:O8`Q,V&]R1e,VQ5q1gR8b5qQ1s,aS6R1s8oR8o6TQ1O+oW5_1O5a8V9zQ5a1RQ8V5`R9z8WQ+t&PR1U+tQ2V,sR6c2VYrOXst#dQ&t!ZQ+^%lQ,m&pQ,o&rQ,p&sQ,r&uQ2Q,nS2T,s2VR6b2SQ%npQ&x!_Q&{!aQ&}!bQ'P!cQ'o!uQ+]%kQ+i%yQ+{&VQ,c&kQ,z&zW-k'i'q'r'uQ-r'mQ0R*kQ0y+jS1v,d,gQ2_,yQ2`,|Q2a,}Q2u-jW2w-m-n-q-sQ5W0zQ5d1XQ5g1]Q5{1mQ6V1xQ6a2RU6p2v2y2|Q6s2zQ8R5XQ8Z5fQ8[5hQ8a5pQ8j5|Q8p6US9P6q6uQ9R6tQ9{8XQ:U8kQ:Z8qQ:b9QQ:x9|Q;O:VQ;S:cR;a;PQ%yyQ'b!iQ'm!uU+j%z%{%|Q-R'TU-f'c'd'eS-j'i'sQ/z*gS0z+k+lQ2g-TS2s-g-hQ2z-oS4g/{0OQ5X0{Q6l2mQ6o2tQ6t2{U7q4i4j4mQ9o7sR:r9pS$wi=pR*x%VU%Ui%V=pR0`*vQ$viS(s#v+fS)a$b$cQ)c$dQ*Y$xS*b${*WQ*q%OQ*r%QQ*|%]Q*}%^Q+R%bQ.g<aQ.h<cQ.j<gQ.k<iQ.l<kQ/Y)wQ/b*PQ/d*RQ/f*TQ/q*^S/v*d/hQ0^*tQ0_*ul0p+c,Q.a1a1i3Z5x6|8f9V:S:f:};VQ1]+}Q3^<tQ3_<vQ3`<yS3u<^<_Q3y.zS4S/_4UQ4^/rQ4_/sQ4c/uQ4s0YQ4u0[Q4{0gQ4|0hQ4}0iQ5h1^Q7R<}Q7S=PQ7T=RQ7U=TQ7Z<bQ7[<dQ7^<hQ7_<jQ7`<lQ7f4VQ7m4aQ7p4fQ7z4wQ7}5RQ8P5UQ9]<zQ9^<uQ9_<wQ9i7lQ9q7vQ9v7|Q9w8QQ:h=OQ:i=QQ:j=SQ:k=UQ:l9eQ:q9nQ:u9tQ;W=XQ;]:tQ;h;^Q;k=YQ=b=pQ=n=xQ=o=yQ=z=|R={=}Q*z%[Q.i<eR7]<fnpOXst!Z#d%l&p&r&s&u,n,s2S2VQ!fPS#fZ#oQ&z!`W'f!o*f0V4qQ'}#SQ)O#{Q)p$nS,g&i&lQ,l&mQ,y&yS-O'R/iQ-b'`Q.s(|Q/V)qQ0m+YQ0s+dQ2O,kQ2q-dQ3X.bQ4O/QQ4y0dQ5v1jQ6X1zQ6Y1{Q6^1}Q6`2PQ6e2XQ7P3[Q7c3{Q8h5yQ8t6ZQ8u6[Q8w6_Q9Z7QQ:T8iR:_8x#[cOPXZst!Z!`!o#d#o#{%l&i&l&m&p&r&s&u&y'R'`(|*f+Y+d,k,n,s-d.b/i0V0d1j1z1{1}2P2S2V2X3[4q5y6Z6[6_7Q8i8xQ#YWQ#eYQ%puQ%rvS%tw!gS(Q#W(TQ(W#ZQ(r#uQ(w#xQ)P$OQ)Q$PQ)R$QQ)S$RQ)T$SQ)U$TQ)V$UQ)W$VQ)X$WQ)Y$XQ)[$ZQ)^$_Q)`$aQ)e$eW)o$n)q/Q3{Q+a%sQ+u&QS-U'V2hQ-s'pS-x(R-zQ-}(ZQ.P(bQ.n(vQ.q(xQ.u;vQ.w;yQ.x;zQ.y;}Q/]){Q0j+UQ2c-PQ2f-SQ2v-lQ2}.QQ3c.oQ3h<OQ3i<PQ3j<QQ3k<RQ3l<SQ3m<TQ3n<UQ3o<VQ3p<WQ3q<XQ3r<YQ3s.vQ3t<]Q3w<`Q3x<mQ4P<ZQ5O0lQ5Y0|Q6k<pQ6q2xQ6v3OQ7V3dQ7W<qQ7a<sQ7b<{Q8`5mQ8|6iQ9Q6rQ9[<|Q9b=VQ9c=WQ:c9SQ:y9}Q;R:aQ;x#SR=g=sR#[WR'X!el!tQ!r!v!y!z'^'j'k'l-`-p1g5q5sS'T!e-WU*g$|*X*lS-T'U']S0O*h*nQ0W*oQ2m-^Q4m0UR4r0XR(y#xQ!fQT-_'^-`]!qQ!r'^-`1g5qQ#p]R'g;wR)d$dY!uQ'^-`1g5qQ'i!rS's!v!yS'u!z5sS-o'j'kQ-q'lR2{-pT#kZ%dS#jZ%dS%jm,jU(e#h#i#lS.T(f(gQ.X(hQ0n+ZQ3Q.UU3R.V.W.YS6x3S3TR9T6yd#^W#W#Z%g(R([*W+W.O/hr#gZm#h#i#l%d(f(g(h+Z.U.V.W.Y3S3T6yS*Z$x*_Q/o*[Q1|,jQ2d-QQ4W/kQ6g2[Q7i4XQ8{6hT=_'V+XV#aW%g*WU#`W%g*WS(S#W([U(X#Z+W/hS-V'V+XT-y(R.OV'[!e%h*XQ$lfR)v$qT)k$l)lR3}/PT*]$x*_T*e${*WQ0q+cQ1_,QQ3V.aQ5j1aQ5u1iQ6}3ZQ8g5xQ9W6|Q:Q8fQ:d9VQ:|:SQ;U:fQ;`:}R;c;VnqOXst!Z#d%l&p&r&s&u,n,s2S2VQ&j!VR,c&gtmOXst!U!V!Z#d%l&g&p&r&s&u,n,s2S2VR,j&mT%km,jR1c,SR,b&eQ&T|R+z&UR+p&OT&n!W&qT&o!W&qT2U,s2V",
  nodeNames: "⚠ ArithOp ArithOp ?. JSXStartTag LineComment BlockComment Script Hashbang ExportDeclaration export Star as VariableName String Escape from ; default FunctionDeclaration async function VariableDefinition > < TypeParamList in out const TypeDefinition extends ThisType this LiteralType ArithOp Number BooleanLiteral TemplateType InterpolationEnd Interpolation InterpolationStart NullType null VoidType void TypeofType typeof MemberExpression . PropertyName [ TemplateString Escape Interpolation super RegExp ] ArrayExpression Spread , } { ObjectExpression Property async get set PropertyDefinition Block : NewTarget new NewExpression ) ( ArgList UnaryExpression delete LogicOp BitOp YieldExpression yield AwaitExpression await ParenthesizedExpression ClassExpression class ClassBody MethodDeclaration Decorator @ MemberExpression PrivatePropertyName CallExpression TypeArgList CompareOp < declare Privacy static abstract override PrivatePropertyDefinition PropertyDeclaration readonly accessor Optional TypeAnnotation Equals StaticBlock FunctionExpression ArrowFunction ParamList ParamList ArrayPattern ObjectPattern PatternProperty Privacy readonly Arrow MemberExpression BinaryExpression ArithOp ArithOp ArithOp ArithOp BitOp CompareOp instanceof satisfies CompareOp BitOp BitOp BitOp LogicOp LogicOp ConditionalExpression LogicOp LogicOp AssignmentExpression UpdateOp PostfixExpression CallExpression InstantiationExpression TaggedTemplateExpression DynamicImport import ImportMeta JSXElement JSXSelfCloseEndTag JSXSelfClosingTag JSXIdentifier JSXBuiltin JSXIdentifier JSXNamespacedName JSXMemberExpression JSXSpreadAttribute JSXAttribute JSXAttributeValue JSXEscape JSXEndTag JSXOpenTag JSXFragmentTag JSXText JSXEscape JSXStartCloseTag JSXCloseTag PrefixCast < ArrowFunction TypeParamList SequenceExpression InstantiationExpression KeyofType keyof UniqueType unique ImportType InferredType infer TypeName ParenthesizedType FunctionSignature ParamList NewSignature IndexedType TupleType Label ArrayType ReadonlyType ObjectType MethodType PropertyType IndexSignature PropertyDefinition CallSignature TypePredicate asserts is NewSignature new UnionType LogicOp IntersectionType LogicOp ConditionalType ParameterizedType ClassDeclaration abstract implements type VariableDeclaration let var using TypeAliasDeclaration InterfaceDeclaration interface EnumDeclaration enum EnumBody NamespaceDeclaration namespace module AmbientDeclaration declare GlobalDeclaration global ClassDeclaration ClassBody AmbientFunctionDeclaration ExportGroup VariableName VariableName ImportDeclaration ImportGroup ForStatement for ForSpec ForInSpec ForOfSpec of WhileStatement while WithStatement with DoStatement do IfStatement if else SwitchStatement switch SwitchBody CaseLabel case DefaultLabel TryStatement try CatchClause catch FinallyClause finally ReturnStatement return ThrowStatement throw BreakStatement break ContinueStatement continue DebuggerStatement debugger LabeledStatement ExpressionStatement SingleExpression SingleClassItem",
  maxTerm: 379,
  context: mB,
  nodeProps: [
    ["isolate", -8, 5, 6, 14, 37, 39, 51, 53, 55, ""],
    ["group", -26, 9, 17, 19, 68, 207, 211, 215, 216, 218, 221, 224, 234, 236, 242, 244, 246, 248, 251, 257, 263, 265, 267, 269, 271, 273, 274, "Statement", -34, 13, 14, 32, 35, 36, 42, 51, 54, 55, 57, 62, 70, 72, 76, 80, 82, 84, 85, 110, 111, 120, 121, 136, 139, 141, 142, 143, 144, 145, 147, 148, 167, 169, 171, "Expression", -23, 31, 33, 37, 41, 43, 45, 173, 175, 177, 178, 180, 181, 182, 184, 185, 186, 188, 189, 190, 201, 203, 205, 206, "Type", -3, 88, 103, 109, "ClassItem"],
    ["openedBy", 23, "<", 38, "InterpolationStart", 56, "[", 60, "{", 73, "(", 160, "JSXStartCloseTag"],
    ["closedBy", -2, 24, 168, ">", 40, "InterpolationEnd", 50, "]", 61, "}", 74, ")", 165, "JSXEndTag"]
  ],
  propSources: [wB],
  skippedNodes: [0, 5, 6, 277],
  repeatNodeCount: 37,
  tokenData: "$Fq07[R!bOX%ZXY+gYZ-yZ[+g[]%Z]^.c^p%Zpq+gqr/mrs3cst:_tuEruvJSvwLkwx! Yxy!'iyz!(sz{!)}{|!,q|}!.O}!O!,q!O!P!/Y!P!Q!9j!Q!R#:O!R![#<_![!]#I_!]!^#Jk!^!_#Ku!_!`$![!`!a$$v!a!b$*T!b!c$,r!c!}Er!}#O$-|#O#P$/W#P#Q$4o#Q#R$5y#R#SEr#S#T$7W#T#o$8b#o#p$<r#p#q$=h#q#r$>x#r#s$@U#s$f%Z$f$g+g$g#BYEr#BY#BZ$A`#BZ$ISEr$IS$I_$A`$I_$I|Er$I|$I}$Dk$I}$JO$Dk$JO$JTEr$JT$JU$A`$JU$KVEr$KV$KW$A`$KW&FUEr&FU&FV$A`&FV;'SEr;'S;=`I|<%l?HTEr?HT?HU$A`?HUOEr(n%d_$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z&j&hT$i&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c&j&zP;=`<%l&c'|'U]$i&j(Y!bOY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}!b(SU(Y!bOY'}Zw'}x#O'}#P;'S'};'S;=`(f<%lO'}!b(iP;=`<%l'}'|(oP;=`<%l&}'[(y]$i&j(VpOY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(rp)wU(VpOY)rZr)rs#O)r#P;'S)r;'S;=`*Z<%lO)rp*^P;=`<%l)r'[*dP;=`<%l(r#S*nX(Vp(Y!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g#S+^P;=`<%l*g(n+dP;=`<%l%Z07[+rq$i&j(Vp(Y!b'{0/lOX%ZXY+gYZ&cZ[+g[p%Zpq+gqr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p$f%Z$f$g+g$g#BY%Z#BY#BZ+g#BZ$IS%Z$IS$I_+g$I_$JT%Z$JT$JU+g$JU$KV%Z$KV$KW+g$KW&FU%Z&FU&FV+g&FV;'S%Z;'S;=`+a<%l?HT%Z?HT?HU+g?HUO%Z07[.ST(W#S$i&j'|0/lO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c07[.n_$i&j(Vp(Y!b'|0/lOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z)3p/x`$i&j!p),Q(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`0z!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW1V`#v(Ch$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`2X!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW2d_#v(Ch$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'At3l_(U':f$i&j(Y!bOY4kYZ5qZr4krs7nsw4kwx5qx!^4k!^!_8p!_#O4k#O#P5q#P#o4k#o#p8p#p;'S4k;'S;=`:X<%lO4k(^4r_$i&j(Y!bOY4kYZ5qZr4krs7nsw4kwx5qx!^4k!^!_8p!_#O4k#O#P5q#P#o4k#o#p8p#p;'S4k;'S;=`:X<%lO4k&z5vX$i&jOr5qrs6cs!^5q!^!_6y!_#o5q#o#p6y#p;'S5q;'S;=`7h<%lO5q&z6jT$d`$i&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c`6|TOr6yrs7]s;'S6y;'S;=`7b<%lO6y`7bO$d``7eP;=`<%l6y&z7kP;=`<%l5q(^7w]$d`$i&j(Y!bOY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}!r8uZ(Y!bOY8pYZ6yZr8prs9hsw8pwx6yx#O8p#O#P6y#P;'S8p;'S;=`:R<%lO8p!r9oU$d`(Y!bOY'}Zw'}x#O'}#P;'S'};'S;=`(f<%lO'}!r:UP;=`<%l8p(^:[P;=`<%l4k%9[:hh$i&j(Vp(Y!bOY%ZYZ&cZq%Zqr<Srs&}st%ZtuCruw%Zwx(rx!^%Z!^!_*g!_!c%Z!c!}Cr!}#O%Z#O#P&c#P#R%Z#R#SCr#S#T%Z#T#oCr#o#p*g#p$g%Z$g;'SCr;'S;=`El<%lOCr(r<__WS$i&j(Vp(Y!bOY<SYZ&cZr<Srs=^sw<Swx@nx!^<S!^!_Bm!_#O<S#O#P>`#P#o<S#o#pBm#p;'S<S;'S;=`Cl<%lO<S(Q=g]WS$i&j(Y!bOY=^YZ&cZw=^wx>`x!^=^!^!_?q!_#O=^#O#P>`#P#o=^#o#p?q#p;'S=^;'S;=`@h<%lO=^&n>gXWS$i&jOY>`YZ&cZ!^>`!^!_?S!_#o>`#o#p?S#p;'S>`;'S;=`?k<%lO>`S?XSWSOY?SZ;'S?S;'S;=`?e<%lO?SS?hP;=`<%l?S&n?nP;=`<%l>`!f?xWWS(Y!bOY?qZw?qwx?Sx#O?q#O#P?S#P;'S?q;'S;=`@b<%lO?q!f@eP;=`<%l?q(Q@kP;=`<%l=^'`@w]WS$i&j(VpOY@nYZ&cZr@nrs>`s!^@n!^!_Ap!_#O@n#O#P>`#P#o@n#o#pAp#p;'S@n;'S;=`Bg<%lO@ntAwWWS(VpOYApZrAprs?Ss#OAp#O#P?S#P;'SAp;'S;=`Ba<%lOAptBdP;=`<%lAp'`BjP;=`<%l@n#WBvYWS(Vp(Y!bOYBmZrBmrs?qswBmwxApx#OBm#O#P?S#P;'SBm;'S;=`Cf<%lOBm#WCiP;=`<%lBm(rCoP;=`<%l<S%9[C}i$i&j(n%1l(Vp(Y!bOY%ZYZ&cZr%Zrs&}st%ZtuCruw%Zwx(rx!Q%Z!Q![Cr![!^%Z!^!_*g!_!c%Z!c!}Cr!}#O%Z#O#P&c#P#R%Z#R#SCr#S#T%Z#T#oCr#o#p*g#p$g%Z$g;'SCr;'S;=`El<%lOCr%9[EoP;=`<%lCr07[FRk$i&j(Vp(Y!b$]#t(S,2j(d$I[OY%ZYZ&cZr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$g%Z$g;'SEr;'S;=`I|<%lOEr+dHRk$i&j(Vp(Y!b$]#tOY%ZYZ&cZr%Zrs&}st%ZtuGvuw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Gv![!^%Z!^!_*g!_!c%Z!c!}Gv!}#O%Z#O#P&c#P#R%Z#R#SGv#S#T%Z#T#oGv#o#p*g#p$g%Z$g;'SGv;'S;=`Iv<%lOGv+dIyP;=`<%lGv07[JPP;=`<%lEr(KWJ_`$i&j(Vp(Y!b#p(ChOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KWKl_$i&j$Q(Ch(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z,#xLva(y+JY$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sv%ZvwM{wx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KWNW`$i&j#z(Ch(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'At! c_(X';W$i&j(VpOY!!bYZ!#hZr!!brs!#hsw!!bwx!$xx!^!!b!^!_!%z!_#O!!b#O#P!#h#P#o!!b#o#p!%z#p;'S!!b;'S;=`!'c<%lO!!b'l!!i_$i&j(VpOY!!bYZ!#hZr!!brs!#hsw!!bwx!$xx!^!!b!^!_!%z!_#O!!b#O#P!#h#P#o!!b#o#p!%z#p;'S!!b;'S;=`!'c<%lO!!b&z!#mX$i&jOw!#hwx6cx!^!#h!^!_!$Y!_#o!#h#o#p!$Y#p;'S!#h;'S;=`!$r<%lO!#h`!$]TOw!$Ywx7]x;'S!$Y;'S;=`!$l<%lO!$Y`!$oP;=`<%l!$Y&z!$uP;=`<%l!#h'l!%R]$d`$i&j(VpOY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(r!Q!&PZ(VpOY!%zYZ!$YZr!%zrs!$Ysw!%zwx!&rx#O!%z#O#P!$Y#P;'S!%z;'S;=`!']<%lO!%z!Q!&yU$d`(VpOY)rZr)rs#O)r#P;'S)r;'S;=`*Z<%lO)r!Q!'`P;=`<%l!%z'l!'fP;=`<%l!!b/5|!'t_!l/.^$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#&U!)O_!k!Lf$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z-!n!*[b$i&j(Vp(Y!b(T%&f#q(ChOY%ZYZ&cZr%Zrs&}sw%Zwx(rxz%Zz{!+d{!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW!+o`$i&j(Vp(Y!b#n(ChOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z+;x!,|`$i&j(Vp(Y!br+4YOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z,$U!.Z_!]+Jf$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[!/ec$i&j(Vp(Y!b!Q.2^OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!0p!P!Q%Z!Q![!3Y![!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#%|!0ya$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!2O!P!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#%|!2Z_![!L^$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!3eg$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!3Y![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S!3Y#S#X%Z#X#Y!4|#Y#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!5Vg$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx{%Z{|!6n|}%Z}!O!6n!O!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!6wc$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!8_c$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[!9uf$i&j(Vp(Y!b#o(ChOY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcxz!;Zz{#-}{!P!;Z!P!Q#/d!Q!^!;Z!^!_#(i!_!`#7S!`!a#8i!a!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z?O!;fb$i&j(Vp(Y!b!X7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z>^!<w`$i&j(Y!b!X7`OY!<nYZ&cZw!<nwx!=yx!P!<n!P!Q!Eq!Q!^!<n!^!_!Gr!_!}!<n!}#O!KS#O#P!Dy#P#o!<n#o#p!Gr#p;'S!<n;'S;=`!L]<%lO!<n<z!>Q^$i&j!X7`OY!=yYZ&cZ!P!=y!P!Q!>|!Q!^!=y!^!_!@c!_!}!=y!}#O!CW#O#P!Dy#P#o!=y#o#p!@c#p;'S!=y;'S;=`!Ek<%lO!=y<z!?Td$i&j!X7`O!^&c!_#W&c#W#X!>|#X#Z&c#Z#[!>|#[#]&c#]#^!>|#^#a&c#a#b!>|#b#g&c#g#h!>|#h#i&c#i#j!>|#j#k!>|#k#m&c#m#n!>|#n#o&c#p;'S&c;'S;=`&w<%lO&c7`!@hX!X7`OY!@cZ!P!@c!P!Q!AT!Q!}!@c!}#O!Ar#O#P!Bq#P;'S!@c;'S;=`!CQ<%lO!@c7`!AYW!X7`#W#X!AT#Z#[!AT#]#^!AT#a#b!AT#g#h!AT#i#j!AT#j#k!AT#m#n!AT7`!AuVOY!ArZ#O!Ar#O#P!B[#P#Q!@c#Q;'S!Ar;'S;=`!Bk<%lO!Ar7`!B_SOY!ArZ;'S!Ar;'S;=`!Bk<%lO!Ar7`!BnP;=`<%l!Ar7`!BtSOY!@cZ;'S!@c;'S;=`!CQ<%lO!@c7`!CTP;=`<%l!@c<z!C][$i&jOY!CWYZ&cZ!^!CW!^!_!Ar!_#O!CW#O#P!DR#P#Q!=y#Q#o!CW#o#p!Ar#p;'S!CW;'S;=`!Ds<%lO!CW<z!DWX$i&jOY!CWYZ&cZ!^!CW!^!_!Ar!_#o!CW#o#p!Ar#p;'S!CW;'S;=`!Ds<%lO!CW<z!DvP;=`<%l!CW<z!EOX$i&jOY!=yYZ&cZ!^!=y!^!_!@c!_#o!=y#o#p!@c#p;'S!=y;'S;=`!Ek<%lO!=y<z!EnP;=`<%l!=y>^!Ezl$i&j(Y!b!X7`OY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#W&}#W#X!Eq#X#Z&}#Z#[!Eq#[#]&}#]#^!Eq#^#a&}#a#b!Eq#b#g&}#g#h!Eq#h#i&}#i#j!Eq#j#k!Eq#k#m&}#m#n!Eq#n#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}8r!GyZ(Y!b!X7`OY!GrZw!Grwx!@cx!P!Gr!P!Q!Hl!Q!}!Gr!}#O!JU#O#P!Bq#P;'S!Gr;'S;=`!J|<%lO!Gr8r!Hse(Y!b!X7`OY'}Zw'}x#O'}#P#W'}#W#X!Hl#X#Z'}#Z#[!Hl#[#]'}#]#^!Hl#^#a'}#a#b!Hl#b#g'}#g#h!Hl#h#i'}#i#j!Hl#j#k!Hl#k#m'}#m#n!Hl#n;'S'};'S;=`(f<%lO'}8r!JZX(Y!bOY!JUZw!JUwx!Arx#O!JU#O#P!B[#P#Q!Gr#Q;'S!JU;'S;=`!Jv<%lO!JU8r!JyP;=`<%l!JU8r!KPP;=`<%l!Gr>^!KZ^$i&j(Y!bOY!KSYZ&cZw!KSwx!CWx!^!KS!^!_!JU!_#O!KS#O#P!DR#P#Q!<n#Q#o!KS#o#p!JU#p;'S!KS;'S;=`!LV<%lO!KS>^!LYP;=`<%l!KS>^!L`P;=`<%l!<n=l!Ll`$i&j(Vp!X7`OY!LcYZ&cZr!Lcrs!=ys!P!Lc!P!Q!Mn!Q!^!Lc!^!_# o!_!}!Lc!}#O#%P#O#P!Dy#P#o!Lc#o#p# o#p;'S!Lc;'S;=`#&Y<%lO!Lc=l!Mwl$i&j(Vp!X7`OY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#W(r#W#X!Mn#X#Z(r#Z#[!Mn#[#](r#]#^!Mn#^#a(r#a#b!Mn#b#g(r#g#h!Mn#h#i(r#i#j!Mn#j#k!Mn#k#m(r#m#n!Mn#n#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(r8Q# vZ(Vp!X7`OY# oZr# ors!@cs!P# o!P!Q#!i!Q!}# o!}#O#$R#O#P!Bq#P;'S# o;'S;=`#$y<%lO# o8Q#!pe(Vp!X7`OY)rZr)rs#O)r#P#W)r#W#X#!i#X#Z)r#Z#[#!i#[#])r#]#^#!i#^#a)r#a#b#!i#b#g)r#g#h#!i#h#i)r#i#j#!i#j#k#!i#k#m)r#m#n#!i#n;'S)r;'S;=`*Z<%lO)r8Q#$WX(VpOY#$RZr#$Rrs!Ars#O#$R#O#P!B[#P#Q# o#Q;'S#$R;'S;=`#$s<%lO#$R8Q#$vP;=`<%l#$R8Q#$|P;=`<%l# o=l#%W^$i&j(VpOY#%PYZ&cZr#%Prs!CWs!^#%P!^!_#$R!_#O#%P#O#P!DR#P#Q!Lc#Q#o#%P#o#p#$R#p;'S#%P;'S;=`#&S<%lO#%P=l#&VP;=`<%l#%P=l#&]P;=`<%l!Lc?O#&kn$i&j(Vp(Y!b!X7`OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#W%Z#W#X#&`#X#Z%Z#Z#[#&`#[#]%Z#]#^#&`#^#a%Z#a#b#&`#b#g%Z#g#h#&`#h#i%Z#i#j#&`#j#k#&`#k#m%Z#m#n#&`#n#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z9d#(r](Vp(Y!b!X7`OY#(iZr#(irs!Grsw#(iwx# ox!P#(i!P!Q#)k!Q!}#(i!}#O#+`#O#P!Bq#P;'S#(i;'S;=`#,`<%lO#(i9d#)th(Vp(Y!b!X7`OY*gZr*grs'}sw*gwx)rx#O*g#P#W*g#W#X#)k#X#Z*g#Z#[#)k#[#]*g#]#^#)k#^#a*g#a#b#)k#b#g*g#g#h#)k#h#i*g#i#j#)k#j#k#)k#k#m*g#m#n#)k#n;'S*g;'S;=`+Z<%lO*g9d#+gZ(Vp(Y!bOY#+`Zr#+`rs!JUsw#+`wx#$Rx#O#+`#O#P!B[#P#Q#(i#Q;'S#+`;'S;=`#,Y<%lO#+`9d#,]P;=`<%l#+`9d#,cP;=`<%l#(i?O#,o`$i&j(Vp(Y!bOY#,fYZ&cZr#,frs!KSsw#,fwx#%Px!^#,f!^!_#+`!_#O#,f#O#P!DR#P#Q!;Z#Q#o#,f#o#p#+`#p;'S#,f;'S;=`#-q<%lO#,f?O#-tP;=`<%l#,f?O#-zP;=`<%l!;Z07[#.[b$i&j(Vp(Y!b'}0/l!X7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z07[#/o_$i&j(Vp(Y!bT0/lOY#/dYZ&cZr#/drs#0nsw#/dwx#4Ox!^#/d!^!_#5}!_#O#/d#O#P#1p#P#o#/d#o#p#5}#p;'S#/d;'S;=`#6|<%lO#/d06j#0w]$i&j(Y!bT0/lOY#0nYZ&cZw#0nwx#1px!^#0n!^!_#3R!_#O#0n#O#P#1p#P#o#0n#o#p#3R#p;'S#0n;'S;=`#3x<%lO#0n05W#1wX$i&jT0/lOY#1pYZ&cZ!^#1p!^!_#2d!_#o#1p#o#p#2d#p;'S#1p;'S;=`#2{<%lO#1p0/l#2iST0/lOY#2dZ;'S#2d;'S;=`#2u<%lO#2d0/l#2xP;=`<%l#2d05W#3OP;=`<%l#1p01O#3YW(Y!bT0/lOY#3RZw#3Rwx#2dx#O#3R#O#P#2d#P;'S#3R;'S;=`#3r<%lO#3R01O#3uP;=`<%l#3R06j#3{P;=`<%l#0n05x#4X]$i&j(VpT0/lOY#4OYZ&cZr#4Ors#1ps!^#4O!^!_#5Q!_#O#4O#O#P#1p#P#o#4O#o#p#5Q#p;'S#4O;'S;=`#5w<%lO#4O00^#5XW(VpT0/lOY#5QZr#5Qrs#2ds#O#5Q#O#P#2d#P;'S#5Q;'S;=`#5q<%lO#5Q00^#5tP;=`<%l#5Q05x#5zP;=`<%l#4O01p#6WY(Vp(Y!bT0/lOY#5}Zr#5}rs#3Rsw#5}wx#5Qx#O#5}#O#P#2d#P;'S#5};'S;=`#6v<%lO#5}01p#6yP;=`<%l#5}07[#7PP;=`<%l#/d)3h#7ab$i&j$Q(Ch(Vp(Y!b!X7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;ZAt#8vb$Z#t$i&j(Vp(Y!b!X7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z'Ad#:Zp$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!3Y!P!Q%Z!Q![#<_![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S#<_#S#U%Z#U#V#?i#V#X%Z#X#Y!4|#Y#b%Z#b#c#>_#c#d#Bq#d#l%Z#l#m#Es#m#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#<jk$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!3Y!P!Q%Z!Q![#<_![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S#<_#S#X%Z#X#Y!4|#Y#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#>j_$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#?rd$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!R#AQ!R!S#AQ!S!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#AQ#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#A]f$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!R#AQ!R!S#AQ!S!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#AQ#S#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#Bzc$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!Y#DV!Y!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#DV#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#Dbe$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!Y#DV!Y!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#DV#S#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#E|g$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![#Ge![!^%Z!^!_*g!_!c%Z!c!i#Ge!i#O%Z#O#P&c#P#R%Z#R#S#Ge#S#T%Z#T#Z#Ge#Z#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#Gpi$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![#Ge![!^%Z!^!_*g!_!c%Z!c!i#Ge!i#O%Z#O#P&c#P#R%Z#R#S#Ge#S#T%Z#T#Z#Ge#Z#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z*)x#Il_!g$b$i&j$O)Lv(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z)[#Jv_al$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z04f#LS^h#)`#R-<U(Vp(Y!b$n7`OY*gZr*grs'}sw*gwx)rx!P*g!P!Q#MO!Q!^*g!^!_#Mt!_!`$ f!`#O*g#P;'S*g;'S;=`+Z<%lO*g(n#MXX$k&j(Vp(Y!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g(El#M}Z#r(Ch(Vp(Y!bOY*gZr*grs'}sw*gwx)rx!_*g!_!`#Np!`#O*g#P;'S*g;'S;=`+Z<%lO*g(El#NyX$Q(Ch(Vp(Y!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g(El$ oX#s(Ch(Vp(Y!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g*)x$!ga#`*!Y$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`0z!`!a$#l!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(K[$#w_#k(Cl$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z*)x$%Vag!*r#s(Ch$f#|$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`$&[!`!a$'f!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$&g_#s(Ch$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$'qa#r(Ch$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`!a$(v!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$)R`#r(Ch$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(Kd$*`a(q(Ct$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!a%Z!a!b$+e!b#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$+p`$i&j#{(Ch(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#`$,}_!|$Ip$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z04f$.X_!S0,v$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(n$/]Z$i&jO!^$0O!^!_$0f!_#i$0O#i#j$0k#j#l$0O#l#m$2^#m#o$0O#o#p$0f#p;'S$0O;'S;=`$4i<%lO$0O(n$0VT_#S$i&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c#S$0kO_#S(n$0p[$i&jO!Q&c!Q![$1f![!^&c!_!c&c!c!i$1f!i#T&c#T#Z$1f#Z#o&c#o#p$3|#p;'S&c;'S;=`&w<%lO&c(n$1kZ$i&jO!Q&c!Q![$2^![!^&c!_!c&c!c!i$2^!i#T&c#T#Z$2^#Z#o&c#p;'S&c;'S;=`&w<%lO&c(n$2cZ$i&jO!Q&c!Q![$3U![!^&c!_!c&c!c!i$3U!i#T&c#T#Z$3U#Z#o&c#p;'S&c;'S;=`&w<%lO&c(n$3ZZ$i&jO!Q&c!Q![$0O![!^&c!_!c&c!c!i$0O!i#T&c#T#Z$0O#Z#o&c#p;'S&c;'S;=`&w<%lO&c#S$4PR!Q![$4Y!c!i$4Y#T#Z$4Y#S$4]S!Q![$4Y!c!i$4Y#T#Z$4Y#q#r$0f(n$4lP;=`<%l$0O#1[$4z_!Y#)l$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$6U`#x(Ch$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z+;p$7c_$i&j(Vp(Y!b(`+4QOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[$8qk$i&j(Vp(Y!b(S,2j$_#t(d$I[OY%ZYZ&cZr%Zrs&}st%Ztu$8buw%Zwx(rx}%Z}!O$:f!O!Q%Z!Q![$8b![!^%Z!^!_*g!_!c%Z!c!}$8b!}#O%Z#O#P&c#P#R%Z#R#S$8b#S#T%Z#T#o$8b#o#p*g#p$g%Z$g;'S$8b;'S;=`$<l<%lO$8b+d$:qk$i&j(Vp(Y!b$_#tOY%ZYZ&cZr%Zrs&}st%Ztu$:fuw%Zwx(rx}%Z}!O$:f!O!Q%Z!Q![$:f![!^%Z!^!_*g!_!c%Z!c!}$:f!}#O%Z#O#P&c#P#R%Z#R#S$:f#S#T%Z#T#o$:f#o#p*g#p$g%Z$g;'S$:f;'S;=`$<f<%lO$:f+d$<iP;=`<%l$:f07[$<oP;=`<%l$8b#Jf$<{X!_#Hb(Vp(Y!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g,#x$=sa(x+JY$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p#q$+e#q;'S%Z;'S;=`+a<%lO%Z)>v$?V_!^(CdvBr$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z?O$@a_!q7`$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[$Aq|$i&j(Vp(Y!b'{0/l$]#t(S,2j(d$I[OX%ZXY+gYZ&cZ[+g[p%Zpq+gqr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$f%Z$f$g+g$g#BYEr#BY#BZ$A`#BZ$ISEr$IS$I_$A`$I_$JTEr$JT$JU$A`$JU$KVEr$KV$KW$A`$KW&FUEr&FU&FV$A`&FV;'SEr;'S;=`I|<%l?HTEr?HT?HU$A`?HUOEr07[$D|k$i&j(Vp(Y!b'|0/l$]#t(S,2j(d$I[OY%ZYZ&cZr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$g%Z$g;'SEr;'S;=`I|<%lOEr",
  tokenizers: [yB, SB, bB, xB, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, gB, new Bh("$S~RRtu[#O#Pg#S#T#|~_P#o#pb~gOx~~jVO#i!P#i#j!U#j#l!P#l#m!q#m;'S!P;'S;=`#v<%lO!P~!UO!U~~!XS!Q![!e!c!i!e#T#Z!e#o#p#Z~!hR!Q![!q!c!i!q#T#Z!q~!tR!Q![!}!c!i!}#T#Z!}~#QR!Q![!P!c!i!P#T#Z!P~#^R!Q![#g!c!i#g#T#Z#g~#jS!Q![#g!c!i#g#T#Z#g#q#r!P~#yP;=`<%l!P~$RO(b~~", 141, 339), new Bh("j~RQYZXz{^~^O(P~~aP!P!Qd~iO(Q~~", 25, 322)],
  topRules: { Script: [0, 7], SingleExpression: [1, 275], SingleClassItem: [2, 276] },
  dialects: { jsx: 0, ts: 15098 },
  dynamicPrecedences: { 80: 1, 82: 1, 94: 1, 169: 1, 199: 1 },
  specialized: [{ term: 326, get: (i) => kB[i] || -1 }, { term: 342, get: (i) => vB[i] || -1 }, { term: 95, get: (i) => QB[i] || -1 }],
  tokenPrec: 15124
}), Sv = [
  /* @__PURE__ */ Xe("function ${name}(${params}) {\n	${}\n}", {
    label: "function",
    detail: "definition",
    type: "keyword"
  }),
  /* @__PURE__ */ Xe("for (let ${index} = 0; ${index} < ${bound}; ${index}++) {\n	${}\n}", {
    label: "for",
    detail: "loop",
    type: "keyword"
  }),
  /* @__PURE__ */ Xe("for (let ${name} of ${collection}) {\n	${}\n}", {
    label: "for",
    detail: "of loop",
    type: "keyword"
  }),
  /* @__PURE__ */ Xe("do {\n	${}\n} while (${})", {
    label: "do",
    detail: "loop",
    type: "keyword"
  }),
  /* @__PURE__ */ Xe("while (${}) {\n	${}\n}", {
    label: "while",
    detail: "loop",
    type: "keyword"
  }),
  /* @__PURE__ */ Xe(`try {
	\${}
} catch (\${error}) {
	\${}
}`, {
    label: "try",
    detail: "/ catch block",
    type: "keyword"
  }),
  /* @__PURE__ */ Xe("if (${}) {\n	${}\n}", {
    label: "if",
    detail: "block",
    type: "keyword"
  }),
  /* @__PURE__ */ Xe(`if (\${}) {
	\${}
} else {
	\${}
}`, {
    label: "if",
    detail: "/ else block",
    type: "keyword"
  }),
  /* @__PURE__ */ Xe(`class \${name} {
	constructor(\${params}) {
		\${}
	}
}`, {
    label: "class",
    detail: "definition",
    type: "keyword"
  }),
  /* @__PURE__ */ Xe('import {${names}} from "${module}"\n${}', {
    label: "import",
    detail: "named",
    type: "keyword"
  }),
  /* @__PURE__ */ Xe('import ${name} from "${module}"\n${}', {
    label: "import",
    detail: "default",
    type: "keyword"
  })
], $B = /* @__PURE__ */ Sv.concat([
  /* @__PURE__ */ Xe("interface ${name} {\n	${}\n}", {
    label: "interface",
    detail: "definition",
    type: "keyword"
  }),
  /* @__PURE__ */ Xe("type ${name} = ${type}", {
    label: "type",
    detail: "definition",
    type: "keyword"
  }),
  /* @__PURE__ */ Xe("enum ${name} {\n	${}\n}", {
    label: "enum",
    detail: "definition",
    type: "keyword"
  })
]), x1 = /* @__PURE__ */ new Mp(), bv = /* @__PURE__ */ new Set([
  "Script",
  "Block",
  "FunctionExpression",
  "FunctionDeclaration",
  "ArrowFunction",
  "MethodDeclaration",
  "ForStatement"
]);
function Hs(i) {
  return (e, t) => {
    let n = e.node.getChild("VariableDefinition");
    return n && t(n, i), !0;
  };
}
const TB = ["FunctionDeclaration"], CB = {
  FunctionDeclaration: /* @__PURE__ */ Hs("function"),
  ClassDeclaration: /* @__PURE__ */ Hs("class"),
  ClassExpression: () => !0,
  EnumDeclaration: /* @__PURE__ */ Hs("constant"),
  TypeAliasDeclaration: /* @__PURE__ */ Hs("type"),
  NamespaceDeclaration: /* @__PURE__ */ Hs("namespace"),
  VariableDefinition(i, e) {
    i.matchContext(TB) || e(i, "variable");
  },
  TypeDefinition(i, e) {
    e(i, "type");
  },
  __proto__: null
};
function xv(i, e) {
  let t = x1.get(e);
  if (t)
    return t;
  let n = [], r = !0;
  function s(o, l) {
    let a = i.sliceString(o.from, o.to);
    n.push({ label: a, type: l });
  }
  return e.cursor(ve.IncludeAnonymous).iterate((o) => {
    if (r)
      r = !1;
    else if (o.name) {
      let l = CB[o.name];
      if (l && l(o, s) || bv.has(o.name))
        return !1;
    } else if (o.to - o.from > 8192) {
      for (let l of xv(i, o.node))
        n.push(l);
      return !1;
    }
  }), x1.set(e, n), n;
}
const w1 = /^[\w$\xa1-\uffff][\w$\d\xa1-\uffff]*$/, wv = [
  "TemplateString",
  "String",
  "RegExp",
  "LineComment",
  "BlockComment",
  "VariableDefinition",
  "TypeDefinition",
  "Label",
  "PropertyDefinition",
  "PropertyName",
  "PrivatePropertyDefinition",
  "PrivatePropertyName",
  "JSXText",
  "JSXAttributeValue",
  "JSXOpenTag",
  "JSXCloseTag",
  "JSXSelfClosingTag",
  ".",
  "?."
];
function RB(i) {
  let e = ye(i.state).resolveInner(i.pos, -1);
  if (wv.indexOf(e.name) > -1)
    return null;
  let t = e.name == "VariableName" || e.to - e.from < 20 && w1.test(i.state.sliceDoc(e.from, e.to));
  if (!t && !i.explicit)
    return null;
  let n = [];
  for (let r = e; r; r = r.parent)
    bv.has(r.name) && (n = n.concat(xv(i.state.doc, r)));
  return {
    options: n,
    from: t ? e.from : i.pos,
    validFor: w1
  };
}
const Ni = /* @__PURE__ */ Si.define({
  name: "javascript",
  parser: /* @__PURE__ */ PB.configure({
    props: [
      /* @__PURE__ */ Ji.add({
        IfStatement: /* @__PURE__ */ Or({ except: /^\s*({|else\b)/ }),
        TryStatement: /* @__PURE__ */ Or({ except: /^\s*({|catch\b|finally\b)/ }),
        LabeledStatement: pq,
        SwitchBody: (i) => {
          let e = i.textAfter, t = /^\s*\}/.test(e), n = /^\s*(case|default)\b/.test(e);
          return i.baseIndent + (t ? 0 : n ? 1 : 2) * i.unit;
        },
        Block: /* @__PURE__ */ ns({ closing: "}" }),
        ArrowFunction: (i) => i.baseIndent + i.unit,
        "TemplateString BlockComment": () => null,
        "Statement Property": /* @__PURE__ */ Or({ except: /^\s*{/ }),
        JSXElement(i) {
          let e = /^\s*<\//.test(i.textAfter);
          return i.lineIndent(i.node.from) + (e ? 0 : i.unit);
        },
        JSXEscape(i) {
          let e = /\s*\}/.test(i.textAfter);
          return i.lineIndent(i.node.from) + (e ? 0 : i.unit);
        },
        "JSXOpenTag JSXSelfClosingTag"(i) {
          return i.column(i.node.from) + i.unit;
        }
      }),
      /* @__PURE__ */ vi.add({
        "Block ClassBody SwitchBody EnumBody ObjectExpression ArrayExpression ObjectType": Ql,
        BlockComment(i) {
          return { from: i.from + 2, to: i.to - 2 };
        }
      })
    ]
  }),
  languageData: {
    closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`"] },
    commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
    indentOnInput: /^\s*(?:case |default:|\{|\}|<\/)$/,
    wordChars: "$"
  }
}), kv = {
  test: (i) => /^JSX/.test(i.name),
  facet: /* @__PURE__ */ _p({ commentTokens: { block: { open: "{/*", close: "*/}" } } })
}, vv = /* @__PURE__ */ Ni.configure({ dialect: "ts" }, "typescript"), Qv = /* @__PURE__ */ Ni.configure({
  dialect: "jsx",
  props: [/* @__PURE__ */ Xp.add((i) => i.isTop ? [kv] : void 0)]
}), Pv = /* @__PURE__ */ Ni.configure({
  dialect: "jsx ts",
  props: [/* @__PURE__ */ Xp.add((i) => i.isTop ? [kv] : void 0)]
}, "typescript");
let $v = (i) => ({ label: i, type: "keyword" });
const Tv = /* @__PURE__ */ "break case const continue default delete export extends false finally in instanceof let new return static super switch this throw true typeof var yield".split(" ").map($v), AB = /* @__PURE__ */ Tv.concat(/* @__PURE__ */ ["declare", "implements", "private", "protected", "public"].map($v));
function Cv(i = {}) {
  let e = i.jsx ? i.typescript ? Pv : Qv : i.typescript ? vv : Ni, t = i.typescript ? $B.concat(AB) : Sv.concat(Tv);
  return new Gi(e, [
    Ni.data.of({
      autocomplete: Yp(wv, kc(t))
    }),
    Ni.data.of({
      autocomplete: RB
    }),
    i.jsx ? qB : []
  ]);
}
function EB(i) {
  for (; ; ) {
    if (i.name == "JSXOpenTag" || i.name == "JSXSelfClosingTag" || i.name == "JSXFragmentTag")
      return i;
    if (i.name == "JSXEscape" || !i.parent)
      return null;
    i = i.parent;
  }
}
function k1(i, e, t = i.length) {
  for (let n = e?.firstChild; n; n = n.nextSibling)
    if (n.name == "JSXIdentifier" || n.name == "JSXBuiltin" || n.name == "JSXNamespacedName" || n.name == "JSXMemberExpression")
      return i.sliceString(n.from, Math.min(n.to, t));
  return "";
}
const MB = typeof navigator == "object" && /* @__PURE__ */ /Android\b/.test(navigator.userAgent), qB = /* @__PURE__ */ W.inputHandler.of((i, e, t, n, r) => {
  if ((MB ? i.composing : i.compositionStarted) || i.state.readOnly || e != t || n != ">" && n != "/" || !Ni.isActiveAt(i.state, e, -1))
    return !1;
  let s = r(), { state: o } = s, l = o.changeByRange((a) => {
    var h;
    let { head: c } = a, f = ye(o).resolveInner(c - 1, -1), u;
    if (f.name == "JSXStartTag" && (f = f.parent), !(o.doc.sliceString(c - 1, c) != n || f.name == "JSXAttributeValue" && f.to > c)) {
      if (n == ">" && f.name == "JSXFragmentTag")
        return { range: a, changes: { from: c, insert: "</>" } };
      if (n == "/" && f.name == "JSXStartCloseTag") {
        let d = f.parent, O = d.parent;
        if (O && d.from == c - 2 && ((u = k1(o.doc, O.firstChild, c)) || ((h = O.firstChild) === null || h === void 0 ? void 0 : h.name) == "JSXFragmentTag")) {
          let p = `${u}>`;
          return { range: C.cursor(c + p.length, -1), changes: { from: c, insert: p } };
        }
      } else if (n == ">") {
        let d = EB(f);
        if (d && d.name == "JSXOpenTag" && !/^\/?>|^<\//.test(o.doc.sliceString(c, c + 2)) && (u = k1(o.doc, d, c)))
          return { range: a, changes: { from: c, insert: `</${u}>` } };
      }
    }
    return { range: a };
  });
  return l.changes.empty ? !1 : (i.dispatch([
    s,
    o.update(l, { userEvent: "input.complete", scrollIntoView: !0 })
  ]), !0);
});
class Zh {
  static create(e, t, n, r, s) {
    let o = r + (r << 8) + e + (t << 4) | 0;
    return new Zh(e, t, n, o, s, [], []);
  }
  constructor(e, t, n, r, s, o, l) {
    this.type = e, this.value = t, this.from = n, this.hash = r, this.end = s, this.children = o, this.positions = l, this.hashProp = [[se.contextHash, r]];
  }
  addChild(e, t) {
    e.prop(se.contextHash) != this.hash && (e = new Qe(e.type, e.children, e.positions, e.length, this.hashProp)), this.children.push(e), this.positions.push(t);
  }
  toTree(e, t = this.end) {
    let n = this.children.length - 1;
    return n >= 0 && (t = Math.max(t, this.positions[n] + this.children[n].length + this.from)), new Qe(e.types[this.type], this.children, this.positions, t - this.from).balance({
      makeTree: (r, s, o) => new Qe(ht.none, r, s, o, this.hashProp)
    });
  }
}
var q;
(function(i) {
  i[i.Document = 1] = "Document", i[i.CodeBlock = 2] = "CodeBlock", i[i.FencedCode = 3] = "FencedCode", i[i.Blockquote = 4] = "Blockquote", i[i.HorizontalRule = 5] = "HorizontalRule", i[i.BulletList = 6] = "BulletList", i[i.OrderedList = 7] = "OrderedList", i[i.ListItem = 8] = "ListItem", i[i.ATXHeading1 = 9] = "ATXHeading1", i[i.ATXHeading2 = 10] = "ATXHeading2", i[i.ATXHeading3 = 11] = "ATXHeading3", i[i.ATXHeading4 = 12] = "ATXHeading4", i[i.ATXHeading5 = 13] = "ATXHeading5", i[i.ATXHeading6 = 14] = "ATXHeading6", i[i.SetextHeading1 = 15] = "SetextHeading1", i[i.SetextHeading2 = 16] = "SetextHeading2", i[i.HTMLBlock = 17] = "HTMLBlock", i[i.LinkReference = 18] = "LinkReference", i[i.Paragraph = 19] = "Paragraph", i[i.CommentBlock = 20] = "CommentBlock", i[i.ProcessingInstructionBlock = 21] = "ProcessingInstructionBlock", i[i.Escape = 22] = "Escape", i[i.Entity = 23] = "Entity", i[i.HardBreak = 24] = "HardBreak", i[i.Emphasis = 25] = "Emphasis", i[i.StrongEmphasis = 26] = "StrongEmphasis", i[i.Link = 27] = "Link", i[i.Image = 28] = "Image", i[i.InlineCode = 29] = "InlineCode", i[i.HTMLTag = 30] = "HTMLTag", i[i.Comment = 31] = "Comment", i[i.ProcessingInstruction = 32] = "ProcessingInstruction", i[i.Autolink = 33] = "Autolink", i[i.HeaderMark = 34] = "HeaderMark", i[i.QuoteMark = 35] = "QuoteMark", i[i.ListMark = 36] = "ListMark", i[i.LinkMark = 37] = "LinkMark", i[i.EmphasisMark = 38] = "EmphasisMark", i[i.CodeMark = 39] = "CodeMark", i[i.CodeText = 40] = "CodeText", i[i.CodeInfo = 41] = "CodeInfo", i[i.LinkTitle = 42] = "LinkTitle", i[i.LinkLabel = 43] = "LinkLabel", i[i.URL = 44] = "URL";
})(q || (q = {}));
class _B {
  /**
  @internal
  */
  constructor(e, t) {
    this.start = e, this.content = t, this.marks = [], this.parsers = [];
  }
}
let XB = class {
  constructor() {
    this.text = "", this.baseIndent = 0, this.basePos = 0, this.depth = 0, this.markers = [], this.pos = 0, this.indent = 0, this.next = -1;
  }
  /**
  @internal
  */
  forward() {
    this.basePos > this.pos && this.forwardInner();
  }
  /**
  @internal
  */
  forwardInner() {
    let e = this.skipSpace(this.basePos);
    this.indent = this.countIndent(e, this.pos, this.indent), this.pos = e, this.next = e == this.text.length ? -1 : this.text.charCodeAt(e);
  }
  /**
  Skip whitespace after the given position, return the position of
  the next non-space character or the end of the line if there's
  only space after `from`.
  */
  skipSpace(e) {
    return To(this.text, e);
  }
  /**
  @internal
  */
  reset(e) {
    for (this.text = e, this.baseIndent = this.basePos = this.pos = this.indent = 0, this.forwardInner(), this.depth = 1; this.markers.length; )
      this.markers.pop();
  }
  /**
  Move the line's base position forward to the given position.
  This should only be called by composite [block
  parsers](#BlockParser.parse) or [markup skipping
  functions](#NodeSpec.composite).
  */
  moveBase(e) {
    this.basePos = e, this.baseIndent = this.countIndent(e, this.pos, this.indent);
  }
  /**
  Move the line's base position forward to the given _column_.
  */
  moveBaseColumn(e) {
    this.baseIndent = e, this.basePos = this.findColumn(e);
  }
  /**
  Store a composite-block-level marker. Should be called from
  [markup skipping functions](#NodeSpec.composite) when they
  consume any non-whitespace characters.
  */
  addMarker(e) {
    this.markers.push(e);
  }
  /**
  Find the column position at `to`, optionally starting at a given
  position and column.
  */
  countIndent(e, t = 0, n = 0) {
    for (let r = t; r < e; r++)
      n += this.text.charCodeAt(r) == 9 ? 4 - n % 4 : 1;
    return n;
  }
  /**
  Find the position corresponding to the given column.
  */
  findColumn(e) {
    let t = 0;
    for (let n = 0; t < this.text.length && n < e; t++)
      n += this.text.charCodeAt(t) == 9 ? 4 - n % 4 : 1;
    return t;
  }
  /**
  @internal
  */
  scrub() {
    if (!this.baseIndent)
      return this.text;
    let e = "";
    for (let t = 0; t < this.basePos; t++)
      e += " ";
    return e + this.text.slice(this.basePos);
  }
};
function v1(i, e, t) {
  if (t.pos == t.text.length || i != e.block && t.indent >= e.stack[t.depth + 1].value + t.baseIndent)
    return !0;
  if (t.indent >= t.baseIndent + 4)
    return !1;
  let n = (i.type == q.OrderedList ? sm : rm)(t, e, !1);
  return n > 0 && (i.type != q.BulletList || nm(t, e, !1) < 0) && t.text.charCodeAt(t.pos + n - 1) == i.value;
}
const Rv = {
  [q.Blockquote](i, e, t) {
    return t.next != 62 ? !1 : (t.markers.push(Oe(q.QuoteMark, e.lineStart + t.pos, e.lineStart + t.pos + 1)), t.moveBase(t.pos + (ri(t.text.charCodeAt(t.pos + 1)) ? 2 : 1)), i.end = e.lineStart + t.text.length, !0);
  },
  [q.ListItem](i, e, t) {
    return t.indent < t.baseIndent + i.value && t.next > -1 ? !1 : (t.moveBaseColumn(t.baseIndent + i.value), !0);
  },
  [q.OrderedList]: v1,
  [q.BulletList]: v1,
  [q.Document]() {
    return !0;
  }
};
function ri(i) {
  return i == 32 || i == 9 || i == 10 || i == 13;
}
function To(i, e = 0) {
  for (; e < i.length && ri(i.charCodeAt(e)); )
    e++;
  return e;
}
function Q1(i, e, t) {
  for (; e > t && ri(i.charCodeAt(e - 1)); )
    e--;
  return e;
}
function Av(i) {
  if (i.next != 96 && i.next != 126)
    return -1;
  let e = i.pos + 1;
  for (; e < i.text.length && i.text.charCodeAt(e) == i.next; )
    e++;
  if (e < i.pos + 3)
    return -1;
  if (i.next == 96) {
    for (let t = e; t < i.text.length; t++)
      if (i.text.charCodeAt(t) == 96)
        return -1;
  }
  return e;
}
function Ev(i) {
  return i.next != 62 ? -1 : i.text.charCodeAt(i.pos + 1) == 32 ? 2 : 1;
}
function nm(i, e, t) {
  if (i.next != 42 && i.next != 45 && i.next != 95)
    return -1;
  let n = 1;
  for (let r = i.pos + 1; r < i.text.length; r++) {
    let s = i.text.charCodeAt(r);
    if (s == i.next)
      n++;
    else if (!ri(s))
      return -1;
  }
  return t && i.next == 45 && _v(i) > -1 && i.depth == e.stack.length && e.parser.leafBlockParsers.indexOf(Zv.SetextHeading) > -1 || n < 3 ? -1 : 1;
}
function Mv(i, e) {
  for (let t = i.stack.length - 1; t >= 0; t--)
    if (i.stack[t].type == e)
      return !0;
  return !1;
}
function rm(i, e, t) {
  return (i.next == 45 || i.next == 43 || i.next == 42) && (i.pos == i.text.length - 1 || ri(i.text.charCodeAt(i.pos + 1))) && (!t || Mv(e, q.BulletList) || i.skipSpace(i.pos + 2) < i.text.length) ? 1 : -1;
}
function sm(i, e, t) {
  let n = i.pos, r = i.next;
  for (; r >= 48 && r <= 57; ) {
    n++;
    if (n == i.text.length)
      return -1;
    r = i.text.charCodeAt(n);
  }
  return n == i.pos || n > i.pos + 9 || r != 46 && r != 41 || n < i.text.length - 1 && !ri(i.text.charCodeAt(n + 1)) || t && !Mv(e, q.OrderedList) && (i.skipSpace(n + 1) == i.text.length || n > i.pos + 1 || i.next != 49) ? -1 : n + 1 - i.pos;
}
function qv(i) {
  if (i.next != 35)
    return -1;
  let e = i.pos + 1;
  for (; e < i.text.length && i.text.charCodeAt(e) == 35; )
    e++;
  if (e < i.text.length && i.text.charCodeAt(e) != 32)
    return -1;
  let t = e - i.pos;
  return t > 6 ? -1 : t;
}
function _v(i) {
  if (i.next != 45 && i.next != 61 || i.indent >= i.baseIndent + 4)
    return -1;
  let e = i.pos + 1;
  for (; e < i.text.length && i.text.charCodeAt(e) == i.next; )
    e++;
  let t = e;
  for (; e < i.text.length && ri(i.text.charCodeAt(e)); )
    e++;
  return e == i.text.length ? t : -1;
}
const Gd = /^[ \t]*$/, Xv = /-->/, Lv = /\?>/, Fd = [
  [/^<(?:script|pre|style)(?:\s|>|$)/i, /<\/(?:script|pre|style)>/i],
  [/^\s*<!--/, Xv],
  [/^\s*<\?/, Lv],
  [/^\s*<![A-Z]/, />/],
  [/^\s*<!\[CDATA\[/, /\]\]>/],
  [/^\s*<\/?(?:address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h1|h2|h3|h4|h5|h6|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul)(?:\s|\/?>|$)/i, Gd],
  [/^\s*(?:<\/[a-z][\w-]*\s*>|<[a-z][\w-]*(\s+[a-z:_][\w-.]*(?:\s*=\s*(?:[^\s"'=<>`]+|'[^']*'|"[^"]*"))?)*\s*>)\s*$/i, Gd]
];
function Bv(i, e, t) {
  if (i.next != 60)
    return -1;
  let n = i.text.slice(i.pos);
  for (let r = 0, s = Fd.length - (t ? 1 : 0); r < s; r++)
    if (Fd[r][0].test(n))
      return r;
  return -1;
}
function P1(i, e) {
  let t = i.countIndent(e, i.pos, i.indent), n = i.countIndent(i.skipSpace(e), e, t);
  return n >= t + 5 ? t + 1 : n;
}
function Jn(i, e, t) {
  let n = i.length - 1;
  n >= 0 && i[n].to == e && i[n].type == q.CodeText ? i[n].to = t : i.push(Oe(q.CodeText, e, t));
}
const ha = {
  LinkReference: void 0,
  IndentedCode(i, e) {
    let t = e.baseIndent + 4;
    if (e.indent < t)
      return !1;
    let n = e.findColumn(t), r = i.lineStart + n, s = i.lineStart + e.text.length, o = [], l = [];
    for (Jn(o, r, s); i.nextLine() && e.depth >= i.stack.length; )
      if (e.pos == e.text.length) {
        Jn(l, i.lineStart - 1, i.lineStart);
        for (let a of e.markers)
          l.push(a);
      } else {
        if (e.indent < t)
          break;
        {
          if (l.length) {
            for (let h of l)
              h.type == q.CodeText ? Jn(o, h.from, h.to) : o.push(h);
            l = [];
          }
          Jn(o, i.lineStart - 1, i.lineStart);
          for (let h of e.markers)
            o.push(h);
          s = i.lineStart + e.text.length;
          let a = i.lineStart + e.findColumn(e.baseIndent + 4);
          a < s && Jn(o, a, s);
        }
      }
    return l.length && (l = l.filter((a) => a.type != q.CodeText), l.length && (e.markers = l.concat(e.markers))), i.addNode(i.buffer.writeElements(o, -r).finish(q.CodeBlock, s - r), r), !0;
  },
  FencedCode(i, e) {
    let t = Av(e);
    if (t < 0)
      return !1;
    let n = i.lineStart + e.pos, r = e.next, s = t - e.pos, o = e.skipSpace(t), l = Q1(e.text, e.text.length, o), a = [Oe(q.CodeMark, n, n + s)];
    o < l && a.push(Oe(q.CodeInfo, i.lineStart + o, i.lineStart + l));
    for (let h = !0; i.nextLine() && e.depth >= i.stack.length; h = !1) {
      let c = e.pos;
      if (e.indent - e.baseIndent < 4)
        for (; c < e.text.length && e.text.charCodeAt(c) == r; )
          c++;
      if (c - e.pos >= s && e.skipSpace(c) == e.text.length) {
        for (let f of e.markers)
          a.push(f);
        a.push(Oe(q.CodeMark, i.lineStart + e.pos, i.lineStart + c)), i.nextLine();
        break;
      } else {
        h || Jn(a, i.lineStart - 1, i.lineStart);
        for (let d of e.markers)
          a.push(d);
        let f = i.lineStart + e.basePos, u = i.lineStart + e.text.length;
        f < u && Jn(a, f, u);
      }
    }
    return i.addNode(i.buffer.writeElements(a, -n).finish(q.FencedCode, i.prevLineEnd() - n), n), !0;
  },
  Blockquote(i, e) {
    let t = Ev(e);
    return t < 0 ? !1 : (i.startContext(q.Blockquote, e.pos), i.addNode(q.QuoteMark, i.lineStart + e.pos, i.lineStart + e.pos + 1), e.moveBase(e.pos + t), null);
  },
  HorizontalRule(i, e) {
    if (nm(e, i, !1) < 0)
      return !1;
    let t = i.lineStart + e.pos;
    return i.nextLine(), i.addNode(q.HorizontalRule, t), !0;
  },
  BulletList(i, e) {
    let t = rm(e, i, !1);
    if (t < 0)
      return !1;
    i.block.type != q.BulletList && i.startContext(q.BulletList, e.basePos, e.next);
    let n = P1(e, e.pos + 1);
    return i.startContext(q.ListItem, e.basePos, n - e.baseIndent), i.addNode(q.ListMark, i.lineStart + e.pos, i.lineStart + e.pos + t), e.moveBaseColumn(n), null;
  },
  OrderedList(i, e) {
    let t = sm(e, i, !1);
    if (t < 0)
      return !1;
    i.block.type != q.OrderedList && i.startContext(q.OrderedList, e.basePos, e.text.charCodeAt(e.pos + t - 1));
    let n = P1(e, e.pos + t);
    return i.startContext(q.ListItem, e.basePos, n - e.baseIndent), i.addNode(q.ListMark, i.lineStart + e.pos, i.lineStart + e.pos + t), e.moveBaseColumn(n), null;
  },
  ATXHeading(i, e) {
    let t = qv(e);
    if (t < 0)
      return !1;
    let n = e.pos, r = i.lineStart + n, s = Q1(e.text, e.text.length, n), o = s;
    for (; o > n && e.text.charCodeAt(o - 1) == e.next; )
      o--;
    (o == s || o == n || !ri(e.text.charCodeAt(o - 1))) && (o = e.text.length);
    let l = i.buffer.write(q.HeaderMark, 0, t).writeElements(i.parser.parseInline(e.text.slice(n + t + 1, o), r + t + 1), -r);
    o < e.text.length && l.write(q.HeaderMark, o - n, s - n);
    let a = l.finish(q.ATXHeading1 - 1 + t, e.text.length - n);
    return i.nextLine(), i.addNode(a, r), !0;
  },
  HTMLBlock(i, e) {
    let t = Bv(e, i, !1);
    if (t < 0)
      return !1;
    let n = i.lineStart + e.pos, r = Fd[t][1], s = [], o = r != Gd;
    for (; !r.test(e.text) && i.nextLine(); ) {
      if (e.depth < i.stack.length) {
        o = !1;
        break;
      }
      for (let h of e.markers)
        s.push(h);
    }
    o && i.nextLine();
    let l = r == Xv ? q.CommentBlock : r == Lv ? q.ProcessingInstructionBlock : q.HTMLBlock, a = i.prevLineEnd();
    return i.addNode(i.buffer.writeElements(s, -n).finish(l, a - n), n), !0;
  },
  SetextHeading: void 0
  // Specifies relative precedence for block-continue function
};
class LB {
  constructor(e) {
    this.stage = 0, this.elts = [], this.pos = 0, this.start = e.start, this.advance(e.content);
  }
  nextLine(e, t, n) {
    if (this.stage == -1)
      return !1;
    let r = n.content + `
` + t.scrub(), s = this.advance(r);
    return s > -1 && s < r.length ? this.complete(e, n, s) : !1;
  }
  finish(e, t) {
    return (this.stage == 2 || this.stage == 3) && To(t.content, this.pos) == t.content.length ? this.complete(e, t, t.content.length) : !1;
  }
  complete(e, t, n) {
    return e.addLeafElement(t, Oe(q.LinkReference, this.start, this.start + n, this.elts)), !0;
  }
  nextStage(e) {
    return e ? (this.pos = e.to - this.start, this.elts.push(e), this.stage++, !0) : (e === !1 && (this.stage = -1), !1);
  }
  advance(e) {
    for (; ; ) {
      if (this.stage == -1)
        return -1;
      if (this.stage == 0) {
        if (!this.nextStage(Yv(e, this.pos, this.start, !0)))
          return -1;
        if (e.charCodeAt(this.pos) != 58)
          return this.stage = -1;
        this.elts.push(Oe(q.LinkMark, this.pos + this.start, this.pos + this.start + 1)), this.pos++;
      } else if (this.stage == 1) {
        if (!this.nextStage(jv(e, To(e, this.pos), this.start)))
          return -1;
      } else if (this.stage == 2) {
        let t = To(e, this.pos), n = 0;
        if (t > this.pos) {
          let r = Uv(e, t, this.start);
          if (r) {
            let s = Cf(e, r.to - this.start);
            s > 0 && (this.nextStage(r), n = s);
          }
        }
        return n || (n = Cf(e, this.pos)), n > 0 && n < e.length ? n : -1;
      } else
        return Cf(e, this.pos);
    }
  }
}
function Cf(i, e) {
  for (; e < i.length; e++) {
    let t = i.charCodeAt(e);
    if (t == 10)
      break;
    if (!ri(t))
      return -1;
  }
  return e;
}
class BB {
  nextLine(e, t, n) {
    let r = t.depth < e.stack.length ? -1 : _v(t), s = t.next;
    if (r < 0)
      return !1;
    let o = Oe(q.HeaderMark, e.lineStart + t.pos, e.lineStart + r);
    return e.nextLine(), e.addLeafElement(n, Oe(s == 61 ? q.SetextHeading1 : q.SetextHeading2, n.start, e.prevLineEnd(), [
      ...e.parser.parseInline(n.content, n.start),
      o
    ])), !0;
  }
  finish() {
    return !1;
  }
}
const Zv = {
  LinkReference(i, e) {
    return e.content.charCodeAt(0) == 91 ? new LB(e) : null;
  },
  SetextHeading() {
    return new BB();
  }
}, ZB = [
  (i, e) => qv(e) >= 0,
  (i, e) => Av(e) >= 0,
  (i, e) => Ev(e) >= 0,
  (i, e) => rm(e, i, !0) >= 0,
  (i, e) => sm(e, i, !0) >= 0,
  (i, e) => nm(e, i, !0) >= 0,
  (i, e) => Bv(e, i, !0) >= 0
], DB = { text: "", end: 0 };
class VB {
  /**
  @internal
  */
  constructor(e, t, n, r) {
    this.parser = e, this.input = t, this.ranges = r, this.line = new XB(), this.atEnd = !1, this.reusePlaceholders = /* @__PURE__ */ new Map(), this.stoppedAt = null, this.rangeI = 0, this.to = r[r.length - 1].to, this.lineStart = this.absoluteLineStart = this.absoluteLineEnd = r[0].from, this.block = Zh.create(q.Document, 0, this.lineStart, 0, 0), this.stack = [this.block], this.fragments = n.length ? new NB(n, t) : null, this.readLine();
  }
  get parsedPos() {
    return this.absoluteLineStart;
  }
  advance() {
    if (this.stoppedAt != null && this.absoluteLineStart > this.stoppedAt)
      return this.finish();
    let { line: e } = this;
    for (; ; ) {
      for (let n = 0; ; ) {
        let r = e.depth < this.stack.length ? this.stack[this.stack.length - 1] : null;
        for (; n < e.markers.length && (!r || e.markers[n].from < r.end); ) {
          let s = e.markers[n++];
          this.addNode(s.type, s.from, s.to);
        }
        if (!r)
          break;
        this.finishContext();
      }
      if (e.pos < e.text.length)
        break;
      if (!this.nextLine())
        return this.finish();
    }
    if (this.fragments && this.reuseFragment(e.basePos))
      return null;
    e: for (; ; ) {
      for (let n of this.parser.blockParsers)
        if (n) {
          let r = n(this, e);
          if (r != !1) {
            if (r == !0)
              return null;
            e.forward();
            continue e;
          }
        }
      break;
    }
    let t = new _B(this.lineStart + e.pos, e.text.slice(e.pos));
    for (let n of this.parser.leafBlockParsers)
      if (n) {
        let r = n(this, t);
        r && t.parsers.push(r);
      }
    e: for (; this.nextLine() && e.pos != e.text.length; ) {
      if (e.indent < e.baseIndent + 4) {
        for (let n of this.parser.endLeafBlock)
          if (n(this, e, t))
            break e;
      }
      for (let n of t.parsers)
        if (n.nextLine(this, e, t))
          return null;
      t.content += `
` + e.scrub();
      for (let n of e.markers)
        t.marks.push(n);
    }
    return this.finishLeaf(t), null;
  }
  stopAt(e) {
    if (this.stoppedAt != null && this.stoppedAt < e)
      throw new RangeError("Can't move stoppedAt forward");
    this.stoppedAt = e;
  }
  reuseFragment(e) {
    if (!this.fragments.moveTo(this.absoluteLineStart + e, this.absoluteLineStart) || !this.fragments.matches(this.block.hash))
      return !1;
    let t = this.fragments.takeNodes(this);
    return t ? (this.absoluteLineStart += t, this.lineStart = Gv(this.absoluteLineStart, this.ranges), this.moveRangeI(), this.absoluteLineStart < this.to ? (this.lineStart++, this.absoluteLineStart++, this.readLine()) : (this.atEnd = !0, this.readLine()), !0) : !1;
  }
  /**
  The number of parent blocks surrounding the current block.
  */
  get depth() {
    return this.stack.length;
  }
  /**
  Get the type of the parent block at the given depth. When no
  depth is passed, return the type of the innermost parent.
  */
  parentType(e = this.depth - 1) {
    return this.parser.nodeSet.types[this.stack[e].type];
  }
  /**
  Move to the next input line. This should only be called by
  (non-composite) [block parsers](#BlockParser.parse) that consume
  the line directly, or leaf block parser
  [`nextLine`](#LeafBlockParser.nextLine) methods when they
  consume the current line (and return true).
  */
  nextLine() {
    return this.lineStart += this.line.text.length, this.absoluteLineEnd >= this.to ? (this.absoluteLineStart = this.absoluteLineEnd, this.atEnd = !0, this.readLine(), !1) : (this.lineStart++, this.absoluteLineStart = this.absoluteLineEnd + 1, this.moveRangeI(), this.readLine(), !0);
  }
  /**
  Retrieve the text of the line after the current one, without
  actually moving the context's current line forward.
  */
  peekLine() {
    return this.scanLine(this.absoluteLineEnd + 1).text;
  }
  moveRangeI() {
    for (; this.rangeI < this.ranges.length - 1 && this.absoluteLineStart >= this.ranges[this.rangeI].to; )
      this.rangeI++, this.absoluteLineStart = Math.max(this.absoluteLineStart, this.ranges[this.rangeI].from);
  }
  /**
  @internal
  Collect the text for the next line.
  */
  scanLine(e) {
    let t = DB;
    if (t.end = e, e >= this.to)
      t.text = "";
    else if (t.text = this.lineChunkAt(e), t.end += t.text.length, this.ranges.length > 1) {
      let n = this.absoluteLineStart, r = this.rangeI;
      for (; this.ranges[r].to < t.end; ) {
        r++;
        let s = this.ranges[r].from, o = this.lineChunkAt(s);
        t.end = s + o.length, t.text = t.text.slice(0, this.ranges[r - 1].to - n) + o, n = t.end - t.text.length;
      }
    }
    return t;
  }
  /**
  @internal
  Populate this.line with the content of the next line. Skip
  leading characters covered by composite blocks.
  */
  readLine() {
    let { line: e } = this, { text: t, end: n } = this.scanLine(this.absoluteLineStart);
    for (this.absoluteLineEnd = n, e.reset(t); e.depth < this.stack.length; e.depth++) {
      let r = this.stack[e.depth], s = this.parser.skipContextMarkup[r.type];
      if (!s)
        throw new Error("Unhandled block context " + q[r.type]);
      if (!s(r, this, e))
        break;
      e.forward();
    }
  }
  lineChunkAt(e) {
    let t = this.input.chunk(e), n;
    if (this.input.lineChunks)
      n = t == `
` ? "" : t;
    else {
      let r = t.indexOf(`
`);
      n = r < 0 ? t : t.slice(0, r);
    }
    return e + n.length > this.to ? n.slice(0, this.to - e) : n;
  }
  /**
  The end position of the previous line.
  */
  prevLineEnd() {
    return this.atEnd ? this.lineStart : this.lineStart - 1;
  }
  /**
  @internal
  */
  startContext(e, t, n = 0) {
    this.block = Zh.create(e, n, this.lineStart + t, this.block.hash, this.lineStart + this.line.text.length), this.stack.push(this.block);
  }
  /**
  Start a composite block. Should only be called from [block
  parser functions](#BlockParser.parse) that return null.
  */
  startComposite(e, t, n = 0) {
    this.startContext(this.parser.getNodeType(e), t, n);
  }
  /**
  @internal
  */
  addNode(e, t, n) {
    typeof e == "number" && (e = new Qe(this.parser.nodeSet.types[e], ys, ys, (n ?? this.prevLineEnd()) - t)), this.block.addChild(e, t - this.block.from);
  }
  /**
  Add a block element. Can be called by [block
  parsers](#BlockParser.parse).
  */
  addElement(e) {
    this.block.addChild(e.toTree(this.parser.nodeSet), e.from - this.block.from);
  }
  /**
  Add a block element from a [leaf parser](#LeafBlockParser). This
  makes sure any extra composite block markup (such as blockquote
  markers) inside the block are also added to the syntax tree.
  */
  addLeafElement(e, t) {
    this.addNode(this.buffer.writeElements(Jd(t.children, e.marks), -t.from).finish(t.type, t.to - t.from), t.from);
  }
  /**
  @internal
  */
  finishContext() {
    let e = this.stack.pop(), t = this.stack[this.stack.length - 1];
    t.addChild(e.toTree(this.parser.nodeSet), e.from - t.from), this.block = t;
  }
  finish() {
    for (; this.stack.length > 1; )
      this.finishContext();
    return this.addGaps(this.block.toTree(this.parser.nodeSet, this.lineStart));
  }
  addGaps(e) {
    return this.ranges.length > 1 ? Dv(this.ranges, 0, e.topNode, this.ranges[0].from, this.reusePlaceholders) : e;
  }
  /**
  @internal
  */
  finishLeaf(e) {
    for (let n of e.parsers)
      if (n.finish(this, e))
        return;
    let t = Jd(this.parser.parseInline(e.content, e.start), e.marks);
    this.addNode(this.buffer.writeElements(t, -e.start).finish(q.Paragraph, e.content.length), e.start);
  }
  elt(e, t, n, r) {
    return typeof e == "string" ? Oe(this.parser.getNodeType(e), t, n, r) : new zv(e, t);
  }
  /**
  @internal
  */
  get buffer() {
    return new Wv(this.parser.nodeSet);
  }
}
function Dv(i, e, t, n, r) {
  let s = i[e].to, o = [], l = [], a = t.from + n;
  function h(c, f) {
    for (; f ? c >= s : c > s; ) {
      let u = i[e + 1].from - s;
      n += u, c += u, e++, s = i[e].to;
    }
  }
  for (let c = t.firstChild; c; c = c.nextSibling) {
    h(c.from + n, !0);
    let f = c.from + n, u, d = r.get(c.tree);
    d ? u = d : c.to + n > s ? (u = Dv(i, e, c, n, r), h(c.to + n, !1)) : u = c.toTree(), o.push(u), l.push(f - a);
  }
  return h(t.to + n, !1), new Qe(t.type, o, l, t.to + n - a, t.tree ? t.tree.propValues : void 0);
}
class Qc extends qp {
  /**
  @internal
  */
  constructor(e, t, n, r, s, o, l, a, h) {
    super(), this.nodeSet = e, this.blockParsers = t, this.leafBlockParsers = n, this.blockNames = r, this.endLeafBlock = s, this.skipContextMarkup = o, this.inlineParsers = l, this.inlineNames = a, this.wrappers = h, this.nodeTypes = /* @__PURE__ */ Object.create(null);
    for (let c of e.types)
      this.nodeTypes[c.name] = c.id;
  }
  createParse(e, t, n) {
    let r = new VB(this, e, t, n);
    for (let s of this.wrappers)
      r = s(r, e, t, n);
    return r;
  }
  /**
  Reconfigure the parser.
  */
  configure(e) {
    let t = Hd(e);
    if (!t)
      return this;
    let { nodeSet: n, skipContextMarkup: r } = this, s = this.blockParsers.slice(), o = this.leafBlockParsers.slice(), l = this.blockNames.slice(), a = this.inlineParsers.slice(), h = this.inlineNames.slice(), c = this.endLeafBlock.slice(), f = this.wrappers;
    if (Ks(t.defineNodes)) {
      r = Object.assign({}, r);
      let u = n.types.slice(), d;
      for (let O of t.defineNodes) {
        let { name: p, block: m, composite: g, style: S } = typeof O == "string" ? { name: O } : O;
        if (u.some((w) => w.name == p))
          continue;
        g && (r[u.length] = (w, b, Q) => g(b, Q, w.value));
        let x = u.length, k = g ? ["Block", "BlockContext"] : m ? x >= q.ATXHeading1 && x <= q.SetextHeading2 ? ["Block", "LeafBlock", "Heading"] : ["Block", "LeafBlock"] : void 0;
        u.push(ht.define({
          id: x,
          name: p,
          props: k && [[se.group, k]]
        })), S && (d || (d = {}), Array.isArray(S) || S instanceof Bi ? d[p] = S : Object.assign(d, S));
      }
      n = new kl(u), d && (n = n.extend(ki(d)));
    }
    if (Ks(t.props) && (n = n.extend(...t.props)), Ks(t.remove))
      for (let u of t.remove) {
        let d = this.blockNames.indexOf(u), O = this.inlineNames.indexOf(u);
        d > -1 && (s[d] = o[d] = void 0), O > -1 && (a[O] = void 0);
      }
    if (Ks(t.parseBlock))
      for (let u of t.parseBlock) {
        let d = l.indexOf(u.name);
        if (d > -1)
          s[d] = u.parse, o[d] = u.leaf;
        else {
          let O = u.before ? ca(l, u.before) : u.after ? ca(l, u.after) + 1 : l.length - 1;
          s.splice(O, 0, u.parse), o.splice(O, 0, u.leaf), l.splice(O, 0, u.name);
        }
        u.endLeaf && c.push(u.endLeaf);
      }
    if (Ks(t.parseInline))
      for (let u of t.parseInline) {
        let d = h.indexOf(u.name);
        if (d > -1)
          a[d] = u.parse;
        else {
          let O = u.before ? ca(h, u.before) : u.after ? ca(h, u.after) + 1 : h.length - 1;
          a.splice(O, 0, u.parse), h.splice(O, 0, u.name);
        }
      }
    return t.wrap && (f = f.concat(t.wrap)), new Qc(n, s, o, l, c, r, a, h, f);
  }
  /**
  @internal
  */
  getNodeType(e) {
    let t = this.nodeTypes[e];
    if (t == null)
      throw new RangeError(`Unknown node type '${e}'`);
    return t;
  }
  /**
  Parse the given piece of inline text at the given offset,
  returning an array of [`Element`](#Element) objects representing
  the inline content.
  */
  parseInline(e, t) {
    let n = new zB(this, e, t);
    e: for (let r = t; r < n.end; ) {
      let s = n.char(r);
      for (let o of this.inlineParsers)
        if (o) {
          let l = o(n, s, r);
          if (l >= 0) {
            r = l;
            continue e;
          }
        }
      r++;
    }
    return n.resolveMarkers(0);
  }
}
function Ks(i) {
  return i != null && i.length > 0;
}
function Hd(i) {
  if (!Array.isArray(i))
    return i;
  if (i.length == 0)
    return null;
  let e = Hd(i[0]);
  if (i.length == 1)
    return e;
  let t = Hd(i.slice(1));
  if (!t || !e)
    return e || t;
  let n = (o, l) => (o || ys).concat(l || ys), r = e.wrap, s = t.wrap;
  return {
    props: n(e.props, t.props),
    defineNodes: n(e.defineNodes, t.defineNodes),
    parseBlock: n(e.parseBlock, t.parseBlock),
    parseInline: n(e.parseInline, t.parseInline),
    remove: n(e.remove, t.remove),
    wrap: r ? s ? (o, l, a, h) => r(s(o, l, a, h), l, a, h) : r : s
  };
}
function ca(i, e) {
  let t = i.indexOf(e);
  if (t < 0)
    throw new RangeError(`Position specified relative to unknown parser ${e}`);
  return t;
}
let Vv = [ht.none];
for (let i = 1, e; e = q[i]; i++)
  Vv[i] = ht.define({
    id: i,
    name: e,
    props: i >= q.Escape ? [] : [[se.group, i in Rv ? ["Block", "BlockContext"] : ["Block", "LeafBlock"]]],
    top: e == "Document"
  });
const ys = [];
let Wv = class {
  constructor(e) {
    this.nodeSet = e, this.content = [], this.nodes = [];
  }
  write(e, t, n, r = 0) {
    return this.content.push(e, t, n, 4 + r * 4), this;
  }
  writeElements(e, t = 0) {
    for (let n of e)
      n.writeTo(this, t);
    return this;
  }
  finish(e, t) {
    return Qe.build({
      buffer: this.content,
      nodeSet: this.nodeSet,
      reused: this.nodes,
      topID: e,
      length: t
    });
  }
}, tl = class {
  /**
  @internal
  */
  constructor(e, t, n, r = ys) {
    this.type = e, this.from = t, this.to = n, this.children = r;
  }
  /**
  @internal
  */
  writeTo(e, t) {
    let n = e.content.length;
    e.writeElements(this.children, t), e.content.push(this.type, this.from + t, this.to + t, e.content.length + 4 - n);
  }
  /**
  @internal
  */
  toTree(e) {
    return new Wv(e).writeElements(this.children, -this.from).finish(this.type, this.to - this.from);
  }
};
class zv {
  constructor(e, t) {
    this.tree = e, this.from = t;
  }
  get to() {
    return this.from + this.tree.length;
  }
  get type() {
    return this.tree.type.id;
  }
  get children() {
    return ys;
  }
  writeTo(e, t) {
    e.nodes.push(this.tree), e.content.push(e.nodes.length - 1, this.from + t, this.to + t, -1);
  }
  toTree() {
    return this.tree;
  }
}
function Oe(i, e, t, n) {
  return new tl(i, e, t, n);
}
const Iv = { resolve: "Emphasis", mark: "EmphasisMark" }, Nv = { resolve: "Emphasis", mark: "EmphasisMark" }, Vr = {}, Kd = {};
class Ut {
  constructor(e, t, n, r) {
    this.type = e, this.from = t, this.to = n, this.side = r;
  }
}
const $1 = "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~";
let il = /[!"#$%&'()*+,\-.\/:;<=>?@\[\\\]^_`{|}~\xA1\u2010-\u2027]/;
try {
  il = new RegExp("[\\p{S}|\\p{P}]", "u");
} catch {
}
const Rf = {
  Escape(i, e, t) {
    if (e != 92 || t == i.end - 1)
      return -1;
    let n = i.char(t + 1);
    for (let r = 0; r < $1.length; r++)
      if ($1.charCodeAt(r) == n)
        return i.append(Oe(q.Escape, t, t + 2));
    return -1;
  },
  Entity(i, e, t) {
    if (e != 38)
      return -1;
    let n = /^(?:#\d+|#x[a-f\d]+|\w+);/i.exec(i.slice(t + 1, t + 31));
    return n ? i.append(Oe(q.Entity, t, t + 1 + n[0].length)) : -1;
  },
  InlineCode(i, e, t) {
    if (e != 96 || t && i.char(t - 1) == 96)
      return -1;
    let n = t + 1;
    for (; n < i.end && i.char(n) == 96; )
      n++;
    let r = n - t, s = 0;
    for (; n < i.end; n++)
      if (i.char(n) == 96) {
        if (s++, s == r && i.char(n + 1) != 96)
          return i.append(Oe(q.InlineCode, t, n + 1, [
            Oe(q.CodeMark, t, t + r),
            Oe(q.CodeMark, n + 1 - r, n + 1)
          ]));
      } else
        s = 0;
    return -1;
  },
  HTMLTag(i, e, t) {
    if (e != 60 || t == i.end - 1)
      return -1;
    let n = i.slice(t + 1, i.end), r = /^(?:[a-z][-\w+.]+:[^\s>]+|[a-z\d.!#$%&'*+/=?^_`{|}~-]+@[a-z\d](?:[a-z\d-]{0,61}[a-z\d])?(?:\.[a-z\d](?:[a-z\d-]{0,61}[a-z\d])?)*)>/i.exec(n);
    if (r)
      return i.append(Oe(q.Autolink, t, t + 1 + r[0].length, [
        Oe(q.LinkMark, t, t + 1),
        // url[0] includes the closing bracket, so exclude it from this slice
        Oe(q.URL, t + 1, t + r[0].length),
        Oe(q.LinkMark, t + r[0].length, t + 1 + r[0].length)
      ]));
    let s = /^!--[^>](?:-[^-]|[^-])*?-->/i.exec(n);
    if (s)
      return i.append(Oe(q.Comment, t, t + 1 + s[0].length));
    let o = /^\?[^]*?\?>/.exec(n);
    if (o)
      return i.append(Oe(q.ProcessingInstruction, t, t + 1 + o[0].length));
    let l = /^(?:![A-Z][^]*?>|!\[CDATA\[[^]*?\]\]>|\/\s*[a-zA-Z][\w-]*\s*>|\s*[a-zA-Z][\w-]*(\s+[a-zA-Z:_][\w-.:]*(?:\s*=\s*(?:[^\s"'=<>`]+|'[^']*'|"[^"]*"))?)*\s*(\/\s*)?>)/.exec(n);
    return l ? i.append(Oe(q.HTMLTag, t, t + 1 + l[0].length)) : -1;
  },
  Emphasis(i, e, t) {
    if (e != 95 && e != 42)
      return -1;
    let n = t + 1;
    for (; i.char(n) == e; )
      n++;
    let r = i.slice(t - 1, t), s = i.slice(n, n + 1), o = il.test(r), l = il.test(s), a = /\s|^$/.test(r), h = /\s|^$/.test(s), c = !h && (!l || a || o), f = !a && (!o || h || l), u = c && (e == 42 || !f || o), d = f && (e == 42 || !c || l);
    return i.append(new Ut(e == 95 ? Iv : Nv, t, n, (u ? 1 : 0) | (d ? 2 : 0)));
  },
  HardBreak(i, e, t) {
    if (e == 92 && i.char(t + 1) == 10)
      return i.append(Oe(q.HardBreak, t, t + 2));
    if (e == 32) {
      let n = t + 1;
      for (; i.char(n) == 32; )
        n++;
      if (i.char(n) == 10 && n >= t + 2)
        return i.append(Oe(q.HardBreak, t, n + 1));
    }
    return -1;
  },
  Link(i, e, t) {
    return e == 91 ? i.append(new Ut(
      Vr,
      t,
      t + 1,
      1
      /* Mark.Open */
    )) : -1;
  },
  Image(i, e, t) {
    return e == 33 && i.char(t + 1) == 91 ? i.append(new Ut(
      Kd,
      t,
      t + 2,
      1
      /* Mark.Open */
    )) : -1;
  },
  LinkEnd(i, e, t) {
    if (e != 93)
      return -1;
    for (let n = i.parts.length - 1; n >= 0; n--) {
      let r = i.parts[n];
      if (r instanceof Ut && (r.type == Vr || r.type == Kd)) {
        if (!r.side || i.skipSpace(r.to) == t && !/[(\[]/.test(i.slice(t + 1, t + 2)))
          return i.parts[n] = null, -1;
        let s = i.takeContent(n), o = i.parts[n] = WB(i, s, r.type == Vr ? q.Link : q.Image, r.from, t + 1);
        if (r.type == Vr)
          for (let l = 0; l < n; l++) {
            let a = i.parts[l];
            a instanceof Ut && a.type == Vr && (a.side = 0);
          }
        return o.to;
      }
    }
    return -1;
  }
};
function WB(i, e, t, n, r) {
  let { text: s } = i, o = i.char(r), l = r;
  if (e.unshift(Oe(q.LinkMark, n, n + (t == q.Image ? 2 : 1))), e.push(Oe(q.LinkMark, r - 1, r)), o == 40) {
    let a = i.skipSpace(r + 1), h = jv(s, a - i.offset, i.offset), c;
    h && (a = i.skipSpace(h.to), a != h.to && (c = Uv(s, a - i.offset, i.offset), c && (a = i.skipSpace(c.to)))), i.char(a) == 41 && (e.push(Oe(q.LinkMark, r, r + 1)), l = a + 1, h && e.push(h), c && e.push(c), e.push(Oe(q.LinkMark, a, l)));
  } else if (o == 91) {
    let a = Yv(s, r - i.offset, i.offset, !1);
    a && (e.push(a), l = a.to);
  }
  return Oe(t, n, l, e);
}
function jv(i, e, t) {
  if (i.charCodeAt(e) == 60) {
    for (let r = e + 1; r < i.length; r++) {
      let s = i.charCodeAt(r);
      if (s == 62)
        return Oe(q.URL, e + t, r + 1 + t);
      if (s == 60 || s == 10)
        return !1;
    }
    return null;
  } else {
    let r = 0, s = e;
    for (let o = !1; s < i.length; s++) {
      let l = i.charCodeAt(s);
      if (ri(l))
        break;
      if (o)
        o = !1;
      else if (l == 40)
        r++;
      else if (l == 41) {
        if (!r)
          break;
        r--;
      } else l == 92 && (o = !0);
    }
    return s > e ? Oe(q.URL, e + t, s + t) : s == i.length ? null : !1;
  }
}
function Uv(i, e, t) {
  let n = i.charCodeAt(e);
  if (n != 39 && n != 34 && n != 40)
    return !1;
  let r = n == 40 ? 41 : n;
  for (let s = e + 1, o = !1; s < i.length; s++) {
    let l = i.charCodeAt(s);
    if (o)
      o = !1;
    else {
      if (l == r)
        return Oe(q.LinkTitle, e + t, s + 1 + t);
      l == 92 && (o = !0);
    }
  }
  return null;
}
function Yv(i, e, t, n) {
  for (let r = !1, s = e + 1, o = Math.min(i.length, s + 999); s < o; s++) {
    let l = i.charCodeAt(s);
    if (r)
      r = !1;
    else {
      if (l == 93)
        return n ? !1 : Oe(q.LinkLabel, e + t, s + 1 + t);
      if (n && !ri(l) && (n = !1), l == 91)
        return !1;
      l == 92 && (r = !0);
    }
  }
  return null;
}
class zB {
  /**
  @internal
  */
  constructor(e, t, n) {
    this.parser = e, this.text = t, this.offset = n, this.parts = [];
  }
  /**
  Get the character code at the given (document-relative)
  position.
  */
  char(e) {
    return e >= this.end ? -1 : this.text.charCodeAt(e - this.offset);
  }
  /**
  The position of the end of this inline section.
  */
  get end() {
    return this.offset + this.text.length;
  }
  /**
  Get a substring of this inline section. Again uses
  document-relative positions.
  */
  slice(e, t) {
    return this.text.slice(e - this.offset, t - this.offset);
  }
  /**
  @internal
  */
  append(e) {
    return this.parts.push(e), e.to;
  }
  /**
  Add a [delimiter](#DelimiterType) at this given position. `open`
  and `close` indicate whether this delimiter is opening, closing,
  or both. Returns the end of the delimiter, for convenient
  returning from [parse functions](#InlineParser.parse).
  */
  addDelimiter(e, t, n, r, s) {
    return this.append(new Ut(e, t, n, (r ? 1 : 0) | (s ? 2 : 0)));
  }
  /**
  Returns true when there is an unmatched link or image opening
  token before the current position.
  */
  get hasOpenLink() {
    for (let e = this.parts.length - 1; e >= 0; e--) {
      let t = this.parts[e];
      if (t instanceof Ut && (t.type == Vr || t.type == Kd))
        return !0;
    }
    return !1;
  }
  /**
  Add an inline element. Returns the end of the element.
  */
  addElement(e) {
    return this.append(e);
  }
  /**
  Resolve markers between this.parts.length and from, wrapping matched markers in the
  appropriate node and updating the content of this.parts. @internal
  */
  resolveMarkers(e) {
    for (let n = e; n < this.parts.length; n++) {
      let r = this.parts[n];
      if (!(r instanceof Ut && r.type.resolve && r.side & 2))
        continue;
      let s = r.type == Iv || r.type == Nv, o = r.to - r.from, l, a = n - 1;
      for (; a >= e; a--) {
        let p = this.parts[a];
        if (p instanceof Ut && p.side & 1 && p.type == r.type && // Ignore emphasis delimiters where the character count doesn't match
        !(s && (r.side & 1 || p.side & 2) && (p.to - p.from + o) % 3 == 0 && ((p.to - p.from) % 3 || o % 3))) {
          l = p;
          break;
        }
      }
      if (!l)
        continue;
      let h = r.type.resolve, c = [], f = l.from, u = r.to;
      if (s) {
        let p = Math.min(2, l.to - l.from, o);
        f = l.to - p, u = r.from + p, h = p == 1 ? "Emphasis" : "StrongEmphasis";
      }
      l.type.mark && c.push(this.elt(l.type.mark, f, l.to));
      for (let p = a + 1; p < n; p++)
        this.parts[p] instanceof tl && c.push(this.parts[p]), this.parts[p] = null;
      r.type.mark && c.push(this.elt(r.type.mark, r.from, u));
      let d = this.elt(h, f, u, c);
      this.parts[a] = s && l.from != f ? new Ut(l.type, l.from, f, l.side) : null, (this.parts[n] = s && r.to != u ? new Ut(r.type, u, r.to, r.side) : null) ? this.parts.splice(n, 0, d) : this.parts[n] = d;
    }
    let t = [];
    for (let n = e; n < this.parts.length; n++) {
      let r = this.parts[n];
      r instanceof tl && t.push(r);
    }
    return t;
  }
  /**
  Find an opening delimiter of the given type. Returns `null` if
  no delimiter is found, or an index that can be passed to
  [`takeContent`](#InlineContext.takeContent) otherwise.
  */
  findOpeningDelimiter(e) {
    for (let t = this.parts.length - 1; t >= 0; t--) {
      let n = this.parts[t];
      if (n instanceof Ut && n.type == e)
        return t;
    }
    return null;
  }
  /**
  Remove all inline elements and delimiters starting from the
  given index (which you should get from
  [`findOpeningDelimiter`](#InlineContext.findOpeningDelimiter),
  resolve delimiters inside of them, and return them as an array
  of elements.
  */
  takeContent(e) {
    let t = this.resolveMarkers(e);
    return this.parts.length = e, t;
  }
  /**
  Skip space after the given (document) position, returning either
  the position of the next non-space character or the end of the
  section.
  */
  skipSpace(e) {
    return To(this.text, e - this.offset) + this.offset;
  }
  elt(e, t, n, r) {
    return typeof e == "string" ? Oe(this.parser.getNodeType(e), t, n, r) : new zv(e, t);
  }
}
function Jd(i, e) {
  if (!e.length)
    return i;
  if (!i.length)
    return e;
  let t = i.slice(), n = 0;
  for (let r of e) {
    for (; n < t.length && t[n].to < r.to; )
      n++;
    if (n < t.length && t[n].from < r.from) {
      let s = t[n];
      s instanceof tl && (t[n] = new tl(s.type, s.from, s.to, Jd(s.children, [r])));
    } else
      t.splice(n++, 0, r);
  }
  return t;
}
const IB = [q.CodeBlock, q.ListItem, q.OrderedList, q.BulletList];
class NB {
  constructor(e, t) {
    this.fragments = e, this.input = t, this.i = 0, this.fragment = null, this.fragmentEnd = -1, this.cursor = null, e.length && (this.fragment = e[this.i++]);
  }
  nextFragment() {
    this.fragment = this.i < this.fragments.length ? this.fragments[this.i++] : null, this.cursor = null, this.fragmentEnd = -1;
  }
  moveTo(e, t) {
    for (; this.fragment && this.fragment.to <= e; )
      this.nextFragment();
    if (!this.fragment || this.fragment.from > (e ? e - 1 : 0))
      return !1;
    if (this.fragmentEnd < 0) {
      let s = this.fragment.to;
      for (; s > 0 && this.input.read(s - 1, s) != `
`; )
        s--;
      this.fragmentEnd = s ? s - 1 : 0;
    }
    let n = this.cursor;
    n || (n = this.cursor = this.fragment.tree.cursor(), n.firstChild());
    let r = e + this.fragment.offset;
    for (; n.to <= r; )
      if (!n.parent())
        return !1;
    for (; ; ) {
      if (n.from >= r)
        return this.fragment.from <= t;
      if (!n.childAfter(r))
        return !1;
    }
  }
  matches(e) {
    let t = this.cursor.tree;
    return t && t.prop(se.contextHash) == e;
  }
  takeNodes(e) {
    let t = this.cursor, n = this.fragment.offset, r = this.fragmentEnd - (this.fragment.openEnd ? 1 : 0), s = e.absoluteLineStart, o = s, l = e.block.children.length, a = o, h = l;
    for (; ; ) {
      if (t.to - n > r) {
        if (t.type.isAnonymous && t.firstChild())
          continue;
        break;
      }
      let c = Gv(t.from - n, e.ranges);
      if (t.to - n <= e.ranges[e.rangeI].to)
        e.addNode(t.tree, c);
      else {
        let f = new Qe(e.parser.nodeSet.types[q.Paragraph], [], [], 0, e.block.hashProp);
        e.reusePlaceholders.set(f, t.tree), e.addNode(f, c);
      }
      if (t.type.is("Block") && (IB.indexOf(t.type.id) < 0 ? (o = t.to - n, l = e.block.children.length) : (o = a, l = h, a = t.to - n, h = e.block.children.length)), !t.nextSibling())
        break;
    }
    for (; e.block.children.length > l; )
      e.block.children.pop(), e.block.positions.pop();
    return o - s;
  }
}
function Gv(i, e) {
  let t = i;
  for (let n = 1; n < e.length; n++) {
    let r = e[n - 1].to, s = e[n].from;
    r < i && (t -= s - r);
  }
  return t;
}
const jB = ki({
  "Blockquote/...": y.quote,
  HorizontalRule: y.contentSeparator,
  "ATXHeading1/... SetextHeading1/...": y.heading1,
  "ATXHeading2/... SetextHeading2/...": y.heading2,
  "ATXHeading3/...": y.heading3,
  "ATXHeading4/...": y.heading4,
  "ATXHeading5/...": y.heading5,
  "ATXHeading6/...": y.heading6,
  "Comment CommentBlock": y.comment,
  Escape: y.escape,
  Entity: y.character,
  "Emphasis/...": y.emphasis,
  "StrongEmphasis/...": y.strong,
  "Link/... Image/...": y.link,
  "OrderedList/... BulletList/...": y.list,
  "BlockQuote/...": y.quote,
  "InlineCode CodeText": y.monospace,
  "URL Autolink": y.url,
  "HeaderMark HardBreak QuoteMark ListMark LinkMark EmphasisMark CodeMark": y.processingInstruction,
  "CodeInfo LinkLabel": y.labelName,
  LinkTitle: y.string,
  Paragraph: y.content
}), UB = new Qc(new kl(Vv).extend(jB), Object.keys(ha).map((i) => ha[i]), Object.keys(ha).map((i) => Zv[i]), Object.keys(ha), ZB, Rv, Object.keys(Rf).map((i) => Rf[i]), Object.keys(Rf), []);
function YB(i, e, t) {
  let n = [];
  for (let r = i.firstChild, s = e; ; r = r.nextSibling) {
    let o = r ? r.from : t;
    if (o > s && n.push({ from: s, to: o }), !r)
      break;
    s = r.to;
  }
  return n;
}
function GB(i) {
  let { codeParser: e, htmlParser: t } = i;
  return { wrap: Gw((r, s) => {
    let o = r.type.id;
    if (e && (o == q.CodeBlock || o == q.FencedCode)) {
      let l = "";
      if (o == q.FencedCode) {
        let h = r.node.getChild(q.CodeInfo);
        h && (l = s.read(h.from, h.to));
      }
      let a = e(l);
      if (a)
        return { parser: a, overlay: (h) => h.type.id == q.CodeText };
    } else if (t && (o == q.HTMLBlock || o == q.HTMLTag || o == q.CommentBlock))
      return { parser: t, overlay: YB(r.node, r.from, r.to) };
    return null;
  }) };
}
const FB = { resolve: "Strikethrough", mark: "StrikethroughMark" }, HB = {
  defineNodes: [{
    name: "Strikethrough",
    style: { "Strikethrough/...": y.strikethrough }
  }, {
    name: "StrikethroughMark",
    style: y.processingInstruction
  }],
  parseInline: [{
    name: "Strikethrough",
    parse(i, e, t) {
      if (e != 126 || i.char(t + 1) != 126 || i.char(t + 2) == 126)
        return -1;
      let n = i.slice(t - 1, t), r = i.slice(t + 2, t + 3), s = /\s|^$/.test(n), o = /\s|^$/.test(r), l = il.test(n), a = il.test(r);
      return i.addDelimiter(FB, t, t + 2, !o && (!a || s || l), !s && (!l || o || a));
    },
    after: "Emphasis"
  }]
};
function Co(i, e, t = 0, n, r = 0) {
  let s = 0, o = !0, l = -1, a = -1, h = !1, c = () => {
    n.push(i.elt("TableCell", r + l, r + a, i.parser.parseInline(e.slice(l, a), r + l)));
  };
  for (let f = t; f < e.length; f++) {
    let u = e.charCodeAt(f);
    u == 124 && !h ? ((!o || l > -1) && s++, o = !1, n && (l > -1 && c(), n.push(i.elt("TableDelimiter", f + r, f + r + 1))), l = a = -1) : (h || u != 32 && u != 9) && (l < 0 && (l = f), a = f + 1), h = !h && u == 92;
  }
  return l > -1 && (s++, n && c()), s;
}
function T1(i, e) {
  for (let t = e; t < i.length; t++) {
    let n = i.charCodeAt(t);
    if (n == 124)
      return !0;
    n == 92 && t++;
  }
  return !1;
}
const Fv = /^\|?(\s*:?-+:?\s*\|)+(\s*:?-+:?\s*)?$/;
class C1 {
  constructor() {
    this.rows = null;
  }
  nextLine(e, t, n) {
    if (this.rows == null) {
      this.rows = !1;
      let r;
      if ((t.next == 45 || t.next == 58 || t.next == 124) && Fv.test(r = t.text.slice(t.pos))) {
        let s = [];
        Co(e, n.content, 0, s, n.start) == Co(e, r, t.pos) && (this.rows = [
          e.elt("TableHeader", n.start, n.start + n.content.length, s),
          e.elt("TableDelimiter", e.lineStart + t.pos, e.lineStart + t.text.length)
        ]);
      }
    } else if (this.rows) {
      let r = [];
      Co(e, t.text, t.pos, r, e.lineStart), this.rows.push(e.elt("TableRow", e.lineStart + t.pos, e.lineStart + t.text.length, r));
    }
    return !1;
  }
  finish(e, t) {
    return this.rows ? (e.addLeafElement(t, e.elt("Table", t.start, t.start + t.content.length, this.rows)), !0) : !1;
  }
}
const KB = {
  defineNodes: [
    { name: "Table", block: !0 },
    { name: "TableHeader", style: { "TableHeader/...": y.heading } },
    "TableRow",
    { name: "TableCell", style: y.content },
    { name: "TableDelimiter", style: y.processingInstruction }
  ],
  parseBlock: [{
    name: "Table",
    leaf(i, e) {
      return T1(e.content, 0) ? new C1() : null;
    },
    endLeaf(i, e, t) {
      if (t.parsers.some((r) => r instanceof C1) || !T1(e.text, e.basePos))
        return !1;
      let n = i.peekLine();
      return Fv.test(n) && Co(i, e.text, e.basePos) == Co(i, n, e.basePos);
    },
    before: "SetextHeading"
  }]
};
class JB {
  nextLine() {
    return !1;
  }
  finish(e, t) {
    return e.addLeafElement(t, e.elt("Task", t.start, t.start + t.content.length, [
      e.elt("TaskMarker", t.start, t.start + 3),
      ...e.parser.parseInline(t.content.slice(3), t.start + 3)
    ])), !0;
  }
}
const eZ = {
  defineNodes: [
    { name: "Task", block: !0, style: y.list },
    { name: "TaskMarker", style: y.atom }
  ],
  parseBlock: [{
    name: "TaskList",
    leaf(i, e) {
      return /^\[[ xX]\][ \t]/.test(e.content) && i.parentType().name == "ListItem" ? new JB() : null;
    },
    after: "SetextHeading"
  }]
}, R1 = /(www\.)|(https?:\/\/)|([\w.+-]{1,100}@)|(mailto:|xmpp:)/gy, A1 = /[\w-]+(\.[\w-]+)+(\/[^\s<]*)?/gy, tZ = /[\w-]+\.[\w-]+($|\/)/, E1 = /[\w.+-]+@[\w-]+(\.[\w.-]+)+/gy, M1 = /\/[a-zA-Z\d@.]+/gy;
function q1(i, e, t, n) {
  let r = 0;
  for (let s = e; s < t; s++)
    i[s] == n && r++;
  return r;
}
function iZ(i, e) {
  A1.lastIndex = e;
  let t = A1.exec(i);
  if (!t || tZ.exec(t[0])[0].indexOf("_") > -1)
    return -1;
  let n = e + t[0].length;
  for (; ; ) {
    let r = i[n - 1], s;
    if (/[?!.,:*_~]/.test(r) || r == ")" && q1(i, e, n, ")") > q1(i, e, n, "("))
      n--;
    else if (r == ";" && (s = /&(?:#\d+|#x[a-f\d]+|\w+);$/.exec(i.slice(e, n))))
      n = e + s.index;
    else
      break;
  }
  return n;
}
function _1(i, e) {
  E1.lastIndex = e;
  let t = E1.exec(i);
  if (!t)
    return -1;
  let n = t[0][t[0].length - 1];
  return n == "_" || n == "-" ? -1 : e + t[0].length - (n == "." ? 1 : 0);
}
const nZ = {
  parseInline: [{
    name: "Autolink",
    parse(i, e, t) {
      let n = t - i.offset;
      if (n && /\w/.test(i.text[n - 1]))
        return -1;
      R1.lastIndex = n;
      let r = R1.exec(i.text), s = -1;
      if (!r)
        return -1;
      if (r[1] || r[2]) {
        if (s = iZ(i.text, n + r[0].length), s > -1 && i.hasOpenLink) {
          let o = /([^\[\]]|\[[^\]]*\])*/.exec(i.text.slice(n, s));
          s = n + o[0].length;
        }
      } else r[3] ? s = _1(i.text, n) : (s = _1(i.text, n + r[0].length), s > -1 && r[0] == "xmpp:" && (M1.lastIndex = s, r = M1.exec(i.text), r && (s = r.index + r[0].length)));
      return s < 0 ? -1 : (i.addElement(i.elt("URL", t, s + i.offset)), s + i.offset);
    }
  }]
}, rZ = [KB, eZ, HB, nZ];
function Hv(i, e, t) {
  return (n, r, s) => {
    if (r != i || n.char(s + 1) == i)
      return -1;
    let o = [n.elt(t, s, s + 1)];
    for (let l = s + 1; l < n.end; l++) {
      let a = n.char(l);
      if (a == i)
        return n.addElement(n.elt(e, s, l + 1, o.concat(n.elt(t, l, l + 1))));
      if (a == 92 && o.push(n.elt("Escape", l, l++ + 2)), ri(a))
        break;
    }
    return -1;
  };
}
const sZ = {
  defineNodes: [
    { name: "Superscript", style: y.special(y.content) },
    { name: "SuperscriptMark", style: y.processingInstruction }
  ],
  parseInline: [{
    name: "Superscript",
    parse: Hv(94, "Superscript", "SuperscriptMark")
  }]
}, oZ = {
  defineNodes: [
    { name: "Subscript", style: y.special(y.content) },
    { name: "SubscriptMark", style: y.processingInstruction }
  ],
  parseInline: [{
    name: "Subscript",
    parse: Hv(126, "Subscript", "SubscriptMark")
  }]
}, lZ = {
  defineNodes: [{ name: "Emoji", style: y.character }],
  parseInline: [{
    name: "Emoji",
    parse(i, e, t) {
      let n;
      return e != 58 || !(n = /^[a-zA-Z_0-9]+:/.exec(i.slice(t + 1, i.end))) ? -1 : i.addElement(i.elt("Emoji", t, t + 1 + n[0].length));
    }
  }]
}, aZ = 54, hZ = 1, cZ = 55, fZ = 2, uZ = 56, dZ = 3, X1 = 4, OZ = 5, Dh = 6, Kv = 7, Jv = 8, eQ = 9, tQ = 10, pZ = 11, mZ = 12, gZ = 13, Af = 57, yZ = 14, L1 = 58, iQ = 20, SZ = 22, nQ = 23, bZ = 24, eO = 26, rQ = 27, xZ = 28, wZ = 31, kZ = 34, vZ = 36, QZ = 37, PZ = 0, $Z = 1, TZ = {
  area: !0,
  base: !0,
  br: !0,
  col: !0,
  command: !0,
  embed: !0,
  frame: !0,
  hr: !0,
  img: !0,
  input: !0,
  keygen: !0,
  link: !0,
  meta: !0,
  param: !0,
  source: !0,
  track: !0,
  wbr: !0,
  menuitem: !0
}, CZ = {
  dd: !0,
  li: !0,
  optgroup: !0,
  option: !0,
  p: !0,
  rp: !0,
  rt: !0,
  tbody: !0,
  td: !0,
  tfoot: !0,
  th: !0,
  tr: !0
}, B1 = {
  dd: { dd: !0, dt: !0 },
  dt: { dd: !0, dt: !0 },
  li: { li: !0 },
  option: { option: !0, optgroup: !0 },
  optgroup: { optgroup: !0 },
  p: {
    address: !0,
    article: !0,
    aside: !0,
    blockquote: !0,
    dir: !0,
    div: !0,
    dl: !0,
    fieldset: !0,
    footer: !0,
    form: !0,
    h1: !0,
    h2: !0,
    h3: !0,
    h4: !0,
    h5: !0,
    h6: !0,
    header: !0,
    hgroup: !0,
    hr: !0,
    menu: !0,
    nav: !0,
    ol: !0,
    p: !0,
    pre: !0,
    section: !0,
    table: !0,
    ul: !0
  },
  rp: { rp: !0, rt: !0 },
  rt: { rp: !0, rt: !0 },
  tbody: { tbody: !0, tfoot: !0 },
  td: { td: !0, th: !0 },
  tfoot: { tbody: !0 },
  th: { td: !0, th: !0 },
  thead: { tbody: !0, tfoot: !0 },
  tr: { tr: !0 }
};
function RZ(i) {
  return i == 45 || i == 46 || i == 58 || i >= 65 && i <= 90 || i == 95 || i >= 97 && i <= 122 || i >= 161;
}
function sQ(i) {
  return i == 9 || i == 10 || i == 13 || i == 32;
}
let Z1 = null, D1 = null, V1 = 0;
function tO(i, e) {
  let t = i.pos + e;
  if (V1 == t && D1 == i) return Z1;
  let n = i.peek(e);
  for (; sQ(n); ) n = i.peek(++e);
  let r = "";
  for (; RZ(n); )
    r += String.fromCharCode(n), n = i.peek(++e);
  return D1 = i, V1 = t, Z1 = r ? r.toLowerCase() : n == AZ || n == EZ ? void 0 : null;
}
const oQ = 60, Vh = 62, om = 47, AZ = 63, EZ = 33, MZ = 45;
function W1(i, e) {
  this.name = i, this.parent = e;
}
const qZ = [Dh, tQ, Kv, Jv, eQ], _Z = new Rl({
  start: null,
  shift(i, e, t, n) {
    return qZ.indexOf(e) > -1 ? new W1(tO(n, 1) || "", i) : i;
  },
  reduce(i, e) {
    return e == iQ && i ? i.parent : i;
  },
  reuse(i, e, t, n) {
    let r = e.type.id;
    return r == Dh || r == vZ ? new W1(tO(n, 1) || "", i) : i;
  },
  strict: !1
}), XZ = new Ze((i, e) => {
  if (i.next != oQ) {
    i.next < 0 && e.context && i.acceptToken(Af);
    return;
  }
  i.advance();
  let t = i.next == om;
  t && i.advance();
  let n = tO(i, 0);
  if (n === void 0) return;
  if (!n) return i.acceptToken(t ? yZ : Dh);
  let r = e.context ? e.context.name : null;
  if (t) {
    if (n == r) return i.acceptToken(pZ);
    if (r && CZ[r]) return i.acceptToken(Af, -2);
    if (e.dialectEnabled(PZ)) return i.acceptToken(mZ);
    for (let s = e.context; s; s = s.parent) if (s.name == n) return;
    i.acceptToken(gZ);
  } else {
    if (n == "script") return i.acceptToken(Kv);
    if (n == "style") return i.acceptToken(Jv);
    if (n == "textarea") return i.acceptToken(eQ);
    if (TZ.hasOwnProperty(n)) return i.acceptToken(tQ);
    r && B1[r] && B1[r][n] ? i.acceptToken(Af, -1) : i.acceptToken(Dh);
  }
}, { contextual: !0 }), LZ = new Ze((i) => {
  for (let e = 0, t = 0; ; t++) {
    if (i.next < 0) {
      t && i.acceptToken(L1);
      break;
    }
    if (i.next == MZ)
      e++;
    else if (i.next == Vh && e >= 2) {
      t >= 3 && i.acceptToken(L1, -2);
      break;
    } else
      e = 0;
    i.advance();
  }
});
function BZ(i) {
  for (; i; i = i.parent)
    if (i.name == "svg" || i.name == "math") return !0;
  return !1;
}
const ZZ = new Ze((i, e) => {
  if (i.next == om && i.peek(1) == Vh) {
    let t = e.dialectEnabled($Z) || BZ(e.context);
    i.acceptToken(t ? OZ : X1, 2);
  } else i.next == Vh && i.acceptToken(X1, 1);
});
function lm(i, e, t) {
  let n = 2 + i.length;
  return new Ze((r) => {
    for (let s = 0, o = 0, l = 0; ; l++) {
      if (r.next < 0) {
        l && r.acceptToken(e);
        break;
      }
      if (s == 0 && r.next == oQ || s == 1 && r.next == om || s >= 2 && s < n && r.next == i.charCodeAt(s - 2))
        s++, o++;
      else if ((s == 2 || s == n) && sQ(r.next))
        o++;
      else if (s == n && r.next == Vh) {
        l > o ? r.acceptToken(e, -o) : r.acceptToken(t, -(o - 2));
        break;
      } else if ((r.next == 10 || r.next == 13) && l) {
        r.acceptToken(e, 1);
        break;
      } else
        s = o = 0;
      r.advance();
    }
  });
}
const DZ = lm("script", aZ, hZ), VZ = lm("style", cZ, fZ), WZ = lm("textarea", uZ, dZ), zZ = ki({
  "Text RawText": y.content,
  "StartTag StartCloseTag SelfClosingEndTag EndTag": y.angleBracket,
  TagName: y.tagName,
  "MismatchedCloseTag/TagName": [y.tagName, y.invalid],
  AttributeName: y.attributeName,
  "AttributeValue UnquotedAttributeValue": y.attributeValue,
  Is: y.definitionOperator,
  "EntityReference CharacterReference": y.character,
  Comment: y.blockComment,
  ProcessingInst: y.processingInstruction,
  DoctypeDecl: y.documentMeta
}), IZ = bi.deserialize({
  version: 14,
  states: ",xOVO!rOOO!WQ#tO'#CqO!]Q#tO'#CzO!bQ#tO'#C}O!gQ#tO'#DQO!lQ#tO'#DSO!qOaO'#CpO!|ObO'#CpO#XOdO'#CpO$eO!rO'#CpOOO`'#Cp'#CpO$lO$fO'#DTO$tQ#tO'#DVO$yQ#tO'#DWOOO`'#Dk'#DkOOO`'#DY'#DYQVO!rOOO%OQ&rO,59]O%ZQ&rO,59fO%fQ&rO,59iO%qQ&rO,59lO%|Q&rO,59nOOOa'#D^'#D^O&XOaO'#CxO&dOaO,59[OOOb'#D_'#D_O&lObO'#C{O&wObO,59[OOOd'#D`'#D`O'POdO'#DOO'[OdO,59[OOO`'#Da'#DaO'dO!rO,59[O'kQ#tO'#DROOO`,59[,59[OOOp'#Db'#DbO'pO$fO,59oOOO`,59o,59oO'xQ#|O,59qO'}Q#|O,59rOOO`-E7W-E7WO(SQ&rO'#CsOOQW'#DZ'#DZO(bQ&rO1G.wOOOa1G.w1G.wOOO`1G/Y1G/YO(mQ&rO1G/QOOOb1G/Q1G/QO(xQ&rO1G/TOOOd1G/T1G/TO)TQ&rO1G/WOOO`1G/W1G/WO)`Q&rO1G/YOOOa-E7[-E7[O)kQ#tO'#CyOOO`1G.v1G.vOOOb-E7]-E7]O)pQ#tO'#C|OOOd-E7^-E7^O)uQ#tO'#DPOOO`-E7_-E7_O)zQ#|O,59mOOOp-E7`-E7`OOO`1G/Z1G/ZOOO`1G/]1G/]OOO`1G/^1G/^O*PQ,UO,59_OOQW-E7X-E7XOOOa7+$c7+$cOOO`7+$t7+$tOOOb7+$l7+$lOOOd7+$o7+$oOOO`7+$r7+$rO*[Q#|O,59eO*aQ#|O,59hO*fQ#|O,59kOOO`1G/X1G/XO*kO7[O'#CvO*|OMhO'#CvOOQW1G.y1G.yOOO`1G/P1G/POOO`1G/S1G/SOOO`1G/V1G/VOOOO'#D['#D[O+_O7[O,59bOOQW,59b,59bOOOO'#D]'#D]O+pOMhO,59bOOOO-E7Y-E7YOOQW1G.|1G.|OOOO-E7Z-E7Z",
  stateData: ",]~O!^OS~OUSOVPOWQOXROYTO[]O][O^^O`^Oa^Ob^Oc^Ox^O{_O!dZO~OfaO~OfbO~OfcO~OfdO~OfeO~O!WfOPlP!ZlP~O!XiOQoP!ZoP~O!YlORrP!ZrP~OUSOVPOWQOXROYTOZqO[]O][O^^O`^Oa^Ob^Oc^Ox^O!dZO~O!ZrO~P#dO![sO!euO~OfvO~OfwO~OS|OT}OhyO~OS!POT}OhyO~OS!ROT}OhyO~OS!TOT}OhyO~OS}OT}OhyO~O!WfOPlX!ZlX~OP!WO!Z!XO~O!XiOQoX!ZoX~OQ!ZO!Z!XO~O!YlORrX!ZrX~OR!]O!Z!XO~O!Z!XO~P#dOf!_O~O![sO!e!aO~OS!bO~OS!cO~Oi!dOSgXTgXhgX~OS!fOT!gOhyO~OS!hOT!gOhyO~OS!iOT!gOhyO~OS!jOT!gOhyO~OS!gOT!gOhyO~Of!kO~Of!lO~Of!mO~OS!nO~Ok!qO!`!oO!b!pO~OS!rO~OS!sO~OS!tO~Oa!uOb!uOc!uO!`!wO!a!uO~Oa!xOb!xOc!xO!b!wO!c!xO~Oa!uOb!uOc!uO!`!{O!a!uO~Oa!xOb!xOc!xO!b!{O!c!xO~OT~bac!dx{!d~",
  goto: "%p!`PPPPPPPPPPPPPPPPPPPP!a!gP!mPP!yP!|#P#S#Y#]#`#f#i#l#r#x!aP!a!aP$O$U$l$r$x%O%U%[%bPPPPPPPP%hX^OX`pXUOX`pezabcde{!O!Q!S!UR!q!dRhUR!XhXVOX`pRkVR!XkXWOX`pRnWR!XnXXOX`pQrXR!XpXYOX`pQ`ORx`Q{aQ!ObQ!QcQ!SdQ!UeZ!e{!O!Q!S!UQ!v!oR!z!vQ!y!pR!|!yQgUR!VgQjVR!YjQmWR![mQpXR!^pQtZR!`tS_O`ToXp",
  nodeNames: "⚠ StartCloseTag StartCloseTag StartCloseTag EndTag SelfClosingEndTag StartTag StartTag StartTag StartTag StartTag StartCloseTag StartCloseTag StartCloseTag IncompleteCloseTag Document Text EntityReference CharacterReference InvalidEntity Element OpenTag TagName Attribute AttributeName Is AttributeValue UnquotedAttributeValue ScriptText CloseTag OpenTag StyleText CloseTag OpenTag TextareaText CloseTag OpenTag CloseTag SelfClosingTag Comment ProcessingInst MismatchedCloseTag CloseTag DoctypeDecl",
  maxTerm: 67,
  context: _Z,
  nodeProps: [
    ["closedBy", -10, 1, 2, 3, 7, 8, 9, 10, 11, 12, 13, "EndTag", 6, "EndTag SelfClosingEndTag", -4, 21, 30, 33, 36, "CloseTag"],
    ["openedBy", 4, "StartTag StartCloseTag", 5, "StartTag", -4, 29, 32, 35, 37, "OpenTag"],
    ["group", -9, 14, 17, 18, 19, 20, 39, 40, 41, 42, "Entity", 16, "Entity TextContent", -3, 28, 31, 34, "TextContent Entity"],
    ["isolate", -11, 21, 29, 30, 32, 33, 35, 36, 37, 38, 41, 42, "ltr", -3, 26, 27, 39, ""]
  ],
  propSources: [zZ],
  skippedNodes: [0],
  repeatNodeCount: 9,
  tokenData: "!<p!aR!YOX$qXY,QYZ,QZ[$q[]&X]^,Q^p$qpq,Qqr-_rs3_sv-_vw3}wxHYx}-_}!OH{!O!P-_!P!Q$q!Q![-_![!]Mz!]!^-_!^!_!$S!_!`!;x!`!a&X!a!c-_!c!}Mz!}#R-_#R#SMz#S#T1k#T#oMz#o#s-_#s$f$q$f%W-_%W%oMz%o%p-_%p&aMz&a&b-_&b1pMz1p4U-_4U4dMz4d4e-_4e$ISMz$IS$I`-_$I`$IbMz$Ib$Kh-_$Kh%#tMz%#t&/x-_&/x&EtMz&Et&FV-_&FV;'SMz;'S;:j!#|;:j;=`3X<%l?&r-_?&r?AhMz?Ah?BY$q?BY?MnMz?MnO$q!Z$|c`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr$qrs&}sv$qvw+Pwx(tx!^$q!^!_*V!_!a&X!a#S$q#S#T&X#T;'S$q;'S;=`+z<%lO$q!R&bX`P!a`!cpOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&Xq'UV`P!cpOv&}wx'kx!^&}!^!_(V!_;'S&};'S;=`(n<%lO&}P'pT`POv'kw!^'k!_;'S'k;'S;=`(P<%lO'kP(SP;=`<%l'kp([S!cpOv(Vx;'S(V;'S;=`(h<%lO(Vp(kP;=`<%l(Vq(qP;=`<%l&}a({W`P!a`Or(trs'ksv(tw!^(t!^!_)e!_;'S(t;'S;=`*P<%lO(t`)jT!a`Or)esv)ew;'S)e;'S;=`)y<%lO)e`)|P;=`<%l)ea*SP;=`<%l(t!Q*^V!a`!cpOr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!Q*vP;=`<%l*V!R*|P;=`<%l&XW+UYkWOX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+PW+wP;=`<%l+P!Z+}P;=`<%l$q!a,]``P!a`!cp!^^OX&XXY,QYZ,QZ]&X]^,Q^p&Xpq,Qqr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X!_-ljhS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx!P-_!P!Q$q!Q!^-_!^!_*V!_!a&X!a#S-_#S#T1k#T#s-_#s$f$q$f;'S-_;'S;=`3X<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q[/ebhSkWOX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!a#S/^#S#T0m#T#s/^#s$f+P$f;'S/^;'S;=`1e<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+PS0rXhSqr0msw0mx!P0m!Q!^0m!a#s0m$f;'S0m;'S;=`1_<%l?Ah0m?BY?Mn0mS1bP;=`<%l0m[1hP;=`<%l/^!V1vchS`P!a`!cpOq&Xqr1krs&}sv1kvw0mwx(tx!P1k!P!Q&X!Q!^1k!^!_*V!_!a&X!a#s1k#s$f&X$f;'S1k;'S;=`3R<%l?Ah1k?Ah?BY&X?BY?Mn1k?MnO&X!V3UP;=`<%l1k!_3[P;=`<%l-_!Z3hV!`h`P!cpOv&}wx'kx!^&}!^!_(V!_;'S&};'S;=`(n<%lO&}!_4WihSkWc!ROX5uXZ7SZ[5u[^7S^p5uqr8trs7Sst>]tw8twx7Sx!P8t!P!Q5u!Q!]8t!]!^/^!^!a7S!a#S8t#S#T;{#T#s8t#s$f5u$f;'S8t;'S;=`>V<%l?Ah8t?Ah?BY5u?BY?Mn8t?MnO5u!Z5zbkWOX5uXZ7SZ[5u[^7S^p5uqr5urs7Sst+Ptw5uwx7Sx!]5u!]!^7w!^!a7S!a#S5u#S#T7S#T;'S5u;'S;=`8n<%lO5u!R7VVOp7Sqs7St!]7S!]!^7l!^;'S7S;'S;=`7q<%lO7S!R7qOa!R!R7tP;=`<%l7S!Z8OYkWa!ROX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+P!Z8qP;=`<%l5u!_8{ihSkWOX5uXZ7SZ[5u[^7S^p5uqr8trs7Sst/^tw8twx7Sx!P8t!P!Q5u!Q!]8t!]!^:j!^!a7S!a#S8t#S#T;{#T#s8t#s$f5u$f;'S8t;'S;=`>V<%l?Ah8t?Ah?BY5u?BY?Mn8t?MnO5u!_:sbhSkWa!ROX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!a#S/^#S#T0m#T#s/^#s$f+P$f;'S/^;'S;=`1e<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+P!V<QchSOp7Sqr;{rs7Sst0mtw;{wx7Sx!P;{!P!Q7S!Q!];{!]!^=]!^!a7S!a#s;{#s$f7S$f;'S;{;'S;=`>P<%l?Ah;{?Ah?BY7S?BY?Mn;{?MnO7S!V=dXhSa!Rqr0msw0mx!P0m!Q!^0m!a#s0m$f;'S0m;'S;=`1_<%l?Ah0m?BY?Mn0m!V>SP;=`<%l;{!_>YP;=`<%l8t!_>dhhSkWOX@OXZAYZ[@O[^AY^p@OqrBwrsAYswBwwxAYx!PBw!P!Q@O!Q!]Bw!]!^/^!^!aAY!a#SBw#S#TE{#T#sBw#s$f@O$f;'SBw;'S;=`HS<%l?AhBw?Ah?BY@O?BY?MnBw?MnO@O!Z@TakWOX@OXZAYZ[@O[^AY^p@Oqr@OrsAYsw@OwxAYx!]@O!]!^Az!^!aAY!a#S@O#S#TAY#T;'S@O;'S;=`Bq<%lO@O!RA]UOpAYq!]AY!]!^Ao!^;'SAY;'S;=`At<%lOAY!RAtOb!R!RAwP;=`<%lAY!ZBRYkWb!ROX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+P!ZBtP;=`<%l@O!_COhhSkWOX@OXZAYZ[@O[^AY^p@OqrBwrsAYswBwwxAYx!PBw!P!Q@O!Q!]Bw!]!^Dj!^!aAY!a#SBw#S#TE{#T#sBw#s$f@O$f;'SBw;'S;=`HS<%l?AhBw?Ah?BY@O?BY?MnBw?MnO@O!_DsbhSkWb!ROX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!a#S/^#S#T0m#T#s/^#s$f+P$f;'S/^;'S;=`1e<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+P!VFQbhSOpAYqrE{rsAYswE{wxAYx!PE{!P!QAY!Q!]E{!]!^GY!^!aAY!a#sE{#s$fAY$f;'SE{;'S;=`G|<%l?AhE{?Ah?BYAY?BY?MnE{?MnOAY!VGaXhSb!Rqr0msw0mx!P0m!Q!^0m!a#s0m$f;'S0m;'S;=`1_<%l?Ah0m?BY?Mn0m!VHPP;=`<%lE{!_HVP;=`<%lBw!ZHcW!bx`P!a`Or(trs'ksv(tw!^(t!^!_)e!_;'S(t;'S;=`*P<%lO(t!aIYlhS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx}-_}!OKQ!O!P-_!P!Q$q!Q!^-_!^!_*V!_!a&X!a#S-_#S#T1k#T#s-_#s$f$q$f;'S-_;'S;=`3X<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q!aK_khS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx!P-_!P!Q$q!Q!^-_!^!_*V!_!`&X!`!aMS!a#S-_#S#T1k#T#s-_#s$f$q$f;'S-_;'S;=`3X<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q!TM_X`P!a`!cp!eQOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X!aNZ!ZhSfQ`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx}-_}!OMz!O!PMz!P!Q$q!Q![Mz![!]Mz!]!^-_!^!_*V!_!a&X!a!c-_!c!}Mz!}#R-_#R#SMz#S#T1k#T#oMz#o#s-_#s$f$q$f$}-_$}%OMz%O%W-_%W%oMz%o%p-_%p&aMz&a&b-_&b1pMz1p4UMz4U4dMz4d4e-_4e$ISMz$IS$I`-_$I`$IbMz$Ib$Je-_$Je$JgMz$Jg$Kh-_$Kh%#tMz%#t&/x-_&/x&EtMz&Et&FV-_&FV;'SMz;'S;:j!#|;:j;=`3X<%l?&r-_?&r?AhMz?Ah?BY$q?BY?MnMz?MnO$q!a!$PP;=`<%lMz!R!$ZY!a`!cpOq*Vqr!$yrs(Vsv*Vwx)ex!a*V!a!b!4t!b;'S*V;'S;=`*s<%lO*V!R!%Q]!a`!cpOr*Vrs(Vsv*Vwx)ex}*V}!O!%y!O!f*V!f!g!']!g#W*V#W#X!0`#X;'S*V;'S;=`*s<%lO*V!R!&QX!a`!cpOr*Vrs(Vsv*Vwx)ex}*V}!O!&m!O;'S*V;'S;=`*s<%lO*V!R!&vV!a`!cp!dPOr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!R!'dX!a`!cpOr*Vrs(Vsv*Vwx)ex!q*V!q!r!(P!r;'S*V;'S;=`*s<%lO*V!R!(WX!a`!cpOr*Vrs(Vsv*Vwx)ex!e*V!e!f!(s!f;'S*V;'S;=`*s<%lO*V!R!(zX!a`!cpOr*Vrs(Vsv*Vwx)ex!v*V!v!w!)g!w;'S*V;'S;=`*s<%lO*V!R!)nX!a`!cpOr*Vrs(Vsv*Vwx)ex!{*V!{!|!*Z!|;'S*V;'S;=`*s<%lO*V!R!*bX!a`!cpOr*Vrs(Vsv*Vwx)ex!r*V!r!s!*}!s;'S*V;'S;=`*s<%lO*V!R!+UX!a`!cpOr*Vrs(Vsv*Vwx)ex!g*V!g!h!+q!h;'S*V;'S;=`*s<%lO*V!R!+xY!a`!cpOr!+qrs!,hsv!+qvw!-Swx!.[x!`!+q!`!a!/j!a;'S!+q;'S;=`!0Y<%lO!+qq!,mV!cpOv!,hvx!-Sx!`!,h!`!a!-q!a;'S!,h;'S;=`!.U<%lO!,hP!-VTO!`!-S!`!a!-f!a;'S!-S;'S;=`!-k<%lO!-SP!-kO{PP!-nP;=`<%l!-Sq!-xS!cp{POv(Vx;'S(V;'S;=`(h<%lO(Vq!.XP;=`<%l!,ha!.aX!a`Or!.[rs!-Ssv!.[vw!-Sw!`!.[!`!a!.|!a;'S!.[;'S;=`!/d<%lO!.[a!/TT!a`{POr)esv)ew;'S)e;'S;=`)y<%lO)ea!/gP;=`<%l!.[!R!/sV!a`!cp{POr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!R!0]P;=`<%l!+q!R!0gX!a`!cpOr*Vrs(Vsv*Vwx)ex#c*V#c#d!1S#d;'S*V;'S;=`*s<%lO*V!R!1ZX!a`!cpOr*Vrs(Vsv*Vwx)ex#V*V#V#W!1v#W;'S*V;'S;=`*s<%lO*V!R!1}X!a`!cpOr*Vrs(Vsv*Vwx)ex#h*V#h#i!2j#i;'S*V;'S;=`*s<%lO*V!R!2qX!a`!cpOr*Vrs(Vsv*Vwx)ex#m*V#m#n!3^#n;'S*V;'S;=`*s<%lO*V!R!3eX!a`!cpOr*Vrs(Vsv*Vwx)ex#d*V#d#e!4Q#e;'S*V;'S;=`*s<%lO*V!R!4XX!a`!cpOr*Vrs(Vsv*Vwx)ex#X*V#X#Y!+q#Y;'S*V;'S;=`*s<%lO*V!R!4{Y!a`!cpOr!4trs!5ksv!4tvw!6Vwx!8]x!a!4t!a!b!:]!b;'S!4t;'S;=`!;r<%lO!4tq!5pV!cpOv!5kvx!6Vx!a!5k!a!b!7W!b;'S!5k;'S;=`!8V<%lO!5kP!6YTO!a!6V!a!b!6i!b;'S!6V;'S;=`!7Q<%lO!6VP!6lTO!`!6V!`!a!6{!a;'S!6V;'S;=`!7Q<%lO!6VP!7QOxPP!7TP;=`<%l!6Vq!7]V!cpOv!5kvx!6Vx!`!5k!`!a!7r!a;'S!5k;'S;=`!8V<%lO!5kq!7yS!cpxPOv(Vx;'S(V;'S;=`(h<%lO(Vq!8YP;=`<%l!5ka!8bX!a`Or!8]rs!6Vsv!8]vw!6Vw!a!8]!a!b!8}!b;'S!8];'S;=`!:V<%lO!8]a!9SX!a`Or!8]rs!6Vsv!8]vw!6Vw!`!8]!`!a!9o!a;'S!8];'S;=`!:V<%lO!8]a!9vT!a`xPOr)esv)ew;'S)e;'S;=`)y<%lO)ea!:YP;=`<%l!8]!R!:dY!a`!cpOr!4trs!5ksv!4tvw!6Vwx!8]x!`!4t!`!a!;S!a;'S!4t;'S;=`!;r<%lO!4t!R!;]V!a`!cpxPOr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!R!;uP;=`<%l!4t!V!<TXiS`P!a`!cpOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X",
  tokenizers: [DZ, VZ, WZ, ZZ, XZ, LZ, 0, 1, 2, 3, 4, 5],
  topRules: { Document: [0, 15] },
  dialects: { noMatch: 0, selfClosing: 509 },
  tokenPrec: 511
});
function lQ(i, e) {
  let t = /* @__PURE__ */ Object.create(null);
  for (let n of i.getChildren(nQ)) {
    let r = n.getChild(bZ), s = n.getChild(eO) || n.getChild(rQ);
    r && (t[e.read(r.from, r.to)] = s ? s.type.id == eO ? e.read(s.from + 1, s.to - 1) : e.read(s.from, s.to) : "");
  }
  return t;
}
function z1(i, e) {
  let t = i.getChild(SZ);
  return t ? e.read(t.from, t.to) : " ";
}
function Ef(i, e, t) {
  let n;
  for (let r of t)
    if (!r.attrs || r.attrs(n || (n = lQ(i.node.parent.firstChild, e))))
      return { parser: r.parser };
  return null;
}
function aQ(i = [], e = []) {
  let t = [], n = [], r = [], s = [];
  for (let l of i)
    (l.tag == "script" ? t : l.tag == "style" ? n : l.tag == "textarea" ? r : s).push(l);
  let o = e.length ? /* @__PURE__ */ Object.create(null) : null;
  for (let l of e) (o[l.name] || (o[l.name] = [])).push(l);
  return Gw((l, a) => {
    let h = l.type.id;
    if (h == xZ) return Ef(l, a, t);
    if (h == wZ) return Ef(l, a, n);
    if (h == kZ) return Ef(l, a, r);
    if (h == iQ && s.length) {
      let c = l.node, f = c.firstChild, u = f && z1(f, a), d;
      if (u) {
        for (let O of s)
          if (O.tag == u && (!O.attrs || O.attrs(d || (d = lQ(f, a))))) {
            let p = c.lastChild, m = p.type.id == QZ ? p.from : c.to;
            if (m > f.to)
              return { parser: O.parser, overlay: [{ from: f.to, to: m }] };
          }
      }
    }
    if (o && h == nQ) {
      let c = l.node, f;
      if (f = c.firstChild) {
        let u = o[a.read(f.from, f.to)];
        if (u) for (let d of u) {
          if (d.tagName && d.tagName != z1(c.parent, a)) continue;
          let O = c.lastChild;
          if (O.type.id == eO) {
            let p = O.from + 1, m = O.lastChild, g = O.to - (m && m.isError ? 0 : 1);
            if (g > p) return { parser: d.parser, overlay: [{ from: p, to: g }] };
          } else if (O.type.id == rQ)
            return { parser: d.parser, overlay: [{ from: O.from, to: O.to }] };
        }
      }
    }
    return null;
  });
}
const NZ = 107, I1 = 1, jZ = 108, UZ = 109, N1 = 2, j1 = 110, hQ = [
  9,
  10,
  11,
  12,
  13,
  32,
  133,
  160,
  5760,
  8192,
  8193,
  8194,
  8195,
  8196,
  8197,
  8198,
  8199,
  8200,
  8201,
  8202,
  8232,
  8233,
  8239,
  8287,
  12288
], YZ = 58, GZ = 40, cQ = 95, FZ = 91, Ya = 45, HZ = 46, KZ = 35, JZ = 37, eD = 38, tD = 92, iD = 10, nD = 42;
function nl(i) {
  return i >= 65 && i <= 90 || i >= 97 && i <= 122 || i >= 161;
}
function fQ(i) {
  return i >= 48 && i <= 57;
}
const rD = new Ze((i, e) => {
  for (let t = !1, n = 0, r = 0; ; r++) {
    let { next: s } = i;
    if (nl(s) || s == Ya || s == cQ || t && fQ(s))
      !t && (s != Ya || r > 0) && (t = !0), n === r && s == Ya && n++, i.advance();
    else if (s == tD && i.peek(1) != iD)
      i.advance(), i.next > -1 && i.advance(), t = !0;
    else {
      t && i.acceptToken(
        n == 2 && e.canShift(N1) ? N1 : e.canShift(j1) ? j1 : s == GZ ? jZ : UZ
      );
      break;
    }
  }
}), sD = new Ze((i) => {
  if (hQ.includes(i.peek(-1))) {
    let { next: e } = i;
    (nl(e) || e == cQ || e == KZ || e == HZ || e == nD || e == FZ || e == YZ && nl(i.peek(1)) || e == Ya || e == eD) && i.acceptToken(NZ);
  }
}), oD = new Ze((i) => {
  if (!hQ.includes(i.peek(-1))) {
    let { next: e } = i;
    if (e == JZ && (i.advance(), i.acceptToken(I1)), nl(e)) {
      do
        i.advance();
      while (nl(i.next) || fQ(i.next));
      i.acceptToken(I1);
    }
  }
}), lD = ki({
  "AtKeyword import charset namespace keyframes media supports": y.definitionKeyword,
  "from to selector": y.keyword,
  NamespaceName: y.namespace,
  KeyframeName: y.labelName,
  KeyframeRangeName: y.operatorKeyword,
  TagName: y.tagName,
  ClassName: y.className,
  PseudoClassName: y.constant(y.className),
  IdName: y.labelName,
  "FeatureName PropertyName": y.propertyName,
  AttributeName: y.attributeName,
  NumberLiteral: y.number,
  KeywordQuery: y.keyword,
  UnaryQueryOp: y.operatorKeyword,
  "CallTag ValueName": y.atom,
  VariableName: y.variableName,
  Callee: y.operatorKeyword,
  Unit: y.unit,
  "UniversalSelector NestingSelector": y.definitionOperator,
  "MatchOp CompareOp": y.compareOperator,
  "ChildOp SiblingOp, LogicOp": y.logicOperator,
  BinOp: y.arithmeticOperator,
  Important: y.modifier,
  Comment: y.blockComment,
  ColorLiteral: y.color,
  "ParenthesizedContent StringLiteral": y.string,
  ":": y.punctuation,
  "PseudoOp #": y.derefOperator,
  "; ,": y.separator,
  "( )": y.paren,
  "[ ]": y.squareBracket,
  "{ }": y.brace
}), aD = { __proto__: null, lang: 34, "nth-child": 34, "nth-last-child": 34, "nth-of-type": 34, "nth-last-of-type": 34, dir: 34, "host-context": 34, url: 62, "url-prefix": 62, domain: 62, regexp: 62 }, hD = { __proto__: null, "@import": 120, "@media": 154, "@charset": 158, "@namespace": 162, "@keyframes": 168, "@supports": 180 }, cD = { __proto__: null, layer: 124, not: 144, only: 144, selector: 150 }, fD = bi.deserialize({
  version: 14,
  states: ">`QYQ[OOO#kQ[OOP#rOWOOOOQP'#Cd'#CdOOQP'#Cc'#CcO#wQ[O'#CfO$hQXO'#CaO$rQ[O'#CiO$}Q[O'#DUO%SQ[O'#DXO%XQ[O'#D[O%XQ[O'#D_OOQP'#Ev'#EvO%yQdO'#DhO&hQ[O'#DzO%yQdO'#D|O&yQ[O'#EOO'UQ[O'#ERO'^Q[O'#EXO'lQ[O'#EZOOQS'#Eu'#EuOOQS'#E^'#E^QYQ[OOO'sQXO'#CdO(hQWO'#DdO(mQWO'#E{O(xQ[O'#E{QOQWOOP)SO#tO'#C_POOO)C@e)C@eOOQP'#Ch'#ChOOQP,59Q,59QO#wQ[O,59QO)_Q[O,59TO$}Q[O,59pO%SQ[O,59sO%XQ[O,59vO%XQ[O,59xO%XQ[O,59yO%XQ[O'#EcO)jQWO,58{O)rQ[O'#DcOOQS,58{,58{OOQP'#Cl'#ClOOQO'#DS'#DSOOQP,59T,59TO)yQWO,59TO*OQWO,59TOOQP'#DW'#DWOOQP,59p,59pOOQO'#DY'#DYO*TQ`O,59sO*nQXO,59vO+UQXO,59yOOQS'#Cq'#CqO%yQdO'#CrO+lQvO'#CtO-hQtO,5:SOOQO'#Cy'#CyO*OQWO'#CxO-rQWO'#CzO-wQ[O'#DPOOQS'#Ex'#ExOOQO'#Dn'#DnO.eQdO'#DwO.uQWO'#E|O'^Q[O'#DuO/TQWO'#DxOOQO'#E}'#E}O)mQWO,5:fO/YQpO,5:hOOQS'#EQ'#EQO/bQWO,5:jO/gQ[O,5:jOOQO'#ET'#ETO/oQWO,5:mO/tQWO,5:sO/|QWO,5:uOOQS-E8[-E8[O0UQdO,5:OO0fQ[O'#EeO0sQWO,5;gO0sQWO,5;gPOOO'#E]'#E]P1OO#tO,58yPOOO,58y,58yOOQP1G.l1G.lOOQP1G.o1G.oO)yQWO1G.oO*OQWO1G.oOOQP1G/[1G/[O1ZQ`O1G/_O1cQXO1G/bO1yQXO1G/dO2aQXO1G/eO2wQXO,5:}OOQO-E8a-E8aOOQS1G.g1G.gO3RQWO,59}O3WQ[O'#DTO3_QdO'#CpOOQP1G/_1G/_O%yQdO1G/_O3fQpO,59^OOQS,59`,59`O%yQdO,59bO3nQ[O'#DkO4PQWO1G/nO-VQ[O1G/nOOQS,59d,59dO4UQ!bO,59fOOQS'#DQ'#DQOOQS'#E`'#E`O4aQ[O,59kOOQS,59k,59kO4iQpO'#DnO4wQpO,5:ZO5PQWO,5:cOOQO'#FO'#FOO4zQpO,5:_O'^Q[O,5:]O5XQ[O'#EgO5pQWO,5;hO5{QWO,5:aO%XQ[O,5:dOOQS1G0Q1G0QOOQS1G0S1G0SOOQS1G0U1G0UO6^QWO1G0UO6cQdO'#EUOOQS1G0X1G0XOOQS1G0_1G0_OOQS1G0a1G0aO6nQtO1G/jOOQO1G/j1G/jOOQO,5;P,5;PO7UQ[O,5;POOQO-E8c-E8cO7cQWO1G1RPOOO-E8Z-E8ZPOOO1G.e1G.eOOQP7+$Z7+$ZOOQP7+$y7+$yO%yQdO7+$yOOQS1G/i1G/iO7nQXO'#EzO7xQWO,59oO7}QtO'#E_O8uQdO'#EwO9PQWO,59[O9UQpO7+$yOOQS1G.x1G.xOOQS1G.|1G.|O9^Q[O,5:VOOQS7+%Y7+%YO9cQWO7+%YOOQS1G/Q1G/QO9hQWO1G/QOOQS-E8^-E8^OOQS1G/V1G/VO%yQdO1G/uO9mQdO1G/yOOQO1G/}1G/}OOQO1G/w1G/wO9tQWO,5;ROOQO-E8e-E8eO:SQXO1G0OOOQS7+%p7+%pO:ZQYO'#CtOOQO'#EW'#EWO:iQ`O'#EVOOQO'#EV'#EVO:tQWO'#EhO:|QdO,5:pOOQS,5:p,5:pO;XQtO'#EdO%yQdO'#EdO<YQdO7+%UOOQO7+%U7+%UOOQO1G0k1G0kO<mQpO<<HeO<uQ[O'#EbO=PQWO,5;fOOQP1G/Z1G/ZOOQS-E8]-E8]O=XQdO'#EaO=cQWO,5;cOOQT1G.v1G.vOOQP<<He<<HeOOQO'#Dm'#DmO=kQWO1G/qOOQS<<Ht<<HtOOQS7+$l7+$lO=sQdO7+%aOOQO'#Dp'#DpO=zQpO7+%eOOQO7+%j7+%jOOQO,5:q,5:qO6fQdO'#EiO:tQWO,5;SOOQS,5;S,5;SOOQS-E8f-E8fOOQS1G0[1G0[O>SQtO,5;OOOQS-E8b-E8bOOQO<<Hp<<HpOOQPAN>PAN>PO?TQXO,5:|OOQO-E8`-E8`O?_QdO,5:{OOQO-E8_-E8_O9^Q[O'#EfO?iQWO7+%]OOQS7+%]7+%]OOQO<<H{<<H{OOQO<<IP<<IPO?qQdO<<IPOOQO,5;T,5;TOOQO-E8g-E8gOOQS1G0n1G0nOOQO,5;Q,5;QOOQO-E8d-E8dOOQS<<Hw<<HwO@YQWOAN>kOOQOG24VG24V",
  stateData: "@g~O#dOS#eQQ~OU[OX[OZTO^VO_VOrXOyWO!PYO!SZO!]cO!^]O!o^O!q_O!s`O!vaO!|bO#aRO~OQhOU[OX[OZTO^VO_VOrXOyWO!PYO!SZO!]cO!^]O!o^O!q_O!s`O!vaO!|bO#agO~O#^#oP~P!aO#elO~O#anO~OZpO^qO_qOrsOyrO!PtO!SvO#_uO~OuwO!UyO~P#|Oa!PO#`|O#a{O~O#a!QO~O#a!SO~OU[OX[OZTO^VO_VOrXOyWO!PYO!SZO#aRO~OQ!`Oc!XOg!`Oi!`Oo!^Or!_O#`![O#a!WO#m!YO~Oc!bO!j!dO!m!eO#b!aO!U#pP~Oi!jOo!^O#a!iO~Oi!lO#a!lO~Oc!bO!j!dO!m!eO#b!aO~O!Z#pP~P&hOZWX^WX^!XX_WXrWXuWXyWX!PWX!SWX!UWX#_WX~O^!qO~O!Z!rO#^#oX!T#oX~O#^#oX!T#oX~P!aO#f!uO#g!uO#h!wO~Oa!{O#`|O#a{O~OuwO!UyO~O!T#oP~P!aOc#VO~Oc#WO~Oq#XO}#YO~OZpO^qO_qOrsOyrO~Ou!Oa!P!Oa!S!Oa!U!Oa#_!Oab!Oa~P*]Ou!Ra!P!Ra!S!Ra!U!Ra#_!Rab!Ra~P*]OP#[OchXkhX!ZhX!`hX!jhX!mhX#bhXbhX!hhXQhXghXihXohXrhXuhX!YhX#^hX#`hX#ahX#mhXqhX!ThX~Oc!bO!j!dO!m!eO#b!aO!Z#pP~Ok#]O!`#^O~P-VOc#bO~Oq#fO#a#cO~OQ#jOg#jOi#jOo!^O#`![O#m!YO~Oc!bO!j!dO!m!eO#b#gO~P.POu#mO!f#lO!U#pX!Z#pX~Oc#pO~Ok#]O!Z#rO~O!Z#sO~Oi#tOo!^O~O!U#uO~O!UyO!f#lO~O!UyO!Z#xO~O!Y#zO!Z!Wa#^!Wa!T!Wa~P%yO!Z#XX#^#XX!T#XX~P!aO!Z!rO#^#oa!T#oa~O#f!uO#g!uO#h$QO~Oq$SO}$TO~Ou!Oi!P!Oi!S!Oi!U!Oi#_!Oib!Oi~P*]Ou!Qi!P!Qi!S!Qi!U!Qi#_!Qib!Qi~P*]Ou!Ri!P!Ri!S!Ri!U!Ri#_!Rib!Ri~P*]Ou#Va!U#Va~P#|O!T$UO~Ob#nP~P%XOb#kP~P%yOb$]Ok#]O~Oc$_O!Z!_X!j!_X!m!_X#b!_X~O!Z$`O~Ob$bOi$cOp$cO~Oq$eO#a#cO~O^!dXb!bX!f!bX!h!dX~O^$fO!h$gO~Ob$hO!f#lO~Oc!bO!j!dO!m!eO#b!aOu#ZX!U#ZX!Z#ZX~Ou#mO!U#pa!Z#pa~O!f#lOu!ia!U!ia!Z!iab!ia~O!Z$mO~O!T$tO#a$oO#m$nO~Ok#]Ou$vO!Y$xO!Z!Wi#^!Wi!T!Wi~P%yO!Z#Xa#^#Xa!T#Xa~P!aO!Z!rO#^#oi!T#oi~Ou${Ob#nX~P#|Ob$}O~Ok#]OQ#RXb#RXc#RXg#RXi#RXo#RXr#RXu#RX#`#RX#a#RX#m#RX~Ou%POb#kX~P%yOb%RO~Ok#]Oq%SO~O#a%TO~O!Z%VO~Ob%WO~O#b%YO~P.PO!f#lOu#Za!U#Za!Z#Za~Ob%[O~P#|OP#[OuhX!UhXbhX~O#m$nOu!yX!U!yX~Ou%^O!UyO~O!T%bO#a$oO#m$nO~Ok#]OQ#WXc#WXg#WXi#WXo#WXr#WXu#WX!Y#WX!Z#WX#^#WX#`#WX#a#WX#m#WX!T#WX~Ou$vO!Y%eO!Z!Wq#^!Wq!T!Wq~P%yOk#]Oq%fO~Ob#UXu#UX~P%XOu${Ob#na~Ob#TXu#TX~P%yOu%POb#ka~OZ%kOb%mO~Ob%nO~P%yOb%oO!h%pO~Ok#]OQ#Wac#Wag#Wai#Wao#War#Wau#Wa!Y#Wa!Z#Wa#^#Wa#`#Wa#a#Wa#m#Wa!T#Wa~Ob#Uau#Ua~P#|Ob#Tau#Ta~P%yOZ%kOb%vO~OQ#jOg#jOi#jOo!^O#`![O#b%YO#m$nO~Ob%xO~O#dp#e#mk!S#m~",
  goto: "/l#sPPP#tP#wP$Q$dP$QP$v$QPP$|PPP%S%]%]P%oP%]P&`&w'^PPPP%]'{P(P(V$QP(]$Q(cP$QP$Q$QPPP(i)O)]PP#wPP)dP)g)m)m)x)mP)mP)mP)m)mP#wP#wP#wP*R#wP*U*X*[*c#wP#wP*h*n*}+]+c+i+o+u+{,V,],c,iPPPPPPPPPPP,o,x-n-qP.g.j.p.|/cRmQ_dOPfjy!r#|q[OPYZfjtuvwy!r#V#p#|${qSOPYZfjtuvwy!r#V#p#|${QoTR!xpQ}VR!yqQ!y!PQ#a!]R$R!{q!`]_!X!q#W#Y#]#y$T$Y$f$v$w%P%X%ip!`]_!X!q#W#Y#]#y$T$Y$f$v$w%P%X%iU#j!b$g%pU$q#u$s%^R%]$pp!`]_!X!q#W#Y#]#y$T$Y$f$v$w%P%X%iV#j!b$g%pw!]]_!X!b!q#W#Y#]#y$T$Y$f$g$v$w%P%X%i%pp!`]_!X!q#W#Y#]#y$T$Y$f$v$w%P%X%iQ!j`U#j!b$g%pR#t!kT#d!_#eQ!OVR!zqQ!y!OR$R!zQ!RWR!|rQ!TXR!}sQzUQ#TxQ#q!gQ#w!nQ#x!oQ%`$rR%s%_SiPyQ!tjQ#{!rR$y#|ZhPjy!r#|R#`!ZQ%U$_R%t%kc!f^bc!Z!b!d#`#l#mQ#h!bQ%Z$gR%w%pR!k`R!maR#v!mS$r#u$sR%q%^V$p#u$s%^Q!vlR$P!vQfOSjPyU!pfj#|R#|!rQ$Y#WU%O$Y%X%iQ%X$fR%i%PQ#e!_R$d#eQ%Q$YR%j%QQ$|$VR%h$|QxUR#SxQ$w#yR%d$wQ!siS#}!s$OR$O!tQ%l%UR%u%lQ#n!cR$k#nQ$s#uR%a$sQ%_$rR%r%__eOPfjy!r#|^UOPfjy!r#|Q!UYQ!VZQ#OtQ#PuQ#QvQ#RwQ$V#VQ$l#pR%g${R$Z#WQ!Z]Q!h_Q#Z!XQ#y!q[$X#W$Y$f%P%X%iQ$[#YQ$^#]S$u#y$wQ$z$TR%c$vR$W#VQkPR#UyQ!g^Q!ocQ#_!ZR$a#`W!c^c!Z#`Q!nbQ#i!bQ#o!dQ$i#lR$j#mQ#k!bQ%Z$gR%w%p",
  nodeNames: "⚠ Unit VariableName Comment StyleSheet RuleSet UniversalSelector TagSelector TagName NestingSelector ClassSelector . ClassName PseudoClassSelector : :: PseudoClassName PseudoClassName ) ( ArgList ValueName ParenthesizedValue ColorLiteral NumberLiteral StringLiteral BinaryExpression BinOp CallExpression Callee CallLiteral CallTag ParenthesizedContent ] [ LineNames LineName , PseudoClassName ArgList IdSelector # IdName AttributeSelector AttributeName MatchOp ChildSelector ChildOp DescendantSelector SiblingSelector SiblingOp } { Block Declaration PropertyName Important ; ImportStatement AtKeyword import Layer layer LayerName KeywordQuery FeatureQuery FeatureName BinaryQuery LogicOp ComparisonQuery CompareOp UnaryQuery UnaryQueryOp ParenthesizedQuery SelectorQuery selector MediaStatement media CharsetStatement charset NamespaceStatement namespace NamespaceName KeyframesStatement keyframes KeyframeName KeyframeList KeyframeSelector KeyframeRangeName SupportsStatement supports AtRule Styles",
  maxTerm: 126,
  nodeProps: [
    ["isolate", -2, 3, 25, ""],
    ["openedBy", 18, "(", 33, "[", 51, "{"],
    ["closedBy", 19, ")", 34, "]", 52, "}"]
  ],
  propSources: [lD],
  skippedNodes: [0, 3, 93],
  repeatNodeCount: 13,
  tokenData: "LU~R!^OX$}X^%u^p$}pq%uqr)Xrs.Rst/utu6duv$}vw7^wx7oxy9^yz9oz{9t{|:_|}?Q}!O?c!O!P@Q!P!Q@i!Q![Ab![!]B]!]!^CX!^!_Cj!_!`Df!`!aDy!a!b$}!b!cEz!c!}$}!}#OHX#O#P$}#P#QHj#Q#R6d#R#T$}#T#UH{#U#c$}#c#dJ^#d#o$}#o#pJs#p#q6d#q#rKU#r#sKg#s#y$}#y#z%u#z$f$}$f$g%u$g#BY$}#BY#BZ%u#BZ$IS$}$IS$I_%u$I_$I|$}$I|$JO%u$JO$JT$}$JT$JU%u$JU$KV$}$KV$KW%u$KW&FU$}&FU&FV%u&FV;'S$};'S;=`LO<%lO$}`%QSOy%^z;'S%^;'S;=`%o<%lO%^`%cSp`Oy%^z;'S%^;'S;=`%o<%lO%^`%rP;=`<%l%^~%zh#d~OX%^X^'f^p%^pq'fqy%^z#y%^#y#z'f#z$f%^$f$g'f$g#BY%^#BY#BZ'f#BZ$IS%^$IS$I_'f$I_$I|%^$I|$JO'f$JO$JT%^$JT$JU'f$JU$KV%^$KV$KW'f$KW&FU%^&FU&FV'f&FV;'S%^;'S;=`%o<%lO%^~'mh#d~p`OX%^X^'f^p%^pq'fqy%^z#y%^#y#z'f#z$f%^$f$g'f$g#BY%^#BY#BZ'f#BZ$IS%^$IS$I_'f$I_$I|%^$I|$JO'f$JO$JT%^$JT$JU'f$JU$KV%^$KV$KW'f$KW&FU%^&FU&FV'f&FV;'S%^;'S;=`%o<%lO%^l)[UOy%^z#]%^#]#^)n#^;'S%^;'S;=`%o<%lO%^l)sUp`Oy%^z#a%^#a#b*V#b;'S%^;'S;=`%o<%lO%^l*[Up`Oy%^z#d%^#d#e*n#e;'S%^;'S;=`%o<%lO%^l*sUp`Oy%^z#c%^#c#d+V#d;'S%^;'S;=`%o<%lO%^l+[Up`Oy%^z#f%^#f#g+n#g;'S%^;'S;=`%o<%lO%^l+sUp`Oy%^z#h%^#h#i,V#i;'S%^;'S;=`%o<%lO%^l,[Up`Oy%^z#T%^#T#U,n#U;'S%^;'S;=`%o<%lO%^l,sUp`Oy%^z#b%^#b#c-V#c;'S%^;'S;=`%o<%lO%^l-[Up`Oy%^z#h%^#h#i-n#i;'S%^;'S;=`%o<%lO%^l-uS!Y[p`Oy%^z;'S%^;'S;=`%o<%lO%^~.UWOY.RZr.Rrs.ns#O.R#O#P.s#P;'S.R;'S;=`/o<%lO.R~.sOi~~.vRO;'S.R;'S;=`/P;=`O.R~/SXOY.RZr.Rrs.ns#O.R#O#P.s#P;'S.R;'S;=`/o;=`<%l.R<%lO.R~/rP;=`<%l.Rn/zYyQOy%^z!Q%^!Q![0j![!c%^!c!i0j!i#T%^#T#Z0j#Z;'S%^;'S;=`%o<%lO%^l0oYp`Oy%^z!Q%^!Q![1_![!c%^!c!i1_!i#T%^#T#Z1_#Z;'S%^;'S;=`%o<%lO%^l1dYp`Oy%^z!Q%^!Q![2S![!c%^!c!i2S!i#T%^#T#Z2S#Z;'S%^;'S;=`%o<%lO%^l2ZYg[p`Oy%^z!Q%^!Q![2y![!c%^!c!i2y!i#T%^#T#Z2y#Z;'S%^;'S;=`%o<%lO%^l3QYg[p`Oy%^z!Q%^!Q![3p![!c%^!c!i3p!i#T%^#T#Z3p#Z;'S%^;'S;=`%o<%lO%^l3uYp`Oy%^z!Q%^!Q![4e![!c%^!c!i4e!i#T%^#T#Z4e#Z;'S%^;'S;=`%o<%lO%^l4lYg[p`Oy%^z!Q%^!Q![5[![!c%^!c!i5[!i#T%^#T#Z5[#Z;'S%^;'S;=`%o<%lO%^l5aYp`Oy%^z!Q%^!Q![6P![!c%^!c!i6P!i#T%^#T#Z6P#Z;'S%^;'S;=`%o<%lO%^l6WSg[p`Oy%^z;'S%^;'S;=`%o<%lO%^d6gUOy%^z!_%^!_!`6y!`;'S%^;'S;=`%o<%lO%^d7QS}Sp`Oy%^z;'S%^;'S;=`%o<%lO%^b7cSXQOy%^z;'S%^;'S;=`%o<%lO%^~7rWOY7oZw7owx.nx#O7o#O#P8[#P;'S7o;'S;=`9W<%lO7o~8_RO;'S7o;'S;=`8h;=`O7o~8kXOY7oZw7owx.nx#O7o#O#P8[#P;'S7o;'S;=`9W;=`<%l7o<%lO7o~9ZP;=`<%l7on9cSc^Oy%^z;'S%^;'S;=`%o<%lO%^~9tOb~n9{UUQkWOy%^z!_%^!_!`6y!`;'S%^;'S;=`%o<%lO%^n:fWkW!SQOy%^z!O%^!O!P;O!P!Q%^!Q![>T![;'S%^;'S;=`%o<%lO%^l;TUp`Oy%^z!Q%^!Q![;g![;'S%^;'S;=`%o<%lO%^l;nYp`#m[Oy%^z!Q%^!Q![;g![!g%^!g!h<^!h#X%^#X#Y<^#Y;'S%^;'S;=`%o<%lO%^l<cYp`Oy%^z{%^{|=R|}%^}!O=R!O!Q%^!Q![=j![;'S%^;'S;=`%o<%lO%^l=WUp`Oy%^z!Q%^!Q![=j![;'S%^;'S;=`%o<%lO%^l=qUp`#m[Oy%^z!Q%^!Q![=j![;'S%^;'S;=`%o<%lO%^l>[[p`#m[Oy%^z!O%^!O!P;g!P!Q%^!Q![>T![!g%^!g!h<^!h#X%^#X#Y<^#Y;'S%^;'S;=`%o<%lO%^n?VSu^Oy%^z;'S%^;'S;=`%o<%lO%^l?hWkWOy%^z!O%^!O!P;O!P!Q%^!Q![>T![;'S%^;'S;=`%o<%lO%^n@VUZQOy%^z!Q%^!Q![;g![;'S%^;'S;=`%o<%lO%^~@nTkWOy%^z{@}{;'S%^;'S;=`%o<%lO%^~AUSp`#e~Oy%^z;'S%^;'S;=`%o<%lO%^lAg[#m[Oy%^z!O%^!O!P;g!P!Q%^!Q![>T![!g%^!g!h<^!h#X%^#X#Y<^#Y;'S%^;'S;=`%o<%lO%^jBbU^YOy%^z![%^![!]Bt!];'S%^;'S;=`%o<%lO%^bB{S_Qp`Oy%^z;'S%^;'S;=`%o<%lO%^nC^S!Z^Oy%^z;'S%^;'S;=`%o<%lO%^hCoU!hWOy%^z!_%^!_!`DR!`;'S%^;'S;=`%o<%lO%^hDYS!hWp`Oy%^z;'S%^;'S;=`%o<%lO%^lDmS!hW}SOy%^z;'S%^;'S;=`%o<%lO%^jEQV!PQ!hWOy%^z!_%^!_!`DR!`!aEg!a;'S%^;'S;=`%o<%lO%^bEnS!PQp`Oy%^z;'S%^;'S;=`%o<%lO%^bE}YOy%^z}%^}!OFm!O!c%^!c!}G[!}#T%^#T#oG[#o;'S%^;'S;=`%o<%lO%^bFrWp`Oy%^z!c%^!c!}G[!}#T%^#T#oG[#o;'S%^;'S;=`%o<%lO%^bGc[!]Qp`Oy%^z}%^}!OG[!O!Q%^!Q![G[![!c%^!c!}G[!}#T%^#T#oG[#o;'S%^;'S;=`%o<%lO%^nH^Sr^Oy%^z;'S%^;'S;=`%o<%lO%^nHoSq^Oy%^z;'S%^;'S;=`%o<%lO%^jIOUOy%^z#b%^#b#cIb#c;'S%^;'S;=`%o<%lO%^jIgUp`Oy%^z#W%^#W#XIy#X;'S%^;'S;=`%o<%lO%^jJQS!fYp`Oy%^z;'S%^;'S;=`%o<%lO%^jJaUOy%^z#f%^#f#gIy#g;'S%^;'S;=`%o<%lO%^fJxS!UUOy%^z;'S%^;'S;=`%o<%lO%^nKZS!T^Oy%^z;'S%^;'S;=`%o<%lO%^fKlU!SQOy%^z!_%^!_!`6y!`;'S%^;'S;=`%o<%lO%^`LRP;=`<%l$}",
  tokenizers: [sD, oD, rD, 1, 2, 3, 4, new Bh("m~RRYZ[z{a~~g~aO#g~~dP!P!Qg~lO#h~~", 28, 114)],
  topRules: { StyleSheet: [0, 4], Styles: [1, 92] },
  specialized: [{ term: 108, get: (i) => aD[i] || -1 }, { term: 59, get: (i) => hD[i] || -1 }, { term: 110, get: (i) => cD[i] || -1 }],
  tokenPrec: 1441
});
let Mf = null;
function qf() {
  if (!Mf && typeof document == "object" && document.body) {
    let { style: i } = document.body, e = [], t = /* @__PURE__ */ new Set();
    for (let n in i)
      n != "cssText" && n != "cssFloat" && typeof i[n] == "string" && (/[A-Z]/.test(n) && (n = n.replace(/[A-Z]/g, (r) => "-" + r.toLowerCase())), t.has(n) || (e.push(n), t.add(n)));
    Mf = e.sort().map((n) => ({ type: "property", label: n, apply: n + ": " }));
  }
  return Mf || [];
}
const U1 = /* @__PURE__ */ [
  "active",
  "after",
  "any-link",
  "autofill",
  "backdrop",
  "before",
  "checked",
  "cue",
  "default",
  "defined",
  "disabled",
  "empty",
  "enabled",
  "file-selector-button",
  "first",
  "first-child",
  "first-letter",
  "first-line",
  "first-of-type",
  "focus",
  "focus-visible",
  "focus-within",
  "fullscreen",
  "has",
  "host",
  "host-context",
  "hover",
  "in-range",
  "indeterminate",
  "invalid",
  "is",
  "lang",
  "last-child",
  "last-of-type",
  "left",
  "link",
  "marker",
  "modal",
  "not",
  "nth-child",
  "nth-last-child",
  "nth-last-of-type",
  "nth-of-type",
  "only-child",
  "only-of-type",
  "optional",
  "out-of-range",
  "part",
  "placeholder",
  "placeholder-shown",
  "read-only",
  "read-write",
  "required",
  "right",
  "root",
  "scope",
  "selection",
  "slotted",
  "target",
  "target-text",
  "valid",
  "visited",
  "where"
].map((i) => ({ type: "class", label: i })), Y1 = /* @__PURE__ */ [
  "above",
  "absolute",
  "activeborder",
  "additive",
  "activecaption",
  "after-white-space",
  "ahead",
  "alias",
  "all",
  "all-scroll",
  "alphabetic",
  "alternate",
  "always",
  "antialiased",
  "appworkspace",
  "asterisks",
  "attr",
  "auto",
  "auto-flow",
  "avoid",
  "avoid-column",
  "avoid-page",
  "avoid-region",
  "axis-pan",
  "background",
  "backwards",
  "baseline",
  "below",
  "bidi-override",
  "blink",
  "block",
  "block-axis",
  "bold",
  "bolder",
  "border",
  "border-box",
  "both",
  "bottom",
  "break",
  "break-all",
  "break-word",
  "bullets",
  "button",
  "button-bevel",
  "buttonface",
  "buttonhighlight",
  "buttonshadow",
  "buttontext",
  "calc",
  "capitalize",
  "caps-lock-indicator",
  "caption",
  "captiontext",
  "caret",
  "cell",
  "center",
  "checkbox",
  "circle",
  "cjk-decimal",
  "clear",
  "clip",
  "close-quote",
  "col-resize",
  "collapse",
  "color",
  "color-burn",
  "color-dodge",
  "column",
  "column-reverse",
  "compact",
  "condensed",
  "contain",
  "content",
  "contents",
  "content-box",
  "context-menu",
  "continuous",
  "copy",
  "counter",
  "counters",
  "cover",
  "crop",
  "cross",
  "crosshair",
  "currentcolor",
  "cursive",
  "cyclic",
  "darken",
  "dashed",
  "decimal",
  "decimal-leading-zero",
  "default",
  "default-button",
  "dense",
  "destination-atop",
  "destination-in",
  "destination-out",
  "destination-over",
  "difference",
  "disc",
  "discard",
  "disclosure-closed",
  "disclosure-open",
  "document",
  "dot-dash",
  "dot-dot-dash",
  "dotted",
  "double",
  "down",
  "e-resize",
  "ease",
  "ease-in",
  "ease-in-out",
  "ease-out",
  "element",
  "ellipse",
  "ellipsis",
  "embed",
  "end",
  "ethiopic-abegede-gez",
  "ethiopic-halehame-aa-er",
  "ethiopic-halehame-gez",
  "ew-resize",
  "exclusion",
  "expanded",
  "extends",
  "extra-condensed",
  "extra-expanded",
  "fantasy",
  "fast",
  "fill",
  "fill-box",
  "fixed",
  "flat",
  "flex",
  "flex-end",
  "flex-start",
  "footnotes",
  "forwards",
  "from",
  "geometricPrecision",
  "graytext",
  "grid",
  "groove",
  "hand",
  "hard-light",
  "help",
  "hidden",
  "hide",
  "higher",
  "highlight",
  "highlighttext",
  "horizontal",
  "hsl",
  "hsla",
  "hue",
  "icon",
  "ignore",
  "inactiveborder",
  "inactivecaption",
  "inactivecaptiontext",
  "infinite",
  "infobackground",
  "infotext",
  "inherit",
  "initial",
  "inline",
  "inline-axis",
  "inline-block",
  "inline-flex",
  "inline-grid",
  "inline-table",
  "inset",
  "inside",
  "intrinsic",
  "invert",
  "italic",
  "justify",
  "keep-all",
  "landscape",
  "large",
  "larger",
  "left",
  "level",
  "lighter",
  "lighten",
  "line-through",
  "linear",
  "linear-gradient",
  "lines",
  "list-item",
  "listbox",
  "listitem",
  "local",
  "logical",
  "loud",
  "lower",
  "lower-hexadecimal",
  "lower-latin",
  "lower-norwegian",
  "lowercase",
  "ltr",
  "luminosity",
  "manipulation",
  "match",
  "matrix",
  "matrix3d",
  "medium",
  "menu",
  "menutext",
  "message-box",
  "middle",
  "min-intrinsic",
  "mix",
  "monospace",
  "move",
  "multiple",
  "multiple_mask_images",
  "multiply",
  "n-resize",
  "narrower",
  "ne-resize",
  "nesw-resize",
  "no-close-quote",
  "no-drop",
  "no-open-quote",
  "no-repeat",
  "none",
  "normal",
  "not-allowed",
  "nowrap",
  "ns-resize",
  "numbers",
  "numeric",
  "nw-resize",
  "nwse-resize",
  "oblique",
  "opacity",
  "open-quote",
  "optimizeLegibility",
  "optimizeSpeed",
  "outset",
  "outside",
  "outside-shape",
  "overlay",
  "overline",
  "padding",
  "padding-box",
  "painted",
  "page",
  "paused",
  "perspective",
  "pinch-zoom",
  "plus-darker",
  "plus-lighter",
  "pointer",
  "polygon",
  "portrait",
  "pre",
  "pre-line",
  "pre-wrap",
  "preserve-3d",
  "progress",
  "push-button",
  "radial-gradient",
  "radio",
  "read-only",
  "read-write",
  "read-write-plaintext-only",
  "rectangle",
  "region",
  "relative",
  "repeat",
  "repeating-linear-gradient",
  "repeating-radial-gradient",
  "repeat-x",
  "repeat-y",
  "reset",
  "reverse",
  "rgb",
  "rgba",
  "ridge",
  "right",
  "rotate",
  "rotate3d",
  "rotateX",
  "rotateY",
  "rotateZ",
  "round",
  "row",
  "row-resize",
  "row-reverse",
  "rtl",
  "run-in",
  "running",
  "s-resize",
  "sans-serif",
  "saturation",
  "scale",
  "scale3d",
  "scaleX",
  "scaleY",
  "scaleZ",
  "screen",
  "scroll",
  "scrollbar",
  "scroll-position",
  "se-resize",
  "self-start",
  "self-end",
  "semi-condensed",
  "semi-expanded",
  "separate",
  "serif",
  "show",
  "single",
  "skew",
  "skewX",
  "skewY",
  "skip-white-space",
  "slide",
  "slider-horizontal",
  "slider-vertical",
  "sliderthumb-horizontal",
  "sliderthumb-vertical",
  "slow",
  "small",
  "small-caps",
  "small-caption",
  "smaller",
  "soft-light",
  "solid",
  "source-atop",
  "source-in",
  "source-out",
  "source-over",
  "space",
  "space-around",
  "space-between",
  "space-evenly",
  "spell-out",
  "square",
  "start",
  "static",
  "status-bar",
  "stretch",
  "stroke",
  "stroke-box",
  "sub",
  "subpixel-antialiased",
  "svg_masks",
  "super",
  "sw-resize",
  "symbolic",
  "symbols",
  "system-ui",
  "table",
  "table-caption",
  "table-cell",
  "table-column",
  "table-column-group",
  "table-footer-group",
  "table-header-group",
  "table-row",
  "table-row-group",
  "text",
  "text-bottom",
  "text-top",
  "textarea",
  "textfield",
  "thick",
  "thin",
  "threeddarkshadow",
  "threedface",
  "threedhighlight",
  "threedlightshadow",
  "threedshadow",
  "to",
  "top",
  "transform",
  "translate",
  "translate3d",
  "translateX",
  "translateY",
  "translateZ",
  "transparent",
  "ultra-condensed",
  "ultra-expanded",
  "underline",
  "unidirectional-pan",
  "unset",
  "up",
  "upper-latin",
  "uppercase",
  "url",
  "var",
  "vertical",
  "vertical-text",
  "view-box",
  "visible",
  "visibleFill",
  "visiblePainted",
  "visibleStroke",
  "visual",
  "w-resize",
  "wait",
  "wave",
  "wider",
  "window",
  "windowframe",
  "windowtext",
  "words",
  "wrap",
  "wrap-reverse",
  "x-large",
  "x-small",
  "xor",
  "xx-large",
  "xx-small"
].map((i) => ({ type: "keyword", label: i })).concat(/* @__PURE__ */ [
  "aliceblue",
  "antiquewhite",
  "aqua",
  "aquamarine",
  "azure",
  "beige",
  "bisque",
  "black",
  "blanchedalmond",
  "blue",
  "blueviolet",
  "brown",
  "burlywood",
  "cadetblue",
  "chartreuse",
  "chocolate",
  "coral",
  "cornflowerblue",
  "cornsilk",
  "crimson",
  "cyan",
  "darkblue",
  "darkcyan",
  "darkgoldenrod",
  "darkgray",
  "darkgreen",
  "darkkhaki",
  "darkmagenta",
  "darkolivegreen",
  "darkorange",
  "darkorchid",
  "darkred",
  "darksalmon",
  "darkseagreen",
  "darkslateblue",
  "darkslategray",
  "darkturquoise",
  "darkviolet",
  "deeppink",
  "deepskyblue",
  "dimgray",
  "dodgerblue",
  "firebrick",
  "floralwhite",
  "forestgreen",
  "fuchsia",
  "gainsboro",
  "ghostwhite",
  "gold",
  "goldenrod",
  "gray",
  "grey",
  "green",
  "greenyellow",
  "honeydew",
  "hotpink",
  "indianred",
  "indigo",
  "ivory",
  "khaki",
  "lavender",
  "lavenderblush",
  "lawngreen",
  "lemonchiffon",
  "lightblue",
  "lightcoral",
  "lightcyan",
  "lightgoldenrodyellow",
  "lightgray",
  "lightgreen",
  "lightpink",
  "lightsalmon",
  "lightseagreen",
  "lightskyblue",
  "lightslategray",
  "lightsteelblue",
  "lightyellow",
  "lime",
  "limegreen",
  "linen",
  "magenta",
  "maroon",
  "mediumaquamarine",
  "mediumblue",
  "mediumorchid",
  "mediumpurple",
  "mediumseagreen",
  "mediumslateblue",
  "mediumspringgreen",
  "mediumturquoise",
  "mediumvioletred",
  "midnightblue",
  "mintcream",
  "mistyrose",
  "moccasin",
  "navajowhite",
  "navy",
  "oldlace",
  "olive",
  "olivedrab",
  "orange",
  "orangered",
  "orchid",
  "palegoldenrod",
  "palegreen",
  "paleturquoise",
  "palevioletred",
  "papayawhip",
  "peachpuff",
  "peru",
  "pink",
  "plum",
  "powderblue",
  "purple",
  "rebeccapurple",
  "red",
  "rosybrown",
  "royalblue",
  "saddlebrown",
  "salmon",
  "sandybrown",
  "seagreen",
  "seashell",
  "sienna",
  "silver",
  "skyblue",
  "slateblue",
  "slategray",
  "snow",
  "springgreen",
  "steelblue",
  "tan",
  "teal",
  "thistle",
  "tomato",
  "turquoise",
  "violet",
  "wheat",
  "white",
  "whitesmoke",
  "yellow",
  "yellowgreen"
].map((i) => ({ type: "constant", label: i }))), uD = /* @__PURE__ */ [
  "a",
  "abbr",
  "address",
  "article",
  "aside",
  "b",
  "bdi",
  "bdo",
  "blockquote",
  "body",
  "br",
  "button",
  "canvas",
  "caption",
  "cite",
  "code",
  "col",
  "colgroup",
  "dd",
  "del",
  "details",
  "dfn",
  "dialog",
  "div",
  "dl",
  "dt",
  "em",
  "figcaption",
  "figure",
  "footer",
  "form",
  "header",
  "hgroup",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "hr",
  "html",
  "i",
  "iframe",
  "img",
  "input",
  "ins",
  "kbd",
  "label",
  "legend",
  "li",
  "main",
  "meter",
  "nav",
  "ol",
  "output",
  "p",
  "pre",
  "ruby",
  "section",
  "select",
  "small",
  "source",
  "span",
  "strong",
  "sub",
  "summary",
  "sup",
  "table",
  "tbody",
  "td",
  "template",
  "textarea",
  "tfoot",
  "th",
  "thead",
  "tr",
  "u",
  "ul"
].map((i) => ({ type: "type", label: i })), dD = /* @__PURE__ */ [
  "@charset",
  "@color-profile",
  "@container",
  "@counter-style",
  "@font-face",
  "@font-feature-values",
  "@font-palette-values",
  "@import",
  "@keyframes",
  "@layer",
  "@media",
  "@namespace",
  "@page",
  "@position-try",
  "@property",
  "@scope",
  "@starting-style",
  "@supports",
  "@view-transition"
].map((i) => ({ type: "keyword", label: i })), tn = /^(\w[\w-]*|-\w[\w-]*|)$/, OD = /^-(-[\w-]*)?$/;
function pD(i, e) {
  var t;
  if ((i.name == "(" || i.type.isError) && (i = i.parent || i), i.name != "ArgList")
    return !1;
  let n = (t = i.parent) === null || t === void 0 ? void 0 : t.firstChild;
  return n?.name != "Callee" ? !1 : e.sliceString(n.from, n.to) == "var";
}
const G1 = /* @__PURE__ */ new Mp(), mD = ["Declaration"];
function gD(i) {
  for (let e = i; ; ) {
    if (e.type.isTop)
      return e;
    if (!(e = e.parent))
      return i;
  }
}
function uQ(i, e, t) {
  if (e.to - e.from > 4096) {
    let n = G1.get(e);
    if (n)
      return n;
    let r = [], s = /* @__PURE__ */ new Set(), o = e.cursor(ve.IncludeAnonymous);
    if (o.firstChild())
      do
        for (let l of uQ(i, o.node, t))
          s.has(l.label) || (s.add(l.label), r.push(l));
      while (o.nextSibling());
    return G1.set(e, r), r;
  } else {
    let n = [], r = /* @__PURE__ */ new Set();
    return e.cursor().iterate((s) => {
      var o;
      if (t(s) && s.matchContext(mD) && ((o = s.node.nextSibling) === null || o === void 0 ? void 0 : o.name) == ":") {
        let l = i.sliceString(s.from, s.to);
        r.has(l) || (r.add(l), n.push({ label: l, type: "variable" }));
      }
    }), n;
  }
}
const yD = (i) => (e) => {
  let { state: t, pos: n } = e, r = ye(t).resolveInner(n, -1), s = r.type.isError && r.from == r.to - 1 && t.doc.sliceString(r.from, r.to) == "-";
  if (r.name == "PropertyName" || (s || r.name == "TagName") && /^(Block|Styles)$/.test(r.resolve(r.to).name))
    return { from: r.from, options: qf(), validFor: tn };
  if (r.name == "ValueName")
    return { from: r.from, options: Y1, validFor: tn };
  if (r.name == "PseudoClassName")
    return { from: r.from, options: U1, validFor: tn };
  if (i(r) || (e.explicit || s) && pD(r, t.doc))
    return {
      from: i(r) || s ? r.from : n,
      options: uQ(t.doc, gD(r), i),
      validFor: OD
    };
  if (r.name == "TagName") {
    for (let { parent: a } = r; a; a = a.parent)
      if (a.name == "Block")
        return { from: r.from, options: qf(), validFor: tn };
    return { from: r.from, options: uD, validFor: tn };
  }
  if (r.name == "AtKeyword")
    return { from: r.from, options: dD, validFor: tn };
  if (!e.explicit)
    return null;
  let o = r.resolve(n), l = o.childBefore(n);
  return l && l.name == ":" && o.name == "PseudoClassSelector" ? { from: n, options: U1, validFor: tn } : l && l.name == ":" && o.name == "Declaration" || o.name == "ArgList" ? { from: n, options: Y1, validFor: tn } : o.name == "Block" || o.name == "Styles" ? { from: n, options: qf(), validFor: tn } : null;
}, SD = /* @__PURE__ */ yD((i) => i.name == "VariableName"), Wh = /* @__PURE__ */ Si.define({
  name: "css",
  parser: /* @__PURE__ */ fD.configure({
    props: [
      /* @__PURE__ */ Ji.add({
        Declaration: /* @__PURE__ */ Or()
      }),
      /* @__PURE__ */ vi.add({
        "Block KeyframeList": Ql
      })
    ]
  }),
  languageData: {
    commentTokens: { block: { open: "/*", close: "*/" } },
    indentOnInput: /^\s*\}$/,
    wordChars: "-"
  }
});
function dQ() {
  return new Gi(Wh, Wh.data.of({ autocomplete: SD }));
}
const Js = ["_blank", "_self", "_top", "_parent"], _f = ["ascii", "utf-8", "utf-16", "latin1", "latin1"], Xf = ["get", "post", "put", "delete"], Lf = ["application/x-www-form-urlencoded", "multipart/form-data", "text/plain"], Xt = ["true", "false"], Y = {}, bD = {
  a: {
    attrs: {
      href: null,
      ping: null,
      type: null,
      media: null,
      target: Js,
      hreflang: null
    }
  },
  abbr: Y,
  address: Y,
  area: {
    attrs: {
      alt: null,
      coords: null,
      href: null,
      target: null,
      ping: null,
      media: null,
      hreflang: null,
      type: null,
      shape: ["default", "rect", "circle", "poly"]
    }
  },
  article: Y,
  aside: Y,
  audio: {
    attrs: {
      src: null,
      mediagroup: null,
      crossorigin: ["anonymous", "use-credentials"],
      preload: ["none", "metadata", "auto"],
      autoplay: ["autoplay"],
      loop: ["loop"],
      controls: ["controls"]
    }
  },
  b: Y,
  base: { attrs: { href: null, target: Js } },
  bdi: Y,
  bdo: Y,
  blockquote: { attrs: { cite: null } },
  body: Y,
  br: Y,
  button: {
    attrs: {
      form: null,
      formaction: null,
      name: null,
      value: null,
      autofocus: ["autofocus"],
      disabled: ["autofocus"],
      formenctype: Lf,
      formmethod: Xf,
      formnovalidate: ["novalidate"],
      formtarget: Js,
      type: ["submit", "reset", "button"]
    }
  },
  canvas: { attrs: { width: null, height: null } },
  caption: Y,
  center: Y,
  cite: Y,
  code: Y,
  col: { attrs: { span: null } },
  colgroup: { attrs: { span: null } },
  command: {
    attrs: {
      type: ["command", "checkbox", "radio"],
      label: null,
      icon: null,
      radiogroup: null,
      command: null,
      title: null,
      disabled: ["disabled"],
      checked: ["checked"]
    }
  },
  data: { attrs: { value: null } },
  datagrid: { attrs: { disabled: ["disabled"], multiple: ["multiple"] } },
  datalist: { attrs: { data: null } },
  dd: Y,
  del: { attrs: { cite: null, datetime: null } },
  details: { attrs: { open: ["open"] } },
  dfn: Y,
  div: Y,
  dl: Y,
  dt: Y,
  em: Y,
  embed: { attrs: { src: null, type: null, width: null, height: null } },
  eventsource: { attrs: { src: null } },
  fieldset: { attrs: { disabled: ["disabled"], form: null, name: null } },
  figcaption: Y,
  figure: Y,
  footer: Y,
  form: {
    attrs: {
      action: null,
      name: null,
      "accept-charset": _f,
      autocomplete: ["on", "off"],
      enctype: Lf,
      method: Xf,
      novalidate: ["novalidate"],
      target: Js
    }
  },
  h1: Y,
  h2: Y,
  h3: Y,
  h4: Y,
  h5: Y,
  h6: Y,
  head: {
    children: ["title", "base", "link", "style", "meta", "script", "noscript", "command"]
  },
  header: Y,
  hgroup: Y,
  hr: Y,
  html: {
    attrs: { manifest: null }
  },
  i: Y,
  iframe: {
    attrs: {
      src: null,
      srcdoc: null,
      name: null,
      width: null,
      height: null,
      sandbox: ["allow-top-navigation", "allow-same-origin", "allow-forms", "allow-scripts"],
      seamless: ["seamless"]
    }
  },
  img: {
    attrs: {
      alt: null,
      src: null,
      ismap: null,
      usemap: null,
      width: null,
      height: null,
      crossorigin: ["anonymous", "use-credentials"]
    }
  },
  input: {
    attrs: {
      alt: null,
      dirname: null,
      form: null,
      formaction: null,
      height: null,
      list: null,
      max: null,
      maxlength: null,
      min: null,
      name: null,
      pattern: null,
      placeholder: null,
      size: null,
      src: null,
      step: null,
      value: null,
      width: null,
      accept: ["audio/*", "video/*", "image/*"],
      autocomplete: ["on", "off"],
      autofocus: ["autofocus"],
      checked: ["checked"],
      disabled: ["disabled"],
      formenctype: Lf,
      formmethod: Xf,
      formnovalidate: ["novalidate"],
      formtarget: Js,
      multiple: ["multiple"],
      readonly: ["readonly"],
      required: ["required"],
      type: [
        "hidden",
        "text",
        "search",
        "tel",
        "url",
        "email",
        "password",
        "datetime",
        "date",
        "month",
        "week",
        "time",
        "datetime-local",
        "number",
        "range",
        "color",
        "checkbox",
        "radio",
        "file",
        "submit",
        "image",
        "reset",
        "button"
      ]
    }
  },
  ins: { attrs: { cite: null, datetime: null } },
  kbd: Y,
  keygen: {
    attrs: {
      challenge: null,
      form: null,
      name: null,
      autofocus: ["autofocus"],
      disabled: ["disabled"],
      keytype: ["RSA"]
    }
  },
  label: { attrs: { for: null, form: null } },
  legend: Y,
  li: { attrs: { value: null } },
  link: {
    attrs: {
      href: null,
      type: null,
      hreflang: null,
      media: null,
      sizes: ["all", "16x16", "16x16 32x32", "16x16 32x32 64x64"]
    }
  },
  map: { attrs: { name: null } },
  mark: Y,
  menu: { attrs: { label: null, type: ["list", "context", "toolbar"] } },
  meta: {
    attrs: {
      content: null,
      charset: _f,
      name: ["viewport", "application-name", "author", "description", "generator", "keywords"],
      "http-equiv": ["content-language", "content-type", "default-style", "refresh"]
    }
  },
  meter: { attrs: { value: null, min: null, low: null, high: null, max: null, optimum: null } },
  nav: Y,
  noscript: Y,
  object: {
    attrs: {
      data: null,
      type: null,
      name: null,
      usemap: null,
      form: null,
      width: null,
      height: null,
      typemustmatch: ["typemustmatch"]
    }
  },
  ol: {
    attrs: { reversed: ["reversed"], start: null, type: ["1", "a", "A", "i", "I"] },
    children: ["li", "script", "template", "ul", "ol"]
  },
  optgroup: { attrs: { disabled: ["disabled"], label: null } },
  option: { attrs: { disabled: ["disabled"], label: null, selected: ["selected"], value: null } },
  output: { attrs: { for: null, form: null, name: null } },
  p: Y,
  param: { attrs: { name: null, value: null } },
  pre: Y,
  progress: { attrs: { value: null, max: null } },
  q: { attrs: { cite: null } },
  rp: Y,
  rt: Y,
  ruby: Y,
  samp: Y,
  script: {
    attrs: {
      type: ["text/javascript"],
      src: null,
      async: ["async"],
      defer: ["defer"],
      charset: _f
    }
  },
  section: Y,
  select: {
    attrs: {
      form: null,
      name: null,
      size: null,
      autofocus: ["autofocus"],
      disabled: ["disabled"],
      multiple: ["multiple"]
    }
  },
  slot: { attrs: { name: null } },
  small: Y,
  source: { attrs: { src: null, type: null, media: null } },
  span: Y,
  strong: Y,
  style: {
    attrs: {
      type: ["text/css"],
      media: null,
      scoped: null
    }
  },
  sub: Y,
  summary: Y,
  sup: Y,
  table: Y,
  tbody: Y,
  td: { attrs: { colspan: null, rowspan: null, headers: null } },
  template: Y,
  textarea: {
    attrs: {
      dirname: null,
      form: null,
      maxlength: null,
      name: null,
      placeholder: null,
      rows: null,
      cols: null,
      autofocus: ["autofocus"],
      disabled: ["disabled"],
      readonly: ["readonly"],
      required: ["required"],
      wrap: ["soft", "hard"]
    }
  },
  tfoot: Y,
  th: { attrs: { colspan: null, rowspan: null, headers: null, scope: ["row", "col", "rowgroup", "colgroup"] } },
  thead: Y,
  time: { attrs: { datetime: null } },
  title: Y,
  tr: Y,
  track: {
    attrs: {
      src: null,
      label: null,
      default: null,
      kind: ["subtitles", "captions", "descriptions", "chapters", "metadata"],
      srclang: null
    }
  },
  ul: { children: ["li", "script", "template", "ul", "ol"] },
  var: Y,
  video: {
    attrs: {
      src: null,
      poster: null,
      width: null,
      height: null,
      crossorigin: ["anonymous", "use-credentials"],
      preload: ["auto", "metadata", "none"],
      autoplay: ["autoplay"],
      mediagroup: ["movie"],
      muted: ["muted"],
      controls: ["controls"]
    }
  },
  wbr: Y
}, OQ = {
  accesskey: null,
  class: null,
  contenteditable: Xt,
  contextmenu: null,
  dir: ["ltr", "rtl", "auto"],
  draggable: ["true", "false", "auto"],
  dropzone: ["copy", "move", "link", "string:", "file:"],
  hidden: ["hidden"],
  id: null,
  inert: ["inert"],
  itemid: null,
  itemprop: null,
  itemref: null,
  itemscope: ["itemscope"],
  itemtype: null,
  lang: ["ar", "bn", "de", "en-GB", "en-US", "es", "fr", "hi", "id", "ja", "pa", "pt", "ru", "tr", "zh"],
  spellcheck: Xt,
  autocorrect: Xt,
  autocapitalize: Xt,
  style: null,
  tabindex: null,
  title: null,
  translate: ["yes", "no"],
  rel: ["stylesheet", "alternate", "author", "bookmark", "help", "license", "next", "nofollow", "noreferrer", "prefetch", "prev", "search", "tag"],
  role: /* @__PURE__ */ "alert application article banner button cell checkbox complementary contentinfo dialog document feed figure form grid gridcell heading img list listbox listitem main navigation region row rowgroup search switch tab table tabpanel textbox timer".split(" "),
  "aria-activedescendant": null,
  "aria-atomic": Xt,
  "aria-autocomplete": ["inline", "list", "both", "none"],
  "aria-busy": Xt,
  "aria-checked": ["true", "false", "mixed", "undefined"],
  "aria-controls": null,
  "aria-describedby": null,
  "aria-disabled": Xt,
  "aria-dropeffect": null,
  "aria-expanded": ["true", "false", "undefined"],
  "aria-flowto": null,
  "aria-grabbed": ["true", "false", "undefined"],
  "aria-haspopup": Xt,
  "aria-hidden": Xt,
  "aria-invalid": ["true", "false", "grammar", "spelling"],
  "aria-label": null,
  "aria-labelledby": null,
  "aria-level": null,
  "aria-live": ["off", "polite", "assertive"],
  "aria-multiline": Xt,
  "aria-multiselectable": Xt,
  "aria-owns": null,
  "aria-posinset": null,
  "aria-pressed": ["true", "false", "mixed", "undefined"],
  "aria-readonly": Xt,
  "aria-relevant": null,
  "aria-required": Xt,
  "aria-selected": ["true", "false", "undefined"],
  "aria-setsize": null,
  "aria-sort": ["ascending", "descending", "none", "other"],
  "aria-valuemax": null,
  "aria-valuemin": null,
  "aria-valuenow": null,
  "aria-valuetext": null
}, pQ = /* @__PURE__ */ "beforeunload copy cut dragstart dragover dragleave dragenter dragend drag paste focus blur change click load mousedown mouseenter mouseleave mouseup keydown keyup resize scroll unload".split(" ").map((i) => "on" + i);
for (let i of pQ)
  OQ[i] = null;
class rl {
  constructor(e, t) {
    this.tags = Object.assign(Object.assign({}, bD), e), this.globalAttrs = Object.assign(Object.assign({}, OQ), t), this.allTags = Object.keys(this.tags), this.globalAttrNames = Object.keys(this.globalAttrs);
  }
}
rl.default = /* @__PURE__ */ new rl();
function Ss(i, e, t = i.length) {
  if (!e)
    return "";
  let n = e.firstChild, r = n && n.getChild("TagName");
  return r ? i.sliceString(r.from, Math.min(r.to, t)) : "";
}
function bs(i, e = !1) {
  for (; i; i = i.parent)
    if (i.name == "Element")
      if (e)
        e = !1;
      else
        return i;
  return null;
}
function mQ(i, e, t) {
  let n = t.tags[Ss(i, bs(e))];
  return n?.children || t.allTags;
}
function am(i, e) {
  let t = [];
  for (let n = bs(e); n && !n.type.isTop; n = bs(n.parent)) {
    let r = Ss(i, n);
    if (r && n.lastChild.name == "CloseTag")
      break;
    r && t.indexOf(r) < 0 && (e.name == "EndTag" || e.from >= n.firstChild.to) && t.push(r);
  }
  return t;
}
const gQ = /^[:\-\.\w\u00b7-\uffff]*$/;
function F1(i, e, t, n, r) {
  let s = /\s*>/.test(i.sliceDoc(r, r + 5)) ? "" : ">", o = bs(t, !0);
  return {
    from: n,
    to: r,
    options: mQ(i.doc, o, e).map((l) => ({ label: l, type: "type" })).concat(am(i.doc, t).map((l, a) => ({
      label: "/" + l,
      apply: "/" + l + s,
      type: "type",
      boost: 99 - a
    }))),
    validFor: /^\/?[:\-\.\w\u00b7-\uffff]*$/
  };
}
function H1(i, e, t, n) {
  let r = /\s*>/.test(i.sliceDoc(n, n + 5)) ? "" : ">";
  return {
    from: t,
    to: n,
    options: am(i.doc, e).map((s, o) => ({ label: s, apply: s + r, type: "type", boost: 99 - o })),
    validFor: gQ
  };
}
function xD(i, e, t, n) {
  let r = [], s = 0;
  for (let o of mQ(i.doc, t, e))
    r.push({ label: "<" + o, type: "type" });
  for (let o of am(i.doc, t))
    r.push({ label: "</" + o + ">", type: "type", boost: 99 - s++ });
  return { from: n, to: n, options: r, validFor: /^<\/?[:\-\.\w\u00b7-\uffff]*$/ };
}
function wD(i, e, t, n, r) {
  let s = bs(t), o = s ? e.tags[Ss(i.doc, s)] : null, l = o && o.attrs ? Object.keys(o.attrs) : [], a = o && o.globalAttrs === !1 ? l : l.length ? l.concat(e.globalAttrNames) : e.globalAttrNames;
  return {
    from: n,
    to: r,
    options: a.map((h) => ({ label: h, type: "property" })),
    validFor: gQ
  };
}
function kD(i, e, t, n, r) {
  var s;
  let o = (s = t.parent) === null || s === void 0 ? void 0 : s.getChild("AttributeName"), l = [], a;
  if (o) {
    let h = i.sliceDoc(o.from, o.to), c = e.globalAttrs[h];
    if (!c) {
      let f = bs(t), u = f ? e.tags[Ss(i.doc, f)] : null;
      c = u?.attrs && u.attrs[h];
    }
    if (c) {
      let f = i.sliceDoc(n, r).toLowerCase(), u = '"', d = '"';
      /^['"]/.test(f) ? (a = f[0] == '"' ? /^[^"]*$/ : /^[^']*$/, u = "", d = i.sliceDoc(r, r + 1) == f[0] ? "" : f[0], f = f.slice(1), n++) : a = /^[^\s<>='"]*$/;
      for (let O of c)
        l.push({ label: O, apply: u + O + d, type: "constant" });
    }
  }
  return { from: n, to: r, options: l, validFor: a };
}
function yQ(i, e) {
  let { state: t, pos: n } = e, r = ye(t).resolveInner(n, -1), s = r.resolve(n);
  for (let o = n, l; s == r && (l = r.childBefore(o)); ) {
    let a = l.lastChild;
    if (!a || !a.type.isError || a.from < a.to)
      break;
    s = r = l, o = a.from;
  }
  return r.name == "TagName" ? r.parent && /CloseTag$/.test(r.parent.name) ? H1(t, r, r.from, n) : F1(t, i, r, r.from, n) : r.name == "StartTag" ? F1(t, i, r, n, n) : r.name == "StartCloseTag" || r.name == "IncompleteCloseTag" ? H1(t, r, n, n) : r.name == "OpenTag" || r.name == "SelfClosingTag" || r.name == "AttributeName" ? wD(t, i, r, r.name == "AttributeName" ? r.from : n, n) : r.name == "Is" || r.name == "AttributeValue" || r.name == "UnquotedAttributeValue" ? kD(t, i, r, r.name == "Is" ? n : r.from, n) : e.explicit && (s.name == "Element" || s.name == "Text" || s.name == "Document") ? xD(t, i, r, n) : null;
}
function vD(i) {
  return yQ(rl.default, i);
}
function QD(i) {
  let { extraTags: e, extraGlobalAttributes: t } = i, n = t || e ? new rl(e, t) : rl.default;
  return (r) => yQ(n, r);
}
const PD = /* @__PURE__ */ Ni.parser.configure({ top: "SingleExpression" }), SQ = [
  {
    tag: "script",
    attrs: (i) => i.type == "text/typescript" || i.lang == "ts",
    parser: vv.parser
  },
  {
    tag: "script",
    attrs: (i) => i.type == "text/babel" || i.type == "text/jsx",
    parser: Qv.parser
  },
  {
    tag: "script",
    attrs: (i) => i.type == "text/typescript-jsx",
    parser: Pv.parser
  },
  {
    tag: "script",
    attrs(i) {
      return /^(importmap|speculationrules|application\/(.+\+)?json)$/i.test(i.type);
    },
    parser: PD
  },
  {
    tag: "script",
    attrs(i) {
      return !i.type || /^(?:text|application)\/(?:x-)?(?:java|ecma)script$|^module$|^$/i.test(i.type);
    },
    parser: Ni.parser
  },
  {
    tag: "style",
    attrs(i) {
      return (!i.lang || i.lang == "css") && (!i.type || /^(text\/)?(x-)?(stylesheet|css)$/i.test(i.type));
    },
    parser: Wh.parser
  }
], bQ = /* @__PURE__ */ [
  {
    name: "style",
    parser: /* @__PURE__ */ Wh.parser.configure({ top: "Styles" })
  }
].concat(/* @__PURE__ */ pQ.map((i) => ({ name: i, parser: Ni.parser }))), xQ = /* @__PURE__ */ Si.define({
  name: "html",
  parser: /* @__PURE__ */ IZ.configure({
    props: [
      /* @__PURE__ */ Ji.add({
        Element(i) {
          let e = /^(\s*)(<\/)?/.exec(i.textAfter);
          return i.node.to <= i.pos + e[0].length ? i.continue() : i.lineIndent(i.node.from) + (e[2] ? 0 : i.unit);
        },
        "OpenTag CloseTag SelfClosingTag"(i) {
          return i.column(i.node.from) + i.unit;
        },
        Document(i) {
          if (i.pos + /\s*/.exec(i.textAfter)[0].length < i.node.to)
            return i.continue();
          let e = null, t;
          for (let n = i.node; ; ) {
            let r = n.lastChild;
            if (!r || r.name != "Element" || r.to != n.to)
              break;
            e = n = r;
          }
          return e && !((t = e.lastChild) && (t.name == "CloseTag" || t.name == "SelfClosingTag")) ? i.lineIndent(e.from) + i.unit : null;
        }
      }),
      /* @__PURE__ */ vi.add({
        Element(i) {
          let e = i.firstChild, t = i.lastChild;
          return !e || e.name != "OpenTag" ? null : { from: e.to, to: t.name == "CloseTag" ? t.from : i.to };
        }
      }),
      /* @__PURE__ */ Zp.add({
        "OpenTag CloseTag": (i) => i.getChild("TagName")
      })
    ]
  }),
  languageData: {
    commentTokens: { block: { open: "<!--", close: "-->" } },
    indentOnInput: /^\s*<\/\w+\W$/,
    wordChars: "-._"
  }
}), Ga = /* @__PURE__ */ xQ.configure({
  wrap: /* @__PURE__ */ aQ(SQ, bQ)
});
function wQ(i = {}) {
  let e = "", t;
  i.matchClosingTags === !1 && (e = "noMatch"), i.selfClosingTags === !0 && (e = (e ? e + " " : "") + "selfClosing"), (i.nestedLanguages && i.nestedLanguages.length || i.nestedAttributes && i.nestedAttributes.length) && (t = aQ((i.nestedLanguages || []).concat(SQ), (i.nestedAttributes || []).concat(bQ)));
  let n = t ? xQ.configure({ wrap: t, dialect: e }) : e ? Ga.configure({ dialect: e }) : Ga;
  return new Gi(n, [
    Ga.data.of({ autocomplete: QD(i) }),
    i.autoCloseTags !== !1 ? $D : [],
    Cv().support,
    dQ().support
  ]);
}
const K1 = /* @__PURE__ */ new Set(/* @__PURE__ */ "area base br col command embed frame hr img input keygen link meta param source track wbr menuitem".split(" ")), $D = /* @__PURE__ */ W.inputHandler.of((i, e, t, n, r) => {
  if (i.composing || i.state.readOnly || e != t || n != ">" && n != "/" || !Ga.isActiveAt(i.state, e, -1))
    return !1;
  let s = r(), { state: o } = s, l = o.changeByRange((a) => {
    var h, c, f;
    let u = o.doc.sliceString(a.from - 1, a.to) == n, { head: d } = a, O = ye(o).resolveInner(d, -1), p;
    if (u && n == ">" && O.name == "EndTag") {
      let m = O.parent;
      if (((c = (h = m.parent) === null || h === void 0 ? void 0 : h.lastChild) === null || c === void 0 ? void 0 : c.name) != "CloseTag" && (p = Ss(o.doc, m.parent, d)) && !K1.has(p)) {
        let g = d + (o.doc.sliceString(d, d + 1) === ">" ? 1 : 0), S = `</${p}>`;
        return { range: a, changes: { from: d, to: g, insert: S } };
      }
    } else if (u && n == "/" && O.name == "IncompleteCloseTag") {
      let m = O.parent;
      if (O.from == d - 2 && ((f = m.lastChild) === null || f === void 0 ? void 0 : f.name) != "CloseTag" && (p = Ss(o.doc, m, d)) && !K1.has(p)) {
        let g = d + (o.doc.sliceString(d, d + 1) === ">" ? 1 : 0), S = `${p}>`;
        return {
          range: C.cursor(d + S.length, -1),
          changes: { from: d, to: g, insert: S }
        };
      }
    }
    return { range: a };
  });
  return l.changes.empty ? !1 : (i.dispatch([
    s,
    o.update(l, {
      userEvent: "input.complete",
      scrollIntoView: !0
    })
  ]), !0);
}), kQ = /* @__PURE__ */ _p({ commentTokens: { block: { open: "<!--", close: "-->" } } }), vQ = /* @__PURE__ */ new se(), QQ = /* @__PURE__ */ UB.configure({
  props: [
    /* @__PURE__ */ vi.add((i) => !i.is("Block") || i.is("Document") || iO(i) != null || TD(i) ? void 0 : (e, t) => ({ from: t.doc.lineAt(e.from).to, to: e.to })),
    /* @__PURE__ */ vQ.add(iO),
    /* @__PURE__ */ Ji.add({
      Document: () => null
    }),
    /* @__PURE__ */ lr.add({
      Document: kQ
    })
  ]
});
function iO(i) {
  let e = /^(?:ATX|Setext)Heading(\d)$/.exec(i.name);
  return e ? +e[1] : void 0;
}
function TD(i) {
  return i.name == "OrderedList" || i.name == "BulletList";
}
function CD(i, e) {
  let t = i;
  for (; ; ) {
    let n = t.nextSibling, r;
    if (!n || (r = iO(n.type)) != null && r <= e)
      break;
    t = n;
  }
  return t.to;
}
const RD = /* @__PURE__ */ nk.of((i, e, t) => {
  for (let n = ye(i).resolveInner(t, -1); n && !(n.from < e); n = n.parent) {
    let r = n.type.prop(vQ);
    if (r == null)
      continue;
    let s = CD(n, r);
    if (s > t)
      return { from: t, to: s };
  }
  return null;
});
function hm(i) {
  return new Ht(kQ, i, [RD], "markdown");
}
const AD = /* @__PURE__ */ hm(QQ), ED = /* @__PURE__ */ QQ.configure([rZ, oZ, sZ, lZ, {
  props: [
    /* @__PURE__ */ vi.add({
      Table: (i, e) => ({ from: e.doc.lineAt(i.from).to, to: i.to })
    })
  ]
}]), PQ = /* @__PURE__ */ hm(ED);
function MD(i, e) {
  return (t) => {
    if (t && i) {
      let n = null;
      if (t = /\S*/.exec(t)[0], typeof i == "function" ? n = i(t) : n = vh.matchLanguageName(i, t, !0), n instanceof vh)
        return n.support ? n.support.language.parser : Jw.getSkippingParser(n.load());
      if (n)
        return n.parser;
    }
    return e ? e.parser : null;
  };
}
let Bf = class {
  constructor(e, t, n, r, s, o, l) {
    this.node = e, this.from = t, this.to = n, this.spaceBefore = r, this.spaceAfter = s, this.type = o, this.item = l;
  }
  blank(e, t = !0) {
    let n = this.spaceBefore + (this.node.name == "Blockquote" ? ">" : "");
    if (e != null) {
      for (; n.length < e; )
        n += " ";
      return n;
    } else {
      for (let r = this.to - this.from - n.length - this.spaceAfter.length; r > 0; r--)
        n += " ";
      return n + (t ? this.spaceAfter : "");
    }
  }
  marker(e, t) {
    let n = this.node.name == "OrderedList" ? String(+TQ(this.item, e)[2] + t) : "";
    return this.spaceBefore + n + this.type + this.spaceAfter;
  }
};
function $Q(i, e) {
  let t = [], n = [];
  for (let r = i; r; r = r.parent) {
    if (r.name == "FencedCode")
      return n;
    (r.name == "ListItem" || r.name == "Blockquote") && t.push(r);
  }
  for (let r = t.length - 1; r >= 0; r--) {
    let s = t[r], o, l = e.lineAt(s.from), a = s.from - l.from;
    if (s.name == "Blockquote" && (o = /^ *>( ?)/.exec(l.text.slice(a))))
      n.push(new Bf(s, a, a + o[0].length, "", o[1], ">", null));
    else if (s.name == "ListItem" && s.parent.name == "OrderedList" && (o = /^( *)\d+([.)])( *)/.exec(l.text.slice(a)))) {
      let h = o[3], c = o[0].length;
      h.length >= 4 && (h = h.slice(0, h.length - 4), c -= 4), n.push(new Bf(s.parent, a, a + c, o[1], h, o[2], s));
    } else if (s.name == "ListItem" && s.parent.name == "BulletList" && (o = /^( *)([-+*])( {1,4}\[[ xX]\])?( +)/.exec(l.text.slice(a)))) {
      let h = o[4], c = o[0].length;
      h.length > 4 && (h = h.slice(0, h.length - 4), c -= 4);
      let f = o[2];
      o[3] && (f += o[3].replace(/[xX]/, " ")), n.push(new Bf(s.parent, a, a + c, o[1], h, f, s));
    }
  }
  return n;
}
function TQ(i, e) {
  return /^(\s*)(\d+)(?=[.)])/.exec(e.sliceString(i.from, i.from + 10));
}
function Zf(i, e, t, n = 0) {
  for (let r = -1, s = i; ; ) {
    if (s.name == "ListItem") {
      let l = TQ(s, e), a = +l[2];
      if (r >= 0) {
        if (a != r + 1)
          return;
        t.push({ from: s.from + l[1].length, to: s.from + l[0].length, insert: String(r + 2 + n) });
      }
      r = a;
    }
    let o = s.nextSibling;
    if (!o)
      break;
    s = o;
  }
}
function cm(i, e) {
  let t = /^[ \t]*/.exec(i)[0].length;
  if (!t || e.facet(vl) != "	")
    return i;
  let n = gi(i, 4, t), r = "";
  for (let s = n; s > 0; )
    s >= 4 ? (r += "	", s -= 4) : (r += " ", s--);
  return r + i.slice(t);
}
const qD = ({ state: i, dispatch: e }) => {
  let t = ye(i), { doc: n } = i, r = null, s = i.changeByRange((o) => {
    if (!o.empty || !PQ.isActiveAt(i, o.from, 0))
      return r = { range: o };
    let l = o.from, a = n.lineAt(l), h = $Q(t.resolveInner(l, -1), n);
    for (; h.length && h[h.length - 1].from > l - a.from; )
      h.pop();
    if (!h.length)
      return r = { range: o };
    let c = h[h.length - 1];
    if (c.to - c.spaceAfter.length > l - a.from)
      return r = { range: o };
    let f = l >= c.to - c.spaceAfter.length && !/\S/.test(a.text.slice(c.to));
    if (c.item && f) {
      let m = c.node.firstChild, g = c.node.getChild("ListItem", "ListItem");
      if (m.to >= l || g && g.to < l || a.from > 0 && !/[^\s>]/.test(n.lineAt(a.from - 1).text)) {
        let S = h.length > 1 ? h[h.length - 2] : null, x, k = "";
        S && S.item ? (x = a.from + S.from, k = S.marker(n, 1)) : x = a.from + (S ? S.to : 0);
        let w = [{ from: x, to: l, insert: k }];
        return c.node.name == "OrderedList" && Zf(c.item, n, w, -2), S && S.node.name == "OrderedList" && Zf(S.item, n, w), { range: C.cursor(x + k.length), changes: w };
      } else {
        let S = ey(h, i, a);
        return {
          range: C.cursor(l + S.length + 1),
          changes: { from: a.from, insert: S + i.lineBreak }
        };
      }
    }
    if (c.node.name == "Blockquote" && f && a.from) {
      let m = n.lineAt(a.from - 1), g = />\s*$/.exec(m.text);
      if (g && g.index == c.from) {
        let S = i.changes([
          { from: m.from + g.index, to: m.to },
          { from: a.from + c.from, to: a.to }
        ]);
        return { range: o.map(S), changes: S };
      }
    }
    let u = [];
    c.node.name == "OrderedList" && Zf(c.item, n, u);
    let d = c.item && c.item.from < a.from, O = "";
    if (!d || /^[\s\d.)\-+*>]*/.exec(a.text)[0].length >= c.to)
      for (let m = 0, g = h.length - 1; m <= g; m++)
        O += m == g && !d ? h[m].marker(n, 1) : h[m].blank(m < g ? gi(a.text, 4, h[m + 1].from) - O.length : null);
    let p = l;
    for (; p > a.from && /\s/.test(a.text.charAt(p - a.from - 1)); )
      p--;
    return O = cm(O, i), _D(c.node, i.doc) && (O = ey(h, i, a) + i.lineBreak + O), u.push({ from: p, to: l, insert: i.lineBreak + O }), { range: C.cursor(p + O.length + 1), changes: u };
  });
  return r ? !1 : (e(i.update(s, { scrollIntoView: !0, userEvent: "input" })), !0);
};
function J1(i) {
  return i.name == "QuoteMark" || i.name == "ListMark";
}
function _D(i, e) {
  if (i.name != "OrderedList" && i.name != "BulletList")
    return !1;
  let t = i.firstChild, n = i.getChild("ListItem", "ListItem");
  if (!n)
    return !1;
  let r = e.lineAt(t.to), s = e.lineAt(n.from), o = /^[\s>]*$/.test(r.text);
  return r.number + (o ? 0 : 1) < s.number;
}
function ey(i, e, t) {
  let n = "";
  for (let r = 0, s = i.length - 2; r <= s; r++)
    n += i[r].blank(r < s ? gi(t.text, 4, Math.min(t.text.length, i[r + 1].from)) - n.length : null, r < s);
  return cm(n, e);
}
function XD(i, e) {
  let t = i.resolveInner(e, -1), n = e;
  J1(t) && (n = t.from, t = t.parent);
  for (let r; r = t.childBefore(n); )
    if (J1(r))
      n = r.from;
    else if (r.name == "OrderedList" || r.name == "BulletList")
      t = r.lastChild, n = t.to;
    else
      break;
  return t;
}
const LD = ({ state: i, dispatch: e }) => {
  let t = ye(i), n = null, r = i.changeByRange((s) => {
    let o = s.from, { doc: l } = i;
    if (s.empty && PQ.isActiveAt(i, s.from)) {
      let a = l.lineAt(o), h = $Q(XD(t, o), l);
      if (h.length) {
        let c = h[h.length - 1], f = c.to - c.spaceAfter.length + (c.spaceAfter ? 1 : 0);
        if (o - a.from > f && !/\S/.test(a.text.slice(f, o - a.from)))
          return {
            range: C.cursor(a.from + f),
            changes: { from: a.from + f, to: o }
          };
        if (o - a.from == f && // Only apply this if we're on the line that has the
        // construct's syntax, or there's only indentation in the
        // target range
        (!c.item || a.from <= c.item.from || !/\S/.test(a.text.slice(0, c.to)))) {
          let u = a.from + c.from;
          if (c.item && c.node.from < c.item.from && /\S/.test(a.text.slice(c.from, c.to))) {
            let d = c.blank(gi(a.text, 4, c.to) - gi(a.text, 4, c.from));
            return u == a.from && (d = cm(d, i)), {
              range: C.cursor(u + d.length),
              changes: { from: u, to: a.from + c.to, insert: d }
            };
          }
          if (u < o)
            return { range: C.cursor(u), changes: { from: u, to: o } };
        }
      }
    }
    return n = { range: s };
  });
  return n ? !1 : (e(i.update(r, { scrollIntoView: !0, userEvent: "delete" })), !0);
}, BD = [
  { key: "Enter", run: qD },
  { key: "Backspace", run: LD }
], CQ = /* @__PURE__ */ wQ({ matchClosingTags: !1 });
function ZD(i = {}) {
  let { codeLanguages: e, defaultCodeLanguage: t, addKeymap: n = !0, base: { parser: r } = AD, completeHTMLTags: s = !0, htmlTagLanguage: o = CQ } = i;
  if (!(r instanceof Qc))
    throw new RangeError("Base parser provided to `markdown` should be a Markdown parser");
  let l = i.extensions ? [i.extensions] : [], a = [o.support], h;
  t instanceof Gi ? (a.push(t.support), h = t.language) : t && (h = t);
  let c = e || h ? MD(e, h) : void 0;
  l.push(GB({ codeParser: c, htmlParser: o.language.parser })), n && a.push(bn.high(xl.of(BD)));
  let f = hm(r.configure(l));
  return s && a.push(f.data.of({ autocomplete: DD })), new Gi(f, a);
}
function DD(i) {
  let { state: e, pos: t } = i, n = /<[:\-\.\w\u00b7-\uffff]*$/.exec(e.sliceDoc(t - 25, t));
  if (!n)
    return null;
  let r = ye(e).resolveInner(t, -1);
  for (; r && !r.type.isTop; ) {
    if (r.name == "CodeBlock" || r.name == "FencedCode" || r.name == "ProcessingInstructionBlock" || r.name == "CommentBlock" || r.name == "Link" || r.name == "Image")
      return null;
    r = r.parent;
  }
  return {
    from: t - n[0].length,
    to: t,
    options: VD(),
    validFor: /^<[:\-\.\w\u00b7-\uffff]*$/
  };
}
let Df = null;
function VD() {
  if (Df)
    return Df;
  let i = vD(new Up(Be.create({ extensions: CQ }), 0, !0));
  return Df = i ? i.options : [];
}
const WD = 36, ty = 1, zD = 2, _r = 3, Vf = 4, ID = 5, ND = 6, jD = 7, UD = 8, YD = 9, GD = 10, FD = 11, HD = 12, KD = 13, JD = 14, eV = 15, tV = 16, iV = 17, iy = 18, nV = 19, RQ = 20, AQ = 21, ny = 22, rV = 23, sV = 24;
function nO(i) {
  return i >= 65 && i <= 90 || i >= 97 && i <= 122 || i >= 48 && i <= 57;
}
function oV(i) {
  return i >= 48 && i <= 57 || i >= 97 && i <= 102 || i >= 65 && i <= 70;
}
function ir(i, e, t) {
  for (let n = !1; ; ) {
    if (i.next < 0)
      return;
    if (i.next == e && !n) {
      i.advance();
      return;
    }
    n = t && !n && i.next == 92, i.advance();
  }
}
function lV(i, e) {
  e: for (; ; ) {
    if (i.next < 0)
      return;
    if (i.next == 36) {
      i.advance();
      for (let t = 0; t < e.length; t++) {
        if (i.next != e.charCodeAt(t))
          continue e;
        i.advance();
      }
      if (i.next == 36) {
        i.advance();
        return;
      }
    } else
      i.advance();
  }
}
function aV(i, e) {
  let t = "[{<(".indexOf(String.fromCharCode(e)), n = t < 0 ? e : "]}>)".charCodeAt(t);
  for (; ; ) {
    if (i.next < 0)
      return;
    if (i.next == n && i.peek(1) == 39) {
      i.advance(2);
      return;
    }
    i.advance();
  }
}
function rO(i, e) {
  for (; !(i.next != 95 && !nO(i.next)); )
    e != null && (e += String.fromCharCode(i.next)), i.advance();
  return e;
}
function hV(i) {
  if (i.next == 39 || i.next == 34 || i.next == 96) {
    let e = i.next;
    i.advance(), ir(i, e, !1);
  } else
    rO(i);
}
function ry(i, e) {
  for (; i.next == 48 || i.next == 49; )
    i.advance();
  e && i.next == e && i.advance();
}
function sy(i, e) {
  for (; ; ) {
    if (i.next == 46) {
      if (e)
        break;
      e = !0;
    } else if (i.next < 48 || i.next > 57)
      break;
    i.advance();
  }
  if (i.next == 69 || i.next == 101)
    for (i.advance(), (i.next == 43 || i.next == 45) && i.advance(); i.next >= 48 && i.next <= 57; )
      i.advance();
}
function oy(i) {
  for (; !(i.next < 0 || i.next == 10); )
    i.advance();
}
function er(i, e) {
  for (let t = 0; t < e.length; t++)
    if (e.charCodeAt(t) == i)
      return !0;
  return !1;
}
const Wf = ` 	\r
`;
function EQ(i, e, t) {
  let n = /* @__PURE__ */ Object.create(null);
  n.true = n.false = ID, n.null = n.unknown = ND;
  for (let r of i.split(" "))
    r && (n[r] = RQ);
  for (let r of e.split(" "))
    r && (n[r] = AQ);
  for (let r of (t || "").split(" "))
    r && (n[r] = sV);
  return n;
}
const cV = "array binary bit boolean char character clob date decimal double float int integer interval large national nchar nclob numeric object precision real smallint time timestamp varchar varying ", fV = "absolute action add after all allocate alter and any are as asc assertion at authorization before begin between both breadth by call cascade cascaded case cast catalog check close collate collation column commit condition connect connection constraint constraints constructor continue corresponding count create cross cube current current_date current_default_transform_group current_transform_group_for_type current_path current_role current_time current_timestamp current_user cursor cycle data day deallocate declare default deferrable deferred delete depth deref desc describe descriptor deterministic diagnostics disconnect distinct do domain drop dynamic each else elseif end end-exec equals escape except exception exec execute exists exit external fetch first for foreign found from free full function general get global go goto grant group grouping handle having hold hour identity if immediate in indicator initially inner inout input insert intersect into is isolation join key language last lateral leading leave left level like limit local localtime localtimestamp locator loop map match method minute modifies module month names natural nesting new next no none not of old on only open option or order ordinality out outer output overlaps pad parameter partial path prepare preserve primary prior privileges procedure public read reads recursive redo ref references referencing relative release repeat resignal restrict result return returns revoke right role rollback rollup routine row rows savepoint schema scroll search second section select session session_user set sets signal similar size some space specific specifictype sql sqlexception sqlstate sqlwarning start state static system_user table temporary then timezone_hour timezone_minute to trailing transaction translation treat trigger under undo union unique unnest until update usage user using value values view when whenever where while with without work write year zone ", sO = {
  backslashEscapes: !1,
  hashComments: !1,
  spaceAfterDashes: !1,
  slashComments: !1,
  doubleQuotedStrings: !1,
  doubleDollarQuotedStrings: !1,
  unquotedBitLiterals: !1,
  treatBitsAsBytes: !1,
  charSetCasts: !1,
  plsqlQuotingMechanism: !1,
  operatorChars: "*+-%<>!=&|~^/",
  specialVar: "?",
  identifierQuotes: '"',
  caseInsensitiveIdentifiers: !1,
  words: /* @__PURE__ */ EQ(fV, cV)
};
function uV(i, e, t, n) {
  let r = {};
  for (let s in sO)
    r[s] = (i.hasOwnProperty(s) ? i : sO)[s];
  return e && (r.words = EQ(e, t || "", n)), r;
}
function MQ(i) {
  return new Ze((e) => {
    var t;
    let { next: n } = e;
    if (e.advance(), er(n, Wf)) {
      for (; er(e.next, Wf); )
        e.advance();
      e.acceptToken(WD);
    } else if (n == 36 && i.doubleDollarQuotedStrings) {
      let r = rO(e, "");
      e.next == 36 && (e.advance(), lV(e, r), e.acceptToken(_r));
    } else if (n == 39 || n == 34 && i.doubleQuotedStrings)
      ir(e, n, i.backslashEscapes), e.acceptToken(_r);
    else if (n == 35 && i.hashComments || n == 47 && e.next == 47 && i.slashComments)
      oy(e), e.acceptToken(ty);
    else if (n == 45 && e.next == 45 && (!i.spaceAfterDashes || e.peek(1) == 32))
      oy(e), e.acceptToken(ty);
    else if (n == 47 && e.next == 42) {
      e.advance();
      for (let r = 1; ; ) {
        let s = e.next;
        if (e.next < 0)
          break;
        if (e.advance(), s == 42 && e.next == 47) {
          if (r--, e.advance(), !r)
            break;
        } else s == 47 && e.next == 42 && (r++, e.advance());
      }
      e.acceptToken(zD);
    } else if ((n == 101 || n == 69) && e.next == 39)
      e.advance(), ir(e, 39, !0), e.acceptToken(_r);
    else if ((n == 110 || n == 78) && e.next == 39 && i.charSetCasts)
      e.advance(), ir(e, 39, i.backslashEscapes), e.acceptToken(_r);
    else if (n == 95 && i.charSetCasts)
      for (let r = 0; ; r++) {
        if (e.next == 39 && r > 1) {
          e.advance(), ir(e, 39, i.backslashEscapes), e.acceptToken(_r);
          break;
        }
        if (!nO(e.next))
          break;
        e.advance();
      }
    else if (i.plsqlQuotingMechanism && (n == 113 || n == 81) && e.next == 39 && e.peek(1) > 0 && !er(e.peek(1), Wf)) {
      let r = e.peek(1);
      e.advance(2), aV(e, r), e.acceptToken(_r);
    } else if (n == 40)
      e.acceptToken(jD);
    else if (n == 41)
      e.acceptToken(UD);
    else if (n == 123)
      e.acceptToken(YD);
    else if (n == 125)
      e.acceptToken(GD);
    else if (n == 91)
      e.acceptToken(FD);
    else if (n == 93)
      e.acceptToken(HD);
    else if (n == 59)
      e.acceptToken(KD);
    else if (i.unquotedBitLiterals && n == 48 && e.next == 98)
      e.advance(), ry(e), e.acceptToken(ny);
    else if ((n == 98 || n == 66) && (e.next == 39 || e.next == 34)) {
      const r = e.next;
      e.advance(), i.treatBitsAsBytes ? (ir(e, r, i.backslashEscapes), e.acceptToken(rV)) : (ry(e, r), e.acceptToken(ny));
    } else if (n == 48 && (e.next == 120 || e.next == 88) || (n == 120 || n == 88) && e.next == 39) {
      let r = e.next == 39;
      for (e.advance(); oV(e.next); )
        e.advance();
      r && e.next == 39 && e.advance(), e.acceptToken(Vf);
    } else if (n == 46 && e.next >= 48 && e.next <= 57)
      sy(e, !0), e.acceptToken(Vf);
    else if (n == 46)
      e.acceptToken(JD);
    else if (n >= 48 && n <= 57)
      sy(e, !1), e.acceptToken(Vf);
    else if (er(n, i.operatorChars)) {
      for (; er(e.next, i.operatorChars); )
        e.advance();
      e.acceptToken(eV);
    } else if (er(n, i.specialVar))
      e.next == n && e.advance(), hV(e), e.acceptToken(iV);
    else if (er(n, i.identifierQuotes))
      ir(e, n, !1), e.acceptToken(nV);
    else if (n == 58 || n == 44)
      e.acceptToken(tV);
    else if (nO(n)) {
      let r = rO(e, String.fromCharCode(n));
      e.acceptToken(e.next == 46 || e.peek(-r.length - 1) == 46 ? iy : (t = i.words[r.toLowerCase()]) !== null && t !== void 0 ? t : iy);
    }
  });
}
const qQ = /* @__PURE__ */ MQ(sO), dV = /* @__PURE__ */ bi.deserialize({
  version: 14,
  states: "%vQ]QQOOO#wQRO'#DSO$OQQO'#CwO%eQQO'#CxO%lQQO'#CyO%sQQO'#CzOOQQ'#DS'#DSOOQQ'#C}'#C}O'UQRO'#C{OOQQ'#Cv'#CvOOQQ'#C|'#C|Q]QQOOQOQQOOO'`QQO'#DOO(xQRO,59cO)PQQO,59cO)UQQO'#DSOOQQ,59d,59dO)cQQO,59dOOQQ,59e,59eO)jQQO,59eOOQQ,59f,59fO)qQQO,59fOOQQ-E6{-E6{OOQQ,59b,59bOOQQ-E6z-E6zOOQQ,59j,59jOOQQ-E6|-E6|O+VQRO1G.}O+^QQO,59cOOQQ1G/O1G/OOOQQ1G/P1G/POOQQ1G/Q1G/QP+kQQO'#C}O+rQQO1G.}O)PQQO,59cO,PQQO'#Cw",
  stateData: ",[~OtOSPOSQOS~ORUOSUOTUOUUOVROXSOZTO]XO^QO_UO`UOaPObPOcPOdUOeUOfUOgUOhUO~O^]ORvXSvXTvXUvXVvXXvXZvX]vX_vX`vXavXbvXcvXdvXevXfvXgvXhvX~OsvX~P!jOa_Ob_Oc_O~ORUOSUOTUOUUOVROXSOZTO^tO_UO`UOa`Ob`Oc`OdUOeUOfUOgUOhUO~OWaO~P$ZOYcO~P$ZO[eO~P$ZORUOSUOTUOUUOVROXSOZTO^QO_UO`UOaPObPOcPOdUOeUOfUOgUOhUO~O]hOsoX~P%zOajObjOcjO~O^]ORkaSkaTkaUkaVkaXkaZka]ka_ka`kaakabkackadkaekafkagkahka~Oska~P'kO^]O~OWvXYvX[vX~P!jOWnO~P$ZOYoO~P$ZO[pO~P$ZO^]ORkiSkiTkiUkiVkiXkiZki]ki_ki`kiakibkickidkiekifkigkihki~Oski~P)xOWkaYka[ka~P'kO]hO~P$ZOWkiYki[ki~P)xOasObsOcsO~O",
  goto: "#hwPPPPPPPPPPPPPPPPPPPPPPPPPPx||||!Y!^!d!xPPP#[TYOZeUORSTWZbdfqT[OZQZORiZSWOZQbRQdSQfTZgWbdfqQ^PWk^lmrQl_Qm`RrseVORSTWZbdfq",
  nodeNames: "⚠ LineComment BlockComment String Number Bool Null ( ) { } [ ] ; . Operator Punctuation SpecialVar Identifier QuotedIdentifier Keyword Type Bits Bytes Builtin Script Statement CompositeIdentifier Parens Braces Brackets Statement",
  maxTerm: 38,
  nodeProps: [
    ["isolate", -4, 1, 2, 3, 19, ""]
  ],
  skippedNodes: [0, 1, 2],
  repeatNodeCount: 3,
  tokenData: "RORO",
  tokenizers: [0, qQ],
  topRules: { Script: [0, 25] },
  tokenPrec: 0
});
function oO(i) {
  let e = i.cursor().moveTo(i.from, -1);
  for (; /Comment/.test(e.name); )
    e.moveTo(e.from, -1);
  return e.node;
}
function sl(i, e) {
  let t = i.sliceString(e.from, e.to), n = /^([`'"])(.*)\1$/.exec(t);
  return n ? n[2] : t;
}
function zh(i) {
  return i && (i.name == "Identifier" || i.name == "QuotedIdentifier");
}
function OV(i, e) {
  if (e.name == "CompositeIdentifier") {
    let t = [];
    for (let n = e.firstChild; n; n = n.nextSibling)
      zh(n) && t.push(sl(i, n));
    return t;
  }
  return [sl(i, e)];
}
function ly(i, e) {
  for (let t = []; ; ) {
    if (!e || e.name != ".")
      return t;
    let n = oO(e);
    if (!zh(n))
      return t;
    t.unshift(sl(i, n)), e = oO(n);
  }
}
function pV(i, e) {
  let t = ye(i).resolveInner(e, -1), n = gV(i.doc, t);
  return t.name == "Identifier" || t.name == "QuotedIdentifier" || t.name == "Keyword" ? {
    from: t.from,
    quoted: t.name == "QuotedIdentifier" ? i.doc.sliceString(t.from, t.from + 1) : null,
    parents: ly(i.doc, oO(t)),
    aliases: n
  } : t.name == "." ? { from: e, quoted: null, parents: ly(i.doc, t), aliases: n } : { from: e, quoted: null, parents: [], empty: !0, aliases: n };
}
const mV = /* @__PURE__ */ new Set(/* @__PURE__ */ "where group having order union intersect except all distinct limit offset fetch for".split(" "));
function gV(i, e) {
  let t;
  for (let r = e; !t; r = r.parent) {
    if (!r)
      return null;
    r.name == "Statement" && (t = r);
  }
  let n = null;
  for (let r = t.firstChild, s = !1, o = null; r; r = r.nextSibling) {
    let l = r.name == "Keyword" ? i.sliceString(r.from, r.to).toLowerCase() : null, a = null;
    if (!s)
      s = l == "from";
    else if (l == "as" && o && zh(r.nextSibling))
      a = sl(i, r.nextSibling);
    else {
      if (l && mV.has(l))
        break;
      o && zh(r) && (a = sl(i, r));
    }
    a && (n || (n = /* @__PURE__ */ Object.create(null)), n[a] = OV(i, o)), o = /Identifier$/.test(r.name) ? r : null;
  }
  return n;
}
function yV(i, e) {
  return i ? e.map((t) => Object.assign(Object.assign({}, t), { label: t.label[0] == i ? t.label : i + t.label + i, apply: void 0 })) : e;
}
const SV = /^\w*$/, bV = /^[`'"]?\w*[`'"]?$/;
function ay(i) {
  return i.self && typeof i.self.label == "string";
}
class fm {
  constructor(e, t) {
    this.idQuote = e, this.idCaseInsensitive = t, this.list = [], this.children = void 0;
  }
  child(e) {
    let t = this.children || (this.children = /* @__PURE__ */ Object.create(null)), n = t[e];
    return n || (e && !this.list.some((r) => r.label == e) && this.list.push(hy(e, "type", this.idQuote, this.idCaseInsensitive)), t[e] = new fm(this.idQuote, this.idCaseInsensitive));
  }
  maybeChild(e) {
    return this.children ? this.children[e] : null;
  }
  addCompletion(e) {
    let t = this.list.findIndex((n) => n.label == e.label);
    t > -1 ? this.list[t] = e : this.list.push(e);
  }
  addCompletions(e) {
    for (let t of e)
      this.addCompletion(typeof t == "string" ? hy(t, "property", this.idQuote, this.idCaseInsensitive) : t);
  }
  addNamespace(e) {
    Array.isArray(e) ? this.addCompletions(e) : ay(e) ? this.addNamespace(e.children) : this.addNamespaceObject(e);
  }
  addNamespaceObject(e) {
    for (let t of Object.keys(e)) {
      let n = e[t], r = null, s = t.replace(/\\?\./g, (l) => l == "." ? "\0" : l).split("\0"), o = this;
      ay(n) && (r = n.self, n = n.children);
      for (let l = 0; l < s.length; l++)
        r && l == s.length - 1 && o.addCompletion(r), o = o.child(s[l].replace(/\\\./g, "."));
      o.addNamespace(n);
    }
  }
}
function hy(i, e, t, n) {
  return new RegExp("^[a-z_][a-z_\\d]*$", n ? "i" : "").test(i) ? { label: i, type: e } : { label: i, type: e, apply: t + i + t };
}
function xV(i, e, t, n, r, s) {
  var o;
  let l = ((o = s?.spec.identifierQuotes) === null || o === void 0 ? void 0 : o[0]) || '"', a = new fm(l, !!s?.spec.caseInsensitiveIdentifiers), h = r ? a.child(r) : null;
  return a.addNamespace(i), e && (h || a).addCompletions(e), t && a.addCompletions(t), h && a.addCompletions(h.list), n && a.addCompletions((h || a).child(n).list), (c) => {
    let { parents: f, from: u, quoted: d, empty: O, aliases: p } = pV(c.state, c.pos);
    if (O && !c.explicit)
      return null;
    p && f.length == 1 && (f = p[f[0]] || f);
    let m = a;
    for (let x of f) {
      for (; !m.children || !m.children[x]; )
        if (m == a && h)
          m = h;
        else if (m == h && n)
          m = m.child(n);
        else
          return null;
      let k = m.maybeChild(x);
      if (!k)
        return null;
      m = k;
    }
    let g = d && c.state.sliceDoc(c.pos, c.pos + 1) == d, S = m.list;
    return m == a && p && (S = S.concat(Object.keys(p).map((x) => ({ label: x, type: "constant" })))), {
      from: u,
      to: g ? c.pos + 1 : void 0,
      options: yV(d, S),
      validFor: d ? bV : SV
    };
  };
}
function wV(i) {
  return i == AQ ? "type" : i == RQ ? "keyword" : "variable";
}
function kV(i, e, t) {
  let n = Object.keys(i).map((r) => t(e ? r.toUpperCase() : r, wV(i[r])));
  return Yp(["QuotedIdentifier", "SpecialVar", "String", "LineComment", "BlockComment", "."], kc(n));
}
let vV = /* @__PURE__ */ dV.configure({
  props: [
    /* @__PURE__ */ Ji.add({
      Statement: /* @__PURE__ */ Or()
    }),
    /* @__PURE__ */ vi.add({
      Statement(i, e) {
        return { from: Math.min(i.from + 100, e.doc.lineAt(i.from).to), to: i.to };
      },
      BlockComment(i) {
        return { from: i.from + 2, to: i.to - 2 };
      }
    }),
    /* @__PURE__ */ ki({
      Keyword: y.keyword,
      Type: y.typeName,
      Builtin: /* @__PURE__ */ y.standard(y.name),
      Bits: y.number,
      Bytes: y.string,
      Bool: y.bool,
      Null: y.null,
      Number: y.number,
      String: y.string,
      Identifier: y.name,
      QuotedIdentifier: /* @__PURE__ */ y.special(y.string),
      SpecialVar: /* @__PURE__ */ y.special(y.name),
      LineComment: y.lineComment,
      BlockComment: y.blockComment,
      Operator: y.operator,
      "Semi Punctuation": y.punctuation,
      "( )": y.paren,
      "{ }": y.brace,
      "[ ]": y.squareBracket
    })
  ]
});
class um {
  constructor(e, t, n) {
    this.dialect = e, this.language = t, this.spec = n;
  }
  /**
  Returns the language for this dialect as an extension.
  */
  get extension() {
    return this.language.extension;
  }
  /**
  Define a new dialect.
  */
  static define(e) {
    let t = uV(e, e.keywords, e.types, e.builtin), n = Si.define({
      name: "sql",
      parser: vV.configure({
        tokenizers: [{ from: qQ, to: MQ(t) }]
      }),
      languageData: {
        commentTokens: { line: "--", block: { open: "/*", close: "*/" } },
        closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`"] }
      }
    });
    return new um(t, n, e);
  }
}
function QV(i, e) {
  return { label: i, type: e, boost: -1 };
}
function PV(i, e = !1, t) {
  return kV(i.dialect.words, e, t || QV);
}
function $V(i) {
  return i.schema ? xV(i.schema, i.tables, i.schemas, i.defaultTable, i.defaultSchema, i.dialect || dm) : () => null;
}
function TV(i) {
  return i.schema ? (i.dialect || dm).language.data.of({
    autocomplete: $V(i)
  }) : [];
}
function CV(i = {}) {
  let e = i.dialect || dm;
  return new Gi(e.language, [
    TV(i),
    e.language.data.of({
      autocomplete: PV(e, i.upperCaseKeywords, i.keywordCompletion)
    })
  ]);
}
const dm = /* @__PURE__ */ um.define({}), RV = 1, _Q = 194, XQ = 195, AV = 196, cy = 197, EV = 198, MV = 199, qV = 200, _V = 2, LQ = 3, fy = 201, XV = 24, LV = 25, BV = 49, ZV = 50, DV = 55, VV = 56, WV = 57, zV = 59, IV = 60, NV = 61, jV = 62, UV = 63, YV = 65, GV = 238, FV = 71, HV = 241, KV = 242, JV = 243, e4 = 244, t4 = 245, i4 = 246, n4 = 247, r4 = 248, BQ = 72, s4 = 249, o4 = 250, l4 = 251, a4 = 252, h4 = 253, c4 = 254, f4 = 255, u4 = 256, d4 = 73, O4 = 77, p4 = 263, m4 = 112, g4 = 130, y4 = 151, S4 = 152, b4 = 155, Cr = 10, ol = 13, Om = 32, Pc = 9, pm = 35, x4 = 40, w4 = 46, lO = 123, uy = 125, ZQ = 39, DQ = 34, dy = 92, k4 = 111, v4 = 120, Q4 = 78, P4 = 117, $4 = 85, T4 = /* @__PURE__ */ new Set([
  LV,
  BV,
  ZV,
  p4,
  YV,
  g4,
  VV,
  WV,
  GV,
  jV,
  UV,
  BQ,
  d4,
  O4,
  IV,
  NV,
  y4,
  S4,
  b4,
  m4
]);
function zf(i) {
  return i == Cr || i == ol;
}
function If(i) {
  return i >= 48 && i <= 57 || i >= 65 && i <= 70 || i >= 97 && i <= 102;
}
const C4 = new Ze((i, e) => {
  let t;
  if (i.next < 0)
    i.acceptToken(MV);
  else if (e.context.flags & Fa)
    zf(i.next) && i.acceptToken(EV, 1);
  else if (((t = i.peek(-1)) < 0 || zf(t)) && e.canShift(cy)) {
    let n = 0;
    for (; i.next == Om || i.next == Pc; )
      i.advance(), n++;
    (i.next == Cr || i.next == ol || i.next == pm) && i.acceptToken(cy, -n);
  } else zf(i.next) && i.acceptToken(AV, 1);
}, { contextual: !0 }), R4 = new Ze((i, e) => {
  let t = e.context;
  if (t.flags) return;
  let n = i.peek(-1);
  if (n == Cr || n == ol) {
    let r = 0, s = 0;
    for (; ; ) {
      if (i.next == Om) r++;
      else if (i.next == Pc) r += 8 - r % 8;
      else break;
      i.advance(), s++;
    }
    r != t.indent && i.next != Cr && i.next != ol && i.next != pm && (r < t.indent ? i.acceptToken(XQ, -s) : i.acceptToken(_Q));
  }
}), Fa = 1, VQ = 2, rn = 4, sn = 8, on = 16, ln = 32;
function Ha(i, e, t) {
  this.parent = i, this.indent = e, this.flags = t, this.hash = (i ? i.hash + i.hash << 8 : 0) + e + (e << 4) + t + (t << 6);
}
const A4 = new Ha(null, 0, 0);
function E4(i) {
  let e = 0;
  for (let t = 0; t < i.length; t++)
    e += i.charCodeAt(t) == Pc ? 8 - e % 8 : 1;
  return e;
}
const Oy = new Map([
  [HV, 0],
  [KV, rn],
  [JV, sn],
  [e4, sn | rn],
  [t4, on],
  [i4, on | rn],
  [n4, on | sn],
  [r4, on | sn | rn],
  [s4, ln],
  [o4, ln | rn],
  [l4, ln | sn],
  [a4, ln | sn | rn],
  [h4, ln | on],
  [c4, ln | on | rn],
  [f4, ln | on | sn],
  [u4, ln | on | sn | rn]
].map(([i, e]) => [i, e | VQ])), M4 = new Rl({
  start: A4,
  reduce(i, e, t, n) {
    return i.flags & Fa && T4.has(e) || (e == FV || e == BQ) && i.flags & VQ ? i.parent : i;
  },
  shift(i, e, t, n) {
    return e == _Q ? new Ha(i, E4(n.read(n.pos, t.pos)), 0) : e == XQ ? i.parent : e == XV || e == DV || e == zV || e == LQ ? new Ha(i, 0, Fa) : Oy.has(e) ? new Ha(i, 0, Oy.get(e) | i.flags & Fa) : i;
  },
  hash(i) {
    return i.hash;
  }
}), q4 = new Ze((i) => {
  for (let e = 0; e < 5; e++) {
    if (i.next != "print".charCodeAt(e)) return;
    i.advance();
  }
  if (!/\w/.test(String.fromCharCode(i.next)))
    for (let e = 0; ; e++) {
      let t = i.peek(e);
      if (!(t == Om || t == Pc)) {
        t != x4 && t != w4 && t != Cr && t != ol && t != pm && i.acceptToken(RV);
        return;
      }
    }
}), _4 = new Ze((i, e) => {
  let { flags: t } = e.context, n = t & rn ? DQ : ZQ, r = (t & sn) > 0, s = !(t & on), o = (t & ln) > 0, l = i.pos;
  for (; !(i.next < 0); )
    if (o && i.next == lO)
      if (i.peek(1) == lO)
        i.advance(2);
      else {
        if (i.pos == l) {
          i.acceptToken(LQ, 1);
          return;
        }
        break;
      }
    else if (s && i.next == dy) {
      if (i.pos == l) {
        i.advance();
        let a = i.next;
        a >= 0 && (i.advance(), X4(i, a)), i.acceptToken(_V);
        return;
      }
      break;
    } else if (i.next == dy && !s && i.peek(1) > -1)
      i.advance(2);
    else if (i.next == n && (!r || i.peek(1) == n && i.peek(2) == n)) {
      if (i.pos == l) {
        i.acceptToken(fy, r ? 3 : 1);
        return;
      }
      break;
    } else if (i.next == Cr) {
      if (r)
        i.advance();
      else if (i.pos == l) {
        i.acceptToken(fy);
        return;
      }
      break;
    } else
      i.advance();
  i.pos > l && i.acceptToken(qV);
});
function X4(i, e) {
  if (e == k4)
    for (let t = 0; t < 2 && i.next >= 48 && i.next <= 55; t++) i.advance();
  else if (e == v4)
    for (let t = 0; t < 2 && If(i.next); t++) i.advance();
  else if (e == P4)
    for (let t = 0; t < 4 && If(i.next); t++) i.advance();
  else if (e == $4)
    for (let t = 0; t < 8 && If(i.next); t++) i.advance();
  else if (e == Q4 && i.next == lO) {
    for (i.advance(); i.next >= 0 && i.next != uy && i.next != ZQ && i.next != DQ && i.next != Cr; ) i.advance();
    i.next == uy && i.advance();
  }
}
const L4 = ki({
  'async "*" "**" FormatConversion FormatSpec': y.modifier,
  "for while if elif else try except finally return raise break continue with pass assert await yield match case": y.controlKeyword,
  "in not and or is del": y.operatorKeyword,
  "from def class global nonlocal lambda": y.definitionKeyword,
  import: y.moduleKeyword,
  "with as print": y.keyword,
  Boolean: y.bool,
  None: y.null,
  VariableName: y.variableName,
  "CallExpression/VariableName": y.function(y.variableName),
  "FunctionDefinition/VariableName": y.function(y.definition(y.variableName)),
  "ClassDefinition/VariableName": y.definition(y.className),
  PropertyName: y.propertyName,
  "CallExpression/MemberExpression/PropertyName": y.function(y.propertyName),
  Comment: y.lineComment,
  Number: y.number,
  String: y.string,
  FormatString: y.special(y.string),
  Escape: y.escape,
  UpdateOp: y.updateOperator,
  "ArithOp!": y.arithmeticOperator,
  BitOp: y.bitwiseOperator,
  CompareOp: y.compareOperator,
  AssignOp: y.definitionOperator,
  Ellipsis: y.punctuation,
  At: y.meta,
  "( )": y.paren,
  "[ ]": y.squareBracket,
  "{ }": y.brace,
  ".": y.derefOperator,
  ", ;": y.separator
}), B4 = { __proto__: null, await: 44, or: 54, and: 56, in: 60, not: 62, is: 64, if: 70, else: 72, lambda: 76, yield: 94, from: 96, async: 102, for: 104, None: 162, True: 164, False: 164, del: 178, pass: 182, break: 186, continue: 190, return: 194, raise: 202, import: 206, as: 208, global: 212, nonlocal: 214, assert: 218, type: 223, elif: 236, while: 240, try: 246, except: 248, finally: 250, with: 254, def: 258, class: 268, match: 279, case: 285 }, Z4 = bi.deserialize({
  version: 14,
  states: "##jO`QeOOP$}OSOOO&WQtO'#HUOOQS'#Co'#CoOOQS'#Cp'#CpO'vQdO'#CnO*UQtO'#HTOOQS'#HU'#HUOOQS'#DU'#DUOOQS'#HT'#HTO*rQdO'#D_O+VQdO'#DfO+gQdO'#DjO+zOWO'#DuO,VOWO'#DvO.[QtO'#GuOOQS'#Gu'#GuO'vQdO'#GtO0ZQtO'#GtOOQS'#Eb'#EbO0rQdO'#EcOOQS'#Gs'#GsO0|QdO'#GrOOQV'#Gr'#GrO1XQdO'#FYOOQS'#G^'#G^O1^QdO'#FXOOQV'#IS'#ISOOQV'#Gq'#GqOOQV'#Fq'#FqQ`QeOOO'vQdO'#CqO1lQdO'#C}O1sQdO'#DRO2RQdO'#HYO2cQtO'#EVO'vQdO'#EWOOQS'#EY'#EYOOQS'#E['#E[OOQS'#E^'#E^O2wQdO'#E`O3_QdO'#EdO3rQdO'#EfO3zQtO'#EfO1XQdO'#EiO0rQdO'#ElO1XQdO'#EnO0rQdO'#EtO0rQdO'#EwO4VQdO'#EyO4^QdO'#FOO4iQdO'#EzO0rQdO'#FOO1XQdO'#FQO1XQdO'#FVO4nQdO'#F[P4uOdO'#GpPOOO)CBd)CBdOOQS'#Ce'#CeOOQS'#Cf'#CfOOQS'#Cg'#CgOOQS'#Ch'#ChOOQS'#Ci'#CiOOQS'#Cj'#CjOOQS'#Cl'#ClO'vQdO,59OO'vQdO,59OO'vQdO,59OO'vQdO,59OO'vQdO,59OO'vQdO,59OO5TQdO'#DoOOQS,5:Y,5:YO5hQdO'#HdOOQS,5:],5:]O5uQ!fO,5:]O5zQtO,59YO1lQdO,59bO1lQdO,59bO1lQdO,59bO8jQdO,59bO8oQdO,59bO8vQdO,59jO8}QdO'#HTO:TQdO'#HSOOQS'#HS'#HSOOQS'#D['#D[O:lQdO,59aO'vQdO,59aO:zQdO,59aOOQS,59y,59yO;PQdO,5:RO'vQdO,5:ROOQS,5:Q,5:QO;_QdO,5:QO;dQdO,5:XO'vQdO,5:XO'vQdO,5:VOOQS,5:U,5:UO;uQdO,5:UO;zQdO,5:WOOOW'#Fy'#FyO<POWO,5:aOOQS,5:a,5:aO<[QdO'#HwOOOW'#Dw'#DwOOOW'#Fz'#FzO<lOWO,5:bOOQS,5:b,5:bOOQS'#F}'#F}O<zQtO,5:iO?lQtO,5=`O@VQ#xO,5=`O@vQtO,5=`OOQS,5:},5:}OA_QeO'#GWOBqQdO,5;^OOQV,5=^,5=^OB|QtO'#IPOCkQdO,5;tOOQS-E:[-E:[OOQV,5;s,5;sO4dQdO'#FQOOQV-E9o-E9oOCsQtO,59]OEzQtO,59iOFeQdO'#HVOFpQdO'#HVO1XQdO'#HVOF{QdO'#DTOGTQdO,59mOGYQdO'#HZO'vQdO'#HZO0rQdO,5=tOOQS,5=t,5=tO0rQdO'#EROOQS'#ES'#ESOGwQdO'#GPOHXQdO,58|OHXQdO,58|O*xQdO,5:oOHgQtO'#H]OOQS,5:r,5:rOOQS,5:z,5:zOHzQdO,5;OOI]QdO'#IOO1XQdO'#H}OOQS,5;Q,5;QOOQS'#GT'#GTOIqQtO,5;QOJPQdO,5;QOJUQdO'#IQOOQS,5;T,5;TOJdQdO'#H|OOQS,5;W,5;WOJuQdO,5;YO4iQdO,5;`O4iQdO,5;cOJ}QtO'#ITO'vQdO'#ITOKXQdO,5;eO4VQdO,5;eO0rQdO,5;jO1XQdO,5;lOK^QeO'#EuOLjQgO,5;fO!!kQdO'#IUO4iQdO,5;jO!!vQdO,5;lO!#OQdO,5;qO!#ZQtO,5;vO'vQdO,5;vPOOO,5=[,5=[P!#bOSO,5=[P!#jOdO,5=[O!&bQtO1G.jO!&iQtO1G.jO!)YQtO1G.jO!)dQtO1G.jO!+}QtO1G.jO!,bQtO1G.jO!,uQdO'#HcO!-TQtO'#GuO0rQdO'#HcO!-_QdO'#HbOOQS,5:Z,5:ZO!-gQdO,5:ZO!-lQdO'#HeO!-wQdO'#HeO!.[QdO,5>OOOQS'#Ds'#DsOOQS1G/w1G/wOOQS1G.|1G.|O!/[QtO1G.|O!/cQtO1G.|O1lQdO1G.|O!0OQdO1G/UOOQS'#DZ'#DZO0rQdO,59tOOQS1G.{1G.{O!0VQdO1G/eO!0gQdO1G/eO!0oQdO1G/fO'vQdO'#H[O!0tQdO'#H[O!0yQtO1G.{O!1ZQdO,59iO!2aQdO,5=zO!2qQdO,5=zO!2yQdO1G/mO!3OQtO1G/mOOQS1G/l1G/lO!3`QdO,5=uO!4VQdO,5=uO0rQdO1G/qO!4tQdO1G/sO!4yQtO1G/sO!5ZQtO1G/qOOQS1G/p1G/pOOQS1G/r1G/rOOOW-E9w-E9wOOQS1G/{1G/{O!5kQdO'#HxO0rQdO'#HxO!5|QdO,5>cOOOW-E9x-E9xOOQS1G/|1G/|OOQS-E9{-E9{O!6[Q#xO1G2zO!6{QtO1G2zO'vQdO,5<jOOQS,5<j,5<jOOQS-E9|-E9|OOQS,5<r,5<rOOQS-E:U-E:UOOQV1G0x1G0xO1XQdO'#GRO!7dQtO,5>kOOQS1G1`1G1`O!8RQdO1G1`OOQS'#DV'#DVO0rQdO,5=qOOQS,5=q,5=qO!8WQdO'#FrO!8cQdO,59oO!8kQdO1G/XO!8uQtO,5=uOOQS1G3`1G3`OOQS,5:m,5:mO!9fQdO'#GtOOQS,5<k,5<kOOQS-E9}-E9}O!9wQdO1G.hOOQS1G0Z1G0ZO!:VQdO,5=wO!:gQdO,5=wO0rQdO1G0jO0rQdO1G0jO!:xQdO,5>jO!;ZQdO,5>jO1XQdO,5>jO!;lQdO,5>iOOQS-E:R-E:RO!;qQdO1G0lO!;|QdO1G0lO!<RQdO,5>lO!<aQdO,5>lO!<oQdO,5>hO!=VQdO,5>hO!=hQdO'#EpO0rQdO1G0tO!=sQdO1G0tO!=xQgO1G0zO!AvQgO1G0}O!EqQdO,5>oO!E{QdO,5>oO!FTQtO,5>oO0rQdO1G1PO!F_QdO1G1PO4iQdO1G1UO!!vQdO1G1WOOQV,5;a,5;aO!FdQfO,5;aO!FiQgO1G1QO!JjQdO'#GZO4iQdO1G1QO4iQdO1G1QO!JzQdO,5>pO!KXQdO,5>pO1XQdO,5>pOOQV1G1U1G1UO!KaQdO'#FSO!KrQ!fO1G1WO!KzQdO1G1WOOQV1G1]1G1]O4iQdO1G1]O!LPQdO1G1]O!LXQdO'#F^OOQV1G1b1G1bO!#ZQtO1G1bPOOO1G2v1G2vP!L^OSO1G2vOOQS,5=},5=}OOQS'#Dp'#DpO0rQdO,5=}O!LfQdO,5=|O!LyQdO,5=|OOQS1G/u1G/uO!MRQdO,5>PO!McQdO,5>PO!MkQdO,5>PO!NOQdO,5>PO!N`QdO,5>POOQS1G3j1G3jOOQS7+$h7+$hO!8kQdO7+$pO#!RQdO1G.|O#!YQdO1G.|OOQS1G/`1G/`OOQS,5<`,5<`O'vQdO,5<`OOQS7+%P7+%PO#!aQdO7+%POOQS-E9r-E9rOOQS7+%Q7+%QO#!qQdO,5=vO'vQdO,5=vOOQS7+$g7+$gO#!vQdO7+%PO##OQdO7+%QO##TQdO1G3fOOQS7+%X7+%XO##eQdO1G3fO##mQdO7+%XOOQS,5<_,5<_O'vQdO,5<_O##rQdO1G3aOOQS-E9q-E9qO#$iQdO7+%]OOQS7+%_7+%_O#$wQdO1G3aO#%fQdO7+%_O#%kQdO1G3gO#%{QdO1G3gO#&TQdO7+%]O#&YQdO,5>dO#&sQdO,5>dO#&sQdO,5>dOOQS'#Dx'#DxO#'UO&jO'#DzO#'aO`O'#HyOOOW1G3}1G3}O#'fQdO1G3}O#'nQdO1G3}O#'yQ#xO7+(fO#(jQtO1G2UP#)TQdO'#GOOOQS,5<m,5<mOOQS-E:P-E:POOQS7+&z7+&zOOQS1G3]1G3]OOQS,5<^,5<^OOQS-E9p-E9pOOQS7+$s7+$sO#)bQdO,5=`O#){QdO,5=`O#*^QtO,5<aO#*qQdO1G3cOOQS-E9s-E9sOOQS7+&U7+&UO#+RQdO7+&UO#+aQdO,5<nO#+uQdO1G4UOOQS-E:Q-E:QO#,WQdO1G4UOOQS1G4T1G4TOOQS7+&W7+&WO#,iQdO7+&WOOQS,5<p,5<pO#,tQdO1G4WOOQS-E:S-E:SOOQS,5<l,5<lO#-SQdO1G4SOOQS-E:O-E:OO1XQdO'#EqO#-jQdO'#EqO#-uQdO'#IRO#-}QdO,5;[OOQS7+&`7+&`O0rQdO7+&`O#.SQgO7+&fO!JmQdO'#GXO4iQdO7+&fO4iQdO7+&iO#2QQtO,5<tO'vQdO,5<tO#2[QdO1G4ZOOQS-E:W-E:WO#2fQdO1G4ZO4iQdO7+&kO0rQdO7+&kOOQV7+&p7+&pO!KrQ!fO7+&rO!KzQdO7+&rO`QeO1G0{OOQV-E:X-E:XO4iQdO7+&lO4iQdO7+&lOOQV,5<u,5<uO#2nQdO,5<uO!JmQdO,5<uOOQV7+&l7+&lO#2yQgO7+&lO#6tQdO,5<vO#7PQdO1G4[OOQS-E:Y-E:YO#7^QdO1G4[O#7fQdO'#IWO#7tQdO'#IWO1XQdO'#IWOOQS'#IW'#IWO#8PQdO'#IVOOQS,5;n,5;nO#8XQdO,5;nO0rQdO'#FUOOQV7+&r7+&rO4iQdO7+&rOOQV7+&w7+&wO4iQdO7+&wO#8^QfO,5;xOOQV7+&|7+&|POOO7+(b7+(bO#8cQdO1G3iOOQS,5<c,5<cO#8qQdO1G3hOOQS-E9u-E9uO#9UQdO,5<dO#9aQdO,5<dO#9tQdO1G3kOOQS-E9v-E9vO#:UQdO1G3kO#:^QdO1G3kO#:nQdO1G3kO#:UQdO1G3kOOQS<<H[<<H[O#:yQtO1G1zOOQS<<Hk<<HkP#;WQdO'#FtO8vQdO1G3bO#;eQdO1G3bO#;jQdO<<HkOOQS<<Hl<<HlO#;zQdO7+)QOOQS<<Hs<<HsO#<[QtO1G1yP#<{QdO'#FsO#=YQdO7+)RO#=jQdO7+)RO#=rQdO<<HwO#=wQdO7+({OOQS<<Hy<<HyO#>nQdO,5<bO'vQdO,5<bOOQS-E9t-E9tOOQS<<Hw<<HwOOQS,5<g,5<gO0rQdO,5<gO#>sQdO1G4OOOQS-E9y-E9yO#?^QdO1G4OO<[QdO'#H{OOOO'#D{'#D{OOOO'#F|'#F|O#?oO&jO,5:fOOOW,5>e,5>eOOOW7+)i7+)iO#?zQdO7+)iO#@SQdO1G2zO#@mQdO1G2zP'vQdO'#FuO0rQdO<<IpO1XQdO1G2YP1XQdO'#GSO#AOQdO7+)pO#AaQdO7+)pOOQS<<Ir<<IrP1XQdO'#GUP0rQdO'#GQOOQS,5;],5;]O#ArQdO,5>mO#BQQdO,5>mOOQS1G0v1G0vOOQS<<Iz<<IzOOQV-E:V-E:VO4iQdO<<JQOOQV,5<s,5<sO4iQdO,5<sOOQV<<JQ<<JQOOQV<<JT<<JTO#BYQtO1G2`P#BdQdO'#GYO#BkQdO7+)uO#BuQgO<<JVO4iQdO<<JVOOQV<<J^<<J^O4iQdO<<J^O!KrQ!fO<<J^O#FpQgO7+&gOOQV<<JW<<JWO#FzQgO<<JWOOQV1G2a1G2aO1XQdO1G2aO#JuQdO1G2aO4iQdO<<JWO1XQdO1G2bP0rQdO'#G[O#KQQdO7+)vO#K_QdO7+)vOOQS'#FT'#FTO0rQdO,5>rO#KgQdO,5>rO#KrQdO,5>rO#K}QdO,5>qO#L`QdO,5>qOOQS1G1Y1G1YOOQS,5;p,5;pOOQV<<Jc<<JcO#LhQdO1G1dOOQS7+)T7+)TP#LmQdO'#FwO#L}QdO1G2OO#MbQdO1G2OO#MrQdO1G2OP#M}QdO'#FxO#N[QdO7+)VO#NlQdO7+)VO#NlQdO7+)VO#NtQdO7+)VO$ UQdO7+(|O8vQdO7+(|OOQSAN>VAN>VO$ oQdO<<LmOOQSAN>cAN>cO0rQdO1G1|O$!PQtO1G1|P$!ZQdO'#FvOOQS1G2R1G2RP$!hQdO'#F{O$!uQdO7+)jO$#`QdO,5>gOOOO-E9z-E9zOOOW<<MT<<MTO$#nQdO7+(fOOQSAN?[AN?[OOQS7+'t7+'tO$$XQdO<<M[OOQS,5<q,5<qO$$jQdO1G4XOOQS-E:T-E:TOOQVAN?lAN?lOOQV1G2_1G2_O4iQdOAN?qO$$xQgOAN?qOOQVAN?xAN?xO4iQdOAN?xOOQV<<JR<<JRO4iQdOAN?rO4iQdO7+'{OOQV7+'{7+'{O1XQdO7+'{OOQVAN?rAN?rOOQS7+'|7+'|O$(sQdO<<MbOOQS1G4^1G4^O0rQdO1G4^OOQS,5<w,5<wO$)QQdO1G4]OOQS-E:Z-E:ZOOQU'#G_'#G_O$)cQfO7+'OO$)nQdO'#F_O$*uQdO7+'jO$+VQdO7+'jOOQS7+'j7+'jO$+bQdO<<LqO$+rQdO<<LqO$+rQdO<<LqO$+zQdO'#H^OOQS<<Lh<<LhO$,UQdO<<LhOOQS7+'h7+'hOOQS'#D|'#D|OOOO1G4R1G4RO$,oQdO1G4RO$,wQdO1G4RP!=hQdO'#GVOOQVG25]G25]O4iQdOG25]OOQVG25dG25dOOQVG25^G25^OOQV<<Kg<<KgO4iQdO<<KgOOQS7+)x7+)xP$-SQdO'#G]OOQU-E:]-E:]OOQV<<Jj<<JjO$-vQtO'#FaOOQS'#Fc'#FcO$.WQdO'#FbO$.xQdO'#FbOOQS'#Fb'#FbO$.}QdO'#IYO$)nQdO'#FiO$)nQdO'#FiO$/fQdO'#FjO$)nQdO'#FkO$/mQdO'#IZOOQS'#IZ'#IZO$0[QdO,5;yOOQS<<KU<<KUO$0dQdO<<KUO$0tQdOANB]O$1UQdOANB]O$1^QdO'#H_OOQS'#H_'#H_O1sQdO'#DcO$1wQdO,5=xOOQSANBSANBSOOOO7+)m7+)mO$2`QdO7+)mOOQVLD*wLD*wOOQVANARANARO5uQ!fO'#GaO$2hQtO,5<SO$)nQdO'#FmOOQS,5<W,5<WOOQS'#Fd'#FdO$3YQdO,5;|O$3_QdO,5;|OOQS'#Fg'#FgO$)nQdO'#G`O$4PQdO,5<QO$4kQdO,5>tO$4{QdO,5>tO1XQdO,5<PO$5^QdO,5<TO$5cQdO,5<TO$)nQdO'#I[O$5hQdO'#I[O$5mQdO,5<UOOQS,5<V,5<VO0rQdO'#FpOOQU1G1e1G1eO4iQdO1G1eOOQSAN@pAN@pO$5rQdOG27wO$6SQdO,59}OOQS1G3d1G3dOOOO<<MX<<MXOOQS,5<{,5<{OOQS-E:_-E:_O$6XQtO'#FaO$6`QdO'#I]O$6nQdO'#I]O$6vQdO,5<XOOQS1G1h1G1hO$6{QdO1G1hO$7QQdO,5<zOOQS-E:^-E:^O$7lQdO,5=OO$8TQdO1G4`OOQS-E:b-E:bOOQS1G1k1G1kOOQS1G1o1G1oO$8eQdO,5>vO$)nQdO,5>vOOQS1G1p1G1pOOQS,5<[,5<[OOQU7+'P7+'PO$+zQdO1G/iO$)nQdO,5<YO$8sQdO,5>wO$8zQdO,5>wOOQS1G1s1G1sOOQS7+'S7+'SP$)nQdO'#GdO$9SQdO1G4bO$9^QdO1G4bO$9fQdO1G4bOOQS7+%T7+%TO$9tQdO1G1tO$:SQtO'#FaO$:ZQdO,5<}OOQS,5<},5<}O$:iQdO1G4cOOQS-E:a-E:aO$)nQdO,5<|O$:pQdO,5<|O$:uQdO7+)|OOQS-E:`-E:`O$;PQdO7+)|O$)nQdO,5<ZP$)nQdO'#GcO$;XQdO1G2hO$)nQdO1G2hP$;gQdO'#GbO$;nQdO<<MhO$;xQdO1G1uO$<WQdO7+(SO8vQdO'#C}O8vQdO,59bO8vQdO,59bO8vQdO,59bO$<fQtO,5=`O8vQdO1G.|O0rQdO1G/XO0rQdO7+$pP$<yQdO'#GOO'vQdO'#GtO$=WQdO,59bO$=]QdO,59bO$=dQdO,59mO$=iQdO1G/UO1sQdO'#DRO8vQdO,59j",
  stateData: "$>S~O%cOS%^OSSOS%]PQ~OPdOVaOfoOhYOopOs!POvqO!PrO!Q{O!T!SO!U!RO!XZO!][O!h`O!r`O!s`O!t`O!{tO!}uO#PvO#RwO#TxO#XyO#ZzO#^|O#_|O#a}O#c!OO#l!QO#o!TO#s!UO#u!VO#z!WO#}hO$P!XO%oRO%pRO%tSO%uWO&Z]O&[]O&]]O&^]O&_]O&`]O&a]O&b]O&c^O&d^O&e^O&f^O&g^O&h^O&i^O&j^O~O%]!YO~OV!aO_!aOa!bOh!iO!X!kO!f!mO%j![O%k!]O%l!^O%m!_O%n!_O%o!`O%p!`O%q!aO%r!aO%s!aO~Ok%xXl%xXm%xXn%xXo%xXp%xXs%xXz%xX{%xX!x%xX#g%xX%[%xX%_%xX%z%xXg%xX!T%xX!U%xX%{%xX!W%xX![%xX!Q%xX#[%xXt%xX!m%xX~P%SOfoOhYO!XZO!][O!h`O!r`O!s`O!t`O%oRO%pRO%tSO%uWO&Z]O&[]O&]]O&^]O&_]O&`]O&a]O&b]O&c^O&d^O&e^O&f^O&g^O&h^O&i^O&j^O~Oz%wX{%wX#g%wX%[%wX%_%wX%z%wX~Ok!pOl!qOm!oOn!oOo!rOp!sOs!tO!x%wX~P)pOV!zOg!|Oo0cOv0qO!PrO~P'vOV#OOo0cOv0qO!W#PO~P'vOV#SOa#TOo0cOv0qO![#UO~P'vOQ#XO%`#XO%a#ZO~OQ#^OR#[O%`#^O%a#`O~OV%iX_%iXa%iXh%iXk%iXl%iXm%iXn%iXo%iXp%iXs%iXz%iX!X%iX!f%iX%j%iX%k%iX%l%iX%m%iX%n%iX%o%iX%p%iX%q%iX%r%iX%s%iXg%iX!T%iX!U%iX~O&Z]O&[]O&]]O&^]O&_]O&`]O&a]O&b]O&c^O&d^O&e^O&f^O&g^O&h^O&i^O&j^O{%iX!x%iX#g%iX%[%iX%_%iX%z%iX%{%iX!W%iX![%iX!Q%iX#[%iXt%iX!m%iX~P,eOz#dO{%hX!x%hX#g%hX%[%hX%_%hX%z%hX~Oo0cOv0qO~P'vO#g#gO%[#iO%_#iO~O%uWO~O!T#nO#u!VO#z!WO#}hO~OopO~P'vOV#sOa#tO%uWO{wP~OV#xOo0cOv0qO!Q#yO~P'vO{#{O!x$QO%z#|O#g!yX%[!yX%_!yX~OV#xOo0cOv0qO#g#SX%[#SX%_#SX~P'vOo0cOv0qO#g#WX%[#WX%_#WX~P'vOh$WO%uWO~O!f$YO!r$YO%uWO~OV$eO~P'vO!U$gO#s$hO#u$iO~O{$jO~OV$qO~P'vOS$sO%[$rO%_$rO%c$tO~OV$}Oa$}Og%POo0cOv0qO~P'vOo0cOv0qO{%SO~P'vO&Y%UO~Oa!bOh!iO!X!kO!f!mOVba_bakbalbambanbaobapbasbazba{ba!xba#gba%[ba%_ba%jba%kba%lba%mba%nba%oba%pba%qba%rba%sba%zbagba!Tba!Uba%{ba!Wba![ba!Qba#[batba!mba~On%ZO~Oo%ZO~P'vOo0cO~P'vOk0eOl0fOm0dOn0dOo0mOp0nOs0rOg%wX!T%wX!U%wX%{%wX!W%wX![%wX!Q%wX#[%wX!m%wX~P)pO%{%]Og%vXz%vX!T%vX!U%vX!W%vX{%vX~Og%_Oz%`O!T%dO!U%cO~Og%_O~Oz%gO!T%dO!U%cO!W&SX~O!W%kO~Oz%lO{%nO!T%dO!U%cO![%}X~O![%rO~O![%sO~OQ#XO%`#XO%a%uO~OV%wOo0cOv0qO!PrO~P'vOQ#^OR#[O%`#^O%a%zO~OV!qa_!qaa!qah!qak!qal!qam!qan!qao!qap!qas!qaz!qa{!qa!X!qa!f!qa!x!qa#g!qa%[!qa%_!qa%j!qa%k!qa%l!qa%m!qa%n!qa%o!qa%p!qa%q!qa%r!qa%s!qa%z!qag!qa!T!qa!U!qa%{!qa!W!qa![!qa!Q!qa#[!qat!qa!m!qa~P#yOz%|O{%ha!x%ha#g%ha%[%ha%_%ha%z%ha~P%SOV&OOopOvqO{%ha!x%ha#g%ha%[%ha%_%ha%z%ha~P'vOz%|O{%ha!x%ha#g%ha%[%ha%_%ha%z%ha~OPdOVaOopOvqO!PrO!Q{O!{tO!}uO#PvO#RwO#TxO#XyO#ZzO#^|O#_|O#a}O#c!OO#g$zX%[$zX%_$zX~P'vO#g#gO%[&TO%_&TO~O!f&UOh&sX%[&sXz&sX#[&sX#g&sX%_&sX#Z&sXg&sX~Oh!iO%[&WO~Okealeameaneaoeapeaseazea{ea!xea#gea%[ea%_ea%zeagea!Tea!Uea%{ea!Wea![ea!Qea#[eatea!mea~P%SOsqazqa{qa#gqa%[qa%_qa%zqa~Ok!pOl!qOm!oOn!oOo!rOp!sO!xqa~PEcO%z&YOz%yX{%yX~O%uWOz%yX{%yX~Oz&]O{wX~O{&_O~Oz%lO#g%}X%[%}X%_%}Xg%}X{%}X![%}X!m%}X%z%}X~OV0lOo0cOv0qO!PrO~P'vO%z#|O#gUa%[Ua%_Ua~Oz&hO#g&PX%[&PX%_&PXn&PX~P%SOz&kO!Q&jO#g#Wa%[#Wa%_#Wa~Oz&lO#[&nO#g&rX%[&rX%_&rXg&rX~O!f$YO!r$YO#Z&qO%uWO~O#Z&qO~Oz&sO#g&tX%[&tX%_&tX~Oz&uO#g&pX%[&pX%_&pX{&pX~O!X&wO%z&xO~Oz&|On&wX~P%SOn'PO~OPdOVaOopOvqO!PrO!Q{O!{tO!}uO#PvO#RwO#TxO#XyO#ZzO#^|O#_|O#a}O#c!OO%['UO~P'vOt'YO#p'WO#q'XOP#naV#naf#nah#nao#nas#nav#na!P#na!Q#na!T#na!U#na!X#na!]#na!h#na!r#na!s#na!t#na!{#na!}#na#P#na#R#na#T#na#X#na#Z#na#^#na#_#na#a#na#c#na#l#na#o#na#s#na#u#na#z#na#}#na$P#na%X#na%o#na%p#na%t#na%u#na&Z#na&[#na&]#na&^#na&_#na&`#na&a#na&b#na&c#na&d#na&e#na&f#na&g#na&h#na&i#na&j#na%Z#na%_#na~Oz'ZO#[']O{&xX~Oh'_O!X&wO~Oh!iO{$jO!X&wO~O{'eO~P%SO%['hO%_'hO~OS'iO%['hO%_'hO~OV!aO_!aOa!bOh!iO!X!kO!f!mO%l!^O%m!_O%n!_O%o!`O%p!`O%q!aO%r!aO%s!aOkWilWimWinWioWipWisWizWi{Wi!xWi#gWi%[Wi%_Wi%jWi%zWigWi!TWi!UWi%{Wi!WWi![Wi!QWi#[WitWi!mWi~O%k!]O~P!#uO%kWi~P!#uOV!aO_!aOa!bOh!iO!X!kO!f!mO%o!`O%p!`O%q!aO%r!aO%s!aOkWilWimWinWioWipWisWizWi{Wi!xWi#gWi%[Wi%_Wi%jWi%kWi%lWi%zWigWi!TWi!UWi%{Wi!WWi![Wi!QWi#[WitWi!mWi~O%m!_O%n!_O~P!&pO%mWi%nWi~P!&pOa!bOh!iO!X!kO!f!mOkWilWimWinWioWipWisWizWi{Wi!xWi#gWi%[Wi%_Wi%jWi%kWi%lWi%mWi%nWi%oWi%pWi%zWigWi!TWi!UWi%{Wi!WWi![Wi!QWi#[WitWi!mWi~OV!aO_!aO%q!aO%r!aO%s!aO~P!)nOVWi_Wi%qWi%rWi%sWi~P!)nO!T%dO!U%cOg&VXz&VX~O%z'kO%{'kO~P,eOz'mOg&UX~Og'oO~Oz'pO{'rO!W&XX~Oo0cOv0qOz'pO{'sO!W&XX~P'vO!W'uO~Om!oOn!oOo!rOp!sOkjisjizji{ji!xji#gji%[ji%_ji%zji~Ol!qO~P!.aOlji~P!.aOk0eOl0fOm0dOn0dOo0mOp0nO~Ot'wO~P!/jOV'|Og'}Oo0cOv0qO~P'vOg'}Oz(OO~Og(QO~O!U(SO~Og(TOz(OO!T%dO!U%cO~P%SOk0eOl0fOm0dOn0dOo0mOp0nOgqa!Tqa!Uqa%{qa!Wqa![qa!Qqa#[qatqa!mqa~PEcOV'|Oo0cOv0qO!W&Sa~P'vOz(WO!W&Sa~O!W(XO~Oz(WO!T%dO!U%cO!W&Sa~P%SOV(]Oo0cOv0qO![%}a#g%}a%[%}a%_%}ag%}a{%}a!m%}a%z%}a~P'vOz(^O![%}a#g%}a%[%}a%_%}ag%}a{%}a!m%}a%z%}a~O![(aO~Oz(^O!T%dO!U%cO![%}a~P%SOz(dO!T%dO!U%cO![&Ta~P%SOz(gO{&lX![&lX!m&lX%z&lX~O{(kO![(mO!m(nO%z(jO~OV&OOopOvqO{%hi!x%hi#g%hi%[%hi%_%hi%z%hi~P'vOz(pO{%hi!x%hi#g%hi%[%hi%_%hi%z%hi~O!f&UOh&sa%[&saz&sa#[&sa#g&sa%_&sa#Z&sag&sa~O%[(uO~OV#sOa#tO%uWO~Oz&]O{wa~OopOvqO~P'vOz(^O#g%}a%[%}a%_%}ag%}a{%}a![%}a!m%}a%z%}a~P%SOz(zO#g%hX%[%hX%_%hX%z%hX~O%z#|O#gUi%[Ui%_Ui~O#g&Pa%[&Pa%_&Pan&Pa~P'vOz(}O#g&Pa%[&Pa%_&Pan&Pa~O%uWO#g&ra%[&ra%_&rag&ra~Oz)SO#g&ra%[&ra%_&rag&ra~Og)VO~OV)WOh$WO%uWO~O#Z)XO~O%uWO#g&ta%[&ta%_&ta~Oz)ZO#g&ta%[&ta%_&ta~Oo0cOv0qO#g&pa%[&pa%_&pa{&pa~P'vOz)^O#g&pa%[&pa%_&pa{&pa~OV)`Oa)`O%uWO~O%z)eO~Ot)hO#j)gOP#hiV#hif#hih#hio#his#hiv#hi!P#hi!Q#hi!T#hi!U#hi!X#hi!]#hi!h#hi!r#hi!s#hi!t#hi!{#hi!}#hi#P#hi#R#hi#T#hi#X#hi#Z#hi#^#hi#_#hi#a#hi#c#hi#l#hi#o#hi#s#hi#u#hi#z#hi#}#hi$P#hi%X#hi%o#hi%p#hi%t#hi%u#hi&Z#hi&[#hi&]#hi&^#hi&_#hi&`#hi&a#hi&b#hi&c#hi&d#hi&e#hi&f#hi&g#hi&h#hi&i#hi&j#hi%Z#hi%_#hi~Ot)iOP#kiV#kif#kih#kio#kis#kiv#ki!P#ki!Q#ki!T#ki!U#ki!X#ki!]#ki!h#ki!r#ki!s#ki!t#ki!{#ki!}#ki#P#ki#R#ki#T#ki#X#ki#Z#ki#^#ki#_#ki#a#ki#c#ki#l#ki#o#ki#s#ki#u#ki#z#ki#}#ki$P#ki%X#ki%o#ki%p#ki%t#ki%u#ki&Z#ki&[#ki&]#ki&^#ki&_#ki&`#ki&a#ki&b#ki&c#ki&d#ki&e#ki&f#ki&g#ki&h#ki&i#ki&j#ki%Z#ki%_#ki~OV)kOn&wa~P'vOz)lOn&wa~Oz)lOn&wa~P%SOn)pO~O%Y)tO~Ot)wO#p'WO#q)vOP#niV#nif#nih#nio#nis#niv#ni!P#ni!Q#ni!T#ni!U#ni!X#ni!]#ni!h#ni!r#ni!s#ni!t#ni!{#ni!}#ni#P#ni#R#ni#T#ni#X#ni#Z#ni#^#ni#_#ni#a#ni#c#ni#l#ni#o#ni#s#ni#u#ni#z#ni#}#ni$P#ni%X#ni%o#ni%p#ni%t#ni%u#ni&Z#ni&[#ni&]#ni&^#ni&_#ni&`#ni&a#ni&b#ni&c#ni&d#ni&e#ni&f#ni&g#ni&h#ni&i#ni&j#ni%Z#ni%_#ni~OV)zOo0cOv0qO{$jO~P'vOo0cOv0qO{&xa~P'vOz*OO{&xa~OV*SOa*TOg*WO%q*UO%uWO~O{$jO&{*YO~Oh'_O~Oh!iO{$jO~O%[*_O~O%[*aO%_*aO~OV$}Oa$}Oo0cOv0qOg&Ua~P'vOz*dOg&Ua~Oo0cOv0qO{*gO!W&Xa~P'vOz*hO!W&Xa~Oo0cOv0qOz*hO{*kO!W&Xa~P'vOo0cOv0qOz*hO!W&Xa~P'vOz*hO{*kO!W&Xa~Om0dOn0dOo0mOp0nOgjikjisjizji!Tji!Uji%{ji!Wji{ji![ji#gji%[ji%_ji!Qji#[jitji!mji%zji~Ol0fO~P!NkOlji~P!NkOV'|Og*pOo0cOv0qO~P'vOn*rO~Og*pOz*tO~Og*uO~OV'|Oo0cOv0qO!W&Si~P'vOz*vO!W&Si~O!W*wO~OV(]Oo0cOv0qO![%}i#g%}i%[%}i%_%}ig%}i{%}i!m%}i%z%}i~P'vOz*zO!T%dO!U%cO![&Ti~Oz*}O![%}i#g%}i%[%}i%_%}ig%}i{%}i!m%}i%z%}i~O![+OO~Oa+QOo0cOv0qO![&Ti~P'vOz*zO![&Ti~O![+SO~OV+UOo0cOv0qO{&la![&la!m&la%z&la~P'vOz+VO{&la![&la!m&la%z&la~O!]+YO&n+[O![!nX~O![+^O~O{(kO![+_O~O{(kO![+_O!m+`O~OV&OOopOvqO{%hq!x%hq#g%hq%[%hq%_%hq%z%hq~P'vOz$ri{$ri!x$ri#g$ri%[$ri%_$ri%z$ri~P%SOV&OOopOvqO~P'vOV&OOo0cOv0qO#g%ha%[%ha%_%ha%z%ha~P'vOz+aO#g%ha%[%ha%_%ha%z%ha~Oz$ia#g$ia%[$ia%_$ian$ia~P%SO#g&Pi%[&Pi%_&Pin&Pi~P'vOz+dO#g#Wq%[#Wq%_#Wq~O#[+eOz$va#g$va%[$va%_$vag$va~O%uWO#g&ri%[&ri%_&rig&ri~Oz+gO#g&ri%[&ri%_&rig&ri~OV+iOh$WO%uWO~O%uWO#g&ti%[&ti%_&ti~Oo0cOv0qO#g&pi%[&pi%_&pi{&pi~P'vO{#{Oz#eX!W#eX~Oz+mO!W&uX~O!W+oO~Ot+rO#j)gOP#hqV#hqf#hqh#hqo#hqs#hqv#hq!P#hq!Q#hq!T#hq!U#hq!X#hq!]#hq!h#hq!r#hq!s#hq!t#hq!{#hq!}#hq#P#hq#R#hq#T#hq#X#hq#Z#hq#^#hq#_#hq#a#hq#c#hq#l#hq#o#hq#s#hq#u#hq#z#hq#}#hq$P#hq%X#hq%o#hq%p#hq%t#hq%u#hq&Z#hq&[#hq&]#hq&^#hq&_#hq&`#hq&a#hq&b#hq&c#hq&d#hq&e#hq&f#hq&g#hq&h#hq&i#hq&j#hq%Z#hq%_#hq~On$|az$|a~P%SOV)kOn&wi~P'vOz+yOn&wi~Oz,TO{$jO#[,TO~O#q,VOP#nqV#nqf#nqh#nqo#nqs#nqv#nq!P#nq!Q#nq!T#nq!U#nq!X#nq!]#nq!h#nq!r#nq!s#nq!t#nq!{#nq!}#nq#P#nq#R#nq#T#nq#X#nq#Z#nq#^#nq#_#nq#a#nq#c#nq#l#nq#o#nq#s#nq#u#nq#z#nq#}#nq$P#nq%X#nq%o#nq%p#nq%t#nq%u#nq&Z#nq&[#nq&]#nq&^#nq&_#nq&`#nq&a#nq&b#nq&c#nq&d#nq&e#nq&f#nq&g#nq&h#nq&i#nq&j#nq%Z#nq%_#nq~O#[,WOz%Oa{%Oa~Oo0cOv0qO{&xi~P'vOz,YO{&xi~O{#{O%z,[Og&zXz&zX~O%uWOg&zXz&zX~Oz,`Og&yX~Og,bO~O%Y,eO~O!T%dO!U%cOg&Viz&Vi~OV$}Oa$}Oo0cOv0qOg&Ui~P'vO{,hOz$la!W$la~Oo0cOv0qO{,iOz$la!W$la~P'vOo0cOv0qO{*gO!W&Xi~P'vOz,lO!W&Xi~Oo0cOv0qOz,lO!W&Xi~P'vOz,lO{,oO!W&Xi~Og$hiz$hi!W$hi~P%SOV'|Oo0cOv0qO~P'vOn,qO~OV'|Og,rOo0cOv0qO~P'vOV'|Oo0cOv0qO!W&Sq~P'vOz$gi![$gi#g$gi%[$gi%_$gig$gi{$gi!m$gi%z$gi~P%SOV(]Oo0cOv0qO~P'vOa+QOo0cOv0qO![&Tq~P'vOz,sO![&Tq~O![,tO~OV(]Oo0cOv0qO![%}q#g%}q%[%}q%_%}qg%}q{%}q!m%}q%z%}q~P'vO{,uO~OV+UOo0cOv0qO{&li![&li!m&li%z&li~P'vOz,zO{&li![&li!m&li%z&li~O!]+YO&n+[O![!na~O{(kO![,}O~OV&OOo0cOv0qO#g%hi%[%hi%_%hi%z%hi~P'vOz-OO#g%hi%[%hi%_%hi%z%hi~O%uWO#g&rq%[&rq%_&rqg&rq~Oz-RO#g&rq%[&rq%_&rqg&rq~OV)`Oa)`O%uWO!W&ua~Oz-TO!W&ua~On$|iz$|i~P%SOV)kO~P'vOV)kOn&wq~P'vOt-XOP#myV#myf#myh#myo#mys#myv#my!P#my!Q#my!T#my!U#my!X#my!]#my!h#my!r#my!s#my!t#my!{#my!}#my#P#my#R#my#T#my#X#my#Z#my#^#my#_#my#a#my#c#my#l#my#o#my#s#my#u#my#z#my#}#my$P#my%X#my%o#my%p#my%t#my%u#my&Z#my&[#my&]#my&^#my&_#my&`#my&a#my&b#my&c#my&d#my&e#my&f#my&g#my&h#my&i#my&j#my%Z#my%_#my~O%Z-]O%_-]O~P`O#q-^OP#nyV#nyf#nyh#nyo#nys#nyv#ny!P#ny!Q#ny!T#ny!U#ny!X#ny!]#ny!h#ny!r#ny!s#ny!t#ny!{#ny!}#ny#P#ny#R#ny#T#ny#X#ny#Z#ny#^#ny#_#ny#a#ny#c#ny#l#ny#o#ny#s#ny#u#ny#z#ny#}#ny$P#ny%X#ny%o#ny%p#ny%t#ny%u#ny&Z#ny&[#ny&]#ny&^#ny&_#ny&`#ny&a#ny&b#ny&c#ny&d#ny&e#ny&f#ny&g#ny&h#ny&i#ny&j#ny%Z#ny%_#ny~Oz-aO{$jO#[-aO~Oo0cOv0qO{&xq~P'vOz-dO{&xq~O%z,[Og&zaz&za~O{#{Og&zaz&za~OV*SOa*TO%q*UO%uWOg&ya~Oz-hOg&ya~O$S-lO~OV$}Oa$}Oo0cOv0qO~P'vOo0cOv0qO{-mOz$li!W$li~P'vOo0cOv0qOz$li!W$li~P'vO{-mOz$li!W$li~Oo0cOv0qO{*gO~P'vOo0cOv0qO{*gO!W&Xq~P'vOz-pO!W&Xq~Oo0cOv0qOz-pO!W&Xq~P'vOs-sO!T%dO!U%cOg&Oq!W&Oq![&Oqz&Oq~P!/jOa+QOo0cOv0qO![&Ty~P'vOz$ji![$ji~P%SOa+QOo0cOv0qO~P'vOV+UOo0cOv0qO~P'vOV+UOo0cOv0qO{&lq![&lq!m&lq%z&lq~P'vO{(kO![-xO!m-yO%z-wO~OV&OOo0cOv0qO#g%hq%[%hq%_%hq%z%hq~P'vO%uWO#g&ry%[&ry%_&ryg&ry~OV)`Oa)`O%uWO!W&ui~Ot-}OP#m!RV#m!Rf#m!Rh#m!Ro#m!Rs#m!Rv#m!R!P#m!R!Q#m!R!T#m!R!U#m!R!X#m!R!]#m!R!h#m!R!r#m!R!s#m!R!t#m!R!{#m!R!}#m!R#P#m!R#R#m!R#T#m!R#X#m!R#Z#m!R#^#m!R#_#m!R#a#m!R#c#m!R#l#m!R#o#m!R#s#m!R#u#m!R#z#m!R#}#m!R$P#m!R%X#m!R%o#m!R%p#m!R%t#m!R%u#m!R&Z#m!R&[#m!R&]#m!R&^#m!R&_#m!R&`#m!R&a#m!R&b#m!R&c#m!R&d#m!R&e#m!R&f#m!R&g#m!R&h#m!R&i#m!R&j#m!R%Z#m!R%_#m!R~Oo0cOv0qO{&xy~P'vOV*SOa*TO%q*UO%uWOg&yi~O$S-lO%Z.VO%_.VO~OV.aOh._O!X.^O!].`O!h.YO!s.[O!t.[O%p.XO%uWO&Z]O&[]O&]]O&^]O&_]O&`]O&a]O&b]O~Oo0cOv0qOz$lq!W$lq~P'vO{.fOz$lq!W$lq~Oo0cOv0qO{*gO!W&Xy~P'vOz.gO!W&Xy~Oo0cOv.kO~P'vOs-sO!T%dO!U%cOg&Oy!W&Oy![&Oyz&Oy~P!/jO{(kO![.nO~O{(kO![.nO!m.oO~OV*SOa*TO%q*UO%uWO~Oh.tO!f.rOz$TX#[$TX%j$TXg$TX~Os$TX{$TX!W$TX![$TX~P$-bO%o.vO%p.vOs$UXz$UX{$UX#[$UX%j$UX!W$UXg$UX![$UX~O!h.xO~Oz.|O#[/OO%j.yOs&|X{&|X!W&|Xg&|X~Oa/RO~P$)zOh.tOs&}Xz&}X{&}X#[&}X%j&}X!W&}Xg&}X![&}X~Os/VO{$jO~Oo0cOv0qOz$ly!W$ly~P'vOo0cOv0qO{*gO!W&X!R~P'vOz/ZO!W&X!R~Og&RXs&RX!T&RX!U&RX!W&RX![&RXz&RX~P!/jOs-sO!T%dO!U%cOg&Qa!W&Qa![&Qaz&Qa~O{(kO![/^O~O!f.rOh$[as$[az$[a{$[a#[$[a%j$[a!W$[ag$[a![$[a~O!h/eO~O%o.vO%p.vOs$Uaz$Ua{$Ua#[$Ua%j$Ua!W$Uag$Ua![$Ua~O%j.yOs$Yaz$Ya{$Ya#[$Ya!W$Yag$Ya![$Ya~Os&|a{&|a!W&|ag&|a~P$)nOz/jOs&|a{&|a!W&|ag&|a~O!W/mO~Og/mO~O{/oO~O![/pO~Oo0cOv0qO{*gO!W&X!Z~P'vO{/sO~O%z/tO~P$-bOz/uO#[/OO%j.yOg'PX~Oz/uOg'PX~Og/wO~O!h/xO~O#[/OOs%Saz%Sa{%Sa%j%Sa!W%Sag%Sa![%Sa~O#[/OO%j.yOs%Waz%Wa{%Wa!W%Wag%Wa~Os&|i{&|i!W&|ig&|i~P$)nOz/zO#[/OO%j.yO!['Oa~Og'Pa~P$)nOz0SOg'Pa~Oa0UO!['Oi~P$)zOz0WO!['Oi~Oz0WO#[/OO%j.yO!['Oi~O#[/OO%j.yOg$biz$bi~O%z0ZO~P$-bO#[/OO%j.yOg%Vaz%Va~Og'Pi~P$)nO{0^O~Oa0UO!['Oq~P$)zOz0`O!['Oq~O#[/OO%j.yOz%Ui![%Ui~Oa0UO~P$)zOa0UO!['Oy~P$)zO#[/OO%j.yOg$ciz$ci~O#[/OO%j.yOz%Uq![%Uq~Oz+aO#g%ha%[%ha%_%ha%z%ha~P%SOV&OOo0cOv0qO~P'vOn0hO~Oo0hO~P'vO{0iO~Ot0jO~P!/jO&]&Z&j&h&i&g&f&d&e&c&b&`&a&_&^&[%u~",
  goto: "!=j'QPPPPPP'RP'Z*s+[+t,_,y-fP.SP'Z.r.r'ZPPP'Z2[PPPPPP2[5PPP5PP7b7k=sPP=v>h>kPP'Z'ZPP>zPP'Z'ZPP'Z'Z'Z'Z'Z?O?w'ZP?zP@QDXGuGyPG|HWH['ZPPPH_Hk'RP'R'RP'RP'RP'RP'RP'R'R'RP'RPP'RPP'RP'RPHqH}IVPI^IdPI^PI^I^PPPI^PKrPK{LVL]KrPI^LfPI^PLmLsPLwM]MzNeLwLwNkNxLwLwLwLw! ^! d! g! l! o! y!!P!!]!!o!!u!#P!#V!#s!#y!$P!$Z!$a!$g!$y!%T!%Z!%a!%k!%q!%w!%}!&T!&Z!&e!&k!&u!&{!'U!'[!'k!'s!'}!(UPPPPPPPPPPP!([!(_!(e!(n!(x!)TPPPPPPPPPPPP!-u!/Z!3^!6oPP!6w!7W!7a!8Y!8P!8c!8i!8l!8o!8r!8z!9jPPPPPPPPPPPPPPPPP!9m!9q!9wP!:]!:a!:m!:v!;S!;j!;m!;p!;v!;|!<S!<VP!<_!<h!=d!=g]eOn#g$j)t,P'}`OTYZ[adnoprtxy}!P!Q!R!U!X!c!d!e!f!g!h!i!k!o!p!q!s!t!z#O#S#T#[#d#g#x#y#{#}$Q$e$g$h$j$q$}%S%Z%^%`%c%g%l%n%w%|&O&Z&_&h&j&k&u&x&|'P'W'Z'l'm'p'r's'w'|(O(S(W(](^(d(g(p(r(z(})^)e)g)k)l)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+Q+U+V+Y+a+c+d+k+x+y,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0l0n0r{!cQ#c#p$R$d$p%e%j%p%q&`'O'g(q(|)j*o*x+w,v0g}!dQ#c#p$R$d$p$u%e%j%p%q&`'O'g(q(|)j*o*x+w,v0g!P!eQ#c#p$R$d$p$u$v%e%j%p%q&`'O'g(q(|)j*o*x+w,v0g!R!fQ#c#p$R$d$p$u$v$w%e%j%p%q&`'O'g(q(|)j*o*x+w,v0g!T!gQ#c#p$R$d$p$u$v$w$x%e%j%p%q&`'O'g(q(|)j*o*x+w,v0g!V!hQ#c#p$R$d$p$u$v$w$x$y%e%j%p%q&`'O'g(q(|)j*o*x+w,v0g!Z!hQ!n#c#p$R$d$p$u$v$w$x$y$z%e%j%p%q&`'O'g(q(|)j*o*x+w,v0g'}TOTYZ[adnoprtxy}!P!Q!R!U!X!c!d!e!f!g!h!i!k!o!p!q!s!t!z#O#S#T#[#d#g#x#y#{#}$Q$e$g$h$j$q$}%S%Z%^%`%c%g%l%n%w%|&O&Z&_&h&j&k&u&x&|'P'W'Z'l'm'p'r's'w'|(O(S(W(](^(d(g(p(r(z(})^)e)g)k)l)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+Q+U+V+Y+a+c+d+k+x+y,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0l0n0r&eVOYZ[dnprxy}!P!Q!U!i!k!o!p!q!s!t#[#d#g#y#{#}$Q$h$j$}%S%Z%^%`%g%l%n%w%|&Z&_&j&k&u&x'P'W'Z'l'm'p'r's'w(O(W(^(d(g(p(r(z)^)e)g)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+U+V+Y+a+d+k,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0n0r%oXOYZ[dnrxy}!P!Q!U!i!k#[#d#g#y#{#}$Q$h$j$}%S%^%`%g%l%n%w%|&Z&_&j&k&u&x'P'W'Z'l'm'p'r's'w(O(W(^(d(g(p(r(z)^)e)g)p)t)z*O*Y*d*g*h*k*q*t*v*y*z*}+U+V+Y+a+d+k,P,X,Y,],g,h,i,k,l,o,s,u,w,y,z-O-d-f-m-p.f.g/V/Z0i0j0kQ#vqQ/[.kR0o0q't`OTYZ[adnoprtxy}!P!Q!R!U!X!c!d!e!f!g!h!k!o!p!q!s!t!z#O#S#T#[#d#g#x#y#{#}$Q$e$g$h$j$q$}%S%Z%^%`%c%g%l%n%w%|&O&Z&_&h&j&k&u&x&|'P'W'Z'l'p'r's'w'|(O(S(W(](^(d(g(p(r(z(})^)e)g)k)l)p)t)z*O*Y*g*h*k*q*r*t*v*y*z*}+Q+U+V+Y+a+c+d+k+x+y,P,X,Y,],h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0l0n0rh#jhz{$W$Z&l&q)S)X+f+g-RW#rq&].k0qQ$]|Q$a!OQ$n!VQ$o!WW$|!i'm*d,gS&[#s#tQ'S$iQ(s&UQ)U&nU)Y&s)Z+jW)a&w+m-T-{Q*Q']W*R'_,`-h.TQ+l)`S,_*S*TQ-Q+eQ-_,TQ-c,WQ.R-al.W-l.^._.a.z.|/R/j/o/t/y0U0Z0^Q/S.`Q/a.tQ/l/OU0P/u0S0[X0V/z0W0_0`R&Z#r!_!wYZ!P!Q!k%S%`%g'p'r's(O(W)g*g*h*k*q*t*v,h,i,k,l,o-m-p.f.g/ZR%^!vQ!{YQ%x#[Q&d#}Q&g$QR,{+YT.j-s/s!Y!jQ!n#c#p$R$d$p$u$v$w$x$y$z%e%j%p%q&`'O'g(q(|)j*o*x+w,v0gQ&X#kQ'c$oR*^'dR'l$|Q%V!mR/_.r'|_OTYZ[adnoprtxy}!P!Q!R!U!X!c!d!e!f!g!h!i!k!o!p!q!s!t!z#O#S#T#[#d#g#x#y#{#}$Q$e$g$h$j$q$}%S%Z%^%`%c%g%l%n%w%|&O&Z&_&h&j&k&u&x&|'P'W'Z'l'm'p'r's'w'|(O(S(W(](^(d(g(p(r(z(})^)e)g)k)l)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+Q+U+V+Y+a+c+d+k+x+y,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0l0n0rS#a_#b!P.[-l.^._.`.a.t.z.|/R/j/o/t/u/y/z0S0U0W0Z0[0^0_0`'|_OTYZ[adnoprtxy}!P!Q!R!U!X!c!d!e!f!g!h!i!k!o!p!q!s!t!z#O#S#T#[#d#g#x#y#{#}$Q$e$g$h$j$q$}%S%Z%^%`%c%g%l%n%w%|&O&Z&_&h&j&k&u&x&|'P'W'Z'l'm'p'r's'w'|(O(S(W(](^(d(g(p(r(z(})^)e)g)k)l)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+Q+U+V+Y+a+c+d+k+x+y,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0l0n0rT#a_#bT#^^#_R(o%xa(l%x(n(o+`,{-y-z.oT+[(k+]R-z,{Q$PsQ+l)aQ,^*RR-e,_X#}s$O$P&fQ&y$aQ'a$nQ'd$oR)s'SQ)b&wV-S+m-T-{ZgOn$j)t,PXkOn)t,PQ$k!TQ&z$bQ&{$cQ'^$mQ'b$oQ)q'RQ)x'WQ){'XQ)|'YQ*Z'`S*]'c'dQ+s)gQ+u)hQ+v)iQ+z)oS+|)r*[Q,Q)vQ,R)wS,S)y)zQ,d*^Q-V+rQ-W+tQ-Y+{S-Z+},OQ-`,UQ-b,VQ-|-XQ.O-[Q.P-^Q.Q-_Q.p-}Q.q.RQ/W.dR/r/XWkOn)t,PR#mjQ'`$nS)r'S'aR,O)sQ,]*RR-f,^Q*['`Q+})rR-[,OZiOjn)t,PQ'f$pR*`'gT-j,e-ku.c-l.^._.a.t.z.|/R/j/o/t/u/y0S0U0Z0[0^t.c-l.^._.a.t.z.|/R/j/o/t/u/y0S0U0Z0[0^Q/S.`X0V/z0W0_0`!P.Z-l.^._.`.a.t.z.|/R/j/o/t/u/y/z0S0U0W0Z0[0^0_0`Q.w.YR/f.xg.z.].{/b/i/n/|0O0Q0]0a0bu.b-l.^._.a.t.z.|/R/j/o/t/u/y0S0U0Z0[0^X.u.W.b/a0PR/c.tV0R/u0S0[R/X.dQnOS#on,PR,P)tQ&^#uR(x&^S%m#R#wS(_%m(bT(b%p&`Q%a!yQ%h!}W(P%a%h(U(YQ(U%eR(Y%jQ&i$RR)O&iQ(e%qQ*{(`T+R(e*{Q'n%OR*e'nS'q%R%SY*i'q*j,m-q.hU*j'r's'tU,m*k*l*mS-q,n,oR.h-rQ#Y]R%t#YQ#_^R%y#_Q(h%vS+W(h+XR+X(iQ+](kR,|+]Q#b_R%{#bQ#ebQ%}#cW&Q#e%}({+bQ({&cR+b0gQ$OsS&e$O&fR&f$PQ&v$_R)_&vQ&V#jR(t&VQ&m$VS)T&m+hR+h)UQ$Z{R&p$ZQ&t$]R)[&tQ+n)bR-U+nQ#hfR&S#hQ)f&zR+q)fQ&}$dS)m&})nR)n'OQ'V$kR)u'VQ'[$lS*P'[,ZR,Z*QQ,a*VR-i,aWjOn)t,PR#ljQ-k,eR.U-kd.{.]/b/i/n/|0O0Q0]0a0bR/h.{U.s.W/a0PR/`.sQ/{/nS0X/{0YR0Y/|S/v/b/cR0T/vQ.}.]R/k.}R!ZPXmOn)t,PWlOn)t,PR'T$jYfOn$j)t,PR&R#g[sOn#g$j)t,PR&d#}&dQOYZ[dnprxy}!P!Q!U!i!k!o!p!q!s!t#[#d#g#y#{#}$Q$h$j$}%S%Z%^%`%g%l%n%w%|&Z&_&j&k&u&x'P'W'Z'l'm'p'r's'w(O(W(^(d(g(p(r(z)^)e)g)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+U+V+Y+a+d+k,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0n0rQ!nTQ#caQ#poU$Rt%c(SS$d!R$gQ$p!XQ$u!cQ$v!dQ$w!eQ$x!fQ$y!gQ$z!hQ%e!zQ%j#OQ%p#SQ%q#TQ&`#xQ'O$eQ'g$qQ(q&OU(|&h(}+cW)j&|)l+x+yQ*o'|Q*x(]Q+w)kQ,v+QR0g0lQ!yYQ!}ZQ$b!PQ$c!QQ%R!kQ't%S^'{%`%g(O(W*q*t*v^*f'p*h,k,l-p.g/ZQ*l'rQ*m'sQ+t)gQ,j*gQ,n*kQ-n,hQ-o,iQ-r,oQ.e-mR/Y.f[bOn#g$j)t,P!^!vYZ!P!Q!k%S%`%g'p'r's(O(W)g*g*h*k*q*t*v,h,i,k,l,o-m-p.f.g/ZQ#R[Q#fdS#wrxQ$UyW$_}$Q'P)pS$l!U$hW${!i'm*d,gS%v#[+Y`&P#d%|(p(r(z+a-O0kQ&a#yQ&b#{Q&c#}Q'j$}Q'z%^W([%l(^*y*}Q(`%nQ(i%wQ(v&ZS(y&_0iQ)P&jQ)Q&kU)]&u)^+kQ)d&xQ)y'WY)}'Z*O,X,Y-dQ*b'lS*n'w0jW+P(d*z,s,wW+T(g+V,y,zQ+p)eQ,U)zQ,c*YQ,x+UQ-P+dQ-e,]Q-v,uQ.S-fR/q/VhUOn#d#g$j%|&_'w(p(r)t,P%U!uYZ[drxy}!P!Q!U!i!k#[#y#{#}$Q$h$}%S%^%`%g%l%n%w&Z&j&k&u&x'P'W'Z'l'm'p'r's(O(W(^(d(g(z)^)e)g)p)z*O*Y*d*g*h*k*q*t*v*y*z*}+U+V+Y+a+d+k,X,Y,],g,h,i,k,l,o,s,u,w,y,z-O-d-f-m-p.f.g/V/Z0i0j0kQ#qpW%W!o!s0d0nQ%X!pQ%Y!qQ%[!tQ%f0cS'v%Z0hQ'x0eQ'y0fQ,p*rQ-u,qS.i-s/sR0p0rU#uq.k0qR(w&][cOn#g$j)t,PZ!xY#[#}$Q+YQ#W[Q#zrR$TxQ%b!yQ%i!}Q%o#RQ'j${Q(V%eQ(Z%jQ(c%pQ(f%qQ*|(`Q,f*bQ-t,pQ.m-uR/].lQ$StQ(R%cR*s(SQ.l-sR/}/sR#QZR#V[R%Q!iQ%O!iV*c'm*d,g!Z!lQ!n#c#p$R$d$p$u$v$w$x$y$z%e%j%p%q&`'O'g(q(|)j*o*x+w,v0gR%T!kT#]^#_Q%x#[R,{+YQ(m%xS+_(n(oQ,}+`Q-x,{S.n-y-zR/^.oT+Z(k+]Q$`}Q&g$QQ)o'PR+{)pQ$XzQ)W&qR+i)XQ$XzQ&o$WQ)W&qR+i)XQ#khW$Vz$W&q)XQ$[{Q&r$ZZ)R&l)S+f+g-RR$^|R)c&wXlOn)t,PQ$f!RR'Q$gQ$m!UR'R$hR*X'_Q*V'_V-g,`-h.TQ.d-lQ/P.^R/Q._U.]-l.^._Q/U.aQ/b.tQ/g.zU/i.|/j/yQ/n/RQ/|/oQ0O/tU0Q/u0S0[Q0]0UQ0a0ZR0b0^R/T.`R/d.t",
  nodeNames: "⚠ print Escape { Comment Script AssignStatement * BinaryExpression BitOp BitOp BitOp BitOp ArithOp ArithOp @ ArithOp ** UnaryExpression ArithOp BitOp AwaitExpression await ) ( ParenthesizedExpression BinaryExpression or and CompareOp in not is UnaryExpression ConditionalExpression if else LambdaExpression lambda ParamList VariableName AssignOp , : NamedExpression AssignOp YieldExpression yield from TupleExpression ComprehensionExpression async for LambdaExpression ] [ ArrayExpression ArrayComprehensionExpression } { DictionaryExpression DictionaryComprehensionExpression SetExpression SetComprehensionExpression CallExpression ArgList AssignOp MemberExpression . PropertyName Number String FormatString FormatReplacement FormatSelfDoc FormatConversion FormatSpec FormatReplacement FormatSelfDoc ContinuedString Ellipsis None Boolean TypeDef AssignOp UpdateStatement UpdateOp ExpressionStatement DeleteStatement del PassStatement pass BreakStatement break ContinueStatement continue ReturnStatement return YieldStatement PrintStatement RaiseStatement raise ImportStatement import as ScopeStatement global nonlocal AssertStatement assert TypeDefinition type TypeParamList TypeParam StatementGroup ; IfStatement Body elif WhileStatement while ForStatement TryStatement try except finally WithStatement with FunctionDefinition def ParamList AssignOp TypeDef ClassDefinition class DecoratedStatement Decorator At MatchStatement match MatchBody MatchClause case CapturePattern LiteralPattern ArithOp ArithOp AsPattern OrPattern LogicOp AttributePattern SequencePattern MappingPattern StarPattern ClassPattern PatternArgList KeywordPattern KeywordPattern Guard",
  maxTerm: 277,
  context: M4,
  nodeProps: [
    ["isolate", -5, 4, 71, 72, 73, 77, ""],
    ["group", -15, 6, 85, 87, 88, 90, 92, 94, 96, 98, 99, 100, 102, 105, 108, 110, "Statement Statement", -22, 8, 18, 21, 25, 40, 49, 50, 56, 57, 60, 61, 62, 63, 64, 67, 70, 71, 72, 79, 80, 81, 82, "Expression", -10, 114, 116, 119, 121, 122, 126, 128, 133, 135, 138, "Statement", -9, 143, 144, 147, 148, 150, 151, 152, 153, 154, "Pattern"],
    ["openedBy", 23, "(", 54, "[", 58, "{"],
    ["closedBy", 24, ")", 55, "]", 59, "}"]
  ],
  propSources: [L4],
  skippedNodes: [0, 4],
  repeatNodeCount: 34,
  tokenData: "!2|~R!`OX%TXY%oY[%T[]%o]p%Tpq%oqr'ars)Yst*xtu%Tuv,dvw-hwx.Uxy/tyz0[z{0r{|2S|}2p}!O3W!O!P4_!P!Q:Z!Q!R;k!R![>_![!]Do!]!^Es!^!_FZ!_!`Gk!`!aHX!a!b%T!b!cIf!c!dJU!d!eK^!e!hJU!h!i!#f!i!tJU!t!u!,|!u!wJU!w!x!.t!x!}JU!}#O!0S#O#P&o#P#Q!0j#Q#R!1Q#R#SJU#S#T%T#T#UJU#U#VK^#V#YJU#Y#Z!#f#Z#fJU#f#g!,|#g#iJU#i#j!.t#j#oJU#o#p!1n#p#q!1s#q#r!2a#r#s!2f#s$g%T$g;'SJU;'S;=`KW<%lOJU`%YT&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%T`%lP;=`<%l%To%v]&n`%c_OX%TXY%oY[%T[]%o]p%Tpq%oq#O%T#O#P&o#P#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To&tX&n`OY%TYZ%oZ]%T]^%o^#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc'f[&n`O!_%T!_!`([!`#T%T#T#U(r#U#f%T#f#g(r#g#h(r#h#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc(cTmR&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc(yT!mR&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk)aV&n`&[ZOr%Trs)vs#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk){V&n`Or%Trs*bs#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk*iT&n`&^ZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To+PZS_&n`OY*xYZ%TZ]*x]^%T^#o*x#o#p+r#p#q*x#q#r+r#r;'S*x;'S;=`,^<%lO*x_+wTS_OY+rZ]+r^;'S+r;'S;=`,W<%lO+r_,ZP;=`<%l+ro,aP;=`<%l*xj,kV%rQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tj-XT!xY&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tj-oV%lQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk.]V&n`&ZZOw%Twx.rx#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk.wV&n`Ow%Twx/^x#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk/eT&n`&]ZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk/{ThZ&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc0cTgR&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk0yXVZ&n`Oz%Tz{1f{!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk1mVaR&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk2ZV%oZ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc2wTzR&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To3_W%pZ&n`O!_%T!_!`-Q!`!a3w!a#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Td4OT&{S&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk4fX!fQ&n`O!O%T!O!P5R!P!Q%T!Q![6T![#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk5WV&n`O!O%T!O!P5m!P#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk5tT!rZ&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti6[a!hX&n`O!Q%T!Q![6T![!g%T!g!h7a!h!l%T!l!m9s!m#R%T#R#S6T#S#X%T#X#Y7a#Y#^%T#^#_9s#_#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti7fZ&n`O{%T{|8X|}%T}!O8X!O!Q%T!Q![8s![#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti8^V&n`O!Q%T!Q![8s![#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti8z]!hX&n`O!Q%T!Q![8s![!l%T!l!m9s!m#R%T#R#S8s#S#^%T#^#_9s#_#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti9zT!hX&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk:bX%qR&n`O!P%T!P!Q:}!Q!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tj;UV%sQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti;ro!hX&n`O!O%T!O!P=s!P!Q%T!Q![>_![!d%T!d!e?q!e!g%T!g!h7a!h!l%T!l!m9s!m!q%T!q!rA]!r!z%T!z!{Bq!{#R%T#R#S>_#S#U%T#U#V?q#V#X%T#X#Y7a#Y#^%T#^#_9s#_#c%T#c#dA]#d#l%T#l#mBq#m#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti=xV&n`O!Q%T!Q![6T![#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti>fc!hX&n`O!O%T!O!P=s!P!Q%T!Q![>_![!g%T!g!h7a!h!l%T!l!m9s!m#R%T#R#S>_#S#X%T#X#Y7a#Y#^%T#^#_9s#_#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti?vY&n`O!Q%T!Q!R@f!R!S@f!S#R%T#R#S@f#S#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti@mY!hX&n`O!Q%T!Q!R@f!R!S@f!S#R%T#R#S@f#S#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TiAbX&n`O!Q%T!Q!YA}!Y#R%T#R#SA}#S#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TiBUX!hX&n`O!Q%T!Q!YA}!Y#R%T#R#SA}#S#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TiBv]&n`O!Q%T!Q![Co![!c%T!c!iCo!i#R%T#R#SCo#S#T%T#T#ZCo#Z#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TiCv]!hX&n`O!Q%T!Q![Co![!c%T!c!iCo!i#R%T#R#SCo#S#T%T#T#ZCo#Z#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%ToDvV{_&n`O!_%T!_!`E]!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TcEdT%{R&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkEzT#gZ&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkFbXmR&n`O!^%T!^!_F}!_!`([!`!a([!a#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TjGUV%mQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkGrV%zZ&n`O!_%T!_!`([!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkH`WmR&n`O!_%T!_!`([!`!aHx!a#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TjIPV%nQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkIoV_Q#}P&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%ToJ_]&n`&YS%uZO!Q%T!Q![JU![!c%T!c!}JU!}#R%T#R#SJU#S#T%T#T#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUoKZP;=`<%lJUoKge&n`&YS%uZOr%Trs)Ysw%Twx.Ux!Q%T!Q![JU![!c%T!c!tJU!t!uLx!u!}JU!}#R%T#R#SJU#S#T%T#T#fJU#f#gLx#g#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUoMRa&n`&YS%uZOr%TrsNWsw%Twx! vx!Q%T!Q![JU![!c%T!c!}JU!}#R%T#R#SJU#S#T%T#T#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUkN_V&n`&`ZOr%TrsNts#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkNyV&n`Or%Trs! `s#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk! gT&n`&bZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk! }V&n`&_ZOw%Twx!!dx#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!!iV&n`Ow%Twx!#Ox#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!#VT&n`&aZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To!#oe&n`&YS%uZOr%Trs!%Qsw%Twx!&px!Q%T!Q![JU![!c%T!c!tJU!t!u!(`!u!}JU!}#R%T#R#SJU#S#T%T#T#fJU#f#g!(`#g#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUk!%XV&n`&dZOr%Trs!%ns#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!%sV&n`Or%Trs!&Ys#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!&aT&n`&fZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!&wV&n`&cZOw%Twx!'^x#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!'cV&n`Ow%Twx!'xx#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!(PT&n`&eZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To!(ia&n`&YS%uZOr%Trs!)nsw%Twx!+^x!Q%T!Q![JU![!c%T!c!}JU!}#R%T#R#SJU#S#T%T#T#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUk!)uV&n`&hZOr%Trs!*[s#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!*aV&n`Or%Trs!*vs#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!*}T&n`&jZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!+eV&n`&gZOw%Twx!+zx#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!,PV&n`Ow%Twx!,fx#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!,mT&n`&iZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To!-Vi&n`&YS%uZOr%TrsNWsw%Twx! vx!Q%T!Q![JU![!c%T!c!dJU!d!eLx!e!hJU!h!i!(`!i!}JU!}#R%T#R#SJU#S#T%T#T#UJU#U#VLx#V#YJU#Y#Z!(`#Z#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUo!.}a&n`&YS%uZOr%Trs)Ysw%Twx.Ux!Q%T!Q![JU![!c%T!c!}JU!}#R%T#R#SJU#S#T%T#T#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUk!0ZT!XZ&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc!0qT!WR&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tj!1XV%kQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%T~!1sO!]~k!1zV%jR&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%T~!2fO![~i!2mT%tX&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%T",
  tokenizers: [q4, R4, C4, _4, 0, 1, 2, 3, 4],
  topRules: { Script: [0, 5] },
  specialized: [{ term: 221, get: (i) => B4[i] || -1 }],
  tokenPrec: 7668
}), py = /* @__PURE__ */ new Mp(), WQ = /* @__PURE__ */ new Set([
  "Script",
  "Body",
  "FunctionDefinition",
  "ClassDefinition",
  "LambdaExpression",
  "ForStatement",
  "MatchClause"
]);
function fa(i) {
  return (e, t, n) => {
    if (n)
      return !1;
    let r = e.node.getChild("VariableName");
    return r && t(r, i), !0;
  };
}
const D4 = {
  FunctionDefinition: /* @__PURE__ */ fa("function"),
  ClassDefinition: /* @__PURE__ */ fa("class"),
  ForStatement(i, e, t) {
    if (t) {
      for (let n = i.node.firstChild; n; n = n.nextSibling)
        if (n.name == "VariableName")
          e(n, "variable");
        else if (n.name == "in")
          break;
    }
  },
  ImportStatement(i, e) {
    var t, n;
    let { node: r } = i, s = ((t = r.firstChild) === null || t === void 0 ? void 0 : t.name) == "from";
    for (let o = r.getChild("import"); o; o = o.nextSibling)
      o.name == "VariableName" && ((n = o.nextSibling) === null || n === void 0 ? void 0 : n.name) != "as" && e(o, s ? "variable" : "namespace");
  },
  AssignStatement(i, e) {
    for (let t = i.node.firstChild; t; t = t.nextSibling)
      if (t.name == "VariableName")
        e(t, "variable");
      else if (t.name == ":" || t.name == "AssignOp")
        break;
  },
  ParamList(i, e) {
    for (let t = null, n = i.node.firstChild; n; n = n.nextSibling)
      n.name == "VariableName" && (!t || !/\*|AssignOp/.test(t.name)) && e(n, "variable"), t = n;
  },
  CapturePattern: /* @__PURE__ */ fa("variable"),
  AsPattern: /* @__PURE__ */ fa("variable"),
  __proto__: null
};
function zQ(i, e) {
  let t = py.get(e);
  if (t)
    return t;
  let n = [], r = !0;
  function s(o, l) {
    let a = i.sliceString(o.from, o.to);
    n.push({ label: a, type: l });
  }
  return e.cursor(ve.IncludeAnonymous).iterate((o) => {
    if (o.name) {
      let l = D4[o.name];
      if (l && l(o, s, r) || !r && WQ.has(o.name))
        return !1;
      r = !1;
    } else if (o.to - o.from > 8192) {
      for (let l of zQ(i, o.node))
        n.push(l);
      return !1;
    }
  }), py.set(e, n), n;
}
const my = /^[\w\xa1-\uffff][\w\d\xa1-\uffff]*$/, IQ = ["String", "FormatString", "Comment", "PropertyName"];
function V4(i) {
  let e = ye(i.state).resolveInner(i.pos, -1);
  if (IQ.indexOf(e.name) > -1)
    return null;
  let t = e.name == "VariableName" || e.to - e.from < 20 && my.test(i.state.sliceDoc(e.from, e.to));
  if (!t && !i.explicit)
    return null;
  let n = [];
  for (let r = e; r; r = r.parent)
    WQ.has(r.name) && (n = n.concat(zQ(i.state.doc, r)));
  return {
    options: n,
    from: t ? e.from : i.pos,
    validFor: my
  };
}
const W4 = /* @__PURE__ */ [
  "__annotations__",
  "__builtins__",
  "__debug__",
  "__doc__",
  "__import__",
  "__name__",
  "__loader__",
  "__package__",
  "__spec__",
  "False",
  "None",
  "True"
].map((i) => ({ label: i, type: "constant" })).concat(/* @__PURE__ */ [
  "ArithmeticError",
  "AssertionError",
  "AttributeError",
  "BaseException",
  "BlockingIOError",
  "BrokenPipeError",
  "BufferError",
  "BytesWarning",
  "ChildProcessError",
  "ConnectionAbortedError",
  "ConnectionError",
  "ConnectionRefusedError",
  "ConnectionResetError",
  "DeprecationWarning",
  "EOFError",
  "Ellipsis",
  "EncodingWarning",
  "EnvironmentError",
  "Exception",
  "FileExistsError",
  "FileNotFoundError",
  "FloatingPointError",
  "FutureWarning",
  "GeneratorExit",
  "IOError",
  "ImportError",
  "ImportWarning",
  "IndentationError",
  "IndexError",
  "InterruptedError",
  "IsADirectoryError",
  "KeyError",
  "KeyboardInterrupt",
  "LookupError",
  "MemoryError",
  "ModuleNotFoundError",
  "NameError",
  "NotADirectoryError",
  "NotImplemented",
  "NotImplementedError",
  "OSError",
  "OverflowError",
  "PendingDeprecationWarning",
  "PermissionError",
  "ProcessLookupError",
  "RecursionError",
  "ReferenceError",
  "ResourceWarning",
  "RuntimeError",
  "RuntimeWarning",
  "StopAsyncIteration",
  "StopIteration",
  "SyntaxError",
  "SyntaxWarning",
  "SystemError",
  "SystemExit",
  "TabError",
  "TimeoutError",
  "TypeError",
  "UnboundLocalError",
  "UnicodeDecodeError",
  "UnicodeEncodeError",
  "UnicodeError",
  "UnicodeTranslateError",
  "UnicodeWarning",
  "UserWarning",
  "ValueError",
  "Warning",
  "ZeroDivisionError"
].map((i) => ({ label: i, type: "type" }))).concat(/* @__PURE__ */ [
  "bool",
  "bytearray",
  "bytes",
  "classmethod",
  "complex",
  "float",
  "frozenset",
  "int",
  "list",
  "map",
  "memoryview",
  "object",
  "range",
  "set",
  "staticmethod",
  "str",
  "super",
  "tuple",
  "type"
].map((i) => ({ label: i, type: "class" }))).concat(/* @__PURE__ */ [
  "abs",
  "aiter",
  "all",
  "anext",
  "any",
  "ascii",
  "bin",
  "breakpoint",
  "callable",
  "chr",
  "compile",
  "delattr",
  "dict",
  "dir",
  "divmod",
  "enumerate",
  "eval",
  "exec",
  "exit",
  "filter",
  "format",
  "getattr",
  "globals",
  "hasattr",
  "hash",
  "help",
  "hex",
  "id",
  "input",
  "isinstance",
  "issubclass",
  "iter",
  "len",
  "license",
  "locals",
  "max",
  "min",
  "next",
  "oct",
  "open",
  "ord",
  "pow",
  "print",
  "property",
  "quit",
  "repr",
  "reversed",
  "round",
  "setattr",
  "slice",
  "sorted",
  "sum",
  "vars",
  "zip"
].map((i) => ({ label: i, type: "function" }))), z4 = [
  /* @__PURE__ */ Xe("def ${name}(${params}):\n	${}", {
    label: "def",
    detail: "function",
    type: "keyword"
  }),
  /* @__PURE__ */ Xe("for ${name} in ${collection}:\n	${}", {
    label: "for",
    detail: "loop",
    type: "keyword"
  }),
  /* @__PURE__ */ Xe("while ${}:\n	${}", {
    label: "while",
    detail: "loop",
    type: "keyword"
  }),
  /* @__PURE__ */ Xe("try:\n	${}\nexcept ${error}:\n	${}", {
    label: "try",
    detail: "/ except block",
    type: "keyword"
  }),
  /* @__PURE__ */ Xe(`if \${}:
	
`, {
    label: "if",
    detail: "block",
    type: "keyword"
  }),
  /* @__PURE__ */ Xe("if ${}:\n	${}\nelse:\n	${}", {
    label: "if",
    detail: "/ else block",
    type: "keyword"
  }),
  /* @__PURE__ */ Xe("class ${name}:\n	def __init__(self, ${params}):\n			${}", {
    label: "class",
    detail: "definition",
    type: "keyword"
  }),
  /* @__PURE__ */ Xe("import ${module}", {
    label: "import",
    detail: "statement",
    type: "keyword"
  }),
  /* @__PURE__ */ Xe("from ${module} import ${names}", {
    label: "from",
    detail: "import",
    type: "keyword"
  })
], I4 = /* @__PURE__ */ Yp(IQ, /* @__PURE__ */ kc(/* @__PURE__ */ W4.concat(z4)));
function Nf(i) {
  let { node: e, pos: t } = i, n = i.lineIndent(t, -1), r = null;
  for (; ; ) {
    let s = e.childBefore(t);
    if (s)
      if (s.name == "Comment")
        t = s.from;
      else if (s.name == "Body" || s.name == "MatchBody")
        i.baseIndentFor(s) + i.unit <= n && (r = s), e = s;
      else if (s.name == "MatchClause")
        e = s;
      else if (s.type.is("Statement"))
        e = s;
      else
        break;
    else break;
  }
  return r;
}
function jf(i, e) {
  let t = i.baseIndentFor(e), n = i.lineAt(i.pos, -1), r = n.from + n.text.length;
  return /^\s*($|#)/.test(n.text) && i.node.to < r + 100 && !/\S/.test(i.state.sliceDoc(r, i.node.to)) && i.lineIndent(i.pos, -1) <= t || /^\s*(else:|elif |except |finally:|case\s+[^=:]+:)/.test(i.textAfter) && i.lineIndent(i.pos, -1) > t ? null : t + i.unit;
}
const Uf = /* @__PURE__ */ Si.define({
  name: "python",
  parser: /* @__PURE__ */ Z4.configure({
    props: [
      /* @__PURE__ */ Ji.add({
        Body: (i) => {
          var e;
          let t = /^\s*(#|$)/.test(i.textAfter) && Nf(i) || i.node;
          return (e = jf(i, t)) !== null && e !== void 0 ? e : i.continue();
        },
        MatchBody: (i) => {
          var e;
          let t = Nf(i);
          return (e = jf(i, t || i.node)) !== null && e !== void 0 ? e : i.continue();
        },
        IfStatement: (i) => /^\s*(else:|elif )/.test(i.textAfter) ? i.baseIndent : i.continue(),
        "ForStatement WhileStatement": (i) => /^\s*else:/.test(i.textAfter) ? i.baseIndent : i.continue(),
        TryStatement: (i) => /^\s*(except[ :]|finally:|else:)/.test(i.textAfter) ? i.baseIndent : i.continue(),
        MatchStatement: (i) => /^\s*case /.test(i.textAfter) ? i.baseIndent + i.unit : i.continue(),
        "TupleExpression ComprehensionExpression ParamList ArgList ParenthesizedExpression": /* @__PURE__ */ ns({ closing: ")" }),
        "DictionaryExpression DictionaryComprehensionExpression SetExpression SetComprehensionExpression": /* @__PURE__ */ ns({ closing: "}" }),
        "ArrayExpression ArrayComprehensionExpression": /* @__PURE__ */ ns({ closing: "]" }),
        MemberExpression: (i) => i.baseIndent + i.unit,
        "String FormatString": () => null,
        Script: (i) => {
          var e;
          let t = Nf(i);
          return (e = t && jf(i, t)) !== null && e !== void 0 ? e : i.continue();
        }
      }),
      /* @__PURE__ */ vi.add({
        "ArrayExpression DictionaryExpression SetExpression TupleExpression": Ql,
        Body: (i, e) => ({ from: i.from + 1, to: i.to - (i.to == e.doc.length ? 0 : 1) }),
        "String FormatString": (i, e) => ({ from: e.doc.lineAt(i.from).to, to: i.to })
      })
    ]
  }),
  languageData: {
    closeBrackets: {
      brackets: ["(", "[", "{", "'", '"', "'''", '"""'],
      stringPrefixes: [
        "f",
        "fr",
        "rf",
        "r",
        "u",
        "b",
        "br",
        "rb",
        "F",
        "FR",
        "RF",
        "R",
        "U",
        "B",
        "BR",
        "RB"
      ]
    },
    commentTokens: { line: "#" },
    // Indent logic logic are triggered upon below input patterns
    indentOnInput: /^\s*([\}\]\)]|else:|elif |except |finally:|case\s+[^:]*:?)$/
  }
});
function N4() {
  return new Gi(Uf, [
    Uf.data.of({ autocomplete: V4 }),
    Uf.data.of({ autocomplete: I4 })
  ]);
}
const Wr = 63, gy = 64, j4 = 1, U4 = 2, NQ = 3, Y4 = 4, jQ = 5, G4 = 6, F4 = 7, UQ = 65, H4 = 66, K4 = 8, J4 = 9, eW = 10, tW = 11, iW = 12, YQ = 13, nW = 19, rW = 20, sW = 29, oW = 33, lW = 34, aW = 47, hW = 0, mm = 1, aO = 2, ll = 3, hO = 4;
class or {
  constructor(e, t, n) {
    this.parent = e, this.depth = t, this.type = n, this.hash = (e ? e.hash + e.hash << 8 : 0) + t + (t << 4) + n;
  }
}
or.top = new or(null, -1, hW);
function Ro(i, e) {
  for (let t = 0, n = e - i.pos - 1; ; n--, t++) {
    let r = i.peek(n);
    if (Sn(r) || r == -1) return t;
  }
}
function cO(i) {
  return i == 32 || i == 9;
}
function Sn(i) {
  return i == 10 || i == 13;
}
function GQ(i) {
  return cO(i) || Sn(i);
}
function hr(i) {
  return i < 0 || GQ(i);
}
const cW = new Rl({
  start: or.top,
  reduce(i, e) {
    return i.type == ll && (e == rW || e == lW) ? i.parent : i;
  },
  shift(i, e, t, n) {
    if (e == NQ)
      return new or(i, Ro(n, n.pos), mm);
    if (e == UQ || e == jQ)
      return new or(i, Ro(n, n.pos), aO);
    if (e == Wr)
      return i.parent;
    if (e == nW || e == oW)
      return new or(i, 0, ll);
    if (e == YQ && i.type == hO)
      return i.parent;
    if (e == aW) {
      let r = /[1-9]/.exec(n.read(n.pos, t.pos));
      if (r) return new or(i, i.depth + +r[0], hO);
    }
    return i;
  },
  hash(i) {
    return i.hash;
  }
});
function xs(i, e, t = 0) {
  return i.peek(t) == e && i.peek(t + 1) == e && i.peek(t + 2) == e && hr(i.peek(t + 3));
}
const fW = new Ze((i, e) => {
  if (i.next == -1 && e.canShift(gy))
    return i.acceptToken(gy);
  let t = i.peek(-1);
  if ((Sn(t) || t < 0) && e.context.type != ll) {
    if (xs(
      i,
      45
      /* '-' */
    ))
      if (e.canShift(Wr)) i.acceptToken(Wr);
      else return i.acceptToken(j4, 3);
    if (xs(
      i,
      46
      /* '.' */
    ))
      if (e.canShift(Wr)) i.acceptToken(Wr);
      else return i.acceptToken(U4, 3);
    let n = 0;
    for (; i.next == 32; )
      n++, i.advance();
    (n < e.context.depth || n == e.context.depth && e.context.type == mm && (i.next != 45 || !hr(i.peek(1)))) && // Not blank
    i.next != -1 && !Sn(i.next) && i.next != 35 && i.acceptToken(Wr, -n);
  }
}, { contextual: !0 }), uW = new Ze((i, e) => {
  if (e.context.type == ll) {
    i.next == 63 && (i.advance(), hr(i.next) && i.acceptToken(F4));
    return;
  }
  if (i.next == 45)
    i.advance(), hr(i.next) && i.acceptToken(e.context.type == mm && e.context.depth == Ro(i, i.pos - 1) ? Y4 : NQ);
  else if (i.next == 63)
    i.advance(), hr(i.next) && i.acceptToken(e.context.type == aO && e.context.depth == Ro(i, i.pos - 1) ? G4 : jQ);
  else {
    let t = i.pos;
    for (; ; )
      if (cO(i.next)) {
        if (i.pos == t) return;
        i.advance();
      } else if (i.next == 33)
        FQ(i);
      else if (i.next == 38)
        fO(i);
      else if (i.next == 42) {
        fO(i);
        break;
      } else if (i.next == 39 || i.next == 34) {
        if (gm(i, !0)) break;
        return;
      } else if (i.next == 91 || i.next == 123) {
        if (!OW(i)) return;
        break;
      } else {
        HQ(i, !0, !1, 0);
        break;
      }
    for (; cO(i.next); ) i.advance();
    if (i.next == 58) {
      if (i.pos == t && e.canShift(sW)) return;
      let n = i.peek(1);
      hr(n) && i.acceptTokenTo(e.context.type == aO && e.context.depth == Ro(i, t) ? H4 : UQ, t);
    }
  }
}, { contextual: !0 });
function dW(i) {
  return i > 32 && i < 127 && i != 34 && i != 37 && i != 44 && i != 60 && i != 62 && i != 92 && i != 94 && i != 96 && i != 123 && i != 124 && i != 125;
}
function yy(i) {
  return i >= 48 && i <= 57 || i >= 97 && i <= 102 || i >= 65 && i <= 70;
}
function Sy(i, e) {
  return i.next == 37 ? (i.advance(), yy(i.next) && i.advance(), yy(i.next) && i.advance(), !0) : dW(i.next) || e && i.next == 44 ? (i.advance(), !0) : !1;
}
function FQ(i) {
  if (i.advance(), i.next == 60) {
    for (i.advance(); ; )
      if (!Sy(i, !0)) {
        i.next == 62 && i.advance();
        break;
      }
  } else
    for (; Sy(i, !1); )
      ;
}
function fO(i) {
  for (i.advance(); !hr(i.next) && Ih(i.tag) != "f"; ) i.advance();
}
function gm(i, e) {
  let t = i.next, n = !1, r = i.pos;
  for (i.advance(); ; ) {
    let s = i.next;
    if (s < 0) break;
    if (i.advance(), s == t)
      if (s == 39)
        if (i.next == 39) i.advance();
        else break;
      else
        break;
    else if (s == 92 && t == 34)
      i.next >= 0 && i.advance();
    else if (Sn(s)) {
      if (e) return !1;
      n = !0;
    } else if (e && i.pos >= r + 1024)
      return !1;
  }
  return !n;
}
function OW(i) {
  for (let e = [], t = i.pos + 1024; ; )
    if (i.next == 91 || i.next == 123)
      e.push(i.next), i.advance();
    else if (i.next == 39 || i.next == 34) {
      if (!gm(i, !0)) return !1;
    } else if (i.next == 93 || i.next == 125) {
      if (e[e.length - 1] != i.next - 2) return !1;
      if (e.pop(), i.advance(), !e.length) return !0;
    } else {
      if (i.next < 0 || i.pos > t || Sn(i.next))
        return !1;
      i.advance();
    }
}
const pW = "iiisiiissisfissssssssssssisssiiissssssssssssssssssssssssssfsfssissssssssssssssssssssssssssfif";
function Ih(i) {
  return i < 33 ? "u" : i > 125 ? "s" : pW[i - 33];
}
function Yf(i, e) {
  let t = Ih(i);
  return t != "u" && !(e && t == "f");
}
function HQ(i, e, t, n) {
  if (Ih(i.next) == "s" || (i.next == 63 || i.next == 58 || i.next == 45) && Yf(i.peek(1), t))
    i.advance();
  else
    return !1;
  let r = i.pos;
  for (; ; ) {
    let s = i.next, o = 0, l = n + 1;
    for (; GQ(s); ) {
      if (Sn(s)) {
        if (e) return !1;
        l = 0;
      } else
        l++;
      s = i.peek(++o);
    }
    if (!(s >= 0 && (s == 58 ? Yf(i.peek(o + 1), t) : s == 35 ? i.peek(o - 1) != 32 : Yf(s, t))) || !t && l <= n || l == 0 && !t && (xs(i, 45, o) || xs(i, 46, o)))
      break;
    if (e && Ih(s) == "f") return !1;
    for (let h = o; h >= 0; h--) i.advance();
    if (e && i.pos > r + 1024) return !1;
  }
  return !0;
}
const mW = new Ze((i, e) => {
  if (i.next == 33)
    FQ(i), i.acceptToken(iW);
  else if (i.next == 38 || i.next == 42) {
    let t = i.next == 38 ? eW : tW;
    fO(i), i.acceptToken(t);
  } else i.next == 39 || i.next == 34 ? (gm(i, !1), i.acceptToken(J4)) : HQ(i, !1, e.context.type == ll, e.context.depth) && i.acceptToken(K4);
}), gW = new Ze((i, e) => {
  let t = e.context.type == hO ? e.context.depth : -1, n = i.pos;
  e: for (; ; ) {
    let r = 0, s = i.next;
    for (; s == 32; ) s = i.peek(++r);
    if (!r && (xs(i, 45, r) || xs(i, 46, r)) || !Sn(s) && (t < 0 && (t = Math.max(e.context.depth + 1, r)), r < t))
      break;
    for (; ; ) {
      if (i.next < 0) break e;
      let o = Sn(i.next);
      if (i.advance(), o) continue e;
      n = i.pos;
    }
  }
  i.acceptTokenTo(YQ, n);
}), yW = ki({
  DirectiveName: y.keyword,
  DirectiveContent: y.attributeValue,
  "DirectiveEnd DocEnd": y.meta,
  QuotedLiteral: y.string,
  BlockLiteralHeader: y.special(y.string),
  BlockLiteralContent: y.content,
  Literal: y.content,
  "Key/Literal Key/QuotedLiteral": y.definition(y.propertyName),
  "Anchor Alias": y.labelName,
  Tag: y.typeName,
  Comment: y.lineComment,
  ": , -": y.separator,
  "?": y.punctuation,
  "[ ]": y.squareBracket,
  "{ }": y.brace
}), SW = bi.deserialize({
  version: 14,
  states: "5lQ!ZQgOOO#PQfO'#CpO#uQfO'#DOOOQR'#Dv'#DvO$qQgO'#DRO%gQdO'#DUO%nQgO'#DUO&ROaO'#D[OOQR'#Du'#DuO&{QgO'#D^O'rQgO'#D`OOQR'#Dt'#DtO(iOqO'#DbOOQP'#Dj'#DjO(zQaO'#CmO)YQgO'#CmOOQP'#Cm'#CmQ)jQaOOQ)uQgOOQ]QgOOO*PQdO'#CrO*nQdO'#CtOOQO'#Dw'#DwO+]Q`O'#CxO+hQdO'#CwO+rQ`O'#CwOOQO'#Cv'#CvO+wQdO'#CvOOQO'#Cq'#CqO,UQ`O,59[O,^QfO,59[OOQR,59[,59[OOQO'#Cx'#CxO,eQ`O'#DPO,pQdO'#DPOOQO'#Dx'#DxO,zQdO'#DxO-XQ`O,59jO-aQfO,59jOOQR,59j,59jOOQR'#DS'#DSO-hQcO,59mO-sQgO'#DVO.TQ`O'#DVO.YQcO,59pOOQR'#DX'#DXO#|QfO'#DWO.hQcO'#DWOOQR,59v,59vO.yOWO,59vO/OOaO,59vO/WOaO,59vO/cQgO'#D_OOQR,59x,59xO0VQgO'#DaOOQR,59z,59zOOQP,59|,59|O0yOaO,59|O1ROaO,59|O1aOqO,59|OOQP-E7h-E7hO1oQgO,59XOOQP,59X,59XO2PQaO'#DeO2_QgO'#DeO2oQgO'#DkOOQP'#Dk'#DkQ)jQaOOO3PQdO'#CsOOQO,59^,59^O3kQdO'#CuOOQO,59`,59`OOQO,59c,59cO4VQdO,59cO4aQdO'#CzO4kQ`O'#CzOOQO,59b,59bOOQU,5:Q,5:QOOQR1G.v1G.vO4pQ`O1G.vOOQU-E7d-E7dO4xQdO,59kOOQO,59k,59kO5SQdO'#DQO5^Q`O'#DQOOQO,5:d,5:dOOQU,5:R,5:ROOQR1G/U1G/UO5cQ`O1G/UOOQU-E7e-E7eO5kQgO'#DhO5xQcO1G/XOOQR1G/X1G/XOOQR,59q,59qO6TQgO,59qO6eQdO'#DiO6lQgO'#DiO7PQcO1G/[OOQR1G/[1G/[OOQR,59r,59rO#|QfO,59rOOQR1G/b1G/bO7_OWO1G/bO7dOaO1G/bOOQR,59y,59yOOQR,59{,59{OOQP1G/h1G/hO7lOaO1G/hO7tOaO1G/hO8POaO1G/hOOQP1G.s1G.sO8_QgO,5:POOQP,5:P,5:POOQP,5:V,5:VOOQP-E7i-E7iOOQO,59_,59_OOQO,59a,59aOOQO1G.}1G.}OOQO,59f,59fO8oQdO,59fOOQR7+$b7+$bP,XQ`O'#DfOOQO1G/V1G/VOOQO,59l,59lO8yQdO,59lOOQR7+$p7+$pP9TQ`O'#DgOOQR'#DT'#DTOOQR,5:S,5:SOOQR-E7f-E7fOOQR7+$s7+$sOOQR1G/]1G/]O9YQgO'#DYO9jQ`O'#DYOOQR,5:T,5:TO#|QfO'#DZO9oQcO'#DZOOQR-E7g-E7gOOQR7+$v7+$vOOQR1G/^1G/^OOQR7+$|7+$|O:QOWO7+$|OOQP7+%S7+%SO:VOaO7+%SO:_OaO7+%SOOQP1G/k1G/kOOQO1G/Q1G/QOOQO1G/W1G/WOOQR,59t,59tO:jQgO,59tOOQR,59u,59uO#|QfO,59uOOQR<<Hh<<HhOOQP<<Hn<<HnO:zOaO<<HnOOQR1G/`1G/`OOQR1G/a1G/aOOQPAN>YAN>Y",
  stateData: ";S~O!fOS!gOS^OS~OP_OQbORSOTUOWROXROYYOZZO[XOcPOqQO!PVO!V[O!cTO~O`cO~P]OVkOWROXROYeOZfO[dOcPOmhOqQO~OboO~P!bOVtOWROXROYeOZfO[dOcPOmrOqQO~OpwO~P#WORSOTUOWROXROYYOZZO[XOcPOqQO!PVO!cTO~OSvP!avP!bvP~P#|OWROXROYeOZfO[dOcPOqQO~OmzO~P%OOm!OOUzP!azP!bzP!dzP~P#|O^!SO!b!QO!f!TO!g!RO~ORSOTUOWROXROcPOqQO!PVO!cTO~OY!UOP!QXQ!QX!V!QX!`!QXS!QX!a!QX!b!QXU!QXm!QX!d!QX~P&aO[!WOP!SXQ!SX!V!SX!`!SXS!SX!a!SX!b!SXU!SXm!SX!d!SX~P&aO^!ZO!W![O!b!YO!f!]O!g!YO~OP!_O!V[OQaX!`aX~OPaXQaX!VaX!`aX~P#|OP!bOQ!cO!V[O~OP_O!V[O~P#|OWROXROY!fOcPOqQObfXmfXofXpfX~OWROXRO[!hOcPOqQObhXmhXohXphX~ObeXmlXoeX~ObkXokX~P%OOm!kO~Om!lObnPonP~P%OOb!pOo!oO~Ob!pO~P!bOm!sOosXpsX~OosXpsX~P%OOm!uOotPptP~P%OOo!xOp!yO~Op!yO~P#WOS!|O!a#OO!b#OO~OUyX!ayX!byX!dyX~P#|Om#QO~OU#SO!a#UO!b#UO!d#RO~Om#WOUzX!azX!bzX!dzX~O]#XO~O!b#XO!g#YO~O^#ZO!b#XO!g#YO~OP!RXQ!RX!V!RX!`!RXS!RX!a!RX!b!RXU!RXm!RX!d!RX~P&aOP!TXQ!TX!V!TX!`!TXS!TX!a!TX!b!TXU!TXm!TX!d!TX~P&aO!b#^O!g#^O~O^#_O!b#^O!f#`O!g#^O~O^#_O!W#aO!b#^O!g#^O~OPaaQaa!Vaa!`aa~P#|OP#cO!V[OQ!XX!`!XX~OP!XXQ!XX!V!XX!`!XX~P#|OP_O!V[OQ!_X!`!_X~P#|OWROXROcPOqQObgXmgXogXpgX~OWROXROcPOqQObiXmiXoiXpiX~Obkaoka~P%OObnXonX~P%OOm#kO~Ob#lOo!oO~Oosapsa~P%OOotXptX~P%OOm#pO~Oo!xOp#qO~OSwP!awP!bwP~P#|OS!|O!a#vO!b#vO~OUya!aya!bya!dya~P#|Om#xO~P%OOm#{OU}P!a}P!b}P!d}P~P#|OU#SO!a$OO!b$OO!d#RO~O]$QO~O!b$QO!g$RO~O!b$SO!g$SO~O^$TO!b$SO!g$SO~O^$TO!b$SO!f$UO!g$SO~OP!XaQ!Xa!V!Xa!`!Xa~P#|Obnaona~P%OOotapta~P%OOo!xO~OU|X!a|X!b|X!d|X~P#|Om$ZO~Om$]OU}X!a}X!b}X!d}X~O]$^O~O!b$_O!g$_O~O^$`O!b$_O!g$_O~OU|a!a|a!b|a!d|a~P#|O!b$cO!g$cO~O",
  goto: ",]!mPPPPPPPPPPPPPPPPP!nPP!v#v#|$`#|$c$f$j$nP%VPPP!v%Y%^%a%{&O%a&R&U&X&_&b%aP&e&{&e'O'RPP']'a'g'm's'y(XPPPPPPPP(_)e*X+c,VUaObcR#e!c!{ROPQSTUXY_bcdehknrtvz!O!U!W!_!b!c!f!h!k!l!s!u!|#Q#R#S#W#c#k#p#x#{$Z$]QmPR!qnqfPQThknrtv!k!l!s!u#R#k#pR!gdR!ieTlPnTjPnSiPnSqQvQ{TQ!mkQ!trQ!vtR#y#RR!nkTsQvR!wt!RWOSUXY_bcz!O!U!W!_!b!c!|#Q#S#W#c#x#{$Z$]RySR#t!|R|TR|UQ!PUR#|#SR#z#RR#z#SyZOSU_bcz!O!_!b!c!|#Q#S#W#c#x#{$Z$]R!VXR!XYa]O^abc!a!c!eT!da!eQnPR!rnQvQR!{vQ!}yR#u!}Q#T|R#}#TW^Obc!cS!^^!aT!aa!eQ!eaR#f!eW`Obc!cQxSS}U#SQ!`_Q#PzQ#V!OQ#b!_Q#d!bQ#s!|Q#w#QQ$P#WQ$V#cQ$Y#xQ$[#{Q$a$ZR$b$]xZOSU_bcz!O!_!b!c!|#Q#S#W#c#x#{$Z$]Q!VXQ!XYQ#[!UR#]!W!QWOSUXY_bcz!O!U!W!_!b!c!|#Q#S#W#c#x#{$Z$]pfPQThknrtv!k!l!s!u#R#k#pQ!gdQ!ieQ#g!fR#h!hSgPn^pQTkrtv#RQ!jhQ#i!kQ#j!lQ#n!sQ#o!uQ$W#kR$X#pQuQR!zv",
  nodeNames: "⚠ DirectiveEnd DocEnd - - ? ? ? Literal QuotedLiteral Anchor Alias Tag BlockLiteralContent Comment Stream BOM Document ] [ FlowSequence Item Tagged Anchored Anchored Tagged FlowMapping Pair Key : Pair , } { FlowMapping Pair Pair BlockSequence Item Item BlockMapping Pair Pair Key Pair Pair BlockLiteral BlockLiteralHeader Tagged Anchored Anchored Tagged Directive DirectiveName DirectiveContent Document",
  maxTerm: 74,
  context: cW,
  nodeProps: [
    ["isolate", -3, 8, 9, 14, ""],
    ["openedBy", 18, "[", 32, "{"],
    ["closedBy", 19, "]", 33, "}"]
  ],
  propSources: [yW],
  skippedNodes: [0],
  repeatNodeCount: 6,
  tokenData: "-Y~RnOX#PXY$QYZ$]Z]#P]^$]^p#Ppq$Qqs#Pst$btu#Puv$yv|#P|}&e}![#P![!]'O!]!`#P!`!a'i!a!}#P!}#O*g#O#P#P#P#Q+Q#Q#o#P#o#p+k#p#q'i#q#r,U#r;'S#P;'S;=`#z<%l?HT#P?HT?HU,o?HUO#PQ#UU!WQOY#PZp#Ppq#hq;'S#P;'S;=`#z<%lO#PQ#kTOY#PZs#Pt;'S#P;'S;=`#z<%lO#PQ#}P;=`<%l#P~$VQ!f~XY$Qpq$Q~$bO!g~~$gS^~OY$bZ;'S$b;'S;=`$s<%lO$b~$vP;=`<%l$bR%OX!WQOX%kXY#PZ]%k]^#P^p%kpq#hq;'S%k;'S;=`&_<%lO%kR%rX!WQ!VPOX%kXY#PZ]%k]^#P^p%kpq#hq;'S%k;'S;=`&_<%lO%kR&bP;=`<%l%kR&lUoP!WQOY#PZp#Ppq#hq;'S#P;'S;=`#z<%lO#PR'VUmP!WQOY#PZp#Ppq#hq;'S#P;'S;=`#z<%lO#PR'p[!PP!WQOY#PZp#Ppq#hq{#P{|(f|}#P}!O(f!O!R#P!R![)p![;'S#P;'S;=`#z<%lO#PR(mW!PP!WQOY#PZp#Ppq#hq!R#P!R![)V![;'S#P;'S;=`#z<%lO#PR)^U!PP!WQOY#PZp#Ppq#hq;'S#P;'S;=`#z<%lO#PR)wY!PP!WQOY#PZp#Ppq#hq{#P{|)V|}#P}!O)V!O;'S#P;'S;=`#z<%lO#PR*nUcP!WQOY#PZp#Ppq#hq;'S#P;'S;=`#z<%lO#PR+XUbP!WQOY#PZp#Ppq#hq;'S#P;'S;=`#z<%lO#PR+rUqP!WQOY#PZp#Ppq#hq;'S#P;'S;=`#z<%lO#PR,]UpP!WQOY#PZp#Ppq#hq;'S#P;'S;=`#z<%lO#PR,vU`P!WQOY#PZp#Ppq#hq;'S#P;'S;=`#z<%lO#P",
  tokenizers: [fW, uW, mW, gW, 0, 1],
  topRules: { Stream: [0, 15] },
  tokenPrec: 0
}), bW = /* @__PURE__ */ Si.define({
  name: "yaml",
  parser: /* @__PURE__ */ SW.configure({
    props: [
      /* @__PURE__ */ Ji.add({
        Stream: (i) => {
          for (let e = i.node.resolve(i.pos, -1); e && e.to >= i.pos; e = e.parent) {
            if (e.name == "BlockLiteralContent" && e.from < e.to)
              return i.baseIndentFor(e);
            if (e.name == "BlockLiteral")
              return i.baseIndentFor(e) + i.unit;
            if (e.name == "BlockSequence" || e.name == "BlockMapping")
              return i.column(e.from, 1);
            if (e.name == "QuotedLiteral")
              return null;
            if (e.name == "Literal") {
              let t = i.column(e.from, 1);
              if (t == i.lineIndent(e.from, 1))
                return t;
              if (e.to > i.pos)
                return null;
            }
          }
          return null;
        },
        FlowMapping: /* @__PURE__ */ ns({ closing: "}" }),
        FlowSequence: /* @__PURE__ */ ns({ closing: "]" })
      }),
      /* @__PURE__ */ vi.add({
        "FlowMapping FlowSequence": Ql,
        "Item Pair BlockLiteral": (i, e) => ({ from: e.doc.lineAt(i.from).to, to: i.to })
      })
    ]
  }),
  languageData: {
    commentTokens: { line: "#" },
    indentOnInput: /^\s*[\]\}]$/
  }
});
function xW() {
  return new Gi(bW);
}
const uO = 1, wW = 2, kW = 3, vW = 4, QW = 5, PW = 36, $W = 37, TW = 38, CW = 11, RW = 13;
function AW(i) {
  return i == 45 || i == 46 || i == 58 || i >= 65 && i <= 90 || i == 95 || i >= 97 && i <= 122 || i >= 161;
}
function EW(i) {
  return i == 9 || i == 10 || i == 13 || i == 32;
}
let by = null, xy = null, wy = 0;
function dO(i, e) {
  let t = i.pos + e;
  if (xy == i && wy == t) return by;
  for (; EW(i.peek(e)); ) e++;
  let n = "";
  for (; ; ) {
    let r = i.peek(e);
    if (!AW(r)) break;
    n += String.fromCharCode(r), e++;
  }
  return xy = i, wy = t, by = n || null;
}
function ky(i, e) {
  this.name = i, this.parent = e;
}
const MW = new Rl({
  start: null,
  shift(i, e, t, n) {
    return e == uO ? new ky(dO(n, 1) || "", i) : i;
  },
  reduce(i, e) {
    return e == CW && i ? i.parent : i;
  },
  reuse(i, e, t, n) {
    let r = e.type.id;
    return r == uO || r == RW ? new ky(dO(n, 1) || "", i) : i;
  },
  strict: !1
}), qW = new Ze((i, e) => {
  if (i.next == 60) {
    if (i.advance(), i.next == 47) {
      i.advance();
      let t = dO(i, 0);
      if (!t) return i.acceptToken(QW);
      if (e.context && t == e.context.name) return i.acceptToken(wW);
      for (let n = e.context; n; n = n.parent) if (n.name == t) return i.acceptToken(kW, -2);
      i.acceptToken(vW);
    } else if (i.next != 33 && i.next != 63)
      return i.acceptToken(uO);
  }
}, { contextual: !0 });
function ym(i, e) {
  return new Ze((t) => {
    let n = 0, r = e.charCodeAt(0);
    e: for (; !(t.next < 0); t.advance(), n++)
      if (t.next == r) {
        for (let s = 1; s < e.length; s++)
          if (t.peek(s) != e.charCodeAt(s)) continue e;
        break;
      }
    n && t.acceptToken(i);
  });
}
const _W = ym(PW, "-->"), XW = ym($W, "?>"), LW = ym(TW, "]]>"), BW = ki({
  Text: y.content,
  "StartTag StartCloseTag EndTag SelfCloseEndTag": y.angleBracket,
  TagName: y.tagName,
  "MismatchedCloseTag/TagName": [y.tagName, y.invalid],
  AttributeName: y.attributeName,
  AttributeValue: y.attributeValue,
  Is: y.definitionOperator,
  "EntityReference CharacterReference": y.character,
  Comment: y.blockComment,
  ProcessingInst: y.processingInstruction,
  DoctypeDecl: y.documentMeta,
  Cdata: y.special(y.string)
}), ZW = bi.deserialize({
  version: 14,
  states: ",lOQOaOOOrOxO'#CfOzOpO'#CiO!tOaO'#CgOOOP'#Cg'#CgO!{OrO'#CrO#TOtO'#CsO#]OpO'#CtOOOP'#DT'#DTOOOP'#Cv'#CvQQOaOOOOOW'#Cw'#CwO#eOxO,59QOOOP,59Q,59QOOOO'#Cx'#CxO#mOpO,59TO#uO!bO,59TOOOP'#C|'#C|O$TOaO,59RO$[OpO'#CoOOOP,59R,59ROOOQ'#C}'#C}O$dOrO,59^OOOP,59^,59^OOOS'#DO'#DOO$lOtO,59_OOOP,59_,59_O$tOpO,59`O$|OpO,59`OOOP-E6t-E6tOOOW-E6u-E6uOOOP1G.l1G.lOOOO-E6v-E6vO%UO!bO1G.oO%UO!bO1G.oO%dOpO'#CkO%lO!bO'#CyO%zO!bO1G.oOOOP1G.o1G.oOOOP1G.w1G.wOOOP-E6z-E6zOOOP1G.m1G.mO&VOpO,59ZO&_OpO,59ZOOOQ-E6{-E6{OOOP1G.x1G.xOOOS-E6|-E6|OOOP1G.y1G.yO&gOpO1G.zO&gOpO1G.zOOOP1G.z1G.zO&oO!bO7+$ZO&}O!bO7+$ZOOOP7+$Z7+$ZOOOP7+$c7+$cO'YOpO,59VO'bOpO,59VO'mO!bO,59eOOOO-E6w-E6wO'{OpO1G.uO'{OpO1G.uOOOP1G.u1G.uO(TOpO7+$fOOOP7+$f7+$fO(]O!bO<<GuOOOP<<Gu<<GuOOOP<<G}<<G}O'bOpO1G.qO'bOpO1G.qO(hO#tO'#CnO(vO&jO'#CnOOOO1G.q1G.qO)UOpO7+$aOOOP7+$a7+$aOOOP<<HQ<<HQOOOPAN=aAN=aOOOPAN=iAN=iO'bOpO7+$]OOOO7+$]7+$]OOOO'#Cz'#CzO)^O#tO,59YOOOO,59Y,59YOOOO'#C{'#C{O)lO&jO,59YOOOP<<G{<<G{OOOO<<Gw<<GwOOOO-E6x-E6xOOOO1G.t1G.tOOOO-E6y-E6y",
  stateData: ")z~OPQOSVOTWOVWOWWOXWOiXOyPO!QTO!SUO~OvZOx]O~O^`Oz^O~OPQOQcOSVOTWOVWOWWOXWOyPO!QTO!SUO~ORdO~P!SOteO!PgO~OuhO!RjO~O^lOz^O~OvZOxoO~O^qOz^O~O[vO`sOdwOz^O~ORyO~P!SO^{Oz^O~OteO!P}O~OuhO!R!PO~O^!QOz^O~O[!SOz^O~O[!VO`sOd!WOz^O~Oa!YOz^O~Oz^O[mX`mXdmX~O[!VO`sOd!WO~O^!]Oz^O~O[!_Oz^O~O[!aOz^O~O[!cO`sOd!dOz^O~O[!cO`sOd!dO~Oa!eOz^O~Oz^O{!gO}!hO~Oz^O[ma`madma~O[!kOz^O~O[!lOz^O~O[!mO`sOd!nO~OW!qOX!qO{!sO|!qO~OW!tOX!tO}!sO!O!tO~O[!vOz^O~OW!qOX!qO{!yO|!qO~OW!tOX!tO}!yO!O!tO~O",
  goto: "%cxPPPPPPPPPPyyP!PP!VPP!`!jP!pyyyP!v!|#S$[$k$q$w$}%TPPPP%ZXWORYbXRORYb_t`qru!T!U!bQ!i!YS!p!e!fR!w!oQdRRybXSORYbQYORmYQ[PRn[Q_QQkVjp_krz!R!T!X!Z!^!`!f!j!oQr`QzcQ!RlQ!TqQ!XsQ!ZtQ!^{Q!`!QQ!f!YQ!j!]R!o!eQu`S!UqrU![u!U!bR!b!TQ!r!gR!x!rQ!u!hR!z!uQbRRxbQfTR|fQiUR!OiSXOYTaRb",
  nodeNames: "⚠ StartTag StartCloseTag MissingCloseTag StartCloseTag StartCloseTag Document Text EntityReference CharacterReference Cdata Element EndTag OpenTag TagName Attribute AttributeName Is AttributeValue CloseTag SelfCloseEndTag SelfClosingTag Comment ProcessingInst MismatchedCloseTag DoctypeDecl",
  maxTerm: 50,
  context: MW,
  nodeProps: [
    ["closedBy", 1, "SelfCloseEndTag EndTag", 13, "CloseTag MissingCloseTag"],
    ["openedBy", 12, "StartTag StartCloseTag", 19, "OpenTag", 20, "StartTag"],
    ["isolate", -6, 13, 18, 19, 21, 22, 24, ""]
  ],
  propSources: [BW],
  skippedNodes: [0],
  repeatNodeCount: 9,
  tokenData: "!)v~R!YOX$qXY)iYZ)iZ]$q]^)i^p$qpq)iqr$qrs*vsv$qvw+fwx/ix}$q}!O0[!O!P$q!P!Q2z!Q![$q![!]4n!]!^$q!^!_8U!_!`!#t!`!a!$l!a!b!%d!b!c$q!c!}4n!}#P$q#P#Q!'W#Q#R$q#R#S4n#S#T$q#T#o4n#o%W$q%W%o4n%o%p$q%p&a4n&a&b$q&b1p4n1p4U$q4U4d4n4d4e$q4e$IS4n$IS$I`$q$I`$Ib4n$Ib$Kh$q$Kh%#t4n%#t&/x$q&/x&Et4n&Et&FV$q&FV;'S4n;'S;:j8O;:j;=`)c<%l?&r$q?&r?Ah4n?Ah?BY$q?BY?Mn4n?MnO$qi$zXVP|W!O`Or$qrs%gsv$qwx'^x!^$q!^!_(o!_;'S$q;'S;=`)c<%lO$qa%nVVP!O`Ov%gwx&Tx!^%g!^!_&o!_;'S%g;'S;=`'W<%lO%gP&YTVPOv&Tw!^&T!_;'S&T;'S;=`&i<%lO&TP&lP;=`<%l&T`&tS!O`Ov&ox;'S&o;'S;=`'Q<%lO&o`'TP;=`<%l&oa'ZP;=`<%l%gX'eWVP|WOr'^rs&Tsv'^w!^'^!^!_'}!_;'S'^;'S;=`(i<%lO'^W(ST|WOr'}sv'}w;'S'};'S;=`(c<%lO'}W(fP;=`<%l'}X(lP;=`<%l'^h(vV|W!O`Or(ors&osv(owx'}x;'S(o;'S;=`)]<%lO(oh)`P;=`<%l(oi)fP;=`<%l$qo)t`VP|W!O`zUOX$qXY)iYZ)iZ]$q]^)i^p$qpq)iqr$qrs%gsv$qwx'^x!^$q!^!_(o!_;'S$q;'S;=`)c<%lO$qk+PV{YVP!O`Ov%gwx&Tx!^%g!^!_&o!_;'S%g;'S;=`'W<%lO%g~+iast,n![!]-r!c!}-r#R#S-r#T#o-r%W%o-r%p&a-r&b1p-r4U4d-r4e$IS-r$I`$Ib-r$Kh%#t-r&/x&Et-r&FV;'S-r;'S;:j/c?&r?Ah-r?BY?Mn-r~,qQ!Q![,w#l#m-V~,zQ!Q![,w!]!^-Q~-VOX~~-YR!Q![-c!c!i-c#T#Z-c~-fS!Q![-c!]!^-Q!c!i-c#T#Z-c~-ug}!O-r!O!P-r!Q![-r![!]-r!]!^/^!c!}-r#R#S-r#T#o-r$}%O-r%W%o-r%p&a-r&b1p-r1p4U-r4U4d-r4e$IS-r$I`$Ib-r$Je$Jg-r$Kh%#t-r&/x&Et-r&FV;'S-r;'S;:j/c?&r?Ah-r?BY?Mn-r~/cOW~~/fP;=`<%l-rk/rW}bVP|WOr'^rs&Tsv'^w!^'^!^!_'}!_;'S'^;'S;=`(i<%lO'^k0eZVP|W!O`Or$qrs%gsv$qwx'^x}$q}!O1W!O!^$q!^!_(o!_;'S$q;'S;=`)c<%lO$qk1aZVP|W!O`Or$qrs%gsv$qwx'^x!^$q!^!_(o!_!`$q!`!a2S!a;'S$q;'S;=`)c<%lO$qk2_X!PQVP|W!O`Or$qrs%gsv$qwx'^x!^$q!^!_(o!_;'S$q;'S;=`)c<%lO$qm3TZVP|W!O`Or$qrs%gsv$qwx'^x!^$q!^!_(o!_!`$q!`!a3v!a;'S$q;'S;=`)c<%lO$qm4RXdSVP|W!O`Or$qrs%gsv$qwx'^x!^$q!^!_(o!_;'S$q;'S;=`)c<%lO$qo4{!P`S^QVP|W!O`Or$qrs%gsv$qwx'^x}$q}!O4n!O!P4n!P!Q$q!Q![4n![!]4n!]!^$q!^!_(o!_!c$q!c!}4n!}#R$q#R#S4n#S#T$q#T#o4n#o$}$q$}%O4n%O%W$q%W%o4n%o%p$q%p&a4n&a&b$q&b1p4n1p4U4n4U4d4n4d4e$q4e$IS4n$IS$I`$q$I`$Ib4n$Ib$Je$q$Je$Jg4n$Jg$Kh$q$Kh%#t4n%#t&/x$q&/x&Et4n&Et&FV$q&FV;'S4n;'S;:j8O;:j;=`)c<%l?&r$q?&r?Ah4n?Ah?BY$q?BY?Mn4n?MnO$qo8RP;=`<%l4ni8]Y|W!O`Oq(oqr8{rs&osv(owx'}x!a(o!a!b!#U!b;'S(o;'S;=`)]<%lO(oi9S_|W!O`Or(ors&osv(owx'}x}(o}!O:R!O!f(o!f!g;e!g!}(o!}#ODh#O#W(o#W#XLp#X;'S(o;'S;=`)]<%lO(oi:YX|W!O`Or(ors&osv(owx'}x}(o}!O:u!O;'S(o;'S;=`)]<%lO(oi;OV!QP|W!O`Or(ors&osv(owx'}x;'S(o;'S;=`)]<%lO(oi;lX|W!O`Or(ors&osv(owx'}x!q(o!q!r<X!r;'S(o;'S;=`)]<%lO(oi<`X|W!O`Or(ors&osv(owx'}x!e(o!e!f<{!f;'S(o;'S;=`)]<%lO(oi=SX|W!O`Or(ors&osv(owx'}x!v(o!v!w=o!w;'S(o;'S;=`)]<%lO(oi=vX|W!O`Or(ors&osv(owx'}x!{(o!{!|>c!|;'S(o;'S;=`)]<%lO(oi>jX|W!O`Or(ors&osv(owx'}x!r(o!r!s?V!s;'S(o;'S;=`)]<%lO(oi?^X|W!O`Or(ors&osv(owx'}x!g(o!g!h?y!h;'S(o;'S;=`)]<%lO(oi@QY|W!O`Or?yrs@psv?yvwA[wxBdx!`?y!`!aCr!a;'S?y;'S;=`Db<%lO?ya@uV!O`Ov@pvxA[x!`@p!`!aAy!a;'S@p;'S;=`B^<%lO@pPA_TO!`A[!`!aAn!a;'SA[;'S;=`As<%lOA[PAsOiPPAvP;=`<%lA[aBQSiP!O`Ov&ox;'S&o;'S;=`'Q<%lO&oaBaP;=`<%l@pXBiX|WOrBdrsA[svBdvwA[w!`Bd!`!aCU!a;'SBd;'S;=`Cl<%lOBdXC]TiP|WOr'}sv'}w;'S'};'S;=`(c<%lO'}XCoP;=`<%lBdiC{ViP|W!O`Or(ors&osv(owx'}x;'S(o;'S;=`)]<%lO(oiDeP;=`<%l?yiDoZ|W!O`Or(ors&osv(owx'}x!e(o!e!fEb!f#V(o#V#WIr#W;'S(o;'S;=`)]<%lO(oiEiX|W!O`Or(ors&osv(owx'}x!f(o!f!gFU!g;'S(o;'S;=`)]<%lO(oiF]X|W!O`Or(ors&osv(owx'}x!c(o!c!dFx!d;'S(o;'S;=`)]<%lO(oiGPX|W!O`Or(ors&osv(owx'}x!v(o!v!wGl!w;'S(o;'S;=`)]<%lO(oiGsX|W!O`Or(ors&osv(owx'}x!c(o!c!dH`!d;'S(o;'S;=`)]<%lO(oiHgX|W!O`Or(ors&osv(owx'}x!}(o!}#OIS#O;'S(o;'S;=`)]<%lO(oiI]V|W!O`yPOr(ors&osv(owx'}x;'S(o;'S;=`)]<%lO(oiIyX|W!O`Or(ors&osv(owx'}x#W(o#W#XJf#X;'S(o;'S;=`)]<%lO(oiJmX|W!O`Or(ors&osv(owx'}x#T(o#T#UKY#U;'S(o;'S;=`)]<%lO(oiKaX|W!O`Or(ors&osv(owx'}x#h(o#h#iK|#i;'S(o;'S;=`)]<%lO(oiLTX|W!O`Or(ors&osv(owx'}x#T(o#T#UH`#U;'S(o;'S;=`)]<%lO(oiLwX|W!O`Or(ors&osv(owx'}x#c(o#c#dMd#d;'S(o;'S;=`)]<%lO(oiMkX|W!O`Or(ors&osv(owx'}x#V(o#V#WNW#W;'S(o;'S;=`)]<%lO(oiN_X|W!O`Or(ors&osv(owx'}x#h(o#h#iNz#i;'S(o;'S;=`)]<%lO(oi! RX|W!O`Or(ors&osv(owx'}x#m(o#m#n! n#n;'S(o;'S;=`)]<%lO(oi! uX|W!O`Or(ors&osv(owx'}x#d(o#d#e!!b#e;'S(o;'S;=`)]<%lO(oi!!iX|W!O`Or(ors&osv(owx'}x#X(o#X#Y?y#Y;'S(o;'S;=`)]<%lO(oi!#_V!SP|W!O`Or(ors&osv(owx'}x;'S(o;'S;=`)]<%lO(ok!$PXaQVP|W!O`Or$qrs%gsv$qwx'^x!^$q!^!_(o!_;'S$q;'S;=`)c<%lO$qo!$wX[UVP|W!O`Or$qrs%gsv$qwx'^x!^$q!^!_(o!_;'S$q;'S;=`)c<%lO$qk!%mZVP|W!O`Or$qrs%gsv$qwx'^x!^$q!^!_(o!_!`$q!`!a!&`!a;'S$q;'S;=`)c<%lO$qk!&kX!RQVP|W!O`Or$qrs%gsv$qwx'^x!^$q!^!_(o!_;'S$q;'S;=`)c<%lO$qk!'aZVP|W!O`Or$qrs%gsv$qwx'^x!^$q!^!_(o!_#P$q#P#Q!(S#Q;'S$q;'S;=`)c<%lO$qk!(]ZVP|W!O`Or$qrs%gsv$qwx'^x!^$q!^!_(o!_!`$q!`!a!)O!a;'S$q;'S;=`)c<%lO$qk!)ZXxQVP|W!O`Or$qrs%gsv$qwx'^x!^$q!^!_(o!_;'S$q;'S;=`)c<%lO$q",
  tokenizers: [qW, _W, XW, LW, 0, 1, 2, 3, 4],
  topRules: { Document: [0, 6] },
  tokenPrec: 0
});
function Ka(i, e) {
  let t = e && e.getChild("TagName");
  return t ? i.sliceString(t.from, t.to) : "";
}
function Gf(i, e) {
  let t = e && e.firstChild;
  return !t || t.name != "OpenTag" ? "" : Ka(i, t);
}
function DW(i, e, t) {
  let n = e && e.getChildren("Attribute").find((s) => s.from <= t && s.to >= t), r = n && n.getChild("AttributeName");
  return r ? i.sliceString(r.from, r.to) : "";
}
function Ff(i) {
  for (let e = i && i.parent; e; e = e.parent)
    if (e.name == "Element")
      return e;
  return null;
}
function VW(i, e) {
  var t;
  let n = ye(i).resolveInner(e, -1), r = null;
  for (let s = n; !r && s.parent; s = s.parent)
    (s.name == "OpenTag" || s.name == "CloseTag" || s.name == "SelfClosingTag" || s.name == "MismatchedCloseTag") && (r = s);
  if (r && (r.to > e || r.lastChild.type.isError)) {
    let s = r.parent;
    if (n.name == "TagName")
      return r.name == "CloseTag" || r.name == "MismatchedCloseTag" ? { type: "closeTag", from: n.from, context: s } : { type: "openTag", from: n.from, context: Ff(s) };
    if (n.name == "AttributeName")
      return { type: "attrName", from: n.from, context: r };
    if (n.name == "AttributeValue")
      return { type: "attrValue", from: n.from, context: r };
    let o = n == r || n.name == "Attribute" ? n.childBefore(e) : n;
    return o?.name == "StartTag" ? { type: "openTag", from: e, context: Ff(s) } : o?.name == "StartCloseTag" && o.to <= e ? { type: "closeTag", from: e, context: s } : o?.name == "Is" ? { type: "attrValue", from: e, context: r } : o ? { type: "attrName", from: e, context: r } : null;
  } else if (n.name == "StartCloseTag")
    return { type: "closeTag", from: e, context: n.parent };
  for (; n.parent && n.to == e && !(!((t = n.lastChild) === null || t === void 0) && t.type.isError); )
    n = n.parent;
  return n.name == "Element" || n.name == "Text" || n.name == "Document" ? { type: "tag", from: e, context: n.name == "Element" ? n : Ff(n) } : null;
}
let WW = class {
  constructor(e, t, n) {
    this.attrs = t, this.attrValues = n, this.children = [], this.name = e.name, this.completion = Object.assign(Object.assign({ type: "type" }, e.completion || {}), { label: this.name }), this.openCompletion = Object.assign(Object.assign({}, this.completion), { label: "<" + this.name }), this.closeCompletion = Object.assign(Object.assign({}, this.completion), { label: "</" + this.name + ">", boost: 2 }), this.closeNameCompletion = Object.assign(Object.assign({}, this.completion), { label: this.name + ">" }), this.text = e.textContent ? e.textContent.map((r) => ({ label: r, type: "text" })) : [];
  }
};
const Hf = /^[:\-\.\w\u00b7-\uffff]*$/;
function vy(i) {
  return Object.assign(Object.assign({ type: "property" }, i.completion || {}), { label: i.name });
}
function Qy(i) {
  return typeof i == "string" ? { label: `"${i}"`, type: "constant" } : /^"/.test(i.label) ? i : Object.assign(Object.assign({}, i), { label: `"${i.label}"` });
}
function zW(i, e) {
  let t = [], n = [], r = /* @__PURE__ */ Object.create(null);
  for (let a of e) {
    let h = vy(a);
    t.push(h), a.global && n.push(h), a.values && (r[a.name] = a.values.map(Qy));
  }
  let s = [], o = [], l = /* @__PURE__ */ Object.create(null);
  for (let a of i) {
    let h = n, c = r;
    a.attributes && (h = h.concat(a.attributes.map((u) => typeof u == "string" ? t.find((d) => d.label == u) || { label: u, type: "property" } : (u.values && (c == r && (c = Object.create(c)), c[u.name] = u.values.map(Qy)), vy(u)))));
    let f = new WW(a, h, c);
    l[f.name] = f, s.push(f), a.top && o.push(f);
  }
  o.length || (o = s);
  for (let a = 0; a < s.length; a++) {
    let h = i[a], c = s[a];
    if (h.children)
      for (let f of h.children)
        l[f] && c.children.push(l[f]);
    else
      c.children = s;
  }
  return (a) => {
    var h;
    let { doc: c } = a.state, f = VW(a.state, a.pos);
    if (!f || f.type == "tag" && !a.explicit)
      return null;
    let { type: u, from: d, context: O } = f;
    if (u == "openTag") {
      let p = o, m = Gf(c, O);
      if (m) {
        let g = l[m];
        p = g?.children || s;
      }
      return {
        from: d,
        options: p.map((g) => g.completion),
        validFor: Hf
      };
    } else if (u == "closeTag") {
      let p = Gf(c, O);
      return p ? {
        from: d,
        to: a.pos + (c.sliceString(a.pos, a.pos + 1) == ">" ? 1 : 0),
        options: [((h = l[p]) === null || h === void 0 ? void 0 : h.closeNameCompletion) || { label: p + ">", type: "type" }],
        validFor: Hf
      } : null;
    } else if (u == "attrName") {
      let p = l[Ka(c, O)];
      return {
        from: d,
        options: p?.attrs || n,
        validFor: Hf
      };
    } else if (u == "attrValue") {
      let p = DW(c, O, d);
      if (!p)
        return null;
      let m = l[Ka(c, O)], g = (m?.attrValues || r)[p];
      return !g || !g.length ? null : {
        from: d,
        to: a.pos + (c.sliceString(a.pos, a.pos + 1) == '"' ? 1 : 0),
        options: g,
        validFor: /^"[^"]*"?$/
      };
    } else if (u == "tag") {
      let p = Gf(c, O), m = l[p], g = [], S = O && O.lastChild;
      p && (!S || S.name != "CloseTag" || Ka(c, S) != p) && g.push(m ? m.closeCompletion : { label: "</" + p + ">", type: "type", boost: 2 });
      let x = g.concat((m?.children || (O ? s : o)).map((k) => k.openCompletion));
      if (O && m?.text.length) {
        let k = O.firstChild;
        k.to > a.pos - 20 && !/\S/.test(a.state.sliceDoc(k.to, a.pos)) && (x = x.concat(m.text));
      }
      return {
        from: d,
        options: x,
        validFor: /^<\/?[:\-\.\w\u00b7-\uffff]*$/
      };
    } else
      return null;
  };
}
const OO = /* @__PURE__ */ Si.define({
  name: "xml",
  parser: /* @__PURE__ */ ZW.configure({
    props: [
      /* @__PURE__ */ Ji.add({
        Element(i) {
          let e = /^\s*<\//.test(i.textAfter);
          return i.lineIndent(i.node.from) + (e ? 0 : i.unit);
        },
        "OpenTag CloseTag SelfClosingTag"(i) {
          return i.column(i.node.from) + i.unit;
        }
      }),
      /* @__PURE__ */ vi.add({
        Element(i) {
          let e = i.firstChild, t = i.lastChild;
          return !e || e.name != "OpenTag" ? null : { from: e.to, to: t.name == "CloseTag" ? t.from : i.to };
        }
      }),
      /* @__PURE__ */ Zp.add({
        "OpenTag CloseTag": (i) => i.getChild("TagName")
      })
    ]
  }),
  languageData: {
    commentTokens: { block: { open: "<!--", close: "-->" } },
    indentOnInput: /^\s*<\/$/
  }
});
function IW(i = {}) {
  let e = [OO.data.of({
    autocomplete: zW(i.elements || [], i.attributes || [])
  })];
  return i.autoCloseTags !== !1 && e.push(NW), new Gi(OO, e);
}
function Py(i, e, t = i.length) {
  if (!e)
    return "";
  let n = e.firstChild, r = n && n.getChild("TagName");
  return r ? i.sliceString(r.from, Math.min(r.to, t)) : "";
}
const NW = /* @__PURE__ */ W.inputHandler.of((i, e, t, n, r) => {
  if (i.composing || i.state.readOnly || e != t || n != ">" && n != "/" || !OO.isActiveAt(i.state, e, -1))
    return !1;
  let s = r(), { state: o } = s, l = o.changeByRange((a) => {
    var h, c, f;
    let { head: u } = a, d = o.doc.sliceString(u - 1, u) == n, O = ye(o).resolveInner(u, -1), p;
    if (d && n == ">" && O.name == "EndTag") {
      let m = O.parent;
      if (((c = (h = m.parent) === null || h === void 0 ? void 0 : h.lastChild) === null || c === void 0 ? void 0 : c.name) != "CloseTag" && (p = Py(o.doc, m.parent, u))) {
        let g = u + (o.doc.sliceString(u, u + 1) === ">" ? 1 : 0), S = `</${p}>`;
        return { range: a, changes: { from: u, to: g, insert: S } };
      }
    } else if (d && n == "/" && O.name == "StartCloseTag") {
      let m = O.parent;
      if (O.from == u - 2 && ((f = m.lastChild) === null || f === void 0 ? void 0 : f.name) != "CloseTag" && (p = Py(o.doc, m, u))) {
        let g = u + (o.doc.sliceString(u, u + 1) === ">" ? 1 : 0), S = `${p}>`;
        return {
          range: C.cursor(u + S.length, -1),
          changes: { from: u, to: g, insert: S }
        };
      }
    }
    return { range: a };
  });
  return l.changes.empty ? !1 : (i.dispatch([
    s,
    o.update(l, {
      userEvent: "input.complete",
      scrollIntoView: !0
    })
  ]), !0);
}), jW = ki({
  String: y.string,
  Number: y.number,
  "True False": y.bool,
  PropertyName: y.propertyName,
  Null: y.null,
  ", :": y.separator,
  "[ ]": y.squareBracket,
  "{ }": y.brace
}), UW = bi.deserialize({
  version: 14,
  states: "$bOVQPOOOOQO'#Cb'#CbOnQPO'#CeOvQPO'#ClOOQO'#Cr'#CrQOQPOOOOQO'#Cg'#CgO}QPO'#CfO!SQPO'#CtOOQO,59P,59PO![QPO,59PO!aQPO'#CuOOQO,59W,59WO!iQPO,59WOVQPO,59QOqQPO'#CmO!nQPO,59`OOQO1G.k1G.kOVQPO'#CnO!vQPO,59aOOQO1G.r1G.rOOQO1G.l1G.lOOQO,59X,59XOOQO-E6k-E6kOOQO,59Y,59YOOQO-E6l-E6l",
  stateData: "#O~OeOS~OQSORSOSSOTSOWQO_ROgPO~OVXOgUO~O^[O~PVO[^O~O]_OVhX~OVaO~O]bO^iX~O^dO~O]_OVha~O]bO^ia~O",
  goto: "!kjPPPPPPkPPkqwPPPPk{!RPPP!XP!e!hXSOR^bQWQRf_TVQ_Q`WRg`QcZRicQTOQZRQe^RhbRYQR]R",
  nodeNames: "⚠ JsonText True False Null Number String } { Object Property PropertyName : , ] [ Array",
  maxTerm: 25,
  nodeProps: [
    ["isolate", -2, 6, 11, ""],
    ["openedBy", 7, "{", 14, "["],
    ["closedBy", 8, "}", 15, "]"]
  ],
  propSources: [jW],
  skippedNodes: [0],
  repeatNodeCount: 2,
  tokenData: "(|~RaXY!WYZ!W]^!Wpq!Wrs!]|}$u}!O$z!Q!R%T!R![&c![!]&t!}#O&y#P#Q'O#Y#Z'T#b#c'r#h#i(Z#o#p(r#q#r(w~!]Oe~~!`Wpq!]qr!]rs!xs#O!]#O#P!}#P;'S!];'S;=`$o<%lO!]~!}Og~~#QXrs!]!P!Q!]#O#P!]#U#V!]#Y#Z!]#b#c!]#f#g!]#h#i!]#i#j#m~#pR!Q![#y!c!i#y#T#Z#y~#|R!Q![$V!c!i$V#T#Z$V~$YR!Q![$c!c!i$c#T#Z$c~$fR!Q![!]!c!i!]#T#Z!]~$rP;=`<%l!]~$zO]~~$}Q!Q!R%T!R![&c~%YRT~!O!P%c!g!h%w#X#Y%w~%fP!Q![%i~%nRT~!Q![%i!g!h%w#X#Y%w~%zR{|&T}!O&T!Q![&Z~&WP!Q![&Z~&`PT~!Q![&Z~&hST~!O!P%c!Q![&c!g!h%w#X#Y%w~&yO[~~'OO_~~'TO^~~'WP#T#U'Z~'^P#`#a'a~'dP#g#h'g~'jP#X#Y'm~'rOR~~'uP#i#j'x~'{P#`#a(O~(RP#`#a(U~(ZOS~~(^P#f#g(a~(dP#i#j(g~(jP#X#Y(m~(rOQ~~(wOW~~(|OV~",
  tokenizers: [0],
  topRules: { JsonText: [0, 1] },
  tokenPrec: 0
}), YW = /* @__PURE__ */ Si.define({
  name: "json",
  parser: /* @__PURE__ */ UW.configure({
    props: [
      /* @__PURE__ */ Ji.add({
        Object: /* @__PURE__ */ Or({ except: /^\s*\}/ }),
        Array: /* @__PURE__ */ Or({ except: /^\s*\]/ })
      }),
      /* @__PURE__ */ vi.add({
        "Object Array": Ql
      })
    ]
  }),
  languageData: {
    closeBrackets: { brackets: ["[", "{", '"'] },
    indentOnInput: /^\s*[\}\]]$/
  }
});
function GW() {
  return new Gi(YW);
}
function FW(i) {
  switch (i.split(".").pop()?.toLowerCase()) {
    case "js":
    case "ts":
      return Cv();
    case "json":
      return GW();
    case "html":
      return wQ();
    case "css":
      return dQ();
    case "md":
      return ZD();
    case "xml":
      return IW();
    case "py":
      return N4();
    case "yml":
    case "yaml":
      return xW();
    case "sql":
      return CV();
    default:
      return [];
  }
}
const HW = 1024;
let KW = 0, Kf = class {
  constructor(e, t) {
    this.from = e, this.to = t;
  }
};
class Re {
  /// Create a new node prop type.
  constructor(e = {}) {
    this.id = KW++, this.perNode = !!e.perNode, this.deserialize = e.deserialize || (() => {
      throw new Error("This node type doesn't define a deserialize function");
    });
  }
  /// This is meant to be used with
  /// [`NodeSet.extend`](#common.NodeSet.extend) or
  /// [`LRParser.configure`](#lr.ParserConfig.props) to compute
  /// prop values for each node type in the set. Takes a [match
  /// object](#common.NodeType^match) or function that returns undefined
  /// if the node type doesn't get this prop, and the prop's value if
  /// it does.
  add(e) {
    if (this.perNode)
      throw new RangeError("Can't add per-node props to node types");
    return typeof e != "function" && (e = xi.match(e)), (t) => {
      let n = e(t);
      return n === void 0 ? null : [this, n];
    };
  }
}
Re.closedBy = new Re({ deserialize: (i) => i.split(" ") });
Re.openedBy = new Re({ deserialize: (i) => i.split(" ") });
Re.group = new Re({ deserialize: (i) => i.split(" ") });
Re.contextHash = new Re({ perNode: !0 });
Re.lookAhead = new Re({ perNode: !0 });
Re.mounted = new Re({ perNode: !0 });
const JW = /* @__PURE__ */ Object.create(null);
class xi {
  /// @internal
  constructor(e, t, n, r = 0) {
    this.name = e, this.props = t, this.id = n, this.flags = r;
  }
  static define(e) {
    let t = e.props && e.props.length ? /* @__PURE__ */ Object.create(null) : JW, n = (e.top ? 1 : 0) | (e.skipped ? 2 : 0) | (e.error ? 4 : 0) | (e.name == null ? 8 : 0), r = new xi(e.name || "", t, e.id, n);
    if (e.props) {
      for (let s of e.props)
        if (Array.isArray(s) || (s = s(r)), s) {
          if (s[0].perNode)
            throw new RangeError("Can't store a per-node prop on a node type");
          t[s[0].id] = s[1];
        }
    }
    return r;
  }
  /// Retrieves a node prop for this type. Will return `undefined` if
  /// the prop isn't present on this node.
  prop(e) {
    return this.props[e.id];
  }
  /// True when this is the top node of a grammar.
  get isTop() {
    return (this.flags & 1) > 0;
  }
  /// True when this node is produced by a skip rule.
  get isSkipped() {
    return (this.flags & 2) > 0;
  }
  /// Indicates whether this is an error node.
  get isError() {
    return (this.flags & 4) > 0;
  }
  /// When true, this node type doesn't correspond to a user-declared
  /// named node, for example because it is used to cache repetition.
  get isAnonymous() {
    return (this.flags & 8) > 0;
  }
  /// Returns true when this node's name or one of its
  /// [groups](#common.NodeProp^group) matches the given string.
  is(e) {
    if (typeof e == "string") {
      if (this.name == e)
        return !0;
      let t = this.prop(Re.group);
      return t ? t.indexOf(e) > -1 : !1;
    }
    return this.id == e;
  }
  /// Create a function from node types to arbitrary values by
  /// specifying an object whose property names are node or
  /// [group](#common.NodeProp^group) names. Often useful with
  /// [`NodeProp.add`](#common.NodeProp.add). You can put multiple
  /// names, separated by spaces, in a single property name to map
  /// multiple node names to a single value.
  static match(e) {
    let t = /* @__PURE__ */ Object.create(null);
    for (let n in e)
      for (let r of n.split(" "))
        t[r] = e[n];
    return (n) => {
      for (let r = n.prop(Re.group), s = -1; s < (r ? r.length : 0); s++) {
        let o = t[s < 0 ? n.name : r[s]];
        if (o)
          return o;
      }
    };
  }
}
xi.none = new xi(
  "",
  /* @__PURE__ */ Object.create(null),
  0,
  8
  /* Anonymous */
);
const ua = /* @__PURE__ */ new WeakMap(), $y = /* @__PURE__ */ new WeakMap();
class pt {
  /// Construct a new tree. See also [`Tree.build`](#common.Tree^build).
  constructor(e, t, n, r, s) {
    if (this.type = e, this.children = t, this.positions = n, this.length = r, this.props = null, s && s.length) {
      this.props = /* @__PURE__ */ Object.create(null);
      for (let [o, l] of s)
        this.props[typeof o == "number" ? o : o.id] = l;
    }
  }
  /// @internal
  toString() {
    let e = this.prop(Re.mounted);
    if (e && !e.overlay)
      return e.tree.toString();
    let t = "";
    for (let n of this.children) {
      let r = n.toString();
      r && (t && (t += ","), t += r);
    }
    return this.type.name ? (/\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) + (t.length ? "(" + t + ")" : "") : t;
  }
  /// Get a [tree cursor](#common.TreeCursor) rooted at this tree. When
  /// `pos` is given, the cursor is [moved](#common.TreeCursor.moveTo)
  /// to the given position and side.
  cursor(e, t = 0) {
    let n = e != null && ua.get(this) || this.topNode, r = new jh(n);
    return e != null && (r.moveTo(e, t), ua.set(this, r._tree)), r;
  }
  /// Get a [tree cursor](#common.TreeCursor) that, unlike regular
  /// cursors, doesn't skip through
  /// [anonymous](#common.NodeType.isAnonymous) nodes and doesn't
  /// automatically enter mounted nodes.
  fullCursor() {
    return new jh(
      this.topNode,
      1
      /* Full */
    );
  }
  /// Get a [syntax node](#common.SyntaxNode) object for the top of the
  /// tree.
  get topNode() {
    return new pn(this, 0, 0, null);
  }
  /// Get the [syntax node](#common.SyntaxNode) at the given position.
  /// If `side` is -1, this will move into nodes that end at the
  /// position. If 1, it'll move into nodes that start at the
  /// position. With 0, it'll only enter nodes that cover the position
  /// from both sides.
  resolve(e, t = 0) {
    let n = ws(ua.get(this) || this.topNode, e, t, !1);
    return ua.set(this, n), n;
  }
  /// Like [`resolve`](#common.Tree.resolve), but will enter
  /// [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node
  /// pointing into the innermost overlaid tree at the given position
  /// (with parent links going through all parent structure, including
  /// the host trees).
  resolveInner(e, t = 0) {
    let n = ws($y.get(this) || this.topNode, e, t, !0);
    return $y.set(this, n), n;
  }
  /// Iterate over the tree and its children, calling `enter` for any
  /// node that touches the `from`/`to` region (if given) before
  /// running over such a node's children, and `leave` (if given) when
  /// leaving the node. When `enter` returns `false`, that node will
  /// not have its children iterated over (or `leave` called).
  iterate(e) {
    let { enter: t, leave: n, from: r = 0, to: s = this.length } = e;
    for (let o = this.cursor(), l = () => o.node; ; ) {
      let a = !1;
      if (o.from <= s && o.to >= r && (o.type.isAnonymous || t(o.type, o.from, o.to, l) !== !1)) {
        if (o.firstChild())
          continue;
        o.type.isAnonymous || (a = !0);
      }
      for (; a && n && n(o.type, o.from, o.to, l), a = o.type.isAnonymous, !o.nextSibling(); ) {
        if (!o.parent())
          return;
        a = !0;
      }
    }
  }
  /// Get the value of the given [node prop](#common.NodeProp) for this
  /// node. Works with both per-node and per-type props.
  prop(e) {
    return e.perNode ? this.props ? this.props[e.id] : void 0 : this.type.prop(e);
  }
  /// Returns the node's [per-node props](#common.NodeProp.perNode) in a
  /// format that can be passed to the [`Tree`](#common.Tree)
  /// constructor.
  get propValues() {
    let e = [];
    if (this.props)
      for (let t in this.props)
        e.push([+t, this.props[t]]);
    return e;
  }
  /// Balance the direct children of this tree, producing a copy of
  /// which may have children grouped into subtrees with type
  /// [`NodeType.none`](#common.NodeType^none).
  balance(e = {}) {
    return this.children.length <= 8 ? this : xm(xi.none, this.children, this.positions, 0, this.children.length, 0, this.length, (t, n, r) => new pt(this.type, t, n, r, this.propValues), e.makeTree || ((t, n, r) => new pt(xi.none, t, n, r)));
  }
  /// Build a tree from a postfix-ordered buffer of node information,
  /// or a cursor over such a buffer.
  static build(e) {
    return t3(e);
  }
}
pt.empty = new pt(xi.none, [], [], 0);
class Sm {
  constructor(e, t) {
    this.buffer = e, this.index = t;
  }
  get id() {
    return this.buffer[this.index - 4];
  }
  get start() {
    return this.buffer[this.index - 3];
  }
  get end() {
    return this.buffer[this.index - 2];
  }
  get size() {
    return this.buffer[this.index - 1];
  }
  get pos() {
    return this.index;
  }
  next() {
    this.index -= 4;
  }
  fork() {
    return new Sm(this.buffer, this.index);
  }
}
class Er {
  /// Create a tree buffer.
  constructor(e, t, n) {
    this.buffer = e, this.length = t, this.set = n;
  }
  /// @internal
  get type() {
    return xi.none;
  }
  /// @internal
  toString() {
    let e = [];
    for (let t = 0; t < this.buffer.length; )
      e.push(this.childString(t)), t = this.buffer[t + 3];
    return e.join(",");
  }
  /// @internal
  childString(e) {
    let t = this.buffer[e], n = this.buffer[e + 3], r = this.set.types[t], s = r.name;
    if (/\W/.test(s) && !r.isError && (s = JSON.stringify(s)), e += 4, n == e)
      return s;
    let o = [];
    for (; e < n; )
      o.push(this.childString(e)), e = this.buffer[e + 3];
    return s + "(" + o.join(",") + ")";
  }
  /// @internal
  findChild(e, t, n, r, s) {
    let { buffer: o } = this, l = -1;
    for (let a = e; a != t && !(KQ(s, r, o[a + 1], o[a + 2]) && (l = a, n > 0)); a = o[a + 3])
      ;
    return l;
  }
  /// @internal
  slice(e, t, n, r) {
    let s = this.buffer, o = new Uint16Array(t - e);
    for (let l = e, a = 0; l < t; )
      o[a++] = s[l++], o[a++] = s[l++] - n, o[a++] = s[l++] - n, o[a++] = s[l++] - e;
    return new Er(o, r - n, this.set);
  }
}
function KQ(i, e, t, n) {
  switch (i) {
    case -2:
      return t < e;
    case -1:
      return n >= e && t < e;
    case 0:
      return t < e && n > e;
    case 1:
      return t <= e && n > e;
    case 2:
      return n > e;
    case 4:
      return !0;
  }
}
function JQ(i, e) {
  let t = i.childBefore(e);
  for (; t; ) {
    let n = t.lastChild;
    if (!n || n.to != t.to)
      break;
    n.type.isError && n.from == n.to ? (i = t, t = n.prevSibling) : t = n;
  }
  return i;
}
function ws(i, e, t, n) {
  for (var r; i.from == i.to || (t < 1 ? i.from >= e : i.from > e) || (t > -1 ? i.to <= e : i.to < e); ) {
    let s = !n && i instanceof pn && i.index < 0 ? null : i.parent;
    if (!s)
      return i;
    i = s;
  }
  if (n)
    for (let s = i, o = s.parent; o; s = o, o = s.parent)
      s instanceof pn && s.index < 0 && ((r = o.enter(e, t, !0)) === null || r === void 0 ? void 0 : r.from) != s.from && (i = o);
  for (; ; ) {
    let s = i.enter(e, t, n);
    if (!s)
      return i;
    i = s;
  }
}
class pn {
  constructor(e, t, n, r) {
    this.node = e, this._from = t, this.index = n, this._parent = r;
  }
  get type() {
    return this.node.type;
  }
  get name() {
    return this.node.type.name;
  }
  get from() {
    return this._from;
  }
  get to() {
    return this._from + this.node.length;
  }
  nextChild(e, t, n, r, s = 0) {
    for (let o = this; ; ) {
      for (let { children: l, positions: a } = o.node, h = t > 0 ? l.length : -1; e != h; e += t) {
        let c = l[e], f = a[e] + o._from;
        if (KQ(r, n, f, f + c.length)) {
          if (c instanceof Er) {
            if (s & 2)
              continue;
            let u = c.findChild(0, c.buffer.length, t, n - f, r);
            if (u > -1)
              return new _n(new e3(o, c, e, f), null, u);
          } else if (s & 1 || !c.type.isAnonymous || bm(c)) {
            let u;
            if (!(s & 1) && c.props && (u = c.prop(Re.mounted)) && !u.overlay)
              return new pn(u.tree, f, e, o);
            let d = new pn(c, f, e, o);
            return s & 1 || !d.type.isAnonymous ? d : d.nextChild(t < 0 ? c.children.length - 1 : 0, t, n, r);
          }
        }
      }
      if (s & 1 || !o.type.isAnonymous || (o.index >= 0 ? e = o.index + t : e = t < 0 ? -1 : o._parent.node.children.length, o = o._parent, !o))
        return null;
    }
  }
  get firstChild() {
    return this.nextChild(
      0,
      1,
      0,
      4
      /* DontCare */
    );
  }
  get lastChild() {
    return this.nextChild(
      this.node.children.length - 1,
      -1,
      0,
      4
      /* DontCare */
    );
  }
  childAfter(e) {
    return this.nextChild(
      0,
      1,
      e,
      2
      /* After */
    );
  }
  childBefore(e) {
    return this.nextChild(
      this.node.children.length - 1,
      -1,
      e,
      -2
      /* Before */
    );
  }
  enter(e, t, n = !0, r = !0) {
    let s;
    if (n && (s = this.node.prop(Re.mounted)) && s.overlay) {
      let o = e - this.from;
      for (let { from: l, to: a } of s.overlay)
        if ((t > 0 ? l <= o : l < o) && (t < 0 ? a >= o : a > o))
          return new pn(s.tree, s.overlay[0].from + this.from, -1, this);
    }
    return this.nextChild(
      0,
      1,
      e,
      t,
      r ? 0 : 2
      /* NoEnterBuffer */
    );
  }
  nextSignificantParent() {
    let e = this;
    for (; e.type.isAnonymous && e._parent; )
      e = e._parent;
    return e;
  }
  get parent() {
    return this._parent ? this._parent.nextSignificantParent() : null;
  }
  get nextSibling() {
    return this._parent && this.index >= 0 ? this._parent.nextChild(
      this.index + 1,
      1,
      0,
      4
      /* DontCare */
    ) : null;
  }
  get prevSibling() {
    return this._parent && this.index >= 0 ? this._parent.nextChild(
      this.index - 1,
      -1,
      0,
      4
      /* DontCare */
    ) : null;
  }
  get cursor() {
    return new jh(this);
  }
  get tree() {
    return this.node;
  }
  toTree() {
    return this.node;
  }
  resolve(e, t = 0) {
    return ws(this, e, t, !1);
  }
  resolveInner(e, t = 0) {
    return ws(this, e, t, !0);
  }
  enterUnfinishedNodesBefore(e) {
    return JQ(this, e);
  }
  getChild(e, t = null, n = null) {
    let r = Nh(this, e, t, n);
    return r.length ? r[0] : null;
  }
  getChildren(e, t = null, n = null) {
    return Nh(this, e, t, n);
  }
  /// @internal
  toString() {
    return this.node.toString();
  }
}
function Nh(i, e, t, n) {
  let r = i.cursor, s = [];
  if (!r.firstChild())
    return s;
  if (t != null) {
    for (; !r.type.is(t); )
      if (!r.nextSibling())
        return s;
  }
  for (; ; ) {
    if (n != null && r.type.is(n))
      return s;
    if (r.type.is(e) && s.push(r.node), !r.nextSibling())
      return n == null ? s : [];
  }
}
class e3 {
  constructor(e, t, n, r) {
    this.parent = e, this.buffer = t, this.index = n, this.start = r;
  }
}
class _n {
  constructor(e, t, n) {
    this.context = e, this._parent = t, this.index = n, this.type = e.buffer.set.types[e.buffer.buffer[n]];
  }
  get name() {
    return this.type.name;
  }
  get from() {
    return this.context.start + this.context.buffer.buffer[this.index + 1];
  }
  get to() {
    return this.context.start + this.context.buffer.buffer[this.index + 2];
  }
  child(e, t, n) {
    let { buffer: r } = this.context, s = r.findChild(this.index + 4, r.buffer[this.index + 3], e, t - this.context.start, n);
    return s < 0 ? null : new _n(this.context, this, s);
  }
  get firstChild() {
    return this.child(
      1,
      0,
      4
      /* DontCare */
    );
  }
  get lastChild() {
    return this.child(
      -1,
      0,
      4
      /* DontCare */
    );
  }
  childAfter(e) {
    return this.child(
      1,
      e,
      2
      /* After */
    );
  }
  childBefore(e) {
    return this.child(
      -1,
      e,
      -2
      /* Before */
    );
  }
  enter(e, t, n, r = !0) {
    if (!r)
      return null;
    let { buffer: s } = this.context, o = s.findChild(this.index + 4, s.buffer[this.index + 3], t > 0 ? 1 : -1, e - this.context.start, t);
    return o < 0 ? null : new _n(this.context, this, o);
  }
  get parent() {
    return this._parent || this.context.parent.nextSignificantParent();
  }
  externalSibling(e) {
    return this._parent ? null : this.context.parent.nextChild(
      this.context.index + e,
      e,
      0,
      4
      /* DontCare */
    );
  }
  get nextSibling() {
    let { buffer: e } = this.context, t = e.buffer[this.index + 3];
    return t < (this._parent ? e.buffer[this._parent.index + 3] : e.buffer.length) ? new _n(this.context, this._parent, t) : this.externalSibling(1);
  }
  get prevSibling() {
    let { buffer: e } = this.context, t = this._parent ? this._parent.index + 4 : 0;
    return this.index == t ? this.externalSibling(-1) : new _n(this.context, this._parent, e.findChild(
      t,
      this.index,
      -1,
      0,
      4
      /* DontCare */
    ));
  }
  get cursor() {
    return new jh(this);
  }
  get tree() {
    return null;
  }
  toTree() {
    let e = [], t = [], { buffer: n } = this.context, r = this.index + 4, s = n.buffer[this.index + 3];
    if (s > r) {
      let o = n.buffer[this.index + 1], l = n.buffer[this.index + 2];
      e.push(n.slice(r, s, o, l)), t.push(0);
    }
    return new pt(this.type, e, t, this.to - this.from);
  }
  resolve(e, t = 0) {
    return ws(this, e, t, !1);
  }
  resolveInner(e, t = 0) {
    return ws(this, e, t, !0);
  }
  enterUnfinishedNodesBefore(e) {
    return JQ(this, e);
  }
  /// @internal
  toString() {
    return this.context.buffer.childString(this.index);
  }
  getChild(e, t = null, n = null) {
    let r = Nh(this, e, t, n);
    return r.length ? r[0] : null;
  }
  getChildren(e, t = null, n = null) {
    return Nh(this, e, t, n);
  }
}
class jh {
  /// @internal
  constructor(e, t = 0) {
    if (this.mode = t, this.buffer = null, this.stack = [], this.index = 0, this.bufferNode = null, e instanceof pn)
      this.yieldNode(e);
    else {
      this._tree = e.context.parent, this.buffer = e.context;
      for (let n = e._parent; n; n = n._parent)
        this.stack.unshift(n.index);
      this.bufferNode = e, this.yieldBuf(e.index);
    }
  }
  /// Shorthand for `.type.name`.
  get name() {
    return this.type.name;
  }
  yieldNode(e) {
    return e ? (this._tree = e, this.type = e.type, this.from = e.from, this.to = e.to, !0) : !1;
  }
  yieldBuf(e, t) {
    this.index = e;
    let { start: n, buffer: r } = this.buffer;
    return this.type = t || r.set.types[r.buffer[e]], this.from = n + r.buffer[e + 1], this.to = n + r.buffer[e + 2], !0;
  }
  yield(e) {
    return e ? e instanceof pn ? (this.buffer = null, this.yieldNode(e)) : (this.buffer = e.context, this.yieldBuf(e.index, e.type)) : !1;
  }
  /// @internal
  toString() {
    return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();
  }
  /// @internal
  enterChild(e, t, n) {
    if (!this.buffer)
      return this.yield(this._tree.nextChild(e < 0 ? this._tree.node.children.length - 1 : 0, e, t, n, this.mode));
    let { buffer: r } = this.buffer, s = r.findChild(this.index + 4, r.buffer[this.index + 3], e, t - this.buffer.start, n);
    return s < 0 ? !1 : (this.stack.push(this.index), this.yieldBuf(s));
  }
  /// Move the cursor to this node's first child. When this returns
  /// false, the node has no child, and the cursor has not been moved.
  firstChild() {
    return this.enterChild(
      1,
      0,
      4
      /* DontCare */
    );
  }
  /// Move the cursor to this node's last child.
  lastChild() {
    return this.enterChild(
      -1,
      0,
      4
      /* DontCare */
    );
  }
  /// Move the cursor to the first child that ends after `pos`.
  childAfter(e) {
    return this.enterChild(
      1,
      e,
      2
      /* After */
    );
  }
  /// Move to the last child that starts before `pos`.
  childBefore(e) {
    return this.enterChild(
      -1,
      e,
      -2
      /* Before */
    );
  }
  /// Move the cursor to the child around `pos`. If side is -1 the
  /// child may end at that position, when 1 it may start there. This
  /// will also enter [overlaid](#common.MountedTree.overlay)
  /// [mounted](#common.NodeProp^mounted) trees unless `overlays` is
  /// set to false.
  enter(e, t, n = !0, r = !0) {
    return this.buffer ? r ? this.enterChild(1, e, t) : !1 : this.yield(this._tree.enter(e, t, n && !(this.mode & 1), r));
  }
  /// Move to the node's parent node, if this isn't the top node.
  parent() {
    if (!this.buffer)
      return this.yieldNode(this.mode & 1 ? this._tree._parent : this._tree.parent);
    if (this.stack.length)
      return this.yieldBuf(this.stack.pop());
    let e = this.mode & 1 ? this.buffer.parent : this.buffer.parent.nextSignificantParent();
    return this.buffer = null, this.yieldNode(e);
  }
  /// @internal
  sibling(e) {
    if (!this.buffer)
      return this._tree._parent ? this.yield(this._tree.index < 0 ? null : this._tree._parent.nextChild(this._tree.index + e, e, 0, 4, this.mode)) : !1;
    let { buffer: t } = this.buffer, n = this.stack.length - 1;
    if (e < 0) {
      let r = n < 0 ? 0 : this.stack[n] + 4;
      if (this.index != r)
        return this.yieldBuf(t.findChild(
          r,
          this.index,
          -1,
          0,
          4
          /* DontCare */
        ));
    } else {
      let r = t.buffer[this.index + 3];
      if (r < (n < 0 ? t.buffer.length : t.buffer[this.stack[n] + 3]))
        return this.yieldBuf(r);
    }
    return n < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + e, e, 0, 4, this.mode)) : !1;
  }
  /// Move to this node's next sibling, if any.
  nextSibling() {
    return this.sibling(1);
  }
  /// Move to this node's previous sibling, if any.
  prevSibling() {
    return this.sibling(-1);
  }
  atLastNode(e) {
    let t, n, { buffer: r } = this;
    if (r) {
      if (e > 0) {
        if (this.index < r.buffer.buffer.length)
          return !1;
      } else
        for (let s = 0; s < this.index; s++)
          if (r.buffer.buffer[s + 3] < this.index)
            return !1;
      ({ index: t, parent: n } = r);
    } else
      ({ index: t, _parent: n } = this._tree);
    for (; n; { index: t, _parent: n } = n)
      if (t > -1)
        for (let s = t + e, o = e < 0 ? -1 : n.node.children.length; s != o; s += e) {
          let l = n.node.children[s];
          if (this.mode & 1 || l instanceof Er || !l.type.isAnonymous || bm(l))
            return !1;
        }
    return !0;
  }
  move(e, t) {
    if (t && this.enterChild(
      e,
      0,
      4
      /* DontCare */
    ))
      return !0;
    for (; ; ) {
      if (this.sibling(e))
        return !0;
      if (this.atLastNode(e) || !this.parent())
        return !1;
    }
  }
  /// Move to the next node in a
  /// [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order_(NLR))
  /// traversal, going from a node to its first child or, if the
  /// current node is empty or `enter` is false, its next sibling or
  /// the next sibling of the first parent node that has one.
  next(e = !0) {
    return this.move(1, e);
  }
  /// Move to the next node in a last-to-first pre-order traveral. A
  /// node is followed by its last child or, if it has none, its
  /// previous sibling or the previous sibling of the first parent
  /// node that has one.
  prev(e = !0) {
    return this.move(-1, e);
  }
  /// Move the cursor to the innermost node that covers `pos`. If
  /// `side` is -1, it will enter nodes that end at `pos`. If it is 1,
  /// it will enter nodes that start at `pos`.
  moveTo(e, t = 0) {
    for (; (this.from == this.to || (t < 1 ? this.from >= e : this.from > e) || (t > -1 ? this.to <= e : this.to < e)) && this.parent(); )
      ;
    for (; this.enterChild(1, e, t); )
      ;
    return this;
  }
  /// Get a [syntax node](#common.SyntaxNode) at the cursor's current
  /// position.
  get node() {
    if (!this.buffer)
      return this._tree;
    let e = this.bufferNode, t = null, n = 0;
    if (e && e.context == this.buffer)
      e: for (let r = this.index, s = this.stack.length; s >= 0; ) {
        for (let o = e; o; o = o._parent)
          if (o.index == r) {
            if (r == this.index)
              return o;
            t = o, n = s + 1;
            break e;
          }
        r = this.stack[--s];
      }
    for (let r = n; r < this.stack.length; r++)
      t = new _n(this.buffer, t, this.stack[r]);
    return this.bufferNode = new _n(this.buffer, t, this.index);
  }
  /// Get the [tree](#common.Tree) that represents the current node, if
  /// any. Will return null when the node is in a [tree
  /// buffer](#common.TreeBuffer).
  get tree() {
    return this.buffer ? null : this._tree.node;
  }
}
function bm(i) {
  return i.children.some((e) => e instanceof Er || !e.type.isAnonymous || bm(e));
}
function t3(i) {
  var e;
  let { buffer: t, nodeSet: n, maxBufferLength: r = HW, reused: s = [], minRepeatType: o = n.types.length } = i, l = Array.isArray(t) ? new Sm(t, t.length) : t, a = n.types, h = 0, c = 0;
  function f(k, w, b, Q, R) {
    let { id: A, start: _, end: $, size: v } = l, X = c;
    for (; v < 0; )
      if (l.next(), v == -1) {
        let U = s[A];
        b.push(U), Q.push(_ - k);
        return;
      } else if (v == -3) {
        h = A;
        return;
      } else if (v == -4) {
        c = A;
        return;
      } else
        throw new RangeError(`Unrecognized record size: ${v}`);
    let E = a[A], L, G, pe = _ - k;
    if ($ - _ <= r && (G = p(l.pos - w, R))) {
      let U = new Uint16Array(G.size - G.skip), j = l.pos - G.size, re = U.length;
      for (; l.pos > j; )
        re = m(G.start, U, re);
      L = new Er(U, $ - G.start, n), pe = G.start - k;
    } else {
      let U = l.pos - v;
      l.next();
      let j = [], re = [], te = A >= o ? A : -1, T = 0, N = $;
      for (; l.pos > U; )
        te >= 0 && l.id == te && l.size >= 0 ? (l.end <= N - r && (d(j, re, _, T, l.end, N, te, X), T = j.length, N = l.end), l.next()) : f(_, U, j, re, te);
      if (te >= 0 && T > 0 && T < j.length && d(j, re, _, T, _, N, te, X), j.reverse(), re.reverse(), te > -1 && T > 0) {
        let M = u(E);
        L = xm(E, j, re, 0, j.length, 0, $ - _, M, M);
      } else
        L = O(E, j, re, $ - _, X - $);
    }
    b.push(L), Q.push(pe);
  }
  function u(k) {
    return (w, b, Q) => {
      let R = 0, A = w.length - 1, _, $;
      if (A >= 0 && (_ = w[A]) instanceof pt) {
        if (!A && _.type == k && _.length == Q)
          return _;
        ($ = _.prop(Re.lookAhead)) && (R = b[A] + _.length + $);
      }
      return O(k, w, b, Q, R);
    };
  }
  function d(k, w, b, Q, R, A, _, $) {
    let v = [], X = [];
    for (; k.length > Q; )
      v.push(k.pop()), X.push(w.pop() + b - R);
    k.push(O(n.types[_], v, X, A - R, $ - A)), w.push(R - b);
  }
  function O(k, w, b, Q, R = 0, A) {
    if (h) {
      let _ = [Re.contextHash, h];
      A = A ? [_].concat(A) : [_];
    }
    if (R > 25) {
      let _ = [Re.lookAhead, R];
      A = A ? [_].concat(A) : [_];
    }
    return new pt(k, w, b, Q, A);
  }
  function p(k, w) {
    let b = l.fork(), Q = 0, R = 0, A = 0, _ = b.end - r, $ = { size: 0, start: 0, skip: 0 };
    e: for (let v = b.pos - k; b.pos > v; ) {
      let X = b.size;
      if (b.id == w && X >= 0) {
        $.size = Q, $.start = R, $.skip = A, A += 4, Q += 4, b.next();
        continue;
      }
      let E = b.pos - X;
      if (X < 0 || E < v || b.start < _)
        break;
      let L = b.id >= o ? 4 : 0, G = b.start;
      for (b.next(); b.pos > E; ) {
        if (b.size < 0)
          if (b.size == -3)
            L += 4;
          else
            break e;
        else b.id >= o && (L += 4);
        b.next();
      }
      R = G, Q += X, A += L;
    }
    return (w < 0 || Q == k) && ($.size = Q, $.start = R, $.skip = A), $.size > 4 ? $ : void 0;
  }
  function m(k, w, b) {
    let { id: Q, start: R, end: A, size: _ } = l;
    if (l.next(), _ >= 0 && Q < o) {
      let $ = b;
      if (_ > 4) {
        let v = l.pos - (_ - 4);
        for (; l.pos > v; )
          b = m(k, w, b);
      }
      w[--b] = $, w[--b] = A - k, w[--b] = R - k, w[--b] = Q;
    } else _ == -3 ? h = Q : _ == -4 && (c = Q);
    return b;
  }
  let g = [], S = [];
  for (; l.pos > 0; )
    f(i.start || 0, i.bufferStart || 0, g, S, -1);
  let x = (e = i.length) !== null && e !== void 0 ? e : g.length ? S[0] + g[0].length : 0;
  return new pt(a[i.topID], g.reverse(), S.reverse(), x);
}
const Ty = /* @__PURE__ */ new WeakMap();
function Ja(i, e) {
  if (!i.isAnonymous || e instanceof Er || e.type != i)
    return 1;
  let t = Ty.get(e);
  if (t == null) {
    t = 1;
    for (let n of e.children) {
      if (n.type != i || !(n instanceof pt)) {
        t = 1;
        break;
      }
      t += Ja(i, n);
    }
    Ty.set(e, t);
  }
  return t;
}
function xm(i, e, t, n, r, s, o, l, a) {
  let h = 0;
  for (let O = n; O < r; O++)
    h += Ja(i, e[O]);
  let c = Math.ceil(
    h * 1.5 / 8
    /* BranchFactor */
  ), f = [], u = [];
  function d(O, p, m, g, S) {
    for (let x = m; x < g; ) {
      let k = x, w = p[x], b = Ja(i, O[x]);
      for (x++; x < g; x++) {
        let Q = Ja(i, O[x]);
        if (b + Q >= c)
          break;
        b += Q;
      }
      if (x == k + 1) {
        if (b > c) {
          let Q = O[k];
          d(Q.children, Q.positions, 0, Q.children.length, p[k] + S);
          continue;
        }
        f.push(O[k]);
      } else {
        let Q = p[x - 1] + O[x - 1].length - w;
        f.push(xm(i, O, p, k, x, w, Q, null, a));
      }
      u.push(w + S - s);
    }
  }
  return d(e, t, n, r, 0), (l || a)(f, u, o);
}
class mr {
  /// Construct a tree fragment.
  constructor(e, t, n, r, s = !1, o = !1) {
    this.from = e, this.to = t, this.tree = n, this.offset = r, this.open = (s ? 1 : 0) | (o ? 2 : 0);
  }
  /// Whether the start of the fragment represents the start of a
  /// parse, or the end of a change. (In the second case, it may not
  /// be safe to reuse some nodes at the start, depending on the
  /// parsing algorithm.)
  get openStart() {
    return (this.open & 1) > 0;
  }
  /// Whether the end of the fragment represents the end of a
  /// full-document parse, or the start of a change.
  get openEnd() {
    return (this.open & 2) > 0;
  }
  /// Create a set of fragments from a freshly parsed tree, or update
  /// an existing set of fragments by replacing the ones that overlap
  /// with a tree with content from the new tree. When `partial` is
  /// true, the parse is treated as incomplete, and the resulting
  /// fragment has [`openEnd`](#common.TreeFragment.openEnd) set to
  /// true.
  static addTree(e, t = [], n = !1) {
    let r = [new mr(0, e.length, e, 0, !1, n)];
    for (let s of t)
      s.to > e.length && r.push(s);
    return r;
  }
  /// Apply a set of edits to an array of fragments, removing or
  /// splitting fragments as necessary to remove edited ranges, and
  /// adjusting offsets for fragments that moved.
  static applyChanges(e, t, n = 128) {
    if (!t.length)
      return e;
    let r = [], s = 1, o = e.length ? e[0] : null;
    for (let l = 0, a = 0, h = 0; ; l++) {
      let c = l < t.length ? t[l] : null, f = c ? c.fromA : 1e9;
      if (f - a >= n)
        for (; o && o.from < f; ) {
          let u = o;
          if (a >= u.from || f <= u.to || h) {
            let d = Math.max(u.from, a) - h, O = Math.min(u.to, f) - h;
            u = d >= O ? null : new mr(d, O, u.tree, u.offset + h, l > 0, !!c);
          }
          if (u && r.push(u), o.to > f)
            break;
          o = s < e.length ? e[s++] : null;
        }
      if (!c)
        break;
      a = c.toA, h = c.toA - c.toB;
    }
    return r;
  }
}
class i3 {
  /// Start a parse, returning a [partial parse](#common.PartialParse)
  /// object. [`fragments`](#common.TreeFragment) can be passed in to
  /// make the parse incremental.
  ///
  /// By default, the entire input is parsed. You can pass `ranges`,
  /// which should be a sorted array of non-empty, non-overlapping
  /// ranges, to parse only those ranges. The tree returned in that
  /// case will start at `ranges[0].from`.
  startParse(e, t, n) {
    return typeof e == "string" && (e = new n3(e)), n = n ? n.length ? n.map((r) => new Kf(r.from, r.to)) : [new Kf(0, 0)] : [new Kf(0, e.length)], this.createParse(e, t || [], n);
  }
  /// Run a full parse, returning the resulting tree.
  parse(e, t, n) {
    let r = this.startParse(e, t, n);
    for (; ; ) {
      let s = r.advance();
      if (s)
        return s;
    }
  }
}
class n3 {
  constructor(e) {
    this.string = e;
  }
  get length() {
    return this.string.length;
  }
  chunk(e) {
    return this.string.slice(e);
  }
  get lineChunks() {
    return !1;
  }
  read(e, t) {
    return this.string.slice(e, t);
  }
}
new Re({ perNode: !0 });
let ls = /* @__PURE__ */ "lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map((i) => i ? parseInt(i, 36) : 1);
for (let i = 1; i < ls.length; i++)
  ls[i] += ls[i - 1];
function r3(i) {
  for (let e = 1; e < ls.length; e += 2)
    if (ls[e] > i)
      return ls[e - 1] <= i;
  return !1;
}
function Cy(i) {
  return i >= 127462 && i <= 127487;
}
const Ry = 8205;
function Xn(i, e, t = !0, n = !0) {
  return (t ? eP : s3)(i, e, n);
}
function eP(i, e, t) {
  if (e == i.length)
    return e;
  e && tP(i.charCodeAt(e)) && iP(i.charCodeAt(e - 1)) && e--;
  let n = Jf(i, e);
  for (e += Ay(n); e < i.length; ) {
    let r = Jf(i, e);
    if (n == Ry || r == Ry || t && r3(r))
      e += Ay(r), n = r;
    else if (Cy(r)) {
      let s = 0, o = e - 2;
      for (; o >= 0 && Cy(Jf(i, o)); )
        s++, o -= 2;
      if (s % 2 == 0)
        break;
      e += 2;
    } else
      break;
  }
  return e;
}
function s3(i, e, t) {
  for (; e > 0; ) {
    let n = eP(i, e - 2, t);
    if (n < e)
      return n;
    e--;
  }
  return 0;
}
function tP(i) {
  return i >= 56320 && i < 57344;
}
function iP(i) {
  return i >= 55296 && i < 56320;
}
function Jf(i, e) {
  let t = i.charCodeAt(e);
  if (!iP(t) || e + 1 == i.length)
    return t;
  let n = i.charCodeAt(e + 1);
  return tP(n) ? (t - 55296 << 10) + (n - 56320) + 65536 : t;
}
function Ay(i) {
  return i < 65536 ? 1 : 2;
}
function o3(i, e, t, n) {
  for (let r = 0, s = 0; ; ) {
    if (s >= e)
      return r;
    if (r == i.length)
      break;
    s += i.charCodeAt(r) == 9 ? t - s % t : 1, r = Xn(i, r);
  }
  return i.length;
}
class Pe {
  /**
  @internal
  */
  constructor() {
  }
  /**
  Get the line description around the given position.
  */
  lineAt(e) {
    if (e < 0 || e > this.length)
      throw new RangeError(`Invalid position ${e} in document of length ${this.length}`);
    return this.lineInner(e, !1, 1, 0);
  }
  /**
  Get the description for the given (1-based) line number.
  */
  line(e) {
    if (e < 1 || e > this.lines)
      throw new RangeError(`Invalid line number ${e} in ${this.lines}-line document`);
    return this.lineInner(e, !0, 1, 0);
  }
  /**
  Replace a range of the text with the given content.
  */
  replace(e, t, n) {
    let r = [];
    return this.decompose(
      0,
      e,
      r,
      2
      /* To */
    ), n.length && n.decompose(
      0,
      n.length,
      r,
      3
      /* To */
    ), this.decompose(
      t,
      this.length,
      r,
      1
      /* From */
    ), Vi.from(r, this.length - (t - e) + n.length);
  }
  /**
  Append another document to this one.
  */
  append(e) {
    return this.replace(this.length, this.length, e);
  }
  /**
  Retrieve the text between the given points.
  */
  slice(e, t = this.length) {
    let n = [];
    return this.decompose(e, t, n, 0), Vi.from(n, t - e);
  }
  /**
  Test whether this text is equal to another instance.
  */
  eq(e) {
    if (e == this)
      return !0;
    if (e.length != this.length || e.lines != this.lines)
      return !1;
    let t = this.scanIdentical(e, 1), n = this.length - this.scanIdentical(e, -1), r = new Ao(this), s = new Ao(e);
    for (let o = t, l = t; ; ) {
      if (r.next(o), s.next(o), o = 0, r.lineBreak != s.lineBreak || r.done != s.done || r.value != s.value)
        return !1;
      if (l += r.value.length, r.done || l >= n)
        return !0;
    }
  }
  /**
  Iterate over the text. When `dir` is `-1`, iteration happens
  from end to start. This will return lines and the breaks between
  them as separate strings, and for long lines, might split lines
  themselves into multiple chunks as well.
  */
  iter(e = 1) {
    return new Ao(this, e);
  }
  /**
  Iterate over a range of the text. When `from` > `to`, the
  iterator will run in reverse.
  */
  iterRange(e, t = this.length) {
    return new nP(this, e, t);
  }
  /**
  Return a cursor that iterates over the given range of lines,
  _without_ returning the line breaks between, and yielding empty
  strings for empty lines.
  
  When `from` and `to` are given, they should be 1-based line numbers.
  */
  iterLines(e, t) {
    let n;
    if (e == null)
      n = this.iter();
    else {
      t == null && (t = this.lines + 1);
      let r = this.line(e).from;
      n = this.iterRange(r, Math.max(r, t == this.lines + 1 ? this.length : t <= 1 ? 0 : this.line(t - 1).to));
    }
    return new rP(n);
  }
  /**
  @internal
  */
  toString() {
    return this.sliceString(0);
  }
  /**
  Convert the document to an array of lines (which can be
  deserialized again via [`Text.of`](https://codemirror.net/6/docs/ref/#text.Text^of)).
  */
  toJSON() {
    let e = [];
    return this.flatten(e), e;
  }
  /**
  Create a `Text` instance for the given array of lines.
  */
  static of(e) {
    if (e.length == 0)
      throw new RangeError("A document must have at least one line");
    return e.length == 1 && !e[0] ? Pe.empty : e.length <= 32 ? new ze(e) : Vi.from(ze.split(e, []));
  }
}
class ze extends Pe {
  constructor(e, t = l3(e)) {
    super(), this.text = e, this.length = t;
  }
  get lines() {
    return this.text.length;
  }
  get children() {
    return null;
  }
  lineInner(e, t, n, r) {
    for (let s = 0; ; s++) {
      let o = this.text[s], l = r + o.length;
      if ((t ? n : l) >= e)
        return new a3(r, l, n, o);
      r = l + 1, n++;
    }
  }
  decompose(e, t, n, r) {
    let s = e <= 0 && t >= this.length ? this : new ze(Ey(this.text, e, t), Math.min(t, this.length) - Math.max(0, e));
    if (r & 1) {
      let o = n.pop(), l = eh(s.text, o.text.slice(), 0, s.length);
      if (l.length <= 32)
        n.push(new ze(l, o.length + s.length));
      else {
        let a = l.length >> 1;
        n.push(new ze(l.slice(0, a)), new ze(l.slice(a)));
      }
    } else
      n.push(s);
  }
  replace(e, t, n) {
    if (!(n instanceof ze))
      return super.replace(e, t, n);
    let r = eh(this.text, eh(n.text, Ey(this.text, 0, e)), t), s = this.length + n.length - (t - e);
    return r.length <= 32 ? new ze(r, s) : Vi.from(ze.split(r, []), s);
  }
  sliceString(e, t = this.length, n = `
`) {
    let r = "";
    for (let s = 0, o = 0; s <= t && o < this.text.length; o++) {
      let l = this.text[o], a = s + l.length;
      s > e && o && (r += n), e < a && t > s && (r += l.slice(Math.max(0, e - s), t - s)), s = a + 1;
    }
    return r;
  }
  flatten(e) {
    for (let t of this.text)
      e.push(t);
  }
  scanIdentical() {
    return 0;
  }
  static split(e, t) {
    let n = [], r = -1;
    for (let s of e)
      n.push(s), r += s.length + 1, n.length == 32 && (t.push(new ze(n, r)), n = [], r = -1);
    return r > -1 && t.push(new ze(n, r)), t;
  }
}
class Vi extends Pe {
  constructor(e, t) {
    super(), this.children = e, this.length = t, this.lines = 0;
    for (let n of e)
      this.lines += n.lines;
  }
  lineInner(e, t, n, r) {
    for (let s = 0; ; s++) {
      let o = this.children[s], l = r + o.length, a = n + o.lines - 1;
      if ((t ? a : l) >= e)
        return o.lineInner(e, t, n, r);
      r = l + 1, n = a + 1;
    }
  }
  decompose(e, t, n, r) {
    for (let s = 0, o = 0; o <= t && s < this.children.length; s++) {
      let l = this.children[s], a = o + l.length;
      if (e <= a && t >= o) {
        let h = r & ((o <= e ? 1 : 0) | (a >= t ? 2 : 0));
        o >= e && a <= t && !h ? n.push(l) : l.decompose(e - o, t - o, n, h);
      }
      o = a + 1;
    }
  }
  replace(e, t, n) {
    if (n.lines < this.lines)
      for (let r = 0, s = 0; r < this.children.length; r++) {
        let o = this.children[r], l = s + o.length;
        if (e >= s && t <= l) {
          let a = o.replace(e - s, t - s, n), h = this.lines - o.lines + a.lines;
          if (a.lines < h >> 4 && a.lines > h >> 6) {
            let c = this.children.slice();
            return c[r] = a, new Vi(c, this.length - (t - e) + n.length);
          }
          return super.replace(s, l, a);
        }
        s = l + 1;
      }
    return super.replace(e, t, n);
  }
  sliceString(e, t = this.length, n = `
`) {
    let r = "";
    for (let s = 0, o = 0; s < this.children.length && o <= t; s++) {
      let l = this.children[s], a = o + l.length;
      o > e && s && (r += n), e < a && t > o && (r += l.sliceString(e - o, t - o, n)), o = a + 1;
    }
    return r;
  }
  flatten(e) {
    for (let t of this.children)
      t.flatten(e);
  }
  scanIdentical(e, t) {
    if (!(e instanceof Vi))
      return 0;
    let n = 0, [r, s, o, l] = t > 0 ? [0, 0, this.children.length, e.children.length] : [this.children.length - 1, e.children.length - 1, -1, -1];
    for (; ; r += t, s += t) {
      if (r == o || s == l)
        return n;
      let a = this.children[r], h = e.children[s];
      if (a != h)
        return n + a.scanIdentical(h, t);
      n += a.length + 1;
    }
  }
  static from(e, t = e.reduce((n, r) => n + r.length + 1, -1)) {
    let n = 0;
    for (let d of e)
      n += d.lines;
    if (n < 32) {
      let d = [];
      for (let O of e)
        O.flatten(d);
      return new ze(d, t);
    }
    let r = Math.max(
      32,
      n >> 5
      /* BranchShift */
    ), s = r << 1, o = r >> 1, l = [], a = 0, h = -1, c = [];
    function f(d) {
      let O;
      if (d.lines > s && d instanceof Vi)
        for (let p of d.children)
          f(p);
      else d.lines > o && (a > o || !a) ? (u(), l.push(d)) : d instanceof ze && a && (O = c[c.length - 1]) instanceof ze && d.lines + O.lines <= 32 ? (a += d.lines, h += d.length + 1, c[c.length - 1] = new ze(O.text.concat(d.text), O.length + 1 + d.length)) : (a + d.lines > r && u(), a += d.lines, h += d.length + 1, c.push(d));
    }
    function u() {
      a != 0 && (l.push(c.length == 1 ? c[0] : Vi.from(c, h)), h = -1, a = c.length = 0);
    }
    for (let d of e)
      f(d);
    return u(), l.length == 1 ? l[0] : new Vi(l, t);
  }
}
Pe.empty = /* @__PURE__ */ new ze([""], 0);
function l3(i) {
  let e = -1;
  for (let t of i)
    e += t.length + 1;
  return e;
}
function eh(i, e, t = 0, n = 1e9) {
  for (let r = 0, s = 0, o = !0; s < i.length && r <= n; s++) {
    let l = i[s], a = r + l.length;
    a >= t && (a > n && (l = l.slice(0, n - r)), r < t && (l = l.slice(t - r)), o ? (e[e.length - 1] += l, o = !1) : e.push(l)), r = a + 1;
  }
  return e;
}
function Ey(i, e, t) {
  return eh(i, [""], e, t);
}
class Ao {
  constructor(e, t = 1) {
    this.dir = t, this.done = !1, this.lineBreak = !1, this.value = "", this.nodes = [e], this.offsets = [t > 0 ? 1 : (e instanceof ze ? e.text.length : e.children.length) << 1];
  }
  nextInner(e, t) {
    for (this.done = this.lineBreak = !1; ; ) {
      let n = this.nodes.length - 1, r = this.nodes[n], s = this.offsets[n], o = s >> 1, l = r instanceof ze ? r.text.length : r.children.length;
      if (o == (t > 0 ? l : 0)) {
        if (n == 0)
          return this.done = !0, this.value = "", this;
        t > 0 && this.offsets[n - 1]++, this.nodes.pop(), this.offsets.pop();
      } else if ((s & 1) == (t > 0 ? 0 : 1)) {
        if (this.offsets[n] += t, e == 0)
          return this.lineBreak = !0, this.value = `
`, this;
        e--;
      } else if (r instanceof ze) {
        let a = r.text[o + (t < 0 ? -1 : 0)];
        if (this.offsets[n] += t, a.length > Math.max(0, e))
          return this.value = e == 0 ? a : t > 0 ? a.slice(e) : a.slice(0, a.length - e), this;
        e -= a.length;
      } else {
        let a = r.children[o + (t < 0 ? -1 : 0)];
        e > a.length ? (e -= a.length, this.offsets[n] += t) : (t < 0 && this.offsets[n]--, this.nodes.push(a), this.offsets.push(t > 0 ? 1 : (a instanceof ze ? a.text.length : a.children.length) << 1));
      }
    }
  }
  next(e = 0) {
    return e < 0 && (this.nextInner(-e, -this.dir), e = this.value.length), this.nextInner(e, this.dir);
  }
}
class nP {
  constructor(e, t, n) {
    this.value = "", this.done = !1, this.cursor = new Ao(e, t > n ? -1 : 1), this.pos = t > n ? e.length : 0, this.from = Math.min(t, n), this.to = Math.max(t, n);
  }
  nextInner(e, t) {
    if (t < 0 ? this.pos <= this.from : this.pos >= this.to)
      return this.value = "", this.done = !0, this;
    e += Math.max(0, t < 0 ? this.pos - this.to : this.from - this.pos);
    let n = t < 0 ? this.pos - this.from : this.to - this.pos;
    e > n && (e = n), n -= e;
    let { value: r } = this.cursor.next(e);
    return this.pos += (r.length + e) * t, this.value = r.length <= n ? r : t < 0 ? r.slice(r.length - n) : r.slice(0, n), this.done = !this.value, this;
  }
  next(e = 0) {
    return e < 0 ? e = Math.max(e, this.from - this.pos) : e > 0 && (e = Math.min(e, this.to - this.pos)), this.nextInner(e, this.cursor.dir);
  }
  get lineBreak() {
    return this.cursor.lineBreak && this.value != "";
  }
}
class rP {
  constructor(e) {
    this.inner = e, this.afterBreak = !0, this.value = "", this.done = !1;
  }
  next(e = 0) {
    let { done: t, lineBreak: n, value: r } = this.inner.next(e);
    return t ? (this.done = !0, this.value = "") : n ? this.afterBreak ? this.value = "" : (this.afterBreak = !0, this.next()) : (this.value = r, this.afterBreak = !1), this;
  }
  get lineBreak() {
    return !1;
  }
}
typeof Symbol < "u" && (Pe.prototype[Symbol.iterator] = function() {
  return this.iter();
}, Ao.prototype[Symbol.iterator] = nP.prototype[Symbol.iterator] = rP.prototype[Symbol.iterator] = function() {
  return this;
});
class a3 {
  /**
  @internal
  */
  constructor(e, t, n, r) {
    this.from = e, this.to = t, this.number = n, this.text = r;
  }
  /**
  The length of the line (not including any line break after it).
  */
  get length() {
    return this.to - this.from;
  }
}
const pO = /\r\n?|\n/;
var Gt = /* @__PURE__ */ function(i) {
  return i[i.Simple = 0] = "Simple", i[i.TrackDel = 1] = "TrackDel", i[i.TrackBefore = 2] = "TrackBefore", i[i.TrackAfter = 3] = "TrackAfter", i;
}(Gt || (Gt = {}));
class Wn {
  // Sections are encoded as pairs of integers. The first is the
  // length in the current document, and the second is -1 for
  // unaffected sections, and the length of the replacement content
  // otherwise. So an insertion would be (0, n>0), a deletion (n>0,
  // 0), and a replacement two positive numbers.
  /**
  @internal
  */
  constructor(e) {
    this.sections = e;
  }
  /**
  The length of the document before the change.
  */
  get length() {
    let e = 0;
    for (let t = 0; t < this.sections.length; t += 2)
      e += this.sections[t];
    return e;
  }
  /**
  The length of the document after the change.
  */
  get newLength() {
    let e = 0;
    for (let t = 0; t < this.sections.length; t += 2) {
      let n = this.sections[t + 1];
      e += n < 0 ? this.sections[t] : n;
    }
    return e;
  }
  /**
  False when there are actual changes in this set.
  */
  get empty() {
    return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0;
  }
  /**
  Iterate over the unchanged parts left by these changes.
  */
  iterGaps(e) {
    for (let t = 0, n = 0, r = 0; t < this.sections.length; ) {
      let s = this.sections[t++], o = this.sections[t++];
      o < 0 ? (e(n, r, s), r += s) : r += o, n += s;
    }
  }
  /**
  Iterate over the ranges changed by these changes. (See
  [`ChangeSet.iterChanges`](https://codemirror.net/6/docs/ref/#state.ChangeSet.iterChanges) for a
  variant that also provides you with the inserted text.)
  
  When `individual` is true, adjacent changes (which are kept
  separate for [position mapping](https://codemirror.net/6/docs/ref/#state.ChangeDesc.mapPos)) are
  reported separately.
  */
  iterChangedRanges(e, t = !1) {
    mO(this, e, t);
  }
  /**
  Get a description of the inverted form of these changes.
  */
  get invertedDesc() {
    let e = [];
    for (let t = 0; t < this.sections.length; ) {
      let n = this.sections[t++], r = this.sections[t++];
      r < 0 ? e.push(n, r) : e.push(r, n);
    }
    return new Wn(e);
  }
  /**
  Compute the combined effect of applying another set of changes
  after this one. The length of the document after this set should
  match the length before `other`.
  */
  composeDesc(e) {
    return this.empty ? e : e.empty ? this : sP(this, e);
  }
  /**
  Map this description, which should start with the same document
  as `other`, over another set of changes, so that it can be
  applied after it. When `before` is true, map as if the changes
  in `other` happened before the ones in `this`.
  */
  mapDesc(e, t = !1) {
    return e.empty ? this : gO(this, e, t);
  }
  mapPos(e, t = -1, n = Gt.Simple) {
    let r = 0, s = 0;
    for (let o = 0; o < this.sections.length; ) {
      let l = this.sections[o++], a = this.sections[o++], h = r + l;
      if (a < 0) {
        if (h > e)
          return s + (e - r);
        s += l;
      } else {
        if (n != Gt.Simple && h >= e && (n == Gt.TrackDel && r < e && h > e || n == Gt.TrackBefore && r < e || n == Gt.TrackAfter && h > e))
          return null;
        if (h > e || h == e && t < 0 && !l)
          return e == r || t < 0 ? s : s + a;
        s += a;
      }
      r = h;
    }
    if (e > r)
      throw new RangeError(`Position ${e} is out of range for changeset of length ${r}`);
    return s;
  }
  /**
  Check whether these changes touch a given range. When one of the
  changes entirely covers the range, the string `"cover"` is
  returned.
  */
  touchesRange(e, t = e) {
    for (let n = 0, r = 0; n < this.sections.length && r <= t; ) {
      let s = this.sections[n++], o = this.sections[n++], l = r + s;
      if (o >= 0 && r <= t && l >= e)
        return r < e && l > t ? "cover" : !0;
      r = l;
    }
    return !1;
  }
  /**
  @internal
  */
  toString() {
    let e = "";
    for (let t = 0; t < this.sections.length; ) {
      let n = this.sections[t++], r = this.sections[t++];
      e += (e ? " " : "") + n + (r >= 0 ? ":" + r : "");
    }
    return e;
  }
  /**
  Serialize this change desc to a JSON-representable value.
  */
  toJSON() {
    return this.sections;
  }
  /**
  Create a change desc from its JSON representation (as produced
  by [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeDesc.toJSON).
  */
  static fromJSON(e) {
    if (!Array.isArray(e) || e.length % 2 || e.some((t) => typeof t != "number"))
      throw new RangeError("Invalid JSON representation of ChangeDesc");
    return new Wn(e);
  }
}
class rt extends Wn {
  /**
  @internal
  */
  constructor(e, t) {
    super(e), this.inserted = t;
  }
  /**
  Apply the changes to a document, returning the modified
  document.
  */
  apply(e) {
    if (this.length != e.length)
      throw new RangeError("Applying change set to a document with the wrong length");
    return mO(this, (t, n, r, s, o) => e = e.replace(r, r + (n - t), o), !1), e;
  }
  mapDesc(e, t = !1) {
    return gO(this, e, t, !0);
  }
  /**
  Given the document as it existed _before_ the changes, return a
  change set that represents the inverse of this set, which could
  be used to go from the document created by the changes back to
  the document as it existed before the changes.
  */
  invert(e) {
    let t = this.sections.slice(), n = [];
    for (let r = 0, s = 0; r < t.length; r += 2) {
      let o = t[r], l = t[r + 1];
      if (l >= 0) {
        t[r] = l, t[r + 1] = o;
        let a = r >> 1;
        for (; n.length < a; )
          n.push(Pe.empty);
        n.push(o ? e.slice(s, s + o) : Pe.empty);
      }
      s += o;
    }
    return new rt(t, n);
  }
  /**
  Combine two subsequent change sets into a single set. `other`
  must start in the document produced by `this`. If `this` goes
  `docA` → `docB` and `other` represents `docB` → `docC`, the
  returned value will represent the change `docA` → `docC`.
  */
  compose(e) {
    return this.empty ? e : e.empty ? this : sP(this, e, !0);
  }
  /**
  Given another change set starting in the same document, maps this
  change set over the other, producing a new change set that can be
  applied to the document produced by applying `other`. When
  `before` is `true`, order changes as if `this` comes before
  `other`, otherwise (the default) treat `other` as coming first.
  
  Given two changes `A` and `B`, `A.compose(B.map(A))` and
  `B.compose(A.map(B, true))` will produce the same document. This
  provides a basic form of [operational
  transformation](https://en.wikipedia.org/wiki/Operational_transformation),
  and can be used for collaborative editing.
  */
  map(e, t = !1) {
    return e.empty ? this : gO(this, e, t, !0);
  }
  /**
  Iterate over the changed ranges in the document, calling `f` for
  each, with the range in the original document (`fromA`-`toA`)
  and the range that replaces it in the new document
  (`fromB`-`toB`).
  
  When `individual` is true, adjacent changes are reported
  separately.
  */
  iterChanges(e, t = !1) {
    mO(this, e, t);
  }
  /**
  Get a [change description](https://codemirror.net/6/docs/ref/#state.ChangeDesc) for this change
  set.
  */
  get desc() {
    return new Wn(this.sections);
  }
  /**
  @internal
  */
  filter(e) {
    let t = [], n = [], r = [], s = new al(this);
    e: for (let o = 0, l = 0; ; ) {
      let a = o == e.length ? 1e9 : e[o++];
      for (; l < a || l == a && s.len == 0; ) {
        if (s.done)
          break e;
        let c = Math.min(s.len, a - l);
        xt(r, c, -1);
        let f = s.ins == -1 ? -1 : s.off == 0 ? s.ins : 0;
        xt(t, c, f), f > 0 && cr(n, t, s.text), s.forward(c), l += c;
      }
      let h = e[o++];
      for (; l < h; ) {
        if (s.done)
          break e;
        let c = Math.min(s.len, h - l);
        xt(t, c, -1), xt(r, c, s.ins == -1 ? -1 : s.off == 0 ? s.ins : 0), s.forward(c), l += c;
      }
    }
    return {
      changes: new rt(t, n),
      filtered: new Wn(r)
    };
  }
  /**
  Serialize this change set to a JSON-representable value.
  */
  toJSON() {
    let e = [];
    for (let t = 0; t < this.sections.length; t += 2) {
      let n = this.sections[t], r = this.sections[t + 1];
      r < 0 ? e.push(n) : r == 0 ? e.push([n]) : e.push([n].concat(this.inserted[t >> 1].toJSON()));
    }
    return e;
  }
  /**
  Create a change set for the given changes, for a document of the
  given length, using `lineSep` as line separator.
  */
  static of(e, t, n) {
    let r = [], s = [], o = 0, l = null;
    function a(c = !1) {
      if (!c && !r.length)
        return;
      o < t && xt(r, t - o, -1);
      let f = new rt(r, s);
      l = l ? l.compose(f.map(l)) : f, r = [], s = [], o = 0;
    }
    function h(c) {
      if (Array.isArray(c))
        for (let f of c)
          h(f);
      else if (c instanceof rt) {
        if (c.length != t)
          throw new RangeError(`Mismatched change set length (got ${c.length}, expected ${t})`);
        a(), l = l ? l.compose(c.map(l)) : c;
      } else {
        let { from: f, to: u = f, insert: d } = c;
        if (f > u || f < 0 || u > t)
          throw new RangeError(`Invalid change range ${f} to ${u} (in doc of length ${t})`);
        let O = d ? typeof d == "string" ? Pe.of(d.split(n || pO)) : d : Pe.empty, p = O.length;
        if (f == u && p == 0)
          return;
        f < o && a(), f > o && xt(r, f - o, -1), xt(r, u - f, p), cr(s, r, O), o = u;
      }
    }
    return h(e), a(!l), l;
  }
  /**
  Create an empty changeset of the given length.
  */
  static empty(e) {
    return new rt(e ? [e, -1] : [], []);
  }
  /**
  Create a changeset from its JSON representation (as produced by
  [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeSet.toJSON).
  */
  static fromJSON(e) {
    if (!Array.isArray(e))
      throw new RangeError("Invalid JSON representation of ChangeSet");
    let t = [], n = [];
    for (let r = 0; r < e.length; r++) {
      let s = e[r];
      if (typeof s == "number")
        t.push(s, -1);
      else {
        if (!Array.isArray(s) || typeof s[0] != "number" || s.some((o, l) => l && typeof o != "string"))
          throw new RangeError("Invalid JSON representation of ChangeSet");
        if (s.length == 1)
          t.push(s[0], 0);
        else {
          for (; n.length < r; )
            n.push(Pe.empty);
          n[r] = Pe.of(s.slice(1)), t.push(s[0], n[r].length);
        }
      }
    }
    return new rt(t, n);
  }
}
function xt(i, e, t, n = !1) {
  if (e == 0 && t <= 0)
    return;
  let r = i.length - 2;
  r >= 0 && t <= 0 && t == i[r + 1] ? i[r] += e : e == 0 && i[r] == 0 ? i[r + 1] += t : n ? (i[r] += e, i[r + 1] += t) : i.push(e, t);
}
function cr(i, e, t) {
  if (t.length == 0)
    return;
  let n = e.length - 2 >> 1;
  if (n < i.length)
    i[i.length - 1] = i[i.length - 1].append(t);
  else {
    for (; i.length < n; )
      i.push(Pe.empty);
    i.push(t);
  }
}
function mO(i, e, t) {
  let n = i.inserted;
  for (let r = 0, s = 0, o = 0; o < i.sections.length; ) {
    let l = i.sections[o++], a = i.sections[o++];
    if (a < 0)
      r += l, s += l;
    else {
      let h = r, c = s, f = Pe.empty;
      for (; h += l, c += a, a && n && (f = f.append(n[o - 2 >> 1])), !(t || o == i.sections.length || i.sections[o + 1] < 0); )
        l = i.sections[o++], a = i.sections[o++];
      e(r, h, s, c, f), r = h, s = c;
    }
  }
}
function gO(i, e, t, n = !1) {
  let r = [], s = n ? [] : null, o = new al(i), l = new al(e);
  for (let a = 0, h = 0; ; )
    if (o.ins == -1)
      a += o.len, o.next();
    else if (l.ins == -1 && h < a) {
      let c = Math.min(l.len, a - h);
      l.forward(c), xt(r, c, -1), h += c;
    } else if (l.ins >= 0 && (o.done || h < a || h == a && (l.len < o.len || l.len == o.len && !t))) {
      for (xt(r, l.ins, -1); a > h && !o.done && a + o.len < h + l.len; )
        a += o.len, o.next();
      h += l.len, l.next();
    } else if (o.ins >= 0) {
      let c = 0, f = a + o.len;
      for (; ; )
        if (l.ins >= 0 && h > a && h + l.len < f)
          c += l.ins, h += l.len, l.next();
        else if (l.ins == -1 && h < f) {
          let u = Math.min(l.len, f - h);
          c += u, l.forward(u), h += u;
        } else
          break;
      xt(r, c, o.ins), s && cr(s, r, o.text), a = f, o.next();
    } else {
      if (o.done && l.done)
        return s ? new rt(r, s) : new Wn(r);
      throw new Error("Mismatched change set lengths");
    }
}
function sP(i, e, t = !1) {
  let n = [], r = t ? [] : null, s = new al(i), o = new al(e);
  for (let l = !1; ; ) {
    if (s.done && o.done)
      return r ? new rt(n, r) : new Wn(n);
    if (s.ins == 0)
      xt(n, s.len, 0, l), s.next();
    else if (o.len == 0 && !o.done)
      xt(n, 0, o.ins, l), r && cr(r, n, o.text), o.next();
    else {
      if (s.done || o.done)
        throw new Error("Mismatched change set lengths");
      {
        let a = Math.min(s.len2, o.len), h = n.length;
        if (s.ins == -1) {
          let c = o.ins == -1 ? -1 : o.off ? 0 : o.ins;
          xt(n, a, c, l), r && c && cr(r, n, o.text);
        } else o.ins == -1 ? (xt(n, s.off ? 0 : s.len, a, l), r && cr(r, n, s.textBit(a))) : (xt(n, s.off ? 0 : s.len, o.off ? 0 : o.ins, l), r && !o.off && cr(r, n, o.text));
        l = (s.ins > a || o.ins >= 0 && o.len > a) && (l || n.length > h), s.forward2(a), o.forward(a);
      }
    }
  }
}
class al {
  constructor(e) {
    this.set = e, this.i = 0, this.next();
  }
  next() {
    let { sections: e } = this.set;
    this.i < e.length ? (this.len = e[this.i++], this.ins = e[this.i++]) : (this.len = 0, this.ins = -2), this.off = 0;
  }
  get done() {
    return this.ins == -2;
  }
  get len2() {
    return this.ins < 0 ? this.len : this.ins;
  }
  get text() {
    let { inserted: e } = this.set, t = this.i - 2 >> 1;
    return t >= e.length ? Pe.empty : e[t];
  }
  textBit(e) {
    let { inserted: t } = this.set, n = this.i - 2 >> 1;
    return n >= t.length && !e ? Pe.empty : t[n].slice(this.off, e == null ? void 0 : this.off + e);
  }
  forward(e) {
    e == this.len ? this.next() : (this.len -= e, this.off += e);
  }
  forward2(e) {
    this.ins == -1 ? this.forward(e) : e == this.ins ? this.next() : (this.ins -= e, this.off += e);
  }
}
class Ur {
  /**
  @internal
  */
  constructor(e, t, n) {
    this.from = e, this.to = t, this.flags = n;
  }
  /**
  The anchor of the range—the side that doesn't move when you
  extend it.
  */
  get anchor() {
    return this.flags & 16 ? this.to : this.from;
  }
  /**
  The head of the range, which is moved when the range is
  [extended](https://codemirror.net/6/docs/ref/#state.SelectionRange.extend).
  */
  get head() {
    return this.flags & 16 ? this.from : this.to;
  }
  /**
  True when `anchor` and `head` are at the same position.
  */
  get empty() {
    return this.from == this.to;
  }
  /**
  If this is a cursor that is explicitly associated with the
  character on one of its sides, this returns the side. -1 means
  the character before its position, 1 the character after, and 0
  means no association.
  */
  get assoc() {
    return this.flags & 4 ? -1 : this.flags & 8 ? 1 : 0;
  }
  /**
  The bidirectional text level associated with this cursor, if
  any.
  */
  get bidiLevel() {
    let e = this.flags & 3;
    return e == 3 ? null : e;
  }
  /**
  The goal column (stored vertical offset) associated with a
  cursor. This is used to preserve the vertical position when
  [moving](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) across
  lines of different length.
  */
  get goalColumn() {
    let e = this.flags >> 5;
    return e == 33554431 ? void 0 : e;
  }
  /**
  Map this range through a change, producing a valid range in the
  updated document.
  */
  map(e, t = -1) {
    let n, r;
    return this.empty ? n = r = e.mapPos(this.from, t) : (n = e.mapPos(this.from, 1), r = e.mapPos(this.to, -1)), n == this.from && r == this.to ? this : new Ur(n, r, this.flags);
  }
  /**
  Extend this range to cover at least `from` to `to`.
  */
  extend(e, t = e) {
    if (e <= this.anchor && t >= this.anchor)
      return ie.range(e, t);
    let n = Math.abs(e - this.anchor) > Math.abs(t - this.anchor) ? e : t;
    return ie.range(this.anchor, n);
  }
  /**
  Compare this range to another range.
  */
  eq(e) {
    return this.anchor == e.anchor && this.head == e.head;
  }
  /**
  Return a JSON-serializable object representing the range.
  */
  toJSON() {
    return { anchor: this.anchor, head: this.head };
  }
  /**
  Convert a JSON representation of a range to a `SelectionRange`
  instance.
  */
  static fromJSON(e) {
    if (!e || typeof e.anchor != "number" || typeof e.head != "number")
      throw new RangeError("Invalid JSON representation for SelectionRange");
    return ie.range(e.anchor, e.head);
  }
}
class ie {
  /**
  @internal
  */
  constructor(e, t = 0) {
    this.ranges = e, this.mainIndex = t;
  }
  /**
  Map a selection through a change. Used to adjust the selection
  position for changes.
  */
  map(e, t = -1) {
    return e.empty ? this : ie.create(this.ranges.map((n) => n.map(e, t)), this.mainIndex);
  }
  /**
  Compare this selection to another selection.
  */
  eq(e) {
    if (this.ranges.length != e.ranges.length || this.mainIndex != e.mainIndex)
      return !1;
    for (let t = 0; t < this.ranges.length; t++)
      if (!this.ranges[t].eq(e.ranges[t]))
        return !1;
    return !0;
  }
  /**
  Get the primary selection range. Usually, you should make sure
  your code applies to _all_ ranges, by using methods like
  [`changeByRange`](https://codemirror.net/6/docs/ref/#state.EditorState.changeByRange).
  */
  get main() {
    return this.ranges[this.mainIndex];
  }
  /**
  Make sure the selection only has one range. Returns a selection
  holding only the main range from this selection.
  */
  asSingle() {
    return this.ranges.length == 1 ? this : new ie([this.main]);
  }
  /**
  Extend this selection with an extra range.
  */
  addRange(e, t = !0) {
    return ie.create([e].concat(this.ranges), t ? 0 : this.mainIndex + 1);
  }
  /**
  Replace a given range with another range, and then normalize the
  selection to merge and sort ranges if necessary.
  */
  replaceRange(e, t = this.mainIndex) {
    let n = this.ranges.slice();
    return n[t] = e, ie.create(n, this.mainIndex);
  }
  /**
  Convert this selection to an object that can be serialized to
  JSON.
  */
  toJSON() {
    return { ranges: this.ranges.map((e) => e.toJSON()), main: this.mainIndex };
  }
  /**
  Create a selection from a JSON representation.
  */
  static fromJSON(e) {
    if (!e || !Array.isArray(e.ranges) || typeof e.main != "number" || e.main >= e.ranges.length)
      throw new RangeError("Invalid JSON representation for EditorSelection");
    return new ie(e.ranges.map((t) => Ur.fromJSON(t)), e.main);
  }
  /**
  Create a selection holding a single range.
  */
  static single(e, t = e) {
    return new ie([ie.range(e, t)], 0);
  }
  /**
  Sort and merge the given set of ranges, creating a valid
  selection.
  */
  static create(e, t = 0) {
    if (e.length == 0)
      throw new RangeError("A selection needs at least one range");
    for (let n = 0, r = 0; r < e.length; r++) {
      let s = e[r];
      if (s.empty ? s.from <= n : s.from < n)
        return h3(e.slice(), t);
      n = s.to;
    }
    return new ie(e, t);
  }
  /**
  Create a cursor selection range at the given position. You can
  safely ignore the optional arguments in most situations.
  */
  static cursor(e, t = 0, n, r) {
    return new Ur(e, e, (t == 0 ? 0 : t < 0 ? 4 : 8) | (n == null ? 3 : Math.min(2, n)) | (r ?? 33554431) << 5);
  }
  /**
  Create a selection range.
  */
  static range(e, t, n) {
    let r = (n ?? 33554431) << 5;
    return t < e ? new Ur(
      t,
      e,
      16 | r | 8
      /* AssocAfter */
    ) : new Ur(e, t, r | (t > e ? 4 : 0));
  }
}
function h3(i, e = 0) {
  let t = i[e];
  i.sort((n, r) => n.from - r.from), e = i.indexOf(t);
  for (let n = 1; n < i.length; n++) {
    let r = i[n], s = i[n - 1];
    if (r.empty ? r.from <= s.to : r.from < s.to) {
      let o = s.from, l = Math.max(r.to, s.to);
      n <= e && e--, i.splice(--n, 2, r.anchor > r.head ? ie.range(l, o) : ie.range(o, l));
    }
  }
  return new ie(i, e);
}
function oP(i, e) {
  for (let t of i.ranges)
    if (t.to > e)
      throw new RangeError("Selection points outside of document");
}
let wm = 0;
class be {
  constructor(e, t, n, r, s) {
    this.combine = e, this.compareInput = t, this.compare = n, this.isStatic = r, this.extensions = s, this.id = wm++, this.default = e([]);
  }
  /**
  Define a new facet.
  */
  static define(e = {}) {
    return new be(e.combine || ((t) => t), e.compareInput || ((t, n) => t === n), e.compare || (e.combine ? (t, n) => t === n : km), !!e.static, e.enables);
  }
  /**
  Returns an extension that adds the given value for this facet.
  */
  of(e) {
    return new th([], this, 0, e);
  }
  /**
  Create an extension that computes a value for the facet from a
  state. You must take care to declare the parts of the state that
  this value depends on, since your function is only called again
  for a new state when one of those parts changed.
  
  In most cases, you'll want to use the
  [`provide`](https://codemirror.net/6/docs/ref/#state.StateField^define^config.provide) option when
  defining a field instead.
  */
  compute(e, t) {
    if (this.isStatic)
      throw new Error("Can't compute a static facet");
    return new th(e, this, 1, t);
  }
  /**
  Create an extension that computes zero or more values for this
  facet from a state.
  */
  computeN(e, t) {
    if (this.isStatic)
      throw new Error("Can't compute a static facet");
    return new th(e, this, 2, t);
  }
  from(e, t) {
    return t || (t = (n) => n), this.compute([e], (n) => t(n.field(e)));
  }
}
function km(i, e) {
  return i == e || i.length == e.length && i.every((t, n) => t === e[n]);
}
class th {
  constructor(e, t, n, r) {
    this.dependencies = e, this.facet = t, this.type = n, this.value = r, this.id = wm++;
  }
  dynamicSlot(e) {
    var t;
    let n = this.value, r = this.facet.compareInput, s = this.id, o = e[s] >> 1, l = this.type == 2, a = !1, h = !1, c = [];
    for (let f of this.dependencies)
      f == "doc" ? a = !0 : f == "selection" ? h = !0 : (((t = e[f.id]) !== null && t !== void 0 ? t : 1) & 1) == 0 && c.push(e[f.id]);
    return {
      create(f) {
        return f.values[o] = n(f), 1;
      },
      update(f, u) {
        if (a && u.docChanged || h && (u.docChanged || u.selection) || c.some((d) => (gr(f, d) & 1) > 0)) {
          let d = n(f);
          if (l ? !My(d, f.values[o], r) : !r(d, f.values[o]))
            return f.values[o] = d, 1;
        }
        return 0;
      },
      reconfigure(f, u) {
        let d = n(f), O = u.config.address[s];
        if (O != null) {
          let p = Yh(u, O);
          if (l ? My(d, p, r) : r(d, p))
            return f.values[o] = p, 0;
        }
        return f.values[o] = d, 1;
      }
    };
  }
}
function My(i, e, t) {
  if (i.length != e.length)
    return !1;
  for (let n = 0; n < i.length; n++)
    if (!t(i[n], e[n]))
      return !1;
  return !0;
}
function c3(i, e, t) {
  let n = t.map((a) => i[a.id]), r = t.map((a) => a.type), s = n.filter((a) => !(a & 1)), o = i[e.id] >> 1;
  function l(a) {
    let h = [];
    for (let c = 0; c < n.length; c++) {
      let f = Yh(a, n[c]);
      if (r[c] == 2)
        for (let u of f)
          h.push(u);
      else
        h.push(f);
    }
    return e.combine(h);
  }
  return {
    create(a) {
      for (let h of n)
        gr(a, h);
      return a.values[o] = l(a), 1;
    },
    update(a, h) {
      if (!s.some(
        (f) => gr(a, f) & 1
        /* Changed */
      ))
        return 0;
      let c = l(a);
      return e.compare(c, a.values[o]) ? 0 : (a.values[o] = c, 1);
    },
    reconfigure(a, h) {
      let c = n.some(
        (O) => gr(a, O) & 1
        /* Changed */
      ), f = h.config.facets[e.id], u = h.facet(e);
      if (f && !c && km(t, f))
        return a.values[o] = u, 0;
      let d = l(a);
      return e.compare(d, u) ? (a.values[o] = u, 0) : (a.values[o] = d, 1);
    }
  };
}
const qy = /* @__PURE__ */ be.define({ static: !0 });
class Ls {
  constructor(e, t, n, r, s) {
    this.id = e, this.createF = t, this.updateF = n, this.compareF = r, this.spec = s, this.provides = void 0;
  }
  /**
  Define a state field.
  */
  static define(e) {
    let t = new Ls(wm++, e.create, e.update, e.compare || ((n, r) => n === r), e);
    return e.provide && (t.provides = e.provide(t)), t;
  }
  create(e) {
    let t = e.facet(qy).find((n) => n.field == this);
    return (t?.create || this.createF)(e);
  }
  /**
  @internal
  */
  slot(e) {
    let t = e[this.id] >> 1;
    return {
      create: (n) => (n.values[t] = this.create(n), 1),
      update: (n, r) => {
        let s = n.values[t], o = this.updateF(s, r);
        return this.compareF(s, o) ? 0 : (n.values[t] = o, 1);
      },
      reconfigure: (n, r) => r.config.address[this.id] != null ? (n.values[t] = r.field(this), 0) : (n.values[t] = this.create(n), 1)
    };
  }
  /**
  Returns an extension that enables this field and overrides the
  way it is initialized. Can be useful when you need to provide a
  non-default starting value for the field.
  */
  init(e) {
    return [this, qy.of({ field: this, create: e })];
  }
  /**
  State field instances can be used as
  [`Extension`](https://codemirror.net/6/docs/ref/#state.Extension) values to enable the field in a
  given state.
  */
  get extension() {
    return this;
  }
}
const an = { lowest: 4, low: 3, default: 2, high: 1, highest: 0 };
function Qn(i) {
  return (e) => new aP(e, i);
}
const lP = {
  /**
  The lowest precedence level. Meant for things that should end up
  near the end of the extension order.
  */
  lowest: /* @__PURE__ */ Qn(an.lowest),
  /**
  A lower-than-default precedence, for extensions.
  */
  low: /* @__PURE__ */ Qn(an.low),
  /**
  The default precedence, which is also used for extensions
  without an explicit precedence.
  */
  default: /* @__PURE__ */ Qn(an.default),
  /**
  A higher-than-default precedence, for extensions that should
  come before those with default precedence.
  */
  high: /* @__PURE__ */ Qn(an.high),
  /**
  The highest precedence level, for extensions that should end up
  near the start of the precedence ordering.
  */
  highest: /* @__PURE__ */ Qn(an.highest),
  // FIXME Drop these in some future breaking version
  /**
  Backwards-compatible synonym for `Prec.lowest`.
  */
  fallback: /* @__PURE__ */ Qn(an.lowest),
  /**
  Backwards-compatible synonym for `Prec.high`.
  */
  extend: /* @__PURE__ */ Qn(an.high),
  /**
  Backwards-compatible synonym for `Prec.highest`.
  */
  override: /* @__PURE__ */ Qn(an.highest)
};
class aP {
  constructor(e, t) {
    this.inner = e, this.prec = t;
  }
}
class $c {
  /**
  Create an instance of this compartment to add to your [state
  configuration](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions).
  */
  of(e) {
    return new yO(this, e);
  }
  /**
  Create an [effect](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) that
  reconfigures this compartment.
  */
  reconfigure(e) {
    return $c.reconfigure.of({ compartment: this, extension: e });
  }
  /**
  Get the current content of the compartment in the state, or
  `undefined` if it isn't present.
  */
  get(e) {
    return e.config.compartments.get(this);
  }
}
class yO {
  constructor(e, t) {
    this.compartment = e, this.inner = t;
  }
}
class Uh {
  constructor(e, t, n, r, s, o) {
    for (this.base = e, this.compartments = t, this.dynamicSlots = n, this.address = r, this.staticValues = s, this.facets = o, this.statusTemplate = []; this.statusTemplate.length < n.length; )
      this.statusTemplate.push(
        0
        /* Unresolved */
      );
  }
  staticFacet(e) {
    let t = this.address[e.id];
    return t == null ? e.default : this.staticValues[t >> 1];
  }
  static resolve(e, t, n) {
    let r = [], s = /* @__PURE__ */ Object.create(null), o = /* @__PURE__ */ new Map();
    for (let u of f3(e, t, o))
      u instanceof Ls ? r.push(u) : (s[u.facet.id] || (s[u.facet.id] = [])).push(u);
    let l = /* @__PURE__ */ Object.create(null), a = [], h = [];
    for (let u of r)
      l[u.id] = h.length << 1, h.push((d) => u.slot(d));
    let c = n?.config.facets;
    for (let u in s) {
      let d = s[u], O = d[0].facet, p = c && c[u] || [];
      if (d.every(
        (m) => m.type == 0
        /* Static */
      ))
        if (l[O.id] = a.length << 1 | 1, km(p, d))
          a.push(n.facet(O));
        else {
          let m = O.combine(d.map((g) => g.value));
          a.push(n && O.compare(m, n.facet(O)) ? n.facet(O) : m);
        }
      else {
        for (let m of d)
          m.type == 0 ? (l[m.id] = a.length << 1 | 1, a.push(m.value)) : (l[m.id] = h.length << 1, h.push((g) => m.dynamicSlot(g)));
        l[O.id] = h.length << 1, h.push((m) => c3(m, O, d));
      }
    }
    let f = h.map((u) => u(l));
    return new Uh(e, o, f, l, a, s);
  }
}
function f3(i, e, t) {
  let n = [[], [], [], [], []], r = /* @__PURE__ */ new Map();
  function s(o, l) {
    let a = r.get(o);
    if (a != null) {
      if (a >= l)
        return;
      let h = n[a].indexOf(o);
      h > -1 && n[a].splice(h, 1), o instanceof yO && t.delete(o.compartment);
    }
    if (r.set(o, l), Array.isArray(o))
      for (let h of o)
        s(h, l);
    else if (o instanceof yO) {
      if (t.has(o.compartment))
        throw new RangeError("Duplicate use of compartment in extensions");
      let h = e.get(o.compartment) || o.inner;
      t.set(o.compartment, h), s(h, l);
    } else if (o instanceof aP)
      s(o.inner, o.prec);
    else if (o instanceof Ls)
      n[l].push(o), o.provides && s(o.provides, l);
    else if (o instanceof th)
      n[l].push(o), o.facet.extensions && s(o.facet.extensions, l);
    else {
      let h = o.extension;
      if (!h)
        throw new Error(`Unrecognized extension value in extension set (${o}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);
      s(h, l);
    }
  }
  return s(i, an.default), n.reduce((o, l) => o.concat(l));
}
function gr(i, e) {
  if (e & 1)
    return 2;
  let t = e >> 1, n = i.status[t];
  if (n == 4)
    throw new Error("Cyclic dependency between fields and/or facets");
  if (n & 2)
    return n;
  i.status[t] = 4;
  let r = i.computeSlot(i, i.config.dynamicSlots[t]);
  return i.status[t] = 2 | r;
}
function Yh(i, e) {
  return e & 1 ? i.config.staticValues[e >> 1] : i.values[e >> 1];
}
const hP = /* @__PURE__ */ be.define(), cP = /* @__PURE__ */ be.define({
  combine: (i) => i.some((e) => e),
  static: !0
}), fP = /* @__PURE__ */ be.define({
  combine: (i) => i.length ? i[0] : void 0,
  static: !0
}), uP = /* @__PURE__ */ be.define(), dP = /* @__PURE__ */ be.define(), OP = /* @__PURE__ */ be.define(), pP = /* @__PURE__ */ be.define({
  combine: (i) => i.length ? i[0] : !1
});
class Al {
  /**
  @internal
  */
  constructor(e, t) {
    this.type = e, this.value = t;
  }
  /**
  Define a new type of annotation.
  */
  static define() {
    return new u3();
  }
}
class u3 {
  /**
  Create an instance of this annotation.
  */
  of(e) {
    return new Al(this, e);
  }
}
class d3 {
  /**
  @internal
  */
  constructor(e) {
    this.map = e;
  }
  /**
  Create a [state effect](https://codemirror.net/6/docs/ref/#state.StateEffect) instance of this
  type.
  */
  of(e) {
    return new Ue(this, e);
  }
}
class Ue {
  /**
  @internal
  */
  constructor(e, t) {
    this.type = e, this.value = t;
  }
  /**
  Map this effect through a position mapping. Will return
  `undefined` when that ends up deleting the effect.
  */
  map(e) {
    let t = this.type.map(this.value, e);
    return t === void 0 ? void 0 : t == this.value ? this : new Ue(this.type, t);
  }
  /**
  Tells you whether this effect object is of a given
  [type](https://codemirror.net/6/docs/ref/#state.StateEffectType).
  */
  is(e) {
    return this.type == e;
  }
  /**
  Define a new effect type. The type parameter indicates the type
  of values that his effect holds.
  */
  static define(e = {}) {
    return new d3(e.map || ((t) => t));
  }
  /**
  Map an array of effects through a change set.
  */
  static mapEffects(e, t) {
    if (!e.length)
      return e;
    let n = [];
    for (let r of e) {
      let s = r.map(t);
      s && n.push(s);
    }
    return n;
  }
}
Ue.reconfigure = /* @__PURE__ */ Ue.define();
Ue.appendConfig = /* @__PURE__ */ Ue.define();
class Qt {
  /**
  @internal
  */
  constructor(e, t, n, r, s, o) {
    this.startState = e, this.changes = t, this.selection = n, this.effects = r, this.annotations = s, this.scrollIntoView = o, this._doc = null, this._state = null, n && oP(n, t.newLength), s.some((l) => l.type == Qt.time) || (this.annotations = s.concat(Qt.time.of(Date.now())));
  }
  /**
  The new document produced by the transaction. Contrary to
  [`.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state)`.doc`, accessing this won't
  force the entire new state to be computed right away, so it is
  recommended that [transaction
  filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) use this getter
  when they need to look at the new document.
  */
  get newDoc() {
    return this._doc || (this._doc = this.changes.apply(this.startState.doc));
  }
  /**
  The new selection produced by the transaction. If
  [`this.selection`](https://codemirror.net/6/docs/ref/#state.Transaction.selection) is undefined,
  this will [map](https://codemirror.net/6/docs/ref/#state.EditorSelection.map) the start state's
  current selection through the changes made by the transaction.
  */
  get newSelection() {
    return this.selection || this.startState.selection.map(this.changes);
  }
  /**
  The new state created by the transaction. Computed on demand
  (but retained for subsequent access), so itis recommended not to
  access it in [transaction
  filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) when possible.
  */
  get state() {
    return this._state || this.startState.applyTransaction(this), this._state;
  }
  /**
  Get the value of the given annotation type, if any.
  */
  annotation(e) {
    for (let t of this.annotations)
      if (t.type == e)
        return t.value;
  }
  /**
  Indicates whether the transaction changed the document.
  */
  get docChanged() {
    return !this.changes.empty;
  }
  /**
  Indicates whether this transaction reconfigures the state
  (through a [configuration compartment](https://codemirror.net/6/docs/ref/#state.Compartment) or
  with a top-level configuration
  [effect](https://codemirror.net/6/docs/ref/#state.StateEffect^reconfigure).
  */
  get reconfigured() {
    return this.startState.config != this.state.config;
  }
  /**
  Returns true if the transaction has a [user
  event](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent) annotation that is equal to
  or more specific than `event`. For example, if the transaction
  has `"select.pointer"` as user event, `"select"` and
  `"select.pointer"` will match it.
  */
  isUserEvent(e) {
    let t = this.annotation(Qt.userEvent);
    return !!(t && (t == e || t.length > e.length && t.slice(0, e.length) == e && t[e.length] == "."));
  }
}
Qt.time = /* @__PURE__ */ Al.define();
Qt.userEvent = /* @__PURE__ */ Al.define();
Qt.addToHistory = /* @__PURE__ */ Al.define();
Qt.remote = /* @__PURE__ */ Al.define();
function O3(i, e) {
  let t = [];
  for (let n = 0, r = 0; ; ) {
    let s, o;
    if (n < i.length && (r == e.length || e[r] >= i[n]))
      s = i[n++], o = i[n++];
    else if (r < e.length)
      s = e[r++], o = e[r++];
    else
      return t;
    !t.length || t[t.length - 1] < s ? t.push(s, o) : t[t.length - 1] < o && (t[t.length - 1] = o);
  }
}
function mP(i, e, t) {
  var n;
  let r, s, o;
  return t ? (r = e.changes, s = rt.empty(e.changes.length), o = i.changes.compose(e.changes)) : (r = e.changes.map(i.changes), s = i.changes.mapDesc(e.changes, !0), o = i.changes.compose(r)), {
    changes: o,
    selection: e.selection ? e.selection.map(s) : (n = i.selection) === null || n === void 0 ? void 0 : n.map(r),
    effects: Ue.mapEffects(i.effects, r).concat(Ue.mapEffects(e.effects, s)),
    annotations: i.annotations.length ? i.annotations.concat(e.annotations) : e.annotations,
    scrollIntoView: i.scrollIntoView || e.scrollIntoView
  };
}
function SO(i, e, t) {
  let n = e.selection, r = as(e.annotations);
  return e.userEvent && (r = r.concat(Qt.userEvent.of(e.userEvent))), {
    changes: e.changes instanceof rt ? e.changes : rt.of(e.changes || [], t, i.facet(fP)),
    selection: n && (n instanceof ie ? n : ie.single(n.anchor, n.head)),
    effects: as(e.effects),
    annotations: r,
    scrollIntoView: !!e.scrollIntoView
  };
}
function gP(i, e, t) {
  let n = SO(i, e.length ? e[0] : {}, i.doc.length);
  e.length && e[0].filter === !1 && (t = !1);
  for (let s = 1; s < e.length; s++) {
    e[s].filter === !1 && (t = !1);
    let o = !!e[s].sequential;
    n = mP(n, SO(i, e[s], o ? n.changes.newLength : i.doc.length), o);
  }
  let r = new Qt(i, n.changes, n.selection, n.effects, n.annotations, n.scrollIntoView);
  return m3(t ? p3(r) : r);
}
function p3(i) {
  let e = i.startState, t = !0;
  for (let r of e.facet(uP)) {
    let s = r(i);
    if (s === !1) {
      t = !1;
      break;
    }
    Array.isArray(s) && (t = t === !0 ? s : O3(t, s));
  }
  if (t !== !0) {
    let r, s;
    if (t === !1)
      s = i.changes.invertedDesc, r = rt.empty(e.doc.length);
    else {
      let o = i.changes.filter(t);
      r = o.changes, s = o.filtered.invertedDesc;
    }
    i = new Qt(e, r, i.selection && i.selection.map(s), Ue.mapEffects(i.effects, s), i.annotations, i.scrollIntoView);
  }
  let n = e.facet(dP);
  for (let r = n.length - 1; r >= 0; r--) {
    let s = n[r](i);
    s instanceof Qt ? i = s : Array.isArray(s) && s.length == 1 && s[0] instanceof Qt ? i = s[0] : i = gP(e, as(s), !1);
  }
  return i;
}
function m3(i) {
  let e = i.startState, t = e.facet(OP), n = i;
  for (let r = t.length - 1; r >= 0; r--) {
    let s = t[r](i);
    s && Object.keys(s).length && (n = mP(i, SO(e, s, i.changes.newLength), !0));
  }
  return n == i ? i : new Qt(e, i.changes, i.selection, n.effects, n.annotations, n.scrollIntoView);
}
const g3 = [];
function as(i) {
  return i == null ? g3 : Array.isArray(i) ? i : [i];
}
var un = /* @__PURE__ */ function(i) {
  return i[i.Word = 0] = "Word", i[i.Space = 1] = "Space", i[i.Other = 2] = "Other", i;
}(un || (un = {}));
const y3 = /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;
let bO;
try {
  bO = /* @__PURE__ */ new RegExp("[\\p{Alphabetic}\\p{Number}_]", "u");
} catch {
}
function S3(i) {
  if (bO)
    return bO.test(i);
  for (let e = 0; e < i.length; e++) {
    let t = i[e];
    if (/\w/.test(t) || t > "" && (t.toUpperCase() != t.toLowerCase() || y3.test(t)))
      return !0;
  }
  return !1;
}
function b3(i) {
  return (e) => {
    if (!/\S/.test(e))
      return un.Space;
    if (S3(e))
      return un.Word;
    for (let t = 0; t < i.length; t++)
      if (e.indexOf(i[t]) > -1)
        return un.Word;
    return un.Other;
  };
}
class xe {
  /**
  @internal
  */
  constructor(e, t, n, r, s, o) {
    this.config = e, this.doc = t, this.selection = n, this.values = r, this.status = e.statusTemplate.slice(), this.computeSlot = s, o && (o._state = this);
    for (let l = 0; l < this.config.dynamicSlots.length; l++)
      gr(this, l << 1);
    this.computeSlot = null;
  }
  field(e, t = !0) {
    let n = this.config.address[e.id];
    if (n == null) {
      if (t)
        throw new RangeError("Field is not present in this state");
      return;
    }
    return gr(this, n), Yh(this, n);
  }
  /**
  Create a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction) that updates this
  state. Any number of [transaction specs](https://codemirror.net/6/docs/ref/#state.TransactionSpec)
  can be passed. Unless
  [`sequential`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.sequential) is set, the
  [changes](https://codemirror.net/6/docs/ref/#state.TransactionSpec.changes) (if any) of each spec
  are assumed to start in the _current_ document (not the document
  produced by previous specs), and its
  [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) and
  [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) are assumed to refer
  to the document created by its _own_ changes. The resulting
  transaction contains the combined effect of all the different
  specs. For [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection), later
  specs take precedence over earlier ones.
  */
  update(...e) {
    return gP(this, e, !0);
  }
  /**
  @internal
  */
  applyTransaction(e) {
    let t = this.config, { base: n, compartments: r } = t;
    for (let o of e.effects)
      o.is($c.reconfigure) ? (t && (r = /* @__PURE__ */ new Map(), t.compartments.forEach((l, a) => r.set(a, l)), t = null), r.set(o.value.compartment, o.value.extension)) : o.is(Ue.reconfigure) ? (t = null, n = o.value) : o.is(Ue.appendConfig) && (t = null, n = as(n).concat(o.value));
    let s;
    t ? s = e.startState.values.slice() : (t = Uh.resolve(n, r, this), s = new xe(t, this.doc, this.selection, t.dynamicSlots.map(() => null), (l, a) => a.reconfigure(l, this), null).values), new xe(t, e.newDoc, e.newSelection, s, (o, l) => l.update(o, e), e);
  }
  /**
  Create a [transaction spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec) that
  replaces every selection range with the given content.
  */
  replaceSelection(e) {
    return typeof e == "string" && (e = this.toText(e)), this.changeByRange((t) => ({
      changes: { from: t.from, to: t.to, insert: e },
      range: ie.cursor(t.from + e.length)
    }));
  }
  /**
  Create a set of changes and a new selection by running the given
  function for each range in the active selection. The function
  can return an optional set of changes (in the coordinate space
  of the start document), plus an updated range (in the coordinate
  space of the document produced by the call's own changes). This
  method will merge all the changes and ranges into a single
  changeset and selection, and return it as a [transaction
  spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec), which can be passed to
  [`update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).
  */
  changeByRange(e) {
    let t = this.selection, n = e(t.ranges[0]), r = this.changes(n.changes), s = [n.range], o = as(n.effects);
    for (let l = 1; l < t.ranges.length; l++) {
      let a = e(t.ranges[l]), h = this.changes(a.changes), c = h.map(r);
      for (let u = 0; u < l; u++)
        s[u] = s[u].map(c);
      let f = r.mapDesc(h, !0);
      s.push(a.range.map(f)), r = r.compose(c), o = Ue.mapEffects(o, c).concat(Ue.mapEffects(as(a.effects), f));
    }
    return {
      changes: r,
      selection: ie.create(s, t.mainIndex),
      effects: o
    };
  }
  /**
  Create a [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet) from the given change
  description, taking the state's document length and line
  separator into account.
  */
  changes(e = []) {
    return e instanceof rt ? e : rt.of(e, this.doc.length, this.facet(xe.lineSeparator));
  }
  /**
  Using the state's [line
  separator](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator), create a
  [`Text`](https://codemirror.net/6/docs/ref/#text.Text) instance from the given string.
  */
  toText(e) {
    return Pe.of(e.split(this.facet(xe.lineSeparator) || pO));
  }
  /**
  Return the given range of the document as a string.
  */
  sliceDoc(e = 0, t = this.doc.length) {
    return this.doc.sliceString(e, t, this.lineBreak);
  }
  /**
  Get the value of a state [facet](https://codemirror.net/6/docs/ref/#state.Facet).
  */
  facet(e) {
    let t = this.config.address[e.id];
    return t == null ? e.default : (gr(this, t), Yh(this, t));
  }
  /**
  Convert this state to a JSON-serializable object. When custom
  fields should be serialized, you can pass them in as an object
  mapping property names (in the resulting object, which should
  not use `doc` or `selection`) to fields.
  */
  toJSON(e) {
    let t = {
      doc: this.sliceDoc(),
      selection: this.selection.toJSON()
    };
    if (e)
      for (let n in e) {
        let r = e[n];
        r instanceof Ls && (t[n] = r.spec.toJSON(this.field(e[n]), this));
      }
    return t;
  }
  /**
  Deserialize a state from its JSON representation. When custom
  fields should be deserialized, pass the same object you passed
  to [`toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) when serializing as
  third argument.
  */
  static fromJSON(e, t = {}, n) {
    if (!e || typeof e.doc != "string")
      throw new RangeError("Invalid JSON representation for EditorState");
    let r = [];
    if (n)
      for (let s in n) {
        let o = n[s], l = e[s];
        r.push(o.init((a) => o.spec.fromJSON(l, a)));
      }
    return xe.create({
      doc: e.doc,
      selection: ie.fromJSON(e.selection),
      extensions: t.extensions ? r.concat([t.extensions]) : r
    });
  }
  /**
  Create a new state. You'll usually only need this when
  initializing an editor—updated states are created by applying
  transactions.
  */
  static create(e = {}) {
    let t = Uh.resolve(e.extensions || [], /* @__PURE__ */ new Map()), n = e.doc instanceof Pe ? e.doc : Pe.of((e.doc || "").split(t.staticFacet(xe.lineSeparator) || pO)), r = e.selection ? e.selection instanceof ie ? e.selection : ie.single(e.selection.anchor, e.selection.head) : ie.single(0);
    return oP(r, n.length), t.staticFacet(cP) || (r = r.asSingle()), new xe(t, n, r, t.dynamicSlots.map(() => null), (s, o) => o.create(s), null);
  }
  /**
  The size (in columns) of a tab in the document, determined by
  the [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) facet.
  */
  get tabSize() {
    return this.facet(xe.tabSize);
  }
  /**
  Get the proper [line-break](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator)
  string for this state.
  */
  get lineBreak() {
    return this.facet(xe.lineSeparator) || `
`;
  }
  /**
  Returns true when the editor is
  [configured](https://codemirror.net/6/docs/ref/#state.EditorState^readOnly) to be read-only.
  */
  get readOnly() {
    return this.facet(pP);
  }
  /**
  Look up a translation for the given phrase (via the
  [`phrases`](https://codemirror.net/6/docs/ref/#state.EditorState^phrases) facet), or return the
  original string if no translation is found.
  */
  phrase(e) {
    for (let t of this.facet(xe.phrases))
      if (Object.prototype.hasOwnProperty.call(t, e))
        return t[e];
    return e;
  }
  /**
  Find the values for a given language data field, provided by the
  the [`languageData`](https://codemirror.net/6/docs/ref/#state.EditorState^languageData) facet.
  */
  languageDataAt(e, t, n = -1) {
    let r = [];
    for (let s of this.facet(hP))
      for (let o of s(this, t, n))
        Object.prototype.hasOwnProperty.call(o, e) && r.push(o[e]);
    return r;
  }
  /**
  Return a function that can categorize strings (expected to
  represent a single [grapheme cluster](https://codemirror.net/6/docs/ref/#text.findClusterBreak))
  into one of:
  
   - Word (contains an alphanumeric character or a character
     explicitly listed in the local language's `"wordChars"`
     language data, which should be a string)
   - Space (contains only whitespace)
   - Other (anything else)
  */
  charCategorizer(e) {
    return b3(this.languageDataAt("wordChars", e).join(""));
  }
  /**
  Find the word at the given position, meaning the range
  containing all [word](https://codemirror.net/6/docs/ref/#state.CharCategory.Word) characters
  around it. If no word characters are adjacent to the position,
  this returns null.
  */
  wordAt(e) {
    let { text: t, from: n, length: r } = this.doc.lineAt(e), s = this.charCategorizer(e), o = e - n, l = e - n;
    for (; o > 0; ) {
      let a = Xn(t, o, !1);
      if (s(t.slice(a, o)) != un.Word)
        break;
      o = a;
    }
    for (; l < r; ) {
      let a = Xn(t, l);
      if (s(t.slice(l, a)) != un.Word)
        break;
      l = a;
    }
    return o == l ? null : ie.range(o + n, l + n);
  }
}
xe.allowMultipleSelections = cP;
xe.tabSize = /* @__PURE__ */ be.define({
  combine: (i) => i.length ? i[0] : 4
});
xe.lineSeparator = fP;
xe.readOnly = pP;
xe.phrases = /* @__PURE__ */ be.define();
xe.languageData = hP;
xe.changeFilter = uP;
xe.transactionFilter = dP;
xe.transactionExtender = OP;
$c.reconfigure = /* @__PURE__ */ Ue.define();
class hl {
  /**
  Compare this value with another value. The default
  implementation compares by identity.
  */
  eq(e) {
    return this == e;
  }
  /**
  Create a [range](https://codemirror.net/6/docs/ref/#rangeset.Range) with this value.
  */
  range(e, t = e) {
    return new xO(e, t, this);
  }
}
hl.prototype.startSide = hl.prototype.endSide = 0;
hl.prototype.point = !1;
hl.prototype.mapMode = Gt.TrackDel;
class xO {
  /**
  @internal
  */
  constructor(e, t, n) {
    this.from = e, this.to = t, this.value = n;
  }
}
function wO(i, e) {
  return i.from - e.from || i.value.startSide - e.value.startSide;
}
class vm {
  constructor(e, t, n, r) {
    this.from = e, this.to = t, this.value = n, this.maxPoint = r;
  }
  get length() {
    return this.to[this.to.length - 1];
  }
  // Find the index of the given position and side. Use the ranges'
  // `from` pos when `end == false`, `to` when `end == true`.
  findIndex(e, t, n, r = 0) {
    let s = n ? this.to : this.from;
    for (let o = r, l = s.length; ; ) {
      if (o == l)
        return o;
      let a = o + l >> 1, h = s[a] - e || (n ? this.value[a].endSide : this.value[a].startSide) - t;
      if (a == o)
        return h >= 0 ? o : l;
      h >= 0 ? l = a : o = a + 1;
    }
  }
  between(e, t, n, r) {
    for (let s = this.findIndex(t, -1e9, !0), o = this.findIndex(n, 1e9, !1, s); s < o; s++)
      if (r(this.from[s] + e, this.to[s] + e, this.value[s]) === !1)
        return !1;
  }
  map(e, t) {
    let n = [], r = [], s = [], o = -1, l = -1;
    for (let a = 0; a < this.value.length; a++) {
      let h = this.value[a], c = this.from[a] + e, f = this.to[a] + e, u, d;
      if (c == f) {
        let O = t.mapPos(c, h.startSide, h.mapMode);
        if (O == null || (u = d = O, h.startSide != h.endSide && (d = t.mapPos(c, h.endSide), d < u)))
          continue;
      } else if (u = t.mapPos(c, h.startSide), d = t.mapPos(f, h.endSide), u > d || u == d && h.startSide > 0 && h.endSide <= 0)
        continue;
      (d - u || h.endSide - h.startSide) < 0 || (o < 0 && (o = u), h.point && (l = Math.max(l, d - u)), n.push(h), r.push(u - o), s.push(d - o));
    }
    return { mapped: n.length ? new vm(r, s, n, l) : null, pos: o };
  }
}
class Ge {
  /**
  @internal
  */
  constructor(e, t, n = Ge.empty, r) {
    this.chunkPos = e, this.chunk = t, this.nextLayer = n, this.maxPoint = r;
  }
  /**
  @internal
  */
  get length() {
    let e = this.chunk.length - 1;
    return e < 0 ? 0 : Math.max(this.chunkEnd(e), this.nextLayer.length);
  }
  /**
  The number of ranges in the set.
  */
  get size() {
    if (this.isEmpty)
      return 0;
    let e = this.nextLayer.size;
    for (let t of this.chunk)
      e += t.value.length;
    return e;
  }
  /**
  @internal
  */
  chunkEnd(e) {
    return this.chunkPos[e] + this.chunk[e].length;
  }
  /**
  Update the range set, optionally adding new ranges or filtering
  out existing ones.
  
  (The extra type parameter is just there as a kludge to work
  around TypeScript variance issues that prevented `RangeSet<X>`
  from being a subtype of `RangeSet<Y>` when `X` is a subtype of
  `Y`.)
  */
  update(e) {
    let { add: t = [], sort: n = !1, filterFrom: r = 0, filterTo: s = this.length } = e, o = e.filter;
    if (t.length == 0 && !o)
      return this;
    if (n && (t = t.slice().sort(wO)), this.isEmpty)
      return t.length ? Ge.of(t) : this;
    let l = new yP(this, null, -1).goto(0), a = 0, h = [], c = new cl();
    for (; l.value || a < t.length; )
      if (a < t.length && (l.from - t[a].from || l.startSide - t[a].value.startSide) >= 0) {
        let f = t[a++];
        c.addInner(f.from, f.to, f.value) || h.push(f);
      } else l.rangeIndex == 1 && l.chunkIndex < this.chunk.length && (a == t.length || this.chunkEnd(l.chunkIndex) < t[a].from) && (!o || r > this.chunkEnd(l.chunkIndex) || s < this.chunkPos[l.chunkIndex]) && c.addChunk(this.chunkPos[l.chunkIndex], this.chunk[l.chunkIndex]) ? l.nextChunk() : ((!o || r > l.to || s < l.from || o(l.from, l.to, l.value)) && (c.addInner(l.from, l.to, l.value) || h.push(new xO(l.from, l.to, l.value))), l.next());
    return c.finishInner(this.nextLayer.isEmpty && !h.length ? Ge.empty : this.nextLayer.update({ add: h, filter: o, filterFrom: r, filterTo: s }));
  }
  /**
  Map this range set through a set of changes, return the new set.
  */
  map(e) {
    if (e.empty || this.isEmpty)
      return this;
    let t = [], n = [], r = -1;
    for (let o = 0; o < this.chunk.length; o++) {
      let l = this.chunkPos[o], a = this.chunk[o], h = e.touchesRange(l, l + a.length);
      if (h === !1)
        r = Math.max(r, a.maxPoint), t.push(a), n.push(e.mapPos(l));
      else if (h === !0) {
        let { mapped: c, pos: f } = a.map(l, e);
        c && (r = Math.max(r, c.maxPoint), t.push(c), n.push(f));
      }
    }
    let s = this.nextLayer.map(e);
    return t.length == 0 ? s : new Ge(n, t, s, r);
  }
  /**
  Iterate over the ranges that touch the region `from` to `to`,
  calling `f` for each. There is no guarantee that the ranges will
  be reported in any specific order. When the callback returns
  `false`, iteration stops.
  */
  between(e, t, n) {
    if (!this.isEmpty) {
      for (let r = 0; r < this.chunk.length; r++) {
        let s = this.chunkPos[r], o = this.chunk[r];
        if (t >= s && e <= s + o.length && o.between(s, e - s, t - s, n) === !1)
          return;
      }
      this.nextLayer.between(e, t, n);
    }
  }
  /**
  Iterate over the ranges in this set, in order, including all
  ranges that end at or after `from`.
  */
  iter(e = 0) {
    return fl.from([this]).goto(e);
  }
  /**
  @internal
  */
  get isEmpty() {
    return this.nextLayer == this;
  }
  /**
  Iterate over the ranges in a collection of sets, in order,
  starting from `from`.
  */
  static iter(e, t = 0) {
    return fl.from(e).goto(t);
  }
  /**
  Iterate over two groups of sets, calling methods on `comparator`
  to notify it of possible differences.
  */
  static compare(e, t, n, r, s = -1) {
    let o = e.filter((f) => f.maxPoint > 0 || !f.isEmpty && f.maxPoint >= s), l = t.filter((f) => f.maxPoint > 0 || !f.isEmpty && f.maxPoint >= s), a = _y(o, l, n), h = new eo(o, a, s), c = new eo(l, a, s);
    n.iterGaps((f, u, d) => Xy(h, f, c, u, d, r)), n.empty && n.length == 0 && Xy(h, 0, c, 0, 0, r);
  }
  /**
  Compare the contents of two groups of range sets, returning true
  if they are equivalent in the given range.
  */
  static eq(e, t, n = 0, r) {
    r == null && (r = 1e9);
    let s = e.filter((c) => !c.isEmpty && t.indexOf(c) < 0), o = t.filter((c) => !c.isEmpty && e.indexOf(c) < 0);
    if (s.length != o.length)
      return !1;
    if (!s.length)
      return !0;
    let l = _y(s, o), a = new eo(s, l, 0).goto(n), h = new eo(o, l, 0).goto(n);
    for (; ; ) {
      if (a.to != h.to || !kO(a.active, h.active) || a.point && (!h.point || !a.point.eq(h.point)))
        return !1;
      if (a.to > r)
        return !0;
      a.next(), h.next();
    }
  }
  /**
  Iterate over a group of range sets at the same time, notifying
  the iterator about the ranges covering every given piece of
  content. Returns the open count (see
  [`SpanIterator.span`](https://codemirror.net/6/docs/ref/#rangeset.SpanIterator.span)) at the end
  of the iteration.
  */
  static spans(e, t, n, r, s = -1) {
    var o;
    let l = new eo(e, null, s, (o = r.filterPoint) === null || o === void 0 ? void 0 : o.bind(r)).goto(t), a = t, h = l.openStart;
    for (; ; ) {
      let c = Math.min(l.to, n);
      if (l.point ? (r.point(a, c, l.point, l.activeForPoint(l.to), h), h = l.openEnd(c) + (l.to > c ? 1 : 0)) : c > a && (r.span(a, c, l.active, h), h = l.openEnd(c)), l.to > n)
        break;
      a = l.to, l.next();
    }
    return h;
  }
  /**
  Create a range set for the given range or array of ranges. By
  default, this expects the ranges to be _sorted_ (by start
  position and, if two start at the same position,
  `value.startSide`). You can pass `true` as second argument to
  cause the method to sort them.
  */
  static of(e, t = !1) {
    let n = new cl();
    for (let r of e instanceof xO ? [e] : t ? x3(e) : e)
      n.add(r.from, r.to, r.value);
    return n.finish();
  }
}
Ge.empty = /* @__PURE__ */ new Ge([], [], null, -1);
function x3(i) {
  if (i.length > 1)
    for (let e = i[0], t = 1; t < i.length; t++) {
      let n = i[t];
      if (wO(e, n) > 0)
        return i.slice().sort(wO);
      e = n;
    }
  return i;
}
Ge.empty.nextLayer = Ge.empty;
class cl {
  /**
  Create an empty builder.
  */
  constructor() {
    this.chunks = [], this.chunkPos = [], this.chunkStart = -1, this.last = null, this.lastFrom = -1e9, this.lastTo = -1e9, this.from = [], this.to = [], this.value = [], this.maxPoint = -1, this.setMaxPoint = -1, this.nextLayer = null;
  }
  finishChunk(e) {
    this.chunks.push(new vm(this.from, this.to, this.value, this.maxPoint)), this.chunkPos.push(this.chunkStart), this.chunkStart = -1, this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint), this.maxPoint = -1, e && (this.from = [], this.to = [], this.value = []);
  }
  /**
  Add a range. Ranges should be added in sorted (by `from` and
  `value.startSide`) order.
  */
  add(e, t, n) {
    this.addInner(e, t, n) || (this.nextLayer || (this.nextLayer = new cl())).add(e, t, n);
  }
  /**
  @internal
  */
  addInner(e, t, n) {
    let r = e - this.lastTo || n.startSide - this.last.endSide;
    if (r <= 0 && (e - this.lastFrom || n.startSide - this.last.startSide) < 0)
      throw new Error("Ranges must be added sorted by `from` position and `startSide`");
    return r < 0 ? !1 : (this.from.length == 250 && this.finishChunk(!0), this.chunkStart < 0 && (this.chunkStart = e), this.from.push(e - this.chunkStart), this.to.push(t - this.chunkStart), this.last = n, this.lastFrom = e, this.lastTo = t, this.value.push(n), n.point && (this.maxPoint = Math.max(this.maxPoint, t - e)), !0);
  }
  /**
  @internal
  */
  addChunk(e, t) {
    if ((e - this.lastTo || t.value[0].startSide - this.last.endSide) < 0)
      return !1;
    this.from.length && this.finishChunk(!0), this.setMaxPoint = Math.max(this.setMaxPoint, t.maxPoint), this.chunks.push(t), this.chunkPos.push(e);
    let n = t.value.length - 1;
    return this.last = t.value[n], this.lastFrom = t.from[n] + e, this.lastTo = t.to[n] + e, !0;
  }
  /**
  Finish the range set. Returns the new set. The builder can't be
  used anymore after this has been called.
  */
  finish() {
    return this.finishInner(Ge.empty);
  }
  /**
  @internal
  */
  finishInner(e) {
    if (this.from.length && this.finishChunk(!1), this.chunks.length == 0)
      return e;
    let t = new Ge(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(e) : e, this.setMaxPoint);
    return this.from = null, t;
  }
}
function _y(i, e, t) {
  let n = /* @__PURE__ */ new Map();
  for (let s of i)
    for (let o = 0; o < s.chunk.length; o++)
      s.chunk[o].maxPoint <= 0 && n.set(s.chunk[o], s.chunkPos[o]);
  let r = /* @__PURE__ */ new Set();
  for (let s of e)
    for (let o = 0; o < s.chunk.length; o++) {
      let l = n.get(s.chunk[o]);
      l != null && (t ? t.mapPos(l) : l) == s.chunkPos[o] && !t?.touchesRange(l, l + s.chunk[o].length) && r.add(s.chunk[o]);
    }
  return r;
}
class yP {
  constructor(e, t, n, r = 0) {
    this.layer = e, this.skip = t, this.minPoint = n, this.rank = r;
  }
  get startSide() {
    return this.value ? this.value.startSide : 0;
  }
  get endSide() {
    return this.value ? this.value.endSide : 0;
  }
  goto(e, t = -1e9) {
    return this.chunkIndex = this.rangeIndex = 0, this.gotoInner(e, t, !1), this;
  }
  gotoInner(e, t, n) {
    for (; this.chunkIndex < this.layer.chunk.length; ) {
      let r = this.layer.chunk[this.chunkIndex];
      if (!(this.skip && this.skip.has(r) || this.layer.chunkEnd(this.chunkIndex) < e || r.maxPoint < this.minPoint))
        break;
      this.chunkIndex++, n = !1;
    }
    if (this.chunkIndex < this.layer.chunk.length) {
      let r = this.layer.chunk[this.chunkIndex].findIndex(e - this.layer.chunkPos[this.chunkIndex], t, !0);
      (!n || this.rangeIndex < r) && this.setRangeIndex(r);
    }
    this.next();
  }
  forward(e, t) {
    (this.to - e || this.endSide - t) < 0 && this.gotoInner(e, t, !0);
  }
  next() {
    for (; ; )
      if (this.chunkIndex == this.layer.chunk.length) {
        this.from = this.to = 1e9, this.value = null;
        break;
      } else {
        let e = this.layer.chunkPos[this.chunkIndex], t = this.layer.chunk[this.chunkIndex], n = e + t.from[this.rangeIndex];
        if (this.from = n, this.to = e + t.to[this.rangeIndex], this.value = t.value[this.rangeIndex], this.setRangeIndex(this.rangeIndex + 1), this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint)
          break;
      }
  }
  setRangeIndex(e) {
    if (e == this.layer.chunk[this.chunkIndex].value.length) {
      if (this.chunkIndex++, this.skip)
        for (; this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex]); )
          this.chunkIndex++;
      this.rangeIndex = 0;
    } else
      this.rangeIndex = e;
  }
  nextChunk() {
    this.chunkIndex++, this.rangeIndex = 0, this.next();
  }
  compare(e) {
    return this.from - e.from || this.startSide - e.startSide || this.rank - e.rank || this.to - e.to || this.endSide - e.endSide;
  }
}
class fl {
  constructor(e) {
    this.heap = e;
  }
  static from(e, t = null, n = -1) {
    let r = [];
    for (let s = 0; s < e.length; s++)
      for (let o = e[s]; !o.isEmpty; o = o.nextLayer)
        o.maxPoint >= n && r.push(new yP(o, t, n, s));
    return r.length == 1 ? r[0] : new fl(r);
  }
  get startSide() {
    return this.value ? this.value.startSide : 0;
  }
  goto(e, t = -1e9) {
    for (let n of this.heap)
      n.goto(e, t);
    for (let n = this.heap.length >> 1; n >= 0; n--)
      eu(this.heap, n);
    return this.next(), this;
  }
  forward(e, t) {
    for (let n of this.heap)
      n.forward(e, t);
    for (let n = this.heap.length >> 1; n >= 0; n--)
      eu(this.heap, n);
    (this.to - e || this.value.endSide - t) < 0 && this.next();
  }
  next() {
    if (this.heap.length == 0)
      this.from = this.to = 1e9, this.value = null, this.rank = -1;
    else {
      let e = this.heap[0];
      this.from = e.from, this.to = e.to, this.value = e.value, this.rank = e.rank, e.value && e.next(), eu(this.heap, 0);
    }
  }
}
function eu(i, e) {
  for (let t = i[e]; ; ) {
    let n = (e << 1) + 1;
    if (n >= i.length)
      break;
    let r = i[n];
    if (n + 1 < i.length && r.compare(i[n + 1]) >= 0 && (r = i[n + 1], n++), t.compare(r) < 0)
      break;
    i[n] = t, i[e] = r, e = n;
  }
}
class eo {
  constructor(e, t, n, r = () => !0) {
    this.minPoint = n, this.filterPoint = r, this.active = [], this.activeTo = [], this.activeRank = [], this.minActive = -1, this.point = null, this.pointFrom = 0, this.pointRank = 0, this.to = -1e9, this.endSide = 0, this.openStart = -1, this.cursor = fl.from(e, t, n);
  }
  goto(e, t = -1e9) {
    return this.cursor.goto(e, t), this.active.length = this.activeTo.length = this.activeRank.length = 0, this.minActive = -1, this.to = e, this.endSide = t, this.openStart = -1, this.next(), this;
  }
  forward(e, t) {
    for (; this.minActive > -1 && (this.activeTo[this.minActive] - e || this.active[this.minActive].endSide - t) < 0; )
      this.removeActive(this.minActive);
    this.cursor.forward(e, t);
  }
  removeActive(e) {
    da(this.active, e), da(this.activeTo, e), da(this.activeRank, e), this.minActive = Ly(this.active, this.activeTo);
  }
  addActive(e) {
    let t = 0, { value: n, to: r, rank: s } = this.cursor;
    for (; t < this.activeRank.length && this.activeRank[t] <= s; )
      t++;
    Oa(this.active, t, n), Oa(this.activeTo, t, r), Oa(this.activeRank, t, s), e && Oa(e, t, this.cursor.from), this.minActive = Ly(this.active, this.activeTo);
  }
  // After calling this, if `this.point` != null, the next range is a
  // point. Otherwise, it's a regular range, covered by `this.active`.
  next() {
    let e = this.to, t = this.point;
    this.point = null;
    let n = this.openStart < 0 ? [] : null, r = 0;
    for (; ; ) {
      let s = this.minActive;
      if (s > -1 && (this.activeTo[s] - this.cursor.from || this.active[s].endSide - this.cursor.startSide) < 0) {
        if (this.activeTo[s] > e) {
          this.to = this.activeTo[s], this.endSide = this.active[s].endSide;
          break;
        }
        this.removeActive(s), n && da(n, s);
      } else if (this.cursor.value)
        if (this.cursor.from > e) {
          this.to = this.cursor.from, this.endSide = this.cursor.startSide;
          break;
        } else {
          let o = this.cursor.value;
          if (!o.point)
            this.addActive(n), this.cursor.next();
          else if (t && this.cursor.to == this.to && this.cursor.from < this.cursor.to)
            this.cursor.next();
          else if (!this.filterPoint(this.cursor.from, this.cursor.to, this.cursor.value, this.cursor.rank))
            this.cursor.next();
          else {
            this.point = o, this.pointFrom = this.cursor.from, this.pointRank = this.cursor.rank, this.to = this.cursor.to, this.endSide = o.endSide, this.cursor.from < e && (r = 1), this.cursor.next(), this.forward(this.to, this.endSide);
            break;
          }
        }
      else {
        this.to = this.endSide = 1e9;
        break;
      }
    }
    if (n) {
      let s = 0;
      for (; s < n.length && n[s] < e; )
        s++;
      this.openStart = s + r;
    }
  }
  activeForPoint(e) {
    if (!this.active.length)
      return this.active;
    let t = [];
    for (let n = this.active.length - 1; n >= 0 && !(this.activeRank[n] < this.pointRank); n--)
      (this.activeTo[n] > e || this.activeTo[n] == e && this.active[n].endSide >= this.point.endSide) && t.push(this.active[n]);
    return t.reverse();
  }
  openEnd(e) {
    let t = 0;
    for (let n = this.activeTo.length - 1; n >= 0 && this.activeTo[n] > e; n--)
      t++;
    return t;
  }
}
function Xy(i, e, t, n, r, s) {
  i.goto(e), t.goto(n);
  let o = n + r, l = n, a = n - e;
  for (; ; ) {
    let h = i.to + a - t.to || i.endSide - t.endSide, c = h < 0 ? i.to + a : t.to, f = Math.min(c, o);
    if (i.point || t.point ? i.point && t.point && (i.point == t.point || i.point.eq(t.point)) && kO(i.activeForPoint(i.to + a), t.activeForPoint(t.to)) || s.comparePoint(l, f, i.point, t.point) : f > l && !kO(i.active, t.active) && s.compareRange(l, f, i.active, t.active), c > o)
      break;
    l = c, h <= 0 && i.next(), h >= 0 && t.next();
  }
}
function kO(i, e) {
  if (i.length != e.length)
    return !1;
  for (let t = 0; t < i.length; t++)
    if (i[t] != e[t] && !i[t].eq(e[t]))
      return !1;
  return !0;
}
function da(i, e) {
  for (let t = e, n = i.length - 1; t < n; t++)
    i[t] = i[t + 1];
  i.pop();
}
function Oa(i, e, t) {
  for (let n = i.length - 1; n >= e; n--)
    i[n + 1] = i[n];
  i[e] = t;
}
function Ly(i, e) {
  let t = -1, n = 1e9;
  for (let r = 0; r < e.length; r++)
    (e[r] - n || i[r].endSide - i[t].endSide) < 0 && (t = r, n = e[r]);
  return t;
}
function Gh(i) {
  let e;
  return i.nodeType == 11 ? e = i.getSelection ? i : i.ownerDocument : e = i, e.getSelection();
}
function ks(i, e) {
  return e ? i == e || i.contains(e.nodeType != 1 ? e.parentNode : e) : !1;
}
function w3() {
  let i = document.activeElement;
  for (; i && i.shadowRoot; )
    i = i.shadowRoot.activeElement;
  return i;
}
function vO(i, e) {
  if (!e.anchorNode)
    return !1;
  try {
    return ks(i, e.anchorNode);
  } catch {
    return !1;
  }
}
function ul(i) {
  return i.nodeType == 3 ? dl(i, 0, i.nodeValue.length).getClientRects() : i.nodeType == 1 ? i.getClientRects() : [];
}
function Fh(i, e, t, n) {
  return t ? By(i, e, t, n, -1) || By(i, e, t, n, 1) : !1;
}
function QO(i) {
  for (var e = 0; ; e++)
    if (i = i.previousSibling, !i)
      return e;
}
function By(i, e, t, n, r) {
  for (; ; ) {
    if (i == t && e == n)
      return !0;
    if (e == (r < 0 ? 0 : Hh(i))) {
      if (i.nodeName == "DIV")
        return !1;
      let s = i.parentNode;
      if (!s || s.nodeType != 1)
        return !1;
      e = QO(i) + (r < 0 ? 0 : 1), i = s;
    } else if (i.nodeType == 1) {
      if (i = i.childNodes[e + (r < 0 ? -1 : 0)], i.nodeType == 1 && i.contentEditable == "false")
        return !1;
      e = r < 0 ? Hh(i) : 0;
    } else
      return !1;
  }
}
function Hh(i) {
  return i.nodeType == 3 ? i.nodeValue.length : i.childNodes.length;
}
const SP = { left: 0, right: 0, top: 0, bottom: 0 };
function Tc(i, e) {
  let t = e ? i.left : i.right;
  return { left: t, right: t, top: i.top, bottom: i.bottom };
}
function k3(i) {
  return {
    left: 0,
    right: i.innerWidth,
    top: 0,
    bottom: i.innerHeight
  };
}
function v3(i, e, t, n, r, s, o, l) {
  let a = i.ownerDocument, h = a.defaultView;
  for (let c = i; c; )
    if (c.nodeType == 1) {
      let f, u = c == a.body;
      if (u)
        f = k3(h);
      else {
        if (c.scrollHeight <= c.clientHeight && c.scrollWidth <= c.clientWidth) {
          c = c.parentNode;
          continue;
        }
        let p = c.getBoundingClientRect();
        f = {
          left: p.left,
          right: p.left + c.clientWidth,
          top: p.top,
          bottom: p.top + c.clientHeight
        };
      }
      let d = 0, O = 0;
      if (r == "nearest")
        e.top < f.top ? (O = -(f.top - e.top + o), t > 0 && e.bottom > f.bottom + O && (O = e.bottom - f.bottom + O + o)) : e.bottom > f.bottom && (O = e.bottom - f.bottom + o, t < 0 && e.top - O < f.top && (O = -(f.top + O - e.top + o)));
      else {
        let p = e.bottom - e.top, m = f.bottom - f.top;
        O = (r == "center" && p <= m ? e.top + p / 2 - m / 2 : r == "start" || r == "center" && t < 0 ? e.top - o : e.bottom - m + o) - f.top;
      }
      if (n == "nearest" ? e.left < f.left ? (d = -(f.left - e.left + s), t > 0 && e.right > f.right + d && (d = e.right - f.right + d + s)) : e.right > f.right && (d = e.right - f.right + s, t < 0 && e.left < f.left + d && (d = -(f.left + d - e.left + s))) : d = (n == "center" ? e.left + (e.right - e.left) / 2 - (f.right - f.left) / 2 : n == "start" == l ? e.left - s : e.right - (f.right - f.left) + s) - f.left, d || O)
        if (u)
          h.scrollBy(d, O);
        else {
          if (O) {
            let p = c.scrollTop;
            c.scrollTop += O, O = c.scrollTop - p;
          }
          if (d) {
            let p = c.scrollLeft;
            c.scrollLeft += d, d = c.scrollLeft - p;
          }
          e = {
            left: e.left - d,
            top: e.top - O,
            right: e.right - d,
            bottom: e.bottom - O
          };
        }
      if (u)
        break;
      c = c.assignedSlot || c.parentNode, n = r = "nearest";
    } else if (c.nodeType == 11)
      c = c.host;
    else
      break;
}
class Q3 {
  constructor() {
    this.anchorNode = null, this.anchorOffset = 0, this.focusNode = null, this.focusOffset = 0;
  }
  eq(e) {
    return this.anchorNode == e.anchorNode && this.anchorOffset == e.anchorOffset && this.focusNode == e.focusNode && this.focusOffset == e.focusOffset;
  }
  setRange(e) {
    this.set(e.anchorNode, e.anchorOffset, e.focusNode, e.focusOffset);
  }
  set(e, t, n, r) {
    this.anchorNode = e, this.anchorOffset = t, this.focusNode = n, this.focusOffset = r;
  }
}
let Xr = null;
function bP(i) {
  if (i.setActive)
    return i.setActive();
  if (Xr)
    return i.focus(Xr);
  let e = [];
  for (let t = i; t && (e.push(t, t.scrollTop, t.scrollLeft), t != t.ownerDocument); t = t.parentNode)
    ;
  if (i.focus(Xr == null ? {
    get preventScroll() {
      return Xr = { preventScroll: !0 }, !0;
    }
  } : void 0), !Xr) {
    Xr = !1;
    for (let t = 0; t < e.length; ) {
      let n = e[t++], r = e[t++], s = e[t++];
      n.scrollTop != r && (n.scrollTop = r), n.scrollLeft != s && (n.scrollLeft = s);
    }
  }
}
let Zy;
function dl(i, e, t = e) {
  let n = Zy || (Zy = document.createRange());
  return n.setEnd(i, t), n.setStart(i, e), n;
}
function Eo(i, e, t) {
  let n = { key: e, code: e, keyCode: t, which: t, cancelable: !0 }, r = new KeyboardEvent("keydown", n);
  r.synthetic = !0, i.dispatchEvent(r);
  let s = new KeyboardEvent("keyup", n);
  return s.synthetic = !0, i.dispatchEvent(s), r.defaultPrevented || s.defaultPrevented;
}
function P3(i) {
  for (; i; ) {
    if (i && (i.nodeType == 9 || i.nodeType == 11 && i.host))
      return i;
    i = i.assignedSlot || i.parentNode;
  }
  return null;
}
function xP(i) {
  for (; i.attributes.length; )
    i.removeAttributeNode(i.attributes[0]);
}
class lt {
  constructor(e, t, n = !0) {
    this.node = e, this.offset = t, this.precise = n;
  }
  static before(e, t) {
    return new lt(e.parentNode, QO(e), t);
  }
  static after(e, t) {
    return new lt(e.parentNode, QO(e) + 1, t);
  }
}
const Qm = [];
class Ve {
  constructor() {
    this.parent = null, this.dom = null, this.dirty = 2;
  }
  get editorView() {
    if (!this.parent)
      throw new Error("Accessing view in orphan content view");
    return this.parent.editorView;
  }
  get overrideDOMText() {
    return null;
  }
  get posAtStart() {
    return this.parent ? this.parent.posBefore(this) : 0;
  }
  get posAtEnd() {
    return this.posAtStart + this.length;
  }
  posBefore(e) {
    let t = this.posAtStart;
    for (let n of this.children) {
      if (n == e)
        return t;
      t += n.length + n.breakAfter;
    }
    throw new RangeError("Invalid child in posBefore");
  }
  posAfter(e) {
    return this.posBefore(e) + e.length;
  }
  // Will return a rectangle directly before (when side < 0), after
  // (side > 0) or directly on (when the browser supports it) the
  // given position.
  coordsAt(e, t) {
    return null;
  }
  sync(e) {
    if (this.dirty & 2) {
      let t = this.dom, n = null, r;
      for (let s of this.children) {
        if (s.dirty) {
          if (!s.dom && (r = n ? n.nextSibling : t.firstChild)) {
            let o = Ve.get(r);
            (!o || !o.parent && o.constructor == s.constructor) && s.reuseDOM(r);
          }
          s.sync(e), s.dirty = 0;
        }
        if (r = n ? n.nextSibling : t.firstChild, e && !e.written && e.node == t && r != s.dom && (e.written = !0), s.dom.parentNode == t)
          for (; r && r != s.dom; )
            r = Dy(r);
        else
          t.insertBefore(s.dom, r);
        n = s.dom;
      }
      for (r = n ? n.nextSibling : t.firstChild, r && e && e.node == t && (e.written = !0); r; )
        r = Dy(r);
    } else if (this.dirty & 1)
      for (let t of this.children)
        t.dirty && (t.sync(e), t.dirty = 0);
  }
  reuseDOM(e) {
  }
  localPosFromDOM(e, t) {
    let n;
    if (e == this.dom)
      n = this.dom.childNodes[t];
    else {
      let r = Hh(e) == 0 ? 0 : t == 0 ? -1 : 1;
      for (; ; ) {
        let s = e.parentNode;
        if (s == this.dom)
          break;
        r == 0 && s.firstChild != s.lastChild && (e == s.firstChild ? r = -1 : r = 1), e = s;
      }
      r < 0 ? n = e : n = e.nextSibling;
    }
    if (n == this.dom.firstChild)
      return 0;
    for (; n && !Ve.get(n); )
      n = n.nextSibling;
    if (!n)
      return this.length;
    for (let r = 0, s = 0; ; r++) {
      let o = this.children[r];
      if (o.dom == n)
        return s;
      s += o.length + o.breakAfter;
    }
  }
  domBoundsAround(e, t, n = 0) {
    let r = -1, s = -1, o = -1, l = -1;
    for (let a = 0, h = n, c = n; a < this.children.length; a++) {
      let f = this.children[a], u = h + f.length;
      if (h < e && u > t)
        return f.domBoundsAround(e, t, h);
      if (u >= e && r == -1 && (r = a, s = h), h > t && f.dom.parentNode == this.dom) {
        o = a, l = c;
        break;
      }
      c = u, h = u + f.breakAfter;
    }
    return {
      from: s,
      to: l < 0 ? n + this.length : l,
      startDOM: (r ? this.children[r - 1].dom.nextSibling : null) || this.dom.firstChild,
      endDOM: o < this.children.length && o >= 0 ? this.children[o].dom : null
    };
  }
  markDirty(e = !1) {
    this.dirty |= 2, this.markParentsDirty(e);
  }
  markParentsDirty(e) {
    for (let t = this.parent; t; t = t.parent) {
      if (e && (t.dirty |= 2), t.dirty & 1)
        return;
      t.dirty |= 1, e = !1;
    }
  }
  setParent(e) {
    this.parent != e && (this.parent = e, this.dirty && this.markParentsDirty(!0));
  }
  setDOM(e) {
    this.dom && (this.dom.cmView = null), this.dom = e, e.cmView = this;
  }
  get rootView() {
    for (let e = this; ; ) {
      let t = e.parent;
      if (!t)
        return e;
      e = t;
    }
  }
  replaceChildren(e, t, n = Qm) {
    this.markDirty();
    for (let r = e; r < t; r++) {
      let s = this.children[r];
      s.parent == this && s.destroy();
    }
    this.children.splice(e, t - e, ...n);
    for (let r = 0; r < n.length; r++)
      n[r].setParent(this);
  }
  ignoreMutation(e) {
    return !1;
  }
  ignoreEvent(e) {
    return !1;
  }
  childCursor(e = this.length) {
    return new wP(this.children, e, this.children.length);
  }
  childPos(e, t = 1) {
    return this.childCursor().findPos(e, t);
  }
  toString() {
    let e = this.constructor.name.replace("View", "");
    return e + (this.children.length ? "(" + this.children.join() + ")" : this.length ? "[" + (e == "Text" ? this.text : this.length) + "]" : "") + (this.breakAfter ? "#" : "");
  }
  static get(e) {
    return e.cmView;
  }
  get isEditable() {
    return !0;
  }
  merge(e, t, n, r, s, o) {
    return !1;
  }
  become(e) {
    return !1;
  }
  // When this is a zero-length view with a side, this should return a
  // number <= 0 to indicate it is before its position, or a
  // number > 0 when after its position.
  getSide() {
    return 0;
  }
  destroy() {
    this.parent = null;
  }
}
Ve.prototype.breakAfter = 0;
function Dy(i) {
  let e = i.nextSibling;
  return i.parentNode.removeChild(i), e;
}
class wP {
  constructor(e, t, n) {
    this.children = e, this.pos = t, this.i = n, this.off = 0;
  }
  findPos(e, t = 1) {
    for (; ; ) {
      if (e > this.pos || e == this.pos && (t > 0 || this.i == 0 || this.children[this.i - 1].breakAfter))
        return this.off = e - this.pos, this;
      let n = this.children[--this.i];
      this.pos -= n.length + n.breakAfter;
    }
  }
}
function kP(i, e, t, n, r, s, o, l, a) {
  let { children: h } = i, c = h.length ? h[e] : null, f = s.length ? s[s.length - 1] : null, u = f ? f.breakAfter : o;
  if (!(e == n && c && !o && !u && s.length < 2 && c.merge(t, r, s.length ? f : null, t == 0, l, a))) {
    if (n < h.length) {
      let d = h[n];
      d && r < d.length ? (e == n && (d = d.split(r), r = 0), !u && f && d.merge(0, r, f, !0, 0, a) ? s[s.length - 1] = d : (r && d.merge(0, r, null, !1, 0, a), s.push(d))) : d?.breakAfter && (f ? f.breakAfter = 1 : o = 1), n++;
    }
    for (c && (c.breakAfter = o, t > 0 && (!o && s.length && c.merge(t, c.length, s[0], !1, l, 0) ? c.breakAfter = s.shift().breakAfter : (t < c.length || c.children.length && c.children[c.children.length - 1].length == 0) && c.merge(t, c.length, null, !1, l, 0), e++)); e < n && s.length; )
      if (h[n - 1].become(s[s.length - 1]))
        n--, s.pop(), a = s.length ? 0 : l;
      else if (h[e].become(s[0]))
        e++, s.shift(), l = s.length ? 0 : a;
      else
        break;
    !s.length && e && n < h.length && !h[e - 1].breakAfter && h[n].merge(0, 0, h[e - 1], !1, l, a) && e--, (e < n || s.length) && i.replaceChildren(e, n, s);
  }
}
function vP(i, e, t, n, r, s) {
  let o = i.childCursor(), { i: l, off: a } = o.findPos(t, 1), { i: h, off: c } = o.findPos(e, -1), f = e - t;
  for (let u of n)
    f += u.length;
  i.length += f, kP(i, h, c, l, a, n, 0, r, s);
}
let di = typeof navigator < "u" ? navigator : { userAgent: "", vendor: "", platform: "" }, PO = typeof document < "u" ? document : { documentElement: { style: {} } };
const $O = /* @__PURE__ */ /Edge\/(\d+)/.exec(di.userAgent), QP = /* @__PURE__ */ /MSIE \d/.test(di.userAgent), TO = /* @__PURE__ */ /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(di.userAgent), Cc = !!(QP || TO || $O), Vy = !Cc && /* @__PURE__ */ /gecko\/(\d+)/i.test(di.userAgent), tu = !Cc && /* @__PURE__ */ /Chrome\/(\d+)/.exec(di.userAgent), $3 = "webkitFontSmoothing" in PO.documentElement.style, PP = !Cc && /* @__PURE__ */ /Apple Computer/.test(di.vendor), Wy = PP && (/* @__PURE__ */ /Mobile\/\w+/.test(di.userAgent) || di.maxTouchPoints > 2);
var ne = {
  mac: Wy || /* @__PURE__ */ /Mac/.test(di.platform),
  ie: Cc,
  ie_version: QP ? PO.documentMode || 6 : TO ? +TO[1] : $O ? +$O[1] : 0,
  gecko: Vy,
  gecko_version: Vy ? +(/* @__PURE__ */ /Firefox\/(\d+)/.exec(di.userAgent) || [0, 0])[1] : 0,
  chrome: !!tu,
  chrome_version: tu ? +tu[1] : 0,
  ios: Wy,
  android: /* @__PURE__ */ /Android\b/.test(di.userAgent),
  safari: PP,
  webkit_version: $3 ? +(/* @__PURE__ */ /\bAppleWebKit\/(\d+)/.exec(navigator.userAgent) || [0, 0])[1] : 0,
  tabSize: PO.documentElement.style.tabSize != null ? "tab-size" : "-moz-tab-size"
};
const T3 = 256;
class Yn extends Ve {
  constructor(e) {
    super(), this.text = e;
  }
  get length() {
    return this.text.length;
  }
  createDOM(e) {
    this.setDOM(e || document.createTextNode(this.text));
  }
  sync(e) {
    this.dom || this.createDOM(), this.dom.nodeValue != this.text && (e && e.node == this.dom && (e.written = !0), this.dom.nodeValue = this.text);
  }
  reuseDOM(e) {
    e.nodeType == 3 && this.createDOM(e);
  }
  merge(e, t, n) {
    return n && (!(n instanceof Yn) || this.length - (t - e) + n.length > T3) ? !1 : (this.text = this.text.slice(0, e) + (n ? n.text : "") + this.text.slice(t), this.markDirty(), !0);
  }
  split(e) {
    let t = new Yn(this.text.slice(e));
    return this.text = this.text.slice(0, e), this.markDirty(), t;
  }
  localPosFromDOM(e, t) {
    return e == this.dom ? t : t ? this.text.length : 0;
  }
  domAtPos(e) {
    return new lt(this.dom, e);
  }
  domBoundsAround(e, t, n) {
    return { from: n, to: n + this.length, startDOM: this.dom, endDOM: this.dom.nextSibling };
  }
  coordsAt(e, t) {
    return CO(this.dom, e, t);
  }
}
class Fi extends Ve {
  constructor(e, t = [], n = 0) {
    super(), this.mark = e, this.children = t, this.length = n;
    for (let r of t)
      r.setParent(this);
  }
  setAttrs(e) {
    if (xP(e), this.mark.class && (e.className = this.mark.class), this.mark.attrs)
      for (let t in this.mark.attrs)
        e.setAttribute(t, this.mark.attrs[t]);
    return e;
  }
  reuseDOM(e) {
    e.nodeName == this.mark.tagName.toUpperCase() && (this.setDOM(e), this.dirty |= 6);
  }
  sync(e) {
    this.dom ? this.dirty & 4 && this.setAttrs(this.dom) : this.setDOM(this.setAttrs(document.createElement(this.mark.tagName))), super.sync(e);
  }
  merge(e, t, n, r, s, o) {
    return n && (!(n instanceof Fi && n.mark.eq(this.mark)) || e && s <= 0 || t < this.length && o <= 0) ? !1 : (vP(this, e, t, n ? n.children : [], s - 1, o - 1), this.markDirty(), !0);
  }
  split(e) {
    let t = [], n = 0, r = -1, s = 0;
    for (let l of this.children) {
      let a = n + l.length;
      a > e && t.push(n < e ? l.split(e - n) : l), r < 0 && n >= e && (r = s), n = a, s++;
    }
    let o = this.length - e;
    return this.length = e, r > -1 && (this.children.length = r, this.markDirty()), new Fi(this.mark, t, o);
  }
  domAtPos(e) {
    return CP(this.dom, this.children, e);
  }
  coordsAt(e, t) {
    return AP(this, e, t);
  }
}
function CO(i, e, t) {
  let n = i.nodeValue.length;
  e > n && (e = n);
  let r = e, s = e, o = 0;
  e == 0 && t < 0 || e == n && t >= 0 ? ne.chrome || ne.gecko || (e ? (r--, o = 1) : (s++, o = -1)) : t < 0 ? r-- : s++;
  let l = dl(i, r, s).getClientRects();
  if (!l.length)
    return SP;
  let a = l[(o ? o < 0 : t >= 0) ? 0 : l.length - 1];
  return ne.safari && !o && a.width == 0 && (a = Array.prototype.find.call(l, (h) => h.width) || a), o ? Tc(a, o < 0) : a || null;
}
class Ln extends Ve {
  constructor(e, t, n) {
    super(), this.widget = e, this.length = t, this.side = n, this.prevWidget = null;
  }
  static create(e, t, n) {
    return new (e.customView || Ln)(e, t, n);
  }
  split(e) {
    let t = Ln.create(this.widget, this.length - e, this.side);
    return this.length -= e, t;
  }
  sync() {
    (!this.dom || !this.widget.updateDOM(this.dom)) && (this.dom && this.prevWidget && this.prevWidget.destroy(this.dom), this.prevWidget = null, this.setDOM(this.widget.toDOM(this.editorView)), this.dom.contentEditable = "false");
  }
  getSide() {
    return this.side;
  }
  merge(e, t, n, r, s, o) {
    return n && (!(n instanceof Ln) || !this.widget.compare(n.widget) || e > 0 && s <= 0 || t < this.length && o <= 0) ? !1 : (this.length = e + (n ? n.length : 0) + (this.length - t), !0);
  }
  become(e) {
    return e.length == this.length && e instanceof Ln && e.side == this.side && this.widget.constructor == e.widget.constructor ? (this.widget.eq(e.widget) || this.markDirty(!0), this.dom && !this.prevWidget && (this.prevWidget = this.widget), this.widget = e.widget, !0) : !1;
  }
  ignoreMutation() {
    return !0;
  }
  ignoreEvent(e) {
    return this.widget.ignoreEvent(e);
  }
  get overrideDOMText() {
    if (this.length == 0)
      return Pe.empty;
    let e = this;
    for (; e.parent; )
      e = e.parent;
    let t = e.editorView, n = t && t.state.doc, r = this.posAtStart;
    return n ? n.slice(r, r + this.length) : Pe.empty;
  }
  domAtPos(e) {
    return e == 0 ? lt.before(this.dom) : lt.after(this.dom, e == this.length);
  }
  domBoundsAround() {
    return null;
  }
  coordsAt(e, t) {
    let n = this.dom.getClientRects(), r = null;
    if (!n.length)
      return SP;
    for (let s = e > 0 ? n.length - 1 : 0; r = n[s], !(e > 0 ? s == 0 : s == n.length - 1 || r.top < r.bottom); s += e > 0 ? -1 : 1)
      ;
    return e == 0 && t > 0 || e == this.length && t <= 0 ? r : Tc(r, e == 0);
  }
  get isEditable() {
    return !1;
  }
  destroy() {
    super.destroy(), this.dom && this.widget.destroy(this.dom);
  }
}
class $P extends Ln {
  domAtPos(e) {
    let { topView: t, text: n } = this.widget;
    return t ? RO(e, 0, t, n, (r, s) => r.domAtPos(s), (r) => new lt(n, Math.min(r, n.nodeValue.length))) : new lt(n, Math.min(e, n.nodeValue.length));
  }
  sync() {
    this.setDOM(this.widget.toDOM());
  }
  localPosFromDOM(e, t) {
    let { topView: n, text: r } = this.widget;
    return n ? TP(e, t, n, r) : Math.min(t, this.length);
  }
  ignoreMutation() {
    return !1;
  }
  get overrideDOMText() {
    return null;
  }
  coordsAt(e, t) {
    let { topView: n, text: r } = this.widget;
    return n ? RO(e, t, n, r, (s, o, l) => s.coordsAt(o, l), (s, o) => CO(r, s, o)) : CO(r, e, t);
  }
  destroy() {
    var e;
    super.destroy(), (e = this.widget.topView) === null || e === void 0 || e.destroy();
  }
  get isEditable() {
    return !0;
  }
}
function RO(i, e, t, n, r, s) {
  if (t instanceof Fi) {
    for (let o of t.children) {
      let l = ks(o.dom, n), a = l ? n.nodeValue.length : o.length;
      if (i < a || i == a && o.getSide() <= 0)
        return l ? RO(i, e, o, n, r, s) : r(o, i, e);
      i -= a;
    }
    return r(t, t.length, -1);
  } else return t.dom == n ? s(i, e) : r(t, i, e);
}
function TP(i, e, t, n) {
  if (t instanceof Fi)
    for (let r of t.children) {
      let s = 0, o = ks(r.dom, n);
      if (ks(r.dom, i))
        return s + (o ? TP(i, e, r, n) : r.localPosFromDOM(i, e));
      s += o ? n.nodeValue.length : r.length;
    }
  else if (t.dom == n)
    return Math.min(e, n.nodeValue.length);
  return t.localPosFromDOM(i, e);
}
class vs extends Ve {
  constructor(e) {
    super(), this.side = e;
  }
  get length() {
    return 0;
  }
  merge() {
    return !1;
  }
  become(e) {
    return e instanceof vs && e.side == this.side;
  }
  split() {
    return new vs(this.side);
  }
  sync() {
    if (!this.dom) {
      let e = document.createElement("img");
      e.className = "cm-widgetBuffer", e.setAttribute("aria-hidden", "true"), this.setDOM(e);
    }
  }
  getSide() {
    return this.side;
  }
  domAtPos(e) {
    return lt.before(this.dom);
  }
  localPosFromDOM() {
    return 0;
  }
  domBoundsAround() {
    return null;
  }
  coordsAt(e) {
    let t = this.dom.getBoundingClientRect(), n = C3(this, this.side > 0 ? -1 : 1);
    return n && n.top < t.bottom && n.bottom > t.top ? { left: t.left, right: t.right, top: n.top, bottom: n.bottom } : t;
  }
  get overrideDOMText() {
    return Pe.empty;
  }
}
Yn.prototype.children = Ln.prototype.children = vs.prototype.children = Qm;
function C3(i, e) {
  let t = i.parent, n = t ? t.children.indexOf(i) : -1;
  for (; t && n >= 0; )
    if (e < 0 ? n > 0 : n < t.children.length) {
      let r = t.children[n + e];
      if (r instanceof Yn) {
        let s = r.coordsAt(e < 0 ? r.length : 0, e);
        if (s)
          return s;
      }
      n += e;
    } else if (t instanceof Fi && t.parent)
      n = t.parent.children.indexOf(t) + (e < 0 ? 0 : 1), t = t.parent;
    else {
      let r = t.dom.lastChild;
      if (r && r.nodeName == "BR")
        return r.getClientRects()[0];
      break;
    }
}
function CP(i, e, t) {
  let n = 0;
  for (let r = 0; n < e.length; n++) {
    let s = e[n], o = r + s.length;
    if (!(o == r && s.getSide() <= 0)) {
      if (t > r && t < o && s.dom.parentNode == i)
        return s.domAtPos(t - r);
      if (t <= r)
        break;
      r = o;
    }
  }
  for (; n > 0; n--) {
    let r = e[n - 1].dom;
    if (r.parentNode == i)
      return lt.after(r);
  }
  return new lt(i, 0);
}
function RP(i, e, t) {
  let n, { children: r } = i;
  t > 0 && e instanceof Fi && r.length && (n = r[r.length - 1]) instanceof Fi && n.mark.eq(e.mark) ? RP(n, e.children[0], t - 1) : (r.push(e), e.setParent(i)), i.length += e.length;
}
function AP(i, e, t) {
  for (let s = 0, o = 0; o < i.children.length; o++) {
    let l = i.children[o], a = s + l.length, h;
    if ((t <= 0 || a == i.length || l.getSide() > 0 ? a >= e : a > e) && (e < a || o + 1 == i.children.length || (h = i.children[o + 1]).length || h.getSide() > 0)) {
      let c = 0;
      if (a == s) {
        if (l.getSide() <= 0)
          continue;
        c = t = -l.getSide();
      }
      let f = l.coordsAt(Math.max(0, e - s), t);
      return c && f ? Tc(f, t < 0) : f;
    }
    s = a;
  }
  let n = i.dom.lastChild;
  if (!n)
    return i.dom.getBoundingClientRect();
  let r = ul(n);
  return r[r.length - 1] || null;
}
function AO(i, e) {
  for (let t in i)
    t == "class" && e.class ? e.class += " " + i.class : t == "style" && e.style ? e.style += ";" + i.style : e[t] = i[t];
  return e;
}
function Pm(i, e) {
  if (i == e)
    return !0;
  if (!i || !e)
    return !1;
  let t = Object.keys(i), n = Object.keys(e);
  if (t.length != n.length)
    return !1;
  for (let r of t)
    if (n.indexOf(r) == -1 || i[r] !== e[r])
      return !1;
  return !0;
}
function EO(i, e, t) {
  if (e)
    for (let n in e)
      t && n in t || i.removeAttribute(n);
  if (t)
    for (let n in t)
      e && e[n] == t[n] || i.setAttribute(n, t[n]);
}
class Rc {
  /**
  Compare this instance to another instance of the same type.
  (TypeScript can't express this, but only instances of the same
  specific class will be passed to this method.) This is used to
  avoid redrawing widgets when they are replaced by a new
  decoration of the same type. The default implementation just
  returns `false`, which will cause new instances of the widget to
  always be redrawn.
  */
  eq(e) {
    return !1;
  }
  /**
  Update a DOM element created by a widget of the same type (but
  different, non-`eq` content) to reflect this widget. May return
  true to indicate that it could update, false to indicate it
  couldn't (in which case the widget will be redrawn). The default
  implementation just returns false.
  */
  updateDOM(e) {
    return !1;
  }
  /**
  @internal
  */
  compare(e) {
    return this == e || this.constructor == e.constructor && this.eq(e);
  }
  /**
  The estimated height this widget will have, to be used when
  estimating the height of content that hasn't been drawn. May
  return -1 to indicate you don't know. The default implementation
  returns -1.
  */
  get estimatedHeight() {
    return -1;
  }
  /**
  Can be used to configure which kinds of events inside the widget
  should be ignored by the editor. The default is to ignore all
  events.
  */
  ignoreEvent(e) {
    return !0;
  }
  /**
  @internal
  */
  get customView() {
    return null;
  }
  /**
  This is called when the an instance of the widget is removed
  from the editor view.
  */
  destroy(e) {
  }
}
var Fe = /* @__PURE__ */ function(i) {
  return i[i.Text = 0] = "Text", i[i.WidgetBefore = 1] = "WidgetBefore", i[i.WidgetAfter = 2] = "WidgetAfter", i[i.WidgetRange = 3] = "WidgetRange", i;
}(Fe || (Fe = {}));
class Ke extends hl {
  /**
  @internal
  */
  constructor(e, t, n, r) {
    super(), this.startSide = e, this.endSide = t, this.widget = n, this.spec = r;
  }
  /**
  @internal
  */
  get heightRelevant() {
    return !1;
  }
  /**
  Create a mark decoration, which influences the styling of the
  content in its range. Nested mark decorations will cause nested
  DOM elements to be created. Nesting order is determined by
  precedence of the [facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations) or
  (below the facet-provided decorations) [view
  plugin](https://codemirror.net/6/docs/ref/#view.PluginSpec.decorations). Such elements are split
  on line boundaries and on the boundaries of higher-precedence
  decorations.
  */
  static mark(e) {
    return new Ac(e);
  }
  /**
  Create a widget decoration, which adds an element at the given
  position.
  */
  static widget(e) {
    let t = e.side || 0, n = !!e.block;
    return t += n ? t > 0 ? 3e8 : -4e8 : t > 0 ? 1e8 : -1e8, new Rr(e, t, t, n, e.widget || null, !1);
  }
  /**
  Create a replace decoration which replaces the given range with
  a widget, or simply hides it.
  */
  static replace(e) {
    let t = !!e.block, n, r;
    if (e.isBlockGap)
      n = -5e8, r = 4e8;
    else {
      let { start: s, end: o } = EP(e, t);
      n = (s ? t ? -3e8 : -1 : 5e8) - 1, r = (o ? t ? 2e8 : 1 : -6e8) + 1;
    }
    return new Rr(e, n, r, t, e.widget || null, !0);
  }
  /**
  Create a line decoration, which can add DOM attributes to the
  line starting at the given position.
  */
  static line(e) {
    return new El(e);
  }
  /**
  Build a [`DecorationSet`](https://codemirror.net/6/docs/ref/#view.DecorationSet) from the given
  decorated range or ranges. If the ranges aren't already sorted,
  pass `true` for `sort` to make the library sort them for you.
  */
  static set(e, t = !1) {
    return Ge.of(e, t);
  }
  /**
  @internal
  */
  hasHeight() {
    return this.widget ? this.widget.estimatedHeight > -1 : !1;
  }
}
Ke.none = Ge.empty;
class Ac extends Ke {
  constructor(e) {
    let { start: t, end: n } = EP(e);
    super(t ? -1 : 5e8, n ? 1 : -6e8, null, e), this.tagName = e.tagName || "span", this.class = e.class || "", this.attrs = e.attributes || null;
  }
  eq(e) {
    return this == e || e instanceof Ac && this.tagName == e.tagName && this.class == e.class && Pm(this.attrs, e.attrs);
  }
  range(e, t = e) {
    if (e >= t)
      throw new RangeError("Mark decorations may not be empty");
    return super.range(e, t);
  }
}
Ac.prototype.point = !1;
class El extends Ke {
  constructor(e) {
    super(-2e8, -2e8, null, e);
  }
  eq(e) {
    return e instanceof El && Pm(this.spec.attributes, e.spec.attributes);
  }
  range(e, t = e) {
    if (t != e)
      throw new RangeError("Line decoration ranges must be zero-length");
    return super.range(e, t);
  }
}
El.prototype.mapMode = Gt.TrackBefore;
El.prototype.point = !0;
class Rr extends Ke {
  constructor(e, t, n, r, s, o) {
    super(t, n, s, e), this.block = r, this.isReplace = o, this.mapMode = r ? t <= 0 ? Gt.TrackBefore : Gt.TrackAfter : Gt.TrackDel;
  }
  // Only relevant when this.block == true
  get type() {
    return this.startSide < this.endSide ? Fe.WidgetRange : this.startSide <= 0 ? Fe.WidgetBefore : Fe.WidgetAfter;
  }
  get heightRelevant() {
    return this.block || !!this.widget && this.widget.estimatedHeight >= 5;
  }
  eq(e) {
    return e instanceof Rr && R3(this.widget, e.widget) && this.block == e.block && this.startSide == e.startSide && this.endSide == e.endSide;
  }
  range(e, t = e) {
    if (this.isReplace && (e > t || e == t && this.startSide > 0 && this.endSide <= 0))
      throw new RangeError("Invalid range for replacement decoration");
    if (!this.isReplace && t != e)
      throw new RangeError("Widget decorations can only have zero-length ranges");
    return super.range(e, t);
  }
}
Rr.prototype.point = !0;
function EP(i, e = !1) {
  let { inclusiveStart: t, inclusiveEnd: n } = i;
  return t == null && (t = i.inclusive), n == null && (n = i.inclusive), { start: t ?? e, end: n ?? e };
}
function R3(i, e) {
  return i == e || !!(i && e && i.compare(e));
}
function MO(i, e, t, n = 0) {
  let r = t.length - 1;
  r >= 0 && t[r] + n >= i ? t[r] = Math.max(t[r], e) : t.push(i, e);
}
class wt extends Ve {
  constructor() {
    super(...arguments), this.children = [], this.length = 0, this.prevAttrs = void 0, this.attrs = null, this.breakAfter = 0;
  }
  // Consumes source
  merge(e, t, n, r, s, o) {
    if (n) {
      if (!(n instanceof wt))
        return !1;
      this.dom || n.transferDOM(this);
    }
    return r && this.setDeco(n ? n.attrs : null), vP(this, e, t, n ? n.children : [], s, o), !0;
  }
  split(e) {
    let t = new wt();
    if (t.breakAfter = this.breakAfter, this.length == 0)
      return t;
    let { i: n, off: r } = this.childPos(e);
    r && (t.append(this.children[n].split(r), 0), this.children[n].merge(r, this.children[n].length, null, !1, 0, 0), n++);
    for (let s = n; s < this.children.length; s++)
      t.append(this.children[s], 0);
    for (; n > 0 && this.children[n - 1].length == 0; )
      this.children[--n].destroy();
    return this.children.length = n, this.markDirty(), this.length = e, t;
  }
  transferDOM(e) {
    this.dom && (e.setDOM(this.dom), e.prevAttrs = this.prevAttrs === void 0 ? this.attrs : this.prevAttrs, this.prevAttrs = void 0, this.dom = null);
  }
  setDeco(e) {
    Pm(this.attrs, e) || (this.dom && (this.prevAttrs = this.attrs, this.markDirty()), this.attrs = e);
  }
  append(e, t) {
    RP(this, e, t);
  }
  // Only called when building a line view in ContentBuilder
  addLineDeco(e) {
    let t = e.spec.attributes, n = e.spec.class;
    t && (this.attrs = AO(t, this.attrs || {})), n && (this.attrs = AO({ class: n }, this.attrs || {}));
  }
  domAtPos(e) {
    return CP(this.dom, this.children, e);
  }
  reuseDOM(e) {
    e.nodeName == "DIV" && (this.setDOM(e), this.dirty |= 6);
  }
  sync(e) {
    var t;
    this.dom ? this.dirty & 4 && (xP(this.dom), this.dom.className = "cm-line", this.prevAttrs = this.attrs ? null : void 0) : (this.setDOM(document.createElement("div")), this.dom.className = "cm-line", this.prevAttrs = this.attrs ? null : void 0), this.prevAttrs !== void 0 && (EO(this.dom, this.prevAttrs, this.attrs), this.dom.classList.add("cm-line"), this.prevAttrs = void 0), super.sync(e);
    let n = this.dom.lastChild;
    for (; n && Ve.get(n) instanceof Fi; )
      n = n.lastChild;
    if (!n || !this.length || n.nodeName != "BR" && ((t = Ve.get(n)) === null || t === void 0 ? void 0 : t.isEditable) == !1 && (!ne.ios || !this.children.some((r) => r instanceof Yn))) {
      let r = document.createElement("BR");
      r.cmIgnore = !0, this.dom.appendChild(r);
    }
  }
  measureTextSize() {
    if (this.children.length == 0 || this.length > 20)
      return null;
    let e = 0;
    for (let t of this.children) {
      if (!(t instanceof Yn))
        return null;
      let n = ul(t.dom);
      if (n.length != 1)
        return null;
      e += n[0].width;
    }
    return {
      lineHeight: this.dom.getBoundingClientRect().height,
      charWidth: e / this.length
    };
  }
  coordsAt(e, t) {
    return AP(this, e, t);
  }
  become(e) {
    return !1;
  }
  get type() {
    return Fe.Text;
  }
  static find(e, t) {
    for (let n = 0, r = 0; n < e.children.length; n++) {
      let s = e.children[n], o = r + s.length;
      if (o >= t) {
        if (s instanceof wt)
          return s;
        if (o > t)
          break;
      }
      r = o + s.breakAfter;
    }
    return null;
  }
}
class yr extends Ve {
  constructor(e, t, n) {
    super(), this.widget = e, this.length = t, this.type = n, this.breakAfter = 0, this.prevWidget = null;
  }
  merge(e, t, n, r, s, o) {
    return n && (!(n instanceof yr) || !this.widget.compare(n.widget) || e > 0 && s <= 0 || t < this.length && o <= 0) ? !1 : (this.length = e + (n ? n.length : 0) + (this.length - t), !0);
  }
  domAtPos(e) {
    return e == 0 ? lt.before(this.dom) : lt.after(this.dom, e == this.length);
  }
  split(e) {
    let t = this.length - e;
    this.length = e;
    let n = new yr(this.widget, t, this.type);
    return n.breakAfter = this.breakAfter, n;
  }
  get children() {
    return Qm;
  }
  sync() {
    (!this.dom || !this.widget.updateDOM(this.dom)) && (this.dom && this.prevWidget && this.prevWidget.destroy(this.dom), this.prevWidget = null, this.setDOM(this.widget.toDOM(this.editorView)), this.dom.contentEditable = "false");
  }
  get overrideDOMText() {
    return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : Pe.empty;
  }
  domBoundsAround() {
    return null;
  }
  become(e) {
    return e instanceof yr && e.type == this.type && e.widget.constructor == this.widget.constructor ? (e.widget.eq(this.widget) || this.markDirty(!0), this.dom && !this.prevWidget && (this.prevWidget = this.widget), this.widget = e.widget, this.length = e.length, this.breakAfter = e.breakAfter, !0) : !1;
  }
  ignoreMutation() {
    return !0;
  }
  ignoreEvent(e) {
    return this.widget.ignoreEvent(e);
  }
  destroy() {
    super.destroy(), this.dom && this.widget.destroy(this.dom);
  }
}
class $m {
  constructor(e, t, n, r) {
    this.doc = e, this.pos = t, this.end = n, this.disallowBlockEffectsBelow = r, this.content = [], this.curLine = null, this.breakAtStart = 0, this.pendingBuffer = 0, this.atCursorPos = !0, this.openStart = -1, this.openEnd = -1, this.text = "", this.textOff = 0, this.cursor = e.iter(), this.skip = t;
  }
  posCovered() {
    if (this.content.length == 0)
      return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;
    let e = this.content[this.content.length - 1];
    return !e.breakAfter && !(e instanceof yr && e.type == Fe.WidgetBefore);
  }
  getLine() {
    return this.curLine || (this.content.push(this.curLine = new wt()), this.atCursorPos = !0), this.curLine;
  }
  flushBuffer(e) {
    this.pendingBuffer && (this.curLine.append(pa(new vs(-1), e), e.length), this.pendingBuffer = 0);
  }
  addBlockWidget(e) {
    this.flushBuffer([]), this.curLine = null, this.content.push(e);
  }
  finish(e) {
    e ? this.pendingBuffer = 0 : this.flushBuffer([]), this.posCovered() || this.getLine();
  }
  buildText(e, t, n) {
    for (; e > 0; ) {
      if (this.textOff == this.text.length) {
        let { value: s, lineBreak: o, done: l } = this.cursor.next(this.skip);
        if (this.skip = 0, l)
          throw new Error("Ran out of text content when drawing inline views");
        if (o) {
          this.posCovered() || this.getLine(), this.content.length ? this.content[this.content.length - 1].breakAfter = 1 : this.breakAtStart = 1, this.flushBuffer([]), this.curLine = null, e--;
          continue;
        } else
          this.text = s, this.textOff = 0;
      }
      let r = Math.min(
        this.text.length - this.textOff,
        e,
        512
        /* Chunk */
      );
      this.flushBuffer(t.slice(0, n)), this.getLine().append(pa(new Yn(this.text.slice(this.textOff, this.textOff + r)), t), n), this.atCursorPos = !0, this.textOff += r, e -= r, n = 0;
    }
  }
  span(e, t, n, r) {
    this.buildText(t - e, n, r), this.pos = t, this.openStart < 0 && (this.openStart = r);
  }
  point(e, t, n, r, s) {
    let o = t - e;
    if (n instanceof Rr)
      if (n.block) {
        let { type: l } = n;
        l == Fe.WidgetAfter && !this.posCovered() && this.getLine(), this.addBlockWidget(new yr(n.widget || new zy("div"), o, l));
      } else {
        let l = Ln.create(n.widget || new zy("span"), o, n.startSide), a = this.atCursorPos && !l.isEditable && s <= r.length && (e < t || n.startSide > 0), h = !l.isEditable && (e < t || n.startSide <= 0), c = this.getLine();
        this.pendingBuffer == 2 && !a && (this.pendingBuffer = 0), this.flushBuffer(r), a && (c.append(pa(new vs(1), r), s), s = r.length + Math.max(0, s - r.length)), c.append(pa(l, r), s), this.atCursorPos = h, this.pendingBuffer = h ? e < t ? 1 : 2 : 0;
      }
    else this.doc.lineAt(this.pos).from == this.pos && this.getLine().addLineDeco(n);
    o && (this.textOff + o <= this.text.length ? this.textOff += o : (this.skip += o - (this.text.length - this.textOff), this.text = "", this.textOff = 0), this.pos = t), this.openStart < 0 && (this.openStart = s);
  }
  filterPoint(e, t, n, r) {
    if (r < this.disallowBlockEffectsBelow && n instanceof Rr) {
      if (n.block)
        throw new RangeError("Block decorations may not be specified via plugins");
      if (t > this.doc.lineAt(this.pos).to)
        throw new RangeError("Decorations that replace line breaks may not be specified via plugins");
    }
    return !0;
  }
  static build(e, t, n, r, s) {
    let o = new $m(e, t, n, s);
    return o.openEnd = Ge.spans(r, t, n, o), o.openStart < 0 && (o.openStart = o.openEnd), o.finish(o.openEnd), o;
  }
}
function pa(i, e) {
  for (let t of e)
    i = new Fi(t, [i], i.length);
  return i;
}
class zy extends Rc {
  constructor(e) {
    super(), this.tag = e;
  }
  eq(e) {
    return e.tag == this.tag;
  }
  toDOM() {
    return document.createElement(this.tag);
  }
  updateDOM(e) {
    return e.nodeName.toLowerCase() == this.tag;
  }
}
const A3 = [], MP = /* @__PURE__ */ be.define(), qP = /* @__PURE__ */ be.define(), _P = /* @__PURE__ */ be.define(), XP = /* @__PURE__ */ be.define(), qO = /* @__PURE__ */ be.define(), LP = /* @__PURE__ */ be.define(), _O = /* @__PURE__ */ Ue.define({
  map: (i, e) => i.map(e)
}), BP = /* @__PURE__ */ Ue.define({
  map: (i, e) => i.map(e)
});
class Yr {
  constructor(e, t = "nearest", n = "nearest", r = 5, s = 5) {
    this.range = e, this.y = t, this.x = n, this.yMargin = r, this.xMargin = s;
  }
  map(e) {
    return e.empty ? this : new Yr(this.range.map(e), this.y, this.x, this.yMargin, this.xMargin);
  }
}
const Iy = /* @__PURE__ */ Ue.define({ map: (i, e) => i.map(e) });
function zn(i, e, t) {
  let n = i.facet(XP);
  n.length ? n[0](e) : window.onerror ? window.onerror(String(e), t, void 0, void 0, e) : t ? console.error(t + ":", e) : console.error(e);
}
const Ml = /* @__PURE__ */ be.define({ combine: (i) => i.length ? i[0] : !0 });
class E3 {
  /**
  @internal
  */
  constructor(e, t) {
    this.field = e, this.get = t;
  }
}
class It {
  /**
  Create a [provider](https://codemirror.net/6/docs/ref/#view.PluginFieldProvider) for this field,
  to use with a plugin's [provide](https://codemirror.net/6/docs/ref/#view.PluginSpec.provide)
  option.
  */
  from(e) {
    return new E3(this, e);
  }
  /**
  Define a new plugin field.
  */
  static define() {
    return new It();
  }
}
It.decorations = /* @__PURE__ */ It.define();
It.atomicRanges = /* @__PURE__ */ It.define();
It.scrollMargins = /* @__PURE__ */ It.define();
let M3 = 0;
const mo = /* @__PURE__ */ be.define();
class Qs {
  constructor(e, t, n) {
    this.id = e, this.create = t, this.fields = n, this.extension = mo.of(this);
  }
  /**
  Define a plugin from a constructor function that creates the
  plugin's value, given an editor view.
  */
  static define(e, t) {
    let { eventHandlers: n, provide: r, decorations: s } = t || {}, o = [];
    if (r)
      for (let l of Array.isArray(r) ? r : [r])
        o.push(l);
    return n && o.push(ZP.from((l) => ({ plugin: l, handlers: n }))), s && o.push(It.decorations.from(s)), new Qs(M3++, e, o);
  }
  /**
  Create a plugin for a class whose constructor takes a single
  editor view as argument.
  */
  static fromClass(e, t) {
    return Qs.define((n) => new e(n), t);
  }
}
const ZP = /* @__PURE__ */ It.define();
class iu {
  constructor(e) {
    this.spec = e, this.mustUpdate = null, this.value = null;
  }
  takeField(e, t) {
    if (this.spec)
      for (let { field: n, get: r } of this.spec.fields)
        n == e && t.push(r(this.value));
  }
  update(e) {
    if (this.value) {
      if (this.mustUpdate) {
        let t = this.mustUpdate;
        if (this.mustUpdate = null, this.value.update)
          try {
            this.value.update(t);
          } catch (n) {
            if (zn(t.state, n, "CodeMirror plugin crashed"), this.value.destroy)
              try {
                this.value.destroy();
              } catch {
              }
            this.deactivate();
          }
      }
    } else if (this.spec)
      try {
        this.value = this.spec.create(e);
      } catch (t) {
        zn(e.state, t, "CodeMirror plugin crashed"), this.deactivate();
      }
    return this;
  }
  destroy(e) {
    var t;
    if (!((t = this.value) === null || t === void 0) && t.destroy)
      try {
        this.value.destroy();
      } catch (n) {
        zn(e.state, n, "CodeMirror plugin crashed");
      }
  }
  deactivate() {
    this.spec = this.value = null;
  }
}
const DP = /* @__PURE__ */ be.define(), VP = /* @__PURE__ */ be.define(), fr = /* @__PURE__ */ be.define(), go = /* @__PURE__ */ be.define();
class mn {
  constructor(e, t, n, r) {
    this.fromA = e, this.toA = t, this.fromB = n, this.toB = r;
  }
  join(e) {
    return new mn(Math.min(this.fromA, e.fromA), Math.max(this.toA, e.toA), Math.min(this.fromB, e.fromB), Math.max(this.toB, e.toB));
  }
  addToSet(e) {
    let t = e.length, n = this;
    for (; t > 0; t--) {
      let r = e[t - 1];
      if (!(r.fromA > n.toA)) {
        if (r.toA < n.fromA)
          break;
        n = n.join(r), e.splice(t - 1, 1);
      }
    }
    return e.splice(t, 0, n), e;
  }
  static extendWithRanges(e, t) {
    if (t.length == 0)
      return e;
    let n = [];
    for (let r = 0, s = 0, o = 0, l = 0; ; r++) {
      let a = r == e.length ? null : e[r], h = o - l, c = a ? a.fromB : 1e9;
      for (; s < t.length && t[s] < c; ) {
        let f = t[s], u = t[s + 1], d = Math.max(l, f), O = Math.min(c, u);
        if (d <= O && new mn(d + h, O + h, d, O).addToSet(n), u > c)
          break;
        s += 2;
      }
      if (!a)
        return n;
      new mn(a.fromA, a.toA, a.fromB, a.toB).addToSet(n), o = a.toA, l = a.toB;
    }
  }
}
class Ny {
  /**
  @internal
  */
  constructor(e, t, n = A3) {
    this.view = e, this.state = t, this.transactions = n, this.flags = 0, this.startState = e.state, this.changes = rt.empty(this.startState.doc.length);
    for (let o of n)
      this.changes = this.changes.compose(o.changes);
    let r = [];
    this.changes.iterChangedRanges((o, l, a, h) => r.push(new mn(o, l, a, h))), this.changedRanges = r;
    let s = e.hasFocus;
    s != e.inputState.notifiedFocused && (e.inputState.notifiedFocused = s, this.flags |= 1);
  }
  /**
  Tells you whether the [viewport](https://codemirror.net/6/docs/ref/#view.EditorView.viewport) or
  [visible ranges](https://codemirror.net/6/docs/ref/#view.EditorView.visibleRanges) changed in this
  update.
  */
  get viewportChanged() {
    return (this.flags & 4) > 0;
  }
  /**
  Indicates whether the height of an element in the editor changed
  in this update.
  */
  get heightChanged() {
    return (this.flags & 2) > 0;
  }
  /**
  Returns true when the document was modified or the size of the
  editor, or elements within the editor, changed.
  */
  get geometryChanged() {
    return this.docChanged || (this.flags & 10) > 0;
  }
  /**
  True when this update indicates a focus change.
  */
  get focusChanged() {
    return (this.flags & 1) > 0;
  }
  /**
  Whether the document changed in this update.
  */
  get docChanged() {
    return !this.changes.empty;
  }
  /**
  Whether the selection was explicitly set in this update.
  */
  get selectionSet() {
    return this.transactions.some((e) => e.selection);
  }
  /**
  @internal
  */
  get empty() {
    return this.flags == 0 && this.transactions.length == 0;
  }
}
var zt = /* @__PURE__ */ function(i) {
  return i[i.LTR = 0] = "LTR", i[i.RTL = 1] = "RTL", i;
}(zt || (zt = {}));
const XO = zt.LTR, q3 = zt.RTL;
function WP(i) {
  let e = [];
  for (let t = 0; t < i.length; t++)
    e.push(1 << +i[t]);
  return e;
}
const _3 = /* @__PURE__ */ WP("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008"), X3 = /* @__PURE__ */ WP("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333"), LO = /* @__PURE__ */ Object.create(null), Ri = [];
for (let i of ["()", "[]", "{}"]) {
  let e = /* @__PURE__ */ i.charCodeAt(0), t = /* @__PURE__ */ i.charCodeAt(1);
  LO[e] = t, LO[t] = -e;
}
function L3(i) {
  return i <= 247 ? _3[i] : 1424 <= i && i <= 1524 ? 2 : 1536 <= i && i <= 1785 ? X3[i - 1536] : 1774 <= i && i <= 2220 ? 4 : 8192 <= i && i <= 8203 || i == 8204 ? 256 : 1;
}
const B3 = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac]/;
class hs {
  /**
  @internal
  */
  constructor(e, t, n) {
    this.from = e, this.to = t, this.level = n;
  }
  /**
  The direction of this span.
  */
  get dir() {
    return this.level % 2 ? q3 : XO;
  }
  /**
  @internal
  */
  side(e, t) {
    return this.dir == t == e ? this.to : this.from;
  }
  /**
  @internal
  */
  static find(e, t, n, r) {
    let s = -1;
    for (let o = 0; o < e.length; o++) {
      let l = e[o];
      if (l.from <= t && l.to >= t) {
        if (l.level == n)
          return o;
        (s < 0 || (r != 0 ? r < 0 ? l.from < t : l.to > t : e[s].level > l.level)) && (s = o);
      }
    }
    if (s < 0)
      throw new RangeError("Index out of range");
    return s;
  }
}
const _e = [];
function Z3(i, e) {
  let t = i.length, n = e == XO ? 1 : 2, r = e == XO ? 2 : 1;
  if (!i || n == 1 && !B3.test(i))
    return zP(t);
  for (let o = 0, l = n, a = n; o < t; o++) {
    let h = L3(i.charCodeAt(o));
    h == 512 ? h = l : h == 8 && a == 4 && (h = 16), _e[o] = h == 4 ? 2 : h, h & 7 && (a = h), l = h;
  }
  for (let o = 0, l = n, a = n; o < t; o++) {
    let h = _e[o];
    if (h == 128)
      o < t - 1 && l == _e[o + 1] && l & 24 ? h = _e[o] = l : _e[o] = 256;
    else if (h == 64) {
      let c = o + 1;
      for (; c < t && _e[c] == 64; )
        c++;
      let f = o && l == 8 || c < t && _e[c] == 8 ? a == 1 ? 1 : 8 : 256;
      for (let u = o; u < c; u++)
        _e[u] = f;
      o = c - 1;
    } else h == 8 && a == 1 && (_e[o] = 1);
    l = h, h & 7 && (a = h);
  }
  for (let o = 0, l = 0, a = 0, h, c, f; o < t; o++)
    if (c = LO[h = i.charCodeAt(o)])
      if (c < 0) {
        for (let u = l - 3; u >= 0; u -= 3)
          if (Ri[u + 1] == -c) {
            let d = Ri[u + 2], O = d & 2 ? n : d & 4 ? d & 1 ? r : n : 0;
            O && (_e[o] = _e[Ri[u]] = O), l = u;
            break;
          }
      } else {
        if (Ri.length == 189)
          break;
        Ri[l++] = o, Ri[l++] = h, Ri[l++] = a;
      }
    else if ((f = _e[o]) == 2 || f == 1) {
      let u = f == n;
      a = u ? 0 : 1;
      for (let d = l - 3; d >= 0; d -= 3) {
        let O = Ri[d + 2];
        if (O & 2)
          break;
        if (u)
          Ri[d + 2] |= 2;
        else {
          if (O & 4)
            break;
          Ri[d + 2] |= 4;
        }
      }
    }
  for (let o = 0; o < t; o++)
    if (_e[o] == 256) {
      let l = o + 1;
      for (; l < t && _e[l] == 256; )
        l++;
      let a = (o ? _e[o - 1] : n) == 1, h = (l < t ? _e[l] : n) == 1, c = a == h ? a ? 1 : 2 : n;
      for (let f = o; f < l; f++)
        _e[f] = c;
      o = l - 1;
    }
  let s = [];
  if (n == 1)
    for (let o = 0; o < t; ) {
      let l = o, a = _e[o++] != 1;
      for (; o < t && a == (_e[o] != 1); )
        o++;
      if (a)
        for (let h = o; h > l; ) {
          let c = h, f = _e[--h] != 2;
          for (; h > l && f == (_e[h - 1] != 2); )
            h--;
          s.push(new hs(h, c, f ? 2 : 1));
        }
      else
        s.push(new hs(l, o, 0));
    }
  else
    for (let o = 0; o < t; ) {
      let l = o, a = _e[o++] == 2;
      for (; o < t && a == (_e[o] == 2); )
        o++;
      s.push(new hs(l, o, a ? 1 : 2));
    }
  return s;
}
function zP(i) {
  return [new hs(0, i, 0)];
}
let IP = "";
function D3(i, e, t, n, r) {
  var s;
  let o = n.head - i.from, l = -1;
  if (o == 0) {
    if (!r || !i.length)
      return null;
    e[0].level != t && (o = e[0].side(!1, t), l = 0);
  } else if (o == i.length) {
    if (r)
      return null;
    let u = e[e.length - 1];
    u.level != t && (o = u.side(!0, t), l = e.length - 1);
  }
  l < 0 && (l = hs.find(e, o, (s = n.bidiLevel) !== null && s !== void 0 ? s : -1, n.assoc));
  let a = e[l];
  o == a.side(r, t) && (a = e[l += r ? 1 : -1], o = a.side(!r, t));
  let h = r == (a.dir == t), c = Xn(i.text, o, h);
  if (IP = i.text.slice(Math.min(o, c), Math.max(o, c)), c != a.side(r, t))
    return ie.cursor(c + i.from, h ? -1 : 1, a.level);
  let f = l == (r ? e.length - 1 : 0) ? null : e[l + (r ? 1 : -1)];
  return !f && a.level != t ? ie.cursor(r ? i.to : i.from, r ? -1 : 1, t) : f && f.level < a.level ? ie.cursor(f.side(!r, t) + i.from, r ? 1 : -1, f.level) : ie.cursor(c + i.from, r ? -1 : 1, a.level);
}
const Bn = "￿";
class NP {
  constructor(e, t) {
    this.points = e, this.text = "", this.lineSeparator = t.facet(xe.lineSeparator);
  }
  append(e) {
    this.text += e;
  }
  lineBreak() {
    this.text += Bn;
  }
  readRange(e, t) {
    if (!e)
      return this;
    let n = e.parentNode;
    for (let r = e; ; ) {
      this.findPointBefore(n, r), this.readNode(r);
      let s = r.nextSibling;
      if (s == t)
        break;
      let o = Ve.get(r), l = Ve.get(s);
      (o && l ? o.breakAfter : (o ? o.breakAfter : jy(r)) || jy(s) && (r.nodeName != "BR" || r.cmIgnore)) && this.lineBreak(), r = s;
    }
    return this.findPointBefore(n, t), this;
  }
  readTextNode(e) {
    let t = e.nodeValue;
    for (let n of this.points)
      n.node == e && (n.pos = this.text.length + Math.min(n.offset, t.length));
    for (let n = 0, r = this.lineSeparator ? null : /\r\n?|\n/g; ; ) {
      let s = -1, o = 1, l;
      if (this.lineSeparator ? (s = t.indexOf(this.lineSeparator, n), o = this.lineSeparator.length) : (l = r.exec(t)) && (s = l.index, o = l[0].length), this.append(t.slice(n, s < 0 ? t.length : s)), s < 0)
        break;
      if (this.lineBreak(), o > 1)
        for (let a of this.points)
          a.node == e && a.pos > this.text.length && (a.pos -= o - 1);
      n = s + o;
    }
  }
  readNode(e) {
    if (e.cmIgnore)
      return;
    let t = Ve.get(e), n = t && t.overrideDOMText;
    if (n != null) {
      this.findPointInside(e, n.length);
      for (let r = n.iter(); !r.next().done; )
        r.lineBreak ? this.lineBreak() : this.append(r.value);
    } else e.nodeType == 3 ? this.readTextNode(e) : e.nodeName == "BR" ? e.nextSibling && this.lineBreak() : e.nodeType == 1 && this.readRange(e.firstChild, null);
  }
  findPointBefore(e, t) {
    for (let n of this.points)
      n.node == e && e.childNodes[n.offset] == t && (n.pos = this.text.length);
  }
  findPointInside(e, t) {
    for (let n of this.points)
      (e.nodeType == 3 ? n.node == e : e.contains(n.node)) && (n.pos = this.text.length + Math.min(t, n.offset));
  }
}
function jy(i) {
  return i.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(i.nodeName);
}
class Uy {
  constructor(e, t) {
    this.node = e, this.offset = t, this.pos = -1;
  }
}
class Yy extends Ve {
  constructor(e) {
    super(), this.view = e, this.compositionDeco = Ke.none, this.decorations = [], this.pluginDecorationLength = 0, this.minWidth = 0, this.minWidthFrom = 0, this.minWidthTo = 0, this.impreciseAnchor = null, this.impreciseHead = null, this.forceSelection = !1, this.lastUpdate = Date.now(), this.setDOM(e.contentDOM), this.children = [new wt()], this.children[0].setParent(this), this.updateDeco(), this.updateInner([new mn(0, 0, 0, e.state.doc.length)], 0);
  }
  get root() {
    return this.view.root;
  }
  get editorView() {
    return this.view;
  }
  get length() {
    return this.view.state.doc.length;
  }
  // Update the document view to a given state. scrollIntoView can be
  // used as a hint to compute a new viewport that includes that
  // position, if we know the editor is going to scroll that position
  // into view.
  update(e) {
    let t = e.changedRanges;
    this.minWidth > 0 && t.length && (t.every(({ fromA: o, toA: l }) => l < this.minWidthFrom || o > this.minWidthTo) ? (this.minWidthFrom = e.changes.mapPos(this.minWidthFrom, 1), this.minWidthTo = e.changes.mapPos(this.minWidthTo, 1)) : this.minWidth = this.minWidthFrom = this.minWidthTo = 0), this.view.inputState.composing < 0 ? this.compositionDeco = Ke.none : (e.transactions.length || this.dirty) && (this.compositionDeco = W3(this.view, e.changes)), (ne.ie || ne.chrome) && !this.compositionDeco.size && e && e.state.doc.lines != e.startState.doc.lines && (this.forceSelection = !0);
    let n = this.decorations, r = this.updateDeco(), s = j3(n, r, e.changes);
    return t = mn.extendWithRanges(t, s), this.dirty == 0 && t.length == 0 ? !1 : (this.updateInner(t, e.startState.doc.length), e.transactions.length && (this.lastUpdate = Date.now()), !0);
  }
  // Used by update and the constructor do perform the actual DOM
  // update
  updateInner(e, t) {
    this.view.viewState.mustMeasureContent = !0, this.updateChildren(e, t);
    let { observer: n } = this.view;
    n.ignore(() => {
      this.dom.style.height = this.view.viewState.contentHeight + "px", this.dom.style.minWidth = this.minWidth ? this.minWidth + "px" : "";
      let s = ne.chrome || ne.ios ? { node: n.selectionRange.focusNode, written: !1 } : void 0;
      this.sync(s), this.dirty = 0, s && (s.written || n.selectionRange.focusNode != s.node) && (this.forceSelection = !0), this.dom.style.height = "";
    });
    let r = [];
    if (this.view.viewport.from || this.view.viewport.to < this.view.state.doc.length)
      for (let s of this.children)
        s instanceof yr && s.widget instanceof Gy && r.push(s.dom);
    n.updateGaps(r);
  }
  updateChildren(e, t) {
    let n = this.childCursor(t);
    for (let r = e.length - 1; ; r--) {
      let s = r >= 0 ? e[r] : null;
      if (!s)
        break;
      let { fromA: o, toA: l, fromB: a, toB: h } = s, { content: c, breakAtStart: f, openStart: u, openEnd: d } = $m.build(this.view.state.doc, a, h, this.decorations, this.pluginDecorationLength), { i: O, off: p } = n.findPos(l, 1), { i: m, off: g } = n.findPos(o, -1);
      kP(this, m, g, O, p, c, f, u, d);
    }
  }
  // Sync the DOM selection to this.state.selection
  updateSelection(e = !1, t = !1) {
    if (e && this.view.observer.readSelectionRange(), !(t || this.mayControlSelection()) || ne.ios && this.view.inputState.rapidCompositionStart)
      return;
    let n = this.forceSelection;
    this.forceSelection = !1;
    let r = this.view.state.selection.main, s = this.domAtPos(r.anchor), o = r.empty ? s : this.domAtPos(r.head);
    if (ne.gecko && r.empty && V3(s)) {
      let a = document.createTextNode("");
      this.view.observer.ignore(() => s.node.insertBefore(a, s.node.childNodes[s.offset] || null)), s = o = new lt(a, 0), n = !0;
    }
    let l = this.view.observer.selectionRange;
    (n || !l.focusNode || !Fh(s.node, s.offset, l.anchorNode, l.anchorOffset) || !Fh(o.node, o.offset, l.focusNode, l.focusOffset)) && (this.view.observer.ignore(() => {
      ne.android && ne.chrome && this.dom.contains(l.focusNode) && U3(l.focusNode, this.dom) && (this.dom.blur(), this.dom.focus({ preventScroll: !0 }));
      let a = Gh(this.root);
      if (r.empty) {
        if (ne.gecko) {
          let h = I3(s.node, s.offset);
          if (h && h != 3) {
            let c = UP(s.node, s.offset, h == 1 ? 1 : -1);
            c && (s = new lt(c, h == 1 ? 0 : c.nodeValue.length));
          }
        }
        a.collapse(s.node, s.offset), r.bidiLevel != null && l.cursorBidiLevel != null && (l.cursorBidiLevel = r.bidiLevel);
      } else if (a.extend)
        a.collapse(s.node, s.offset), a.extend(o.node, o.offset);
      else {
        let h = document.createRange();
        r.anchor > r.head && ([s, o] = [o, s]), h.setEnd(o.node, o.offset), h.setStart(s.node, s.offset), a.removeAllRanges(), a.addRange(h);
      }
    }), this.view.observer.setSelectionRange(s, o)), this.impreciseAnchor = s.precise ? null : new lt(l.anchorNode, l.anchorOffset), this.impreciseHead = o.precise ? null : new lt(l.focusNode, l.focusOffset);
  }
  enforceCursorAssoc() {
    if (this.compositionDeco.size)
      return;
    let e = this.view.state.selection.main, t = Gh(this.root);
    if (!e.empty || !e.assoc || !t.modify)
      return;
    let n = wt.find(this, e.head);
    if (!n)
      return;
    let r = n.posAtStart;
    if (e.head == r || e.head == r + n.length)
      return;
    let s = this.coordsAt(e.head, -1), o = this.coordsAt(e.head, 1);
    if (!s || !o || s.bottom > o.top)
      return;
    let l = this.domAtPos(e.head + e.assoc);
    t.collapse(l.node, l.offset), t.modify("move", e.assoc < 0 ? "forward" : "backward", "lineboundary");
  }
  mayControlSelection() {
    return this.view.state.facet(Ml) ? this.root.activeElement == this.dom : vO(this.dom, this.view.observer.selectionRange);
  }
  nearest(e) {
    for (let t = e; t; ) {
      let n = Ve.get(t);
      if (n && n.rootView == this)
        return n;
      t = t.parentNode;
    }
    return null;
  }
  posFromDOM(e, t) {
    let n = this.nearest(e);
    if (!n)
      throw new RangeError("Trying to find position for a DOM position outside of the document");
    return n.localPosFromDOM(e, t) + n.posAtStart;
  }
  domAtPos(e) {
    let { i: t, off: n } = this.childCursor().findPos(e, -1);
    for (; t < this.children.length - 1; ) {
      let r = this.children[t];
      if (n < r.length || r instanceof wt)
        break;
      t++, n = 0;
    }
    return this.children[t].domAtPos(n);
  }
  coordsAt(e, t) {
    for (let n = this.length, r = this.children.length - 1; ; r--) {
      let s = this.children[r], o = n - s.breakAfter - s.length;
      if (e > o || e == o && s.type != Fe.WidgetBefore && s.type != Fe.WidgetAfter && (!r || t == 2 || this.children[r - 1].breakAfter || this.children[r - 1].type == Fe.WidgetBefore && t > -2))
        return s.coordsAt(e - o, t);
      n = o;
    }
  }
  measureVisibleLineHeights() {
    let e = [], { from: t, to: n } = this.view.viewState.viewport, r = this.view.contentDOM.clientWidth, s = r > Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1, o = -1;
    for (let l = 0, a = 0; a < this.children.length; a++) {
      let h = this.children[a], c = l + h.length;
      if (c > n)
        break;
      if (l >= t) {
        let f = h.dom.getBoundingClientRect();
        if (e.push(f.height), s) {
          let u = h.dom.lastChild, d = u ? ul(u) : [];
          if (d.length) {
            let O = d[d.length - 1], p = this.view.textDirection == zt.LTR ? O.right - f.left : f.right - O.left;
            p > o && (o = p, this.minWidth = r, this.minWidthFrom = l, this.minWidthTo = c);
          }
        }
      }
      l = c + h.breakAfter;
    }
    return e;
  }
  measureTextSize() {
    for (let r of this.children)
      if (r instanceof wt) {
        let s = r.measureTextSize();
        if (s)
          return s;
      }
    let e = document.createElement("div"), t, n;
    return e.className = "cm-line", e.textContent = "abc def ghi jkl mno pqr stu", this.view.observer.ignore(() => {
      this.dom.appendChild(e);
      let r = ul(e.firstChild)[0];
      t = e.getBoundingClientRect().height, n = r ? r.width / 27 : 7, e.remove();
    }), { lineHeight: t, charWidth: n };
  }
  childCursor(e = this.length) {
    let t = this.children.length;
    return t && (e -= this.children[--t].length), new wP(this.children, e, t);
  }
  computeBlockGapDeco() {
    let e = [], t = this.view.viewState;
    for (let n = 0, r = 0; ; r++) {
      let s = r == t.viewports.length ? null : t.viewports[r], o = s ? s.from - 1 : this.length;
      if (o > n) {
        let l = t.lineBlockAt(o).bottom - t.lineBlockAt(n).top;
        e.push(Ke.replace({
          widget: new Gy(l),
          block: !0,
          inclusive: !0,
          isBlockGap: !0
        }).range(n, o));
      }
      if (!s)
        break;
      n = s.to + 1;
    }
    return Ke.set(e);
  }
  updateDeco() {
    let e = this.view.pluginField(It.decorations);
    return this.pluginDecorationLength = e.length, this.decorations = [
      ...e,
      ...this.view.state.facet(fr),
      this.compositionDeco,
      this.computeBlockGapDeco(),
      this.view.viewState.lineGapDeco
    ];
  }
  scrollIntoView(e) {
    let { range: t } = e, n = this.coordsAt(t.head, t.empty ? t.assoc : t.head > t.anchor ? -1 : 1), r;
    if (!n)
      return;
    !t.empty && (r = this.coordsAt(t.anchor, t.anchor > t.head ? -1 : 1)) && (n = {
      left: Math.min(n.left, r.left),
      top: Math.min(n.top, r.top),
      right: Math.max(n.right, r.right),
      bottom: Math.max(n.bottom, r.bottom)
    });
    let s = 0, o = 0, l = 0, a = 0;
    for (let c of this.view.pluginField(It.scrollMargins))
      if (c) {
        let { left: f, right: u, top: d, bottom: O } = c;
        f != null && (s = Math.max(s, f)), u != null && (o = Math.max(o, u)), d != null && (l = Math.max(l, d)), O != null && (a = Math.max(a, O));
      }
    let h = {
      left: n.left - s,
      top: n.top - l,
      right: n.right + o,
      bottom: n.bottom + a
    };
    v3(this.view.scrollDOM, h, t.head < t.anchor ? -1 : 1, e.x, e.y, e.xMargin, e.yMargin, this.view.textDirection == zt.LTR);
  }
}
function V3(i) {
  return i.node.nodeType == 1 && i.node.firstChild && (i.offset == 0 || i.node.childNodes[i.offset - 1].contentEditable == "false") && (i.offset == i.node.childNodes.length || i.node.childNodes[i.offset].contentEditable == "false");
}
class Gy extends Rc {
  constructor(e) {
    super(), this.height = e;
  }
  toDOM() {
    let e = document.createElement("div");
    return this.updateDOM(e), e;
  }
  eq(e) {
    return e.height == this.height;
  }
  updateDOM(e) {
    return e.style.height = this.height + "px", !0;
  }
  get estimatedHeight() {
    return this.height;
  }
}
function jP(i) {
  let e = i.observer.selectionRange, t = e.focusNode && UP(e.focusNode, e.focusOffset, 0);
  if (!t)
    return null;
  let n = i.docView.nearest(t);
  if (!n)
    return null;
  if (n instanceof wt) {
    let r = t;
    for (; r.parentNode != n.dom; )
      r = r.parentNode;
    let s = r.previousSibling;
    for (; s && !Ve.get(s); )
      s = s.previousSibling;
    let o = s ? Ve.get(s).posAtEnd : n.posAtStart;
    return { from: o, to: o, node: r, text: t };
  } else {
    for (; ; ) {
      let { parent: s } = n;
      if (!s)
        return null;
      if (s instanceof wt)
        break;
      n = s;
    }
    let r = n.posAtStart;
    return { from: r, to: r + n.length, node: n.dom, text: t };
  }
}
function W3(i, e) {
  let t = jP(i);
  if (!t)
    return Ke.none;
  let { from: n, to: r, node: s, text: o } = t, l = e.mapPos(n, 1), a = Math.max(l, e.mapPos(r, -1)), { state: h } = i, c = s.nodeType == 3 ? s.nodeValue : new NP([], h).readRange(s.firstChild, null).text;
  if (a - l < c.length)
    if (h.doc.sliceString(l, Math.min(h.doc.length, l + c.length), Bn) == c)
      a = l + c.length;
    else if (h.doc.sliceString(Math.max(0, a - c.length), a, Bn) == c)
      l = a - c.length;
    else
      return Ke.none;
  else if (h.doc.sliceString(l, a, Bn) != c)
    return Ke.none;
  let f = Ve.get(s);
  return f instanceof $P ? f = f.widget.topView : f && (f.parent = null), Ke.set(Ke.replace({ widget: new z3(s, o, f) }).range(l, a));
}
class z3 extends Rc {
  constructor(e, t, n) {
    super(), this.top = e, this.text = t, this.topView = n;
  }
  eq(e) {
    return this.top == e.top && this.text == e.text;
  }
  toDOM() {
    return this.top;
  }
  ignoreEvent() {
    return !1;
  }
  get customView() {
    return $P;
  }
}
function UP(i, e, t) {
  for (; ; ) {
    if (i.nodeType == 3)
      return i;
    if (i.nodeType == 1 && e > 0 && t <= 0)
      i = i.childNodes[e - 1], e = Hh(i);
    else if (i.nodeType == 1 && e < i.childNodes.length && t >= 0)
      i = i.childNodes[e], e = 0;
    else
      return null;
  }
}
function I3(i, e) {
  return i.nodeType != 1 ? 0 : (e && i.childNodes[e - 1].contentEditable == "false" ? 1 : 0) | (e < i.childNodes.length && i.childNodes[e].contentEditable == "false" ? 2 : 0);
}
class N3 {
  constructor() {
    this.changes = [];
  }
  compareRange(e, t) {
    MO(e, t, this.changes);
  }
  comparePoint(e, t) {
    MO(e, t, this.changes);
  }
}
function j3(i, e, t) {
  let n = new N3();
  return Ge.compare(i, e, t, n), n.changes;
}
function U3(i, e) {
  for (let t = i; t && t != e; t = t.assignedSlot || t.parentNode)
    if (t.nodeType == 1 && t.contentEditable == "false")
      return !0;
  return !1;
}
function Y3(i, e, t = 1) {
  let n = i.charCategorizer(e), r = i.doc.lineAt(e), s = e - r.from;
  if (r.length == 0)
    return ie.cursor(e);
  s == 0 ? t = 1 : s == r.length && (t = -1);
  let o = s, l = s;
  t < 0 ? o = Xn(r.text, s, !1) : l = Xn(r.text, s);
  let a = n(r.text.slice(o, l));
  for (; o > 0; ) {
    let h = Xn(r.text, o, !1);
    if (n(r.text.slice(h, o)) != a)
      break;
    o = h;
  }
  for (; l < r.length; ) {
    let h = Xn(r.text, l);
    if (n(r.text.slice(l, h)) != a)
      break;
    l = h;
  }
  return ie.range(o + r.from, l + r.from);
}
function G3(i, e) {
  return e.left > i ? e.left - i : Math.max(0, i - e.right);
}
function F3(i, e) {
  return e.top > i ? e.top - i : Math.max(0, i - e.bottom);
}
function nu(i, e) {
  return i.top < e.bottom - 1 && i.bottom > e.top + 1;
}
function Fy(i, e) {
  return e < i.top ? { top: e, left: i.left, right: i.right, bottom: i.bottom } : i;
}
function Hy(i, e) {
  return e > i.bottom ? { top: i.top, left: i.left, right: i.right, bottom: e } : i;
}
function BO(i, e, t) {
  let n, r, s, o, l, a, h, c;
  for (let d = i.firstChild; d; d = d.nextSibling) {
    let O = ul(d);
    for (let p = 0; p < O.length; p++) {
      let m = O[p];
      r && nu(r, m) && (m = Fy(Hy(m, r.bottom), r.top));
      let g = G3(e, m), S = F3(t, m);
      if (g == 0 && S == 0)
        return d.nodeType == 3 ? Ky(d, e, t) : BO(d, e, t);
      (!n || o > S || o == S && s > g) && (n = d, r = m, s = g, o = S), g == 0 ? t > m.bottom && (!h || h.bottom < m.bottom) ? (l = d, h = m) : t < m.top && (!c || c.top > m.top) && (a = d, c = m) : h && nu(h, m) ? h = Hy(h, m.bottom) : c && nu(c, m) && (c = Fy(c, m.top));
    }
  }
  if (h && h.bottom >= t ? (n = l, r = h) : c && c.top <= t && (n = a, r = c), !n)
    return { node: i, offset: 0 };
  let f = Math.max(r.left, Math.min(r.right, e));
  if (n.nodeType == 3)
    return Ky(n, f, t);
  if (!s && n.contentEditable == "true")
    return BO(n, f, t);
  let u = Array.prototype.indexOf.call(i.childNodes, n) + (e >= (r.left + r.right) / 2 ? 1 : 0);
  return { node: i, offset: u };
}
function Ky(i, e, t) {
  let n = i.nodeValue.length, r = -1, s = 1e9, o = 0;
  for (let l = 0; l < n; l++) {
    let a = dl(i, l, l + 1).getClientRects();
    for (let h = 0; h < a.length; h++) {
      let c = a[h];
      if (c.top == c.bottom)
        continue;
      o || (o = e - c.left);
      let f = (c.top > t ? c.top - t : t - c.bottom) - 1;
      if (c.left - 1 <= e && c.right + 1 >= e && f < s) {
        let u = e >= (c.left + c.right) / 2, d = u;
        if ((ne.chrome || ne.gecko) && dl(i, l).getBoundingClientRect().left == c.right && (d = !u), f <= 0)
          return { node: i, offset: l + (d ? 1 : 0) };
        r = l + (d ? 1 : 0), s = f;
      }
    }
  }
  return { node: i, offset: r > -1 ? r : o > 0 ? i.nodeValue.length : 0 };
}
function YP(i, { x: e, y: t }, n, r = -1) {
  var s;
  let o = i.contentDOM.getBoundingClientRect(), l = o.top + i.viewState.paddingTop, a, { docHeight: h } = i.viewState, c = t - l;
  if (c < 0)
    return 0;
  if (c > h)
    return i.state.doc.length;
  for (let g = i.defaultLineHeight / 2, S = !1; a = i.elementAtHeight(c), a.type != Fe.Text; )
    for (; c = r > 0 ? a.bottom + g : a.top - g, !(c >= 0 && c <= h); ) {
      if (S)
        return n ? null : 0;
      S = !0, r = -r;
    }
  t = l + c;
  let f = a.from;
  if (f < i.viewport.from)
    return i.viewport.from == 0 ? 0 : n ? null : Jy(i, o, a, e, t);
  if (f > i.viewport.to)
    return i.viewport.to == i.state.doc.length ? i.state.doc.length : n ? null : Jy(i, o, a, e, t);
  let u = i.dom.ownerDocument, d = i.root.elementFromPoint ? i.root : u, O = d.elementFromPoint(e, t);
  O && !i.contentDOM.contains(O) && (O = null), O || (e = Math.max(o.left + 1, Math.min(o.right - 1, e)), O = d.elementFromPoint(e, t), O && !i.contentDOM.contains(O) && (O = null));
  let p, m = -1;
  if (O && ((s = i.docView.nearest(O)) === null || s === void 0 ? void 0 : s.isEditable) != !1) {
    if (u.caretPositionFromPoint) {
      let g = u.caretPositionFromPoint(e, t);
      g && ({ offsetNode: p, offset: m } = g);
    } else if (u.caretRangeFromPoint) {
      let g = u.caretRangeFromPoint(e, t);
      g && ({ startContainer: p, startOffset: m } = g, ne.safari && H3(p, m, e) && (p = void 0));
    }
  }
  if (!p || !i.docView.dom.contains(p)) {
    let g = wt.find(i.docView, f);
    if (!g)
      return c > a.top + a.height / 2 ? a.to : a.from;
    ({ node: p, offset: m } = BO(g.dom, e, t));
  }
  return i.docView.posFromDOM(p, m);
}
function Jy(i, e, t, n, r) {
  let s = Math.round((n - e.left) * i.defaultCharacterWidth);
  if (i.lineWrapping && t.height > i.defaultLineHeight * 1.5) {
    let l = Math.floor((r - t.top) / i.defaultLineHeight);
    s += l * i.viewState.heightOracle.lineLength;
  }
  let o = i.state.sliceDoc(t.from, t.to);
  return t.from + o3(o, s, i.state.tabSize);
}
function H3(i, e, t) {
  let n;
  if (i.nodeType != 3 || e != (n = i.nodeValue.length))
    return !1;
  for (let r = i.nextSibling; r; r = r.nextSibling)
    if (r.nodeType != 1 || r.nodeName != "BR")
      return !1;
  return dl(i, n - 1, n).getBoundingClientRect().left > t;
}
function K3(i, e, t, n) {
  let r = i.state.doc.lineAt(e.head), s = !n || !i.lineWrapping ? null : i.coordsAtPos(e.assoc < 0 && e.head > r.from ? e.head - 1 : e.head);
  if (s) {
    let a = i.dom.getBoundingClientRect(), h = i.posAtCoords({
      x: t == (i.textDirection == zt.LTR) ? a.right - 1 : a.left + 1,
      y: (s.top + s.bottom) / 2
    });
    if (h != null)
      return ie.cursor(h, t ? -1 : 1);
  }
  let o = wt.find(i.docView, e.head), l = o ? t ? o.posAtEnd : o.posAtStart : t ? r.to : r.from;
  return ie.cursor(l, t ? -1 : 1);
}
function eS(i, e, t, n) {
  let r = i.state.doc.lineAt(e.head), s = i.bidiSpans(r);
  for (let o = e, l = null; ; ) {
    let a = D3(r, s, i.textDirection, o, t), h = IP;
    if (!a) {
      if (r.number == (t ? i.state.doc.lines : 1))
        return o;
      h = `
`, r = i.state.doc.line(r.number + (t ? 1 : -1)), s = i.bidiSpans(r), a = ie.cursor(t ? r.from : r.to);
    }
    if (l) {
      if (!l(h))
        return o;
    } else {
      if (!n)
        return a;
      l = n(h);
    }
    o = a;
  }
}
function J3(i, e, t) {
  let n = i.state.charCategorizer(e), r = n(t);
  return (s) => {
    let o = n(s);
    return r == un.Space && (r = o), r == o;
  };
}
function ez(i, e, t, n) {
  let r = e.head, s = t ? 1 : -1;
  if (r == (t ? i.state.doc.length : 0))
    return ie.cursor(r, e.assoc);
  let o = e.goalColumn, l, a = i.contentDOM.getBoundingClientRect(), h = i.coordsAtPos(r), c = i.documentTop;
  if (h)
    o == null && (o = h.left - a.left), l = s < 0 ? h.top : h.bottom;
  else {
    let d = i.viewState.lineBlockAt(r - c);
    o == null && (o = Math.min(a.right - a.left, i.defaultCharacterWidth * (r - d.from))), l = (s < 0 ? d.top : d.bottom) + c;
  }
  let f = a.left + o, u = n ?? i.defaultLineHeight >> 1;
  for (let d = 0; ; d += 10) {
    let O = l + (u + d) * s, p = YP(i, { x: f, y: O }, !1, s);
    if (O < a.top || O > a.bottom || (s < 0 ? p < r : p > r))
      return ie.cursor(p, e.assoc, void 0, o);
  }
}
function ru(i, e, t) {
  let n = i.pluginField(It.atomicRanges);
  for (; ; ) {
    let r = !1;
    for (let s of n)
      s.between(t.from - 1, t.from + 1, (o, l, a) => {
        t.from > o && t.from < l && (t = e.from > t.from ? ie.cursor(o, 1) : ie.cursor(l, -1), r = !0);
      });
    if (!r)
      return t;
  }
}
class tz {
  constructor(e) {
    this.lastKeyCode = 0, this.lastKeyTime = 0, this.pendingIOSKey = void 0, this.lastSelectionOrigin = null, this.lastSelectionTime = 0, this.lastEscPress = 0, this.lastContextMenu = 0, this.scrollHandlers = [], this.registeredEvents = [], this.customHandlers = [], this.composing = -1, this.compositionFirstChange = null, this.compositionEndedAt = 0, this.rapidCompositionStart = !1, this.mouseSelection = null;
    for (let t in et) {
      let n = et[t];
      e.contentDOM.addEventListener(t, (r) => {
        !tS(e, r) || this.ignoreDuringComposition(r) || t == "keydown" && this.keydown(e, r) || (this.mustFlushObserver(r) && e.observer.forceFlush(), this.runCustomHandlers(t, e, r) ? r.preventDefault() : n(e, r));
      }), this.registeredEvents.push(t);
    }
    this.notifiedFocused = e.hasFocus, this.ensureHandlers(e), ne.safari && e.contentDOM.addEventListener("input", () => null);
  }
  setSelectionOrigin(e) {
    this.lastSelectionOrigin = e, this.lastSelectionTime = Date.now();
  }
  ensureHandlers(e) {
    let t = this.customHandlers = e.pluginField(ZP);
    for (let n of t)
      for (let r in n.handlers)
        this.registeredEvents.indexOf(r) < 0 && r != "scroll" && (this.registeredEvents.push(r), e.contentDOM.addEventListener(r, (s) => {
          tS(e, s) && this.runCustomHandlers(r, e, s) && s.preventDefault();
        }));
  }
  runCustomHandlers(e, t, n) {
    for (let r of this.customHandlers) {
      let s = r.handlers[e];
      if (s)
        try {
          if (s.call(r.plugin, n, t) || n.defaultPrevented)
            return !0;
        } catch (o) {
          zn(t.state, o);
        }
    }
    return !1;
  }
  runScrollHandlers(e, t) {
    for (let n of this.customHandlers) {
      let r = n.handlers.scroll;
      if (r)
        try {
          r.call(n.plugin, t, e);
        } catch (s) {
          zn(e.state, s);
        }
    }
  }
  keydown(e, t) {
    if (this.lastKeyCode = t.keyCode, this.lastKeyTime = Date.now(), t.keyCode == 9 && Date.now() < this.lastEscPress + 2e3)
      return !0;
    if (ne.android && ne.chrome && !t.synthetic && (t.keyCode == 13 || t.keyCode == 8))
      return e.observer.delayAndroidKey(t.key, t.keyCode), !0;
    let n;
    return ne.ios && (n = GP.find((r) => r.keyCode == t.keyCode)) && !(t.ctrlKey || t.altKey || t.metaKey) && !t.synthetic ? (this.pendingIOSKey = n, setTimeout(() => this.flushIOSKey(e), 250), !0) : !1;
  }
  flushIOSKey(e) {
    let t = this.pendingIOSKey;
    return t ? (this.pendingIOSKey = void 0, Eo(e.contentDOM, t.key, t.keyCode)) : !1;
  }
  ignoreDuringComposition(e) {
    return /^key/.test(e.type) ? this.composing > 0 ? !0 : ne.safari && Date.now() - this.compositionEndedAt < 500 ? (this.compositionEndedAt = 0, !0) : !1 : !1;
  }
  mustFlushObserver(e) {
    return e.type == "keydown" && e.keyCode != 229 || e.type == "compositionend" && !ne.ios;
  }
  startMouseSelection(e) {
    this.mouseSelection && this.mouseSelection.destroy(), this.mouseSelection = e;
  }
  update(e) {
    this.mouseSelection && this.mouseSelection.update(e), e.transactions.length && (this.lastKeyCode = this.lastSelectionTime = 0);
  }
  destroy() {
    this.mouseSelection && this.mouseSelection.destroy();
  }
}
const GP = [
  { key: "Backspace", keyCode: 8, inputType: "deleteContentBackward" },
  { key: "Enter", keyCode: 13, inputType: "insertParagraph" },
  { key: "Delete", keyCode: 46, inputType: "deleteContentForward" }
], iz = [16, 17, 18, 20, 91, 92, 224, 225];
class nz {
  constructor(e, t, n, r) {
    this.view = e, this.style = n, this.mustSelect = r, this.lastEvent = t;
    let s = e.contentDOM.ownerDocument;
    s.addEventListener("mousemove", this.move = this.move.bind(this)), s.addEventListener("mouseup", this.up = this.up.bind(this)), this.extend = t.shiftKey, this.multiple = e.state.facet(xe.allowMultipleSelections) && rz(e, t), this.dragMove = sz(e, t), this.dragging = oz(e, t) && Tm(t) == 1 ? null : !1, this.dragging === !1 && (t.preventDefault(), this.select(t));
  }
  move(e) {
    if (e.buttons == 0)
      return this.destroy();
    this.dragging === !1 && this.select(this.lastEvent = e);
  }
  up(e) {
    this.dragging == null && this.select(this.lastEvent), this.dragging || e.preventDefault(), this.destroy();
  }
  destroy() {
    let e = this.view.contentDOM.ownerDocument;
    e.removeEventListener("mousemove", this.move), e.removeEventListener("mouseup", this.up), this.view.inputState.mouseSelection = null;
  }
  select(e) {
    let t = this.style.get(e, this.extend, this.multiple);
    (this.mustSelect || !t.eq(this.view.state.selection) || t.main.assoc != this.view.state.selection.main.assoc) && this.view.dispatch({
      selection: t,
      userEvent: "select.pointer",
      scrollIntoView: !0
    }), this.mustSelect = !1;
  }
  update(e) {
    e.docChanged && this.dragging && (this.dragging = this.dragging.map(e.changes)), this.style.update(e) && setTimeout(() => this.select(this.lastEvent), 20);
  }
}
function rz(i, e) {
  let t = i.state.facet(MP);
  return t.length ? t[0](e) : ne.mac ? e.metaKey : e.ctrlKey;
}
function sz(i, e) {
  let t = i.state.facet(qP);
  return t.length ? t[0](e) : ne.mac ? !e.altKey : !e.ctrlKey;
}
function oz(i, e) {
  let { main: t } = i.state.selection;
  if (t.empty)
    return !1;
  let n = Gh(i.root);
  if (n.rangeCount == 0)
    return !0;
  let r = n.getRangeAt(0).getClientRects();
  for (let s = 0; s < r.length; s++) {
    let o = r[s];
    if (o.left <= e.clientX && o.right >= e.clientX && o.top <= e.clientY && o.bottom >= e.clientY)
      return !0;
  }
  return !1;
}
function tS(i, e) {
  if (!e.bubbles)
    return !0;
  if (e.defaultPrevented)
    return !1;
  for (let t = e.target, n; t != i.contentDOM; t = t.parentNode)
    if (!t || t.nodeType == 11 || (n = Ve.get(t)) && n.ignoreEvent(e))
      return !1;
  return !0;
}
const et = /* @__PURE__ */ Object.create(null), FP = ne.ie && ne.ie_version < 15 || ne.ios && ne.webkit_version < 604;
function lz(i) {
  let e = i.dom.parentNode;
  if (!e)
    return;
  let t = e.appendChild(document.createElement("textarea"));
  t.style.cssText = "position: fixed; left: -10000px; top: 10px", t.focus(), setTimeout(() => {
    i.focus(), t.remove(), HP(i, t.value);
  }, 50);
}
function HP(i, e) {
  let { state: t } = i, n, r = 1, s = t.toText(e), o = s.lines == t.selection.ranges.length;
  if (ZO != null && t.selection.ranges.every((a) => a.empty) && ZO == s.toString()) {
    let a = -1;
    n = t.changeByRange((h) => {
      let c = t.doc.lineAt(h.from);
      if (c.from == a)
        return { range: h };
      a = c.from;
      let f = t.toText((o ? s.line(r++).text : e) + t.lineBreak);
      return {
        changes: { from: c.from, insert: f },
        range: ie.cursor(h.from + f.length)
      };
    });
  } else o ? n = t.changeByRange((a) => {
    let h = s.line(r++);
    return {
      changes: { from: a.from, to: a.to, insert: h.text },
      range: ie.cursor(a.from + h.length)
    };
  }) : n = t.replaceSelection(s);
  i.dispatch(n, {
    userEvent: "input.paste",
    scrollIntoView: !0
  });
}
et.keydown = (i, e) => {
  i.inputState.setSelectionOrigin("select"), e.keyCode == 27 ? i.inputState.lastEscPress = Date.now() : iz.indexOf(e.keyCode) < 0 && (i.inputState.lastEscPress = 0);
};
let KP = 0;
et.touchstart = (i, e) => {
  KP = Date.now(), i.inputState.setSelectionOrigin("select.pointer");
};
et.touchmove = (i) => {
  i.inputState.setSelectionOrigin("select.pointer");
};
et.mousedown = (i, e) => {
  if (i.observer.flush(), KP > Date.now() - 2e3 && Tm(e) == 1)
    return;
  let t = null;
  for (let n of i.state.facet(_P))
    if (t = n(i, e), t)
      break;
  if (!t && e.button == 0 && (t = cz(i, e)), t) {
    let n = i.root.activeElement != i.contentDOM;
    n && i.observer.ignore(() => bP(i.contentDOM)), i.inputState.startMouseSelection(new nz(i, e, t, n));
  }
};
function iS(i, e, t, n) {
  if (n == 1)
    return ie.cursor(e, t);
  if (n == 2)
    return Y3(i.state, e, t);
  {
    let r = wt.find(i.docView, e), s = i.state.doc.lineAt(r ? r.posAtEnd : e), o = r ? r.posAtStart : s.from, l = r ? r.posAtEnd : s.to;
    return l < i.state.doc.length && l == s.to && l++, ie.range(o, l);
  }
}
let JP = (i, e) => i >= e.top && i <= e.bottom, nS = (i, e, t) => JP(e, t) && i >= t.left && i <= t.right;
function az(i, e, t, n) {
  let r = wt.find(i.docView, e);
  if (!r)
    return 1;
  let s = e - r.posAtStart;
  if (s == 0)
    return 1;
  if (s == r.length)
    return -1;
  let o = r.coordsAt(s, -1);
  if (o && nS(t, n, o))
    return -1;
  let l = r.coordsAt(s, 1);
  return l && nS(t, n, l) ? 1 : o && JP(n, o) ? -1 : 1;
}
function rS(i, e) {
  let t = i.posAtCoords({ x: e.clientX, y: e.clientY }, !1);
  return { pos: t, bias: az(i, t, e.clientX, e.clientY) };
}
const hz = ne.ie && ne.ie_version <= 11;
let sS = null, oS = 0, lS = 0;
function Tm(i) {
  if (!hz)
    return i.detail;
  let e = sS, t = lS;
  return sS = i, lS = Date.now(), oS = !e || t > Date.now() - 400 && Math.abs(e.clientX - i.clientX) < 2 && Math.abs(e.clientY - i.clientY) < 2 ? (oS + 1) % 3 : 1;
}
function cz(i, e) {
  let t = rS(i, e), n = Tm(e), r = i.state.selection, s = t, o = e;
  return {
    update(l) {
      l.docChanged && (t && (t.pos = l.changes.mapPos(t.pos)), r = r.map(l.changes), o = null);
    },
    get(l, a, h) {
      let c;
      if (o && l.clientX == o.clientX && l.clientY == o.clientY ? c = s : (c = s = rS(i, l), o = l), !c || !t)
        return r;
      let f = iS(i, c.pos, c.bias, n);
      if (t.pos != c.pos && !a) {
        let u = iS(i, t.pos, t.bias, n), d = Math.min(u.from, f.from), O = Math.max(u.to, f.to);
        f = d < f.from ? ie.range(d, O) : ie.range(O, d);
      }
      return a ? r.replaceRange(r.main.extend(f.from, f.to)) : h ? r.addRange(f) : ie.create([f]);
    }
  };
}
et.dragstart = (i, e) => {
  let { selection: { main: t } } = i.state, { mouseSelection: n } = i.inputState;
  n && (n.dragging = t), e.dataTransfer && (e.dataTransfer.setData("Text", i.state.sliceDoc(t.from, t.to)), e.dataTransfer.effectAllowed = "copyMove");
};
function aS(i, e, t, n) {
  if (!t)
    return;
  let r = i.posAtCoords({ x: e.clientX, y: e.clientY }, !1);
  e.preventDefault();
  let { mouseSelection: s } = i.inputState, o = n && s && s.dragging && s.dragMove ? { from: s.dragging.from, to: s.dragging.to } : null, l = { from: r, insert: t }, a = i.state.changes(o ? [o, l] : l);
  i.focus(), i.dispatch({
    changes: a,
    selection: { anchor: a.mapPos(r, -1), head: a.mapPos(r, 1) },
    userEvent: o ? "move.drop" : "input.drop"
  });
}
et.drop = (i, e) => {
  if (!e.dataTransfer)
    return;
  if (i.state.readOnly)
    return e.preventDefault();
  let t = e.dataTransfer.files;
  if (t && t.length) {
    e.preventDefault();
    let n = Array(t.length), r = 0, s = () => {
      ++r == t.length && aS(i, e, n.filter((o) => o != null).join(i.state.lineBreak), !1);
    };
    for (let o = 0; o < t.length; o++) {
      let l = new FileReader();
      l.onerror = s, l.onload = () => {
        /[\x00-\x08\x0e-\x1f]{2}/.test(l.result) || (n[o] = l.result), s();
      }, l.readAsText(t[o]);
    }
  } else
    aS(i, e, e.dataTransfer.getData("Text"), !0);
};
et.paste = (i, e) => {
  if (i.state.readOnly)
    return e.preventDefault();
  i.observer.flush();
  let t = FP ? null : e.clipboardData;
  t ? (HP(i, t.getData("text/plain")), e.preventDefault()) : lz(i);
};
function fz(i, e) {
  let t = i.dom.parentNode;
  if (!t)
    return;
  let n = t.appendChild(document.createElement("textarea"));
  n.style.cssText = "position: fixed; left: -10000px; top: 10px", n.value = e, n.focus(), n.selectionEnd = e.length, n.selectionStart = 0, setTimeout(() => {
    n.remove(), i.focus();
  }, 50);
}
function uz(i) {
  let e = [], t = [], n = !1;
  for (let r of i.selection.ranges)
    r.empty || (e.push(i.sliceDoc(r.from, r.to)), t.push(r));
  if (!e.length) {
    let r = -1;
    for (let { from: s } of i.selection.ranges) {
      let o = i.doc.lineAt(s);
      o.number > r && (e.push(o.text), t.push({ from: o.from, to: Math.min(i.doc.length, o.to + 1) })), r = o.number;
    }
    n = !0;
  }
  return { text: e.join(i.lineBreak), ranges: t, linewise: n };
}
let ZO = null;
et.copy = et.cut = (i, e) => {
  let { text: t, ranges: n, linewise: r } = uz(i.state);
  if (!t && !r)
    return;
  ZO = r ? t : null;
  let s = FP ? null : e.clipboardData;
  s ? (e.preventDefault(), s.clearData(), s.setData("text/plain", t)) : fz(i, t), e.type == "cut" && !i.state.readOnly && i.dispatch({
    changes: n,
    scrollIntoView: !0,
    userEvent: "delete.cut"
  });
};
et.focus = et.blur = (i) => {
  setTimeout(() => {
    i.hasFocus != i.inputState.notifiedFocused && i.update([]);
  }, 10);
};
function e$(i, e) {
  if (i.docView.compositionDeco.size) {
    i.inputState.rapidCompositionStart = e;
    try {
      i.update([]);
    } finally {
      i.inputState.rapidCompositionStart = !1;
    }
  }
}
et.compositionstart = et.compositionupdate = (i) => {
  i.inputState.compositionFirstChange == null && (i.inputState.compositionFirstChange = !0), i.inputState.composing < 0 && (i.inputState.composing = 0, i.docView.compositionDeco.size && (i.observer.flush(), e$(i, !0)));
};
et.compositionend = (i) => {
  i.inputState.composing = -1, i.inputState.compositionEndedAt = Date.now(), i.inputState.compositionFirstChange = null, setTimeout(() => {
    i.inputState.composing < 0 && e$(i, !1);
  }, 50);
};
et.contextmenu = (i) => {
  i.inputState.lastContextMenu = Date.now();
};
et.beforeinput = (i, e) => {
  var t;
  let n;
  if (ne.chrome && ne.android && (n = GP.find((r) => r.inputType == e.inputType)) && (i.observer.delayAndroidKey(n.key, n.keyCode), n.key == "Backspace" || n.key == "Delete")) {
    let r = ((t = window.visualViewport) === null || t === void 0 ? void 0 : t.height) || 0;
    setTimeout(() => {
      var s;
      (((s = window.visualViewport) === null || s === void 0 ? void 0 : s.height) || 0) > r + 10 && i.hasFocus && (i.contentDOM.blur(), i.focus());
    }, 100);
  }
};
const hS = ["pre-wrap", "normal", "pre-line", "break-spaces"];
class dz {
  constructor() {
    this.doc = Pe.empty, this.lineWrapping = !1, this.direction = zt.LTR, this.heightSamples = {}, this.lineHeight = 14, this.charWidth = 7, this.lineLength = 30, this.heightChanged = !1;
  }
  heightForGap(e, t) {
    let n = this.doc.lineAt(t).number - this.doc.lineAt(e).number + 1;
    return this.lineWrapping && (n += Math.ceil((t - e - n * this.lineLength * 0.5) / this.lineLength)), this.lineHeight * n;
  }
  heightForLine(e) {
    return this.lineWrapping ? (1 + Math.max(0, Math.ceil((e - this.lineLength) / (this.lineLength - 5)))) * this.lineHeight : this.lineHeight;
  }
  setDoc(e) {
    return this.doc = e, this;
  }
  mustRefreshForStyle(e, t) {
    return hS.indexOf(e) > -1 != this.lineWrapping || this.direction != t;
  }
  mustRefreshForHeights(e) {
    let t = !1;
    for (let n = 0; n < e.length; n++) {
      let r = e[n];
      r < 0 ? n++ : this.heightSamples[Math.floor(r * 10)] || (t = !0, this.heightSamples[Math.floor(r * 10)] = !0);
    }
    return t;
  }
  refresh(e, t, n, r, s, o) {
    let l = hS.indexOf(e) > -1, a = Math.round(n) != Math.round(this.lineHeight) || this.lineWrapping != l || this.direction != t;
    if (this.lineWrapping = l, this.direction = t, this.lineHeight = n, this.charWidth = r, this.lineLength = s, a) {
      this.heightSamples = {};
      for (let h = 0; h < o.length; h++) {
        let c = o[h];
        c < 0 ? h++ : this.heightSamples[Math.floor(c * 10)] = !0;
      }
    }
    return a;
  }
}
class Oz {
  constructor(e, t) {
    this.from = e, this.heights = t, this.index = 0;
  }
  get more() {
    return this.index < this.heights.length;
  }
}
class dn {
  /**
  @internal
  */
  constructor(e, t, n, r, s) {
    this.from = e, this.length = t, this.top = n, this.height = r, this.type = s;
  }
  /**
  The end of the element as a document position.
  */
  get to() {
    return this.from + this.length;
  }
  /**
  The bottom position of the element.
  */
  get bottom() {
    return this.top + this.height;
  }
  /**
  @internal
  */
  join(e) {
    let t = (Array.isArray(this.type) ? this.type : [this]).concat(Array.isArray(e.type) ? e.type : [e]);
    return new dn(this.from, this.length + e.length, this.top, this.height + e.height, t);
  }
  /**
  FIXME remove on next breaking release @internal
  */
  moveY(e) {
    return e ? new dn(this.from, this.length, this.top + e, this.height, Array.isArray(this.type) ? this.type.map((t) => t.moveY(e)) : this.type) : this;
  }
}
var Te = /* @__PURE__ */ function(i) {
  return i[i.ByPos = 0] = "ByPos", i[i.ByHeight = 1] = "ByHeight", i[i.ByPosNoHeight = 2] = "ByPosNoHeight", i;
}(Te || (Te = {}));
const ih = 1e-3;
class At {
  constructor(e, t, n = 2) {
    this.length = e, this.height = t, this.flags = n;
  }
  get outdated() {
    return (this.flags & 2) > 0;
  }
  set outdated(e) {
    this.flags = (e ? 2 : 0) | this.flags & -3;
  }
  setHeight(e, t) {
    this.height != t && (Math.abs(this.height - t) > ih && (e.heightChanged = !0), this.height = t);
  }
  // Base case is to replace a leaf node, which simply builds a tree
  // from the new nodes and returns that (HeightMapBranch and
  // HeightMapGap override this to actually use from/to)
  replace(e, t, n) {
    return At.of(n);
  }
  // Again, these are base cases, and are overridden for branch and gap nodes.
  decomposeLeft(e, t) {
    t.push(this);
  }
  decomposeRight(e, t) {
    t.push(this);
  }
  applyChanges(e, t, n, r) {
    let s = this;
    for (let o = r.length - 1; o >= 0; o--) {
      let { fromA: l, toA: a, fromB: h, toB: c } = r[o], f = s.lineAt(l, Te.ByPosNoHeight, t, 0, 0), u = f.to >= a ? f : s.lineAt(a, Te.ByPosNoHeight, t, 0, 0);
      for (c += u.to - a, a = u.to; o > 0 && f.from <= r[o - 1].toA; )
        l = r[o - 1].fromA, h = r[o - 1].fromB, o--, l < f.from && (f = s.lineAt(l, Te.ByPosNoHeight, t, 0, 0));
      h += f.from - l, l = f.from;
      let d = Cm.build(n, e, h, c);
      s = s.replace(l, a, d);
    }
    return s.updateHeight(n, 0);
  }
  static empty() {
    return new Bt(0, 0);
  }
  // nodes uses null values to indicate the position of line breaks.
  // There are never line breaks at the start or end of the array, or
  // two line breaks next to each other, and the array isn't allowed
  // to be empty (same restrictions as return value from the builder).
  static of(e) {
    if (e.length == 1)
      return e[0];
    let t = 0, n = e.length, r = 0, s = 0;
    for (; ; )
      if (t == n)
        if (r > s * 2) {
          let l = e[t - 1];
          l.break ? e.splice(--t, 1, l.left, null, l.right) : e.splice(--t, 1, l.left, l.right), n += 1 + l.break, r -= l.size;
        } else if (s > r * 2) {
          let l = e[n];
          l.break ? e.splice(n, 1, l.left, null, l.right) : e.splice(n, 1, l.left, l.right), n += 2 + l.break, s -= l.size;
        } else
          break;
      else if (r < s) {
        let l = e[t++];
        l && (r += l.size);
      } else {
        let l = e[--n];
        l && (s += l.size);
      }
    let o = 0;
    return e[t - 1] == null ? (o = 1, t--) : e[t] == null && (o = 1, n++), new pz(At.of(e.slice(0, t)), o, At.of(e.slice(n)));
  }
}
At.prototype.size = 1;
class t$ extends At {
  constructor(e, t, n) {
    super(e, t), this.type = n;
  }
  blockAt(e, t, n, r) {
    return new dn(r, this.length, n, this.height, this.type);
  }
  lineAt(e, t, n, r, s) {
    return this.blockAt(0, n, r, s);
  }
  forEachLine(e, t, n, r, s, o) {
    o(this.blockAt(0, n, r, s));
  }
  updateHeight(e, t = 0, n = !1, r) {
    return r && r.from <= t && r.more && this.setHeight(e, r.heights[r.index++]), this.outdated = !1, this;
  }
  toString() {
    return `block(${this.length})`;
  }
}
class Bt extends t$ {
  constructor(e, t) {
    super(e, t, Fe.Text), this.collapsed = 0, this.widgetHeight = 0;
  }
  replace(e, t, n) {
    let r = n[0];
    return n.length == 1 && (r instanceof Bt || r instanceof it && r.flags & 4) && Math.abs(this.length - r.length) < 10 ? (r instanceof it ? r = new Bt(r.length, this.height) : r.height = this.height, this.outdated || (r.outdated = !1), r) : At.of(n);
  }
  updateHeight(e, t = 0, n = !1, r) {
    return r && r.from <= t && r.more ? this.setHeight(e, r.heights[r.index++]) : (n || this.outdated) && this.setHeight(e, Math.max(this.widgetHeight, e.heightForLine(this.length - this.collapsed))), this.outdated = !1, this;
  }
  toString() {
    return `line(${this.length}${this.collapsed ? -this.collapsed : ""}${this.widgetHeight ? ":" + this.widgetHeight : ""})`;
  }
}
class it extends At {
  constructor(e) {
    super(e, 0);
  }
  lines(e, t) {
    let n = e.lineAt(t).number, r = e.lineAt(t + this.length).number;
    return { firstLine: n, lastLine: r, lineHeight: this.height / (r - n + 1) };
  }
  blockAt(e, t, n, r) {
    let { firstLine: s, lastLine: o, lineHeight: l } = this.lines(t, r), a = Math.max(0, Math.min(o - s, Math.floor((e - n) / l))), { from: h, length: c } = t.line(s + a);
    return new dn(h, c, n + l * a, l, Fe.Text);
  }
  lineAt(e, t, n, r, s) {
    if (t == Te.ByHeight)
      return this.blockAt(e, n, r, s);
    if (t == Te.ByPosNoHeight) {
      let { from: f, to: u } = n.lineAt(e);
      return new dn(f, u - f, 0, 0, Fe.Text);
    }
    let { firstLine: o, lineHeight: l } = this.lines(n, s), { from: a, length: h, number: c } = n.lineAt(e);
    return new dn(a, h, r + l * (c - o), l, Fe.Text);
  }
  forEachLine(e, t, n, r, s, o) {
    let { firstLine: l, lineHeight: a } = this.lines(n, s);
    for (let h = Math.max(e, s), c = Math.min(s + this.length, t); h <= c; ) {
      let f = n.lineAt(h);
      h == e && (r += a * (f.number - l)), o(new dn(f.from, f.length, r, a, Fe.Text)), r += a, h = f.to + 1;
    }
  }
  replace(e, t, n) {
    let r = this.length - t;
    if (r > 0) {
      let s = n[n.length - 1];
      s instanceof it ? n[n.length - 1] = new it(s.length + r) : n.push(null, new it(r - 1));
    }
    if (e > 0) {
      let s = n[0];
      s instanceof it ? n[0] = new it(e + s.length) : n.unshift(new it(e - 1), null);
    }
    return At.of(n);
  }
  decomposeLeft(e, t) {
    t.push(new it(e - 1), null);
  }
  decomposeRight(e, t) {
    t.push(null, new it(this.length - e - 1));
  }
  updateHeight(e, t = 0, n = !1, r) {
    let s = t + this.length;
    if (r && r.from <= t + this.length && r.more) {
      let o = [], l = Math.max(t, r.from), a = -1, h = e.heightChanged;
      for (r.from > t && o.push(new it(r.from - t - 1).updateHeight(e, t)); l <= s && r.more; ) {
        let f = e.doc.lineAt(l).length;
        o.length && o.push(null);
        let u = r.heights[r.index++];
        a == -1 ? a = u : Math.abs(u - a) >= ih && (a = -2);
        let d = new Bt(f, u);
        d.outdated = !1, o.push(d), l += f + 1;
      }
      l <= s && o.push(null, new it(s - l).updateHeight(e, l));
      let c = At.of(o);
      return e.heightChanged = h || a < 0 || Math.abs(c.height - this.height) >= ih || Math.abs(a - this.lines(e.doc, t).lineHeight) >= ih, c;
    } else (n || this.outdated) && (this.setHeight(e, e.heightForGap(t, t + this.length)), this.outdated = !1);
    return this;
  }
  toString() {
    return `gap(${this.length})`;
  }
}
class pz extends At {
  constructor(e, t, n) {
    super(e.length + t + n.length, e.height + n.height, t | (e.outdated || n.outdated ? 2 : 0)), this.left = e, this.right = n, this.size = e.size + n.size;
  }
  get break() {
    return this.flags & 1;
  }
  blockAt(e, t, n, r) {
    let s = n + this.left.height;
    return e < s ? this.left.blockAt(e, t, n, r) : this.right.blockAt(e, t, s, r + this.left.length + this.break);
  }
  lineAt(e, t, n, r, s) {
    let o = r + this.left.height, l = s + this.left.length + this.break, a = t == Te.ByHeight ? e < o : e < l, h = a ? this.left.lineAt(e, t, n, r, s) : this.right.lineAt(e, t, n, o, l);
    if (this.break || (a ? h.to < l : h.from > l))
      return h;
    let c = t == Te.ByPosNoHeight ? Te.ByPosNoHeight : Te.ByPos;
    return a ? h.join(this.right.lineAt(l, c, n, o, l)) : this.left.lineAt(l, c, n, r, s).join(h);
  }
  forEachLine(e, t, n, r, s, o) {
    let l = r + this.left.height, a = s + this.left.length + this.break;
    if (this.break)
      e < a && this.left.forEachLine(e, t, n, r, s, o), t >= a && this.right.forEachLine(e, t, n, l, a, o);
    else {
      let h = this.lineAt(a, Te.ByPos, n, r, s);
      e < h.from && this.left.forEachLine(e, h.from - 1, n, r, s, o), h.to >= e && h.from <= t && o(h), t > h.to && this.right.forEachLine(h.to + 1, t, n, l, a, o);
    }
  }
  replace(e, t, n) {
    let r = this.left.length + this.break;
    if (t < r)
      return this.balanced(this.left.replace(e, t, n), this.right);
    if (e > this.left.length)
      return this.balanced(this.left, this.right.replace(e - r, t - r, n));
    let s = [];
    e > 0 && this.decomposeLeft(e, s);
    let o = s.length;
    for (let l of n)
      s.push(l);
    if (e > 0 && cS(s, o - 1), t < this.length) {
      let l = s.length;
      this.decomposeRight(t, s), cS(s, l);
    }
    return At.of(s);
  }
  decomposeLeft(e, t) {
    let n = this.left.length;
    if (e <= n)
      return this.left.decomposeLeft(e, t);
    t.push(this.left), this.break && (n++, e >= n && t.push(null)), e > n && this.right.decomposeLeft(e - n, t);
  }
  decomposeRight(e, t) {
    let n = this.left.length, r = n + this.break;
    if (e >= r)
      return this.right.decomposeRight(e - r, t);
    e < n && this.left.decomposeRight(e, t), this.break && e < r && t.push(null), t.push(this.right);
  }
  balanced(e, t) {
    return e.size > 2 * t.size || t.size > 2 * e.size ? At.of(this.break ? [e, null, t] : [e, t]) : (this.left = e, this.right = t, this.height = e.height + t.height, this.outdated = e.outdated || t.outdated, this.size = e.size + t.size, this.length = e.length + this.break + t.length, this);
  }
  updateHeight(e, t = 0, n = !1, r) {
    let { left: s, right: o } = this, l = t + s.length + this.break, a = null;
    return r && r.from <= t + s.length && r.more ? a = s = s.updateHeight(e, t, n, r) : s.updateHeight(e, t, n), r && r.from <= l + o.length && r.more ? a = o = o.updateHeight(e, l, n, r) : o.updateHeight(e, l, n), a ? this.balanced(s, o) : (this.height = this.left.height + this.right.height, this.outdated = !1, this);
  }
  toString() {
    return this.left + (this.break ? " " : "-") + this.right;
  }
}
function cS(i, e) {
  let t, n;
  i[e] == null && (t = i[e - 1]) instanceof it && (n = i[e + 1]) instanceof it && i.splice(e - 1, 3, new it(t.length + 1 + n.length));
}
const mz = 5;
class Cm {
  constructor(e, t) {
    this.pos = e, this.oracle = t, this.nodes = [], this.lineStart = -1, this.lineEnd = -1, this.covering = null, this.writtenTo = e;
  }
  get isCovered() {
    return this.covering && this.nodes[this.nodes.length - 1] == this.covering;
  }
  span(e, t) {
    if (this.lineStart > -1) {
      let n = Math.min(t, this.lineEnd), r = this.nodes[this.nodes.length - 1];
      r instanceof Bt ? r.length += n - this.pos : (n > this.pos || !this.isCovered) && this.nodes.push(new Bt(n - this.pos, -1)), this.writtenTo = n, t > n && (this.nodes.push(null), this.writtenTo++, this.lineStart = -1);
    }
    this.pos = t;
  }
  point(e, t, n) {
    if (e < t || n.heightRelevant) {
      let r = n.widget ? n.widget.estimatedHeight : 0;
      r < 0 && (r = this.oracle.lineHeight);
      let s = t - e;
      n.block ? this.addBlock(new t$(s, r, n.type)) : (s || r >= mz) && this.addLineDeco(r, s);
    } else t > e && this.span(e, t);
    this.lineEnd > -1 && this.lineEnd < this.pos && (this.lineEnd = this.oracle.doc.lineAt(this.pos).to);
  }
  enterLine() {
    if (this.lineStart > -1)
      return;
    let { from: e, to: t } = this.oracle.doc.lineAt(this.pos);
    this.lineStart = e, this.lineEnd = t, this.writtenTo < e && ((this.writtenTo < e - 1 || this.nodes[this.nodes.length - 1] == null) && this.nodes.push(this.blankContent(this.writtenTo, e - 1)), this.nodes.push(null)), this.pos > e && this.nodes.push(new Bt(this.pos - e, -1)), this.writtenTo = this.pos;
  }
  blankContent(e, t) {
    let n = new it(t - e);
    return this.oracle.doc.lineAt(e).to == t && (n.flags |= 4), n;
  }
  ensureLine() {
    this.enterLine();
    let e = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;
    if (e instanceof Bt)
      return e;
    let t = new Bt(0, -1);
    return this.nodes.push(t), t;
  }
  addBlock(e) {
    this.enterLine(), e.type == Fe.WidgetAfter && !this.isCovered && this.ensureLine(), this.nodes.push(e), this.writtenTo = this.pos = this.pos + e.length, e.type != Fe.WidgetBefore && (this.covering = e);
  }
  addLineDeco(e, t) {
    let n = this.ensureLine();
    n.length += t, n.collapsed += t, n.widgetHeight = Math.max(n.widgetHeight, e), this.writtenTo = this.pos = this.pos + t;
  }
  finish(e) {
    let t = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];
    this.lineStart > -1 && !(t instanceof Bt) && !this.isCovered ? this.nodes.push(new Bt(0, -1)) : (this.writtenTo < this.pos || t == null) && this.nodes.push(this.blankContent(this.writtenTo, this.pos));
    let n = e;
    for (let r of this.nodes)
      r instanceof Bt && r.updateHeight(this.oracle, n), n += r ? r.length : 1;
    return this.nodes;
  }
  // Always called with a region that on both sides either stretches
  // to a line break or the end of the document.
  // The returned array uses null to indicate line breaks, but never
  // starts or ends in a line break, or has multiple line breaks next
  // to each other.
  static build(e, t, n, r) {
    let s = new Cm(n, e);
    return Ge.spans(t, n, r, s, 0), s.finish(n);
  }
}
function gz(i, e, t) {
  let n = new yz();
  return Ge.compare(i, e, t, n, 0), n.changes;
}
class yz {
  constructor() {
    this.changes = [];
  }
  compareRange() {
  }
  comparePoint(e, t, n, r) {
    (e < t || n && n.heightRelevant || r && r.heightRelevant) && MO(e, t, this.changes, 5);
  }
}
function Sz(i, e) {
  let t = i.getBoundingClientRect(), n = Math.max(0, t.left), r = Math.min(innerWidth, t.right), s = Math.max(0, t.top), o = Math.min(innerHeight, t.bottom), l = i.ownerDocument.body;
  for (let a = i.parentNode; a && a != l; )
    if (a.nodeType == 1) {
      let h = a, c = window.getComputedStyle(h);
      if ((h.scrollHeight > h.clientHeight || h.scrollWidth > h.clientWidth) && c.overflow != "visible") {
        let f = h.getBoundingClientRect();
        n = Math.max(n, f.left), r = Math.min(r, f.right), s = Math.max(s, f.top), o = Math.min(o, f.bottom);
      }
      a = c.position == "absolute" || c.position == "fixed" ? h.offsetParent : h.parentNode;
    } else if (a.nodeType == 11)
      a = a.host;
    else
      break;
  return {
    left: n - t.left,
    right: Math.max(n, r) - t.left,
    top: s - (t.top + e),
    bottom: Math.max(s, o) - (t.top + e)
  };
}
function bz(i, e) {
  let t = i.getBoundingClientRect();
  return {
    left: 0,
    right: t.right - t.left,
    top: e,
    bottom: t.bottom - (t.top + e)
  };
}
class su {
  constructor(e, t, n) {
    this.from = e, this.to = t, this.size = n;
  }
  static same(e, t) {
    if (e.length != t.length)
      return !1;
    for (let n = 0; n < e.length; n++) {
      let r = e[n], s = t[n];
      if (r.from != s.from || r.to != s.to || r.size != s.size)
        return !1;
    }
    return !0;
  }
  draw(e) {
    return Ke.replace({ widget: new xz(this.size, e) }).range(this.from, this.to);
  }
}
class xz extends Rc {
  constructor(e, t) {
    super(), this.size = e, this.vertical = t;
  }
  eq(e) {
    return e.size == this.size && e.vertical == this.vertical;
  }
  toDOM() {
    let e = document.createElement("div");
    return this.vertical ? e.style.height = this.size + "px" : (e.style.width = this.size + "px", e.style.height = "2px", e.style.display = "inline-block"), e;
  }
  get estimatedHeight() {
    return this.vertical ? this.size : -1;
  }
}
class fS {
  constructor(e) {
    this.state = e, this.pixelViewport = { left: 0, right: window.innerWidth, top: 0, bottom: 0 }, this.inView = !0, this.paddingTop = 0, this.paddingBottom = 0, this.contentDOMWidth = 0, this.contentDOMHeight = 0, this.editorHeight = 0, this.editorWidth = 0, this.heightOracle = new dz(), this.scaler = OS, this.scrollTarget = null, this.printing = !1, this.mustMeasureContent = !0, this.visibleRanges = [], this.mustEnforceCursorAssoc = !1, this.heightMap = At.empty().applyChanges(e.facet(fr), Pe.empty, this.heightOracle.setDoc(e.doc), [new mn(0, 0, 0, e.doc.length)]), this.viewport = this.getViewport(0, null), this.updateViewportLines(), this.updateForViewport(), this.lineGaps = this.ensureLineGaps([]), this.lineGapDeco = Ke.set(this.lineGaps.map((t) => t.draw(!1))), this.computeVisibleRanges();
  }
  updateForViewport() {
    let e = [this.viewport], { main: t } = this.state.selection;
    for (let n = 0; n <= 1; n++) {
      let r = n ? t.head : t.anchor;
      if (!e.some(({ from: s, to: o }) => r >= s && r <= o)) {
        let { from: s, to: o } = this.lineBlockAt(r);
        e.push(new ma(s, o));
      }
    }
    this.viewports = e.sort((n, r) => n.from - r.from), this.scaler = this.heightMap.height <= 7e6 ? OS : new vz(this.heightOracle.doc, this.heightMap, this.viewports);
  }
  updateViewportLines() {
    this.viewportLines = [], this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.state.doc, 0, 0, (e) => {
      this.viewportLines.push(this.scaler.scale == 1 ? e : yo(e, this.scaler));
    });
  }
  update(e, t = null) {
    let n = this.state;
    this.state = e.state;
    let r = this.state.facet(fr), s = e.changedRanges, o = mn.extendWithRanges(s, gz(e.startState.facet(fr), r, e ? e.changes : rt.empty(this.state.doc.length))), l = this.heightMap.height;
    this.heightMap = this.heightMap.applyChanges(r, n.doc, this.heightOracle.setDoc(this.state.doc), o), this.heightMap.height != l && (e.flags |= 2);
    let a = o.length ? this.mapViewport(this.viewport, e.changes) : this.viewport;
    (t && (t.range.head < a.from || t.range.head > a.to) || !this.viewportIsAppropriate(a)) && (a = this.getViewport(0, t));
    let h = !e.changes.empty || e.flags & 2 || a.from != this.viewport.from || a.to != this.viewport.to;
    this.viewport = a, this.updateForViewport(), h && this.updateViewportLines(), (this.lineGaps.length || this.viewport.to - this.viewport.from > 4e3) && this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, e.changes))), e.flags |= this.computeVisibleRanges(), t && (this.scrollTarget = t), !this.mustEnforceCursorAssoc && e.selectionSet && e.view.lineWrapping && e.state.selection.main.empty && e.state.selection.main.assoc && (this.mustEnforceCursorAssoc = !0);
  }
  measure(e) {
    let t = e.contentDOM, n = window.getComputedStyle(t), r = this.heightOracle, s = n.whiteSpace, o = n.direction == "rtl" ? zt.RTL : zt.LTR, l = this.heightOracle.mustRefreshForStyle(s, o), a = l || this.mustMeasureContent || this.contentDOMHeight != t.clientHeight, h = 0, c = 0;
    if (this.editorWidth != e.scrollDOM.clientWidth && (r.lineWrapping && (a = !0), this.editorWidth = e.scrollDOM.clientWidth, h |= 8), a) {
      this.mustMeasureContent = !1, this.contentDOMHeight = t.clientHeight;
      let g = parseInt(n.paddingTop) || 0, S = parseInt(n.paddingBottom) || 0;
      (this.paddingTop != g || this.paddingBottom != S) && (h |= 8, this.paddingTop = g, this.paddingBottom = S);
    }
    let f = (this.printing ? bz : Sz)(t, this.paddingTop), u = f.top - this.pixelViewport.top, d = f.bottom - this.pixelViewport.bottom;
    this.pixelViewport = f;
    let O = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;
    if (O != this.inView && (this.inView = O, O && (a = !0)), !this.inView)
      return 0;
    let p = t.clientWidth;
    if ((this.contentDOMWidth != p || this.editorHeight != e.scrollDOM.clientHeight) && (this.contentDOMWidth = p, this.editorHeight = e.scrollDOM.clientHeight, h |= 8), a) {
      let g = e.docView.measureVisibleLineHeights();
      if (r.mustRefreshForHeights(g) && (l = !0), l || r.lineWrapping && Math.abs(p - this.contentDOMWidth) > r.charWidth) {
        let { lineHeight: S, charWidth: x } = e.docView.measureTextSize();
        l = r.refresh(s, o, S, x, p / x, g), l && (e.docView.minWidth = 0, h |= 8);
      }
      u > 0 && d > 0 ? c = Math.max(u, d) : u < 0 && d < 0 && (c = Math.min(u, d)), r.heightChanged = !1, this.heightMap = this.heightMap.updateHeight(r, 0, l, new Oz(this.viewport.from, g)), r.heightChanged && (h |= 2);
    }
    let m = !this.viewportIsAppropriate(this.viewport, c) || this.scrollTarget && (this.scrollTarget.range.head < this.viewport.from || this.scrollTarget.range.head > this.viewport.to);
    return m && (this.viewport = this.getViewport(c, this.scrollTarget)), this.updateForViewport(), (h & 2 || m) && this.updateViewportLines(), (this.lineGaps.length || this.viewport.to - this.viewport.from > 4e3) && this.updateLineGaps(this.ensureLineGaps(l ? [] : this.lineGaps)), h |= this.computeVisibleRanges(), this.mustEnforceCursorAssoc && (this.mustEnforceCursorAssoc = !1, e.docView.enforceCursorAssoc()), h;
  }
  get visibleTop() {
    return this.scaler.fromDOM(this.pixelViewport.top);
  }
  get visibleBottom() {
    return this.scaler.fromDOM(this.pixelViewport.bottom);
  }
  getViewport(e, t) {
    let n = 0.5 - Math.max(-0.5, Math.min(0.5, e / 1e3 / 2)), r = this.heightMap, s = this.state.doc, { visibleTop: o, visibleBottom: l } = this, a = new ma(r.lineAt(o - n * 1e3, Te.ByHeight, s, 0, 0).from, r.lineAt(l + (1 - n) * 1e3, Te.ByHeight, s, 0, 0).to);
    if (t) {
      let { head: h } = t.range;
      if (h < a.from || h > a.to) {
        let c = Math.min(this.editorHeight, this.pixelViewport.bottom - this.pixelViewport.top), f = r.lineAt(h, Te.ByPos, s, 0, 0), u;
        t.y == "center" ? u = (f.top + f.bottom) / 2 - c / 2 : t.y == "start" || t.y == "nearest" && h < a.from ? u = f.top : u = f.bottom - c, a = new ma(r.lineAt(u - 1e3 / 2, Te.ByHeight, s, 0, 0).from, r.lineAt(u + c + 1e3 / 2, Te.ByHeight, s, 0, 0).to);
      }
    }
    return a;
  }
  mapViewport(e, t) {
    let n = t.mapPos(e.from, -1), r = t.mapPos(e.to, 1);
    return new ma(this.heightMap.lineAt(n, Te.ByPos, this.state.doc, 0, 0).from, this.heightMap.lineAt(r, Te.ByPos, this.state.doc, 0, 0).to);
  }
  // Checks if a given viewport covers the visible part of the
  // document and not too much beyond that.
  viewportIsAppropriate({ from: e, to: t }, n = 0) {
    if (!this.inView)
      return !0;
    let { top: r } = this.heightMap.lineAt(e, Te.ByPos, this.state.doc, 0, 0), { bottom: s } = this.heightMap.lineAt(t, Te.ByPos, this.state.doc, 0, 0), { visibleTop: o, visibleBottom: l } = this;
    return (e == 0 || r <= o - Math.max(10, Math.min(
      -n,
      250
      /* MaxCoverMargin */
    ))) && (t == this.state.doc.length || s >= l + Math.max(10, Math.min(
      n,
      250
      /* MaxCoverMargin */
    ))) && r > o - 2 * 1e3 && s < l + 2 * 1e3;
  }
  mapLineGaps(e, t) {
    if (!e.length || t.empty)
      return e;
    let n = [];
    for (let r of e)
      t.touchesRange(r.from, r.to) || n.push(new su(t.mapPos(r.from), t.mapPos(r.to), r.size));
    return n;
  }
  // Computes positions in the viewport where the start or end of a
  // line should be hidden, trying to reuse existing line gaps when
  // appropriate to avoid unneccesary redraws.
  // Uses crude character-counting for the positioning and sizing,
  // since actual DOM coordinates aren't always available and
  // predictable. Relies on generous margins (see LG.Margin) to hide
  // the artifacts this might produce from the user.
  ensureLineGaps(e) {
    let t = [];
    if (this.heightOracle.direction != zt.LTR)
      return t;
    for (let n of this.viewportLines) {
      if (n.length < 4e3)
        continue;
      let r = wz(n.from, n.to, this.state);
      if (r.total < 4e3)
        continue;
      let s, o;
      if (this.heightOracle.lineWrapping) {
        let h = 2e3 / this.heightOracle.lineLength * this.heightOracle.lineHeight;
        s = ga(r, (this.visibleTop - n.top - h) / n.height), o = ga(r, (this.visibleBottom - n.top + h) / n.height);
      } else {
        let h = r.total * this.heightOracle.charWidth, c = 2e3 * this.heightOracle.charWidth;
        s = ga(r, (this.pixelViewport.left - c) / h), o = ga(r, (this.pixelViewport.right + c) / h);
      }
      let l = [];
      s > n.from && l.push({ from: n.from, to: s }), o < n.to && l.push({ from: o, to: n.to });
      let a = this.state.selection.main;
      a.from >= n.from && a.from <= n.to && dS(
        l,
        a.from - 10,
        a.from + 10
        /* SelectionMargin */
      ), !a.empty && a.to >= n.from && a.to <= n.to && dS(
        l,
        a.to - 10,
        a.to + 10
        /* SelectionMargin */
      );
      for (let { from: h, to: c } of l)
        c - h > 1e3 && t.push(kz(
          e,
          (f) => f.from >= n.from && f.to <= n.to && Math.abs(f.from - h) < 1e3 && Math.abs(f.to - c) < 1e3
          /* HalfMargin */
        ) || new su(h, c, this.gapSize(n, h, c, r)));
    }
    return t;
  }
  gapSize(e, t, n, r) {
    let s = uS(r, n) - uS(r, t);
    return this.heightOracle.lineWrapping ? e.height * s : r.total * this.heightOracle.charWidth * s;
  }
  updateLineGaps(e) {
    su.same(e, this.lineGaps) || (this.lineGaps = e, this.lineGapDeco = Ke.set(e.map((t) => t.draw(this.heightOracle.lineWrapping))));
  }
  computeVisibleRanges() {
    let e = this.state.facet(fr);
    this.lineGaps.length && (e = e.concat(this.lineGapDeco));
    let t = [];
    Ge.spans(e, this.viewport.from, this.viewport.to, {
      span(r, s) {
        t.push({ from: r, to: s });
      },
      point() {
      }
    }, 20);
    let n = t.length != this.visibleRanges.length || this.visibleRanges.some((r, s) => r.from != t[s].from || r.to != t[s].to);
    return this.visibleRanges = t, n ? 4 : 0;
  }
  lineBlockAt(e) {
    return e >= this.viewport.from && e <= this.viewport.to && this.viewportLines.find((t) => t.from <= e && t.to >= e) || yo(this.heightMap.lineAt(e, Te.ByPos, this.state.doc, 0, 0), this.scaler);
  }
  lineBlockAtHeight(e) {
    return yo(this.heightMap.lineAt(this.scaler.fromDOM(e), Te.ByHeight, this.state.doc, 0, 0), this.scaler);
  }
  elementAtHeight(e) {
    return yo(this.heightMap.blockAt(this.scaler.fromDOM(e), this.state.doc, 0, 0), this.scaler);
  }
  get docHeight() {
    return this.scaler.toDOM(this.heightMap.height);
  }
  get contentHeight() {
    return this.docHeight + this.paddingTop + this.paddingBottom;
  }
}
class ma {
  constructor(e, t) {
    this.from = e, this.to = t;
  }
}
function wz(i, e, t) {
  let n = [], r = i, s = 0;
  return Ge.spans(t.facet(fr), i, e, {
    span() {
    },
    point(o, l) {
      o > r && (n.push({ from: r, to: o }), s += o - r), r = l;
    }
  }, 20), r < e && (n.push({ from: r, to: e }), s += e - r), { total: s, ranges: n };
}
function ga({ total: i, ranges: e }, t) {
  if (t <= 0)
    return e[0].from;
  if (t >= 1)
    return e[e.length - 1].to;
  let n = Math.floor(i * t);
  for (let r = 0; ; r++) {
    let { from: s, to: o } = e[r], l = o - s;
    if (n <= l)
      return s + n;
    n -= l;
  }
}
function uS(i, e) {
  let t = 0;
  for (let { from: n, to: r } of i.ranges) {
    if (e <= r) {
      t += e - n;
      break;
    }
    t += r - n;
  }
  return t / i.total;
}
function dS(i, e, t) {
  for (let n = 0; n < i.length; n++) {
    let r = i[n];
    if (r.from < t && r.to > e) {
      let s = [];
      r.from < e && s.push({ from: r.from, to: e }), r.to > t && s.push({ from: t, to: r.to }), i.splice(n, 1, ...s), n += s.length - 1;
    }
  }
}
function kz(i, e) {
  for (let t of i)
    if (e(t))
      return t;
}
const OS = {
  toDOM(i) {
    return i;
  },
  fromDOM(i) {
    return i;
  },
  scale: 1
};
class vz {
  constructor(e, t, n) {
    let r = 0, s = 0, o = 0;
    this.viewports = n.map(({ from: l, to: a }) => {
      let h = t.lineAt(l, Te.ByPos, e, 0, 0).top, c = t.lineAt(a, Te.ByPos, e, 0, 0).bottom;
      return r += c - h, { from: l, to: a, top: h, bottom: c, domTop: 0, domBottom: 0 };
    }), this.scale = (7e6 - r) / (t.height - r);
    for (let l of this.viewports)
      l.domTop = o + (l.top - s) * this.scale, o = l.domBottom = l.domTop + (l.bottom - l.top), s = l.bottom;
  }
  toDOM(e) {
    for (let t = 0, n = 0, r = 0; ; t++) {
      let s = t < this.viewports.length ? this.viewports[t] : null;
      if (!s || e < s.top)
        return r + (e - n) * this.scale;
      if (e <= s.bottom)
        return s.domTop + (e - s.top);
      n = s.bottom, r = s.domBottom;
    }
  }
  fromDOM(e) {
    for (let t = 0, n = 0, r = 0; ; t++) {
      let s = t < this.viewports.length ? this.viewports[t] : null;
      if (!s || e < s.domTop)
        return n + (e - r) / this.scale;
      if (e <= s.domBottom)
        return s.top + (e - s.domTop);
      n = s.bottom, r = s.domBottom;
    }
  }
}
function yo(i, e) {
  if (e.scale == 1)
    return i;
  let t = e.toDOM(i.top), n = e.toDOM(i.bottom);
  return new dn(i.from, i.length, t, n - t, Array.isArray(i.type) ? i.type.map((r) => yo(r, e)) : i.type);
}
const ya = /* @__PURE__ */ be.define({ combine: (i) => i.join(" ") }), DO = /* @__PURE__ */ be.define({ combine: (i) => i.indexOf(!0) > -1 }), VO = /* @__PURE__ */ mt.newName(), i$ = /* @__PURE__ */ mt.newName(), n$ = /* @__PURE__ */ mt.newName(), r$ = { "&light": "." + i$, "&dark": "." + n$ };
function WO(i, e, t) {
  return new mt(e, {
    finish(n) {
      return /&/.test(n) ? n.replace(/&\w*/, (r) => {
        if (r == "&")
          return i;
        if (!t || !t[r])
          throw new RangeError(`Unsupported selector: ${r}`);
        return t[r];
      }) : i + " " + n;
    }
  });
}
const Qz = /* @__PURE__ */ WO("." + VO, {
  "&.cm-editor": {
    position: "relative !important",
    boxSizing: "border-box",
    "&.cm-focused": {
      // Provide a simple default outline to make sure a focused
      // editor is visually distinct. Can't leave the default behavior
      // because that will apply to the content element, which is
      // inside the scrollable container and doesn't include the
      // gutters. We also can't use an 'auto' outline, since those
      // are, for some reason, drawn behind the element content, which
      // will cause things like the active line background to cover
      // the outline (#297).
      outline: "1px dotted #212121"
    },
    display: "flex !important",
    flexDirection: "column"
  },
  ".cm-scroller": {
    display: "flex !important",
    alignItems: "flex-start !important",
    fontFamily: "monospace",
    lineHeight: 1.4,
    height: "100%",
    overflowX: "auto",
    position: "relative",
    zIndex: 0
  },
  ".cm-content": {
    margin: 0,
    flexGrow: 2,
    minHeight: "100%",
    display: "block",
    whiteSpace: "pre",
    wordWrap: "normal",
    boxSizing: "border-box",
    padding: "4px 0",
    outline: "none",
    "&[contenteditable=true]": {
      WebkitUserModify: "read-write-plaintext-only"
    }
  },
  ".cm-lineWrapping": {
    whiteSpace_fallback: "pre-wrap",
    whiteSpace: "break-spaces",
    wordBreak: "break-word",
    overflowWrap: "anywhere"
  },
  "&light .cm-content": { caretColor: "black" },
  "&dark .cm-content": { caretColor: "white" },
  ".cm-line": {
    display: "block",
    padding: "0 2px 0 4px"
  },
  ".cm-selectionLayer": {
    zIndex: -1,
    contain: "size style"
  },
  ".cm-selectionBackground": {
    position: "absolute"
  },
  "&light .cm-selectionBackground": {
    background: "#d9d9d9"
  },
  "&dark .cm-selectionBackground": {
    background: "#222"
  },
  "&light.cm-focused .cm-selectionBackground": {
    background: "#d7d4f0"
  },
  "&dark.cm-focused .cm-selectionBackground": {
    background: "#233"
  },
  ".cm-cursorLayer": {
    zIndex: 100,
    contain: "size style",
    pointerEvents: "none"
  },
  "&.cm-focused .cm-cursorLayer": {
    animation: "steps(1) cm-blink 1.2s infinite"
  },
  // Two animations defined so that we can switch between them to
  // restart the animation without forcing another style
  // recomputation.
  "@keyframes cm-blink": { "0%": {}, "50%": { visibility: "hidden" }, "100%": {} },
  "@keyframes cm-blink2": { "0%": {}, "50%": { visibility: "hidden" }, "100%": {} },
  ".cm-cursor, .cm-dropCursor": {
    position: "absolute",
    borderLeft: "1.2px solid black",
    marginLeft: "-0.6px",
    pointerEvents: "none"
  },
  ".cm-cursor": {
    display: "none"
  },
  "&dark .cm-cursor": {
    borderLeftColor: "#444"
  },
  "&.cm-focused .cm-cursor": {
    display: "block"
  },
  "&light .cm-activeLine": { backgroundColor: "#f3f9ff" },
  "&dark .cm-activeLine": { backgroundColor: "#223039" },
  "&light .cm-specialChar": { color: "red" },
  "&dark .cm-specialChar": { color: "#f78" },
  ".cm-tab": {
    display: "inline-block",
    overflow: "hidden",
    verticalAlign: "bottom"
  },
  ".cm-widgetBuffer": {
    verticalAlign: "text-top",
    height: "1em",
    display: "inline"
  },
  ".cm-placeholder": {
    color: "#888",
    display: "inline-block",
    verticalAlign: "top"
  },
  ".cm-button": {
    verticalAlign: "middle",
    color: "inherit",
    fontSize: "70%",
    padding: ".2em 1em",
    borderRadius: "1px"
  },
  "&light .cm-button": {
    backgroundImage: "linear-gradient(#eff1f5, #d9d9df)",
    border: "1px solid #888",
    "&:active": {
      backgroundImage: "linear-gradient(#b4b4b4, #d0d3d6)"
    }
  },
  "&dark .cm-button": {
    backgroundImage: "linear-gradient(#393939, #111)",
    border: "1px solid #888",
    "&:active": {
      backgroundImage: "linear-gradient(#111, #333)"
    }
  },
  ".cm-textfield": {
    verticalAlign: "middle",
    color: "inherit",
    fontSize: "70%",
    border: "1px solid silver",
    padding: ".2em .5em"
  },
  "&light .cm-textfield": {
    backgroundColor: "white"
  },
  "&dark .cm-textfield": {
    border: "1px solid #555",
    backgroundColor: "inherit"
  }
}, r$), Pz = {
  childList: !0,
  characterData: !0,
  subtree: !0,
  attributes: !0,
  characterDataOldValue: !0
}, ou = ne.ie && ne.ie_version <= 11;
class $z {
  constructor(e, t, n) {
    this.view = e, this.onChange = t, this.onScrollChanged = n, this.active = !1, this.selectionRange = new Q3(), this.selectionChanged = !1, this.delayedFlush = -1, this.resizeTimeout = -1, this.queue = [], this.delayedAndroidKey = null, this.scrollTargets = [], this.intersection = null, this.resize = null, this.intersecting = !1, this.gapIntersection = null, this.gaps = [], this.parentCheck = -1, this.dom = e.contentDOM, this.observer = new MutationObserver((r) => {
      for (let s of r)
        this.queue.push(s);
      (ne.ie && ne.ie_version <= 11 || ne.ios && e.composing) && r.some((s) => s.type == "childList" && s.removedNodes.length || s.type == "characterData" && s.oldValue.length > s.target.nodeValue.length) ? this.flushSoon() : this.flush();
    }), ou && (this.onCharData = (r) => {
      this.queue.push({
        target: r.target,
        type: "characterData",
        oldValue: r.prevValue
      }), this.flushSoon();
    }), this.onSelectionChange = this.onSelectionChange.bind(this), window.addEventListener("resize", this.onResize = this.onResize.bind(this)), typeof ResizeObserver == "function" && (this.resize = new ResizeObserver(() => {
      this.view.docView.lastUpdate < Date.now() - 75 && this.onResize();
    }), this.resize.observe(e.scrollDOM)), window.addEventListener("beforeprint", this.onPrint = this.onPrint.bind(this)), this.start(), window.addEventListener("scroll", this.onScroll = this.onScroll.bind(this)), typeof IntersectionObserver == "function" && (this.intersection = new IntersectionObserver((r) => {
      this.parentCheck < 0 && (this.parentCheck = setTimeout(this.listenForScroll.bind(this), 1e3)), r.length > 0 && r[r.length - 1].intersectionRatio > 0 != this.intersecting && (this.intersecting = !this.intersecting, this.intersecting != this.view.inView && this.onScrollChanged(document.createEvent("Event")));
    }, {}), this.intersection.observe(this.dom), this.gapIntersection = new IntersectionObserver((r) => {
      r.length > 0 && r[r.length - 1].intersectionRatio > 0 && this.onScrollChanged(document.createEvent("Event"));
    }, {})), this.listenForScroll(), this.readSelectionRange(), this.dom.ownerDocument.addEventListener("selectionchange", this.onSelectionChange);
  }
  onScroll(e) {
    this.intersecting && this.flush(!1), this.onScrollChanged(e);
  }
  onResize() {
    this.resizeTimeout < 0 && (this.resizeTimeout = setTimeout(() => {
      this.resizeTimeout = -1, this.view.requestMeasure();
    }, 50));
  }
  onPrint() {
    this.view.viewState.printing = !0, this.view.measure(), setTimeout(() => {
      this.view.viewState.printing = !1, this.view.requestMeasure();
    }, 500);
  }
  updateGaps(e) {
    if (this.gapIntersection && (e.length != this.gaps.length || this.gaps.some((t, n) => t != e[n]))) {
      this.gapIntersection.disconnect();
      for (let t of e)
        this.gapIntersection.observe(t);
      this.gaps = e;
    }
  }
  onSelectionChange(e) {
    if (!this.readSelectionRange() || this.delayedAndroidKey)
      return;
    let { view: t } = this, n = this.selectionRange;
    if (t.state.facet(Ml) ? t.root.activeElement != this.dom : !vO(t.dom, n))
      return;
    let r = n.anchorNode && t.docView.nearest(n.anchorNode);
    r && r.ignoreEvent(e) || ((ne.ie && ne.ie_version <= 11 || ne.android && ne.chrome) && !t.state.selection.main.empty && // (Selection.isCollapsed isn't reliable on IE)
    n.focusNode && Fh(n.focusNode, n.focusOffset, n.anchorNode, n.anchorOffset) ? this.flushSoon() : this.flush(!1));
  }
  readSelectionRange() {
    let { root: e } = this.view, t = Gh(e), n = ne.safari && e.nodeType == 11 && w3() == this.view.contentDOM && Tz(this.view) || t;
    return this.selectionRange.eq(n) ? !1 : (this.selectionRange.setRange(n), this.selectionChanged = !0);
  }
  setSelectionRange(e, t) {
    this.selectionRange.set(e.node, e.offset, t.node, t.offset), this.selectionChanged = !1;
  }
  listenForScroll() {
    this.parentCheck = -1;
    let e = 0, t = null;
    for (let n = this.dom; n; )
      if (n.nodeType == 1)
        !t && e < this.scrollTargets.length && this.scrollTargets[e] == n ? e++ : t || (t = this.scrollTargets.slice(0, e)), t && t.push(n), n = n.assignedSlot || n.parentNode;
      else if (n.nodeType == 11)
        n = n.host;
      else
        break;
    if (e < this.scrollTargets.length && !t && (t = this.scrollTargets.slice(0, e)), t) {
      for (let n of this.scrollTargets)
        n.removeEventListener("scroll", this.onScroll);
      for (let n of this.scrollTargets = t)
        n.addEventListener("scroll", this.onScroll);
    }
  }
  ignore(e) {
    if (!this.active)
      return e();
    try {
      return this.stop(), e();
    } finally {
      this.start(), this.clear();
    }
  }
  start() {
    this.active || (this.observer.observe(this.dom, Pz), ou && this.dom.addEventListener("DOMCharacterDataModified", this.onCharData), this.active = !0);
  }
  stop() {
    this.active && (this.active = !1, this.observer.disconnect(), ou && this.dom.removeEventListener("DOMCharacterDataModified", this.onCharData));
  }
  // Throw away any pending changes
  clear() {
    this.processRecords(), this.queue.length = 0, this.selectionChanged = !1;
  }
  // Chrome Android, especially in combination with GBoard, not only
  // doesn't reliably fire regular key events, but also often
  // surrounds the effect of enter or backspace with a bunch of
  // composition events that, when interrupted, cause text duplication
  // or other kinds of corruption. This hack makes the editor back off
  // from handling DOM changes for a moment when such a key is
  // detected (via beforeinput or keydown), and then dispatches the
  // key event, throwing away the DOM changes if it gets handled.
  delayAndroidKey(e, t) {
    this.delayedAndroidKey || requestAnimationFrame(() => {
      let n = this.delayedAndroidKey;
      this.delayedAndroidKey = null;
      let r = this.view.state;
      Eo(this.view.contentDOM, n.key, n.keyCode) ? this.processRecords() : this.flush(), this.view.state == r && this.view.update([]);
    }), (!this.delayedAndroidKey || e == "Enter") && (this.delayedAndroidKey = { key: e, keyCode: t });
  }
  flushSoon() {
    this.delayedFlush < 0 && (this.delayedFlush = window.setTimeout(() => {
      this.delayedFlush = -1, this.flush();
    }, 20));
  }
  forceFlush() {
    this.delayedFlush >= 0 && (window.clearTimeout(this.delayedFlush), this.delayedFlush = -1, this.flush());
  }
  processRecords() {
    let e = this.queue;
    for (let s of this.observer.takeRecords())
      e.push(s);
    e.length && (this.queue = []);
    let t = -1, n = -1, r = !1;
    for (let s of e) {
      let o = this.readMutation(s);
      o && (o.typeOver && (r = !0), t == -1 ? { from: t, to: n } = o : (t = Math.min(o.from, t), n = Math.max(o.to, n)));
    }
    return { from: t, to: n, typeOver: r };
  }
  // Apply pending changes, if any
  flush(e = !0) {
    if (this.delayedFlush >= 0 || this.delayedAndroidKey)
      return;
    e && this.readSelectionRange();
    let { from: t, to: n, typeOver: r } = this.processRecords(), s = this.selectionChanged && vO(this.dom, this.selectionRange);
    if (t < 0 && !s)
      return;
    this.selectionChanged = !1;
    let o = this.view.state;
    this.onChange(t, n, r), this.view.state == o && this.view.update([]);
  }
  readMutation(e) {
    let t = this.view.docView.nearest(e.target);
    if (!t || t.ignoreMutation(e))
      return null;
    if (t.markDirty(e.type == "attributes"), e.type == "attributes" && (t.dirty |= 4), e.type == "childList") {
      let n = pS(t, e.previousSibling || e.target.previousSibling, -1), r = pS(t, e.nextSibling || e.target.nextSibling, 1);
      return {
        from: n ? t.posAfter(n) : t.posAtStart,
        to: r ? t.posBefore(r) : t.posAtEnd,
        typeOver: !1
      };
    } else return e.type == "characterData" ? { from: t.posAtStart, to: t.posAtEnd, typeOver: e.target.nodeValue == e.oldValue } : null;
  }
  destroy() {
    var e, t, n;
    this.stop(), (e = this.intersection) === null || e === void 0 || e.disconnect(), (t = this.gapIntersection) === null || t === void 0 || t.disconnect(), (n = this.resize) === null || n === void 0 || n.disconnect();
    for (let r of this.scrollTargets)
      r.removeEventListener("scroll", this.onScroll);
    window.removeEventListener("scroll", this.onScroll), window.removeEventListener("resize", this.onResize), window.removeEventListener("beforeprint", this.onPrint), this.dom.ownerDocument.removeEventListener("selectionchange", this.onSelectionChange), clearTimeout(this.parentCheck), clearTimeout(this.resizeTimeout);
  }
}
function pS(i, e, t) {
  for (; e; ) {
    let n = Ve.get(e);
    if (n && n.parent == i)
      return n;
    let r = e.parentNode;
    e = r != i.dom ? r : t > 0 ? e.nextSibling : e.previousSibling;
  }
  return null;
}
function Tz(i) {
  let e = null;
  function t(a) {
    a.preventDefault(), a.stopImmediatePropagation(), e = a.getTargetRanges()[0];
  }
  if (i.contentDOM.addEventListener("beforeinput", t, !0), document.execCommand("indent"), i.contentDOM.removeEventListener("beforeinput", t, !0), !e)
    return null;
  let n = e.startContainer, r = e.startOffset, s = e.endContainer, o = e.endOffset, l = i.docView.domAtPos(i.state.selection.main.anchor);
  return Fh(l.node, l.offset, s, o) && ([n, r, s, o] = [s, o, n, r]), { anchorNode: n, anchorOffset: r, focusNode: s, focusOffset: o };
}
function Cz(i, e, t, n) {
  let r, s, o = i.state.selection.main;
  if (e > -1) {
    let l = i.docView.domBoundsAround(e, t, 0);
    if (!l || i.state.readOnly)
      return;
    let { from: a, to: h } = l, c = i.docView.impreciseHead || i.docView.impreciseAnchor ? [] : Az(i), f = new NP(c, i.state);
    f.readRange(l.startDOM, l.endDOM);
    let u = o.from, d = null;
    (i.inputState.lastKeyCode === 8 && i.inputState.lastKeyTime > Date.now() - 100 || ne.android && f.text.length < h - a) && (u = o.to, d = "end");
    let O = Rz(i.state.doc.sliceString(a, h, Bn), f.text, u - a, d);
    O && (ne.chrome && i.inputState.lastKeyCode == 13 && O.toB == O.from + 2 && f.text.slice(O.from, O.toB) == Bn + Bn && O.toB--, r = {
      from: a + O.from,
      to: a + O.toA,
      insert: Pe.of(f.text.slice(O.from, O.toB).split(Bn))
    }), s = Ez(c, a);
  } else if (i.hasFocus || !i.state.facet(Ml)) {
    let l = i.observer.selectionRange, { impreciseHead: a, impreciseAnchor: h } = i.docView, c = a && a.node == l.focusNode && a.offset == l.focusOffset || !ks(i.contentDOM, l.focusNode) ? i.state.selection.main.head : i.docView.posFromDOM(l.focusNode, l.focusOffset), f = h && h.node == l.anchorNode && h.offset == l.anchorOffset || !ks(i.contentDOM, l.anchorNode) ? i.state.selection.main.anchor : i.docView.posFromDOM(l.anchorNode, l.anchorOffset);
    (c != o.head || f != o.anchor) && (s = ie.single(f, c));
  }
  if (!(!r && !s)) {
    if (!r && n && !o.empty && s && s.main.empty ? r = { from: o.from, to: o.to, insert: i.state.doc.slice(o.from, o.to) } : r && r.from >= o.from && r.to <= o.to && (r.from != o.from || r.to != o.to) && o.to - o.from - (r.to - r.from) <= 4 && (r = {
      from: o.from,
      to: o.to,
      insert: i.state.doc.slice(o.from, r.from).append(r.insert).append(i.state.doc.slice(r.to, o.to))
    }), r) {
      let l = i.state;
      if (ne.ios && i.inputState.flushIOSKey(i) || ne.android && (r.from == o.from && r.to == o.to && r.insert.length == 1 && r.insert.lines == 2 && Eo(i.contentDOM, "Enter", 13) || r.from == o.from - 1 && r.to == o.to && r.insert.length == 0 && Eo(i.contentDOM, "Backspace", 8) || r.from == o.from && r.to == o.to + 1 && r.insert.length == 0 && Eo(i.contentDOM, "Delete", 46)))
        return;
      let a = r.insert.toString();
      if (i.state.facet(LP).some((f) => f(i, r.from, r.to, a)))
        return;
      i.inputState.composing >= 0 && i.inputState.composing++;
      let h;
      if (r.from >= o.from && r.to <= o.to && r.to - r.from >= (o.to - o.from) / 3 && (!s || s.main.empty && s.main.from == r.from + r.insert.length) && i.inputState.composing < 0) {
        let f = o.from < r.from ? l.sliceDoc(o.from, r.from) : "", u = o.to > r.to ? l.sliceDoc(r.to, o.to) : "";
        h = l.replaceSelection(i.state.toText(f + r.insert.sliceString(0, void 0, i.state.lineBreak) + u));
      } else {
        let f = l.changes(r), u = s && !l.selection.main.eq(s.main) && s.main.to <= f.newLength ? s.main : void 0;
        if (l.selection.ranges.length > 1 && i.inputState.composing >= 0 && r.to <= o.to && r.to >= o.to - 10) {
          let d = i.state.sliceDoc(r.from, r.to), O = jP(i) || i.state.doc.lineAt(o.head), p = o.to - r.to, m = o.to - o.from;
          h = l.changeByRange((g) => {
            if (g.from == o.from && g.to == o.to)
              return { changes: f, range: u || g.map(f) };
            let S = g.to - p, x = S - d.length;
            if (g.to - g.from != m || i.state.sliceDoc(x, S) != d || // Unfortunately, there's no way to make multiple
            // changes in the same node work without aborting
            // composition, so cursors in the composition range are
            // ignored.
            O && g.to >= O.from && g.from <= O.to)
              return { range: g };
            let k = l.changes({ from: x, to: S, insert: r.insert }), w = g.to - o.to;
            return {
              changes: k,
              range: u ? ie.range(Math.max(0, u.anchor + w), Math.max(0, u.head + w)) : g.map(k)
            };
          });
        } else
          h = {
            changes: f,
            selection: u && l.selection.replaceRange(u)
          };
      }
      let c = "input.type";
      i.composing && (c += ".compose", i.inputState.compositionFirstChange && (c += ".start", i.inputState.compositionFirstChange = !1)), i.dispatch(h, { scrollIntoView: !0, userEvent: c });
    } else if (s && !s.main.eq(o)) {
      let l = !1, a = "select";
      i.inputState.lastSelectionTime > Date.now() - 50 && (i.inputState.lastSelectionOrigin == "select" && (l = !0), a = i.inputState.lastSelectionOrigin), i.dispatch({ selection: s, scrollIntoView: l, userEvent: a });
    }
  }
}
function Rz(i, e, t, n) {
  let r = Math.min(i.length, e.length), s = 0;
  for (; s < r && i.charCodeAt(s) == e.charCodeAt(s); )
    s++;
  if (s == r && i.length == e.length)
    return null;
  let o = i.length, l = e.length;
  for (; o > 0 && l > 0 && i.charCodeAt(o - 1) == e.charCodeAt(l - 1); )
    o--, l--;
  if (n == "end") {
    let a = Math.max(0, s - Math.min(o, l));
    t -= o + a - s;
  }
  if (o < s && i.length < e.length) {
    let a = t <= s && t >= o ? s - t : 0;
    s -= a, l = s + (l - o), o = s;
  } else if (l < s) {
    let a = t <= s && t >= l ? s - t : 0;
    s -= a, o = s + (o - l), l = s;
  }
  return { from: s, toA: o, toB: l };
}
function Az(i) {
  let e = [];
  if (i.root.activeElement != i.contentDOM)
    return e;
  let { anchorNode: t, anchorOffset: n, focusNode: r, focusOffset: s } = i.observer.selectionRange;
  return t && (e.push(new Uy(t, n)), (r != t || s != n) && e.push(new Uy(r, s))), e;
}
function Ez(i, e) {
  if (i.length == 0)
    return null;
  let t = i[0].pos, n = i.length == 2 ? i[1].pos : t;
  return t > -1 && n > -1 ? ie.single(t + e, n + e) : null;
}
class We {
  /**
  Construct a new view. You'll usually want to put `view.dom` into
  your document after creating a view, so that the user can see
  it.
  */
  constructor(e = {}) {
    this.plugins = [], this.pluginMap = /* @__PURE__ */ new Map(), this.editorAttrs = {}, this.contentAttrs = {}, this.bidiCache = [], this.destroyed = !1, this.updateState = 2, this.measureScheduled = -1, this.measureRequests = [], this.contentDOM = document.createElement("div"), this.scrollDOM = document.createElement("div"), this.scrollDOM.tabIndex = -1, this.scrollDOM.className = "cm-scroller", this.scrollDOM.appendChild(this.contentDOM), this.announceDOM = document.createElement("div"), this.announceDOM.style.cssText = "position: absolute; top: -10000px", this.announceDOM.setAttribute("aria-live", "polite"), this.dom = document.createElement("div"), this.dom.appendChild(this.announceDOM), this.dom.appendChild(this.scrollDOM), this._dispatch = e.dispatch || ((t) => this.update([t])), this.dispatch = this.dispatch.bind(this), this.root = e.root || P3(e.parent) || document, this.viewState = new fS(e.state || xe.create()), this.plugins = this.state.facet(mo).map((t) => new iu(t));
    for (let t of this.plugins)
      t.update(this);
    this.observer = new $z(this, (t, n, r) => {
      Cz(this, t, n, r);
    }, (t) => {
      this.inputState.runScrollHandlers(this, t), this.observer.intersecting && this.measure();
    }), this.inputState = new tz(this), this.docView = new Yy(this), this.mountStyles(), this.updateAttrs(), this.updateState = 0, this.requestMeasure(), e.parent && e.parent.appendChild(this.dom);
  }
  /**
  The current editor state.
  */
  get state() {
    return this.viewState.state;
  }
  /**
  To be able to display large documents without consuming too much
  memory or overloading the browser, CodeMirror only draws the
  code that is visible (plus a margin around it) to the DOM. This
  property tells you the extent of the current drawn viewport, in
  document positions.
  */
  get viewport() {
    return this.viewState.viewport;
  }
  /**
  When there are, for example, large collapsed ranges in the
  viewport, its size can be a lot bigger than the actual visible
  content. Thus, if you are doing something like styling the
  content in the viewport, it is preferable to only do so for
  these ranges, which are the subset of the viewport that is
  actually drawn.
  */
  get visibleRanges() {
    return this.viewState.visibleRanges;
  }
  /**
  Returns false when the editor is entirely scrolled out of view
  or otherwise hidden.
  */
  get inView() {
    return this.viewState.inView;
  }
  /**
  Indicates whether the user is currently composing text via
  [IME](https://en.wikipedia.org/wiki/Input_method), and at least
  one change has been made in the current composition.
  */
  get composing() {
    return this.inputState.composing > 0;
  }
  /**
  Indicates whether the user is currently in composing state. Note
  that on some platforms, like Android, this will be the case a
  lot, since just putting the cursor on a word starts a
  composition there.
  */
  get compositionStarted() {
    return this.inputState.composing >= 0;
  }
  dispatch(...e) {
    this._dispatch(e.length == 1 && e[0] instanceof Qt ? e[0] : this.state.update(...e));
  }
  /**
  Update the view for the given array of transactions. This will
  update the visible document and selection to match the state
  produced by the transactions, and notify view plugins of the
  change. You should usually call
  [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead, which uses this
  as a primitive.
  */
  update(e) {
    if (this.updateState != 0)
      throw new Error("Calls to EditorView.update are not allowed while an update is in progress");
    let t = !1, n, r = this.state;
    for (let o of e) {
      if (o.startState != r)
        throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");
      r = o.state;
    }
    if (this.destroyed) {
      this.viewState.state = r;
      return;
    }
    if (r.facet(xe.phrases) != this.state.facet(xe.phrases))
      return this.setState(r);
    n = new Ny(this, r, e);
    let s = this.viewState.scrollTarget;
    try {
      this.updateState = 2;
      for (let o of e) {
        if (s && (s = s.map(o.changes)), o.scrollIntoView) {
          let { main: l } = o.state.selection;
          s = new Yr(l.empty ? l : ie.cursor(l.head, l.head > l.anchor ? -1 : 1));
        }
        for (let l of o.effects)
          l.is(_O) ? s = new Yr(l.value) : l.is(BP) ? s = new Yr(l.value, "center") : l.is(Iy) && (s = l.value);
      }
      this.viewState.update(n, s), this.bidiCache = Kh.update(this.bidiCache, n.changes), n.empty || (this.updatePlugins(n), this.inputState.update(n)), t = this.docView.update(n), this.state.facet(go) != this.styleModules && this.mountStyles(), this.updateAttrs(), this.showAnnouncements(e), this.docView.updateSelection(t, e.some((o) => o.isUserEvent("select.pointer")));
    } finally {
      this.updateState = 0;
    }
    if (n.startState.facet(ya) != n.state.facet(ya) && (this.viewState.mustMeasureContent = !0), (t || s || this.viewState.mustEnforceCursorAssoc || this.viewState.mustMeasureContent) && this.requestMeasure(), !n.empty)
      for (let o of this.state.facet(qO))
        o(n);
  }
  /**
  Reset the view to the given state. (This will cause the entire
  document to be redrawn and all view plugins to be reinitialized,
  so you should probably only use it when the new state isn't
  derived from the old state. Otherwise, use
  [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead.)
  */
  setState(e) {
    if (this.updateState != 0)
      throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");
    if (this.destroyed) {
      this.viewState.state = e;
      return;
    }
    this.updateState = 2;
    let t = this.hasFocus;
    try {
      for (let n of this.plugins)
        n.destroy(this);
      this.viewState = new fS(e), this.plugins = e.facet(mo).map((n) => new iu(n)), this.pluginMap.clear();
      for (let n of this.plugins)
        n.update(this);
      this.docView = new Yy(this), this.inputState.ensureHandlers(this), this.mountStyles(), this.updateAttrs(), this.bidiCache = [];
    } finally {
      this.updateState = 0;
    }
    t && this.focus(), this.requestMeasure();
  }
  updatePlugins(e) {
    let t = e.startState.facet(mo), n = e.state.facet(mo);
    if (t != n) {
      let r = [];
      for (let s of n) {
        let o = t.indexOf(s);
        if (o < 0)
          r.push(new iu(s));
        else {
          let l = this.plugins[o];
          l.mustUpdate = e, r.push(l);
        }
      }
      for (let s of this.plugins)
        s.mustUpdate != e && s.destroy(this);
      this.plugins = r, this.pluginMap.clear(), this.inputState.ensureHandlers(this);
    } else
      for (let r of this.plugins)
        r.mustUpdate = e;
    for (let r = 0; r < this.plugins.length; r++)
      this.plugins[r].update(this);
  }
  /**
  @internal
  */
  measure(e = !0) {
    if (this.destroyed)
      return;
    this.measureScheduled > -1 && cancelAnimationFrame(this.measureScheduled), this.measureScheduled = 0, e && this.observer.flush();
    let t = null;
    try {
      for (let n = 0; ; n++) {
        this.updateState = 1;
        let r = this.viewport, s = this.viewState.measure(this);
        if (!s && !this.measureRequests.length && this.viewState.scrollTarget == null)
          break;
        if (n > 5) {
          console.warn(this.measureRequests.length ? "Measure loop restarted more than 5 times" : "Viewport failed to stabilize");
          break;
        }
        let o = [];
        s & 4 || ([this.measureRequests, o] = [o, this.measureRequests]);
        let l = o.map((f) => {
          try {
            return f.read(this);
          } catch (u) {
            return zn(this.state, u), mS;
          }
        }), a = new Ny(this, this.state), h = !1, c = !1;
        a.flags |= s, t ? t.flags |= s : t = a, this.updateState = 2, a.empty || (this.updatePlugins(a), this.inputState.update(a), this.updateAttrs(), h = this.docView.update(a));
        for (let f = 0; f < o.length; f++)
          if (l[f] != mS)
            try {
              let u = o[f];
              u.write && u.write(l[f], this);
            } catch (u) {
              zn(this.state, u);
            }
        if (this.viewState.scrollTarget && (this.docView.scrollIntoView(this.viewState.scrollTarget), this.viewState.scrollTarget = null, c = !0), h && this.docView.updateSelection(!0), this.viewport.from == r.from && this.viewport.to == r.to && !c && this.measureRequests.length == 0)
          break;
      }
    } finally {
      this.updateState = 0, this.measureScheduled = -1;
    }
    if (t && !t.empty)
      for (let n of this.state.facet(qO))
        n(t);
  }
  /**
  Get the CSS classes for the currently active editor themes.
  */
  get themeClasses() {
    return VO + " " + (this.state.facet(DO) ? n$ : i$) + " " + this.state.facet(ya);
  }
  updateAttrs() {
    let e = gS(this, DP, {
      class: "cm-editor" + (this.hasFocus ? " cm-focused " : " ") + this.themeClasses
    }), t = {
      spellcheck: "false",
      autocorrect: "off",
      autocapitalize: "off",
      translate: "no",
      contenteditable: this.state.facet(Ml) ? "true" : "false",
      class: "cm-content",
      style: `${ne.tabSize}: ${this.state.tabSize}`,
      role: "textbox",
      "aria-multiline": "true"
    };
    this.state.readOnly && (t["aria-readonly"] = "true"), gS(this, VP, t), this.observer.ignore(() => {
      EO(this.contentDOM, this.contentAttrs, t), EO(this.dom, this.editorAttrs, e);
    }), this.editorAttrs = e, this.contentAttrs = t;
  }
  showAnnouncements(e) {
    let t = !0;
    for (let n of e)
      for (let r of n.effects)
        if (r.is(We.announce)) {
          t && (this.announceDOM.textContent = ""), t = !1;
          let s = this.announceDOM.appendChild(document.createElement("div"));
          s.textContent = r.value;
        }
  }
  mountStyles() {
    this.styleModules = this.state.facet(go), mt.mount(this.root, this.styleModules.concat(Qz).reverse());
  }
  readMeasured() {
    if (this.updateState == 2)
      throw new Error("Reading the editor layout isn't allowed during an update");
    this.updateState == 0 && this.measureScheduled > -1 && this.measure(!1);
  }
  /**
  Schedule a layout measurement, optionally providing callbacks to
  do custom DOM measuring followed by a DOM write phase. Using
  this is preferable reading DOM layout directly from, for
  example, an event handler, because it'll make sure measuring and
  drawing done by other components is synchronized, avoiding
  unnecessary DOM layout computations.
  */
  requestMeasure(e) {
    if (this.measureScheduled < 0 && (this.measureScheduled = requestAnimationFrame(() => this.measure())), e) {
      if (e.key != null) {
        for (let t = 0; t < this.measureRequests.length; t++)
          if (this.measureRequests[t].key === e.key) {
            this.measureRequests[t] = e;
            return;
          }
      }
      this.measureRequests.push(e);
    }
  }
  /**
  Collect all values provided by the active plugins for a given
  field.
  */
  pluginField(e) {
    let t = [];
    for (let n of this.plugins)
      n.update(this).takeField(e, t);
    return t;
  }
  /**
  Get the value of a specific plugin, if present. Note that
  plugins that crash can be dropped from a view, so even when you
  know you registered a given plugin, it is recommended to check
  the return value of this method.
  */
  plugin(e) {
    let t = this.pluginMap.get(e);
    return (t === void 0 || t && t.spec != e) && this.pluginMap.set(e, t = this.plugins.find((n) => n.spec == e) || null), t && t.update(this).value;
  }
  /**
  The top position of the document, in screen coordinates. This
  may be negative when the editor is scrolled down. Points
  directly to the top of the first line, not above the padding.
  */
  get documentTop() {
    return this.contentDOM.getBoundingClientRect().top + this.viewState.paddingTop;
  }
  /**
  Reports the padding above and below the document.
  */
  get documentPadding() {
    return { top: this.viewState.paddingTop, bottom: this.viewState.paddingBottom };
  }
  /**
  Find the line or block widget at the given vertical position.
  
  By default, this position is interpreted as a screen position,
  meaning `docTop` is set to the DOM top position of the editor
  content (forcing a layout). You can pass a different `docTop`
  value—for example 0 to interpret `height` as a document-relative
  position, or a precomputed document top
  (`view.contentDOM.getBoundingClientRect().top`) to limit layout
  queries.
  
  *Deprecated: use `elementAtHeight` instead.*
  */
  blockAtHeight(e, t) {
    let n = lu(t, this);
    return this.elementAtHeight(e - n).moveY(n);
  }
  /**
  Find the text line or block widget at the given vertical
  position (which is interpreted as relative to the [top of the
  document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop)
  */
  elementAtHeight(e) {
    return this.readMeasured(), this.viewState.elementAtHeight(e);
  }
  /**
  Find information for the visual line (see
  [`visualLineAt`](https://codemirror.net/6/docs/ref/#view.EditorView.visualLineAt)) at the given
  vertical position. The resulting block info might hold another
  array of block info structs in its `type` field if this line
  consists of more than one block.
  
  Defaults to treating `height` as a screen position. See
  [`blockAtHeight`](https://codemirror.net/6/docs/ref/#view.EditorView.blockAtHeight) for the
  interpretation of the `docTop` parameter.
  
  *Deprecated: use `lineBlockAtHeight` instead.*
  */
  visualLineAtHeight(e, t) {
    let n = lu(t, this);
    return this.lineBlockAtHeight(e - n).moveY(n);
  }
  /**
  Find the line block (see
  [`lineBlockAt`](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) at the given
  height.
  */
  lineBlockAtHeight(e) {
    return this.readMeasured(), this.viewState.lineBlockAtHeight(e);
  }
  /**
  Iterate over the height information of the visual lines in the
  viewport. The heights of lines are reported relative to the
  given document top, which defaults to the screen position of the
  document (forcing a layout).
  
  *Deprecated: use `viewportLineBlocks` instead.*
  */
  viewportLines(e, t) {
    let n = lu(t, this);
    for (let r of this.viewportLineBlocks)
      e(r.moveY(n));
  }
  /**
  Get the extent and vertical position of all [line
  blocks](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) in the viewport. Positions
  are relative to the [top of the
  document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop);
  */
  get viewportLineBlocks() {
    return this.viewState.viewportLines;
  }
  /**
  Find the extent and height of the visual line (a range delimited
  on both sides by either non-[hidden](https://codemirror.net/6/docs/ref/#view.Decoration^range)
  line breaks, or the start/end of the document) at the given position.
  
  Vertical positions are computed relative to the `docTop`
  argument, which defaults to 0 for this method. You can pass
  `view.contentDOM.getBoundingClientRect().top` here to get screen
  coordinates.
  
  *Deprecated: use `lineBlockAt` instead.*
  */
  visualLineAt(e, t = 0) {
    return this.lineBlockAt(e).moveY(t + this.viewState.paddingTop);
  }
  /**
  Find the line block around the given document position. A line
  block is a range delimited on both sides by either a
  non-[hidden](https://codemirror.net/6/docs/ref/#view.Decoration^range) line breaks, or the
  start/end of the document. It will usually just hold a line of
  text, but may be broken into multiple textblocks by block
  widgets.
  */
  lineBlockAt(e) {
    return this.viewState.lineBlockAt(e);
  }
  /**
  The editor's total content height.
  */
  get contentHeight() {
    return this.viewState.contentHeight;
  }
  /**
  Move a cursor position by [grapheme
  cluster](https://codemirror.net/6/docs/ref/#text.findClusterBreak). `forward` determines whether
  the motion is away from the line start, or towards it. Motion in
  bidirectional text is in visual order, in the editor's [text
  direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection). When the start
  position was the last one on the line, the returned position
  will be across the line break. If there is no further line, the
  original position is returned.
  
  By default, this method moves over a single cluster. The
  optional `by` argument can be used to move across more. It will
  be called with the first cluster as argument, and should return
  a predicate that determines, for each subsequent cluster,
  whether it should also be moved over.
  */
  moveByChar(e, t, n) {
    return ru(this, e, eS(this, e, t, n));
  }
  /**
  Move a cursor position across the next group of either
  [letters](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) or non-letter
  non-whitespace characters.
  */
  moveByGroup(e, t) {
    return ru(this, e, eS(this, e, t, (n) => J3(this, e.head, n)));
  }
  /**
  Move to the next line boundary in the given direction. If
  `includeWrap` is true, line wrapping is on, and there is a
  further wrap point on the current line, the wrap point will be
  returned. Otherwise this function will return the start or end
  of the line.
  */
  moveToLineBoundary(e, t, n = !0) {
    return K3(this, e, t, n);
  }
  /**
  Move a cursor position vertically. When `distance` isn't given,
  it defaults to moving to the next line (including wrapped
  lines). Otherwise, `distance` should provide a positive distance
  in pixels.
  
  When `start` has a
  [`goalColumn`](https://codemirror.net/6/docs/ref/#state.SelectionRange.goalColumn), the vertical
  motion will use that as a target horizontal position. Otherwise,
  the cursor's own horizontal position is used. The returned
  cursor will have its goal column set to whichever column was
  used.
  */
  moveVertically(e, t, n) {
    return ru(this, e, ez(this, e, t, n));
  }
  // FIXME remove on next major version
  scrollPosIntoView(e) {
    this.dispatch({ effects: _O.of(ie.cursor(e)) });
  }
  /**
  Find the DOM parent node and offset (child offset if `node` is
  an element, character offset when it is a text node) at the
  given document position.
  
  Note that for positions that aren't currently in
  `visibleRanges`, the resulting DOM position isn't necessarily
  meaningful (it may just point before or after a placeholder
  element).
  */
  domAtPos(e) {
    return this.docView.domAtPos(e);
  }
  /**
  Find the document position at the given DOM node. Can be useful
  for associating positions with DOM events. Will raise an error
  when `node` isn't part of the editor content.
  */
  posAtDOM(e, t = 0) {
    return this.docView.posFromDOM(e, t);
  }
  posAtCoords(e, t = !0) {
    return this.readMeasured(), YP(this, e, t);
  }
  /**
  Get the screen coordinates at the given document position.
  `side` determines whether the coordinates are based on the
  element before (-1) or after (1) the position (if no element is
  available on the given side, the method will transparently use
  another strategy to get reasonable coordinates).
  */
  coordsAtPos(e, t = 1) {
    this.readMeasured();
    let n = this.docView.coordsAt(e, t);
    if (!n || n.left == n.right)
      return n;
    let r = this.state.doc.lineAt(e), s = this.bidiSpans(r), o = s[hs.find(s, e - r.from, -1, t)];
    return Tc(n, o.dir == zt.LTR == t > 0);
  }
  /**
  The default width of a character in the editor. May not
  accurately reflect the width of all characters (given variable
  width fonts or styling of invididual ranges).
  */
  get defaultCharacterWidth() {
    return this.viewState.heightOracle.charWidth;
  }
  /**
  The default height of a line in the editor. May not be accurate
  for all lines.
  */
  get defaultLineHeight() {
    return this.viewState.heightOracle.lineHeight;
  }
  /**
  The text direction
  ([`direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/direction)
  CSS property) of the editor.
  */
  get textDirection() {
    return this.viewState.heightOracle.direction;
  }
  /**
  Whether this editor [wraps lines](https://codemirror.net/6/docs/ref/#view.EditorView.lineWrapping)
  (as determined by the
  [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)
  CSS property of its content element).
  */
  get lineWrapping() {
    return this.viewState.heightOracle.lineWrapping;
  }
  /**
  Returns the bidirectional text structure of the given line
  (which should be in the current document) as an array of span
  objects. The order of these spans matches the [text
  direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection)—if that is
  left-to-right, the leftmost spans come first, otherwise the
  rightmost spans come first.
  */
  bidiSpans(e) {
    if (e.length > Mz)
      return zP(e.length);
    let t = this.textDirection;
    for (let r of this.bidiCache)
      if (r.from == e.from && r.dir == t)
        return r.order;
    let n = Z3(e.text, this.textDirection);
    return this.bidiCache.push(new Kh(e.from, e.to, t, n)), n;
  }
  /**
  Check whether the editor has focus.
  */
  get hasFocus() {
    var e;
    return (document.hasFocus() || ne.safari && ((e = this.inputState) === null || e === void 0 ? void 0 : e.lastContextMenu) > Date.now() - 3e4) && this.root.activeElement == this.contentDOM;
  }
  /**
  Put focus on the editor.
  */
  focus() {
    this.observer.ignore(() => {
      bP(this.contentDOM), this.docView.updateSelection();
    });
  }
  /**
  Clean up this editor view, removing its element from the
  document, unregistering event handlers, and notifying
  plugins. The view instance can no longer be used after
  calling this.
  */
  destroy() {
    for (let e of this.plugins)
      e.destroy(this);
    this.plugins = [], this.inputState.destroy(), this.dom.remove(), this.observer.destroy(), this.measureScheduled > -1 && cancelAnimationFrame(this.measureScheduled), this.destroyed = !0;
  }
  /**
  Returns an effect that can be
  [added](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) to a transaction to
  cause it to scroll the given position or range into view.
  */
  static scrollIntoView(e, t = {}) {
    return Iy.of(new Yr(typeof e == "number" ? ie.cursor(e) : e, t.y, t.x, t.yMargin, t.xMargin));
  }
  /**
  Facet that can be used to add DOM event handlers. The value
  should be an object mapping event names to handler functions. The
  first such function to return true will be assumed to have handled
  that event, and no other handlers or built-in behavior will be
  activated for it.
  These are registered on the [content
  element](https://codemirror.net/6/docs/ref/#view.EditorView.contentDOM), except for `scroll`
  handlers, which will be called any time the editor's [scroll
  element](https://codemirror.net/6/docs/ref/#view.EditorView.scrollDOM) or one of its parent nodes
  is scrolled.
  */
  static domEventHandlers(e) {
    return Qs.define(() => ({}), { eventHandlers: e });
  }
  /**
  Create a theme extension. The first argument can be a
  [`style-mod`](https://github.com/marijnh/style-mod#documentation)
  style spec providing the styles for the theme. These will be
  prefixed with a generated class for the style.
  
  Because the selectors will be prefixed with a scope class, rule
  that directly match the editor's [wrapper
  element](https://codemirror.net/6/docs/ref/#view.EditorView.dom)—to which the scope class will be
  added—need to be explicitly differentiated by adding an `&` to
  the selector for that element—for example
  `&.cm-focused`.
  
  When `dark` is set to true, the theme will be marked as dark,
  which will cause the `&dark` rules from [base
  themes](https://codemirror.net/6/docs/ref/#view.EditorView^baseTheme) to be used (as opposed to
  `&light` when a light theme is active).
  */
  static theme(e, t) {
    let n = mt.newName(), r = [ya.of(n), go.of(WO(`.${n}`, e))];
    return t && t.dark && r.push(DO.of(!0)), r;
  }
  /**
  Create an extension that adds styles to the base theme. Like
  with [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme), use `&` to indicate the
  place of the editor wrapper element when directly targeting
  that. You can also use `&dark` or `&light` instead to only
  target editors with a dark or light theme.
  */
  static baseTheme(e) {
    return lP.lowest(go.of(WO("." + VO, e, r$)));
  }
}
We.scrollTo = _O;
We.centerOn = BP;
We.styleModule = go;
We.inputHandler = LP;
We.exceptionSink = XP;
We.updateListener = qO;
We.editable = Ml;
We.mouseSelectionStyle = _P;
We.dragMovesSelection = qP;
We.clickAddsSelectionRange = MP;
We.decorations = fr;
We.darkTheme = DO;
We.contentAttributes = VP;
We.editorAttributes = DP;
We.lineWrapping = /* @__PURE__ */ We.contentAttributes.of({ class: "cm-lineWrapping" });
We.announce = /* @__PURE__ */ Ue.define();
const Mz = 4096;
function lu(i, e) {
  return (i ?? e.contentDOM.getBoundingClientRect().top) + e.viewState.paddingTop;
}
const mS = {};
class Kh {
  constructor(e, t, n, r) {
    this.from = e, this.to = t, this.dir = n, this.order = r;
  }
  static update(e, t) {
    if (t.empty)
      return e;
    let n = [], r = e.length ? e[e.length - 1].dir : zt.LTR;
    for (let s = Math.max(0, e.length - 10); s < e.length; s++) {
      let o = e[s];
      o.dir == r && !t.touchesRange(o.from, o.to) && n.push(new Kh(t.mapPos(o.from, 1), t.mapPos(o.to, -1), o.dir, o.order));
    }
    return n;
  }
}
function gS(i, e, t) {
  for (let n = i.state.facet(e), r = n.length - 1; r >= 0; r--) {
    let s = n[r], o = typeof s == "function" ? s(i) : s;
    o && AO(o, t);
  }
  return t;
}
const qz = !ne.ios, _z = {
  ".cm-line": {}
};
qz && (_z[".cm-line"].caretColor = "transparent !important");
var au;
const zO = /* @__PURE__ */ new Re();
class On {
  /**
  Construct a language object. You usually don't need to invoke
  this directly. But when you do, make sure you use
  [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet) to create
  the first argument.
  */
  constructor(e, t, n, r = []) {
    this.data = e, this.topNode = n, xe.prototype.hasOwnProperty("tree") || Object.defineProperty(xe.prototype, "tree", { get() {
      return Ol(this);
    } }), this.parser = t, this.extension = [
      $s.of(this),
      xe.languageData.of((s, o, l) => s.facet(yS(s, o, l)))
    ].concat(r);
  }
  /**
  Query whether this language is active at the given position.
  */
  isActiveAt(e, t, n = -1) {
    return yS(e, t, n) == this.data;
  }
  /**
  Find the document regions that were parsed using this language.
  The returned regions will _include_ any nested languages rooted
  in this language, when those exist.
  */
  findRegions(e) {
    let t = e.facet($s);
    if (t?.data == this.data)
      return [{ from: 0, to: e.doc.length }];
    if (!t || !t.allowsNesting)
      return [];
    let n = [], r = (s, o) => {
      if (s.prop(zO) == this.data) {
        n.push({ from: o, to: o + s.length });
        return;
      }
      let l = s.prop(Re.mounted);
      if (l) {
        if (l.tree.prop(zO) == this.data) {
          if (l.overlay)
            for (let a of l.overlay)
              n.push({ from: a.from + o, to: a.to + o });
          else
            n.push({ from: o, to: o + s.length });
          return;
        } else if (l.overlay) {
          let a = n.length;
          if (r(l.tree, l.overlay[0].from + o), n.length > a)
            return;
        }
      }
      for (let a = 0; a < s.children.length; a++) {
        let h = s.children[a];
        h instanceof pt && r(h, s.positions[a] + o);
      }
    };
    return r(Ol(e), 0), n;
  }
  /**
  Indicates whether this language allows nested languages. The
  default implementation returns true.
  */
  get allowsNesting() {
    return !0;
  }
}
On.setState = /* @__PURE__ */ Ue.define();
function yS(i, e, t) {
  let n = i.facet($s);
  if (!n)
    return null;
  let r = n.data;
  if (n.allowsNesting)
    for (let s = Ol(i).topNode; s; s = s.enter(e, t, !0, !1))
      r = s.type.prop(zO) || r;
  return r;
}
function Ol(i) {
  let e = i.field(On.state, !1);
  return e ? e.tree : pt.empty;
}
class Xz {
  constructor(e, t = e.length) {
    this.doc = e, this.length = t, this.cursorPos = 0, this.string = "", this.cursor = e.iter();
  }
  syncTo(e) {
    return this.string = this.cursor.next(e - this.cursorPos).value, this.cursorPos = e + this.string.length, this.cursorPos - this.string.length;
  }
  chunk(e) {
    return this.syncTo(e), this.string;
  }
  get lineChunks() {
    return !0;
  }
  read(e, t) {
    let n = this.cursorPos - this.string.length;
    return e < n || t >= this.cursorPos ? this.doc.sliceString(e, t) : this.string.slice(e - n, t - n);
  }
}
let to = null;
class Rm {
  /**
  @internal
  */
  constructor(e, t, n = [], r, s, o, l, a) {
    this.parser = e, this.state = t, this.fragments = n, this.tree = r, this.treeLen = s, this.viewport = o, this.skipped = l, this.scheduleOn = a, this.parse = null, this.tempSkipped = [];
  }
  startParse() {
    return this.parser.startParse(new Xz(this.state.doc), this.fragments);
  }
  /**
  @internal
  */
  work(e, t) {
    return t != null && t >= this.state.doc.length && (t = void 0), this.tree != pt.empty && this.isDone(t ?? this.state.doc.length) ? (this.takeTree(), !0) : this.withContext(() => {
      var n;
      if (typeof e == "number") {
        let r = Date.now() + e;
        e = () => Date.now() > r;
      }
      for (this.parse || (this.parse = this.startParse()), t != null && (this.parse.stoppedAt == null || this.parse.stoppedAt > t) && t < this.state.doc.length && this.parse.stopAt(t); ; ) {
        let r = this.parse.advance();
        if (r)
          if (this.fragments = this.withoutTempSkipped(mr.addTree(r, this.fragments, this.parse.stoppedAt != null)), this.treeLen = (n = this.parse.stoppedAt) !== null && n !== void 0 ? n : this.state.doc.length, this.tree = r, this.parse = null, this.treeLen < (t ?? this.state.doc.length))
            this.parse = this.startParse();
          else
            return !0;
        if (e())
          return !1;
      }
    });
  }
  /**
  @internal
  */
  takeTree() {
    let e, t;
    this.parse && (e = this.parse.parsedPos) >= this.treeLen && ((this.parse.stoppedAt == null || this.parse.stoppedAt > e) && this.parse.stopAt(e), this.withContext(() => {
      for (; !(t = this.parse.advance()); )
        ;
    }), this.treeLen = e, this.tree = t, this.fragments = this.withoutTempSkipped(mr.addTree(this.tree, this.fragments, !0)), this.parse = null);
  }
  withContext(e) {
    let t = to;
    to = this;
    try {
      return e();
    } finally {
      to = t;
    }
  }
  withoutTempSkipped(e) {
    for (let t; t = this.tempSkipped.pop(); )
      e = SS(e, t.from, t.to);
    return e;
  }
  /**
  @internal
  */
  changes(e, t) {
    let { fragments: n, tree: r, treeLen: s, viewport: o, skipped: l } = this;
    if (this.takeTree(), !e.empty) {
      let a = [];
      if (e.iterChangedRanges((h, c, f, u) => a.push({ fromA: h, toA: c, fromB: f, toB: u })), n = mr.applyChanges(n, a), r = pt.empty, s = 0, o = { from: e.mapPos(o.from, -1), to: e.mapPos(o.to, 1) }, this.skipped.length) {
        l = [];
        for (let h of this.skipped) {
          let c = e.mapPos(h.from, 1), f = e.mapPos(h.to, -1);
          c < f && l.push({ from: c, to: f });
        }
      }
    }
    return new Rm(this.parser, t, n, r, s, o, l, this.scheduleOn);
  }
  /**
  @internal
  */
  updateViewport(e) {
    if (this.viewport.from == e.from && this.viewport.to == e.to)
      return !1;
    this.viewport = e;
    let t = this.skipped.length;
    for (let n = 0; n < this.skipped.length; n++) {
      let { from: r, to: s } = this.skipped[n];
      r < e.to && s > e.from && (this.fragments = SS(this.fragments, r, s), this.skipped.splice(n--, 1));
    }
    return this.skipped.length >= t ? !1 : (this.reset(), !0);
  }
  /**
  @internal
  */
  reset() {
    this.parse && (this.takeTree(), this.parse = null);
  }
  /**
  Notify the parse scheduler that the given region was skipped
  because it wasn't in view, and the parse should be restarted
  when it comes into view.
  */
  skipUntilInView(e, t) {
    this.skipped.push({ from: e, to: t });
  }
  /**
  Returns a parser intended to be used as placeholder when
  asynchronously loading a nested parser. It'll skip its input and
  mark it as not-really-parsed, so that the next update will parse
  it again.
  
  When `until` is given, a reparse will be scheduled when that
  promise resolves.
  */
  static getSkippingParser(e) {
    return new class extends i3 {
      createParse(t, n, r) {
        let s = r[0].from, o = r[r.length - 1].to;
        return {
          parsedPos: s,
          advance() {
            let a = to;
            if (a) {
              for (let h of r)
                a.tempSkipped.push(h);
              e && (a.scheduleOn = a.scheduleOn ? Promise.all([a.scheduleOn, e]) : e);
            }
            return this.parsedPos = o, new pt(xi.none, [], [], o - s);
          },
          stoppedAt: null,
          stopAt() {
          }
        };
      }
    }();
  }
  /**
  @internal
  */
  isDone(e) {
    e = Math.min(e, this.state.doc.length);
    let t = this.fragments;
    return this.treeLen >= e && t.length && t[0].from == 0 && t[0].to >= e;
  }
  /**
  Get the context for the current parse, or `null` if no editor
  parse is in progress.
  */
  static get() {
    return to;
  }
}
function SS(i, e, t) {
  return mr.applyChanges(i, [{ fromA: e, toA: t, fromB: e, toB: t }]);
}
class Ps {
  constructor(e) {
    this.context = e, this.tree = e.tree;
  }
  apply(e) {
    if (!e.docChanged && this.tree == this.context.tree)
      return this;
    let t = this.context.changes(e.changes, e.state), n = this.context.treeLen == e.startState.doc.length ? void 0 : Math.max(e.changes.mapPos(this.context.treeLen), t.viewport.to);
    return t.work(20, n) || t.takeTree(), new Ps(t);
  }
  static init(e) {
    let t = Math.min(3e3, e.doc.length), n = new Rm(e.facet($s).parser, e, [], pt.empty, 0, { from: 0, to: t }, [], null);
    return n.work(20, t) || n.takeTree(), new Ps(n);
  }
}
On.state = /* @__PURE__ */ Ls.define({
  create: Ps.init,
  update(i, e) {
    for (let t of e.effects)
      if (t.is(On.setState))
        return t.value;
    return e.startState.facet($s) != e.state.facet($s) ? Ps.init(e.state) : i.apply(e);
  }
});
let s$ = (i) => {
  let e = setTimeout(
    () => i(),
    500
    /* MaxPause */
  );
  return () => clearTimeout(e);
};
typeof requestIdleCallback < "u" && (s$ = (i) => {
  let e = -1, t = setTimeout(
    () => {
      e = requestIdleCallback(i, {
        timeout: 400
        /* MinPause */
      });
    },
    100
    /* MinPause */
  );
  return () => e < 0 ? clearTimeout(t) : cancelIdleCallback(e);
});
const hu = typeof navigator < "u" && (!((au = navigator.scheduling) === null || au === void 0) && au.isInputPending) ? () => navigator.scheduling.isInputPending() : null, Lz = /* @__PURE__ */ Qs.fromClass(class {
  constructor(e) {
    this.view = e, this.working = null, this.workScheduled = 0, this.chunkEnd = -1, this.chunkBudget = -1, this.work = this.work.bind(this), this.scheduleWork();
  }
  update(e) {
    let t = this.view.state.field(On.state).context;
    (t.updateViewport(e.view.viewport) || this.view.viewport.to > t.treeLen) && this.scheduleWork(), e.docChanged && (this.view.hasFocus && (this.chunkBudget += 50), this.scheduleWork()), this.checkAsyncSchedule(t);
  }
  scheduleWork() {
    if (this.working)
      return;
    let { state: e } = this.view, t = e.field(On.state);
    (t.tree != t.context.tree || !t.context.isDone(e.doc.length)) && (this.working = s$(this.work));
  }
  work(e) {
    this.working = null;
    let t = Date.now();
    if (this.chunkEnd < t && (this.chunkEnd < 0 || this.view.hasFocus) && (this.chunkEnd = t + 3e4, this.chunkBudget = 3e3), this.chunkBudget <= 0)
      return;
    let { state: n, viewport: { to: r } } = this.view, s = n.field(On.state);
    if (s.tree == s.context.tree && s.context.isDone(
      r + 1e5
      /* MaxParseAhead */
    ))
      return;
    let o = Date.now() + Math.min(this.chunkBudget, 100, e && !hu ? Math.max(25, e.timeRemaining() - 5) : 1e9), l = s.context.treeLen < r && n.doc.length > r + 1e3, a = s.context.work(() => hu && hu() || Date.now() > o, r + (l ? 0 : 1e5));
    this.chunkBudget -= Date.now() - t, (a || this.chunkBudget <= 0) && (s.context.takeTree(), this.view.dispatch({ effects: On.setState.of(new Ps(s.context)) })), this.chunkBudget > 0 && !(a && !l) && this.scheduleWork(), this.checkAsyncSchedule(s.context);
  }
  checkAsyncSchedule(e) {
    e.scheduleOn && (this.workScheduled++, e.scheduleOn.then(() => this.scheduleWork()).catch((t) => zn(this.view.state, t)).then(() => this.workScheduled--), e.scheduleOn = null);
  }
  destroy() {
    this.working && this.working();
  }
  isWorking() {
    return !!(this.working || this.workScheduled > 0);
  }
}, {
  eventHandlers: { focus() {
    this.scheduleWork();
  } }
}), $s = /* @__PURE__ */ be.define({
  combine(i) {
    return i.length ? i[0] : null;
  },
  enables: [On.state, Lz]
});
let Bz = 0;
class Zi {
  /**
  @internal
  */
  constructor(e, t, n) {
    this.set = e, this.base = t, this.modified = n, this.id = Bz++;
  }
  /**
  Define a new tag. If `parent` is given, the tag is treated as a
  sub-tag of that parent, and [highlight
  styles](https://codemirror.net/6/docs/ref/#highlight.HighlightStyle) that don't mention this tag
  will try to fall back to the parent tag (or grandparent tag,
  etc).
  */
  static define(e) {
    if (e?.base)
      throw new Error("Can not derive from a modified tag");
    let t = new Zi([], null, []);
    if (t.set.push(t), e)
      for (let n of e.set)
        t.set.push(n);
    return t;
  }
  /**
  Define a tag _modifier_, which is a function that, given a tag,
  will return a tag that is a subtag of the original. Applying the
  same modifier to a twice tag will return the same value (`m1(t1)
  == m1(t1)`) and applying multiple modifiers will, regardless or
  order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).
  
  When multiple modifiers are applied to a given base tag, each
  smaller set of modifiers is registered as a parent, so that for
  example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,
  `m1(m3(t1)`, and so on.
  */
  static defineModifier() {
    let e = new Jh();
    return (t) => t.modified.indexOf(e) > -1 ? t : Jh.get(t.base || t, t.modified.concat(e).sort((n, r) => n.id - r.id));
  }
}
let Zz = 0;
class Jh {
  constructor() {
    this.instances = [], this.id = Zz++;
  }
  static get(e, t) {
    if (!t.length)
      return e;
    let n = t[0].instances.find((l) => l.base == e && Dz(t, l.modified));
    if (n)
      return n;
    let r = [], s = new Zi(r, e, t);
    for (let l of t)
      l.instances.push(s);
    let o = o$(t);
    for (let l of e.set)
      for (let a of o)
        r.push(Jh.get(l, a));
    return s;
  }
}
function Dz(i, e) {
  return i.length == e.length && i.every((t, n) => t == e[n]);
}
function o$(i) {
  let e = [i];
  for (let t = 0; t < i.length; t++)
    for (let n of o$(i.slice(0, t).concat(i.slice(t + 1))))
      e.push(n);
  return e;
}
const Vz = /* @__PURE__ */ new Re(), ec = /* @__PURE__ */ be.define({
  combine(i) {
    return i.length ? Ec.combinedMatch(i) : null;
  }
}), l$ = /* @__PURE__ */ be.define({
  combine(i) {
    return i.length ? i[0].match : null;
  }
});
function IO(i) {
  return i.facet(ec) || i.facet(l$);
}
class Ec {
  constructor(e, t) {
    this.map = /* @__PURE__ */ Object.create(null);
    let n;
    function r(o) {
      let l = mt.newName();
      return (n || (n = /* @__PURE__ */ Object.create(null)))["." + l] = o, l;
    }
    this.all = typeof t.all == "string" ? t.all : t.all ? r(t.all) : null;
    for (let o of e) {
      let l = (o.class || r(Object.assign({}, o, { tag: null }))) + (this.all ? " " + this.all : ""), a = o.tag;
      if (!Array.isArray(a))
        this.map[a.id] = l;
      else
        for (let h of a)
          this.map[h.id] = l;
    }
    this.module = n ? new mt(n) : null, this.scope = t.scope || null, this.match = this.match.bind(this);
    let s = [zz];
    this.module && s.push(We.styleModule.of(this.module)), this.extension = s.concat(t.themeType == null ? ec.of(this) : ec.computeN([We.darkTheme], (o) => o.facet(We.darkTheme) == (t.themeType == "dark") ? [this] : [])), this.fallback = s.concat(l$.of(this));
  }
  /**
  Returns the CSS class associated with the given tag, if any.
  This method is bound to the instance by the constructor.
  */
  match(e, t) {
    if (this.scope && t != this.scope)
      return null;
    for (let n of e.set) {
      let r = this.map[n.id];
      if (r !== void 0)
        return n != e && (this.map[e.id] = r), r;
    }
    return this.map[e.id] = this.all;
  }
  /**
  Combines an array of highlight styles into a single match
  function that returns all of the classes assigned by the styles
  for a given tag.
  */
  static combinedMatch(e) {
    if (e.length == 1)
      return e[0].match;
    let t = e.some((n) => n.scope) ? void 0 : /* @__PURE__ */ Object.create(null);
    return (n, r) => {
      let s = t && t[n.id];
      if (s !== void 0)
        return s;
      let o = null;
      for (let l of e) {
        let a = l.match(n, r);
        a && (o = o ? o + " " + a : a);
      }
      return t && (t[n.id] = o), o;
    };
  }
  /**
  Create a highlighter style that associates the given styles to
  the given tags. The spec must be objects that hold a style tag
  or array of tags in their `tag` property, and either a single
  `class` property providing a static CSS class (for highlighters
  like [`classHighlightStyle`](https://codemirror.net/6/docs/ref/#highlight.classHighlightStyle)
  that rely on external styling), or a
  [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style
  set of CSS properties (which define the styling for those tags).
  
  The CSS rules created for a highlighter will be emitted in the
  order of the spec's properties. That means that for elements that
  have multiple tags associated with them, styles defined further
  down in the list will have a higher CSS precedence than styles
  defined earlier.
  */
  static define(e, t) {
    return new Ec(e, t || {});
  }
  /**
  Returns the CSS classes (if any) that the highlight styles
  active in the given state would assign to the given a style
  [tag](https://codemirror.net/6/docs/ref/#highlight.Tag) and (optional) language
  [scope](https://codemirror.net/6/docs/ref/#highlight.HighlightStyle^define^options.scope).
  */
  static get(e, t, n) {
    let r = IO(e);
    return r && r(t, n || xi.none);
  }
}
class Wz {
  constructor(e) {
    this.markCache = /* @__PURE__ */ Object.create(null), this.tree = Ol(e.state), this.decorations = this.buildDeco(e, IO(e.state));
  }
  update(e) {
    let t = Ol(e.state), n = IO(e.state), r = n != e.startState.facet(ec);
    t.length < e.view.viewport.to && !r && t.type == this.tree.type ? this.decorations = this.decorations.map(e.changes) : (t != this.tree || e.viewportChanged || r) && (this.tree = t, this.decorations = this.buildDeco(e.view, n));
  }
  buildDeco(e, t) {
    if (!t || !this.tree.length)
      return Ke.none;
    let n = new cl();
    for (let { from: r, to: s } of e.visibleRanges)
      Nz(this.tree, r, s, t, (o, l, a) => {
        n.add(o, l, this.markCache[a] || (this.markCache[a] = Ke.mark({ class: a })));
      });
    return n.finish();
  }
}
const zz = /* @__PURE__ */ lP.high(/* @__PURE__ */ Qs.fromClass(Wz, {
  decorations: (i) => i.decorations
})), bS = [""];
class Iz {
  constructor(e, t, n) {
    this.at = e, this.style = t, this.span = n, this.class = "";
  }
  startSpan(e, t) {
    t != this.class && (this.flush(e), e > this.at && (this.at = e), this.class = t);
  }
  flush(e) {
    e > this.at && this.class && this.span(this.at, e, this.class);
  }
  highlightRange(e, t, n, r, s, o) {
    let { type: l, from: a, to: h } = e;
    if (a >= n || h <= t)
      return;
    bS[s] = l.name, l.isTop && (o = l);
    let c = r, f = l.prop(Vz), u = !1;
    for (; f; ) {
      if (!f.context || jz(f.context, bS, s)) {
        for (let O of f.tags) {
          let p = this.style(O, o);
          p && (c && (c += " "), c += p, f.mode == 1 ? r += (r ? " " : "") + p : f.mode == 0 && (u = !0));
        }
        break;
      }
      f = f.next;
    }
    if (this.startSpan(e.from, c), u)
      return;
    let d = e.tree && e.tree.prop(Re.mounted);
    if (d && d.overlay) {
      let O = e.node.enter(d.overlay[0].from + a, 1), p = e.firstChild();
      for (let m = 0, g = a; ; m++) {
        let S = m < d.overlay.length ? d.overlay[m] : null, x = S ? S.from + a : h, k = Math.max(t, g), w = Math.min(n, x);
        if (k < w && p)
          for (; e.from < w && (this.highlightRange(e, k, w, r, s + 1, o), this.startSpan(Math.min(n, e.to), c), !(e.to >= x || !e.nextSibling())); )
            ;
        if (!S || x > n)
          break;
        g = S.to + a, g > t && (this.highlightRange(O.cursor, Math.max(t, S.from + a), Math.min(n, g), r, s, d.tree.type), this.startSpan(g, c));
      }
      p && e.parent();
    } else if (e.firstChild()) {
      do
        if (!(e.to <= t)) {
          if (e.from >= n)
            break;
          this.highlightRange(e, t, n, r, s + 1, o), this.startSpan(Math.min(n, e.to), c);
        }
      while (e.nextSibling());
      e.parent();
    }
  }
}
function Nz(i, e, t, n, r) {
  let s = new Iz(e, n, r);
  s.highlightRange(i.cursor(), e, t, "", 0, i.type), s.flush(t);
}
function jz(i, e, t) {
  if (i.length > t - 1)
    return !1;
  for (let n = t - 1, r = i.length - 1; r >= 0; r--, n--) {
    let s = i[r];
    if (s && s != e[n])
      return !1;
  }
  return !0;
}
const Z = Zi.define, Sa = /* @__PURE__ */ Z(), Cn = /* @__PURE__ */ Z(), xS = /* @__PURE__ */ Z(Cn), wS = /* @__PURE__ */ Z(Cn), Rn = /* @__PURE__ */ Z(), ba = /* @__PURE__ */ Z(Rn), cu = /* @__PURE__ */ Z(Rn), Xi = /* @__PURE__ */ Z(), tr = /* @__PURE__ */ Z(Xi), Ai = /* @__PURE__ */ Z(), Ei = /* @__PURE__ */ Z(), NO = /* @__PURE__ */ Z(), io = /* @__PURE__ */ Z(NO), xa = /* @__PURE__ */ Z(), jt = {
  /**
  A comment.
  */
  comment: Sa,
  /**
  A line [comment](https://codemirror.net/6/docs/ref/#highlight.tags.comment).
  */
  lineComment: /* @__PURE__ */ Z(Sa),
  /**
  A block [comment](https://codemirror.net/6/docs/ref/#highlight.tags.comment).
  */
  blockComment: /* @__PURE__ */ Z(Sa),
  /**
  A documentation [comment](https://codemirror.net/6/docs/ref/#highlight.tags.comment).
  */
  docComment: /* @__PURE__ */ Z(Sa),
  /**
  Any kind of identifier.
  */
  name: Cn,
  /**
  The [name](https://codemirror.net/6/docs/ref/#highlight.tags.name) of a variable.
  */
  variableName: /* @__PURE__ */ Z(Cn),
  /**
  A type [name](https://codemirror.net/6/docs/ref/#highlight.tags.name).
  */
  typeName: xS,
  /**
  A tag name (subtag of [`typeName`](https://codemirror.net/6/docs/ref/#highlight.tags.typeName)).
  */
  tagName: /* @__PURE__ */ Z(xS),
  /**
  A property or field [name](https://codemirror.net/6/docs/ref/#highlight.tags.name).
  */
  propertyName: wS,
  /**
  An attribute name (subtag of [`propertyName`](https://codemirror.net/6/docs/ref/#highlight.tags.propertyName)).
  */
  attributeName: /* @__PURE__ */ Z(wS),
  /**
  The [name](https://codemirror.net/6/docs/ref/#highlight.tags.name) of a class.
  */
  className: /* @__PURE__ */ Z(Cn),
  /**
  A label [name](https://codemirror.net/6/docs/ref/#highlight.tags.name).
  */
  labelName: /* @__PURE__ */ Z(Cn),
  /**
  A namespace [name](https://codemirror.net/6/docs/ref/#highlight.tags.name).
  */
  namespace: /* @__PURE__ */ Z(Cn),
  /**
  The [name](https://codemirror.net/6/docs/ref/#highlight.tags.name) of a macro.
  */
  macroName: /* @__PURE__ */ Z(Cn),
  /**
  A literal value.
  */
  literal: Rn,
  /**
  A string [literal](https://codemirror.net/6/docs/ref/#highlight.tags.literal).
  */
  string: ba,
  /**
  A documentation [string](https://codemirror.net/6/docs/ref/#highlight.tags.string).
  */
  docString: /* @__PURE__ */ Z(ba),
  /**
  A character literal (subtag of [string](https://codemirror.net/6/docs/ref/#highlight.tags.string)).
  */
  character: /* @__PURE__ */ Z(ba),
  /**
  An attribute value (subtag of [string](https://codemirror.net/6/docs/ref/#highlight.tags.string)).
  */
  attributeValue: /* @__PURE__ */ Z(ba),
  /**
  A number [literal](https://codemirror.net/6/docs/ref/#highlight.tags.literal).
  */
  number: cu,
  /**
  An integer [number](https://codemirror.net/6/docs/ref/#highlight.tags.number) literal.
  */
  integer: /* @__PURE__ */ Z(cu),
  /**
  A floating-point [number](https://codemirror.net/6/docs/ref/#highlight.tags.number) literal.
  */
  float: /* @__PURE__ */ Z(cu),
  /**
  A boolean [literal](https://codemirror.net/6/docs/ref/#highlight.tags.literal).
  */
  bool: /* @__PURE__ */ Z(Rn),
  /**
  Regular expression [literal](https://codemirror.net/6/docs/ref/#highlight.tags.literal).
  */
  regexp: /* @__PURE__ */ Z(Rn),
  /**
  An escape [literal](https://codemirror.net/6/docs/ref/#highlight.tags.literal), for example a
  backslash escape in a string.
  */
  escape: /* @__PURE__ */ Z(Rn),
  /**
  A color [literal](https://codemirror.net/6/docs/ref/#highlight.tags.literal).
  */
  color: /* @__PURE__ */ Z(Rn),
  /**
  A URL [literal](https://codemirror.net/6/docs/ref/#highlight.tags.literal).
  */
  url: /* @__PURE__ */ Z(Rn),
  /**
  A language keyword.
  */
  keyword: Ai,
  /**
  The [keyword](https://codemirror.net/6/docs/ref/#highlight.tags.keyword) for the self or this
  object.
  */
  self: /* @__PURE__ */ Z(Ai),
  /**
  The [keyword](https://codemirror.net/6/docs/ref/#highlight.tags.keyword) for null.
  */
  null: /* @__PURE__ */ Z(Ai),
  /**
  A [keyword](https://codemirror.net/6/docs/ref/#highlight.tags.keyword) denoting some atomic value.
  */
  atom: /* @__PURE__ */ Z(Ai),
  /**
  A [keyword](https://codemirror.net/6/docs/ref/#highlight.tags.keyword) that represents a unit.
  */
  unit: /* @__PURE__ */ Z(Ai),
  /**
  A modifier [keyword](https://codemirror.net/6/docs/ref/#highlight.tags.keyword).
  */
  modifier: /* @__PURE__ */ Z(Ai),
  /**
  A [keyword](https://codemirror.net/6/docs/ref/#highlight.tags.keyword) that acts as an operator.
  */
  operatorKeyword: /* @__PURE__ */ Z(Ai),
  /**
  A control-flow related [keyword](https://codemirror.net/6/docs/ref/#highlight.tags.keyword).
  */
  controlKeyword: /* @__PURE__ */ Z(Ai),
  /**
  A [keyword](https://codemirror.net/6/docs/ref/#highlight.tags.keyword) that defines something.
  */
  definitionKeyword: /* @__PURE__ */ Z(Ai),
  /**
  A [keyword](https://codemirror.net/6/docs/ref/#highlight.tags.keyword) related to defining or
  interfacing with modules.
  */
  moduleKeyword: /* @__PURE__ */ Z(Ai),
  /**
  An operator.
  */
  operator: Ei,
  /**
  An [operator](https://codemirror.net/6/docs/ref/#highlight.tags.operator) that defines something.
  */
  derefOperator: /* @__PURE__ */ Z(Ei),
  /**
  Arithmetic-related [operator](https://codemirror.net/6/docs/ref/#highlight.tags.operator).
  */
  arithmeticOperator: /* @__PURE__ */ Z(Ei),
  /**
  Logical [operator](https://codemirror.net/6/docs/ref/#highlight.tags.operator).
  */
  logicOperator: /* @__PURE__ */ Z(Ei),
  /**
  Bit [operator](https://codemirror.net/6/docs/ref/#highlight.tags.operator).
  */
  bitwiseOperator: /* @__PURE__ */ Z(Ei),
  /**
  Comparison [operator](https://codemirror.net/6/docs/ref/#highlight.tags.operator).
  */
  compareOperator: /* @__PURE__ */ Z(Ei),
  /**
  [Operator](https://codemirror.net/6/docs/ref/#highlight.tags.operator) that updates its operand.
  */
  updateOperator: /* @__PURE__ */ Z(Ei),
  /**
  [Operator](https://codemirror.net/6/docs/ref/#highlight.tags.operator) that defines something.
  */
  definitionOperator: /* @__PURE__ */ Z(Ei),
  /**
  Type-related [operator](https://codemirror.net/6/docs/ref/#highlight.tags.operator).
  */
  typeOperator: /* @__PURE__ */ Z(Ei),
  /**
  Control-flow [operator](https://codemirror.net/6/docs/ref/#highlight.tags.operator).
  */
  controlOperator: /* @__PURE__ */ Z(Ei),
  /**
  Program or markup punctuation.
  */
  punctuation: NO,
  /**
  [Punctuation](https://codemirror.net/6/docs/ref/#highlight.tags.punctuation) that separates
  things.
  */
  separator: /* @__PURE__ */ Z(NO),
  /**
  Bracket-style [punctuation](https://codemirror.net/6/docs/ref/#highlight.tags.punctuation).
  */
  bracket: io,
  /**
  Angle [brackets](https://codemirror.net/6/docs/ref/#highlight.tags.bracket) (usually `<` and `>`
  tokens).
  */
  angleBracket: /* @__PURE__ */ Z(io),
  /**
  Square [brackets](https://codemirror.net/6/docs/ref/#highlight.tags.bracket) (usually `[` and `]`
  tokens).
  */
  squareBracket: /* @__PURE__ */ Z(io),
  /**
  Parentheses (usually `(` and `)` tokens). Subtag of
  [bracket](https://codemirror.net/6/docs/ref/#highlight.tags.bracket).
  */
  paren: /* @__PURE__ */ Z(io),
  /**
  Braces (usually `{` and `}` tokens). Subtag of
  [bracket](https://codemirror.net/6/docs/ref/#highlight.tags.bracket).
  */
  brace: /* @__PURE__ */ Z(io),
  /**
  Content, for example plain text in XML or markup documents.
  */
  content: Xi,
  /**
  [Content](https://codemirror.net/6/docs/ref/#highlight.tags.content) that represents a heading.
  */
  heading: tr,
  /**
  A level 1 [heading](https://codemirror.net/6/docs/ref/#highlight.tags.heading).
  */
  heading1: /* @__PURE__ */ Z(tr),
  /**
  A level 2 [heading](https://codemirror.net/6/docs/ref/#highlight.tags.heading).
  */
  heading2: /* @__PURE__ */ Z(tr),
  /**
  A level 3 [heading](https://codemirror.net/6/docs/ref/#highlight.tags.heading).
  */
  heading3: /* @__PURE__ */ Z(tr),
  /**
  A level 4 [heading](https://codemirror.net/6/docs/ref/#highlight.tags.heading).
  */
  heading4: /* @__PURE__ */ Z(tr),
  /**
  A level 5 [heading](https://codemirror.net/6/docs/ref/#highlight.tags.heading).
  */
  heading5: /* @__PURE__ */ Z(tr),
  /**
  A level 6 [heading](https://codemirror.net/6/docs/ref/#highlight.tags.heading).
  */
  heading6: /* @__PURE__ */ Z(tr),
  /**
  A prose separator (such as a horizontal rule).
  */
  contentSeparator: /* @__PURE__ */ Z(Xi),
  /**
  [Content](https://codemirror.net/6/docs/ref/#highlight.tags.content) that represents a list.
  */
  list: /* @__PURE__ */ Z(Xi),
  /**
  [Content](https://codemirror.net/6/docs/ref/#highlight.tags.content) that represents a quote.
  */
  quote: /* @__PURE__ */ Z(Xi),
  /**
  [Content](https://codemirror.net/6/docs/ref/#highlight.tags.content) that is emphasized.
  */
  emphasis: /* @__PURE__ */ Z(Xi),
  /**
  [Content](https://codemirror.net/6/docs/ref/#highlight.tags.content) that is styled strong.
  */
  strong: /* @__PURE__ */ Z(Xi),
  /**
  [Content](https://codemirror.net/6/docs/ref/#highlight.tags.content) that is part of a link.
  */
  link: /* @__PURE__ */ Z(Xi),
  /**
  [Content](https://codemirror.net/6/docs/ref/#highlight.tags.content) that is styled as code or
  monospace.
  */
  monospace: /* @__PURE__ */ Z(Xi),
  /**
  [Content](https://codemirror.net/6/docs/ref/#highlight.tags.content) that has a strike-through
  style.
  */
  strikethrough: /* @__PURE__ */ Z(Xi),
  /**
  Inserted text in a change-tracking format.
  */
  inserted: /* @__PURE__ */ Z(),
  /**
  Deleted text.
  */
  deleted: /* @__PURE__ */ Z(),
  /**
  Changed text.
  */
  changed: /* @__PURE__ */ Z(),
  /**
  An invalid or unsyntactic element.
  */
  invalid: /* @__PURE__ */ Z(),
  /**
  Metadata or meta-instruction.
  */
  meta: xa,
  /**
  [Metadata](https://codemirror.net/6/docs/ref/#highlight.tags.meta) that applies to the entire
  document.
  */
  documentMeta: /* @__PURE__ */ Z(xa),
  /**
  [Metadata](https://codemirror.net/6/docs/ref/#highlight.tags.meta) that annotates or adds
  attributes to a given syntactic element.
  */
  annotation: /* @__PURE__ */ Z(xa),
  /**
  Processing instruction or preprocessor directive. Subtag of
  [meta](https://codemirror.net/6/docs/ref/#highlight.tags.meta).
  */
  processingInstruction: /* @__PURE__ */ Z(xa),
  /**
  [Modifier](https://codemirror.net/6/docs/ref/#highlight.Tag^defineModifier) that indicates that a
  given element is being defined. Expected to be used with the
  various [name](https://codemirror.net/6/docs/ref/#highlight.tags.name) tags.
  */
  definition: /* @__PURE__ */ Zi.defineModifier(),
  /**
  [Modifier](https://codemirror.net/6/docs/ref/#highlight.Tag^defineModifier) that indicates that
  something is constant. Mostly expected to be used with
  [variable names](https://codemirror.net/6/docs/ref/#highlight.tags.variableName).
  */
  constant: /* @__PURE__ */ Zi.defineModifier(),
  /**
  [Modifier](https://codemirror.net/6/docs/ref/#highlight.Tag^defineModifier) used to indicate that
  a [variable](https://codemirror.net/6/docs/ref/#highlight.tags.variableName) or [property
  name](https://codemirror.net/6/docs/ref/#highlight.tags.propertyName) is being called or defined
  as a function.
  */
  function: /* @__PURE__ */ Zi.defineModifier(),
  /**
  [Modifier](https://codemirror.net/6/docs/ref/#highlight.Tag^defineModifier) that can be applied to
  [names](https://codemirror.net/6/docs/ref/#highlight.tags.name) to indicate that they belong to
  the language's standard environment.
  */
  standard: /* @__PURE__ */ Zi.defineModifier(),
  /**
  [Modifier](https://codemirror.net/6/docs/ref/#highlight.Tag^defineModifier) that indicates a given
  [names](https://codemirror.net/6/docs/ref/#highlight.tags.name) is local to some scope.
  */
  local: /* @__PURE__ */ Zi.defineModifier(),
  /**
  A generic variant [modifier](https://codemirror.net/6/docs/ref/#highlight.Tag^defineModifier) that
  can be used to tag language-specific alternative variants of
  some common tag. It is recommended for themes to define special
  forms of at least the [string](https://codemirror.net/6/docs/ref/#highlight.tags.string) and
  [variable name](https://codemirror.net/6/docs/ref/#highlight.tags.variableName) tags, since those
  come up a lot.
  */
  special: /* @__PURE__ */ Zi.defineModifier()
};
function Uz() {
  const i = W.theme(
    {
      "&": {
        backgroundColor: "#171717",
        // Tailwind bg-neutral-900
        //color: "#f4f4f5",           // Tailwind text-neutral-100
        height: "100%"
      },
      ".cm-content": {
        caretColor: "#f4f4f5"
      },
      ".cm-cursor, .cm-dropCursor": {
        borderLeftColor: "#f4f4f5"
      },
      "&.cm-focused .cm-selectionBackground, ::selection": {
        backgroundColor: "#3f3f46"
        // Tailwind bg-neutral-800
      },
      ".cm-gutters": {
        backgroundColor: "#171717",
        color: "#a3a3a3",
        // Tailwind text-neutral-400
        border: "none"
      }
    },
    { dark: !0 }
  ), e = Ec.define([
    { tag: jt.keyword, color: "#22d3ee" },
    // cyan-400
    { tag: [jt.name, jt.deleted, jt.character, jt.propertyName], color: "#f87171" },
    // red-400
    { tag: [jt.variableName], color: "#e4e4e7" },
    // zinc-200
    { tag: [jt.string, jt.meta], color: "#86efac" },
    // green-300
    { tag: [jt.function(jt.variableName)], color: "#c4b5fd" },
    // purple-300
    { tag: [jt.number], color: "#facc15" },
    // yellow-400
    { tag: [jt.comment], color: "#71717a", fontStyle: "italic" }
    // zinc-500
  ]);
  return [i, Ok(e)];
}
function a$(i, e) {
  return function() {
    return i.apply(e, arguments);
  };
}
const { toString: Yz } = Object.prototype, { getPrototypeOf: Am } = Object, { iterator: Mc, toStringTag: h$ } = Symbol, qc = /* @__PURE__ */ ((i) => (e) => {
  const t = Yz.call(e);
  return i[t] || (i[t] = t.slice(8, -1).toLowerCase());
})(/* @__PURE__ */ Object.create(null)), Pi = (i) => (i = i.toLowerCase(), (e) => qc(e) === i), _c = (i) => (e) => typeof e === i, { isArray: Bs } = Array, pl = _c("undefined");
function Gz(i) {
  return i !== null && !pl(i) && i.constructor !== null && !pl(i.constructor) && Et(i.constructor.isBuffer) && i.constructor.isBuffer(i);
}
const c$ = Pi("ArrayBuffer");
function Fz(i) {
  let e;
  return typeof ArrayBuffer < "u" && ArrayBuffer.isView ? e = ArrayBuffer.isView(i) : e = i && i.buffer && c$(i.buffer), e;
}
const Hz = _c("string"), Et = _c("function"), f$ = _c("number"), Xc = (i) => i !== null && typeof i == "object", Kz = (i) => i === !0 || i === !1, nh = (i) => {
  if (qc(i) !== "object")
    return !1;
  const e = Am(i);
  return (e === null || e === Object.prototype || Object.getPrototypeOf(e) === null) && !(h$ in i) && !(Mc in i);
}, Jz = Pi("Date"), eI = Pi("File"), tI = Pi("Blob"), iI = Pi("FileList"), nI = (i) => Xc(i) && Et(i.pipe), rI = (i) => {
  let e;
  return i && (typeof FormData == "function" && i instanceof FormData || Et(i.append) && ((e = qc(i)) === "formdata" || // detect form-data instance
  e === "object" && Et(i.toString) && i.toString() === "[object FormData]"));
}, sI = Pi("URLSearchParams"), [oI, lI, aI, hI] = ["ReadableStream", "Request", "Response", "Headers"].map(Pi), cI = (i) => i.trim ? i.trim() : i.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
function ql(i, e, { allOwnKeys: t = !1 } = {}) {
  if (i === null || typeof i > "u")
    return;
  let n, r;
  if (typeof i != "object" && (i = [i]), Bs(i))
    for (n = 0, r = i.length; n < r; n++)
      e.call(null, i[n], n, i);
  else {
    const s = t ? Object.getOwnPropertyNames(i) : Object.keys(i), o = s.length;
    let l;
    for (n = 0; n < o; n++)
      l = s[n], e.call(null, i[l], l, i);
  }
}
function u$(i, e) {
  e = e.toLowerCase();
  const t = Object.keys(i);
  let n = t.length, r;
  for (; n-- > 0; )
    if (r = t[n], e === r.toLowerCase())
      return r;
  return null;
}
const ur = typeof globalThis < "u" ? globalThis : typeof self < "u" ? self : typeof window < "u" ? window : global, d$ = (i) => !pl(i) && i !== ur;
function jO() {
  const { caseless: i } = d$(this) && this || {}, e = {}, t = (n, r) => {
    const s = i && u$(e, r) || r;
    nh(e[s]) && nh(n) ? e[s] = jO(e[s], n) : nh(n) ? e[s] = jO({}, n) : Bs(n) ? e[s] = n.slice() : e[s] = n;
  };
  for (let n = 0, r = arguments.length; n < r; n++)
    arguments[n] && ql(arguments[n], t);
  return e;
}
const fI = (i, e, t, { allOwnKeys: n } = {}) => (ql(e, (r, s) => {
  t && Et(r) ? i[s] = a$(r, t) : i[s] = r;
}, { allOwnKeys: n }), i), uI = (i) => (i.charCodeAt(0) === 65279 && (i = i.slice(1)), i), dI = (i, e, t, n) => {
  i.prototype = Object.create(e.prototype, n), i.prototype.constructor = i, Object.defineProperty(i, "super", {
    value: e.prototype
  }), t && Object.assign(i.prototype, t);
}, OI = (i, e, t, n) => {
  let r, s, o;
  const l = {};
  if (e = e || {}, i == null) return e;
  do {
    for (r = Object.getOwnPropertyNames(i), s = r.length; s-- > 0; )
      o = r[s], (!n || n(o, i, e)) && !l[o] && (e[o] = i[o], l[o] = !0);
    i = t !== !1 && Am(i);
  } while (i && (!t || t(i, e)) && i !== Object.prototype);
  return e;
}, pI = (i, e, t) => {
  i = String(i), (t === void 0 || t > i.length) && (t = i.length), t -= e.length;
  const n = i.indexOf(e, t);
  return n !== -1 && n === t;
}, mI = (i) => {
  if (!i) return null;
  if (Bs(i)) return i;
  let e = i.length;
  if (!f$(e)) return null;
  const t = new Array(e);
  for (; e-- > 0; )
    t[e] = i[e];
  return t;
}, gI = /* @__PURE__ */ ((i) => (e) => i && e instanceof i)(typeof Uint8Array < "u" && Am(Uint8Array)), yI = (i, e) => {
  const n = (i && i[Mc]).call(i);
  let r;
  for (; (r = n.next()) && !r.done; ) {
    const s = r.value;
    e.call(i, s[0], s[1]);
  }
}, SI = (i, e) => {
  let t;
  const n = [];
  for (; (t = i.exec(e)) !== null; )
    n.push(t);
  return n;
}, bI = Pi("HTMLFormElement"), xI = (i) => i.toLowerCase().replace(
  /[-_\s]([a-z\d])(\w*)/g,
  function(t, n, r) {
    return n.toUpperCase() + r;
  }
), kS = (({ hasOwnProperty: i }) => (e, t) => i.call(e, t))(Object.prototype), wI = Pi("RegExp"), O$ = (i, e) => {
  const t = Object.getOwnPropertyDescriptors(i), n = {};
  ql(t, (r, s) => {
    let o;
    (o = e(r, s, i)) !== !1 && (n[s] = o || r);
  }), Object.defineProperties(i, n);
}, kI = (i) => {
  O$(i, (e, t) => {
    if (Et(i) && ["arguments", "caller", "callee"].indexOf(t) !== -1)
      return !1;
    const n = i[t];
    if (Et(n)) {
      if (e.enumerable = !1, "writable" in e) {
        e.writable = !1;
        return;
      }
      e.set || (e.set = () => {
        throw Error("Can not rewrite read-only method '" + t + "'");
      });
    }
  });
}, vI = (i, e) => {
  const t = {}, n = (r) => {
    r.forEach((s) => {
      t[s] = !0;
    });
  };
  return Bs(i) ? n(i) : n(String(i).split(e)), t;
}, QI = () => {
}, PI = (i, e) => i != null && Number.isFinite(i = +i) ? i : e;
function $I(i) {
  return !!(i && Et(i.append) && i[h$] === "FormData" && i[Mc]);
}
const TI = (i) => {
  const e = new Array(10), t = (n, r) => {
    if (Xc(n)) {
      if (e.indexOf(n) >= 0)
        return;
      if (!("toJSON" in n)) {
        e[r] = n;
        const s = Bs(n) ? [] : {};
        return ql(n, (o, l) => {
          const a = t(o, r + 1);
          !pl(a) && (s[l] = a);
        }), e[r] = void 0, s;
      }
    }
    return n;
  };
  return t(i, 0);
}, CI = Pi("AsyncFunction"), RI = (i) => i && (Xc(i) || Et(i)) && Et(i.then) && Et(i.catch), p$ = ((i, e) => i ? setImmediate : e ? ((t, n) => (ur.addEventListener("message", ({ source: r, data: s }) => {
  r === ur && s === t && n.length && n.shift()();
}, !1), (r) => {
  n.push(r), ur.postMessage(t, "*");
}))(`axios@${Math.random()}`, []) : (t) => setTimeout(t))(
  typeof setImmediate == "function",
  Et(ur.postMessage)
), AI = typeof queueMicrotask < "u" ? queueMicrotask.bind(ur) : typeof process < "u" && process.nextTick || p$, EI = (i) => i != null && Et(i[Mc]), P = {
  isArray: Bs,
  isArrayBuffer: c$,
  isBuffer: Gz,
  isFormData: rI,
  isArrayBufferView: Fz,
  isString: Hz,
  isNumber: f$,
  isBoolean: Kz,
  isObject: Xc,
  isPlainObject: nh,
  isReadableStream: oI,
  isRequest: lI,
  isResponse: aI,
  isHeaders: hI,
  isUndefined: pl,
  isDate: Jz,
  isFile: eI,
  isBlob: tI,
  isRegExp: wI,
  isFunction: Et,
  isStream: nI,
  isURLSearchParams: sI,
  isTypedArray: gI,
  isFileList: iI,
  forEach: ql,
  merge: jO,
  extend: fI,
  trim: cI,
  stripBOM: uI,
  inherits: dI,
  toFlatObject: OI,
  kindOf: qc,
  kindOfTest: Pi,
  endsWith: pI,
  toArray: mI,
  forEachEntry: yI,
  matchAll: SI,
  isHTMLForm: bI,
  hasOwnProperty: kS,
  hasOwnProp: kS,
  // an alias to avoid ESLint no-prototype-builtins detection
  reduceDescriptors: O$,
  freezeMethods: kI,
  toObjectSet: vI,
  toCamelCase: xI,
  noop: QI,
  toFiniteNumber: PI,
  findKey: u$,
  global: ur,
  isContextDefined: d$,
  isSpecCompliantForm: $I,
  toJSONObject: TI,
  isAsyncFn: CI,
  isThenable: RI,
  setImmediate: p$,
  asap: AI,
  isIterable: EI
};
function oe(i, e, t, n, r) {
  Error.call(this), Error.captureStackTrace ? Error.captureStackTrace(this, this.constructor) : this.stack = new Error().stack, this.message = i, this.name = "AxiosError", e && (this.code = e), t && (this.config = t), n && (this.request = n), r && (this.response = r, this.status = r.status ? r.status : null);
}
P.inherits(oe, Error, {
  toJSON: function() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: P.toJSONObject(this.config),
      code: this.code,
      status: this.status
    };
  }
});
const m$ = oe.prototype, g$ = {};
[
  "ERR_BAD_OPTION_VALUE",
  "ERR_BAD_OPTION",
  "ECONNABORTED",
  "ETIMEDOUT",
  "ERR_NETWORK",
  "ERR_FR_TOO_MANY_REDIRECTS",
  "ERR_DEPRECATED",
  "ERR_BAD_RESPONSE",
  "ERR_BAD_REQUEST",
  "ERR_CANCELED",
  "ERR_NOT_SUPPORT",
  "ERR_INVALID_URL"
  // eslint-disable-next-line func-names
].forEach((i) => {
  g$[i] = { value: i };
});
Object.defineProperties(oe, g$);
Object.defineProperty(m$, "isAxiosError", { value: !0 });
oe.from = (i, e, t, n, r, s) => {
  const o = Object.create(m$);
  return P.toFlatObject(i, o, function(a) {
    return a !== Error.prototype;
  }, (l) => l !== "isAxiosError"), oe.call(o, i.message, e, t, n, r), o.cause = i, o.name = i.name, s && Object.assign(o, s), o;
};
const MI = null;
function UO(i) {
  return P.isPlainObject(i) || P.isArray(i);
}
function y$(i) {
  return P.endsWith(i, "[]") ? i.slice(0, -2) : i;
}
function vS(i, e, t) {
  return i ? i.concat(e).map(function(r, s) {
    return r = y$(r), !t && s ? "[" + r + "]" : r;
  }).join(t ? "." : "") : e;
}
function qI(i) {
  return P.isArray(i) && !i.some(UO);
}
const _I = P.toFlatObject(P, {}, null, function(e) {
  return /^is[A-Z]/.test(e);
});
function Lc(i, e, t) {
  if (!P.isObject(i))
    throw new TypeError("target must be an object");
  e = e || new FormData(), t = P.toFlatObject(t, {
    metaTokens: !0,
    dots: !1,
    indexes: !1
  }, !1, function(p, m) {
    return !P.isUndefined(m[p]);
  });
  const n = t.metaTokens, r = t.visitor || c, s = t.dots, o = t.indexes, a = (t.Blob || typeof Blob < "u" && Blob) && P.isSpecCompliantForm(e);
  if (!P.isFunction(r))
    throw new TypeError("visitor must be a function");
  function h(O) {
    if (O === null) return "";
    if (P.isDate(O))
      return O.toISOString();
    if (!a && P.isBlob(O))
      throw new oe("Blob is not supported. Use a Buffer instead.");
    return P.isArrayBuffer(O) || P.isTypedArray(O) ? a && typeof Blob == "function" ? new Blob([O]) : Buffer.from(O) : O;
  }
  function c(O, p, m) {
    let g = O;
    if (O && !m && typeof O == "object") {
      if (P.endsWith(p, "{}"))
        p = n ? p : p.slice(0, -2), O = JSON.stringify(O);
      else if (P.isArray(O) && qI(O) || (P.isFileList(O) || P.endsWith(p, "[]")) && (g = P.toArray(O)))
        return p = y$(p), g.forEach(function(x, k) {
          !(P.isUndefined(x) || x === null) && e.append(
            // eslint-disable-next-line no-nested-ternary
            o === !0 ? vS([p], k, s) : o === null ? p : p + "[]",
            h(x)
          );
        }), !1;
    }
    return UO(O) ? !0 : (e.append(vS(m, p, s), h(O)), !1);
  }
  const f = [], u = Object.assign(_I, {
    defaultVisitor: c,
    convertValue: h,
    isVisitable: UO
  });
  function d(O, p) {
    if (!P.isUndefined(O)) {
      if (f.indexOf(O) !== -1)
        throw Error("Circular reference detected in " + p.join("."));
      f.push(O), P.forEach(O, function(g, S) {
        (!(P.isUndefined(g) || g === null) && r.call(
          e,
          g,
          P.isString(S) ? S.trim() : S,
          p,
          u
        )) === !0 && d(g, p ? p.concat(S) : [S]);
      }), f.pop();
    }
  }
  if (!P.isObject(i))
    throw new TypeError("data must be an object");
  return d(i), e;
}
function QS(i) {
  const e = {
    "!": "%21",
    "'": "%27",
    "(": "%28",
    ")": "%29",
    "~": "%7E",
    "%20": "+",
    "%00": "\0"
  };
  return encodeURIComponent(i).replace(/[!'()~]|%20|%00/g, function(n) {
    return e[n];
  });
}
function Em(i, e) {
  this._pairs = [], i && Lc(i, this, e);
}
const S$ = Em.prototype;
S$.append = function(e, t) {
  this._pairs.push([e, t]);
};
S$.toString = function(e) {
  const t = e ? function(n) {
    return e.call(this, n, QS);
  } : QS;
  return this._pairs.map(function(r) {
    return t(r[0]) + "=" + t(r[1]);
  }, "").join("&");
};
function XI(i) {
  return encodeURIComponent(i).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
}
function b$(i, e, t) {
  if (!e)
    return i;
  const n = t && t.encode || XI;
  P.isFunction(t) && (t = {
    serialize: t
  });
  const r = t && t.serialize;
  let s;
  if (r ? s = r(e, t) : s = P.isURLSearchParams(e) ? e.toString() : new Em(e, t).toString(n), s) {
    const o = i.indexOf("#");
    o !== -1 && (i = i.slice(0, o)), i += (i.indexOf("?") === -1 ? "?" : "&") + s;
  }
  return i;
}
class PS {
  constructor() {
    this.handlers = [];
  }
  /**
   * Add a new interceptor to the stack
   *
   * @param {Function} fulfilled The function to handle `then` for a `Promise`
   * @param {Function} rejected The function to handle `reject` for a `Promise`
   *
   * @return {Number} An ID used to remove interceptor later
   */
  use(e, t, n) {
    return this.handlers.push({
      fulfilled: e,
      rejected: t,
      synchronous: n ? n.synchronous : !1,
      runWhen: n ? n.runWhen : null
    }), this.handlers.length - 1;
  }
  /**
   * Remove an interceptor from the stack
   *
   * @param {Number} id The ID that was returned by `use`
   *
   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
   */
  eject(e) {
    this.handlers[e] && (this.handlers[e] = null);
  }
  /**
   * Clear all interceptors from the stack
   *
   * @returns {void}
   */
  clear() {
    this.handlers && (this.handlers = []);
  }
  /**
   * Iterate over all the registered interceptors
   *
   * This method is particularly useful for skipping over any
   * interceptors that may have become `null` calling `eject`.
   *
   * @param {Function} fn The function to call for each interceptor
   *
   * @returns {void}
   */
  forEach(e) {
    P.forEach(this.handlers, function(n) {
      n !== null && e(n);
    });
  }
}
const x$ = {
  silentJSONParsing: !0,
  forcedJSONParsing: !0,
  clarifyTimeoutError: !1
}, LI = typeof URLSearchParams < "u" ? URLSearchParams : Em, BI = typeof FormData < "u" ? FormData : null, ZI = typeof Blob < "u" ? Blob : null, DI = {
  isBrowser: !0,
  classes: {
    URLSearchParams: LI,
    FormData: BI,
    Blob: ZI
  },
  protocols: ["http", "https", "file", "blob", "url", "data"]
}, Mm = typeof window < "u" && typeof document < "u", YO = typeof navigator == "object" && navigator || void 0, VI = Mm && (!YO || ["ReactNative", "NativeScript", "NS"].indexOf(YO.product) < 0), WI = typeof WorkerGlobalScope < "u" && // eslint-disable-next-line no-undef
self instanceof WorkerGlobalScope && typeof self.importScripts == "function", zI = Mm && window.location.href || "http://localhost", II = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  hasBrowserEnv: Mm,
  hasStandardBrowserEnv: VI,
  hasStandardBrowserWebWorkerEnv: WI,
  navigator: YO,
  origin: zI
}, Symbol.toStringTag, { value: "Module" })), dt = {
  ...II,
  ...DI
};
function NI(i, e) {
  return Lc(i, new dt.classes.URLSearchParams(), Object.assign({
    visitor: function(t, n, r, s) {
      return dt.isNode && P.isBuffer(t) ? (this.append(n, t.toString("base64")), !1) : s.defaultVisitor.apply(this, arguments);
    }
  }, e));
}
function jI(i) {
  return P.matchAll(/\w+|\[(\w*)]/g, i).map((e) => e[0] === "[]" ? "" : e[1] || e[0]);
}
function UI(i) {
  const e = {}, t = Object.keys(i);
  let n;
  const r = t.length;
  let s;
  for (n = 0; n < r; n++)
    s = t[n], e[s] = i[s];
  return e;
}
function w$(i) {
  function e(t, n, r, s) {
    let o = t[s++];
    if (o === "__proto__") return !0;
    const l = Number.isFinite(+o), a = s >= t.length;
    return o = !o && P.isArray(r) ? r.length : o, a ? (P.hasOwnProp(r, o) ? r[o] = [r[o], n] : r[o] = n, !l) : ((!r[o] || !P.isObject(r[o])) && (r[o] = []), e(t, n, r[o], s) && P.isArray(r[o]) && (r[o] = UI(r[o])), !l);
  }
  if (P.isFormData(i) && P.isFunction(i.entries)) {
    const t = {};
    return P.forEachEntry(i, (n, r) => {
      e(jI(n), r, t, 0);
    }), t;
  }
  return null;
}
function YI(i, e, t) {
  if (P.isString(i))
    try {
      return (e || JSON.parse)(i), P.trim(i);
    } catch (n) {
      if (n.name !== "SyntaxError")
        throw n;
    }
  return (t || JSON.stringify)(i);
}
const _l = {
  transitional: x$,
  adapter: ["xhr", "http", "fetch"],
  transformRequest: [function(e, t) {
    const n = t.getContentType() || "", r = n.indexOf("application/json") > -1, s = P.isObject(e);
    if (s && P.isHTMLForm(e) && (e = new FormData(e)), P.isFormData(e))
      return r ? JSON.stringify(w$(e)) : e;
    if (P.isArrayBuffer(e) || P.isBuffer(e) || P.isStream(e) || P.isFile(e) || P.isBlob(e) || P.isReadableStream(e))
      return e;
    if (P.isArrayBufferView(e))
      return e.buffer;
    if (P.isURLSearchParams(e))
      return t.setContentType("application/x-www-form-urlencoded;charset=utf-8", !1), e.toString();
    let l;
    if (s) {
      if (n.indexOf("application/x-www-form-urlencoded") > -1)
        return NI(e, this.formSerializer).toString();
      if ((l = P.isFileList(e)) || n.indexOf("multipart/form-data") > -1) {
        const a = this.env && this.env.FormData;
        return Lc(
          l ? { "files[]": e } : e,
          a && new a(),
          this.formSerializer
        );
      }
    }
    return s || r ? (t.setContentType("application/json", !1), YI(e)) : e;
  }],
  transformResponse: [function(e) {
    const t = this.transitional || _l.transitional, n = t && t.forcedJSONParsing, r = this.responseType === "json";
    if (P.isResponse(e) || P.isReadableStream(e))
      return e;
    if (e && P.isString(e) && (n && !this.responseType || r)) {
      const o = !(t && t.silentJSONParsing) && r;
      try {
        return JSON.parse(e);
      } catch (l) {
        if (o)
          throw l.name === "SyntaxError" ? oe.from(l, oe.ERR_BAD_RESPONSE, this, null, this.response) : l;
      }
    }
    return e;
  }],
  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,
  xsrfCookieName: "XSRF-TOKEN",
  xsrfHeaderName: "X-XSRF-TOKEN",
  maxContentLength: -1,
  maxBodyLength: -1,
  env: {
    FormData: dt.classes.FormData,
    Blob: dt.classes.Blob
  },
  validateStatus: function(e) {
    return e >= 200 && e < 300;
  },
  headers: {
    common: {
      Accept: "application/json, text/plain, */*",
      "Content-Type": void 0
    }
  }
};
P.forEach(["delete", "get", "head", "post", "put", "patch"], (i) => {
  _l.headers[i] = {};
});
const GI = P.toObjectSet([
  "age",
  "authorization",
  "content-length",
  "content-type",
  "etag",
  "expires",
  "from",
  "host",
  "if-modified-since",
  "if-unmodified-since",
  "last-modified",
  "location",
  "max-forwards",
  "proxy-authorization",
  "referer",
  "retry-after",
  "user-agent"
]), FI = (i) => {
  const e = {};
  let t, n, r;
  return i && i.split(`
`).forEach(function(o) {
    r = o.indexOf(":"), t = o.substring(0, r).trim().toLowerCase(), n = o.substring(r + 1).trim(), !(!t || e[t] && GI[t]) && (t === "set-cookie" ? e[t] ? e[t].push(n) : e[t] = [n] : e[t] = e[t] ? e[t] + ", " + n : n);
  }), e;
}, $S = Symbol("internals");
function no(i) {
  return i && String(i).trim().toLowerCase();
}
function rh(i) {
  return i === !1 || i == null ? i : P.isArray(i) ? i.map(rh) : String(i);
}
function HI(i) {
  const e = /* @__PURE__ */ Object.create(null), t = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
  let n;
  for (; n = t.exec(i); )
    e[n[1]] = n[2];
  return e;
}
const KI = (i) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(i.trim());
function fu(i, e, t, n, r) {
  if (P.isFunction(n))
    return n.call(this, e, t);
  if (r && (e = t), !!P.isString(e)) {
    if (P.isString(n))
      return e.indexOf(n) !== -1;
    if (P.isRegExp(n))
      return n.test(e);
  }
}
function JI(i) {
  return i.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (e, t, n) => t.toUpperCase() + n);
}
function eN(i, e) {
  const t = P.toCamelCase(" " + e);
  ["get", "set", "has"].forEach((n) => {
    Object.defineProperty(i, n + t, {
      value: function(r, s, o) {
        return this[n].call(this, e, r, s, o);
      },
      configurable: !0
    });
  });
}
let Mt = class {
  constructor(e) {
    e && this.set(e);
  }
  set(e, t, n) {
    const r = this;
    function s(l, a, h) {
      const c = no(a);
      if (!c)
        throw new Error("header name must be a non-empty string");
      const f = P.findKey(r, c);
      (!f || r[f] === void 0 || h === !0 || h === void 0 && r[f] !== !1) && (r[f || a] = rh(l));
    }
    const o = (l, a) => P.forEach(l, (h, c) => s(h, c, a));
    if (P.isPlainObject(e) || e instanceof this.constructor)
      o(e, t);
    else if (P.isString(e) && (e = e.trim()) && !KI(e))
      o(FI(e), t);
    else if (P.isObject(e) && P.isIterable(e)) {
      let l = {}, a, h;
      for (const c of e) {
        if (!P.isArray(c))
          throw TypeError("Object iterator must return a key-value pair");
        l[h = c[0]] = (a = l[h]) ? P.isArray(a) ? [...a, c[1]] : [a, c[1]] : c[1];
      }
      o(l, t);
    } else
      e != null && s(t, e, n);
    return this;
  }
  get(e, t) {
    if (e = no(e), e) {
      const n = P.findKey(this, e);
      if (n) {
        const r = this[n];
        if (!t)
          return r;
        if (t === !0)
          return HI(r);
        if (P.isFunction(t))
          return t.call(this, r, n);
        if (P.isRegExp(t))
          return t.exec(r);
        throw new TypeError("parser must be boolean|regexp|function");
      }
    }
  }
  has(e, t) {
    if (e = no(e), e) {
      const n = P.findKey(this, e);
      return !!(n && this[n] !== void 0 && (!t || fu(this, this[n], n, t)));
    }
    return !1;
  }
  delete(e, t) {
    const n = this;
    let r = !1;
    function s(o) {
      if (o = no(o), o) {
        const l = P.findKey(n, o);
        l && (!t || fu(n, n[l], l, t)) && (delete n[l], r = !0);
      }
    }
    return P.isArray(e) ? e.forEach(s) : s(e), r;
  }
  clear(e) {
    const t = Object.keys(this);
    let n = t.length, r = !1;
    for (; n--; ) {
      const s = t[n];
      (!e || fu(this, this[s], s, e, !0)) && (delete this[s], r = !0);
    }
    return r;
  }
  normalize(e) {
    const t = this, n = {};
    return P.forEach(this, (r, s) => {
      const o = P.findKey(n, s);
      if (o) {
        t[o] = rh(r), delete t[s];
        return;
      }
      const l = e ? JI(s) : String(s).trim();
      l !== s && delete t[s], t[l] = rh(r), n[l] = !0;
    }), this;
  }
  concat(...e) {
    return this.constructor.concat(this, ...e);
  }
  toJSON(e) {
    const t = /* @__PURE__ */ Object.create(null);
    return P.forEach(this, (n, r) => {
      n != null && n !== !1 && (t[r] = e && P.isArray(n) ? n.join(", ") : n);
    }), t;
  }
  [Symbol.iterator]() {
    return Object.entries(this.toJSON())[Symbol.iterator]();
  }
  toString() {
    return Object.entries(this.toJSON()).map(([e, t]) => e + ": " + t).join(`
`);
  }
  getSetCookie() {
    return this.get("set-cookie") || [];
  }
  get [Symbol.toStringTag]() {
    return "AxiosHeaders";
  }
  static from(e) {
    return e instanceof this ? e : new this(e);
  }
  static concat(e, ...t) {
    const n = new this(e);
    return t.forEach((r) => n.set(r)), n;
  }
  static accessor(e) {
    const n = (this[$S] = this[$S] = {
      accessors: {}
    }).accessors, r = this.prototype;
    function s(o) {
      const l = no(o);
      n[l] || (eN(r, o), n[l] = !0);
    }
    return P.isArray(e) ? e.forEach(s) : s(e), this;
  }
};
Mt.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent", "Authorization"]);
P.reduceDescriptors(Mt.prototype, ({ value: i }, e) => {
  let t = e[0].toUpperCase() + e.slice(1);
  return {
    get: () => i,
    set(n) {
      this[t] = n;
    }
  };
});
P.freezeMethods(Mt);
function uu(i, e) {
  const t = this || _l, n = e || t, r = Mt.from(n.headers);
  let s = n.data;
  return P.forEach(i, function(l) {
    s = l.call(t, s, r.normalize(), e ? e.status : void 0);
  }), r.normalize(), s;
}
function k$(i) {
  return !!(i && i.__CANCEL__);
}
function Zs(i, e, t) {
  oe.call(this, i ?? "canceled", oe.ERR_CANCELED, e, t), this.name = "CanceledError";
}
P.inherits(Zs, oe, {
  __CANCEL__: !0
});
function v$(i, e, t) {
  const n = t.config.validateStatus;
  !t.status || !n || n(t.status) ? i(t) : e(new oe(
    "Request failed with status code " + t.status,
    [oe.ERR_BAD_REQUEST, oe.ERR_BAD_RESPONSE][Math.floor(t.status / 100) - 4],
    t.config,
    t.request,
    t
  ));
}
function tN(i) {
  const e = /^([-+\w]{1,25})(:?\/\/|:)/.exec(i);
  return e && e[1] || "";
}
function iN(i, e) {
  i = i || 10;
  const t = new Array(i), n = new Array(i);
  let r = 0, s = 0, o;
  return e = e !== void 0 ? e : 1e3, function(a) {
    const h = Date.now(), c = n[s];
    o || (o = h), t[r] = a, n[r] = h;
    let f = s, u = 0;
    for (; f !== r; )
      u += t[f++], f = f % i;
    if (r = (r + 1) % i, r === s && (s = (s + 1) % i), h - o < e)
      return;
    const d = c && h - c;
    return d ? Math.round(u * 1e3 / d) : void 0;
  };
}
function nN(i, e) {
  let t = 0, n = 1e3 / e, r, s;
  const o = (h, c = Date.now()) => {
    t = c, r = null, s && (clearTimeout(s), s = null), i.apply(null, h);
  };
  return [(...h) => {
    const c = Date.now(), f = c - t;
    f >= n ? o(h, c) : (r = h, s || (s = setTimeout(() => {
      s = null, o(r);
    }, n - f)));
  }, () => r && o(r)];
}
const tc = (i, e, t = 3) => {
  let n = 0;
  const r = iN(50, 250);
  return nN((s) => {
    const o = s.loaded, l = s.lengthComputable ? s.total : void 0, a = o - n, h = r(a), c = o <= l;
    n = o;
    const f = {
      loaded: o,
      total: l,
      progress: l ? o / l : void 0,
      bytes: a,
      rate: h || void 0,
      estimated: h && l && c ? (l - o) / h : void 0,
      event: s,
      lengthComputable: l != null,
      [e ? "download" : "upload"]: !0
    };
    i(f);
  }, t);
}, TS = (i, e) => {
  const t = i != null;
  return [(n) => e[0]({
    lengthComputable: t,
    total: i,
    loaded: n
  }), e[1]];
}, CS = (i) => (...e) => P.asap(() => i(...e)), rN = dt.hasStandardBrowserEnv ? /* @__PURE__ */ ((i, e) => (t) => (t = new URL(t, dt.origin), i.protocol === t.protocol && i.host === t.host && (e || i.port === t.port)))(
  new URL(dt.origin),
  dt.navigator && /(msie|trident)/i.test(dt.navigator.userAgent)
) : () => !0, sN = dt.hasStandardBrowserEnv ? (
  // Standard browser envs support document.cookie
  {
    write(i, e, t, n, r, s) {
      const o = [i + "=" + encodeURIComponent(e)];
      P.isNumber(t) && o.push("expires=" + new Date(t).toGMTString()), P.isString(n) && o.push("path=" + n), P.isString(r) && o.push("domain=" + r), s === !0 && o.push("secure"), document.cookie = o.join("; ");
    },
    read(i) {
      const e = document.cookie.match(new RegExp("(^|;\\s*)(" + i + ")=([^;]*)"));
      return e ? decodeURIComponent(e[3]) : null;
    },
    remove(i) {
      this.write(i, "", Date.now() - 864e5);
    }
  }
) : (
  // Non-standard browser env (web workers, react-native) lack needed support.
  {
    write() {
    },
    read() {
      return null;
    },
    remove() {
    }
  }
);
function oN(i) {
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(i);
}
function lN(i, e) {
  return e ? i.replace(/\/?\/$/, "") + "/" + e.replace(/^\/+/, "") : i;
}
function Q$(i, e, t) {
  let n = !oN(e);
  return i && (n || t == !1) ? lN(i, e) : e;
}
const RS = (i) => i instanceof Mt ? { ...i } : i;
function Ar(i, e) {
  e = e || {};
  const t = {};
  function n(h, c, f, u) {
    return P.isPlainObject(h) && P.isPlainObject(c) ? P.merge.call({ caseless: u }, h, c) : P.isPlainObject(c) ? P.merge({}, c) : P.isArray(c) ? c.slice() : c;
  }
  function r(h, c, f, u) {
    if (P.isUndefined(c)) {
      if (!P.isUndefined(h))
        return n(void 0, h, f, u);
    } else return n(h, c, f, u);
  }
  function s(h, c) {
    if (!P.isUndefined(c))
      return n(void 0, c);
  }
  function o(h, c) {
    if (P.isUndefined(c)) {
      if (!P.isUndefined(h))
        return n(void 0, h);
    } else return n(void 0, c);
  }
  function l(h, c, f) {
    if (f in e)
      return n(h, c);
    if (f in i)
      return n(void 0, h);
  }
  const a = {
    url: s,
    method: s,
    data: s,
    baseURL: o,
    transformRequest: o,
    transformResponse: o,
    paramsSerializer: o,
    timeout: o,
    timeoutMessage: o,
    withCredentials: o,
    withXSRFToken: o,
    adapter: o,
    responseType: o,
    xsrfCookieName: o,
    xsrfHeaderName: o,
    onUploadProgress: o,
    onDownloadProgress: o,
    decompress: o,
    maxContentLength: o,
    maxBodyLength: o,
    beforeRedirect: o,
    transport: o,
    httpAgent: o,
    httpsAgent: o,
    cancelToken: o,
    socketPath: o,
    responseEncoding: o,
    validateStatus: l,
    headers: (h, c, f) => r(RS(h), RS(c), f, !0)
  };
  return P.forEach(Object.keys(Object.assign({}, i, e)), function(c) {
    const f = a[c] || r, u = f(i[c], e[c], c);
    P.isUndefined(u) && f !== l || (t[c] = u);
  }), t;
}
const P$ = (i) => {
  const e = Ar({}, i);
  let { data: t, withXSRFToken: n, xsrfHeaderName: r, xsrfCookieName: s, headers: o, auth: l } = e;
  e.headers = o = Mt.from(o), e.url = b$(Q$(e.baseURL, e.url, e.allowAbsoluteUrls), i.params, i.paramsSerializer), l && o.set(
    "Authorization",
    "Basic " + btoa((l.username || "") + ":" + (l.password ? unescape(encodeURIComponent(l.password)) : ""))
  );
  let a;
  if (P.isFormData(t)) {
    if (dt.hasStandardBrowserEnv || dt.hasStandardBrowserWebWorkerEnv)
      o.setContentType(void 0);
    else if ((a = o.getContentType()) !== !1) {
      const [h, ...c] = a ? a.split(";").map((f) => f.trim()).filter(Boolean) : [];
      o.setContentType([h || "multipart/form-data", ...c].join("; "));
    }
  }
  if (dt.hasStandardBrowserEnv && (n && P.isFunction(n) && (n = n(e)), n || n !== !1 && rN(e.url))) {
    const h = r && s && sN.read(s);
    h && o.set(r, h);
  }
  return e;
}, aN = typeof XMLHttpRequest < "u", hN = aN && function(i) {
  return new Promise(function(t, n) {
    const r = P$(i);
    let s = r.data;
    const o = Mt.from(r.headers).normalize();
    let { responseType: l, onUploadProgress: a, onDownloadProgress: h } = r, c, f, u, d, O;
    function p() {
      d && d(), O && O(), r.cancelToken && r.cancelToken.unsubscribe(c), r.signal && r.signal.removeEventListener("abort", c);
    }
    let m = new XMLHttpRequest();
    m.open(r.method.toUpperCase(), r.url, !0), m.timeout = r.timeout;
    function g() {
      if (!m)
        return;
      const x = Mt.from(
        "getAllResponseHeaders" in m && m.getAllResponseHeaders()
      ), w = {
        data: !l || l === "text" || l === "json" ? m.responseText : m.response,
        status: m.status,
        statusText: m.statusText,
        headers: x,
        config: i,
        request: m
      };
      v$(function(Q) {
        t(Q), p();
      }, function(Q) {
        n(Q), p();
      }, w), m = null;
    }
    "onloadend" in m ? m.onloadend = g : m.onreadystatechange = function() {
      !m || m.readyState !== 4 || m.status === 0 && !(m.responseURL && m.responseURL.indexOf("file:") === 0) || setTimeout(g);
    }, m.onabort = function() {
      m && (n(new oe("Request aborted", oe.ECONNABORTED, i, m)), m = null);
    }, m.onerror = function() {
      n(new oe("Network Error", oe.ERR_NETWORK, i, m)), m = null;
    }, m.ontimeout = function() {
      let k = r.timeout ? "timeout of " + r.timeout + "ms exceeded" : "timeout exceeded";
      const w = r.transitional || x$;
      r.timeoutErrorMessage && (k = r.timeoutErrorMessage), n(new oe(
        k,
        w.clarifyTimeoutError ? oe.ETIMEDOUT : oe.ECONNABORTED,
        i,
        m
      )), m = null;
    }, s === void 0 && o.setContentType(null), "setRequestHeader" in m && P.forEach(o.toJSON(), function(k, w) {
      m.setRequestHeader(w, k);
    }), P.isUndefined(r.withCredentials) || (m.withCredentials = !!r.withCredentials), l && l !== "json" && (m.responseType = r.responseType), h && ([u, O] = tc(h, !0), m.addEventListener("progress", u)), a && m.upload && ([f, d] = tc(a), m.upload.addEventListener("progress", f), m.upload.addEventListener("loadend", d)), (r.cancelToken || r.signal) && (c = (x) => {
      m && (n(!x || x.type ? new Zs(null, i, m) : x), m.abort(), m = null);
    }, r.cancelToken && r.cancelToken.subscribe(c), r.signal && (r.signal.aborted ? c() : r.signal.addEventListener("abort", c)));
    const S = tN(r.url);
    if (S && dt.protocols.indexOf(S) === -1) {
      n(new oe("Unsupported protocol " + S + ":", oe.ERR_BAD_REQUEST, i));
      return;
    }
    m.send(s || null);
  });
}, cN = (i, e) => {
  const { length: t } = i = i ? i.filter(Boolean) : [];
  if (e || t) {
    let n = new AbortController(), r;
    const s = function(h) {
      if (!r) {
        r = !0, l();
        const c = h instanceof Error ? h : this.reason;
        n.abort(c instanceof oe ? c : new Zs(c instanceof Error ? c.message : c));
      }
    };
    let o = e && setTimeout(() => {
      o = null, s(new oe(`timeout ${e} of ms exceeded`, oe.ETIMEDOUT));
    }, e);
    const l = () => {
      i && (o && clearTimeout(o), o = null, i.forEach((h) => {
        h.unsubscribe ? h.unsubscribe(s) : h.removeEventListener("abort", s);
      }), i = null);
    };
    i.forEach((h) => h.addEventListener("abort", s));
    const { signal: a } = n;
    return a.unsubscribe = () => P.asap(l), a;
  }
}, fN = function* (i, e) {
  let t = i.byteLength;
  if (t < e) {
    yield i;
    return;
  }
  let n = 0, r;
  for (; n < t; )
    r = n + e, yield i.slice(n, r), n = r;
}, uN = async function* (i, e) {
  for await (const t of dN(i))
    yield* fN(t, e);
}, dN = async function* (i) {
  if (i[Symbol.asyncIterator]) {
    yield* i;
    return;
  }
  const e = i.getReader();
  try {
    for (; ; ) {
      const { done: t, value: n } = await e.read();
      if (t)
        break;
      yield n;
    }
  } finally {
    await e.cancel();
  }
}, AS = (i, e, t, n) => {
  const r = uN(i, e);
  let s = 0, o, l = (a) => {
    o || (o = !0, n && n(a));
  };
  return new ReadableStream({
    async pull(a) {
      try {
        const { done: h, value: c } = await r.next();
        if (h) {
          l(), a.close();
          return;
        }
        let f = c.byteLength;
        if (t) {
          let u = s += f;
          t(u);
        }
        a.enqueue(new Uint8Array(c));
      } catch (h) {
        throw l(h), h;
      }
    },
    cancel(a) {
      return l(a), r.return();
    }
  }, {
    highWaterMark: 2
  });
}, Bc = typeof fetch == "function" && typeof Request == "function" && typeof Response == "function", $$ = Bc && typeof ReadableStream == "function", ON = Bc && (typeof TextEncoder == "function" ? /* @__PURE__ */ ((i) => (e) => i.encode(e))(new TextEncoder()) : async (i) => new Uint8Array(await new Response(i).arrayBuffer())), T$ = (i, ...e) => {
  try {
    return !!i(...e);
  } catch {
    return !1;
  }
}, pN = $$ && T$(() => {
  let i = !1;
  const e = new Request(dt.origin, {
    body: new ReadableStream(),
    method: "POST",
    get duplex() {
      return i = !0, "half";
    }
  }).headers.has("Content-Type");
  return i && !e;
}), ES = 64 * 1024, GO = $$ && T$(() => P.isReadableStream(new Response("").body)), ic = {
  stream: GO && ((i) => i.body)
};
Bc && ((i) => {
  ["text", "arrayBuffer", "blob", "formData", "stream"].forEach((e) => {
    !ic[e] && (ic[e] = P.isFunction(i[e]) ? (t) => t[e]() : (t, n) => {
      throw new oe(`Response type '${e}' is not supported`, oe.ERR_NOT_SUPPORT, n);
    });
  });
})(new Response());
const mN = async (i) => {
  if (i == null)
    return 0;
  if (P.isBlob(i))
    return i.size;
  if (P.isSpecCompliantForm(i))
    return (await new Request(dt.origin, {
      method: "POST",
      body: i
    }).arrayBuffer()).byteLength;
  if (P.isArrayBufferView(i) || P.isArrayBuffer(i))
    return i.byteLength;
  if (P.isURLSearchParams(i) && (i = i + ""), P.isString(i))
    return (await ON(i)).byteLength;
}, gN = async (i, e) => {
  const t = P.toFiniteNumber(i.getContentLength());
  return t ?? mN(e);
}, yN = Bc && (async (i) => {
  let {
    url: e,
    method: t,
    data: n,
    signal: r,
    cancelToken: s,
    timeout: o,
    onDownloadProgress: l,
    onUploadProgress: a,
    responseType: h,
    headers: c,
    withCredentials: f = "same-origin",
    fetchOptions: u
  } = P$(i);
  h = h ? (h + "").toLowerCase() : "text";
  let d = cN([r, s && s.toAbortSignal()], o), O;
  const p = d && d.unsubscribe && (() => {
    d.unsubscribe();
  });
  let m;
  try {
    if (a && pN && t !== "get" && t !== "head" && (m = await gN(c, n)) !== 0) {
      let w = new Request(e, {
        method: "POST",
        body: n,
        duplex: "half"
      }), b;
      if (P.isFormData(n) && (b = w.headers.get("content-type")) && c.setContentType(b), w.body) {
        const [Q, R] = TS(
          m,
          tc(CS(a))
        );
        n = AS(w.body, ES, Q, R);
      }
    }
    P.isString(f) || (f = f ? "include" : "omit");
    const g = "credentials" in Request.prototype;
    O = new Request(e, {
      ...u,
      signal: d,
      method: t.toUpperCase(),
      headers: c.normalize().toJSON(),
      body: n,
      duplex: "half",
      credentials: g ? f : void 0
    });
    let S = await fetch(O);
    const x = GO && (h === "stream" || h === "response");
    if (GO && (l || x && p)) {
      const w = {};
      ["status", "statusText", "headers"].forEach((A) => {
        w[A] = S[A];
      });
      const b = P.toFiniteNumber(S.headers.get("content-length")), [Q, R] = l && TS(
        b,
        tc(CS(l), !0)
      ) || [];
      S = new Response(
        AS(S.body, ES, Q, () => {
          R && R(), p && p();
        }),
        w
      );
    }
    h = h || "text";
    let k = await ic[P.findKey(ic, h) || "text"](S, i);
    return !x && p && p(), await new Promise((w, b) => {
      v$(w, b, {
        data: k,
        headers: Mt.from(S.headers),
        status: S.status,
        statusText: S.statusText,
        config: i,
        request: O
      });
    });
  } catch (g) {
    throw p && p(), g && g.name === "TypeError" && /Load failed|fetch/i.test(g.message) ? Object.assign(
      new oe("Network Error", oe.ERR_NETWORK, i, O),
      {
        cause: g.cause || g
      }
    ) : oe.from(g, g && g.code, i, O);
  }
}), FO = {
  http: MI,
  xhr: hN,
  fetch: yN
};
P.forEach(FO, (i, e) => {
  if (i) {
    try {
      Object.defineProperty(i, "name", { value: e });
    } catch {
    }
    Object.defineProperty(i, "adapterName", { value: e });
  }
});
const MS = (i) => `- ${i}`, SN = (i) => P.isFunction(i) || i === null || i === !1, C$ = {
  getAdapter: (i) => {
    i = P.isArray(i) ? i : [i];
    const { length: e } = i;
    let t, n;
    const r = {};
    for (let s = 0; s < e; s++) {
      t = i[s];
      let o;
      if (n = t, !SN(t) && (n = FO[(o = String(t)).toLowerCase()], n === void 0))
        throw new oe(`Unknown adapter '${o}'`);
      if (n)
        break;
      r[o || "#" + s] = n;
    }
    if (!n) {
      const s = Object.entries(r).map(
        ([l, a]) => `adapter ${l} ` + (a === !1 ? "is not supported by the environment" : "is not available in the build")
      );
      let o = e ? s.length > 1 ? `since :
` + s.map(MS).join(`
`) : " " + MS(s[0]) : "as no adapter specified";
      throw new oe(
        "There is no suitable adapter to dispatch the request " + o,
        "ERR_NOT_SUPPORT"
      );
    }
    return n;
  },
  adapters: FO
};
function du(i) {
  if (i.cancelToken && i.cancelToken.throwIfRequested(), i.signal && i.signal.aborted)
    throw new Zs(null, i);
}
function qS(i) {
  return du(i), i.headers = Mt.from(i.headers), i.data = uu.call(
    i,
    i.transformRequest
  ), ["post", "put", "patch"].indexOf(i.method) !== -1 && i.headers.setContentType("application/x-www-form-urlencoded", !1), C$.getAdapter(i.adapter || _l.adapter)(i).then(function(n) {
    return du(i), n.data = uu.call(
      i,
      i.transformResponse,
      n
    ), n.headers = Mt.from(n.headers), n;
  }, function(n) {
    return k$(n) || (du(i), n && n.response && (n.response.data = uu.call(
      i,
      i.transformResponse,
      n.response
    ), n.response.headers = Mt.from(n.response.headers))), Promise.reject(n);
  });
}
const R$ = "1.9.0", Zc = {};
["object", "boolean", "number", "function", "string", "symbol"].forEach((i, e) => {
  Zc[i] = function(n) {
    return typeof n === i || "a" + (e < 1 ? "n " : " ") + i;
  };
});
const _S = {};
Zc.transitional = function(e, t, n) {
  function r(s, o) {
    return "[Axios v" + R$ + "] Transitional option '" + s + "'" + o + (n ? ". " + n : "");
  }
  return (s, o, l) => {
    if (e === !1)
      throw new oe(
        r(o, " has been removed" + (t ? " in " + t : "")),
        oe.ERR_DEPRECATED
      );
    return t && !_S[o] && (_S[o] = !0, console.warn(
      r(
        o,
        " has been deprecated since v" + t + " and will be removed in the near future"
      )
    )), e ? e(s, o, l) : !0;
  };
};
Zc.spelling = function(e) {
  return (t, n) => (console.warn(`${n} is likely a misspelling of ${e}`), !0);
};
function bN(i, e, t) {
  if (typeof i != "object")
    throw new oe("options must be an object", oe.ERR_BAD_OPTION_VALUE);
  const n = Object.keys(i);
  let r = n.length;
  for (; r-- > 0; ) {
    const s = n[r], o = e[s];
    if (o) {
      const l = i[s], a = l === void 0 || o(l, s, i);
      if (a !== !0)
        throw new oe("option " + s + " must be " + a, oe.ERR_BAD_OPTION_VALUE);
      continue;
    }
    if (t !== !0)
      throw new oe("Unknown option " + s, oe.ERR_BAD_OPTION);
  }
}
const sh = {
  assertOptions: bN,
  validators: Zc
}, Mi = sh.validators;
let Sr = class {
  constructor(e) {
    this.defaults = e || {}, this.interceptors = {
      request: new PS(),
      response: new PS()
    };
  }
  /**
   * Dispatch a request
   *
   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
   * @param {?Object} config
   *
   * @returns {Promise} The Promise to be fulfilled
   */
  async request(e, t) {
    try {
      return await this._request(e, t);
    } catch (n) {
      if (n instanceof Error) {
        let r = {};
        Error.captureStackTrace ? Error.captureStackTrace(r) : r = new Error();
        const s = r.stack ? r.stack.replace(/^.+\n/, "") : "";
        try {
          n.stack ? s && !String(n.stack).endsWith(s.replace(/^.+\n.+\n/, "")) && (n.stack += `
` + s) : n.stack = s;
        } catch {
        }
      }
      throw n;
    }
  }
  _request(e, t) {
    typeof e == "string" ? (t = t || {}, t.url = e) : t = e || {}, t = Ar(this.defaults, t);
    const { transitional: n, paramsSerializer: r, headers: s } = t;
    n !== void 0 && sh.assertOptions(n, {
      silentJSONParsing: Mi.transitional(Mi.boolean),
      forcedJSONParsing: Mi.transitional(Mi.boolean),
      clarifyTimeoutError: Mi.transitional(Mi.boolean)
    }, !1), r != null && (P.isFunction(r) ? t.paramsSerializer = {
      serialize: r
    } : sh.assertOptions(r, {
      encode: Mi.function,
      serialize: Mi.function
    }, !0)), t.allowAbsoluteUrls !== void 0 || (this.defaults.allowAbsoluteUrls !== void 0 ? t.allowAbsoluteUrls = this.defaults.allowAbsoluteUrls : t.allowAbsoluteUrls = !0), sh.assertOptions(t, {
      baseUrl: Mi.spelling("baseURL"),
      withXsrfToken: Mi.spelling("withXSRFToken")
    }, !0), t.method = (t.method || this.defaults.method || "get").toLowerCase();
    let o = s && P.merge(
      s.common,
      s[t.method]
    );
    s && P.forEach(
      ["delete", "get", "head", "post", "put", "patch", "common"],
      (O) => {
        delete s[O];
      }
    ), t.headers = Mt.concat(o, s);
    const l = [];
    let a = !0;
    this.interceptors.request.forEach(function(p) {
      typeof p.runWhen == "function" && p.runWhen(t) === !1 || (a = a && p.synchronous, l.unshift(p.fulfilled, p.rejected));
    });
    const h = [];
    this.interceptors.response.forEach(function(p) {
      h.push(p.fulfilled, p.rejected);
    });
    let c, f = 0, u;
    if (!a) {
      const O = [qS.bind(this), void 0];
      for (O.unshift.apply(O, l), O.push.apply(O, h), u = O.length, c = Promise.resolve(t); f < u; )
        c = c.then(O[f++], O[f++]);
      return c;
    }
    u = l.length;
    let d = t;
    for (f = 0; f < u; ) {
      const O = l[f++], p = l[f++];
      try {
        d = O(d);
      } catch (m) {
        p.call(this, m);
        break;
      }
    }
    try {
      c = qS.call(this, d);
    } catch (O) {
      return Promise.reject(O);
    }
    for (f = 0, u = h.length; f < u; )
      c = c.then(h[f++], h[f++]);
    return c;
  }
  getUri(e) {
    e = Ar(this.defaults, e);
    const t = Q$(e.baseURL, e.url, e.allowAbsoluteUrls);
    return b$(t, e.params, e.paramsSerializer);
  }
};
P.forEach(["delete", "get", "head", "options"], function(e) {
  Sr.prototype[e] = function(t, n) {
    return this.request(Ar(n || {}, {
      method: e,
      url: t,
      data: (n || {}).data
    }));
  };
});
P.forEach(["post", "put", "patch"], function(e) {
  function t(n) {
    return function(s, o, l) {
      return this.request(Ar(l || {}, {
        method: e,
        headers: n ? {
          "Content-Type": "multipart/form-data"
        } : {},
        url: s,
        data: o
      }));
    };
  }
  Sr.prototype[e] = t(), Sr.prototype[e + "Form"] = t(!0);
});
let xN = class A$ {
  constructor(e) {
    if (typeof e != "function")
      throw new TypeError("executor must be a function.");
    let t;
    this.promise = new Promise(function(s) {
      t = s;
    });
    const n = this;
    this.promise.then((r) => {
      if (!n._listeners) return;
      let s = n._listeners.length;
      for (; s-- > 0; )
        n._listeners[s](r);
      n._listeners = null;
    }), this.promise.then = (r) => {
      let s;
      const o = new Promise((l) => {
        n.subscribe(l), s = l;
      }).then(r);
      return o.cancel = function() {
        n.unsubscribe(s);
      }, o;
    }, e(function(s, o, l) {
      n.reason || (n.reason = new Zs(s, o, l), t(n.reason));
    });
  }
  /**
   * Throws a `CanceledError` if cancellation has been requested.
   */
  throwIfRequested() {
    if (this.reason)
      throw this.reason;
  }
  /**
   * Subscribe to the cancel signal
   */
  subscribe(e) {
    if (this.reason) {
      e(this.reason);
      return;
    }
    this._listeners ? this._listeners.push(e) : this._listeners = [e];
  }
  /**
   * Unsubscribe from the cancel signal
   */
  unsubscribe(e) {
    if (!this._listeners)
      return;
    const t = this._listeners.indexOf(e);
    t !== -1 && this._listeners.splice(t, 1);
  }
  toAbortSignal() {
    const e = new AbortController(), t = (n) => {
      e.abort(n);
    };
    return this.subscribe(t), e.signal.unsubscribe = () => this.unsubscribe(t), e.signal;
  }
  /**
   * Returns an object that contains a new `CancelToken` and a function that, when called,
   * cancels the `CancelToken`.
   */
  static source() {
    let e;
    return {
      token: new A$(function(r) {
        e = r;
      }),
      cancel: e
    };
  }
};
function wN(i) {
  return function(t) {
    return i.apply(null, t);
  };
}
function kN(i) {
  return P.isObject(i) && i.isAxiosError === !0;
}
const HO = {
  Continue: 100,
  SwitchingProtocols: 101,
  Processing: 102,
  EarlyHints: 103,
  Ok: 200,
  Created: 201,
  Accepted: 202,
  NonAuthoritativeInformation: 203,
  NoContent: 204,
  ResetContent: 205,
  PartialContent: 206,
  MultiStatus: 207,
  AlreadyReported: 208,
  ImUsed: 226,
  MultipleChoices: 300,
  MovedPermanently: 301,
  Found: 302,
  SeeOther: 303,
  NotModified: 304,
  UseProxy: 305,
  Unused: 306,
  TemporaryRedirect: 307,
  PermanentRedirect: 308,
  BadRequest: 400,
  Unauthorized: 401,
  PaymentRequired: 402,
  Forbidden: 403,
  NotFound: 404,
  MethodNotAllowed: 405,
  NotAcceptable: 406,
  ProxyAuthenticationRequired: 407,
  RequestTimeout: 408,
  Conflict: 409,
  Gone: 410,
  LengthRequired: 411,
  PreconditionFailed: 412,
  PayloadTooLarge: 413,
  UriTooLong: 414,
  UnsupportedMediaType: 415,
  RangeNotSatisfiable: 416,
  ExpectationFailed: 417,
  ImATeapot: 418,
  MisdirectedRequest: 421,
  UnprocessableEntity: 422,
  Locked: 423,
  FailedDependency: 424,
  TooEarly: 425,
  UpgradeRequired: 426,
  PreconditionRequired: 428,
  TooManyRequests: 429,
  RequestHeaderFieldsTooLarge: 431,
  UnavailableForLegalReasons: 451,
  InternalServerError: 500,
  NotImplemented: 501,
  BadGateway: 502,
  ServiceUnavailable: 503,
  GatewayTimeout: 504,
  HttpVersionNotSupported: 505,
  VariantAlsoNegotiates: 506,
  InsufficientStorage: 507,
  LoopDetected: 508,
  NotExtended: 510,
  NetworkAuthenticationRequired: 511
};
Object.entries(HO).forEach(([i, e]) => {
  HO[e] = i;
});
function E$(i) {
  const e = new Sr(i), t = a$(Sr.prototype.request, e);
  return P.extend(t, Sr.prototype, e, { allOwnKeys: !0 }), P.extend(t, e, null, { allOwnKeys: !0 }), t.create = function(r) {
    return E$(Ar(i, r));
  }, t;
}
const Ie = E$(_l);
Ie.Axios = Sr;
Ie.CanceledError = Zs;
Ie.CancelToken = xN;
Ie.isCancel = k$;
Ie.VERSION = R$;
Ie.toFormData = Lc;
Ie.AxiosError = oe;
Ie.Cancel = Ie.CanceledError;
Ie.all = function(e) {
  return Promise.all(e);
};
Ie.spread = wN;
Ie.isAxiosError = kN;
Ie.mergeConfig = Ar;
Ie.AxiosHeaders = Mt;
Ie.formToJSON = (i) => w$(P.isHTMLForm(i) ? new FormData(i) : i);
Ie.getAdapter = C$.getAdapter;
Ie.HttpStatusCode = HO;
Ie.default = Ie;
const {
  Axios: i7,
  AxiosError: n7,
  CanceledError: r7,
  isCancel: s7,
  CancelToken: o7,
  VERSION: l7,
  all: a7,
  Cancel: h7,
  isAxiosError: c7,
  spread: f7,
  toFormData: u7,
  AxiosHeaders: d7,
  HttpStatusCode: O7,
  formToJSON: p7,
  getAdapter: m7,
  mergeConfig: g7
} = Ie, KO = Ie.create({
  baseURL: wr || "http://localhost:5000/api",
  headers: {
    "Content-Type": "application/json"
  },
  // Include credentials (cookies) with every request
  withCredentials: !0
});
KO.interceptors.request.use(
  (i) => i,
  (i) => Promise.reject(i)
);
var vN = /* @__PURE__ */ J('<div class="flex-1 overflow-auto"><button class="mt-2 px-4 py-2 bg-blue-600 text-white rounded shadow"></button><div class="dark:bg-neutral-900 bg-neutral-100 h-screen w-screen">'), QN = /* @__PURE__ */ J("<p>Loading file..."), PN = /* @__PURE__ */ J("<p class=text-red-600>");
function $N(i) {
  let e;
  const [t, n] = ee(""), [r, s] = ee(!0), [o, l] = ee(!1), [a, h] = ee("");
  W.theme({
    "&": {
      backgroundColor: "#171717",
      // Tailwind bg-neutral-900
      color: "#f4f4f5",
      // Optional: text-neutral-100
      height: "100%"
    },
    ".cm-content": {
      caretColor: "#f4f4f5"
    },
    "&.cm-focused .cm-cursor": {
      borderLeftColor: "#f4f4f5"
    },
    "&.cm-focused .cm-selectionBackground, ::selection": {
      backgroundColor: "#3f3f46"
      // bg-neutral-800
    }
  }, {
    dark: !0
  });
  const c = async () => {
    s(!0);
    try {
      const d = new FormData();
      d.append("filePath", i.filePath);
      const O = await KO.post("/file/read", d);
      if (!O.data) throw new Error("Failed to load file");
      const p = O.data.data;
      n(p), f(p);
    } catch (d) {
      h(d.message);
    } finally {
      s(!1);
    }
  }, f = (d) => {
    const O = Be.create({
      doc: d,
      extensions: [
        VL,
        FW(i.filePath),
        //...getThemeExtension(),
        Uz(i.theme || "dark"),
        W.updateListener.of((p) => {
          p.docChanged && n(p.state.doc.toString());
        })
      ]
    });
    new W({
      state: O,
      parent: e
    });
  }, u = async () => {
    l(!0);
    try {
      const d = new FormData();
      if (d.append("filePath", i.filePath), d.append("content", t()), !(await KO.post("/file/write", d)).data.success) throw new Error("Failed to save file");
      alert("File saved successfully.");
    } catch (d) {
      alert("Error saving file: " + d.message);
    } finally {
      l(!1);
    }
  };
  return ml(() => {
    c();
  }), (() => {
    var d = vN(), O = d.firstChild, p = O.nextSibling;
    O.$$click = u, F(O, () => o() ? "Saving..." : "Save File"), F(d, (() => {
      var g = xr(() => !!r());
      return () => g() && QN();
    })(), p), F(d, (() => {
      var g = xr(() => !!a());
      return () => g() && (() => {
        var S = PN();
        return F(S, a), S;
      })();
    })(), p);
    var m = e;
    return typeof m == "function" ? Wi(m, p) : e = p, De(() => O.disabled = o()), d;
  })();
}
Hi(["click"]);
var TN = /* @__PURE__ */ J('<div class="flex h-screen flex-col bg-white dark:bg-neutral-900 dark:text-white">');
function CN() {
  const [i, e] = ee(""), [t, n] = ee(0), [r, s] = ee(!1);
  return ml(() => {
    n(window.innerWidth / 2);
  }), pi(() => {
  }), (() => {
    var o = TN();
    return F(o, D(Ms, {}), null), F(o, D($N, {
      filePath: "./frontend/index.html",
      language: "typescript"
    }), null), o;
  })();
}
const RN = () => D(WT, {
  root: (e) => D(IT, {
    get children() {
      return D(J$, {
        get children() {
          return e.children;
        }
      });
    }
  }),
  get children() {
    return [D(vn, {
      path: "/",
      component: () => D(Vs, {
        isAuthenticated: !1,
        get children() {
          return D(yR, {});
        }
      })
    }), D(vn, {
      path: "/dashboard",
      component: () => D(Vs, {
        isAuthenticated: !1,
        get children() {
          return D(uR, {});
        }
      })
    }), D(vn, {
      path: "/terminal",
      component: () => D(Vs, {
        isAuthenticated: !1,
        get children() {
          return D(cR, {});
        }
      })
    }), D(vn, {
      path: "/settings",
      component: () => D(Vs, {
        isAuthenticated: !1,
        get children() {
          return D(OR, {});
        }
      })
    }), D(vn, {
      path: "/profile",
      component: () => D(Vs, {
        isAuthenticated: !1,
        get children() {
          return D(mR, {});
        }
      })
    }), D(vn, {
      path: "/editor",
      component: () => D(CN, {})
    }), D(vn, {
      path: "/logout",
      component: () => D(_A, {})
    }), D(vn, {
      path: "/login",
      component: () => D(RA, {})
    })];
  }
}), AN = document.getElementById("root");
hT(() => D(RN, {}), AN);
