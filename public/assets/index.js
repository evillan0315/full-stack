const re = {
  context: void 0,
  registry: void 0,
  effects: void 0,
  done: !1,
  getContextId() {
    return Ku(this.context.count);
  },
  getNextContextId() {
    return Ku(this.context.count++);
  }
};
function Ku(n) {
  const e = String(n), t = e.length - 1;
  return re.context.id + (t ? String.fromCharCode(96 + t) : "") + e;
}
function qr(n) {
  re.context = n;
}
const mQ = !1, gQ = (n, e) => n === e, tl = Symbol("solid-proxy"), Jm = typeof Proxy == "function", yQ = Symbol("solid-track"), nl = {
  equals: gQ
};
let eg = og;
const Lt = 1, es = 2, tg = {
  owned: null,
  cleanups: null,
  context: null,
  owner: null
}, Pa = {};
var oe = null;
let M = null, SQ = null, pe = null, tt = null, He = null, Yl = 0;
function pi(n, e) {
  const t = pe, i = oe, r = n.length === 0, s = e === void 0 ? i : e, o = r ? tg : {
    owned: null,
    cleanups: null,
    context: s ? s.context : null,
    owner: s
  }, l = r ? n : () => n(() => De(() => Yn(o)));
  oe = o, pe = null;
  try {
    return bt(l, !0);
  } finally {
    pe = t, oe = i;
  }
}
function G(n, e) {
  e = e ? Object.assign({}, nl, e) : nl;
  const t = {
    value: n,
    observers: null,
    observerSlots: null,
    comparator: e.equals || void 0
  }, i = (r) => (typeof r == "function" && (M && M.running && M.sources.has(t) ? r = r(t.tValue) : r = r(t.value)), sg(t, r));
  return [rg.bind(t), i];
}
function il(n, e, t) {
  const i = Fl(n, e, !0, Lt);
  cr(i);
}
function Pe(n, e, t) {
  const i = Fl(n, e, !1, Lt);
  cr(i);
}
function Vt(n, e, t) {
  eg = vQ;
  const i = Fl(n, e, !1, Lt), r = Si && ar(Si);
  r && (i.suspense = r), i.user = !0, He ? He.push(i) : cr(i);
}
function $e(n, e, t) {
  t = t ? Object.assign({}, nl, t) : nl;
  const i = Fl(n, e, !0, 0);
  return i.observers = null, i.observerSlots = null, i.comparator = t.equals || void 0, cr(i), rg.bind(i);
}
function bQ(n) {
  return n && typeof n == "object" && "then" in n;
}
function ng(n, e, t) {
  let i, r, s;
  typeof e == "function" ? (i = n, r = e, s = {}) : (i = !0, r = n, s = e || {});
  let o = null, l = Pa, a = null, c = !1, h = !1, f = "initialValue" in s, u = typeof i == "function" && $e(i);
  const d = /* @__PURE__ */ new Set(), [O, p] = (s.storage || G)(s.initialValue), [m, y] = G(void 0), [S, b] = G(void 0, {
    equals: !1
  }), [w, k] = G(f ? "ready" : "unresolved");
  re.context && (a = re.getNextContextId(), s.ssrLoadFrom === "initial" ? l = s.initialValue : re.load && re.has(a) && (l = re.load(a)));
  function Q(C, x, L, _) {
    return o === C && (o = null, _ !== void 0 && (f = !0), (C === l || x === l) && s.onHydrated && queueMicrotask(
      () => s.onHydrated(_, {
        value: x
      })
    ), l = Pa, M && C && c ? (M.promises.delete(C), c = !1, bt(() => {
      M.running = !0, P(x, L);
    }, !1)) : P(x, L)), x;
  }
  function P(C, x) {
    bt(() => {
      x === void 0 && p(() => C), k(x !== void 0 ? "errored" : f ? "ready" : "unresolved"), y(x);
      for (const L of d.keys()) L.decrement();
      d.clear();
    }, !1);
  }
  function E() {
    const C = Si && ar(Si), x = O(), L = m();
    if (L !== void 0 && !o) throw L;
    return pe && !pe.user && C && il(() => {
      S(), o && (C.resolved && M && c ? M.promises.add(o) : d.has(C) || (C.increment(), d.add(C)));
    }), x;
  }
  function z(C = !0) {
    if (C !== !1 && h) return;
    h = !1;
    const x = u ? u() : i;
    if (c = M && M.running, x == null || x === !1) {
      Q(o, De(O));
      return;
    }
    M && o && M.promises.delete(o);
    const L = l !== Pa ? l : De(
      () => r(x, {
        value: O(),
        refetching: C
      })
    );
    return bQ(L) ? (o = L, "value" in L ? (L.status === "success" ? Q(o, L.value, void 0, x) : Q(o, void 0, Mc(L.value), x), L) : (h = !0, queueMicrotask(() => h = !1), bt(() => {
      k(f ? "refreshing" : "pending"), b();
    }, !1), L.then(
      (_) => Q(L, _, void 0, x),
      (_) => Q(L, void 0, Mc(_), x)
    ))) : (Q(o, L, void 0, x), L);
  }
  Object.defineProperties(E, {
    state: {
      get: () => w()
    },
    error: {
      get: () => m()
    },
    loading: {
      get() {
        const C = w();
        return C === "pending" || C === "refreshing";
      }
    },
    latest: {
      get() {
        if (!f) return E();
        const C = m();
        if (C && !o) throw C;
        return O();
      }
    }
  });
  let N = oe;
  return u ? il(() => (N = oe, z(!1))) : z(!1), [
    E,
    {
      refetch: (C) => Tf(N, () => z(C)),
      mutate: p
    }
  ];
}
function ig(n) {
  return bt(n, !1);
}
function De(n) {
  if (pe === null) return n();
  const e = pe;
  pe = null;
  try {
    return n();
  } finally {
    pe = e;
  }
}
function Wi(n, e, t) {
  const i = Array.isArray(n);
  let r, s = t && t.defer;
  return (o) => {
    let l;
    if (i) {
      l = Array(n.length);
      for (let c = 0; c < n.length; c++) l[c] = n[c]();
    } else l = n();
    if (s)
      return s = !1, o;
    const a = De(() => e(l, r, o));
    return r = l, a;
  };
}
function As(n) {
  Vt(() => De(n));
}
function Bt(n) {
  return oe === null || (oe.cleanups === null ? oe.cleanups = [n] : oe.cleanups.push(n)), n;
}
function Nl() {
  return oe;
}
function Tf(n, e) {
  const t = oe, i = pe;
  oe = n, pe = null;
  try {
    return bt(e, !0);
  } catch (r) {
    Cf(r);
  } finally {
    oe = t, pe = i;
  }
}
function QQ(n) {
  if (M && M.running)
    return n(), M.done;
  const e = pe, t = oe;
  return Promise.resolve().then(() => {
    pe = e, oe = t;
    let i;
    return Si && (i = M || (M = {
      sources: /* @__PURE__ */ new Set(),
      effects: [],
      promises: /* @__PURE__ */ new Set(),
      disposed: /* @__PURE__ */ new Set(),
      queue: /* @__PURE__ */ new Set(),
      running: !0
    }), i.done || (i.done = new Promise((r) => i.resolve = r)), i.running = !0), bt(n, !1), pe = oe = null, i ? i.done : void 0;
  });
}
const [PV, Ju] = /* @__PURE__ */ G(!1);
function xQ(n) {
  He.push.apply(He, n), n.length = 0;
}
function _s(n, e) {
  const t = Symbol("context");
  return {
    id: t,
    Provider: PQ(t),
    defaultValue: n
  };
}
function ar(n) {
  let e;
  return oe && oe.context && (e = oe.context[n.id]) !== void 0 ? e : n.defaultValue;
}
function Gl(n) {
  const e = $e(n), t = $e(() => Lc(e()));
  return t.toArray = () => {
    const i = t();
    return Array.isArray(i) ? i : i != null ? [i] : [];
  }, t;
}
let Si;
function kQ() {
  return Si || (Si = _s());
}
function rg() {
  const n = M && M.running;
  if (this.sources && (n ? this.tState : this.state))
    if ((n ? this.tState : this.state) === Lt) cr(this);
    else {
      const e = tt;
      tt = null, bt(() => sl(this), !1), tt = e;
    }
  if (pe) {
    const e = this.observers ? this.observers.length : 0;
    pe.sources ? (pe.sources.push(this), pe.sourceSlots.push(e)) : (pe.sources = [this], pe.sourceSlots = [e]), this.observers ? (this.observers.push(pe), this.observerSlots.push(pe.sources.length - 1)) : (this.observers = [pe], this.observerSlots = [pe.sources.length - 1]);
  }
  return n && M.sources.has(this) ? this.tValue : this.value;
}
function sg(n, e, t) {
  let i = M && M.running && M.sources.has(n) ? n.tValue : n.value;
  if (!n.comparator || !n.comparator(i, e)) {
    if (M) {
      const r = M.running;
      (r || !t && M.sources.has(n)) && (M.sources.add(n), n.tValue = e), r || (n.value = e);
    } else n.value = e;
    n.observers && n.observers.length && bt(() => {
      for (let r = 0; r < n.observers.length; r += 1) {
        const s = n.observers[r], o = M && M.running;
        o && M.disposed.has(s) || ((o ? !s.tState : !s.state) && (s.pure ? tt.push(s) : He.push(s), s.observers && lg(s)), o ? s.tState = Lt : s.state = Lt);
      }
      if (tt.length > 1e6)
        throw tt = [], new Error();
    }, !1);
  }
  return e;
}
function cr(n) {
  if (!n.fn) return;
  Yn(n);
  const e = Yl;
  ed(
    n,
    M && M.running && M.sources.has(n) ? n.tValue : n.value,
    e
  ), M && !M.running && M.sources.has(n) && queueMicrotask(() => {
    bt(() => {
      M && (M.running = !0), pe = oe = n, ed(n, n.tValue, e), pe = oe = null;
    }, !1);
  });
}
function ed(n, e, t) {
  let i;
  const r = oe, s = pe;
  pe = oe = n;
  try {
    i = n.fn(e);
  } catch (o) {
    return n.pure && (M && M.running ? (n.tState = Lt, n.tOwned && n.tOwned.forEach(Yn), n.tOwned = void 0) : (n.state = Lt, n.owned && n.owned.forEach(Yn), n.owned = null)), n.updatedAt = t + 1, Cf(o);
  } finally {
    pe = s, oe = r;
  }
  (!n.updatedAt || n.updatedAt <= t) && (n.updatedAt != null && "observers" in n ? sg(n, i, !0) : M && M.running && n.pure ? (M.sources.add(n), n.tValue = i) : n.value = i, n.updatedAt = t);
}
function Fl(n, e, t, i = Lt, r) {
  const s = {
    fn: n,
    state: i,
    updatedAt: null,
    owned: null,
    sources: null,
    sourceSlots: null,
    cleanups: null,
    value: e,
    owner: oe,
    context: oe ? oe.context : null,
    pure: t
  };
  return M && M.running && (s.state = 0, s.tState = i), oe === null || oe !== tg && (M && M.running && oe.pure ? oe.tOwned ? oe.tOwned.push(s) : oe.tOwned = [s] : oe.owned ? oe.owned.push(s) : oe.owned = [s]), s;
}
function rl(n) {
  const e = M && M.running;
  if ((e ? n.tState : n.state) === 0) return;
  if ((e ? n.tState : n.state) === es) return sl(n);
  if (n.suspense && De(n.suspense.inFallback)) return n.suspense.effects.push(n);
  const t = [n];
  for (; (n = n.owner) && (!n.updatedAt || n.updatedAt < Yl); ) {
    if (e && M.disposed.has(n)) return;
    (e ? n.tState : n.state) && t.push(n);
  }
  for (let i = t.length - 1; i >= 0; i--) {
    if (n = t[i], e) {
      let r = n, s = t[i + 1];
      for (; (r = r.owner) && r !== s; )
        if (M.disposed.has(r)) return;
    }
    if ((e ? n.tState : n.state) === Lt)
      cr(n);
    else if ((e ? n.tState : n.state) === es) {
      const r = tt;
      tt = null, bt(() => sl(n, t[0]), !1), tt = r;
    }
  }
}
function bt(n, e) {
  if (tt) return n();
  let t = !1;
  e || (tt = []), He ? t = !0 : He = [], Yl++;
  try {
    const i = n();
    return wQ(t), i;
  } catch (i) {
    t || (He = null), tt = null, Cf(i);
  }
}
function wQ(n) {
  if (tt && (og(tt), tt = null), n) return;
  let e;
  if (M) {
    if (!M.promises.size && !M.queue.size) {
      const i = M.sources, r = M.disposed;
      He.push.apply(He, M.effects), e = M.resolve;
      for (const s of He)
        "tState" in s && (s.state = s.tState), delete s.tState;
      M = null, bt(() => {
        for (const s of r) Yn(s);
        for (const s of i) {
          if (s.value = s.tValue, s.owned)
            for (let o = 0, l = s.owned.length; o < l; o++) Yn(s.owned[o]);
          s.tOwned && (s.owned = s.tOwned), delete s.tValue, delete s.tOwned, s.tState = 0;
        }
        Ju(!1);
      }, !1);
    } else if (M.running) {
      M.running = !1, M.effects.push.apply(M.effects, He), He = null, Ju(!0);
      return;
    }
  }
  const t = He;
  He = null, t.length && bt(() => eg(t), !1), e && e();
}
function og(n) {
  for (let e = 0; e < n.length; e++) rl(n[e]);
}
function vQ(n) {
  let e, t = 0;
  for (e = 0; e < n.length; e++) {
    const i = n[e];
    i.user ? n[t++] = i : rl(i);
  }
  if (re.context) {
    if (re.count) {
      re.effects || (re.effects = []), re.effects.push(...n.slice(0, t));
      return;
    }
    qr();
  }
  for (re.effects && (re.done || !re.count) && (n = [...re.effects, ...n], t += re.effects.length, delete re.effects), e = 0; e < t; e++) rl(n[e]);
}
function sl(n, e) {
  const t = M && M.running;
  t ? n.tState = 0 : n.state = 0;
  for (let i = 0; i < n.sources.length; i += 1) {
    const r = n.sources[i];
    if (r.sources) {
      const s = t ? r.tState : r.state;
      s === Lt ? r !== e && (!r.updatedAt || r.updatedAt < Yl) && rl(r) : s === es && sl(r, e);
    }
  }
}
function lg(n) {
  const e = M && M.running;
  for (let t = 0; t < n.observers.length; t += 1) {
    const i = n.observers[t];
    (e ? !i.tState : !i.state) && (e ? i.tState = es : i.state = es, i.pure ? tt.push(i) : He.push(i), i.observers && lg(i));
  }
}
function Yn(n) {
  let e;
  if (n.sources)
    for (; n.sources.length; ) {
      const t = n.sources.pop(), i = n.sourceSlots.pop(), r = t.observers;
      if (r && r.length) {
        const s = r.pop(), o = t.observerSlots.pop();
        i < r.length && (s.sourceSlots[o] = i, r[i] = s, t.observerSlots[i] = o);
      }
    }
  if (n.tOwned) {
    for (e = n.tOwned.length - 1; e >= 0; e--) Yn(n.tOwned[e]);
    delete n.tOwned;
  }
  if (M && M.running && n.pure)
    ag(n, !0);
  else if (n.owned) {
    for (e = n.owned.length - 1; e >= 0; e--) Yn(n.owned[e]);
    n.owned = null;
  }
  if (n.cleanups) {
    for (e = n.cleanups.length - 1; e >= 0; e--) n.cleanups[e]();
    n.cleanups = null;
  }
  M && M.running ? n.tState = 0 : n.state = 0;
}
function ag(n, e) {
  if (e || (n.tState = 0, M.disposed.add(n)), n.owned)
    for (let t = 0; t < n.owned.length; t++) ag(n.owned[t]);
}
function Mc(n) {
  return n instanceof Error ? n : new Error(typeof n == "string" ? n : "Unknown error", {
    cause: n
  });
}
function Cf(n, e = oe) {
  throw Mc(n);
}
function Lc(n) {
  if (typeof n == "function" && !n.length) return Lc(n());
  if (Array.isArray(n)) {
    const e = [];
    for (let t = 0; t < n.length; t++) {
      const i = Lc(n[t]);
      Array.isArray(i) ? e.push.apply(e, i) : e.push(i);
    }
    return e;
  }
  return n;
}
function PQ(n, e) {
  return function(i) {
    let r;
    return Pe(
      () => r = De(() => (oe.context = {
        ...oe.context,
        [n]: i.value
      }, Gl(() => i.children))),
      void 0
    ), r;
  };
}
const $Q = Symbol("fallback");
function td(n) {
  for (let e = 0; e < n.length; e++) n[e]();
}
function TQ(n, e, t = {}) {
  let i = [], r = [], s = [], o = 0, l = e.length > 1 ? [] : null;
  return Bt(() => td(s)), () => {
    let a = n() || [], c = a.length, h, f;
    return a[yQ], De(() => {
      let d, O, p, m, y, S, b, w, k;
      if (c === 0)
        o !== 0 && (td(s), s = [], i = [], r = [], o = 0, l && (l = [])), t.fallback && (i = [$Q], r[0] = pi((Q) => (s[0] = Q, t.fallback())), o = 1);
      else if (o === 0) {
        for (r = new Array(c), f = 0; f < c; f++)
          i[f] = a[f], r[f] = pi(u);
        o = c;
      } else {
        for (p = new Array(c), m = new Array(c), l && (y = new Array(c)), S = 0, b = Math.min(o, c); S < b && i[S] === a[S]; S++) ;
        for (b = o - 1, w = c - 1; b >= S && w >= S && i[b] === a[w]; b--, w--)
          p[w] = r[b], m[w] = s[b], l && (y[w] = l[b]);
        for (d = /* @__PURE__ */ new Map(), O = new Array(w + 1), f = w; f >= S; f--)
          k = a[f], h = d.get(k), O[f] = h === void 0 ? -1 : h, d.set(k, f);
        for (h = S; h <= b; h++)
          k = i[h], f = d.get(k), f !== void 0 && f !== -1 ? (p[f] = r[h], m[f] = s[h], l && (y[f] = l[h]), f = O[f], d.set(k, f)) : s[h]();
        for (f = S; f < c; f++)
          f in p ? (r[f] = p[f], s[f] = m[f], l && (l[f] = y[f], l[f](f))) : r[f] = pi(u);
        r = r.slice(0, o = c), i = a.slice(0);
      }
      return r;
    });
    function u(d) {
      if (s[f] = d, l) {
        const [O, p] = G(f);
        return l[f] = p, e(a[f], O);
      }
      return e(a[f]);
    }
  };
}
function X(n, e) {
  return De(() => n(e || {}));
}
function Hs() {
  return !0;
}
const Vc = {
  get(n, e, t) {
    return e === tl ? t : n.get(e);
  },
  has(n, e) {
    return e === tl ? !0 : n.has(e);
  },
  set: Hs,
  deleteProperty: Hs,
  getOwnPropertyDescriptor(n, e) {
    return {
      configurable: !0,
      enumerable: !0,
      get() {
        return n.get(e);
      },
      set: Hs,
      deleteProperty: Hs
    };
  },
  ownKeys(n) {
    return n.keys();
  }
};
function $a(n) {
  return (n = typeof n == "function" ? n() : n) ? n : {};
}
function CQ() {
  for (let n = 0, e = this.length; n < e; ++n) {
    const t = this[n]();
    if (t !== void 0) return t;
  }
}
function Rf(...n) {
  let e = !1;
  for (let o = 0; o < n.length; o++) {
    const l = n[o];
    e = e || !!l && tl in l, n[o] = typeof l == "function" ? (e = !0, $e(l)) : l;
  }
  if (Jm && e)
    return new Proxy(
      {
        get(o) {
          for (let l = n.length - 1; l >= 0; l--) {
            const a = $a(n[l])[o];
            if (a !== void 0) return a;
          }
        },
        has(o) {
          for (let l = n.length - 1; l >= 0; l--)
            if (o in $a(n[l])) return !0;
          return !1;
        },
        keys() {
          const o = [];
          for (let l = 0; l < n.length; l++)
            o.push(...Object.keys($a(n[l])));
          return [...new Set(o)];
        }
      },
      Vc
    );
  const t = {}, i = /* @__PURE__ */ Object.create(null);
  for (let o = n.length - 1; o >= 0; o--) {
    const l = n[o];
    if (!l) continue;
    const a = Object.getOwnPropertyNames(l);
    for (let c = a.length - 1; c >= 0; c--) {
      const h = a[c];
      if (h === "__proto__" || h === "constructor") continue;
      const f = Object.getOwnPropertyDescriptor(l, h);
      if (!i[h])
        i[h] = f.get ? {
          enumerable: !0,
          configurable: !0,
          get: CQ.bind(t[h] = [f.get.bind(l)])
        } : f.value !== void 0 ? f : void 0;
      else {
        const u = t[h];
        u && (f.get ? u.push(f.get.bind(l)) : f.value !== void 0 && u.push(() => f.value));
      }
    }
  }
  const r = {}, s = Object.keys(i);
  for (let o = s.length - 1; o >= 0; o--) {
    const l = s[o], a = i[l];
    a && a.get ? Object.defineProperty(r, l, a) : r[l] = a ? a.value : void 0;
  }
  return r;
}
function RQ(n, ...e) {
  if (Jm && tl in n) {
    const r = new Set(e.length > 1 ? e.flat() : e[0]), s = e.map((o) => new Proxy(
      {
        get(l) {
          return o.includes(l) ? n[l] : void 0;
        },
        has(l) {
          return o.includes(l) && l in n;
        },
        keys() {
          return o.filter((l) => l in n);
        }
      },
      Vc
    ));
    return s.push(
      new Proxy(
        {
          get(o) {
            return r.has(o) ? void 0 : n[o];
          },
          has(o) {
            return r.has(o) ? !1 : o in n;
          },
          keys() {
            return Object.keys(n).filter((o) => !r.has(o));
          }
        },
        Vc
      )
    ), s;
  }
  const t = {}, i = e.map(() => ({}));
  for (const r of Object.getOwnPropertyNames(n)) {
    const s = Object.getOwnPropertyDescriptor(n, r), o = !s.get && !s.set && s.enumerable && s.writable && s.configurable;
    let l = !1, a = 0;
    for (const c of e)
      c.includes(r) && (l = !0, o ? i[a][r] = s.value : Object.defineProperty(i[a], r, s)), ++a;
    l || (o ? t[r] = s.value : Object.defineProperty(t, r, s));
  }
  return [...i, t];
}
let EQ = 0;
function AQ() {
  return re.context ? re.getNextContextId() : `cl-${EQ++}`;
}
const _Q = (n) => `Stale read from <${n}>.`;
function ol(n) {
  const e = "fallback" in n && {
    fallback: () => n.fallback
  };
  return $e(TQ(() => n.each, n.children, e || void 0));
}
function Zt(n) {
  const e = n.keyed, t = $e(() => n.when, void 0, void 0), i = e ? t : $e(t, void 0, {
    equals: (r, s) => !r == !s
  });
  return $e(
    () => {
      const r = i();
      if (r) {
        const s = n.children;
        return typeof s == "function" && s.length > 0 ? De(
          () => s(
            e ? r : () => {
              if (!De(i)) throw _Q("Show");
              return t();
            }
          )
        ) : s;
      }
      return n.fallback;
    },
    void 0,
    void 0
  );
}
const XQ = /* @__PURE__ */ _s();
function qQ(n) {
  let e = 0, t, i, r, s, o;
  const [l, a] = G(!1), c = kQ(), h = {
    increment: () => {
      ++e === 1 && a(!0);
    },
    decrement: () => {
      --e === 0 && a(!1);
    },
    inFallback: l,
    effects: [],
    resolved: !1
  }, f = Nl();
  if (re.context && re.load) {
    const O = re.getContextId();
    let p = re.load(O);
    if (p && (typeof p != "object" || p.status !== "success" ? r = p : re.gather(O)), r && r !== "$$f") {
      const [m, y] = G(void 0, {
        equals: !1
      });
      s = m, r.then(
        () => {
          if (re.done) return y();
          re.gather(O), qr(i), y(), qr();
        },
        (S) => {
          o = S, y();
        }
      );
    }
  }
  const u = ar(XQ);
  u && (t = u.register(h.inFallback));
  let d;
  return Bt(() => d && d()), X(c.Provider, {
    value: h,
    get children() {
      return $e(() => {
        if (o) throw o;
        if (i = re.context, s)
          return s(), s = void 0;
        i && r === "$$f" && qr();
        const O = $e(() => n.children);
        return $e((p) => {
          const m = h.inFallback(), { showContent: y = !0, showFallback: S = !0 } = t ? t() : {};
          if ((!m || r && r !== "$$f") && y)
            return h.resolved = !0, d && d(), d = i = r = void 0, xQ(h.effects), O();
          if (S)
            return d ? p : pi((b) => (d = b, i && (qr({
              id: i.id + "F",
              count: 0
            }), i = void 0), n.fallback), f);
        });
      });
    }
  });
}
const ZQ = [
  "allowfullscreen",
  "async",
  "autofocus",
  "autoplay",
  "checked",
  "controls",
  "default",
  "disabled",
  "formnovalidate",
  "hidden",
  "indeterminate",
  "inert",
  "ismap",
  "loop",
  "multiple",
  "muted",
  "nomodule",
  "novalidate",
  "open",
  "playsinline",
  "readonly",
  "required",
  "reversed",
  "seamless",
  "selected"
], MQ = /* @__PURE__ */ new Set([
  "className",
  "value",
  "readOnly",
  "noValidate",
  "formNoValidate",
  "isMap",
  "noModule",
  "playsInline",
  ...ZQ
]), LQ = /* @__PURE__ */ new Set([
  "innerHTML",
  "textContent",
  "innerText",
  "children"
]), VQ = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(null), {
  className: "class",
  htmlFor: "for"
}), BQ = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(null), {
  class: "className",
  novalidate: {
    $: "noValidate",
    FORM: 1
  },
  formnovalidate: {
    $: "formNoValidate",
    BUTTON: 1,
    INPUT: 1
  },
  ismap: {
    $: "isMap",
    IMG: 1
  },
  nomodule: {
    $: "noModule",
    SCRIPT: 1
  },
  playsinline: {
    $: "playsInline",
    VIDEO: 1
  },
  readonly: {
    $: "readOnly",
    INPUT: 1,
    TEXTAREA: 1
  }
});
function WQ(n, e) {
  const t = BQ[n];
  return typeof t == "object" ? t[e] ? t.$ : void 0 : t;
}
const zQ = /* @__PURE__ */ new Set([
  "beforeinput",
  "click",
  "dblclick",
  "contextmenu",
  "focusin",
  "focusout",
  "input",
  "keydown",
  "keyup",
  "mousedown",
  "mousemove",
  "mouseout",
  "mouseover",
  "mouseup",
  "pointerdown",
  "pointermove",
  "pointerout",
  "pointerover",
  "pointerup",
  "touchend",
  "touchmove",
  "touchstart"
]), DQ = {
  xlink: "http://www.w3.org/1999/xlink",
  xml: "http://www.w3.org/XML/1998/namespace"
}, bi = (n) => $e(() => n());
function IQ(n, e, t) {
  let i = t.length, r = e.length, s = i, o = 0, l = 0, a = e[r - 1].nextSibling, c = null;
  for (; o < r || l < s; ) {
    if (e[o] === t[l]) {
      o++, l++;
      continue;
    }
    for (; e[r - 1] === t[s - 1]; )
      r--, s--;
    if (r === o) {
      const h = s < i ? l ? t[l - 1].nextSibling : t[s - l] : a;
      for (; l < s; ) n.insertBefore(t[l++], h);
    } else if (s === l)
      for (; o < r; )
        (!c || !c.has(e[o])) && e[o].remove(), o++;
    else if (e[o] === t[s - 1] && t[l] === e[r - 1]) {
      const h = e[--r].nextSibling;
      n.insertBefore(t[l++], e[o++].nextSibling), n.insertBefore(t[--s], h), e[r] = t[s];
    } else {
      if (!c) {
        c = /* @__PURE__ */ new Map();
        let f = l;
        for (; f < s; ) c.set(t[f], f++);
      }
      const h = c.get(e[o]);
      if (h != null)
        if (l < h && h < s) {
          let f = o, u = 1, d;
          for (; ++f < r && f < s && !((d = c.get(e[f])) == null || d !== h + u); )
            u++;
          if (u > h - l) {
            const O = e[o];
            for (; l < h; ) n.insertBefore(t[l++], O);
          } else n.replaceChild(t[l++], e[o++]);
        } else o++;
      else e[o++].remove();
    }
  }
}
const nd = "_$DX_DELEGATE";
function jQ(n, e, t, i = {}) {
  let r;
  return pi((s) => {
    r = s, e === document ? n() : I(e, n(), e.firstChild ? null : void 0, t);
  }, i.owner), () => {
    r(), e.textContent = "";
  };
}
function U(n, e, t, i) {
  let r;
  const s = () => {
    const l = i ? document.createElementNS("http://www.w3.org/1998/Math/MathML", "template") : document.createElement("template");
    return l.innerHTML = n, t ? l.content.firstChild.firstChild : i ? l.firstChild : l.content.firstChild;
  }, o = e ? () => De(() => document.importNode(r || (r = s()), !0)) : () => (r || (r = s())).cloneNode(!0);
  return o.cloneNode = o, o;
}
function Ut(n, e = window.document) {
  const t = e[nd] || (e[nd] = /* @__PURE__ */ new Set());
  for (let i = 0, r = n.length; i < r; i++) {
    const s = n[i];
    t.has(s) || (t.add(s), e.addEventListener(s, HQ));
  }
}
function Re(n, e, t) {
  hr(n) || (t == null ? n.removeAttribute(e) : n.setAttribute(e, t));
}
function UQ(n, e, t, i) {
  hr(n) || (i == null ? n.removeAttributeNS(e, t) : n.setAttributeNS(e, t, i));
}
function YQ(n, e, t) {
  hr(n) || (t ? n.setAttribute(e, "") : n.removeAttribute(e));
}
function zi(n, e) {
  hr(n) || (e == null ? n.removeAttribute("class") : n.className = e);
}
function Ai(n, e, t, i) {
  if (i)
    Array.isArray(t) ? (n[`$$${e}`] = t[0], n[`$$${e}Data`] = t[1]) : n[`$$${e}`] = t;
  else if (Array.isArray(t)) {
    const r = t[0];
    n.addEventListener(e, t[0] = (s) => r.call(n, t[1], s));
  } else n.addEventListener(e, t, typeof t != "function" && t);
}
function ll(n, e, t = {}) {
  const i = Object.keys(e || {}), r = Object.keys(t);
  let s, o;
  for (s = 0, o = r.length; s < o; s++) {
    const l = r[s];
    !l || l === "undefined" || e[l] || (id(n, l, !1), delete t[l]);
  }
  for (s = 0, o = i.length; s < o; s++) {
    const l = i[s], a = !!e[l];
    !l || l === "undefined" || t[l] === a || !a || (id(n, l, !0), t[l] = a);
  }
  return t;
}
function NQ(n, e, t) {
  if (!e) return t ? Re(n, "style") : e;
  const i = n.style;
  if (typeof e == "string") return i.cssText = e;
  typeof t == "string" && (i.cssText = t = void 0), t || (t = {}), e || (e = {});
  let r, s;
  for (s in t)
    e[s] == null && i.removeProperty(s), delete t[s];
  for (s in e)
    r = e[s], r !== t[s] && (i.setProperty(s, r), t[s] = r);
  return t;
}
function cg(n, e = {}, t, i) {
  const r = {};
  return i || Pe(
    () => r.children = ts(n, e.children, r.children)
  ), Pe(() => typeof e.ref == "function" && an(e.ref, n)), Pe(() => GQ(n, e, t, !0, r, !0)), r;
}
function an(n, e, t) {
  return De(() => n(e, t));
}
function I(n, e, t, i) {
  if (t !== void 0 && !i && (i = []), typeof e != "function") return ts(n, e, i, t);
  Pe((r) => ts(n, e(), r, t), i);
}
function GQ(n, e, t, i, r = {}, s = !1) {
  e || (e = {});
  for (const o in r)
    if (!(o in e)) {
      if (o === "children") continue;
      r[o] = rd(n, o, null, r[o], t, s, e);
    }
  for (const o in e) {
    if (o === "children")
      continue;
    const l = e[o];
    r[o] = rd(n, o, l, r[o], t, s, e);
  }
}
function hr(n) {
  return !!re.context && !re.done && (!n || n.isConnected);
}
function FQ(n) {
  return n.toLowerCase().replace(/-([a-z])/g, (e, t) => t.toUpperCase());
}
function id(n, e, t) {
  const i = e.trim().split(/\s+/);
  for (let r = 0, s = i.length; r < s; r++)
    n.classList.toggle(i[r], t);
}
function rd(n, e, t, i, r, s, o) {
  let l, a, c, h, f;
  if (e === "style") return NQ(n, t, i);
  if (e === "classList") return ll(n, t, i);
  if (t === i) return i;
  if (e === "ref")
    s || t(n);
  else if (e.slice(0, 3) === "on:") {
    const u = e.slice(3);
    i && n.removeEventListener(u, i, typeof i != "function" && i), t && n.addEventListener(u, t, typeof t != "function" && t);
  } else if (e.slice(0, 10) === "oncapture:") {
    const u = e.slice(10);
    i && n.removeEventListener(u, i, !0), t && n.addEventListener(u, t, !0);
  } else if (e.slice(0, 2) === "on") {
    const u = e.slice(2).toLowerCase(), d = zQ.has(u);
    if (!d && i) {
      const O = Array.isArray(i) ? i[0] : i;
      n.removeEventListener(u, O);
    }
    (d || t) && (Ai(n, u, t, d), d && Ut([u]));
  } else if (e.slice(0, 5) === "attr:")
    Re(n, e.slice(5), t);
  else if (e.slice(0, 5) === "bool:")
    YQ(n, e.slice(5), t);
  else if ((f = e.slice(0, 5) === "prop:") || (c = LQ.has(e)) || !r && ((h = WQ(e, n.tagName)) || (a = MQ.has(e))) || (l = n.nodeName.includes("-") || "is" in o)) {
    if (f)
      e = e.slice(5), a = !0;
    else if (hr(n)) return t;
    e === "class" || e === "className" ? zi(n, t) : l && !a && !c ? n[FQ(e)] = t : n[h || e] = t;
  } else {
    const u = r && e.indexOf(":") > -1 && DQ[e.split(":")[0]];
    u ? UQ(n, u, e, t) : Re(n, VQ[e] || e, t);
  }
  return t;
}
function HQ(n) {
  if (re.registry && re.events && re.events.find(([a, c]) => c === n))
    return;
  let e = n.target;
  const t = `$$${n.type}`, i = n.target, r = n.currentTarget, s = (a) => Object.defineProperty(n, "target", {
    configurable: !0,
    value: a
  }), o = () => {
    const a = e[t];
    if (a && !e.disabled) {
      const c = e[`${t}Data`];
      if (c !== void 0 ? a.call(e, c, n) : a.call(e, n), n.cancelBubble) return;
    }
    return e.host && typeof e.host != "string" && !e.host._$host && e.contains(n.target) && s(e.host), !0;
  }, l = () => {
    for (; o() && (e = e._$host || e.parentNode || e.host); ) ;
  };
  if (Object.defineProperty(n, "currentTarget", {
    configurable: !0,
    get() {
      return e || document;
    }
  }), re.registry && !re.done && (re.done = _$HY.done = !0), n.composedPath) {
    const a = n.composedPath();
    s(a[0]);
    for (let c = 0; c < a.length - 2 && (e = a[c], !!o()); c++) {
      if (e._$host) {
        e = e._$host, l();
        break;
      }
      if (e.parentNode === r)
        break;
    }
  } else l();
  s(i);
}
function ts(n, e, t, i, r) {
  const s = hr(n);
  if (s) {
    !t && (t = [...n.childNodes]);
    let a = [];
    for (let c = 0; c < t.length; c++) {
      const h = t[c];
      h.nodeType === 8 && h.data.slice(0, 2) === "!$" ? h.remove() : a.push(h);
    }
    t = a;
  }
  for (; typeof t == "function"; ) t = t();
  if (e === t) return t;
  const o = typeof e, l = i !== void 0;
  if (n = l && t[0] && t[0].parentNode || n, o === "string" || o === "number") {
    if (s || o === "number" && (e = e.toString(), e === t))
      return t;
    if (l) {
      let a = t[0];
      a && a.nodeType === 3 ? a.data !== e && (a.data = e) : a = document.createTextNode(e), t = Ci(n, t, i, a);
    } else
      t !== "" && typeof t == "string" ? t = n.firstChild.data = e : t = n.textContent = e;
  } else if (e == null || o === "boolean") {
    if (s) return t;
    t = Ci(n, t, i);
  } else {
    if (o === "function")
      return Pe(() => {
        let a = e();
        for (; typeof a == "function"; ) a = a();
        t = ts(n, a, t, i);
      }), () => t;
    if (Array.isArray(e)) {
      const a = [], c = t && Array.isArray(t);
      if (Bc(a, e, t, r))
        return Pe(() => t = ts(n, a, t, i, !0)), () => t;
      if (s) {
        if (!a.length) return t;
        if (i === void 0) return t = [...n.childNodes];
        let h = a[0];
        if (h.parentNode !== n) return t;
        const f = [h];
        for (; (h = h.nextSibling) !== i; ) f.push(h);
        return t = f;
      }
      if (a.length === 0) {
        if (t = Ci(n, t, i), l) return t;
      } else c ? t.length === 0 ? sd(n, a, i) : IQ(n, t, a) : (t && Ci(n), sd(n, a));
      t = a;
    } else if (e.nodeType) {
      if (s && e.parentNode) return t = l ? [e] : e;
      if (Array.isArray(t)) {
        if (l) return t = Ci(n, t, i, e);
        Ci(n, t, null, e);
      } else t == null || t === "" || !n.firstChild ? n.appendChild(e) : n.replaceChild(e, n.firstChild);
      t = e;
    }
  }
  return t;
}
function Bc(n, e, t, i) {
  let r = !1;
  for (let s = 0, o = e.length; s < o; s++) {
    let l = e[s], a = t && t[n.length], c;
    if (!(l == null || l === !0 || l === !1)) if ((c = typeof l) == "object" && l.nodeType)
      n.push(l);
    else if (Array.isArray(l))
      r = Bc(n, l, a) || r;
    else if (c === "function")
      if (i) {
        for (; typeof l == "function"; ) l = l();
        r = Bc(
          n,
          Array.isArray(l) ? l : [l],
          Array.isArray(a) ? a : [a]
        ) || r;
      } else
        n.push(l), r = !0;
    else {
      const h = String(l);
      a && a.nodeType === 3 && a.data === h ? n.push(a) : n.push(document.createTextNode(h));
    }
  }
  return r;
}
function sd(n, e, t = null) {
  for (let i = 0, r = e.length; i < r; i++) n.insertBefore(e[i], t);
}
function Ci(n, e, t, i) {
  if (t === void 0) return n.textContent = "";
  const r = i || document.createTextNode("");
  if (e.length) {
    let s = !1;
    for (let o = e.length - 1; o >= 0; o--) {
      const l = e[o];
      if (r !== l) {
        const a = l.parentNode === n;
        !s && !o ? a ? n.replaceChild(r, l) : n.insertBefore(r, t) : a && l.remove();
      } else s = !0;
    }
  } else n.insertBefore(r, t);
  return [r];
}
const hg = !1;
function fg() {
  let n = /* @__PURE__ */ new Set();
  function e(r) {
    return n.add(r), () => n.delete(r);
  }
  let t = !1;
  function i(r, s) {
    if (t)
      return !(t = !1);
    const o = {
      to: r,
      options: s,
      defaultPrevented: !1,
      preventDefault: () => o.defaultPrevented = !0
    };
    for (const l of n)
      l.listener({
        ...o,
        from: l.location,
        retry: (a) => {
          a && (t = !0), l.navigate(r, { ...s, resolve: !1 });
        }
      });
    return !o.defaultPrevented;
  }
  return {
    subscribe: e,
    confirm: i
  };
}
let Wc;
function Ef() {
  (!window.history.state || window.history.state._depth == null) && window.history.replaceState({ ...window.history.state, _depth: window.history.length - 1 }, ""), Wc = window.history.state._depth;
}
Ef();
function KQ(n) {
  return {
    ...n,
    _depth: window.history.state && window.history.state._depth
  };
}
function JQ(n, e) {
  let t = !1;
  return () => {
    const i = Wc;
    Ef();
    const r = i == null ? null : Wc - i;
    if (t) {
      t = !1;
      return;
    }
    r && e(r) ? (t = !0, window.history.go(-r)) : n();
  };
}
const ex = /^(?:[a-z0-9]+:)?\/\//i, tx = /^\/+|(\/)\/+$/g, ug = "http://sr";
function zr(n, e = !1) {
  const t = n.replace(tx, "$1");
  return t ? e || /^[?#]/.test(t) ? t : "/" + t : "";
}
function $o(n, e, t) {
  if (ex.test(e))
    return;
  const i = zr(n), r = t && zr(t);
  let s = "";
  return !r || e.startsWith("/") ? s = i : r.toLowerCase().indexOf(i.toLowerCase()) !== 0 ? s = i + r : s = r, (s || "/") + zr(e, !s);
}
function nx(n, e) {
  if (n == null)
    throw new Error(e);
  return n;
}
function ix(n, e) {
  return zr(n).replace(/\/*(\*.*)?$/g, "") + zr(e);
}
function dg(n) {
  const e = {};
  return n.searchParams.forEach((t, i) => {
    i in e ? Array.isArray(e[i]) ? e[i].push(t) : e[i] = [e[i], t] : e[i] = t;
  }), e;
}
function rx(n, e, t) {
  const [i, r] = n.split("/*", 2), s = i.split("/").filter(Boolean), o = s.length;
  return (l) => {
    const a = l.split("/").filter(Boolean), c = a.length - o;
    if (c < 0 || c > 0 && r === void 0 && !e)
      return null;
    const h = {
      path: o ? "" : "/",
      params: {}
    }, f = (u) => t === void 0 ? void 0 : t[u];
    for (let u = 0; u < o; u++) {
      const d = s[u], O = d[0] === ":", p = O ? a[u] : a[u].toLowerCase(), m = O ? d.slice(1) : d.toLowerCase();
      if (O && Ta(p, f(m)))
        h.params[m] = p;
      else if (O || !Ta(p, m))
        return null;
      h.path += `/${p}`;
    }
    if (r) {
      const u = c ? a.slice(-c).join("/") : "";
      if (Ta(u, f(r)))
        h.params[r] = u;
      else
        return null;
    }
    return h;
  };
}
function Ta(n, e) {
  const t = (i) => i === n;
  return e === void 0 ? !0 : typeof e == "string" ? t(e) : typeof e == "function" ? e(n) : Array.isArray(e) ? e.some(t) : e instanceof RegExp ? e.test(n) : !1;
}
function sx(n) {
  const [e, t] = n.pattern.split("/*", 2), i = e.split("/").filter(Boolean);
  return i.reduce((r, s) => r + (s.startsWith(":") ? 2 : 3), i.length - (t === void 0 ? 0 : 1));
}
function Og(n) {
  const e = /* @__PURE__ */ new Map(), t = Nl();
  return new Proxy({}, {
    get(i, r) {
      return e.has(r) || Tf(t, () => e.set(r, $e(() => n()[r]))), e.get(r)();
    },
    getOwnPropertyDescriptor() {
      return {
        enumerable: !0,
        configurable: !0
      };
    },
    ownKeys() {
      return Reflect.ownKeys(n());
    }
  });
}
function ox(n, e) {
  const t = new URLSearchParams(n);
  Object.entries(e).forEach(([r, s]) => {
    s == null || s === "" || s instanceof Array && !s.length ? t.delete(r) : s instanceof Array ? (t.delete(r), s.forEach((o) => {
      t.append(r, String(o));
    })) : t.set(r, String(s));
  });
  const i = t.toString();
  return i ? `?${i}` : "";
}
function pg(n) {
  let e = /(\/?\:[^\/]+)\?/.exec(n);
  if (!e)
    return [n];
  let t = n.slice(0, e.index), i = n.slice(e.index + e[0].length);
  const r = [t, t += e[1]];
  for (; e = /^(\/\:[^\/]+)\?/.exec(i); )
    r.push(t += e[1]), i = i.slice(e[0].length);
  return pg(i).reduce((s, o) => [...s, ...r.map((l) => l + o)], []);
}
const lx = 100, mg = _s(), gg = _s(), Af = () => nx(ar(mg), "<A> and 'use' router primitives can be only used inside a Route."), Qt = () => Af().navigatorFactory(), fr = () => Af().location, Xs = () => Af().params, ax = () => {
  const n = fr(), e = Qt(), t = (i, r) => {
    const s = De(() => ox(n.search, i) + n.hash);
    e(s, {
      scroll: !1,
      resolve: !1,
      ...r
    });
  };
  return [n.query, t];
};
function cx(n, e = "") {
  const { component: t, preload: i, load: r, children: s, info: o } = n, l = !s || Array.isArray(s) && !s.length, a = {
    key: n,
    component: t,
    preload: i || r,
    info: o
  };
  return yg(n.path).reduce((c, h) => {
    for (const f of pg(h)) {
      const u = ix(e, f);
      let d = l ? u : u.split("/*", 1)[0];
      d = d.split("/").map((O) => O.startsWith(":") || O.startsWith("*") ? O : encodeURIComponent(O)).join("/"), c.push({
        ...a,
        originalPath: h,
        pattern: d,
        matcher: rx(d, !l, n.matchFilters)
      });
    }
    return c;
  }, []);
}
function hx(n, e = 0) {
  return {
    routes: n,
    score: sx(n[n.length - 1]) * 1e4 - e,
    matcher(t) {
      const i = [];
      for (let r = n.length - 1; r >= 0; r--) {
        const s = n[r], o = s.matcher(t);
        if (!o)
          return null;
        i.unshift({
          ...o,
          route: s
        });
      }
      return i;
    }
  };
}
function yg(n) {
  return Array.isArray(n) ? n : [n];
}
function Sg(n, e = "", t = [], i = []) {
  const r = yg(n);
  for (let s = 0, o = r.length; s < o; s++) {
    const l = r[s];
    if (l && typeof l == "object") {
      l.hasOwnProperty("path") || (l.path = "");
      const a = cx(l, e);
      for (const c of a) {
        t.push(c);
        const h = Array.isArray(l.children) && l.children.length === 0;
        if (l.children && !h)
          Sg(l.children, c.pattern, t, i);
        else {
          const f = hx([...t], i.length);
          i.push(f);
        }
        t.pop();
      }
    }
  }
  return t.length ? i : i.sort((s, o) => o.score - s.score);
}
function Ca(n, e) {
  for (let t = 0, i = n.length; t < i; t++) {
    const r = n[t].matcher(e);
    if (r)
      return r;
  }
  return [];
}
function fx(n, e, t) {
  const i = new URL(ug), r = $e((h) => {
    const f = n();
    try {
      return new URL(f, i);
    } catch {
      return console.error(`Invalid path ${f}`), h;
    }
  }, i, {
    equals: (h, f) => h.href === f.href
  }), s = $e(() => r().pathname), o = $e(() => r().search, !0), l = $e(() => r().hash), a = () => "", c = Wi(o, () => dg(r()));
  return {
    get pathname() {
      return s();
    },
    get search() {
      return o();
    },
    get hash() {
      return l();
    },
    get state() {
      return e();
    },
    get key() {
      return a();
    },
    query: t ? t(c) : Og(c)
  };
}
let oi;
function ux() {
  return oi;
}
function dx(n, e, t, i = {}) {
  const { signal: [r, s], utils: o = {} } = n, l = o.parsePath || ((_) => _), a = o.renderPath || ((_) => _), c = o.beforeLeave || fg(), h = $o("", i.base || "");
  if (h === void 0)
    throw new Error(`${h} is not a valid base path`);
  h && !r().value && s({ value: h, replace: !0, scroll: !1 });
  const [f, u] = G(!1);
  let d;
  const O = (_, V) => {
    V.value === p() && V.state === y() || (d === void 0 && u(!0), oi = _, d = V, QQ(() => {
      d === V && (m(d.value), S(d.state), k[1]((ee) => ee.filter((ye) => ye.pending)));
    }).finally(() => {
      d === V && ig(() => {
        oi = void 0, _ === "navigate" && x(d), u(!1), d = void 0;
      });
    }));
  }, [p, m] = G(r().value), [y, S] = G(r().state), b = fx(p, y, o.queryWrapper), w = [], k = G([]), Q = $e(() => typeof i.transformUrl == "function" ? Ca(e(), i.transformUrl(b.pathname)) : Ca(e(), b.pathname)), P = () => {
    const _ = Q(), V = {};
    for (let ee = 0; ee < _.length; ee++)
      Object.assign(V, _[ee].params);
    return V;
  }, E = o.paramsWrapper ? o.paramsWrapper(P, e) : Og(P), z = {
    pattern: h,
    path: () => h,
    outlet: () => null,
    resolvePath(_) {
      return $o(h, _);
    }
  };
  return Pe(Wi(r, (_) => O("native", _), { defer: !0 })), {
    base: z,
    location: b,
    params: E,
    isRouting: f,
    renderPath: a,
    parsePath: l,
    navigatorFactory: C,
    matches: Q,
    beforeLeave: c,
    preloadRoute: L,
    singleFlight: i.singleFlight === void 0 ? !0 : i.singleFlight,
    submissions: k
  };
  function N(_, V, ee) {
    De(() => {
      if (typeof V == "number") {
        V && (o.go ? o.go(V) : console.warn("Router integration does not support relative routing"));
        return;
      }
      const ye = !V || V[0] === "?", { replace: H, resolve: K, scroll: le, state: ne } = {
        replace: !1,
        resolve: !ye,
        scroll: !0,
        ...ee
      }, T = K ? _.resolvePath(V) : $o(ye && b.pathname || "", V);
      if (T === void 0)
        throw new Error(`Path '${V}' is not a routable path`);
      if (w.length >= lx)
        throw new Error("Too many redirects");
      const D = p();
      (T !== D || ne !== y()) && (hg || c.confirm(T, ee) && (w.push({ value: D, replace: H, scroll: le, state: y() }), O("navigate", {
        value: T,
        state: ne
      })));
    });
  }
  function C(_) {
    return _ = _ || ar(gg) || z, (V, ee) => N(_, V, ee);
  }
  function x(_) {
    const V = w[0];
    V && (s({
      ..._,
      replace: V.replace,
      scroll: V.scroll
    }), w.length = 0);
  }
  function L(_, V) {
    const ee = Ca(e(), _.pathname), ye = oi;
    oi = "preload";
    for (let H in ee) {
      const { route: K, params: le } = ee[H];
      K.component && K.component.preload && K.component.preload();
      const { preload: ne } = K;
      V && ne && Tf(t(), () => ne({
        params: le,
        location: {
          pathname: _.pathname,
          search: _.search,
          hash: _.hash,
          query: dg(_),
          state: null,
          key: ""
        },
        intent: "preload"
      }));
    }
    oi = ye;
  }
}
function Ox(n, e, t, i) {
  const { base: r, location: s, params: o } = n, { pattern: l, component: a, preload: c } = i().route, h = $e(() => i().path);
  a && a.preload && a.preload();
  const f = c ? c({ params: o, location: s, intent: oi || "initial" }) : void 0;
  return {
    parent: e,
    pattern: l,
    path: h,
    outlet: () => a ? X(a, {
      params: o,
      location: s,
      data: f,
      get children() {
        return t();
      }
    }) : t(),
    resolvePath(d) {
      return $o(r.path(), d, h());
    }
  };
}
const px = (n) => (e) => {
  const {
    base: t
  } = e, i = Gl(() => e.children), r = $e(() => Sg(i(), e.base || ""));
  let s;
  const o = dx(n, r, () => s, {
    base: t,
    singleFlight: e.singleFlight,
    transformUrl: e.transformUrl
  });
  return n.create && n.create(o), X(mg.Provider, {
    value: o,
    get children() {
      return X(mx, {
        routerState: o,
        get root() {
          return e.root;
        },
        get preload() {
          return e.rootPreload || e.rootLoad;
        },
        get children() {
          return [bi(() => (s = Nl()) && null), X(gx, {
            routerState: o,
            get branches() {
              return r();
            }
          })];
        }
      });
    }
  });
};
function mx(n) {
  const e = n.routerState.location, t = n.routerState.params, i = $e(() => n.preload && De(() => {
    n.preload({
      params: t,
      location: e,
      intent: ux() || "initial"
    });
  }));
  return X(Zt, {
    get when() {
      return n.root;
    },
    keyed: !0,
    get fallback() {
      return n.children;
    },
    children: (r) => X(r, {
      params: t,
      location: e,
      get data() {
        return i();
      },
      get children() {
        return n.children;
      }
    })
  });
}
function gx(n) {
  const e = [];
  let t;
  const i = $e(Wi(n.routerState.matches, (r, s, o) => {
    let l = s && r.length === s.length;
    const a = [];
    for (let c = 0, h = r.length; c < h; c++) {
      const f = s && s[c], u = r[c];
      o && f && u.route.key === f.route.key ? a[c] = o[c] : (l = !1, e[c] && e[c](), pi((d) => {
        e[c] = d, a[c] = Ox(n.routerState, a[c - 1] || n.routerState.base, od(() => i()[c + 1]), () => n.routerState.matches()[c]);
      }));
    }
    return e.splice(r.length).forEach((c) => c()), o && l ? o : (t = a[0], a);
  }));
  return od(() => i() && t)();
}
const od = (n) => () => X(Zt, {
  get when() {
    return n();
  },
  keyed: !0,
  children: (e) => X(gg.Provider, {
    value: e,
    get children() {
      return e.outlet();
    }
  })
}), Ln = (n) => {
  const e = Gl(() => n.children);
  return Rf(n, {
    get children() {
      return e();
    }
  });
};
function yx([n, e], t, i) {
  return [n, i ? (r) => e(i(r)) : e];
}
function Sx(n) {
  let e = !1;
  const t = (r) => typeof r == "string" ? { value: r } : r, i = yx(G(t(n.get()), {
    equals: (r, s) => r.value === s.value && r.state === s.state
  }), void 0, (r) => (!e && n.set(r), re.registry && !re.done && (re.done = !0), r));
  return n.init && Bt(n.init((r = n.get()) => {
    e = !0, i[1](t(r)), e = !1;
  })), px({
    signal: i,
    create: n.create,
    utils: n.utils
  });
}
function bx(n, e, t) {
  return n.addEventListener(e, t), () => n.removeEventListener(e, t);
}
function Qx(n, e) {
  const t = n && document.getElementById(n);
  t ? t.scrollIntoView() : e && window.scrollTo(0, 0);
}
const xx = /* @__PURE__ */ new Map();
function kx(n = !0, e = !1, t = "/_server", i) {
  return (r) => {
    const s = r.base.path(), o = r.navigatorFactory(r.base);
    let l, a;
    function c(p) {
      return p.namespaceURI === "http://www.w3.org/2000/svg";
    }
    function h(p) {
      if (p.defaultPrevented || p.button !== 0 || p.metaKey || p.altKey || p.ctrlKey || p.shiftKey)
        return;
      const m = p.composedPath().find((Q) => Q instanceof Node && Q.nodeName.toUpperCase() === "A");
      if (!m || e && !m.hasAttribute("link"))
        return;
      const y = c(m), S = y ? m.href.baseVal : m.href;
      if ((y ? m.target.baseVal : m.target) || !S && !m.hasAttribute("state"))
        return;
      const w = (m.getAttribute("rel") || "").split(/\s+/);
      if (m.hasAttribute("download") || w && w.includes("external"))
        return;
      const k = y ? new URL(S, document.baseURI) : new URL(S);
      if (!(k.origin !== window.location.origin || s && k.pathname && !k.pathname.toLowerCase().startsWith(s.toLowerCase())))
        return [m, k];
    }
    function f(p) {
      const m = h(p);
      if (!m)
        return;
      const [y, S] = m, b = r.parsePath(S.pathname + S.search + S.hash), w = y.getAttribute("state");
      p.preventDefault(), o(b, {
        resolve: !1,
        replace: y.hasAttribute("replace"),
        scroll: !y.hasAttribute("noscroll"),
        state: w ? JSON.parse(w) : void 0
      });
    }
    function u(p) {
      const m = h(p);
      if (!m)
        return;
      const [y, S] = m;
      i && (S.pathname = i(S.pathname)), r.preloadRoute(S, y.getAttribute("preload") !== "false");
    }
    function d(p) {
      clearTimeout(l);
      const m = h(p);
      if (!m)
        return a = null;
      const [y, S] = m;
      a !== y && (i && (S.pathname = i(S.pathname)), l = setTimeout(() => {
        r.preloadRoute(S, y.getAttribute("preload") !== "false"), a = y;
      }, 20));
    }
    function O(p) {
      if (p.defaultPrevented)
        return;
      let m = p.submitter && p.submitter.hasAttribute("formaction") ? p.submitter.getAttribute("formaction") : p.target.getAttribute("action");
      if (!m)
        return;
      if (!m.startsWith("https://action/")) {
        const S = new URL(m, ug);
        if (m = r.parsePath(S.pathname + S.search), !m.startsWith(t))
          return;
      }
      if (p.target.method.toUpperCase() !== "POST")
        throw new Error("Only POST forms are supported for Actions");
      const y = xx.get(m);
      if (y) {
        p.preventDefault();
        const S = new FormData(p.target, p.submitter);
        y.call({ r, f: p.target }, p.target.enctype === "multipart/form-data" ? S : new URLSearchParams(S));
      }
    }
    Ut(["click", "submit"]), document.addEventListener("click", f), n && (document.addEventListener("mousemove", d, { passive: !0 }), document.addEventListener("focusin", u, { passive: !0 }), document.addEventListener("touchstart", u, { passive: !0 })), document.addEventListener("submit", O), Bt(() => {
      document.removeEventListener("click", f), n && (document.removeEventListener("mousemove", d), document.removeEventListener("focusin", u), document.removeEventListener("touchstart", u)), document.removeEventListener("submit", O);
    });
  };
}
function wx(n) {
  const e = () => {
    const i = window.location.pathname.replace(/^\/+/, "/") + window.location.search, r = window.history.state && window.history.state._depth && Object.keys(window.history.state).length === 1 ? void 0 : window.history.state;
    return {
      value: i + window.location.hash,
      state: r
    };
  }, t = fg();
  return Sx({
    get: e,
    set({ value: i, replace: r, scroll: s, state: o }) {
      r ? window.history.replaceState(KQ(o), "", i) : window.history.pushState(o, "", i), Qx(decodeURIComponent(window.location.hash.slice(1)), s), Ef();
    },
    init: (i) => bx(window, "popstate", JQ(i, (r) => {
      if (r && r < 0)
        return !t.confirm(r);
      {
        const s = e();
        return !t.confirm(s.value, { state: s.state });
      }
    })),
    create: kx(n.preload, n.explicitLinks, n.actionBase, n.transformUrl),
    utils: {
      go: (i) => window.history.go(i),
      beforeLeave: t
    }
  })(n);
}
const vx = () => {
  if (typeof window < "u") {
    if (window.localStorage) {
      const e = window.localStorage.getItem("dark");
      if (typeof e == "string")
        return e === "true";
    }
    if (window.matchMedia("(prefers-color-scheme: dark)").matches)
      return !0;
  }
  return !1;
}, bg = _s(), Qi = "http://localhost:5000/api", Px = (n) => {
  Qt();
  const [e, t] = G(localStorage.getItem("token") || ""), [i, r] = G([]), [s, o] = G(vx()), [l] = ng(e, async (f) => {
    const u = localStorage.getItem("user");
    if (u)
      return JSON.parse(u);
    const d = await fetch(`${Qi}/auth/me`, {
      headers: {
        "Content-Type": "application/json"
      },
      credentials: "include"
    });
    if (!d.ok)
      return d.status === 401 && (localStorage.removeItem("token"), localStorage.removeItem("user")), {
        email: "",
        name: "",
        image: ""
      };
    const O = await d.json();
    return localStorage.setItem("user", JSON.stringify(O)), O;
  }), a = async () => {
    try {
      const f = await fetch(`${Qi}/file/list?directory=./&recursive=true`, {
        headers: {
          "Content-Type": "application/json"
        },
        credentials: "include"
      });
      if (!f.ok)
        return f.status === 401 && localStorage.removeItem("token"), {};
      if (f.ok) {
        const u = await f.json();
        r(u);
      }
    } catch (f) {
      console.error("Failed to fetch files:", f);
    }
  };
  a();
  let [c, h] = G();
  return X(bg.Provider, {
    value: {
      get token() {
        return e();
      },
      set token(f) {
        t(f), localStorage.setItem("token", f);
      },
      user: l,
      tabs() {
        const f = c();
        return f ? f() : void 0;
      },
      setTabs(f) {
        h(() => f);
      },
      dark: s,
      toggleDark() {
        let f = !s();
        document.body.classList.toggle("dark", f), o(f), localStorage.setItem("dark", String(f));
      },
      files: i,
      refreshFiles: a
    },
    get children() {
      return n.children;
    }
  });
}, Yt = () => ar(bg);
var $x = /* @__PURE__ */ U('<div class="flex h-screen flex-col overflow-hidden"><main class=flex-1><div class="grid grid-cols-1 grid-rows-[1fr_1px_auto_1px_auto] justify-center [--gutter-width:2.5rem] md:-mx-4 md:grid-cols-[var(--gutter-width)_minmax(0,var(--breakpoint-2xl))_var(--gutter-width)] lg:mx-0"><div class="col-start-1 row-span-full row-start-1 hidden border-x border-x-[--pattern-fg] border-neutral-200 dark:border-neutral-800 bg-[image:repeating-linear-gradient(315deg,_var(--pattern-fg)_0,_var(--pattern-fg)_1px,_transparent_0,_transparent_50%)] bg-[size:10px_10px] bg-fixed [--pattern-fg:var(--color-black)]/5 md:block dark:[--pattern-fg:var(--color-white)]/10"></div><div class></div><div class="row-span-full row-start-1 hidden border-x border-x-[--pattern-fg] border-neutral-200 dark:border-neutral-800 bg-[image:repeating-linear-gradient(315deg,_var(--pattern-fg)_0,_var(--pattern-fg)_1px,_transparent_0,_transparent_50%)] bg-[size:10px_10px] bg-fixed [--pattern-fg:var(--color-black)]/5 md:col-start-3 md:block dark:[--pattern-fg:var(--color-white)]/10">');
const Qr = (n) => (Xs(), Qt(), fr(), Yt(), (() => {
  var e = $x(), t = e.firstChild, i = t.firstChild, r = i.firstChild, s = r.nextSibling;
  return I(s, () => n.children), e;
})()), On = /* @__PURE__ */ Object.create(null);
On.open = "0";
On.close = "1";
On.ping = "2";
On.pong = "3";
On.message = "4";
On.upgrade = "5";
On.noop = "6";
const To = /* @__PURE__ */ Object.create(null);
Object.keys(On).forEach((n) => {
  To[On[n]] = n;
});
const zc = { type: "error", data: "parser error" }, Qg = typeof Blob == "function" || typeof Blob < "u" && Object.prototype.toString.call(Blob) === "[object BlobConstructor]", xg = typeof ArrayBuffer == "function", kg = (n) => typeof ArrayBuffer.isView == "function" ? ArrayBuffer.isView(n) : n && n.buffer instanceof ArrayBuffer, _f = ({ type: n, data: e }, t, i) => Qg && e instanceof Blob ? t ? i(e) : ld(e, i) : xg && (e instanceof ArrayBuffer || kg(e)) ? t ? i(e) : ld(new Blob([e]), i) : i(On[n] + (e || "")), ld = (n, e) => {
  const t = new FileReader();
  return t.onload = function() {
    const i = t.result.split(",")[1];
    e("b" + (i || ""));
  }, t.readAsDataURL(n);
};
function ad(n) {
  return n instanceof Uint8Array ? n : n instanceof ArrayBuffer ? new Uint8Array(n) : new Uint8Array(n.buffer, n.byteOffset, n.byteLength);
}
let Ra;
function Tx(n, e) {
  if (Qg && n.data instanceof Blob)
    return n.data.arrayBuffer().then(ad).then(e);
  if (xg && (n.data instanceof ArrayBuffer || kg(n.data)))
    return e(ad(n.data));
  _f(n, !1, (t) => {
    Ra || (Ra = new TextEncoder()), e(Ra.encode(t));
  });
}
const cd = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", Zr = typeof Uint8Array > "u" ? [] : new Uint8Array(256);
for (let n = 0; n < cd.length; n++)
  Zr[cd.charCodeAt(n)] = n;
const Cx = (n) => {
  let e = n.length * 0.75, t = n.length, i, r = 0, s, o, l, a;
  n[n.length - 1] === "=" && (e--, n[n.length - 2] === "=" && e--);
  const c = new ArrayBuffer(e), h = new Uint8Array(c);
  for (i = 0; i < t; i += 4)
    s = Zr[n.charCodeAt(i)], o = Zr[n.charCodeAt(i + 1)], l = Zr[n.charCodeAt(i + 2)], a = Zr[n.charCodeAt(i + 3)], h[r++] = s << 2 | o >> 4, h[r++] = (o & 15) << 4 | l >> 2, h[r++] = (l & 3) << 6 | a & 63;
  return c;
}, Rx = typeof ArrayBuffer == "function", Xf = (n, e) => {
  if (typeof n != "string")
    return {
      type: "message",
      data: wg(n, e)
    };
  const t = n.charAt(0);
  return t === "b" ? {
    type: "message",
    data: Ex(n.substring(1), e)
  } : To[t] ? n.length > 1 ? {
    type: To[t],
    data: n.substring(1)
  } : {
    type: To[t]
  } : zc;
}, Ex = (n, e) => {
  if (Rx) {
    const t = Cx(n);
    return wg(t, e);
  } else
    return { base64: !0, data: n };
}, wg = (n, e) => {
  switch (e) {
    case "blob":
      return n instanceof Blob ? n : new Blob([n]);
    case "arraybuffer":
    default:
      return n instanceof ArrayBuffer ? n : n.buffer;
  }
}, vg = "", Ax = (n, e) => {
  const t = n.length, i = new Array(t);
  let r = 0;
  n.forEach((s, o) => {
    _f(s, !1, (l) => {
      i[o] = l, ++r === t && e(i.join(vg));
    });
  });
}, _x = (n, e) => {
  const t = n.split(vg), i = [];
  for (let r = 0; r < t.length; r++) {
    const s = Xf(t[r], e);
    if (i.push(s), s.type === "error")
      break;
  }
  return i;
};
function Xx() {
  return new TransformStream({
    transform(n, e) {
      Tx(n, (t) => {
        const i = t.length;
        let r;
        if (i < 126)
          r = new Uint8Array(1), new DataView(r.buffer).setUint8(0, i);
        else if (i < 65536) {
          r = new Uint8Array(3);
          const s = new DataView(r.buffer);
          s.setUint8(0, 126), s.setUint16(1, i);
        } else {
          r = new Uint8Array(9);
          const s = new DataView(r.buffer);
          s.setUint8(0, 127), s.setBigUint64(1, BigInt(i));
        }
        n.data && typeof n.data != "string" && (r[0] |= 128), e.enqueue(r), e.enqueue(t);
      });
    }
  });
}
let Ea;
function Ks(n) {
  return n.reduce((e, t) => e + t.length, 0);
}
function Js(n, e) {
  if (n[0].length === e)
    return n.shift();
  const t = new Uint8Array(e);
  let i = 0;
  for (let r = 0; r < e; r++)
    t[r] = n[0][i++], i === n[0].length && (n.shift(), i = 0);
  return n.length && i < n[0].length && (n[0] = n[0].slice(i)), t;
}
function qx(n, e) {
  Ea || (Ea = new TextDecoder());
  const t = [];
  let i = 0, r = -1, s = !1;
  return new TransformStream({
    transform(o, l) {
      for (t.push(o); ; ) {
        if (i === 0) {
          if (Ks(t) < 1)
            break;
          const a = Js(t, 1);
          s = (a[0] & 128) === 128, r = a[0] & 127, r < 126 ? i = 3 : r === 126 ? i = 1 : i = 2;
        } else if (i === 1) {
          if (Ks(t) < 2)
            break;
          const a = Js(t, 2);
          r = new DataView(a.buffer, a.byteOffset, a.length).getUint16(0), i = 3;
        } else if (i === 2) {
          if (Ks(t) < 8)
            break;
          const a = Js(t, 8), c = new DataView(a.buffer, a.byteOffset, a.length), h = c.getUint32(0);
          if (h > Math.pow(2, 21) - 1) {
            l.enqueue(zc);
            break;
          }
          r = h * Math.pow(2, 32) + c.getUint32(4), i = 3;
        } else {
          if (Ks(t) < r)
            break;
          const a = Js(t, r);
          l.enqueue(Xf(s ? a : Ea.decode(a), e)), i = 0;
        }
        if (r === 0 || r > n) {
          l.enqueue(zc);
          break;
        }
      }
    }
  });
}
const Pg = 4;
function Ze(n) {
  if (n) return Zx(n);
}
function Zx(n) {
  for (var e in Ze.prototype)
    n[e] = Ze.prototype[e];
  return n;
}
Ze.prototype.on = Ze.prototype.addEventListener = function(n, e) {
  return this._callbacks = this._callbacks || {}, (this._callbacks["$" + n] = this._callbacks["$" + n] || []).push(e), this;
};
Ze.prototype.once = function(n, e) {
  function t() {
    this.off(n, t), e.apply(this, arguments);
  }
  return t.fn = e, this.on(n, t), this;
};
Ze.prototype.off = Ze.prototype.removeListener = Ze.prototype.removeAllListeners = Ze.prototype.removeEventListener = function(n, e) {
  if (this._callbacks = this._callbacks || {}, arguments.length == 0)
    return this._callbacks = {}, this;
  var t = this._callbacks["$" + n];
  if (!t) return this;
  if (arguments.length == 1)
    return delete this._callbacks["$" + n], this;
  for (var i, r = 0; r < t.length; r++)
    if (i = t[r], i === e || i.fn === e) {
      t.splice(r, 1);
      break;
    }
  return t.length === 0 && delete this._callbacks["$" + n], this;
};
Ze.prototype.emit = function(n) {
  this._callbacks = this._callbacks || {};
  for (var e = new Array(arguments.length - 1), t = this._callbacks["$" + n], i = 1; i < arguments.length; i++)
    e[i - 1] = arguments[i];
  if (t) {
    t = t.slice(0);
    for (var i = 0, r = t.length; i < r; ++i)
      t[i].apply(this, e);
  }
  return this;
};
Ze.prototype.emitReserved = Ze.prototype.emit;
Ze.prototype.listeners = function(n) {
  return this._callbacks = this._callbacks || {}, this._callbacks["$" + n] || [];
};
Ze.prototype.hasListeners = function(n) {
  return !!this.listeners(n).length;
};
const Hl = typeof Promise == "function" && typeof Promise.resolve == "function" ? (e) => Promise.resolve().then(e) : (e, t) => t(e, 0), kt = typeof self < "u" ? self : typeof window < "u" ? window : Function("return this")(), Mx = "arraybuffer";
function $g(n, ...e) {
  return e.reduce((t, i) => (n.hasOwnProperty(i) && (t[i] = n[i]), t), {});
}
const Lx = kt.setTimeout, Vx = kt.clearTimeout;
function Kl(n, e) {
  e.useNativeTimers ? (n.setTimeoutFn = Lx.bind(kt), n.clearTimeoutFn = Vx.bind(kt)) : (n.setTimeoutFn = kt.setTimeout.bind(kt), n.clearTimeoutFn = kt.clearTimeout.bind(kt));
}
const Bx = 1.33;
function Wx(n) {
  return typeof n == "string" ? zx(n) : Math.ceil((n.byteLength || n.size) * Bx);
}
function zx(n) {
  let e = 0, t = 0;
  for (let i = 0, r = n.length; i < r; i++)
    e = n.charCodeAt(i), e < 128 ? t += 1 : e < 2048 ? t += 2 : e < 55296 || e >= 57344 ? t += 3 : (i++, t += 4);
  return t;
}
function Tg() {
  return Date.now().toString(36).substring(3) + Math.random().toString(36).substring(2, 5);
}
function Dx(n) {
  let e = "";
  for (let t in n)
    n.hasOwnProperty(t) && (e.length && (e += "&"), e += encodeURIComponent(t) + "=" + encodeURIComponent(n[t]));
  return e;
}
function Ix(n) {
  let e = {}, t = n.split("&");
  for (let i = 0, r = t.length; i < r; i++) {
    let s = t[i].split("=");
    e[decodeURIComponent(s[0])] = decodeURIComponent(s[1]);
  }
  return e;
}
class jx extends Error {
  constructor(e, t, i) {
    super(e), this.description = t, this.context = i, this.type = "TransportError";
  }
}
class qf extends Ze {
  /**
   * Transport abstract constructor.
   *
   * @param {Object} opts - options
   * @protected
   */
  constructor(e) {
    super(), this.writable = !1, Kl(this, e), this.opts = e, this.query = e.query, this.socket = e.socket, this.supportsBinary = !e.forceBase64;
  }
  /**
   * Emits an error.
   *
   * @param {String} reason
   * @param description
   * @param context - the error context
   * @return {Transport} for chaining
   * @protected
   */
  onError(e, t, i) {
    return super.emitReserved("error", new jx(e, t, i)), this;
  }
  /**
   * Opens the transport.
   */
  open() {
    return this.readyState = "opening", this.doOpen(), this;
  }
  /**
   * Closes the transport.
   */
  close() {
    return (this.readyState === "opening" || this.readyState === "open") && (this.doClose(), this.onClose()), this;
  }
  /**
   * Sends multiple packets.
   *
   * @param {Array} packets
   */
  send(e) {
    this.readyState === "open" && this.write(e);
  }
  /**
   * Called upon open
   *
   * @protected
   */
  onOpen() {
    this.readyState = "open", this.writable = !0, super.emitReserved("open");
  }
  /**
   * Called with data.
   *
   * @param {String} data
   * @protected
   */
  onData(e) {
    const t = Xf(e, this.socket.binaryType);
    this.onPacket(t);
  }
  /**
   * Called with a decoded packet.
   *
   * @protected
   */
  onPacket(e) {
    super.emitReserved("packet", e);
  }
  /**
   * Called upon close.
   *
   * @protected
   */
  onClose(e) {
    this.readyState = "closed", super.emitReserved("close", e);
  }
  /**
   * Pauses the transport, in order not to lose packets during an upgrade.
   *
   * @param onPause
   */
  pause(e) {
  }
  createUri(e, t = {}) {
    return e + "://" + this._hostname() + this._port() + this.opts.path + this._query(t);
  }
  _hostname() {
    const e = this.opts.hostname;
    return e.indexOf(":") === -1 ? e : "[" + e + "]";
  }
  _port() {
    return this.opts.port && (this.opts.secure && +(this.opts.port !== 443) || !this.opts.secure && Number(this.opts.port) !== 80) ? ":" + this.opts.port : "";
  }
  _query(e) {
    const t = Dx(e);
    return t.length ? "?" + t : "";
  }
}
class Ux extends qf {
  constructor() {
    super(...arguments), this._polling = !1;
  }
  get name() {
    return "polling";
  }
  /**
   * Opens the socket (triggers polling). We write a PING message to determine
   * when the transport is open.
   *
   * @protected
   */
  doOpen() {
    this._poll();
  }
  /**
   * Pauses polling.
   *
   * @param {Function} onPause - callback upon buffers are flushed and transport is paused
   * @package
   */
  pause(e) {
    this.readyState = "pausing";
    const t = () => {
      this.readyState = "paused", e();
    };
    if (this._polling || !this.writable) {
      let i = 0;
      this._polling && (i++, this.once("pollComplete", function() {
        --i || t();
      })), this.writable || (i++, this.once("drain", function() {
        --i || t();
      }));
    } else
      t();
  }
  /**
   * Starts polling cycle.
   *
   * @private
   */
  _poll() {
    this._polling = !0, this.doPoll(), this.emitReserved("poll");
  }
  /**
   * Overloads onData to detect payloads.
   *
   * @protected
   */
  onData(e) {
    const t = (i) => {
      if (this.readyState === "opening" && i.type === "open" && this.onOpen(), i.type === "close")
        return this.onClose({ description: "transport closed by the server" }), !1;
      this.onPacket(i);
    };
    _x(e, this.socket.binaryType).forEach(t), this.readyState !== "closed" && (this._polling = !1, this.emitReserved("pollComplete"), this.readyState === "open" && this._poll());
  }
  /**
   * For polling, send a close packet.
   *
   * @protected
   */
  doClose() {
    const e = () => {
      this.write([{ type: "close" }]);
    };
    this.readyState === "open" ? e() : this.once("open", e);
  }
  /**
   * Writes a packets payload.
   *
   * @param {Array} packets - data packets
   * @protected
   */
  write(e) {
    this.writable = !1, Ax(e, (t) => {
      this.doWrite(t, () => {
        this.writable = !0, this.emitReserved("drain");
      });
    });
  }
  /**
   * Generates uri for connection.
   *
   * @private
   */
  uri() {
    const e = this.opts.secure ? "https" : "http", t = this.query || {};
    return this.opts.timestampRequests !== !1 && (t[this.opts.timestampParam] = Tg()), !this.supportsBinary && !t.sid && (t.b64 = 1), this.createUri(e, t);
  }
}
let Cg = !1;
try {
  Cg = typeof XMLHttpRequest < "u" && "withCredentials" in new XMLHttpRequest();
} catch {
}
const Yx = Cg;
function Nx() {
}
class Gx extends Ux {
  /**
   * XHR Polling constructor.
   *
   * @param {Object} opts
   * @package
   */
  constructor(e) {
    if (super(e), typeof location < "u") {
      const t = location.protocol === "https:";
      let i = location.port;
      i || (i = t ? "443" : "80"), this.xd = typeof location < "u" && e.hostname !== location.hostname || i !== e.port;
    }
  }
  /**
   * Sends data.
   *
   * @param {String} data to send.
   * @param {Function} called upon flush.
   * @private
   */
  doWrite(e, t) {
    const i = this.request({
      method: "POST",
      data: e
    });
    i.on("success", t), i.on("error", (r, s) => {
      this.onError("xhr post error", r, s);
    });
  }
  /**
   * Starts a poll cycle.
   *
   * @private
   */
  doPoll() {
    const e = this.request();
    e.on("data", this.onData.bind(this)), e.on("error", (t, i) => {
      this.onError("xhr poll error", t, i);
    }), this.pollXhr = e;
  }
}
let Di = class Co extends Ze {
  /**
   * Request constructor
   *
   * @param {Object} options
   * @package
   */
  constructor(e, t, i) {
    super(), this.createRequest = e, Kl(this, i), this._opts = i, this._method = i.method || "GET", this._uri = t, this._data = i.data !== void 0 ? i.data : null, this._create();
  }
  /**
   * Creates the XHR object and sends the request.
   *
   * @private
   */
  _create() {
    var e;
    const t = $g(this._opts, "agent", "pfx", "key", "passphrase", "cert", "ca", "ciphers", "rejectUnauthorized", "autoUnref");
    t.xdomain = !!this._opts.xd;
    const i = this._xhr = this.createRequest(t);
    try {
      i.open(this._method, this._uri, !0);
      try {
        if (this._opts.extraHeaders) {
          i.setDisableHeaderCheck && i.setDisableHeaderCheck(!0);
          for (let r in this._opts.extraHeaders)
            this._opts.extraHeaders.hasOwnProperty(r) && i.setRequestHeader(r, this._opts.extraHeaders[r]);
        }
      } catch {
      }
      if (this._method === "POST")
        try {
          i.setRequestHeader("Content-type", "text/plain;charset=UTF-8");
        } catch {
        }
      try {
        i.setRequestHeader("Accept", "*/*");
      } catch {
      }
      (e = this._opts.cookieJar) === null || e === void 0 || e.addCookies(i), "withCredentials" in i && (i.withCredentials = this._opts.withCredentials), this._opts.requestTimeout && (i.timeout = this._opts.requestTimeout), i.onreadystatechange = () => {
        var r;
        i.readyState === 3 && ((r = this._opts.cookieJar) === null || r === void 0 || r.parseCookies(
          // @ts-ignore
          i.getResponseHeader("set-cookie")
        )), i.readyState === 4 && (i.status === 200 || i.status === 1223 ? this._onLoad() : this.setTimeoutFn(() => {
          this._onError(typeof i.status == "number" ? i.status : 0);
        }, 0));
      }, i.send(this._data);
    } catch (r) {
      this.setTimeoutFn(() => {
        this._onError(r);
      }, 0);
      return;
    }
    typeof document < "u" && (this._index = Co.requestsCount++, Co.requests[this._index] = this);
  }
  /**
   * Called upon error.
   *
   * @private
   */
  _onError(e) {
    this.emitReserved("error", e, this._xhr), this._cleanup(!0);
  }
  /**
   * Cleans up house.
   *
   * @private
   */
  _cleanup(e) {
    if (!(typeof this._xhr > "u" || this._xhr === null)) {
      if (this._xhr.onreadystatechange = Nx, e)
        try {
          this._xhr.abort();
        } catch {
        }
      typeof document < "u" && delete Co.requests[this._index], this._xhr = null;
    }
  }
  /**
   * Called upon load.
   *
   * @private
   */
  _onLoad() {
    const e = this._xhr.responseText;
    e !== null && (this.emitReserved("data", e), this.emitReserved("success"), this._cleanup());
  }
  /**
   * Aborts the request.
   *
   * @package
   */
  abort() {
    this._cleanup();
  }
};
Di.requestsCount = 0;
Di.requests = {};
if (typeof document < "u") {
  if (typeof attachEvent == "function")
    attachEvent("onunload", hd);
  else if (typeof addEventListener == "function") {
    const n = "onpagehide" in kt ? "pagehide" : "unload";
    addEventListener(n, hd, !1);
  }
}
function hd() {
  for (let n in Di.requests)
    Di.requests.hasOwnProperty(n) && Di.requests[n].abort();
}
const Fx = function() {
  const n = Rg({
    xdomain: !1
  });
  return n && n.responseType !== null;
}();
class Hx extends Gx {
  constructor(e) {
    super(e);
    const t = e && e.forceBase64;
    this.supportsBinary = Fx && !t;
  }
  request(e = {}) {
    return Object.assign(e, { xd: this.xd }, this.opts), new Di(Rg, this.uri(), e);
  }
}
function Rg(n) {
  const e = n.xdomain;
  try {
    if (typeof XMLHttpRequest < "u" && (!e || Yx))
      return new XMLHttpRequest();
  } catch {
  }
  if (!e)
    try {
      return new kt[["Active"].concat("Object").join("X")]("Microsoft.XMLHTTP");
    } catch {
    }
}
const Eg = typeof navigator < "u" && typeof navigator.product == "string" && navigator.product.toLowerCase() === "reactnative";
class Kx extends qf {
  get name() {
    return "websocket";
  }
  doOpen() {
    const e = this.uri(), t = this.opts.protocols, i = Eg ? {} : $g(this.opts, "agent", "perMessageDeflate", "pfx", "key", "passphrase", "cert", "ca", "ciphers", "rejectUnauthorized", "localAddress", "protocolVersion", "origin", "maxPayload", "family", "checkServerIdentity");
    this.opts.extraHeaders && (i.headers = this.opts.extraHeaders);
    try {
      this.ws = this.createSocket(e, t, i);
    } catch (r) {
      return this.emitReserved("error", r);
    }
    this.ws.binaryType = this.socket.binaryType, this.addEventListeners();
  }
  /**
   * Adds event listeners to the socket
   *
   * @private
   */
  addEventListeners() {
    this.ws.onopen = () => {
      this.opts.autoUnref && this.ws._socket.unref(), this.onOpen();
    }, this.ws.onclose = (e) => this.onClose({
      description: "websocket connection closed",
      context: e
    }), this.ws.onmessage = (e) => this.onData(e.data), this.ws.onerror = (e) => this.onError("websocket error", e);
  }
  write(e) {
    this.writable = !1;
    for (let t = 0; t < e.length; t++) {
      const i = e[t], r = t === e.length - 1;
      _f(i, this.supportsBinary, (s) => {
        try {
          this.doWrite(i, s);
        } catch {
        }
        r && Hl(() => {
          this.writable = !0, this.emitReserved("drain");
        }, this.setTimeoutFn);
      });
    }
  }
  doClose() {
    typeof this.ws < "u" && (this.ws.onerror = () => {
    }, this.ws.close(), this.ws = null);
  }
  /**
   * Generates uri for connection.
   *
   * @private
   */
  uri() {
    const e = this.opts.secure ? "wss" : "ws", t = this.query || {};
    return this.opts.timestampRequests && (t[this.opts.timestampParam] = Tg()), this.supportsBinary || (t.b64 = 1), this.createUri(e, t);
  }
}
const Aa = kt.WebSocket || kt.MozWebSocket;
class Jx extends Kx {
  createSocket(e, t, i) {
    return Eg ? new Aa(e, t, i) : t ? new Aa(e, t) : new Aa(e);
  }
  doWrite(e, t) {
    this.ws.send(t);
  }
}
class ek extends qf {
  get name() {
    return "webtransport";
  }
  doOpen() {
    try {
      this._transport = new WebTransport(this.createUri("https"), this.opts.transportOptions[this.name]);
    } catch (e) {
      return this.emitReserved("error", e);
    }
    this._transport.closed.then(() => {
      this.onClose();
    }).catch((e) => {
      this.onError("webtransport error", e);
    }), this._transport.ready.then(() => {
      this._transport.createBidirectionalStream().then((e) => {
        const t = qx(Number.MAX_SAFE_INTEGER, this.socket.binaryType), i = e.readable.pipeThrough(t).getReader(), r = Xx();
        r.readable.pipeTo(e.writable), this._writer = r.writable.getWriter();
        const s = () => {
          i.read().then(({ done: l, value: a }) => {
            l || (this.onPacket(a), s());
          }).catch((l) => {
          });
        };
        s();
        const o = { type: "open" };
        this.query.sid && (o.data = `{"sid":"${this.query.sid}"}`), this._writer.write(o).then(() => this.onOpen());
      });
    });
  }
  write(e) {
    this.writable = !1;
    for (let t = 0; t < e.length; t++) {
      const i = e[t], r = t === e.length - 1;
      this._writer.write(i).then(() => {
        r && Hl(() => {
          this.writable = !0, this.emitReserved("drain");
        }, this.setTimeoutFn);
      });
    }
  }
  doClose() {
    var e;
    (e = this._transport) === null || e === void 0 || e.close();
  }
}
const tk = {
  websocket: Jx,
  webtransport: ek,
  polling: Hx
}, nk = /^(?:(?![^:@\/?#]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@\/?#]*)(?::([^:@\/?#]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/, ik = [
  "source",
  "protocol",
  "authority",
  "userInfo",
  "user",
  "password",
  "host",
  "port",
  "relative",
  "path",
  "directory",
  "file",
  "query",
  "anchor"
];
function Dc(n) {
  if (n.length > 8e3)
    throw "URI too long";
  const e = n, t = n.indexOf("["), i = n.indexOf("]");
  t != -1 && i != -1 && (n = n.substring(0, t) + n.substring(t, i).replace(/:/g, ";") + n.substring(i, n.length));
  let r = nk.exec(n || ""), s = {}, o = 14;
  for (; o--; )
    s[ik[o]] = r[o] || "";
  return t != -1 && i != -1 && (s.source = e, s.host = s.host.substring(1, s.host.length - 1).replace(/;/g, ":"), s.authority = s.authority.replace("[", "").replace("]", "").replace(/;/g, ":"), s.ipv6uri = !0), s.pathNames = rk(s, s.path), s.queryKey = sk(s, s.query), s;
}
function rk(n, e) {
  const t = /\/{2,9}/g, i = e.replace(t, "/").split("/");
  return (e.slice(0, 1) == "/" || e.length === 0) && i.splice(0, 1), e.slice(-1) == "/" && i.splice(i.length - 1, 1), i;
}
function sk(n, e) {
  const t = {};
  return e.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function(i, r, s) {
    r && (t[r] = s);
  }), t;
}
const Ic = typeof addEventListener == "function" && typeof removeEventListener == "function", Ro = [];
Ic && addEventListener("offline", () => {
  Ro.forEach((n) => n());
}, !1);
class jn extends Ze {
  /**
   * Socket constructor.
   *
   * @param {String|Object} uri - uri or options
   * @param {Object} opts - options
   */
  constructor(e, t) {
    if (super(), this.binaryType = Mx, this.writeBuffer = [], this._prevBufferLen = 0, this._pingInterval = -1, this._pingTimeout = -1, this._maxPayload = -1, this._pingTimeoutTime = 1 / 0, e && typeof e == "object" && (t = e, e = null), e) {
      const i = Dc(e);
      t.hostname = i.host, t.secure = i.protocol === "https" || i.protocol === "wss", t.port = i.port, i.query && (t.query = i.query);
    } else t.host && (t.hostname = Dc(t.host).host);
    Kl(this, t), this.secure = t.secure != null ? t.secure : typeof location < "u" && location.protocol === "https:", t.hostname && !t.port && (t.port = this.secure ? "443" : "80"), this.hostname = t.hostname || (typeof location < "u" ? location.hostname : "localhost"), this.port = t.port || (typeof location < "u" && location.port ? location.port : this.secure ? "443" : "80"), this.transports = [], this._transportsByName = {}, t.transports.forEach((i) => {
      const r = i.prototype.name;
      this.transports.push(r), this._transportsByName[r] = i;
    }), this.opts = Object.assign({
      path: "/engine.io",
      agent: !1,
      withCredentials: !1,
      upgrade: !0,
      timestampParam: "t",
      rememberUpgrade: !1,
      addTrailingSlash: !0,
      rejectUnauthorized: !0,
      perMessageDeflate: {
        threshold: 1024
      },
      transportOptions: {},
      closeOnBeforeunload: !1
    }, t), this.opts.path = this.opts.path.replace(/\/$/, "") + (this.opts.addTrailingSlash ? "/" : ""), typeof this.opts.query == "string" && (this.opts.query = Ix(this.opts.query)), Ic && (this.opts.closeOnBeforeunload && (this._beforeunloadEventListener = () => {
      this.transport && (this.transport.removeAllListeners(), this.transport.close());
    }, addEventListener("beforeunload", this._beforeunloadEventListener, !1)), this.hostname !== "localhost" && (this._offlineEventListener = () => {
      this._onClose("transport close", {
        description: "network connection lost"
      });
    }, Ro.push(this._offlineEventListener))), this.opts.withCredentials && (this._cookieJar = void 0), this._open();
  }
  /**
   * Creates transport of the given type.
   *
   * @param {String} name - transport name
   * @return {Transport}
   * @private
   */
  createTransport(e) {
    const t = Object.assign({}, this.opts.query);
    t.EIO = Pg, t.transport = e, this.id && (t.sid = this.id);
    const i = Object.assign({}, this.opts, {
      query: t,
      socket: this,
      hostname: this.hostname,
      secure: this.secure,
      port: this.port
    }, this.opts.transportOptions[e]);
    return new this._transportsByName[e](i);
  }
  /**
   * Initializes transport to use and starts probe.
   *
   * @private
   */
  _open() {
    if (this.transports.length === 0) {
      this.setTimeoutFn(() => {
        this.emitReserved("error", "No transports available");
      }, 0);
      return;
    }
    const e = this.opts.rememberUpgrade && jn.priorWebsocketSuccess && this.transports.indexOf("websocket") !== -1 ? "websocket" : this.transports[0];
    this.readyState = "opening";
    const t = this.createTransport(e);
    t.open(), this.setTransport(t);
  }
  /**
   * Sets the current transport. Disables the existing one (if any).
   *
   * @private
   */
  setTransport(e) {
    this.transport && this.transport.removeAllListeners(), this.transport = e, e.on("drain", this._onDrain.bind(this)).on("packet", this._onPacket.bind(this)).on("error", this._onError.bind(this)).on("close", (t) => this._onClose("transport close", t));
  }
  /**
   * Called when connection is deemed open.
   *
   * @private
   */
  onOpen() {
    this.readyState = "open", jn.priorWebsocketSuccess = this.transport.name === "websocket", this.emitReserved("open"), this.flush();
  }
  /**
   * Handles a packet.
   *
   * @private
   */
  _onPacket(e) {
    if (this.readyState === "opening" || this.readyState === "open" || this.readyState === "closing")
      switch (this.emitReserved("packet", e), this.emitReserved("heartbeat"), e.type) {
        case "open":
          this.onHandshake(JSON.parse(e.data));
          break;
        case "ping":
          this._sendPacket("pong"), this.emitReserved("ping"), this.emitReserved("pong"), this._resetPingTimeout();
          break;
        case "error":
          const t = new Error("server error");
          t.code = e.data, this._onError(t);
          break;
        case "message":
          this.emitReserved("data", e.data), this.emitReserved("message", e.data);
          break;
      }
  }
  /**
   * Called upon handshake completion.
   *
   * @param {Object} data - handshake obj
   * @private
   */
  onHandshake(e) {
    this.emitReserved("handshake", e), this.id = e.sid, this.transport.query.sid = e.sid, this._pingInterval = e.pingInterval, this._pingTimeout = e.pingTimeout, this._maxPayload = e.maxPayload, this.onOpen(), this.readyState !== "closed" && this._resetPingTimeout();
  }
  /**
   * Sets and resets ping timeout timer based on server pings.
   *
   * @private
   */
  _resetPingTimeout() {
    this.clearTimeoutFn(this._pingTimeoutTimer);
    const e = this._pingInterval + this._pingTimeout;
    this._pingTimeoutTime = Date.now() + e, this._pingTimeoutTimer = this.setTimeoutFn(() => {
      this._onClose("ping timeout");
    }, e), this.opts.autoUnref && this._pingTimeoutTimer.unref();
  }
  /**
   * Called on `drain` event
   *
   * @private
   */
  _onDrain() {
    this.writeBuffer.splice(0, this._prevBufferLen), this._prevBufferLen = 0, this.writeBuffer.length === 0 ? this.emitReserved("drain") : this.flush();
  }
  /**
   * Flush write buffers.
   *
   * @private
   */
  flush() {
    if (this.readyState !== "closed" && this.transport.writable && !this.upgrading && this.writeBuffer.length) {
      const e = this._getWritablePackets();
      this.transport.send(e), this._prevBufferLen = e.length, this.emitReserved("flush");
    }
  }
  /**
   * Ensure the encoded size of the writeBuffer is below the maxPayload value sent by the server (only for HTTP
   * long-polling)
   *
   * @private
   */
  _getWritablePackets() {
    if (!(this._maxPayload && this.transport.name === "polling" && this.writeBuffer.length > 1))
      return this.writeBuffer;
    let t = 1;
    for (let i = 0; i < this.writeBuffer.length; i++) {
      const r = this.writeBuffer[i].data;
      if (r && (t += Wx(r)), i > 0 && t > this._maxPayload)
        return this.writeBuffer.slice(0, i);
      t += 2;
    }
    return this.writeBuffer;
  }
  /**
   * Checks whether the heartbeat timer has expired but the socket has not yet been notified.
   *
   * Note: this method is private for now because it does not really fit the WebSocket API, but if we put it in the
   * `write()` method then the message would not be buffered by the Socket.IO client.
   *
   * @return {boolean}
   * @private
   */
  /* private */
  _hasPingExpired() {
    if (!this._pingTimeoutTime)
      return !0;
    const e = Date.now() > this._pingTimeoutTime;
    return e && (this._pingTimeoutTime = 0, Hl(() => {
      this._onClose("ping timeout");
    }, this.setTimeoutFn)), e;
  }
  /**
   * Sends a message.
   *
   * @param {String} msg - message.
   * @param {Object} options.
   * @param {Function} fn - callback function.
   * @return {Socket} for chaining.
   */
  write(e, t, i) {
    return this._sendPacket("message", e, t, i), this;
  }
  /**
   * Sends a message. Alias of {@link Socket#write}.
   *
   * @param {String} msg - message.
   * @param {Object} options.
   * @param {Function} fn - callback function.
   * @return {Socket} for chaining.
   */
  send(e, t, i) {
    return this._sendPacket("message", e, t, i), this;
  }
  /**
   * Sends a packet.
   *
   * @param {String} type: packet type.
   * @param {String} data.
   * @param {Object} options.
   * @param {Function} fn - callback function.
   * @private
   */
  _sendPacket(e, t, i, r) {
    if (typeof t == "function" && (r = t, t = void 0), typeof i == "function" && (r = i, i = null), this.readyState === "closing" || this.readyState === "closed")
      return;
    i = i || {}, i.compress = i.compress !== !1;
    const s = {
      type: e,
      data: t,
      options: i
    };
    this.emitReserved("packetCreate", s), this.writeBuffer.push(s), r && this.once("flush", r), this.flush();
  }
  /**
   * Closes the connection.
   */
  close() {
    const e = () => {
      this._onClose("forced close"), this.transport.close();
    }, t = () => {
      this.off("upgrade", t), this.off("upgradeError", t), e();
    }, i = () => {
      this.once("upgrade", t), this.once("upgradeError", t);
    };
    return (this.readyState === "opening" || this.readyState === "open") && (this.readyState = "closing", this.writeBuffer.length ? this.once("drain", () => {
      this.upgrading ? i() : e();
    }) : this.upgrading ? i() : e()), this;
  }
  /**
   * Called upon transport error
   *
   * @private
   */
  _onError(e) {
    if (jn.priorWebsocketSuccess = !1, this.opts.tryAllTransports && this.transports.length > 1 && this.readyState === "opening")
      return this.transports.shift(), this._open();
    this.emitReserved("error", e), this._onClose("transport error", e);
  }
  /**
   * Called upon transport close.
   *
   * @private
   */
  _onClose(e, t) {
    if (this.readyState === "opening" || this.readyState === "open" || this.readyState === "closing") {
      if (this.clearTimeoutFn(this._pingTimeoutTimer), this.transport.removeAllListeners("close"), this.transport.close(), this.transport.removeAllListeners(), Ic && (this._beforeunloadEventListener && removeEventListener("beforeunload", this._beforeunloadEventListener, !1), this._offlineEventListener)) {
        const i = Ro.indexOf(this._offlineEventListener);
        i !== -1 && Ro.splice(i, 1);
      }
      this.readyState = "closed", this.id = null, this.emitReserved("close", e, t), this.writeBuffer = [], this._prevBufferLen = 0;
    }
  }
}
jn.protocol = Pg;
class ok extends jn {
  constructor() {
    super(...arguments), this._upgrades = [];
  }
  onOpen() {
    if (super.onOpen(), this.readyState === "open" && this.opts.upgrade)
      for (let e = 0; e < this._upgrades.length; e++)
        this._probe(this._upgrades[e]);
  }
  /**
   * Probes a transport.
   *
   * @param {String} name - transport name
   * @private
   */
  _probe(e) {
    let t = this.createTransport(e), i = !1;
    jn.priorWebsocketSuccess = !1;
    const r = () => {
      i || (t.send([{ type: "ping", data: "probe" }]), t.once("packet", (f) => {
        if (!i)
          if (f.type === "pong" && f.data === "probe") {
            if (this.upgrading = !0, this.emitReserved("upgrading", t), !t)
              return;
            jn.priorWebsocketSuccess = t.name === "websocket", this.transport.pause(() => {
              i || this.readyState !== "closed" && (h(), this.setTransport(t), t.send([{ type: "upgrade" }]), this.emitReserved("upgrade", t), t = null, this.upgrading = !1, this.flush());
            });
          } else {
            const u = new Error("probe error");
            u.transport = t.name, this.emitReserved("upgradeError", u);
          }
      }));
    };
    function s() {
      i || (i = !0, h(), t.close(), t = null);
    }
    const o = (f) => {
      const u = new Error("probe error: " + f);
      u.transport = t.name, s(), this.emitReserved("upgradeError", u);
    };
    function l() {
      o("transport closed");
    }
    function a() {
      o("socket closed");
    }
    function c(f) {
      t && f.name !== t.name && s();
    }
    const h = () => {
      t.removeListener("open", r), t.removeListener("error", o), t.removeListener("close", l), this.off("close", a), this.off("upgrading", c);
    };
    t.once("open", r), t.once("error", o), t.once("close", l), this.once("close", a), this.once("upgrading", c), this._upgrades.indexOf("webtransport") !== -1 && e !== "webtransport" ? this.setTimeoutFn(() => {
      i || t.open();
    }, 200) : t.open();
  }
  onHandshake(e) {
    this._upgrades = this._filterUpgrades(e.upgrades), super.onHandshake(e);
  }
  /**
   * Filters upgrades, returning only those matching client transports.
   *
   * @param {Array} upgrades - server upgrades
   * @private
   */
  _filterUpgrades(e) {
    const t = [];
    for (let i = 0; i < e.length; i++)
      ~this.transports.indexOf(e[i]) && t.push(e[i]);
    return t;
  }
}
let lk = class extends ok {
  constructor(e, t = {}) {
    const i = typeof e == "object" ? e : t;
    (!i.transports || i.transports && typeof i.transports[0] == "string") && (i.transports = (i.transports || ["polling", "websocket", "webtransport"]).map((r) => tk[r]).filter((r) => !!r)), super(e, i);
  }
};
function ak(n, e = "", t) {
  let i = n;
  t = t || typeof location < "u" && location, n == null && (n = t.protocol + "//" + t.host), typeof n == "string" && (n.charAt(0) === "/" && (n.charAt(1) === "/" ? n = t.protocol + n : n = t.host + n), /^(https?|wss?):\/\//.test(n) || (typeof t < "u" ? n = t.protocol + "//" + n : n = "https://" + n), i = Dc(n)), i.port || (/^(http|ws)$/.test(i.protocol) ? i.port = "80" : /^(http|ws)s$/.test(i.protocol) && (i.port = "443")), i.path = i.path || "/";
  const s = i.host.indexOf(":") !== -1 ? "[" + i.host + "]" : i.host;
  return i.id = i.protocol + "://" + s + ":" + i.port + e, i.href = i.protocol + "://" + s + (t && t.port === i.port ? "" : ":" + i.port), i;
}
const ck = typeof ArrayBuffer == "function", hk = (n) => typeof ArrayBuffer.isView == "function" ? ArrayBuffer.isView(n) : n.buffer instanceof ArrayBuffer, Ag = Object.prototype.toString, fk = typeof Blob == "function" || typeof Blob < "u" && Ag.call(Blob) === "[object BlobConstructor]", uk = typeof File == "function" || typeof File < "u" && Ag.call(File) === "[object FileConstructor]";
function Zf(n) {
  return ck && (n instanceof ArrayBuffer || hk(n)) || fk && n instanceof Blob || uk && n instanceof File;
}
function Eo(n, e) {
  if (!n || typeof n != "object")
    return !1;
  if (Array.isArray(n)) {
    for (let t = 0, i = n.length; t < i; t++)
      if (Eo(n[t]))
        return !0;
    return !1;
  }
  if (Zf(n))
    return !0;
  if (n.toJSON && typeof n.toJSON == "function" && arguments.length === 1)
    return Eo(n.toJSON(), !0);
  for (const t in n)
    if (Object.prototype.hasOwnProperty.call(n, t) && Eo(n[t]))
      return !0;
  return !1;
}
function dk(n) {
  const e = [], t = n.data, i = n;
  return i.data = jc(t, e), i.attachments = e.length, { packet: i, buffers: e };
}
function jc(n, e) {
  if (!n)
    return n;
  if (Zf(n)) {
    const t = { _placeholder: !0, num: e.length };
    return e.push(n), t;
  } else if (Array.isArray(n)) {
    const t = new Array(n.length);
    for (let i = 0; i < n.length; i++)
      t[i] = jc(n[i], e);
    return t;
  } else if (typeof n == "object" && !(n instanceof Date)) {
    const t = {};
    for (const i in n)
      Object.prototype.hasOwnProperty.call(n, i) && (t[i] = jc(n[i], e));
    return t;
  }
  return n;
}
function Ok(n, e) {
  return n.data = Uc(n.data, e), delete n.attachments, n;
}
function Uc(n, e) {
  if (!n)
    return n;
  if (n && n._placeholder === !0) {
    if (typeof n.num == "number" && n.num >= 0 && n.num < e.length)
      return e[n.num];
    throw new Error("illegal attachments");
  } else if (Array.isArray(n))
    for (let t = 0; t < n.length; t++)
      n[t] = Uc(n[t], e);
  else if (typeof n == "object")
    for (const t in n)
      Object.prototype.hasOwnProperty.call(n, t) && (n[t] = Uc(n[t], e));
  return n;
}
const pk = [
  "connect",
  "connect_error",
  "disconnect",
  "disconnecting",
  "newListener",
  "removeListener"
  // used by the Node.js EventEmitter
], mk = 5;
var ce;
(function(n) {
  n[n.CONNECT = 0] = "CONNECT", n[n.DISCONNECT = 1] = "DISCONNECT", n[n.EVENT = 2] = "EVENT", n[n.ACK = 3] = "ACK", n[n.CONNECT_ERROR = 4] = "CONNECT_ERROR", n[n.BINARY_EVENT = 5] = "BINARY_EVENT", n[n.BINARY_ACK = 6] = "BINARY_ACK";
})(ce || (ce = {}));
class gk {
  /**
   * Encoder constructor
   *
   * @param {function} replacer - custom replacer to pass down to JSON.parse
   */
  constructor(e) {
    this.replacer = e;
  }
  /**
   * Encode a packet as a single string if non-binary, or as a
   * buffer sequence, depending on packet type.
   *
   * @param {Object} obj - packet object
   */
  encode(e) {
    return (e.type === ce.EVENT || e.type === ce.ACK) && Eo(e) ? this.encodeAsBinary({
      type: e.type === ce.EVENT ? ce.BINARY_EVENT : ce.BINARY_ACK,
      nsp: e.nsp,
      data: e.data,
      id: e.id
    }) : [this.encodeAsString(e)];
  }
  /**
   * Encode packet as string.
   */
  encodeAsString(e) {
    let t = "" + e.type;
    return (e.type === ce.BINARY_EVENT || e.type === ce.BINARY_ACK) && (t += e.attachments + "-"), e.nsp && e.nsp !== "/" && (t += e.nsp + ","), e.id != null && (t += e.id), e.data != null && (t += JSON.stringify(e.data, this.replacer)), t;
  }
  /**
   * Encode packet as 'buffer sequence' by removing blobs, and
   * deconstructing packet into object with placeholders and
   * a list of buffers.
   */
  encodeAsBinary(e) {
    const t = dk(e), i = this.encodeAsString(t.packet), r = t.buffers;
    return r.unshift(i), r;
  }
}
function fd(n) {
  return Object.prototype.toString.call(n) === "[object Object]";
}
class Mf extends Ze {
  /**
   * Decoder constructor
   *
   * @param {function} reviver - custom reviver to pass down to JSON.stringify
   */
  constructor(e) {
    super(), this.reviver = e;
  }
  /**
   * Decodes an encoded packet string into packet JSON.
   *
   * @param {String} obj - encoded packet
   */
  add(e) {
    let t;
    if (typeof e == "string") {
      if (this.reconstructor)
        throw new Error("got plaintext data when reconstructing a packet");
      t = this.decodeString(e);
      const i = t.type === ce.BINARY_EVENT;
      i || t.type === ce.BINARY_ACK ? (t.type = i ? ce.EVENT : ce.ACK, this.reconstructor = new yk(t), t.attachments === 0 && super.emitReserved("decoded", t)) : super.emitReserved("decoded", t);
    } else if (Zf(e) || e.base64)
      if (this.reconstructor)
        t = this.reconstructor.takeBinaryData(e), t && (this.reconstructor = null, super.emitReserved("decoded", t));
      else
        throw new Error("got binary data when not reconstructing a packet");
    else
      throw new Error("Unknown type: " + e);
  }
  /**
   * Decode a packet String (JSON data)
   *
   * @param {String} str
   * @return {Object} packet
   */
  decodeString(e) {
    let t = 0;
    const i = {
      type: Number(e.charAt(0))
    };
    if (ce[i.type] === void 0)
      throw new Error("unknown packet type " + i.type);
    if (i.type === ce.BINARY_EVENT || i.type === ce.BINARY_ACK) {
      const s = t + 1;
      for (; e.charAt(++t) !== "-" && t != e.length; )
        ;
      const o = e.substring(s, t);
      if (o != Number(o) || e.charAt(t) !== "-")
        throw new Error("Illegal attachments");
      i.attachments = Number(o);
    }
    if (e.charAt(t + 1) === "/") {
      const s = t + 1;
      for (; ++t && !(e.charAt(t) === "," || t === e.length); )
        ;
      i.nsp = e.substring(s, t);
    } else
      i.nsp = "/";
    const r = e.charAt(t + 1);
    if (r !== "" && Number(r) == r) {
      const s = t + 1;
      for (; ++t; ) {
        const o = e.charAt(t);
        if (o == null || Number(o) != o) {
          --t;
          break;
        }
        if (t === e.length)
          break;
      }
      i.id = Number(e.substring(s, t + 1));
    }
    if (e.charAt(++t)) {
      const s = this.tryParse(e.substr(t));
      if (Mf.isPayloadValid(i.type, s))
        i.data = s;
      else
        throw new Error("invalid payload");
    }
    return i;
  }
  tryParse(e) {
    try {
      return JSON.parse(e, this.reviver);
    } catch {
      return !1;
    }
  }
  static isPayloadValid(e, t) {
    switch (e) {
      case ce.CONNECT:
        return fd(t);
      case ce.DISCONNECT:
        return t === void 0;
      case ce.CONNECT_ERROR:
        return typeof t == "string" || fd(t);
      case ce.EVENT:
      case ce.BINARY_EVENT:
        return Array.isArray(t) && (typeof t[0] == "number" || typeof t[0] == "string" && pk.indexOf(t[0]) === -1);
      case ce.ACK:
      case ce.BINARY_ACK:
        return Array.isArray(t);
    }
  }
  /**
   * Deallocates a parser's resources
   */
  destroy() {
    this.reconstructor && (this.reconstructor.finishedReconstruction(), this.reconstructor = null);
  }
}
class yk {
  constructor(e) {
    this.packet = e, this.buffers = [], this.reconPack = e;
  }
  /**
   * Method to be called when binary data received from connection
   * after a BINARY_EVENT packet.
   *
   * @param {Buffer | ArrayBuffer} binData - the raw binary data received
   * @return {null | Object} returns null if more binary data is expected or
   *   a reconstructed packet object if all buffers have been received.
   */
  takeBinaryData(e) {
    if (this.buffers.push(e), this.buffers.length === this.reconPack.attachments) {
      const t = Ok(this.reconPack, this.buffers);
      return this.finishedReconstruction(), t;
    }
    return null;
  }
  /**
   * Cleans up binary packet reconstruction variables.
   */
  finishedReconstruction() {
    this.reconPack = null, this.buffers = [];
  }
}
const Sk = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  Decoder: Mf,
  Encoder: gk,
  get PacketType() {
    return ce;
  },
  protocol: mk
}, Symbol.toStringTag, { value: "Module" }));
function qt(n, e, t) {
  return n.on(e, t), function() {
    n.off(e, t);
  };
}
const bk = Object.freeze({
  connect: 1,
  connect_error: 1,
  disconnect: 1,
  disconnecting: 1,
  // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener
  newListener: 1,
  removeListener: 1
});
class _g extends Ze {
  /**
   * `Socket` constructor.
   */
  constructor(e, t, i) {
    super(), this.connected = !1, this.recovered = !1, this.receiveBuffer = [], this.sendBuffer = [], this._queue = [], this._queueSeq = 0, this.ids = 0, this.acks = {}, this.flags = {}, this.io = e, this.nsp = t, i && i.auth && (this.auth = i.auth), this._opts = Object.assign({}, i), this.io._autoConnect && this.open();
  }
  /**
   * Whether the socket is currently disconnected
   *
   * @example
   * const socket = io();
   *
   * socket.on("connect", () => {
   *   console.log(socket.disconnected); // false
   * });
   *
   * socket.on("disconnect", () => {
   *   console.log(socket.disconnected); // true
   * });
   */
  get disconnected() {
    return !this.connected;
  }
  /**
   * Subscribe to open, close and packet events
   *
   * @private
   */
  subEvents() {
    if (this.subs)
      return;
    const e = this.io;
    this.subs = [
      qt(e, "open", this.onopen.bind(this)),
      qt(e, "packet", this.onpacket.bind(this)),
      qt(e, "error", this.onerror.bind(this)),
      qt(e, "close", this.onclose.bind(this))
    ];
  }
  /**
   * Whether the Socket will try to reconnect when its Manager connects or reconnects.
   *
   * @example
   * const socket = io();
   *
   * console.log(socket.active); // true
   *
   * socket.on("disconnect", (reason) => {
   *   if (reason === "io server disconnect") {
   *     // the disconnection was initiated by the server, you need to manually reconnect
   *     console.log(socket.active); // false
   *   }
   *   // else the socket will automatically try to reconnect
   *   console.log(socket.active); // true
   * });
   */
  get active() {
    return !!this.subs;
  }
  /**
   * "Opens" the socket.
   *
   * @example
   * const socket = io({
   *   autoConnect: false
   * });
   *
   * socket.connect();
   */
  connect() {
    return this.connected ? this : (this.subEvents(), this.io._reconnecting || this.io.open(), this.io._readyState === "open" && this.onopen(), this);
  }
  /**
   * Alias for {@link connect()}.
   */
  open() {
    return this.connect();
  }
  /**
   * Sends a `message` event.
   *
   * This method mimics the WebSocket.send() method.
   *
   * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send
   *
   * @example
   * socket.send("hello");
   *
   * // this is equivalent to
   * socket.emit("message", "hello");
   *
   * @return self
   */
  send(...e) {
    return e.unshift("message"), this.emit.apply(this, e), this;
  }
  /**
   * Override `emit`.
   * If the event is in `events`, it's emitted normally.
   *
   * @example
   * socket.emit("hello", "world");
   *
   * // all serializable datastructures are supported (no need to call JSON.stringify)
   * socket.emit("hello", 1, "2", { 3: ["4"], 5: Uint8Array.from([6]) });
   *
   * // with an acknowledgement from the server
   * socket.emit("hello", "world", (val) => {
   *   // ...
   * });
   *
   * @return self
   */
  emit(e, ...t) {
    var i, r, s;
    if (bk.hasOwnProperty(e))
      throw new Error('"' + e.toString() + '" is a reserved event name');
    if (t.unshift(e), this._opts.retries && !this.flags.fromQueue && !this.flags.volatile)
      return this._addToQueue(t), this;
    const o = {
      type: ce.EVENT,
      data: t
    };
    if (o.options = {}, o.options.compress = this.flags.compress !== !1, typeof t[t.length - 1] == "function") {
      const h = this.ids++, f = t.pop();
      this._registerAckCallback(h, f), o.id = h;
    }
    const l = (r = (i = this.io.engine) === null || i === void 0 ? void 0 : i.transport) === null || r === void 0 ? void 0 : r.writable, a = this.connected && !(!((s = this.io.engine) === null || s === void 0) && s._hasPingExpired());
    return this.flags.volatile && !l || (a ? (this.notifyOutgoingListeners(o), this.packet(o)) : this.sendBuffer.push(o)), this.flags = {}, this;
  }
  /**
   * @private
   */
  _registerAckCallback(e, t) {
    var i;
    const r = (i = this.flags.timeout) !== null && i !== void 0 ? i : this._opts.ackTimeout;
    if (r === void 0) {
      this.acks[e] = t;
      return;
    }
    const s = this.io.setTimeoutFn(() => {
      delete this.acks[e];
      for (let l = 0; l < this.sendBuffer.length; l++)
        this.sendBuffer[l].id === e && this.sendBuffer.splice(l, 1);
      t.call(this, new Error("operation has timed out"));
    }, r), o = (...l) => {
      this.io.clearTimeoutFn(s), t.apply(this, l);
    };
    o.withError = !0, this.acks[e] = o;
  }
  /**
   * Emits an event and waits for an acknowledgement
   *
   * @example
   * // without timeout
   * const response = await socket.emitWithAck("hello", "world");
   *
   * // with a specific timeout
   * try {
   *   const response = await socket.timeout(1000).emitWithAck("hello", "world");
   * } catch (err) {
   *   // the server did not acknowledge the event in the given delay
   * }
   *
   * @return a Promise that will be fulfilled when the server acknowledges the event
   */
  emitWithAck(e, ...t) {
    return new Promise((i, r) => {
      const s = (o, l) => o ? r(o) : i(l);
      s.withError = !0, t.push(s), this.emit(e, ...t);
    });
  }
  /**
   * Add the packet to the queue.
   * @param args
   * @private
   */
  _addToQueue(e) {
    let t;
    typeof e[e.length - 1] == "function" && (t = e.pop());
    const i = {
      id: this._queueSeq++,
      tryCount: 0,
      pending: !1,
      args: e,
      flags: Object.assign({ fromQueue: !0 }, this.flags)
    };
    e.push((r, ...s) => i !== this._queue[0] ? void 0 : (r !== null ? i.tryCount > this._opts.retries && (this._queue.shift(), t && t(r)) : (this._queue.shift(), t && t(null, ...s)), i.pending = !1, this._drainQueue())), this._queue.push(i), this._drainQueue();
  }
  /**
   * Send the first packet of the queue, and wait for an acknowledgement from the server.
   * @param force - whether to resend a packet that has not been acknowledged yet
   *
   * @private
   */
  _drainQueue(e = !1) {
    if (!this.connected || this._queue.length === 0)
      return;
    const t = this._queue[0];
    t.pending && !e || (t.pending = !0, t.tryCount++, this.flags = t.flags, this.emit.apply(this, t.args));
  }
  /**
   * Sends a packet.
   *
   * @param packet
   * @private
   */
  packet(e) {
    e.nsp = this.nsp, this.io._packet(e);
  }
  /**
   * Called upon engine `open`.
   *
   * @private
   */
  onopen() {
    typeof this.auth == "function" ? this.auth((e) => {
      this._sendConnectPacket(e);
    }) : this._sendConnectPacket(this.auth);
  }
  /**
   * Sends a CONNECT packet to initiate the Socket.IO session.
   *
   * @param data
   * @private
   */
  _sendConnectPacket(e) {
    this.packet({
      type: ce.CONNECT,
      data: this._pid ? Object.assign({ pid: this._pid, offset: this._lastOffset }, e) : e
    });
  }
  /**
   * Called upon engine or manager `error`.
   *
   * @param err
   * @private
   */
  onerror(e) {
    this.connected || this.emitReserved("connect_error", e);
  }
  /**
   * Called upon engine `close`.
   *
   * @param reason
   * @param description
   * @private
   */
  onclose(e, t) {
    this.connected = !1, delete this.id, this.emitReserved("disconnect", e, t), this._clearAcks();
  }
  /**
   * Clears the acknowledgement handlers upon disconnection, since the client will never receive an acknowledgement from
   * the server.
   *
   * @private
   */
  _clearAcks() {
    Object.keys(this.acks).forEach((e) => {
      if (!this.sendBuffer.some((i) => String(i.id) === e)) {
        const i = this.acks[e];
        delete this.acks[e], i.withError && i.call(this, new Error("socket has been disconnected"));
      }
    });
  }
  /**
   * Called with socket packet.
   *
   * @param packet
   * @private
   */
  onpacket(e) {
    if (e.nsp === this.nsp)
      switch (e.type) {
        case ce.CONNECT:
          e.data && e.data.sid ? this.onconnect(e.data.sid, e.data.pid) : this.emitReserved("connect_error", new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));
          break;
        case ce.EVENT:
        case ce.BINARY_EVENT:
          this.onevent(e);
          break;
        case ce.ACK:
        case ce.BINARY_ACK:
          this.onack(e);
          break;
        case ce.DISCONNECT:
          this.ondisconnect();
          break;
        case ce.CONNECT_ERROR:
          this.destroy();
          const i = new Error(e.data.message);
          i.data = e.data.data, this.emitReserved("connect_error", i);
          break;
      }
  }
  /**
   * Called upon a server event.
   *
   * @param packet
   * @private
   */
  onevent(e) {
    const t = e.data || [];
    e.id != null && t.push(this.ack(e.id)), this.connected ? this.emitEvent(t) : this.receiveBuffer.push(Object.freeze(t));
  }
  emitEvent(e) {
    if (this._anyListeners && this._anyListeners.length) {
      const t = this._anyListeners.slice();
      for (const i of t)
        i.apply(this, e);
    }
    super.emit.apply(this, e), this._pid && e.length && typeof e[e.length - 1] == "string" && (this._lastOffset = e[e.length - 1]);
  }
  /**
   * Produces an ack callback to emit with an event.
   *
   * @private
   */
  ack(e) {
    const t = this;
    let i = !1;
    return function(...r) {
      i || (i = !0, t.packet({
        type: ce.ACK,
        id: e,
        data: r
      }));
    };
  }
  /**
   * Called upon a server acknowledgement.
   *
   * @param packet
   * @private
   */
  onack(e) {
    const t = this.acks[e.id];
    typeof t == "function" && (delete this.acks[e.id], t.withError && e.data.unshift(null), t.apply(this, e.data));
  }
  /**
   * Called upon server connect.
   *
   * @private
   */
  onconnect(e, t) {
    this.id = e, this.recovered = t && this._pid === t, this._pid = t, this.connected = !0, this.emitBuffered(), this.emitReserved("connect"), this._drainQueue(!0);
  }
  /**
   * Emit buffered events (received and emitted).
   *
   * @private
   */
  emitBuffered() {
    this.receiveBuffer.forEach((e) => this.emitEvent(e)), this.receiveBuffer = [], this.sendBuffer.forEach((e) => {
      this.notifyOutgoingListeners(e), this.packet(e);
    }), this.sendBuffer = [];
  }
  /**
   * Called upon server disconnect.
   *
   * @private
   */
  ondisconnect() {
    this.destroy(), this.onclose("io server disconnect");
  }
  /**
   * Called upon forced client/server side disconnections,
   * this method ensures the manager stops tracking us and
   * that reconnections don't get triggered for this.
   *
   * @private
   */
  destroy() {
    this.subs && (this.subs.forEach((e) => e()), this.subs = void 0), this.io._destroy(this);
  }
  /**
   * Disconnects the socket manually. In that case, the socket will not try to reconnect.
   *
   * If this is the last active Socket instance of the {@link Manager}, the low-level connection will be closed.
   *
   * @example
   * const socket = io();
   *
   * socket.on("disconnect", (reason) => {
   *   // console.log(reason); prints "io client disconnect"
   * });
   *
   * socket.disconnect();
   *
   * @return self
   */
  disconnect() {
    return this.connected && this.packet({ type: ce.DISCONNECT }), this.destroy(), this.connected && this.onclose("io client disconnect"), this;
  }
  /**
   * Alias for {@link disconnect()}.
   *
   * @return self
   */
  close() {
    return this.disconnect();
  }
  /**
   * Sets the compress flag.
   *
   * @example
   * socket.compress(false).emit("hello");
   *
   * @param compress - if `true`, compresses the sending data
   * @return self
   */
  compress(e) {
    return this.flags.compress = e, this;
  }
  /**
   * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not
   * ready to send messages.
   *
   * @example
   * socket.volatile.emit("hello"); // the server may or may not receive it
   *
   * @returns self
   */
  get volatile() {
    return this.flags.volatile = !0, this;
  }
  /**
   * Sets a modifier for a subsequent event emission that the callback will be called with an error when the
   * given number of milliseconds have elapsed without an acknowledgement from the server:
   *
   * @example
   * socket.timeout(5000).emit("my-event", (err) => {
   *   if (err) {
   *     // the server did not acknowledge the event in the given delay
   *   }
   * });
   *
   * @returns self
   */
  timeout(e) {
    return this.flags.timeout = e, this;
  }
  /**
   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the
   * callback.
   *
   * @example
   * socket.onAny((event, ...args) => {
   *   console.log(`got ${event}`);
   * });
   *
   * @param listener
   */
  onAny(e) {
    return this._anyListeners = this._anyListeners || [], this._anyListeners.push(e), this;
  }
  /**
   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the
   * callback. The listener is added to the beginning of the listeners array.
   *
   * @example
   * socket.prependAny((event, ...args) => {
   *   console.log(`got event ${event}`);
   * });
   *
   * @param listener
   */
  prependAny(e) {
    return this._anyListeners = this._anyListeners || [], this._anyListeners.unshift(e), this;
  }
  /**
   * Removes the listener that will be fired when any event is emitted.
   *
   * @example
   * const catchAllListener = (event, ...args) => {
   *   console.log(`got event ${event}`);
   * }
   *
   * socket.onAny(catchAllListener);
   *
   * // remove a specific listener
   * socket.offAny(catchAllListener);
   *
   * // or remove all listeners
   * socket.offAny();
   *
   * @param listener
   */
  offAny(e) {
    if (!this._anyListeners)
      return this;
    if (e) {
      const t = this._anyListeners;
      for (let i = 0; i < t.length; i++)
        if (e === t[i])
          return t.splice(i, 1), this;
    } else
      this._anyListeners = [];
    return this;
  }
  /**
   * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,
   * e.g. to remove listeners.
   */
  listenersAny() {
    return this._anyListeners || [];
  }
  /**
   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the
   * callback.
   *
   * Note: acknowledgements sent to the server are not included.
   *
   * @example
   * socket.onAnyOutgoing((event, ...args) => {
   *   console.log(`sent event ${event}`);
   * });
   *
   * @param listener
   */
  onAnyOutgoing(e) {
    return this._anyOutgoingListeners = this._anyOutgoingListeners || [], this._anyOutgoingListeners.push(e), this;
  }
  /**
   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the
   * callback. The listener is added to the beginning of the listeners array.
   *
   * Note: acknowledgements sent to the server are not included.
   *
   * @example
   * socket.prependAnyOutgoing((event, ...args) => {
   *   console.log(`sent event ${event}`);
   * });
   *
   * @param listener
   */
  prependAnyOutgoing(e) {
    return this._anyOutgoingListeners = this._anyOutgoingListeners || [], this._anyOutgoingListeners.unshift(e), this;
  }
  /**
   * Removes the listener that will be fired when any event is emitted.
   *
   * @example
   * const catchAllListener = (event, ...args) => {
   *   console.log(`sent event ${event}`);
   * }
   *
   * socket.onAnyOutgoing(catchAllListener);
   *
   * // remove a specific listener
   * socket.offAnyOutgoing(catchAllListener);
   *
   * // or remove all listeners
   * socket.offAnyOutgoing();
   *
   * @param [listener] - the catch-all listener (optional)
   */
  offAnyOutgoing(e) {
    if (!this._anyOutgoingListeners)
      return this;
    if (e) {
      const t = this._anyOutgoingListeners;
      for (let i = 0; i < t.length; i++)
        if (e === t[i])
          return t.splice(i, 1), this;
    } else
      this._anyOutgoingListeners = [];
    return this;
  }
  /**
   * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,
   * e.g. to remove listeners.
   */
  listenersAnyOutgoing() {
    return this._anyOutgoingListeners || [];
  }
  /**
   * Notify the listeners for each packet sent
   *
   * @param packet
   *
   * @private
   */
  notifyOutgoingListeners(e) {
    if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {
      const t = this._anyOutgoingListeners.slice();
      for (const i of t)
        i.apply(this, e.data);
    }
  }
}
function ur(n) {
  n = n || {}, this.ms = n.min || 100, this.max = n.max || 1e4, this.factor = n.factor || 2, this.jitter = n.jitter > 0 && n.jitter <= 1 ? n.jitter : 0, this.attempts = 0;
}
ur.prototype.duration = function() {
  var n = this.ms * Math.pow(this.factor, this.attempts++);
  if (this.jitter) {
    var e = Math.random(), t = Math.floor(e * this.jitter * n);
    n = (Math.floor(e * 10) & 1) == 0 ? n - t : n + t;
  }
  return Math.min(n, this.max) | 0;
};
ur.prototype.reset = function() {
  this.attempts = 0;
};
ur.prototype.setMin = function(n) {
  this.ms = n;
};
ur.prototype.setMax = function(n) {
  this.max = n;
};
ur.prototype.setJitter = function(n) {
  this.jitter = n;
};
class Yc extends Ze {
  constructor(e, t) {
    var i;
    super(), this.nsps = {}, this.subs = [], e && typeof e == "object" && (t = e, e = void 0), t = t || {}, t.path = t.path || "/socket.io", this.opts = t, Kl(this, t), this.reconnection(t.reconnection !== !1), this.reconnectionAttempts(t.reconnectionAttempts || 1 / 0), this.reconnectionDelay(t.reconnectionDelay || 1e3), this.reconnectionDelayMax(t.reconnectionDelayMax || 5e3), this.randomizationFactor((i = t.randomizationFactor) !== null && i !== void 0 ? i : 0.5), this.backoff = new ur({
      min: this.reconnectionDelay(),
      max: this.reconnectionDelayMax(),
      jitter: this.randomizationFactor()
    }), this.timeout(t.timeout == null ? 2e4 : t.timeout), this._readyState = "closed", this.uri = e;
    const r = t.parser || Sk;
    this.encoder = new r.Encoder(), this.decoder = new r.Decoder(), this._autoConnect = t.autoConnect !== !1, this._autoConnect && this.open();
  }
  reconnection(e) {
    return arguments.length ? (this._reconnection = !!e, e || (this.skipReconnect = !0), this) : this._reconnection;
  }
  reconnectionAttempts(e) {
    return e === void 0 ? this._reconnectionAttempts : (this._reconnectionAttempts = e, this);
  }
  reconnectionDelay(e) {
    var t;
    return e === void 0 ? this._reconnectionDelay : (this._reconnectionDelay = e, (t = this.backoff) === null || t === void 0 || t.setMin(e), this);
  }
  randomizationFactor(e) {
    var t;
    return e === void 0 ? this._randomizationFactor : (this._randomizationFactor = e, (t = this.backoff) === null || t === void 0 || t.setJitter(e), this);
  }
  reconnectionDelayMax(e) {
    var t;
    return e === void 0 ? this._reconnectionDelayMax : (this._reconnectionDelayMax = e, (t = this.backoff) === null || t === void 0 || t.setMax(e), this);
  }
  timeout(e) {
    return arguments.length ? (this._timeout = e, this) : this._timeout;
  }
  /**
   * Starts trying to reconnect if reconnection is enabled and we have not
   * started reconnecting yet
   *
   * @private
   */
  maybeReconnectOnOpen() {
    !this._reconnecting && this._reconnection && this.backoff.attempts === 0 && this.reconnect();
  }
  /**
   * Sets the current transport `socket`.
   *
   * @param {Function} fn - optional, callback
   * @return self
   * @public
   */
  open(e) {
    if (~this._readyState.indexOf("open"))
      return this;
    this.engine = new lk(this.uri, this.opts);
    const t = this.engine, i = this;
    this._readyState = "opening", this.skipReconnect = !1;
    const r = qt(t, "open", function() {
      i.onopen(), e && e();
    }), s = (l) => {
      this.cleanup(), this._readyState = "closed", this.emitReserved("error", l), e ? e(l) : this.maybeReconnectOnOpen();
    }, o = qt(t, "error", s);
    if (this._timeout !== !1) {
      const l = this._timeout, a = this.setTimeoutFn(() => {
        r(), s(new Error("timeout")), t.close();
      }, l);
      this.opts.autoUnref && a.unref(), this.subs.push(() => {
        this.clearTimeoutFn(a);
      });
    }
    return this.subs.push(r), this.subs.push(o), this;
  }
  /**
   * Alias for open()
   *
   * @return self
   * @public
   */
  connect(e) {
    return this.open(e);
  }
  /**
   * Called upon transport open.
   *
   * @private
   */
  onopen() {
    this.cleanup(), this._readyState = "open", this.emitReserved("open");
    const e = this.engine;
    this.subs.push(
      qt(e, "ping", this.onping.bind(this)),
      qt(e, "data", this.ondata.bind(this)),
      qt(e, "error", this.onerror.bind(this)),
      qt(e, "close", this.onclose.bind(this)),
      // @ts-ignore
      qt(this.decoder, "decoded", this.ondecoded.bind(this))
    );
  }
  /**
   * Called upon a ping.
   *
   * @private
   */
  onping() {
    this.emitReserved("ping");
  }
  /**
   * Called with data.
   *
   * @private
   */
  ondata(e) {
    try {
      this.decoder.add(e);
    } catch (t) {
      this.onclose("parse error", t);
    }
  }
  /**
   * Called when parser fully decodes a packet.
   *
   * @private
   */
  ondecoded(e) {
    Hl(() => {
      this.emitReserved("packet", e);
    }, this.setTimeoutFn);
  }
  /**
   * Called upon socket error.
   *
   * @private
   */
  onerror(e) {
    this.emitReserved("error", e);
  }
  /**
   * Creates a new socket for the given `nsp`.
   *
   * @return {Socket}
   * @public
   */
  socket(e, t) {
    let i = this.nsps[e];
    return i ? this._autoConnect && !i.active && i.connect() : (i = new _g(this, e, t), this.nsps[e] = i), i;
  }
  /**
   * Called upon a socket close.
   *
   * @param socket
   * @private
   */
  _destroy(e) {
    const t = Object.keys(this.nsps);
    for (const i of t)
      if (this.nsps[i].active)
        return;
    this._close();
  }
  /**
   * Writes a packet.
   *
   * @param packet
   * @private
   */
  _packet(e) {
    const t = this.encoder.encode(e);
    for (let i = 0; i < t.length; i++)
      this.engine.write(t[i], e.options);
  }
  /**
   * Clean up transport subscriptions and packet buffer.
   *
   * @private
   */
  cleanup() {
    this.subs.forEach((e) => e()), this.subs.length = 0, this.decoder.destroy();
  }
  /**
   * Close the current socket.
   *
   * @private
   */
  _close() {
    this.skipReconnect = !0, this._reconnecting = !1, this.onclose("forced close");
  }
  /**
   * Alias for close()
   *
   * @private
   */
  disconnect() {
    return this._close();
  }
  /**
   * Called when:
   *
   * - the low-level engine is closed
   * - the parser encountered a badly formatted packet
   * - all sockets are disconnected
   *
   * @private
   */
  onclose(e, t) {
    var i;
    this.cleanup(), (i = this.engine) === null || i === void 0 || i.close(), this.backoff.reset(), this._readyState = "closed", this.emitReserved("close", e, t), this._reconnection && !this.skipReconnect && this.reconnect();
  }
  /**
   * Attempt a reconnection.
   *
   * @private
   */
  reconnect() {
    if (this._reconnecting || this.skipReconnect)
      return this;
    const e = this;
    if (this.backoff.attempts >= this._reconnectionAttempts)
      this.backoff.reset(), this.emitReserved("reconnect_failed"), this._reconnecting = !1;
    else {
      const t = this.backoff.duration();
      this._reconnecting = !0;
      const i = this.setTimeoutFn(() => {
        e.skipReconnect || (this.emitReserved("reconnect_attempt", e.backoff.attempts), !e.skipReconnect && e.open((r) => {
          r ? (e._reconnecting = !1, e.reconnect(), this.emitReserved("reconnect_error", r)) : e.onreconnect();
        }));
      }, t);
      this.opts.autoUnref && i.unref(), this.subs.push(() => {
        this.clearTimeoutFn(i);
      });
    }
  }
  /**
   * Called upon successful reconnect.
   *
   * @private
   */
  onreconnect() {
    const e = this.backoff.attempts;
    this._reconnecting = !1, this.backoff.reset(), this.emitReserved("reconnect", e);
  }
}
const xr = {};
function Ao(n, e) {
  typeof n == "object" && (e = n, n = void 0), e = e || {};
  const t = ak(n, e.path || "/socket.io"), i = t.source, r = t.id, s = t.path, o = xr[r] && s in xr[r].nsps, l = e.forceNew || e["force new connection"] || e.multiplex === !1 || o;
  let a;
  return l ? a = new Yc(i, e) : (xr[r] || (xr[r] = new Yc(i, e)), a = xr[r]), t.query && !e.query && (e.query = t.queryKey), a.socket(t.path, e);
}
Object.assign(Ao, {
  Manager: Yc,
  Socket: _g,
  io: Ao,
  connect: Ao
});
const he = [], Qk = (n) => {
  he.push(n);
}, ud = (n) => {
  const e = he.findIndex((i) => i.uniqueId === n);
  if (e === -1)
    return;
  const t = he[e];
  return he.splice(e, 1), t;
}, Xg = [
  "a[href]",
  "area[href]",
  "input:not([disabled])",
  "select:not([disabled])",
  "textarea:not([disabled])",
  "button:not([disabled])",
  "iframe",
  "[tabindex]",
  "[contentEditable=true]"
].reduce((n, e, t) => `${n}${t ? "," : ""}${e}:not([tabindex="-1"])`, "");
let _a = !1;
const yt = ({ from: n, stopAtRootElement: e, ignoreElement: t = [], allowSelectors: i, direction: r = "forwards", wrap: s }) => {
  let o, l = !1;
  if (n instanceof Element)
    l = Dr(n), o = n;
  else {
    if (n === "activeElement") {
      const p = document.activeElement;
      l = Dr(p), o = dd(p);
    }
    typeof n == "object" && (n.getActiveElement && (o = dd(n.el)), l = n.isIframe);
  }
  const a = o, c = a.parentElement, h = l, f = a, u = Xg + (i ? "," + i.join(",") : "");
  if (!f)
    return null;
  const d = (p, m) => {
    let y = !1;
    const S = p.children, b = S.length;
    if (_a && (y = !0), r === "forwards")
      for (let w = 0; w < b; w++) {
        const k = S[w];
        if (y) {
          const Q = al(k, u, r, t);
          if (Q)
            return Q;
          continue;
        }
        if (k === e)
          return null;
        if (k === m) {
          y = !0;
          continue;
        }
      }
    else
      for (let w = b - 1; w >= 0; w--) {
        const k = S[w];
        if (y) {
          const Q = al(k, u, r, t);
          if (Q)
            return Q;
          continue;
        }
        if (k === e)
          return null;
        if (k === m) {
          y = !0;
          continue;
        }
      }
    if (m = p, p = p.parentElement, !p && h) {
      const w = document.activeElement;
      w && Dr(w) && (m = w, p = w.parentElement);
    }
    return p ? d(p, m) : null;
  };
  let O = d(c, f);
  return !O && s && e && (_a = !0, O = yt({
    from: e,
    allowSelectors: i,
    direction: r,
    ignoreElement: t,
    // stopAtElement,
    wrap: !1
  })), _a = !1, O;
}, qg = (n) => {
  try {
    return n.contentWindow;
  } catch {
    return null;
  }
}, xk = (n) => {
  const e = qg(n);
  return e ? e.document : null;
}, dd = (n) => {
  if (!Dr(n))
    return n;
  const e = xk(n);
  return e && e.activeElement || n;
}, Od = (n, e = window) => {
  const t = (r) => r.display === "none" || r.visibility === "hidden";
  if (n.style && t(n.style) || n.hidden)
    return !0;
  const i = e.getComputedStyle(n);
  return !!(!i || t(i));
}, al = (n, e = Xg, t = "forwards", i = [], r = window, s = !0) => {
  const o = (f) => {
    if (!f.matches(e))
      return {
        el: f,
        matched: !1
      };
    const u = f.getAttribute("tabindex");
    if (Dr(f) && (!u || u === "-1")) {
      const d = qg(f);
      return d ? (f = d.document.documentElement, r = d, { el: f, matched: !1, windowContext: d }) : { el: f, matched: !0 };
    }
    return {
      el: f,
      matched: !0
    };
  };
  if (s) {
    if (i.some((O) => O === n) || Od(n, r))
      return null;
    const { el: f, matched: u, windowContext: d } = o(n);
    return n = f, u ? n : (r = d || r, al(n, e, t, i, r, !1));
  }
  const l = n.shadowRoot;
  l && (n = l);
  const a = n.children, c = a.length, h = (f) => {
    if (i.some((m) => m === f) || Od(f, r))
      return {
        continue: !0
      };
    const { el: u, matched: d, windowContext: O } = o(f);
    if (f = u, r = O || r, d)
      return { returnVal: f };
    const p = al(f, e, t, i, r, !1);
    return p ? { returnVal: p } : null;
  };
  if (t === "forwards")
    for (let f = 0; f < c; f++) {
      let u = a[f];
      const d = h(u);
      if (d) {
        if (d.continue)
          continue;
        if (d.returnVal)
          return d.returnVal;
      }
    }
  else
    for (let f = c - 1; f >= 0; f--) {
      let u = a[f];
      const d = h(u);
      if (d) {
        if (d.continue)
          continue;
        if (d.returnVal)
          return d.returnVal;
      }
    }
  return null;
}, Dr = (n) => n.tagName === "IFRAME", Lf = (n) => n.offsetHeight === 0 && n.offsetWidth === 0, Zg = (n) => Object.getPrototypeOf(n) === Object.prototype, Ve = (n, { inputElement: e, type: t, subType: i }) => {
  if (e === "menuPopup")
    return n.menuPopupEl;
  if (e === "menuButton")
    return Ct(n.menuBtnEls);
  if (t === "focusElementOnOpen") {
    if (Zg(e))
      return Ve(n, {
        inputElement: e.target,
        type: "focusElementOnOpen"
      });
    if (e === "none")
      return null;
    if (e === "firstChild")
      return yt({
        from: n.focusSentinelBeforeEl,
        stopAtRootElement: n.containerEl
      });
    if (typeof e == "string")
      return n.containerEl?.querySelector(e);
    if (e instanceof Element)
      return e;
    if (typeof e == "object")
      return Ve(n, {
        inputElement: e.target,
        type: "focusElementOnOpen"
      });
    const r = e();
    return typeof r == "string" ? n.containerEl?.querySelector(r) : r;
  }
  if (e == null && t === "menuPopup")
    return n.containerEl ? n.menuPopupEl ? n.menuPopupEl : n.containerEl.children[1] : null;
  if (typeof e == "string" && t === "menuButton" || typeof e == "string")
    return document.querySelector(e);
  if (e instanceof Element)
    return e;
  if (typeof e == "function") {
    const r = e();
    if (r instanceof Element)
      return r;
    if (t === "closeButton")
      return n.containerEl ? n.containerEl.querySelector(r) : null;
  }
  if (t === "focusElementOnClose") {
    if (!e)
      return null;
    switch (i) {
      case "tabForwards":
        return Ve(n, { inputElement: e.tabForwards });
      case "tabBackwards":
        return Ve(n, { inputElement: e.tabBackwards });
      case "click":
        return Ve(n, { inputElement: e.click });
      case "escapeKey":
        return Ve(n, { inputElement: e.escapeKey });
      case "scrolling":
        return Ve(n, { inputElement: e.scrolling });
    }
  }
  if (e == null)
    return null;
  if (Array.isArray(e))
    return e.map((r) => Ve(n, { inputElement: r, type: t }));
  for (const r in e) {
    const s = e[r];
    return Ve(n, { inputElement: s });
  }
  return null;
}, cl = (n) => {
  const e = (t) => {
    const i = (s) => s.visibility === "hidden";
    if (t.style && i(t.style) || t.hidden)
      return !0;
    const r = window.getComputedStyle(t);
    return !!(!r || i(r));
  };
  return Lf(n) || e(n);
}, Mt = (n, e, t) => {
  for (let i = n.length - 1; i >= 0; i--) {
    const { item: r, continue: s } = e(n[i]);
    if (r && t(r), !s)
      return;
  }
}, kk = (n, e) => {
  const { timeouts: t, closeWhenMenuButtonIsClicked: i, focusedMenuBtn: r, onClickOutsideMenuButtonRef: s, setOpen: o, open: l, deadMenuButton: a, closeWhenClickingOutside: c } = n;
  n.menuBtnMouseDownFired = !1;
  const h = e.currentTarget;
  if (Y.focusedMenuBtns.forEach((f) => f.el = null), !a) {
    if (n.menuBtnKeyupTabFired = !1, r.el = h, Y.focusedMenuBtns.add(r), !c) {
      const f = he[he.length - 1];
      f && !f.menuBtnEls.includes(h) && !f.containerEl.contains(h) && Mt(he, (u) => ({ item: u, continue: !0 }), (u) => {
        const { setOpen: d } = u;
        d(!1);
      });
    }
    if (!i) {
      o(!0);
      return;
    }
    l() && (Y.closedByEvents = !0), o(!l());
  }
}, wk = (n, e) => {
  const { containerEl: t, focusedMenuBtn: i, overlay: r, setOpen: s, timeouts: o, menuBtnMouseDownFired: l, closeWhenDocumentBlurs: a, closeWhenClickingOutside: c, open: h } = n, f = e.currentTarget;
  if (queueMicrotask(() => {
    Bg();
  }), n.menuBtnKeyupTabFired) {
    n.menuBtnKeyupTabFired = !1;
    return;
  }
  if (l || t && t.contains(e.relatedTarget))
    return;
  if (!c && h()) {
    document.addEventListener("keydown", ea);
    return;
  }
  const u = Y.clickTarget, d = () => {
    const O = document.activeElement;
    if (!e.relatedTarget && O && O.tagName, !(t && t.contains(O)) && !(!a && !document.hasFocus()) && !Y.closedBySetOpen && f.isConnected) {
      if (cl(f)) {
        let p = !1;
        if (n.menuBtnEls?.some((m) => m === f || cl(m) ? !1 : u && !m.contains(u) ? (p = !0, !1) : (m.focus(), !0)), !p)
          return;
      }
      n.open() && (Y.closedByEvents = !0, i.el = null, s(!1));
    }
  };
  o.menuButtonBlurTimeoutId = window.setTimeout(d);
}, vk = (n, e) => {
  const { focusMenuButtonOnMouseDown: t } = n, i = e.currentTarget;
  n.menuBtnMouseDownFired = !0, i.addEventListener("click", n.onClickMenuButtonRef), t && (i.addEventListener("blur", n.onBlurMenuButtonRef), requestAnimationFrame(() => {
    i.focus();
  }));
}, Pk = (n) => {
  n.focusedMenuBtn.el = null;
}, $k = (n, e) => {
  const { containerEl: t, setOpen: i, open: r, onKeydownMenuButtonRef: s, onBlurMenuButtonRef: o, mount: l, focusSentinelBeforeEl: a, focusSentinelAfterEl: c, ignoreMenuPopupWhenTabbing: h } = n, f = e.currentTarget;
  if (e.key !== "Tab" || (Y.focusedMenuBtns.forEach((d) => d.el = null), !r()))
    return;
  if (n.menuBtnKeyupTabFired = !0, e.key === "Tab" && e.shiftKey) {
    if (Y.closedByEvents = !0, !l || f.nextElementSibling !== t) {
      e.preventDefault();
      let d = yt({
        from: f,
        direction: "backwards",
        ignoreElement: [
          t,
          a,
          c
        ]
      });
      d && d.focus();
    }
    i(!1), f.removeEventListener("keydown", s), f.removeEventListener("blur", o);
    return;
  }
  if (e.preventDefault(), h) {
    const d = yt({
      from: f,
      direction: "forwards",
      ignoreElement: [
        t,
        a,
        c
      ]
    });
    d && d.focus(), i(!1), f.removeEventListener("keydown", s), f.removeEventListener("blur", o);
    return;
  }
  let u = yt({
    from: a,
    stopAtRootElement: t
  });
  u ? u.focus() : t.focus(), u || (i(!1), u = yt({
    from: a
  }), u && u.focus()), f.removeEventListener("keydown", s), f.removeEventListener("blur", o);
}, Tk = (n, e) => {
  const { closeWhenMenuButtonIsTabbed: t, timeouts: i, deadMenuButton: r, menuBtnEls: s, focusedMenuBtn: o } = n, l = Ct(s);
  if (l.addEventListener("click", n.onClickMenuButtonRef), l.addEventListener("blur", n.onBlurMenuButtonRef), l.addEventListener("keydown", n.onKeydownMenuButtonRef), o.el = e.currentTarget, window.setTimeout(() => {
  }), r) {
    l.addEventListener("blur", n.onBlurMenuButtonRef), l.addEventListener("keydown", n.onKeydownMenuButtonRef);
    return;
  }
  t || clearTimeout(i.containerFocusTimeoutId);
}, Ct = (n) => {
  if (n)
    return n.length <= 1 ? n[0] : n.find((e) => {
      if (!(!e || Lf(e)))
        return e;
    });
}, Ck = ({ state: n, menuButton: e, open: t }) => {
  if (Array.isArray(e) && !e.length)
    return;
  const { focusedMenuBtn: i, containerEl: r } = n, s = Ve(n, {
    inputElement: e,
    type: "menuButton"
  });
  if (!s)
    return;
  n.menuBtnEls = Array.isArray(s) ? s : [s];
  const o = he.find((l) => l.uniqueId === n.uniqueId);
  o && (o.menuBtnEls = n.menuBtnEls), n.menuBtnEls.forEach((l, a, c) => {
    if (Rk(n, l), l.addEventListener("mousedown", n.onMouseDownMenuButtonRef), l.addEventListener("focus", n.onFocusMenuButtonRef), i.el && i.el !== l && (!(c.length > 1) || !Lf(l))) {
      if (i.el = l, r && r.contains(document.activeElement))
        return;
      l.focus({ preventScroll: !0 });
    }
  });
}, Rk = (n, e) => {
  const { modal: t, uniqueId: i, deadMenuButton: r } = n;
  if (!r) {
    if (e.hasAttribute("type"))
      return;
    e.setAttribute("type", "button"), e.setAttribute("aria-expanded", "false");
  }
  t && (e.setAttribute("aria-controls", i), e.setAttribute("aria-haspopup", "dialog"));
}, Ek = (n) => {
  const { menuBtnEls: e, deadMenuButton: t } = n;
  t && e && e.forEach((i) => {
    i.setAttribute("aria-expanded", "true");
  });
}, Ak = (n) => {
  const { menuBtnEls: e, deadMenuButton: t } = n;
  t && e && e.forEach((i) => {
    i.setAttribute("aria-expanded", "false");
  });
}, _k = (n, e) => {
  !n || !n.menuBtnEls || (n.menuBtnMouseDownFired = !1, n.menuBtnEls.forEach((t) => {
    e && (t.removeEventListener("blur", n.onBlurMenuButtonRef), t.removeEventListener("keydown", n.onKeydownMenuButtonRef), t.removeEventListener("click", n.onClickMenuButtonRef), t.removeEventListener("focus", n.onFocusMenuButtonRef), t.removeEventListener("mousedown", n.onMouseDownMenuButtonRef));
  }));
}, Xk = (n) => {
  if (Y.thirdPartyPopupEl)
    return Y.thirdPartyPopupEl = null, null;
  if (!document.hasFocus())
    return null;
  const e = Y.clickTarget, i = n.map((r) => document.querySelector(r)).find((r) => r && r.contains(e)) || null;
  return Y.thirdPartyPopupEl = i, i;
}, qk = (n) => {
  for (let e of n) {
    const t = document.querySelector(e);
    if (t && !cl(t))
      return t;
  }
  return null;
}, Zk = () => {
  document.addEventListener("click", Mg), document.addEventListener("keydown", Lg, { capture: !0 });
}, Jl = () => {
  document.removeEventListener("click", Mg), document.removeEventListener("keydown", Lg, { capture: !0 }), Y.thirdPartyPopupEl = null, Y.thirdPartyPopupElPressedEscape = !1;
}, Mg = (n) => {
  const e = n.target, { thirdPartyPopupEl: t } = Y;
  t && t.contains(e) || Mt(he, (i) => {
    const { containerEl: r } = i;
    return r.contains(e) ? { continue: !1 } : { item: i, continue: !0 };
  }, (i) => {
    const { setOpen: r } = i;
    Y.closedByEvents = !0, r(!1), Jl();
  });
}, Lg = (n) => {
  n.key === "Escape" && (Y.thirdPartyPopupElPressedEscape = !0);
};
let Xa = !1, Nc = !1, Mi = null, Vg = 0, Gc = null, _o = null;
const Y = {
  closedBySetOpen: !1,
  documentClickTimeout: null,
  closedByEvents: !1,
  focusedMenuBtns: /* @__PURE__ */ new Set(),
  cursorKeysPrevEl: null,
  clickTarget: null,
  overlayMouseDown: !1,
  thirdPartyPopupEl: null,
  thirdPartyPopupElPressedEscape: !1
};
let pd = null;
const Bg = () => {
  clearTimeout(pd), pd = window.setTimeout(() => {
    Y.clickTarget = null;
  });
}, Vf = () => {
  document.removeEventListener("pointerup", Vf);
}, Wg = (n) => {
  const e = n.target;
  Y.clickTarget = e, document.addEventListener("pointerup", Vf);
}, zg = (n) => {
  const e = he[he.length - 1];
  setTimeout(() => {
    const i = n.timeStamp - Vg;
    if (!document.hasFocus() && i < 50) {
      Mt(he, (r) => ({ item: r, continue: !0 }), (r) => {
        const { setOpen: s } = r;
        Y.closedByEvents = !0, s(!1);
      });
      return;
    }
  });
  const t = (i) => {
    if (i.overlay || i.overlayEl || !i.closeWhenDocumentBlurs)
      return;
    Ct(i.menuBtnEls).focus(), Y.closedByEvents = !0, i.setOpen(!1);
  };
  e.overlay || setTimeout(() => {
    const i = document.activeElement;
    if (!i || i.tagName !== "IFRAME") {
      Mt(he, (r) => ({ item: r, continue: !0 }), (r) => t(r));
      return;
    }
    Mt(he, (r) => {
      const { containerEl: s } = r;
      return s.contains(i) ? (_o = i, Ug(), document.addEventListener("visibilitychange", jg), { continue: !1 }) : { item: r, continue: !0 };
    }, (r) => {
      const { setOpen: s } = r;
      Y.closedByEvents = !0, s(!1);
    });
  });
}, ea = (n) => {
  n.key === "Tab" && setTimeout(() => {
    const e = document.activeElement, t = he[0];
    document.removeEventListener("keydown", ea), t && !t.menuBtnEls.some((i) => i && i.contains(e)) && Mt(he, (i) => ({ item: i, continue: !0 }), (i) => {
      const { setOpen: r } = i;
      r(!1);
    });
  });
}, Dg = (n) => {
  const { setOpen: e, menuBtnEls: t, cursorKeys: i, closeWhenEscapeKeyIsPressed: r, focusElementOnClose: s, ignoreMenuPopupWhenTabbing: o, focusSentinelAfterEl: l, focusSentinelBeforeEl: a, mountedPopupsSafeList: c } = he[he.length - 1];
  if (n.key === "Tab") {
    if (o) {
      n.preventDefault();
      const f = n.shiftKey, u = Ct(t), d = yt({
        from: f ? a : l,
        direction: f ? "backwards" : "forwards",
        ignoreElement: u ? [u] : []
      });
      d && d.focus();
      return;
    }
    Vg = n.timeStamp;
  }
  if (i && Lk(n), n.key !== "Escape" || !r)
    return;
  if (Y.thirdPartyPopupElPressedEscape) {
    Y.thirdPartyPopupElPressedEscape = !1, Jl();
    return;
  }
  if (c && c.length) {
    const f = qk(c);
    if (f) {
      window.setTimeout(() => {
        !f.isConnected || cl(f) || h();
      }, 100);
      return;
    }
  }
  function h() {
    const f = Ct(t), u = Ve({}, {
      inputElement: s,
      type: "focusElementOnClose",
      subType: "escapeKey"
    }) || f;
    u && u.focus(), Y.closedByEvents = !0, e(!1);
  }
  h();
}, Bf = (n) => {
  const e = n.target;
  Gc !== e && Mt(he, (t) => {
    const { menuPopupEl: i } = t;
    return i.contains(e) ? (Gc = e, { continue: !1 }) : { item: t, continue: !0 };
  }, (t) => {
    const { setOpen: i, focusElementOnClose: r, menuBtnEls: s } = t, o = Ct(s);
    Y.closedByEvents = !0, i(!1);
    const l = Ve({}, {
      inputElement: r,
      type: "focusElementOnClose",
      subType: "scrolling"
    }) || o;
    l && l.focus();
  });
}, Mk = (n) => {
  Gc = null, !Nc && n && (Nc = !1, window.addEventListener("wheel", Bf, {
    capture: !0,
    passive: !0
  }), document.body.addEventListener("touchmove", Ig)), !he.length && (document.addEventListener("pointerdown", Wg), document.addEventListener("pointerup", Vf), document.addEventListener("keydown", Dg), window.addEventListener("blur", zg));
}, md = () => {
  he.length || (Nc = !1, Y.cursorKeysPrevEl = null, Y.clickTarget = null, window.clearTimeout(Y.documentClickTimeout), Y.documentClickTimeout = null, document.removeEventListener("keydown", Dg), document.removeEventListener("pointerdown", Wg), document.removeEventListener("keydown", ea), window.removeEventListener("blur", zg), window.removeEventListener("wheel", Bf, {
    capture: !0
  }), document.body.removeEventListener("touchmove", Ig));
}, Ig = () => {
  Xa || (Xa = !0, document.body.addEventListener("touchend", () => {
    Xa = !1;
  }, { once: !0 }), window.addEventListener("scroll", Bf, {
    capture: !0,
    passive: !0,
    once: !0
  }));
}, Lk = (n) => {
  const e = ["ArrowDown", "ArrowUp", "ArrowLeft", "ArrowRight"], t = ["ArrowLeft", "ArrowRight"];
  if (!e.includes(n.key) || (n.preventDefault(), t.includes(n.key)))
    return;
  const { menuBtnEls: i, menuPopupEl: r, containerEl: s, focusSentinelBeforeEl: o, focusSentinelAfterEl: l, cursorKeys: a } = he[he.length - 1], c = Ct(i);
  let h = Y.cursorKeysPrevEl || document.activeElement, f;
  n.key === "ArrowDown" ? f = "forwards" : f = "backwards", (h === c || h === r || h === s) && (n.key === "ArrowUp" ? (f = "backwards", h = l) : (f = "forwards", h = o));
  const u = typeof a == "object", d = u && a.wrap;
  let O = yt({
    from: h,
    direction: f,
    stopAtRootElement: r
  });
  if (!O && d) {
    const p = n.key === "ArrowDown" ? o : l;
    f = n.key === "ArrowDown" ? "forwards" : "backwards", O = yt({
      from: p,
      direction: f,
      stopAtRootElement: s
    });
  }
  if (u && a.onKeyDown) {
    a.onKeyDown({
      currentEl: O,
      prevEl: Y.cursorKeysPrevEl
    }), Y.cursorKeysPrevEl = O;
    return;
  }
  O && O.focus();
}, jg = () => {
  if (document.visibilityState === "visible" && Mi != null) {
    Ug();
    return;
  }
  clearTimeout(Mi);
}, Ug = () => {
  const e = () => {
    const t = document.activeElement;
    if (t) {
      if (_o === t) {
        Mi = window.setTimeout(e, 250);
        return;
      }
      Mt(he, (i) => {
        const { containerEl: r } = i;
        return t.tagName === "IFRAME" ? r && !r.contains(t) ? { item: i, continue: !0 } : (_o = t, Mi = window.setTimeout(e, 250), { continue: !1 }) : r && !r.contains(t) ? { item: i, continue: !0 } : { continue: !1 };
      }, (i) => {
        const { setOpen: r } = i;
        Y.closedByEvents = !0, r(!1), _o = null, Mi = null, document.removeEventListener("visibilitychange", jg);
      });
    }
  };
  Mi = window.setTimeout(e, 250);
}, Vk = (n) => {
  const { menuPopup: e } = n;
  n.menuPopupAdded || (n.menuPopupEl = Ve(n, {
    inputElement: e,
    type: "menuPopup"
  }), n.menuPopupEl && (n.menuPopupAdded = !0, n.menuPopupEl.setAttribute("tabindex", "-1")));
}, gd = (n) => {
  n.menuPopupEl && n.menuPopupAdded && (n.menuPopupEl = null, n.menuPopupAdded = !1);
}, Bk = (n) => n.replace(/-./g, (e) => e.toUpperCase()[1]), Fc = (n, e) => {
  const { onToggleScrollbar: t, removeScrollbar: i } = n;
  if (t) {
    if (e) {
      if (he.length > 1)
        return;
      t.onRemove();
    } else {
      if (he.length)
        return;
      t.onRestore();
    }
    return;
  }
  if (!i || he.length > 1)
    return;
  const r = document.scrollingElement;
  e ? r.style.overflow = "hidden" : r.style.overflow = "";
};
function Wk(n) {
  requestAnimationFrame(() => {
    requestAnimationFrame(n);
  });
}
const zk = (n) => {
  let e, t = !0, i = !1, r, s = !1, o = !!n.overlay;
  const [l, a] = G(), [c, h] = G(), f = Gl(() => n.children), { onBeforeEnter: u, onEnter: d, onAfterEnter: O, onBeforeExit: p, onExit: m, onAfterExit: y, appendToElement: S, appear: b, state: w } = n, { onBeforeEnter: k, onEnter: Q, onAfterEnter: P, onBeforeExit: E, onExit: z, onAfterExit: N, appendToElement: C } = n.overlay || {}, x = (A) => A === "content" ? u : k, L = (A) => A === "content" ? d : Q, _ = (A) => A === "content" ? O : P, V = (A) => A === "content" ? p : E, ee = (A) => A === "content" ? m : z, ye = (A) => A === "content" ? y : N;
  function H(A, se) {
    const Fe = (A === "content" ? n.name : n.overlay?.name) || "s", je = Bk(se) + "Class", _t = (A === "content" ? n : n.overlay)[je];
    return _t ? _t.split(" ") : [`${Fe}-${se}`];
  }
  const K = (A, se) => {
    const Se = A === "content" ? S : C;
    return Se ? Se === "menuPopup" && A !== "overlay" ? Ve({ containerEl: se }, { inputElement: null, type: "menuPopup" }) : typeof Se == "string" ? se && se.querySelector(Se) : Se : se;
  };
  let le, ne;
  function T(A, se, Se) {
    if (s && (A === "content" ? le() : ne()), !t || n.appear) {
      let rt = function(br) {
        ae && (!br || br.target === ae) && (ae.removeEventListener("transitionend", rt), ae.removeEventListener("animationend", rt), ae.classList.remove(...ei), ae.classList.remove(...ti), ig(() => {
          const va = i ? r : se;
          l() !== va && a(va), c() === va && h(void 0);
        }), _t && _t(ae), n.mode === "inout" && D(A, ae, Se));
      };
      var Fe = rt;
      const je = L(A), Xe = x(A), _t = _(A), Mn = H(A, "enter"), ei = H(A, "enter-active"), ti = H(A, "enter-to"), ae = K(A, se);
      Xe && Xe(ae), ae.classList.add(...Mn), ae.classList.add(...ei), requestAnimationFrame(() => {
        requestAnimationFrame(() => {
          ae.classList.remove(...Mn), ae.classList.add(...ti);
        }), je && je(ae, () => rt()), requestAnimationFrame(() => {
          (!je || je.length < 2) && (ae.addEventListener("transitionend", rt), ae.addEventListener("animationend", rt));
        });
      });
    }
    if (A === "content") {
      const je = i ? r : se;
      Se && !n.mode ? h(je) : a(je);
    }
  }
  function D(A, se, Se) {
    s = !0;
    const Fe = ee(A), je = V(A), Xe = ye(A), _t = H(A, "exit"), Mn = H(A, "exit-active"), ei = H(A, "exit-to"), ti = K(A, se), ae = K(A, Se);
    if (!ae.parentNode)
      return rt();
    je && je(ae), ae.classList.add(..._t), ae.classList.add(...Mn), Wk(() => {
      ae.classList.remove(..._t), ae.classList.add(...ei);
    }), Fe && Fe(ae, () => rt()), (!Fe || Fe.length < 2) && (ae.addEventListener("transitionend", rt), ae.addEventListener("animationend", rt));
    function rt(br) {
      (!br || br.target === ae) && (s = !1, ae.removeEventListener("transitionend", rt), ae.removeEventListener("animationend", rt), A === "content" && (ae.classList.remove(...Mn), ae.classList.remove(...ei)), A === "content" && (i && (Se.parentElement.remove(), Fc(w, !1)), l() === Se && a(void 0)), Xe && Xe(ae), n.mode === "outin" && T(A, ti, ae));
    }
    A === "content" ? le = rt : ne = rt;
  }
  return il((A) => {
    for (e = f(); typeof e == "function"; )
      e = e();
    if (e && e.nodeType === 3) {
      i = !0, r = e, r.willRemove = !1;
      const se = e.portalContainerChild;
      if (o) {
        const Se = e.portalOverlay;
        Object.defineProperty(se, "portalOverlay", {
          get() {
            return Se;
          },
          configurable: !0
        });
      }
      e = se;
    }
    return De(() => (e && e !== A && (n.mode !== "outin" ? (T("content", e, A), o && T(
      "overlay",
      // @ts-ignore
      e.portalOverlay,
      // @ts-ignore
      A && A.portalOverlay
    )) : t && a(i ? r : e)), A && A !== e && n.mode !== "inout" && (D("content", e, A), o && D("overlay", e && e.portalOverlay, A.portalOverlay)), t = !1, e));
  }), [l, c];
}, yd = (n, { isCleanup: e = !1 } = {}) => {
  _k(n, e);
}, Dk = (n, e) => {
  const { overlayElement: t, trapFocus: i, timeouts: r, closeWhenDocumentBlurs: s, mountedPopupsSafeList: o } = n;
  if (Hc = !1, queueMicrotask(() => {
    Bg();
  }), Y.thirdPartyPopupEl && Jl(), Y.closedBySetOpen || Y.overlayMouseDown || t && i || !s && !document.hasFocus())
    return;
  const l = he.length;
  Uk(r, () => {
    if (o && Xk(o)) {
      Zk();
      return;
    }
    l < he.length || (Y.closedByEvents = !0, Mt(he, (a) => {
      const { containerEl: c, closeWhenClickingOutside: h } = a, f = Y.clickTarget;
      return !h && f ? (document.addEventListener("keydown", ea), { continue: !1 }) : f && c.contains(f) ? { continue: !1 } : c.contains(document.activeElement) ? { continue: !1 } : { item: a, continue: !0 };
    }, (a) => {
      const { setOpen: c } = a;
      c(!1);
    }));
  });
}, Ik = (n, e) => {
  const { timeouts: t } = n;
  clearTimeout(t.containerFocusTimeoutId), clearTimeout(t.menuButtonBlurTimeoutId);
}, jk = (n) => {
  const { focusElementOnOpen: e, focusedMenuBtn: t } = n;
  if (e == null)
    return;
  const i = Ve(n, {
    inputElement: e,
    type: "focusElementOnOpen"
  });
  i && setTimeout(() => {
    const r = Zg(e) ? (
      // @ts-ignore
      !!e.preventScroll
    ) : i === n.menuPopupEl;
    i.focus({ preventScroll: r }), t.el = null;
  });
};
let Hc = !1;
const Uk = (n, e) => {
  n.containerFocusTimeoutId = window.setTimeout(() => {
    Hc || (Hc = !0, e());
  });
}, Yk = () => {
  Y.overlayMouseDown = !0;
}, Nk = () => {
  Y.overlayMouseDown = !1;
}, Gk = (n) => {
  const { closeWhenOverlayClicked: e, menuPopupEl: t, focusElementOnClose: i, menuBtnEls: r } = n;
  if (Y.overlayMouseDown = !1, !e) {
    t.focus({ preventScroll: !0 });
    return;
  }
  const s = Ct(r), o = Ve(n, {
    inputElement: i,
    type: "focusElementOnClose",
    subType: "click"
  }) || s;
  o && o.focus(), Mt(he, (l) => l.overlayElement ? { continue: !1 } : { item: l, continue: !0 }, (l) => {
    const { setOpen: a } = l;
    Y.closedByEvents = !0, a(!1);
  }), Y.closedByEvents = !0, n.setOpen(!1);
}, Fk = ({ parent: n, matchEl: e }) => {
  if (n === e)
    return !0;
  const t = (i) => {
    if (!i)
      return !1;
    const r = i.children[0];
    return r === e ? !0 : t(r);
  };
  return t(n);
}, Hk = (n) => {
  const { enableLastFocusSentinel: e, menuBtnEls: t, containerEl: i, focusSentinelAfterEl: r } = n;
  if (e) {
    r.setAttribute("tabindex", "0");
    return;
  }
  if (!t)
    return;
  const o = Ct(t).nextElementSibling;
  Fk({
    parent: o,
    matchEl: i
  }) || r.setAttribute("tabindex", "0");
}, Sd = (n, e, t) => {
  const { uniqueId: i, containerEl: r, menuBtnEls: s, focusSentinelBeforeEl: o, trapFocus: l, focusSentinelAfterEl: a, closeWhenMenuButtonIsTabbed: c, focusElementOnClose: h, mount: f, open: u, setOpen: d } = n, O = Ct(s);
  he.forEach((y) => window.clearTimeout(y.timeouts.containerFocusTimeoutId));
  const p = (y, S) => {
    Mt(he, (b) => S && Ct(b.menuBtnEls) === y && !b.closeWhenMenuButtonIsTabbed ? { continue: !1 } : b.uniqueId === i || !b.containerEl.contains(y) ? { item: b, continue: !0 } : { continue: !1 }, (b) => {
      Y.closedByEvents = !0, b.setOpen(!1);
    }), y && y.focus();
  };
  if (!u())
    return;
  if (O && (t === r || t === O)) {
    yt({
      from: o,
      direction: "forwards",
      stopAtRootElement: r
    }).focus();
    return;
  }
  if (e === "before") {
    if (l) {
      yt({
        from: a,
        direction: "backwards",
        stopAtRootElement: r
      }).focus();
      return;
    }
    if (c) {
      Y.closedByEvents = !0, d(!1), O.focus();
      return;
    }
    const y = Ve(n, {
      inputElement: h,
      type: "focusElementOnClose",
      subType: "tabBackwards"
    }) || O;
    if (!n.menuBtnEls) {
      y.focus();
      return;
    }
    p(y, !0);
    return;
  }
  if (l) {
    yt({
      from: o,
      stopAtRootElement: r
    }).focus();
    return;
  }
  const m = Ve(n, {
    inputElement: h,
    type: "focusElementOnClose",
    subType: "tabForwards"
  }) || yt({
    from: O,
    ignoreElement: [r]
  });
  if (f) {
    p(m);
    return;
  }
  m && m.focus(), Y.closedByEvents = !0, d(!1);
}, Kk = "http://www.w3.org/2000/svg";
function Jk(n, e = !1) {
  return e ? document.createElementNS(Kk, n) : document.createElement(n);
}
function ew(n) {
  const {
    useShadow: e,
    isModal: t
  } = n, i = document.createTextNode(""), r = n.mount || document.body;
  function s() {
    if (re.context) {
      const [o, l] = G(!1);
      return queueMicrotask(() => l(!0)), () => o() && n.children;
    } else return () => n.children;
  }
  if (r instanceof HTMLHeadElement) {
    const [o, l] = G(!1), a = () => l(!0);
    pi((c) => I(r, () => o() ? c() : s()(), null)), Bt(() => {
      re.context ? queueMicrotask(a) : a();
    });
  } else {
    const o = Jk(n.isSVG ? "g" : "div", n.isSVG), l = e && o.attachShadow ? o.attachShadow({
      mode: "open"
    }) : o, a = {
      get() {
        return i.parentNode;
      },
      configurable: !0
    };
    Object.defineProperty(o, "host", a), Object.defineProperty(o, "_$host", a), Object.defineProperty(i, "portalContainerChild", {
      get() {
        return c ? o.children[1] : o.firstElementChild;
      },
      configurable: !0
    }), Object.defineProperty(i, "portalContainer", {
      get() {
        return o;
      },
      configurable: !0
    }), Object.defineProperty(i, "portalMount", {
      get() {
        return r;
      },
      configurable: !0
    }), i.willRemove = !0, I(l, s());
    const c = n.overlayChildren;
    c && (Object.defineProperty(i, "portalOverlay", {
      get() {
        return c;
      },
      configurable: !0
    }), o.insertAdjacentElement("afterbegin", c)), r.appendChild(o), n.ref && n.ref(o), Bt(() => {
      i.willRemove && r.removeChild(o);
    });
  }
  return i;
}
var tw = /* @__PURE__ */ U("<div role=presentation>"), nw = /* @__PURE__ */ U("<div><div style=position:fixed;top:0;left:0;outline:none;pointer-events:none;width:0;height:0; aria-hidden=true></div><div style=position:fixed;top:0;left:0;outline:none;pointer-events:none;width:0;height:0; aria-hidden=true>");
const iw = (n) => {
  const e = n.modal || !1, {
    id: t,
    menuButton: i,
    menuPopup: r,
    focusElementOnClose: s,
    focusElementOnOpen: o = e ? "menuPopup" : void 0,
    focusMenuButtonOnMouseDown: l = !0,
    cursorKeys: a = !1,
    closeWhenMenuButtonIsTabbed: c = !1,
    closeWhenMenuButtonIsClicked: h = !0,
    closeWhenScrolling: f = !1,
    closeWhenDocumentBlurs: u = !1,
    closeWhenOverlayClicked: d = !0,
    closeWhenEscapeKeyIsPressed: O = !0,
    closeWhenClickingOutside: p = !0,
    overlay: m = e,
    overlayElement: y = e,
    trapFocus: S = e,
    removeScrollbar: b = e,
    enableLastFocusSentinel: w = !1,
    mount: k = e ? "body" : void 0,
    // stopComponentEventPropagation = false,
    show: Q = !1,
    onToggleScrollbar: P,
    onOpen: E,
    deadMenuButton: z,
    ignoreMenuPopupWhenTabbing: N,
    mountedPopupsSafeList: C
  } = n, x = {
    mount: k,
    modal: e,
    addedFocusOutAppEvents: !1,
    closeWhenOverlayClicked: d,
    closeWhenDocumentBlurs: u,
    closeWhenEscapeKeyIsPressed: O,
    closeWhenMenuButtonIsClicked: h,
    closeWhenMenuButtonIsTabbed: c,
    closeWhenScrolling: f,
    closeWhenClickingOutside: p,
    cursorKeys: a,
    focusElementOnClose: s,
    focusMenuButtonOnMouseDown: l,
    deadMenuButton: z,
    focusElementOnOpen: o,
    ignoreMenuPopupWhenTabbing: N,
    // @ts-ignore
    id: t,
    uniqueId: AQ(),
    menuBtnId: "",
    focusedMenuBtn: {
      el: null
    },
    menuBtnKeyupTabFired: !1,
    menuButton: i,
    timeouts: {
      containerFocusTimeoutId: null,
      menuButtonBlurTimeoutId: null
    },
    upperStackRemovedByFocusOut: !1,
    menuPopup: r,
    closeByDismissEvent: !1,
    menuPopupAdded: !1,
    enableLastFocusSentinel: w,
    overlay: m,
    overlayElement: y,
    onToggleScrollbar: P,
    removeScrollbar: b,
    trapFocus: S,
    hasFocusSentinels: !!s || m || !!y || S || w,
    mountedPopupsSafeList: C,
    open: n.open,
    setOpen: n.setOpen,
    onClickOutsideMenuButtonRef: () => Pk(x),
    onClickOverlayRef: () => Gk(x),
    onFocusInContainerRef: (T) => Ik(x),
    onFocusOutContainerRef: (T) => Dk(x),
    onBlurMenuButtonRef: (T) => wk(x, T),
    onClickMenuButtonRef: (T) => kk(x, T),
    onMouseDownMenuButtonRef: (T) => vk(x, T),
    onFocusMenuButtonRef: (T) => Tk(x, T),
    onKeydownMenuButtonRef: (T) => $k(x, T),
    refContainerCb: (T) => {
      if (y && (T.style.zIndex = "1000", e)) {
        T.style.pointerEvents = "none", T.style.position = "relative";
        const D = (A) => {
          A.id || (A.id = x.uniqueId), A.style.pointerEvents = "all", A.setAttribute("role", "dialog");
        };
        requestAnimationFrame(() => {
          const A = T.querySelector('[role="dialog"]');
          if (!A) {
            const se = T.children;
            if (!se) return;
            const Se = se[1];
            D(Se);
            return;
          }
          D(A);
        });
      }
      n.ref && n.ref(T), x.containerEl = T;
    },
    refOverlayCb: (T) => {
      T.style.position = "fixed", T.style.top = "0", T.style.left = "0", T.style.width = "100%", T.style.height = "calc(100% + 100px)", T.style.zIndex = "1000", typeof y == "object" && y.ref && y.ref(T), x.overlayEl = T;
    }
  }, L = !n.open(), _ = () => {
    const T = document.activeElement;
    if (T !== document.body && x.menuBtnEls.every((je) => T !== je) && !x.containerEl?.contains(T))
      return;
    const {
      menuBtnEls: D,
      focusedMenuBtn: A,
      timeouts: se
    } = x, Se = Ct(D), Fe = Ve(x, {
      inputElement: s,
      type: "focusElementOnClose",
      subType: "click"
    }) || Se;
    Fe && Fe.focus();
  }, V = () => typeof k == "string" ? document.querySelector(k) : k, ee = () => {
    if (Y.closedByEvents) return;
    const T = document.activeElement;
    if (
      // activeElement !== state.menuBtnEls
      x.menuBtnEls.every((D) => T !== D) && !x.containerEl?.contains(T)
    ) {
      setTimeout(() => {
        Y.closedBySetOpen = !1;
      });
      return;
    }
    Y.closedBySetOpen || (Y.closedBySetOpen = !0, setTimeout(() => {
      Y.closedBySetOpen = !1, _();
    }));
  };
  il(Wi(() => !!n.open(), (T, D) => {
    T !== D && (T || (x.focusSentinelAfterEl && (x.focusSentinelAfterEl.tabIndex = -1), ee()));
  }, {
    defer: L
  })), Vt(Wi(() => typeof n.menuButton == "function" ? n.menuButton() : n.menuButton, (T) => {
    Ck({
      state: x,
      menuButton: T,
      open: n.open
    }), Bt(() => {
    });
  })), Vt(Wi(() => !!n.open(), (T, D) => {
    T !== D && (T ? (Y.closedByEvents = !1, Vk(x), jk(x), Ek(x), Mk(f), Qk({
      // @ts-ignore
      id: t,
      uniqueId: x.uniqueId,
      open: n.open,
      setOpen: n.setOpen,
      containerEl: x.containerEl,
      menuBtnEls: x.menuBtnEls,
      focusedMenuBtn: x.focusedMenuBtn,
      overlayEl: x.overlayEl,
      menuPopupEl: x.menuPopupEl,
      overlay: m,
      closeWhenDocumentBlurs: u,
      closeWhenEscapeKeyIsPressed: O,
      closeWhenMenuButtonIsTabbed: c,
      closeWhenClickingOutside: p,
      overlayElement: y,
      cursorKeys: a,
      focusElementOnClose: s,
      focusSentinelBeforeEl: x.focusSentinelBeforeEl,
      focusSentinelAfterEl: x.focusSentinelAfterEl,
      ignoreMenuPopupWhenTabbing: N,
      upperStackRemovedByFocusOut: !1,
      detectIfMenuButtonObscured: !1,
      queueRemoval: !1,
      mountedPopupsSafeList: x.mountedPopupsSafeList,
      timeouts: x.timeouts
    }), E && E(T, {
      uniqueId: x.uniqueId,
      dismissStack: he
    }), Fc(x, T), Hk(x)) : (Ak(x), Y.closedByEvents = !1, yd(x), gd(x), ud(x.uniqueId), md(), Jl(), E && E(T, {
      uniqueId: x.uniqueId,
      dismissStack: he
    }), n.animation || Fc(x, T)));
  }, {
    defer: L
  })), Bt(() => {
    yd(x, {
      isCleanup: !0
    }), gd(x), ud(x.uniqueId), md();
  });
  function ye() {
    return typeof n.overlayElement == "object" && n.overlayElement.element ? n.overlayElement.element : (() => {
      var T = tw(), D = x.refOverlayCb;
      return typeof D == "function" ? an(D, T) : x.refOverlayCb = T, Ai(T, "mouseup", Nk, !0), Ai(T, "mousedown", Yk, !0), Ai(T, "click", x.onClickOverlayRef, !0), Pe((A) => {
        var se = typeof n.overlayElement == "object" ? n.overlayElement.class : void 0, Se = typeof n.overlayElement == "object" ? n.overlayElement.classList || {} : {};
        return se !== A.e && zi(T, A.e = se), A.t = ll(T, Se, A.t), A;
      }, {
        e: void 0,
        t: void 0
      }), T;
    })();
  }
  function H(T) {
    return (() => {
      var D = nw(), A = D.firstChild, se = A.nextSibling, Se = x.refContainerCb;
      typeof Se == "function" ? an(Se, D) : x.refContainerCb = D, Ai(D, "focusout", x.onFocusOutContainerRef, !0), Ai(D, "focusin", x.onFocusInContainerRef, !0);
      var Fe = x.focusSentinelBeforeEl;
      typeof Fe == "function" ? an(Fe, A) : x.focusSentinelBeforeEl = A, A.addEventListener("focus", (Xe) => {
        Sd(x, "before", Xe.relatedTarget);
      }), I(D, T, se);
      var je = x.focusSentinelAfterEl;
      return typeof je == "function" ? an(je, se) : x.focusSentinelAfterEl = se, se.addEventListener("focus", () => {
        Sd(x, "after");
      }), Pe((Xe) => {
        var _t = x.id, Mn = n.class, ei = n.classList || {}, ti = n.open() ? "0" : "-1", ae = n.open() && x.hasFocusSentinels ? "0" : "-1";
        return _t !== Xe.e && Re(D, "id", Xe.e = _t), Mn !== Xe.t && zi(D, Xe.t = Mn), Xe.a = ll(D, ei, Xe.a), ti !== Xe.o && Re(A, "tabindex", Xe.o = ti), ae !== Xe.i && Re(se, "tabindex", Xe.i = ae), Xe;
      }, {
        e: void 0,
        t: void 0,
        a: void 0,
        o: void 0,
        i: void 0
      }), D;
    })();
  }
  if (Q) return H(n.children);
  let K = !1;
  const le = $e(() => n.open(), !1, {
    equals: (T, D) => K ? T === D : !T == !D
  }), ne = $e(() => {
    const T = le();
    if (T) {
      const D = n.children, A = typeof D == "function" && D.length > 0;
      return K = A, A ? De(() => D(T)) : k ? X(ew, {
        get mount() {
          return V();
        },
        get overlayChildren() {
          return y ? ye() : null;
        },
        get children() {
          return H(D);
        }
      }) : H(D);
    }
  });
  return n.animation ? X(zk, Rf(() => n.animation, {
    get name() {
      return n.animation.name;
    },
    get enterClass() {
      return n.animation.enterClass;
    },
    get enterActiveClass() {
      return n.animation.enterActiveClass;
    },
    get enterToClass() {
      return n.animation.enterToClass;
    },
    get exitClass() {
      return n.animation.exitClass;
    },
    get exitActiveClass() {
      return n.animation.exitActiveClass;
    },
    get exitToClass() {
      return n.animation.exitToClass;
    },
    get appear() {
      return n.animation.appear;
    },
    get overlay() {
      return typeof n.overlayElement == "object" ? n.overlayElement.animation : void 0;
    },
    state: x,
    get children() {
      return ne();
    }
  })) : ne;
};
Ut(["click", "mousedown", "mouseup", "focusin", "focusout"]);
var rw = /* @__PURE__ */ U("<svg>");
const Xt = (n) => {
  const [e, t] = RQ(n, ["path"]);
  return (() => {
    var i = rw();
    return cg(i, Rf({
      get viewBox() {
        return e.path.mini ? "0 0 20 20" : "0 0 24 24";
      },
      get fill() {
        return e.path.outline ? "none" : "currentColor";
      },
      get stroke() {
        return e.path.outline ? "currentColor" : "none";
      },
      get "stroke-width"() {
        return e.path.outline ? 1.5 : void 0;
      }
    }, t), !0, !0), I(i, () => e.path.path), i;
  })();
};
var sw = /* @__PURE__ */ U('<svg><path stroke-linecap=round stroke-linejoin=round d="M13.5 4.5L21 12m0 0l-7.5 7.5M21 12H3"></svg>', !1, !0, !1), ow = /* @__PURE__ */ U('<svg><path stroke-linecap=round stroke-linejoin=round d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"></svg>', !1, !0, !1), lw = /* @__PURE__ */ U('<svg><path stroke-linecap=round stroke-linejoin=round d="M17.25 6.75L22.5 12l-5.25 5.25m-10.5 0L1.5 12l5.25-5.25m7.5-3l-4.5 16.5"></svg>', !1, !0, !1), aw = /* @__PURE__ */ U('<svg><path stroke-linecap=round stroke-linejoin=round d="M4.5 12a7.5 7.5 0 0015 0m-15 0a7.5 7.5 0 1115 0m-15 0H3m16.5 0H21m-1.5 0H12m-8.457 3.077l1.41-.513m14.095-5.13l1.41-.513M5.106 17.785l1.15-.964m11.49-9.642l1.149-.964M7.501 19.795l.75-1.3m7.5-12.99l.75-1.3m-6.063 16.658l.26-1.477m2.605-14.772l.26-1.477m0 17.726l-.26-1.477M10.698 4.614l-.26-1.477M16.5 19.794l-.75-1.299M7.5 4.205L12 12m6.894 5.785l-1.149-.964M6.256 7.178l-1.15-.964m15.352 8.864l-1.41-.513M4.954 9.435l-1.41-.514M12.002 12l-3.75 6.495"></svg>', !1, !0, !1), cw = /* @__PURE__ */ U('<svg><path stroke-linecap=round stroke-linejoin=round d="M6.75 7.5l3 2.25-3 2.25m4.5 0h3m-9 8.25h13.5A2.25 2.25 0 0021 18V6a2.25 2.25 0 00-2.25-2.25H5.25A2.25 2.25 0 003 6v12a2.25 2.25 0 002.25 2.25z"></svg>', !1, !0, !1), hw = /* @__PURE__ */ U('<svg><path stroke-linecap=round stroke-linejoin=round d="M9 17.25v1.007a3 3 0 01-.879 2.122L7.5 21h9l-.621-.621A3 3 0 0115 18.257V17.25m6-12V15a2.25 2.25 0 01-2.25 2.25H5.25A2.25 2.25 0 013 15V5.25m18 0A2.25 2.25 0 0018.75 3H5.25A2.25 2.25 0 003 5.25m18 0V12a2.25 2.25 0 01-2.25 2.25H5.25A2.25 2.25 0 013 12V5.25"></svg>', !1, !0, !1), fw = /* @__PURE__ */ U('<svg><path stroke-linecap=round stroke-linejoin=round d="M21 7.5l-9-5.25L3 7.5m18 0l-9 5.25m9-5.25v9l-9 5.25M3 7.5l9 5.25M3 7.5v9l9 5.25m0-9v9"></svg>', !1, !0, !1), uw = /* @__PURE__ */ U('<svg><path stroke-linecap=round stroke-linejoin=round d="M16.5 10.5V6.75a4.5 4.5 0 10-9 0v3.75m-.75 11.25h10.5a2.25 2.25 0 002.25-2.25v-6.75a2.25 2.25 0 00-2.25-2.25H6.75a2.25 2.25 0 00-2.25 2.25v6.75a2.25 2.25 0 002.25 2.25z"></svg>', !1, !0, !1), dw = /* @__PURE__ */ U('<svg><path stroke-linecap=round stroke-linejoin=round d="M15.59 14.37a6 6 0 01-5.84 7.38v-4.8m5.84-2.58a14.98 14.98 0 006.16-12.12A14.98 14.98 0 009.631 8.41m5.96 5.96a14.926 14.926 0 01-5.841 2.58m-.119-8.54a6 6 0 00-7.381 5.84h4.8m2.581-5.84a14.927 14.927 0 00-2.58 5.84m2.699 2.7c-.103.021-.207.041-.311.06a15.09 15.09 0 01-2.448-2.448 14.9 14.9 0 01.06-.312m-2.24 2.39a4.493 4.493 0 00-1.757 4.306 4.493 4.493 0 004.306-1.758M16.5 9a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0z"></svg>', !1, !0, !1), Ow = /* @__PURE__ */ U('<svg><path stroke-linecap=round stroke-linejoin=round d="M12 3v2.25m6.364.386l-1.591 1.591M21 12h-2.25m-.386 6.364l-1.591-1.591M12 18.75V21m-4.773-4.227l-1.591 1.591M5.25 12H3m4.227-4.773L5.636 5.636M15.75 12a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0z"></svg>', !1, !0, !1), pw = /* @__PURE__ */ U('<svg><path stroke-linecap=round stroke-linejoin=round d="M9.75 9.75l4.5 4.5m0-4.5l-4.5 4.5M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></svg>', !1, !0, !1);
const mw = {
  path: () => sw(),
  outline: !0,
  mini: !1
}, gw = {
  path: () => ow(),
  outline: !0,
  mini: !1
}, yw = {
  path: () => lw(),
  outline: !0,
  mini: !1
}, Sw = {
  path: () => aw(),
  outline: !0,
  mini: !1
}, bw = {
  path: () => cw(),
  outline: !0,
  mini: !1
}, Qw = {
  path: () => hw(),
  outline: !0,
  mini: !1
}, xw = {
  path: () => fw(),
  outline: !0,
  mini: !1
}, kw = {
  path: () => uw(),
  outline: !0,
  mini: !1
}, ww = {
  path: () => dw(),
  outline: !0,
  mini: !1
}, vw = {
  path: () => Ow(),
  outline: !0,
  mini: !1
}, Pw = {
  path: () => pw(),
  outline: !0,
  mini: !1
};
var bd = /* @__PURE__ */ U('<button class="flex cursor-alias items-center gap-2 px-2 py-2 text-left text-neutral-800 dark:text-neutral-200 dark:hover:text-yellow-500 leading-0 uppercase tracking-widest">'), $w = /* @__PURE__ */ U('<img class="h-8 w-8 rounded-full"crossorigin=anonymous>'), Tw = /* @__PURE__ */ U('<button class="cursor-alias hidden md:block">'), Cw = /* @__PURE__ */ U('<img class="h-10 w-10 rounded-full border-`1 border-neutral-200 dark:border-neutral-600 shadow-md"crossorigin=anonymous>'), Rw = /* @__PURE__ */ U('<div class="dark:bg-neutral-900 absolute right-0 flex flex-col items-left justify-center bg-neutral-100 rounded-lg w-60 border border-neutral-600 dark:text-neutral-100 shadow-lg"> <div class="flex space-x-3 px-2 py-4 border-b border-neutral-600"> <div class=text-left> <p class="text-sm font-semibold text-gray-800 dark:text-gray-100"> <br><span class="text-xs text-gray-600 dark:text-gray-400 capitalize"></span></p></div></div><button class="flex cursor-alias items-center gap-2 px-4 py-2 text-left text-neutral-100 hover:bg-neutral-800"> Settings</button><button class="flex cursor-alias items-center gap-2 px-4 py-2 text-left text-neutral-100 hover:bg-neutral-800"> API Documentation</button><button class="flex cursor-alias items-center gap-2 px-4 py-2 text-left text-neutral-100 hover:bg-neutral-800"> Logout'), Ew = /* @__PURE__ */ U('<header class="dark:bg-neutral-900 border-b z-12 sticky top-0 flex items-center bg-white gap-x-4 border-slate-200 p-0 px-2 text-sm dark:border-neutral-800 mb-0"><div class="ml-auto md:flex md:flex-row md:items-center md:space-x-2"show></div><button type=button class="visible relative ml-auto rounded px-3 py-2 opacity-80 hover:opacity-100 md:hidden"title="Mobile Menu Button"><span class=sr-only>Show menu</span></button><div class="relative h-8 cursor-pointer leading-snug">'), Aw = /* @__PURE__ */ U('<button class="flex cursor-alias flex-row items-center space-x-2 rounded px-2 py-2 opacity-80 hover:opacity-100 md:px-1"><h1 class="leading-0 uppercase tracking-widest flex items-center gap-2 text-left"> <b>Project</b> Board'), _w = /* @__PURE__ */ U('<button class="flex cursor-alias items-center gap-2 px-2 py-2 text-left text-neutral-800 dark:text-neutral-200 dark:hover:text-yellow-500 leading-0 uppercase tracking-widest"> Dashboard'), Xw = /* @__PURE__ */ U('<button class="flex cursor-alias items-center gap-2 px-2 py-2 text-left text-neutral-800 dark:text-neutral-200 dark:hover:text-yellow-500 leading-0 uppercase tracking-widest"> Editor'), qw = /* @__PURE__ */ U('<button class="flex cursor-alias flex-row items-center gap-2 rounded px-2 py-1 opacity-80 hover:opacity-100 md:px-1 border border-neutral-600 rounded-md "> Login'), Zw = /* @__PURE__ */ U('<div class="h-8 w-8 rounded-full bg-blue-600 text-white flex items-center justify-center font-semibold uppercase">'), Mw = /* @__PURE__ */ U('<div class="h-8 w-8 rounded-full bg-blue-600 text-white flex items-center justify-center font-semibold uppercase border-2 border-gray-200 dark:border-gray-600 shadow-md">');
const dr = (n) => {
  const [e, t] = G(!1), i = Yt(), [r, s] = G(!1), [o, l] = G(!1), [a, c] = G(!1), [h, f] = G("");
  let u, d;
  Qt(), window.addEventListener("resize", O), Bt(() => {
    window.removeEventListener("resize", O);
  });
  function O() {
    s(!1);
  }
  function p(m) {
    window.location.href = m;
  }
  return Vt(async () => {
    i.user()?.email && (i.user()?.image && f(i.user()?.image), c(!0));
  }), (() => {
    var m = Ew(), y = m.firstChild, S = y.nextSibling, b = S.firstChild, w = S.nextSibling;
    I(m, () => n.children || [(() => {
      var Q = Aw(), P = Q.firstChild, E = P.firstChild;
      return Q.$$click = () => p("/"), I(P, X(Xt, {
        path: xw,
        class: "h-6"
      }), E), Q;
    })(), (() => {
      var Q = _w(), P = Q.firstChild;
      return Q.$$click = () => p("/apps"), I(Q, X(Xt, {
        path: Qw,
        class: "h-6"
      }), P), Q;
    })(), (() => {
      var Q = Xw(), P = Q.firstChild;
      return Q.$$click = () => p("/editor"), I(Q, X(Xt, {
        path: yw,
        class: "h-6"
      }), P), Q;
    })()], y), Re(y, "menubutton", () => u), y.open = r, Re(y, "setopen", s), I(y, X(Zt, {
      get when() {
        return a();
      },
      get children() {
        return [(() => {
          var Q = bd();
          return Q.$$click = () => p("/dashboard"), I(Q, X(Xt, {
            path: vw,
            class: "h-6"
          })), Q;
        })(), (() => {
          var Q = bd();
          return Q.$$click = () => p("/terminal"), I(Q, X(Xt, {
            path: bw,
            class: "h-6"
          })), Q;
        })()];
      }
    }));
    var k = u;
    return typeof k == "function" ? an(k, S) : u = S, I(S, X(Zt, {
      get when() {
        return r();
      },
      get fallback() {
        return X(Xt, {
          path: gw,
          class: "h-6 w-6"
        });
      },
      get children() {
        return X(Xt, {
          path: Pw,
          class: "h-[22px] w-[22px]"
        });
      }
    }), b), I(w, X(Zt, {
      get when() {
        return a();
      },
      get fallback() {
        return (() => {
          var Q = qw(), P = Q.firstChild;
          return Q.$$click = () => p("/login"), I(Q, X(Xt, {
            path: kw,
            class: "h-6"
          }), P), Q;
        })();
      },
      get children() {
        return [(() => {
          var Q = Tw(), P = d;
          return typeof P == "function" ? an(P, Q) : d = Q, I(Q, X(Zt, {
            get when() {
              return i.user()?.image;
            },
            get fallback() {
              return (() => {
                var E = Zw();
                return I(E, () => i.user()?.name?.[0] || i.user()?.email?.[0] || "U"), E;
              })();
            },
            get children() {
              var E = $w();
              return Pe((z) => {
                var N = `${Qi}/file/proxy?url=${encodeURIComponent(i.user()?.image || "")}`, C = i.user()?.name;
                return N !== z.e && Re(E, "src", z.e = N), C !== z.t && Re(E, "alt", z.t = C), z;
              }, {
                e: void 0,
                t: void 0
              }), E;
            }
          })), Q;
        })(), X(iw, {
          menuButton: () => d,
          open: o,
          setOpen: l,
          get children() {
            var Q = Rw(), P = Q.firstChild, E = P.nextSibling, z = E.firstChild, N = z.nextSibling, C = N.firstChild, x = C.nextSibling, L = x.firstChild, _ = L.nextSibling, V = _.nextSibling, ee = E.nextSibling, ye = ee.firstChild, H = ee.nextSibling, K = H.firstChild, le = H.nextSibling, ne = le.firstChild;
            return E.$$click = () => p("/profile"), I(E, X(Zt, {
              get when() {
                return i.user()?.image;
              },
              get fallback() {
                return (() => {
                  var T = Mw();
                  return I(T, () => i.user()?.name?.[0] || i.user()?.email?.[0] || "U"), T;
                })();
              },
              get children() {
                var T = Cw();
                return Pe((D) => {
                  var A = `${Qi}/file/proxy?url=${encodeURIComponent(i.user()?.image || "")}`, se = i.user()?.name;
                  return A !== D.e && Re(T, "src", D.e = A), se !== D.t && Re(T, "alt", D.t = se), D;
                }, {
                  e: void 0,
                  t: void 0
                }), T;
              }
            }), N), I(x, () => i.user()?.name || i.user()?.email || "User", L), I(V, () => i.user()?.role || "Member"), ee.$$click = () => p("/settings"), I(ee, X(Xt, {
              path: Sw,
              class: "h-7"
            }), ye), H.$$click = () => p("/api"), I(H, X(Xt, {
              path: ww,
              class: "h-7"
            }), K), le.$$click = () => p("/logout"), I(le, X(Xt, {
              path: mw,
              class: "h-7"
            }), ne), Q;
          }
        })];
      }
    })), Pe((Q) => ll(S, {
      "border-white border": r()
    }, Q)), m;
  })();
};
Ut(["click"]);
var Lw = /* @__PURE__ */ U('<div class="flex h-screen flex-col bg-white dark:bg-neutral-900/5 dark:text-white rounded-md"><div class="flex-1 overflow-auto scroll-smooth px-4 py-2 text-sm "><div id=outputMessage class="my-2 px-4 py-2"><pre class="font-normal whitespace-pre-wrap"></pre></div></div><div class="relative flex items-center justify-between gap-2 pb-4"><span>$</span><input type=text autofocus>'), Vw = /* @__PURE__ */ U("<pre>"), Bw = /* @__PURE__ */ U('<div class="z-10 rounded-md border border-neutral-600 bg-neutral-900 text-sm text-white shadow-lg"><div class="flex flex-col text-left">'), Ww = /* @__PURE__ */ U('<button class="flex items-center gap-2 px-4 py-2 text-left text-neutral-100 hover:bg-neutral-800">'), zw = /* @__PURE__ */ U('<svg xmlns=http://www.w3.org/2000/svg width=24 height=24 viewBox="0 0 24 24"><path fill=#fff d="m20.713 8.128l-.246.566a.506.506 0 0 1-.934 0l-.246-.566a4.36 4.36 0 0 0-2.22-2.25l-.759-.339a.53.53 0 0 1 0-.963l.717-.319a4.37 4.37 0 0 0 2.251-2.326l.253-.611a.506.506 0 0 1 .942 0l.253.61a4.37 4.37 0 0 0 2.25 2.327l.718.32a.53.53 0 0 1 0 .962l-.76.338a4.36 4.36 0 0 0-2.219 2.251M12 4a8 8 0 1 0 7.944 7.045l1.986-.236Q22 11.396 22 12c0 5.523-4.477 10-10 10S2 17.523 2 12S6.477 2 12 2c.861 0 1.699.11 2.498.315L14 4.252A8 8 0 0 0 12 4m1 7h3l-5 7v-5H8l5-7z">'), Dw = /* @__PURE__ */ U('<svg xmlns=http://www.w3.org/2000/svg width=24 height=24 viewBox="0 0 24 24"><path fill=none stroke=#fff d="M19 3H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2M7 7h10M7 12h10M7 17h6">'), Iw = /* @__PURE__ */ U('<svg xmlns=http://www.w3.org/2000/svg width=24 height=24 viewBox="0 0 512 512"><path fill=#fff fill-rule=evenodd d="M256 42.667C138.18 42.667 42.667 138.179 42.667 256c0 117.82 95.513 213.334 213.333 213.334c117.822 0 213.334-95.513 213.334-213.334S373.822 42.667 256 42.667m0 384c-94.105 0-170.666-76.561-170.666-170.667S161.894 85.334 256 85.334c94.107 0 170.667 76.56 170.667 170.666S350.107 426.667 256 426.667m26.714-256c0 15.468-11.262 26.667-26.497 26.667c-15.851 0-26.837-11.2-26.837-26.963c0-15.15 11.283-26.37 26.837-26.37c15.235 0 26.497 11.22 26.497 26.666m-48 64h42.666v128h-42.666z">'), jw = /* @__PURE__ */ U('<svg xmlns=http://www.w3.org/2000/svg width=24 height=24 viewBox="0 0 24 24"><path fill=#fff d="M4 21h9.62a4 4 0 0 0 3.037-1.397l5.102-5.952a1 1 0 0 0-.442-1.6l-1.968-.656a3.04 3.04 0 0 0-2.823.503l-3.185 2.547l-.617-1.235A3.98 3.98 0 0 0 9.146 11H4c-1.103 0-2 .897-2 2v6c0 1.103.897 2 2 2m0-8h5.146c.763 0 1.448.423 1.789 1.105l.447.895H7v2h6.014a1 1 0 0 0 .442-.11l.003-.001l.004-.002h.003l.002-.001h.004l.001-.001c.009.003.003-.001.003-.001c.01 0 .002-.001.002-.001h.001l.002-.001l.003-.001l.002-.001l.002-.001l.003-.001l.002-.001c.003 0 .001-.001.002-.001l.003-.002l.002-.001l.002-.001l.003-.001l.002-.001h.001l.002-.001h.001l.002-.001l.002-.001c.009-.001.003-.001.003-.001l.002-.001a1 1 0 0 0 .11-.078l4.146-3.317c.262-.208.623-.273.94-.167l.557.186l-4.133 4.823a2.03 2.03 0 0 1-1.52.688H4zM16 2h-.017c-.163.002-1.006.039-1.983.705c-.951-.648-1.774-.7-1.968-.704L12.002 2h-.004c-.801 0-1.555.313-2.119.878C9.313 3.445 9 4.198 9 5s.313 1.555.861 2.104l3.414 3.586a1.006 1.006 0 0 0 1.45-.001l3.396-3.568C18.688 6.555 19 5.802 19 5s-.313-1.555-.878-2.121A2.98 2.98 0 0 0 16.002 2zm1 3c0 .267-.104.518-.311.725L14 8.55l-2.707-2.843C11.104 5.518 11 5.267 11 5s.104-.518.294-.708A.98.98 0 0 1 11.979 4c.025.001.502.032 1.067.485q.121.098.247.222l.707.707l.707-.707q.126-.124.247-.222c.529-.425.976-.478 1.052-.484a1 1 0 0 1 .701.292c.189.189.293.44.293.707">');
function Uw() {
  const [n, e] = G([]), [t, i] = G(null), [r, s] = G(""), [o, l] = G("/home/your-username"), [a, c] = G(""), [h, f] = G("Disconnected"), [u, d] = G(!1), [O, p] = G({
    x: 0,
    y: 0
  }), [m, y] = G([]);
  Xs(), Qt(), fr(), Yt();
  let S, b;
  b && (b.disabled = !0);
  const w = ["Switch to AI", "Documentation", "Donate", "About"], k = (C) => {
    y(w.filter((x) => x.toLowerCase().includes(C.toLowerCase().slice(1))));
  }, Q = (C) => {
    const x = C.currentTarget.value;
    if (s(x), x.startsWith("/")) {
      const L = C.currentTarget.getBoundingClientRect();
      p({
        x: L.left,
        y: L.bottom
      }), d(!0), k(x);
    } else
      d(!1);
  }, P = () => {
    S && (S.scrollTop = S.scrollHeight);
  }, E = (C, x) => {
    if (C === "outputMessage" || C === "error" && x === "Authentication required") {
      const _ = document.getElementById("outputMessage");
      _ && (_.innerHTML = `<pre class="${C === "error" ? "text-red-500" : "text-yellow-500"} font-light whitespace-pre-wrap">${x}</pre>`);
      return;
    }
    const L = n()[n().length - 1];
    L && L.content === x || (e((_) => [..._, {
      type: C,
      content: x
    }]), P());
  }, z = () => {
    r() && (E("message", "Processing..."), t()?.emit("exec", r()), s(""));
  };
  As(() => {
    const C = Ao("http://localhost:5000/terminal", {
      transports: ["websocket"],
      withCredentials: !0
    });
    i(C), C.on("connect", () => {
      f("Connected"), b && (b.disabled = !1);
    }), C.on("connect_error", (x) => {
      console.error("Connection Error:", x.message), b && (b.disabled = !0), f("Disconnected");
    }), C.on("osinfo", (x) => {
      c(x.homedir);
    }), C.on("outputMessage", (x) => {
      E("outputMessage", x);
    }), C.on("output", (x) => E("message", x)), C.on("cwdInfo", (x) => E("message", x)), C.on("error", (x) => E("error", `${x}`)), C.on("close", (x) => E("message", `
${x}
`)), C.on("prompt", ({
      cwd: x,
      command: L
    }) => {
      let _ = x;
      const V = a();
      if (V && x.startsWith(V))
        _ = x.replace(V, "~");
      else {
        const ee = x.split("/");
        _ = ee[ee.length - 1] || "/";
      }
      l(_), E("command", `${x} $ ${L}`);
    }), Bt(() => C.disconnect());
  });
  const N = (C) => {
    s(""), d(!1), E("message", `Selected: ${C}`);
  };
  return Vt(P), (() => {
    var C = Lw(), x = C.firstChild;
    x.firstChild;
    var L = x.nextSibling, _ = L.firstChild, V = _.nextSibling;
    I(C, X(dr, {}), x);
    var ee = S;
    typeof ee == "function" ? an(ee, x) : S = x, x.style.setProperty("scroll-behavior", "smooth"), I(x, X(ol, {
      get each() {
        return n();
      },
      children: (H) => (() => {
        var K = Vw();
        return I(K, (() => {
          var le = bi(() => H.type === "command");
          return () => le() ? `${o()} $ ${H.content.split(" $ ")[1]}` : H.content;
        })()), Pe((le) => {
          var ne = H.type === "command" ? "font-bold whitespace-pre-wrap text-yellow-400" : H.type === "error" ? "whitespace-pre-wrap text-red-400" : "whitespace-pre-wrap", T = H.type === "command" ? H.content.split(" $ ")[0] : "";
          return ne !== le.e && zi(K, le.e = ne), T !== le.t && Re(K, "title", le.t = T), le;
        }, {
          e: void 0,
          t: void 0
        }), K;
      })()
    }), null), I(C, (() => {
      var H = bi(() => !!(u() && m().length > 0));
      return () => H() && (() => {
        var K = Bw(), le = K.firstChild;
        return K.style.setProperty("width", "200px"), I(le, X(ol, {
          get each() {
            return m();
          },
          children: (ne) => (() => {
            var T = Ww();
            return T.$$click = () => N(ne), I(T, ne === "Switch to AI" ? zw() : ne === "Documentation" ? Dw() : ne === "About" ? Iw() : ne === "Donate" ? jw() : null, null), I(T, ne, null), T;
          })()
        })), Pe((ne) => {
          var T = `${O().x}px`, D = `${O().y + 4}px`;
          return T !== ne.e && ((ne.e = T) != null ? K.style.setProperty("left", T) : K.style.removeProperty("left")), D !== ne.t && ((ne.t = D) != null ? K.style.setProperty("top", D) : K.style.removeProperty("top")), ne;
        }, {
          e: void 0,
          t: void 0
        }), K;
      })();
    })(), L), V.$$keydown = (H) => {
      H.key === "Enter" && (z(), d(!1));
    }, V.$$input = Q;
    var ye = b;
    return typeof ye == "function" ? an(ye, V) : b = V, Pe((H) => {
      var K = `ml-4 ${h() === "Connected" ? "text-green-400" : "text-red-400"}`, le = `flex-1 dark:bg-netural-950 ${h() === "Connected" ? "text-green-400" : "text-red-400"} rounded-md px-1 text-sm focus:outline-none focus:ring-0`, ne = `${h() === "Connected" ? "Type a command..." : h()}`;
      return K !== H.e && zi(_, H.e = K), le !== H.t && zi(V, H.t = le), ne !== H.a && Re(V, "placeholder", H.a = ne), H;
    }, {
      e: void 0,
      t: void 0,
      a: void 0
    }), Pe(() => V.value = r()), C;
  })();
}
Ut(["input", "keydown", "click"]);
var Yw = /* @__PURE__ */ U('<div class="flex h-screen flex-col bg-white dark:bg-neutral-900 dark:text-white"><h1 class="leading-0 uppercase tracking-widest text-lg mt-6 px-4"><b>Dash</b>board</h1><div class="flex-1 overflow-auto scroll-smooth px-4 py-2 text-sm">');
function Nw() {
  return Xs(), Qt(), fr(), Yt(), Vt(() => {
  }), (() => {
    var n = Yw(), e = n.firstChild, t = e.nextSibling;
    return I(n, X(dr, {}), e), t.style.setProperty("scroll-behavior", "smooth"), n;
  })();
}
var Gw = /* @__PURE__ */ U('<div class="flex h-screen flex-col bg-white dark:bg-neutral-900 dark:text-white"><h1 class="leading-0 uppercase tracking-widest text-lg mt-6 px-4"><b>Manage</b> Settings</h1><div class="flex-1 overflow-auto scroll-smooth px-4 py-2 text-sm">');
function Fw() {
  return Xs(), Qt(), fr(), Yt(), Vt(() => {
  }), (() => {
    var n = Gw(), e = n.firstChild, t = e.nextSibling;
    return I(n, X(dr, {}), e), t.style.setProperty("scroll-behavior", "smooth"), n;
  })();
}
var Hw = /* @__PURE__ */ U('<div class="flex h-screen flex-col bg-white dark:bg-neutral-900 dark:text-white"><h1 class="leading-0 uppercase tracking-widest text-lg mt-6 px-4"><b>Manage</b> Profile</h1><div class="flex-1 overflow-auto scroll-smooth px-4 py-2 text-sm">');
function Kw() {
  return Xs(), Qt(), fr(), Yt(), (() => {
    var n = Hw(), e = n.firstChild, t = e.nextSibling;
    return I(n, X(dr, {}), e), t.style.setProperty("scroll-behavior", "smooth"), n;
  })();
}
var Jw = /* @__PURE__ */ U('<div class="flex h-screen flex-col bg-white dark:bg-neutral-900 dark:text-white"><div class="flex-1 overflow-auto scroll-smooth px-4 py-2 text-sm">');
function ev() {
  ax(), Qt();
  const n = Yt();
  return Vt(async () => {
    n.user()?.email || console.log(n.user());
  }), (() => {
    var e = Jw(), t = e.firstChild;
    return I(e, X(dr, {}), t), t.style.setProperty("scroll-behavior", "smooth"), e;
  })();
}
/**
* (c) Iconify
*
* For the full copyright and license information, please view the license.txt
* files at https://github.com/iconify/iconify
*
* Licensed under MIT.
*
* @license MIT
* @version 3.0.0
*/
const Yg = Object.freeze(
  {
    left: 0,
    top: 0,
    width: 16,
    height: 16
  }
), hl = Object.freeze({
  rotate: 0,
  vFlip: !1,
  hFlip: !1
}), qs = Object.freeze({
  ...Yg,
  ...hl
}), Kc = Object.freeze({
  ...qs,
  body: "",
  hidden: !1
}), tv = Object.freeze({
  width: null,
  height: null
}), Ng = Object.freeze({
  // Dimensions
  ...tv,
  // Transformations
  ...hl
});
function nv(n, e = 0) {
  const t = n.replace(/^-?[0-9.]*/, "");
  function i(r) {
    for (; r < 0; )
      r += 4;
    return r % 4;
  }
  if (t === "") {
    const r = parseInt(n);
    return isNaN(r) ? 0 : i(r);
  } else if (t !== n) {
    let r = 0;
    switch (t) {
      case "%":
        r = 25;
        break;
      case "deg":
        r = 90;
    }
    if (r) {
      let s = parseFloat(n.slice(0, n.length - t.length));
      return isNaN(s) ? 0 : (s = s / r, s % 1 === 0 ? i(s) : 0);
    }
  }
  return e;
}
const iv = /[\s,]+/;
function rv(n, e) {
  e.split(iv).forEach((t) => {
    switch (t.trim()) {
      case "horizontal":
        n.hFlip = !0;
        break;
      case "vertical":
        n.vFlip = !0;
        break;
    }
  });
}
const Gg = {
  ...Ng,
  preserveAspectRatio: ""
};
function Qd(n) {
  const e = {
    ...Gg
  }, t = (i, r) => n.getAttribute(i) || r;
  return e.width = t("width", null), e.height = t("height", null), e.rotate = nv(t("rotate", "")), rv(e, t("flip", "")), e.preserveAspectRatio = t("preserveAspectRatio", t("preserveaspectratio", "")), e;
}
function sv(n, e) {
  for (const t in Gg)
    if (n[t] !== e[t])
      return !0;
  return !1;
}
const Fg = /^[a-z0-9]+(-[a-z0-9]+)*$/, Zs = (n, e, t, i = "") => {
  const r = n.split(":");
  if (n.slice(0, 1) === "@") {
    if (r.length < 2 || r.length > 3)
      return null;
    i = r.shift().slice(1);
  }
  if (r.length > 3 || !r.length)
    return null;
  if (r.length > 1) {
    const l = r.pop(), a = r.pop(), c = {
      // Allow provider without '@': "provider:prefix:name"
      provider: r.length > 0 ? r[0] : i,
      prefix: a,
      name: l
    };
    return e && !Xo(c) ? null : c;
  }
  const s = r[0], o = s.split("-");
  if (o.length > 1) {
    const l = {
      provider: i,
      prefix: o.shift(),
      name: o.join("-")
    };
    return e && !Xo(l) ? null : l;
  }
  if (t && i === "") {
    const l = {
      provider: i,
      prefix: "",
      name: s
    };
    return e && !Xo(l, t) ? null : l;
  }
  return null;
}, Xo = (n, e) => n ? !!// Check prefix: cannot be empty, unless allowSimpleName is enabled
// Check name: cannot be empty
((e && n.prefix === "" || n.prefix) && n.name) : !1;
function ov(n, e) {
  const t = {};
  !n.hFlip != !e.hFlip && (t.hFlip = !0), !n.vFlip != !e.vFlip && (t.vFlip = !0);
  const i = ((n.rotate || 0) + (e.rotate || 0)) % 4;
  return i && (t.rotate = i), t;
}
function xd(n, e) {
  const t = ov(n, e);
  for (const i in Kc)
    i in hl ? i in n && !(i in t) && (t[i] = hl[i]) : i in e ? t[i] = e[i] : i in n && (t[i] = n[i]);
  return t;
}
function lv(n, e) {
  const t = n.icons, i = n.aliases || /* @__PURE__ */ Object.create(null), r = /* @__PURE__ */ Object.create(null);
  function s(o) {
    if (t[o])
      return r[o] = [];
    if (!(o in r)) {
      r[o] = null;
      const l = i[o] && i[o].parent, a = l && s(l);
      a && (r[o] = [l].concat(a));
    }
    return r[o];
  }
  return Object.keys(t).concat(Object.keys(i)).forEach(s), r;
}
function av(n, e, t) {
  const i = n.icons, r = n.aliases || /* @__PURE__ */ Object.create(null);
  let s = {};
  function o(l) {
    s = xd(
      i[l] || r[l],
      s
    );
  }
  return o(e), t.forEach(o), xd(n, s);
}
function Hg(n, e) {
  const t = [];
  if (typeof n != "object" || typeof n.icons != "object")
    return t;
  n.not_found instanceof Array && n.not_found.forEach((r) => {
    e(r, null), t.push(r);
  });
  const i = lv(n);
  for (const r in i) {
    const s = i[r];
    s && (e(r, av(n, r, s)), t.push(r));
  }
  return t;
}
const cv = {
  provider: "",
  aliases: {},
  not_found: {},
  ...Yg
};
function qa(n, e) {
  for (const t in e)
    if (t in n && typeof n[t] != typeof e[t])
      return !1;
  return !0;
}
function Kg(n) {
  if (typeof n != "object" || n === null)
    return null;
  const e = n;
  if (typeof e.prefix != "string" || !n.icons || typeof n.icons != "object" || !qa(n, cv))
    return null;
  const t = e.icons;
  for (const r in t) {
    const s = t[r];
    if (
      // Name cannot be empty
      !r || // Must have body
      typeof s.body != "string" || // Check other props
      !qa(
        s,
        Kc
      )
    )
      return null;
  }
  const i = e.aliases || /* @__PURE__ */ Object.create(null);
  for (const r in i) {
    const s = i[r], o = s.parent;
    if (
      // Name cannot be empty
      !r || // Parent must be set and point to existing icon
      typeof o != "string" || !t[o] && !i[o] || // Check other props
      !qa(
        s,
        Kc
      )
    )
      return null;
  }
  return e;
}
const fl = /* @__PURE__ */ Object.create(null);
function hv(n, e) {
  return {
    provider: n,
    prefix: e,
    icons: /* @__PURE__ */ Object.create(null),
    missing: /* @__PURE__ */ new Set()
  };
}
function Cn(n, e) {
  const t = fl[n] || (fl[n] = /* @__PURE__ */ Object.create(null));
  return t[e] || (t[e] = hv(n, e));
}
function Jg(n, e) {
  return Kg(e) ? Hg(e, (t, i) => {
    i ? n.icons[t] = i : n.missing.add(t);
  }) : [];
}
function fv(n, e, t) {
  try {
    if (typeof t.body == "string")
      return n.icons[e] = { ...t }, !0;
  } catch {
  }
  return !1;
}
function uv(n, e) {
  let t = [];
  return (typeof n == "string" ? [n] : Object.keys(fl)).forEach((r) => {
    (typeof r == "string" && typeof e == "string" ? [e] : Object.keys(fl[r] || {})).forEach((o) => {
      const l = Cn(r, o);
      t = t.concat(
        Object.keys(l.icons).map(
          (a) => (r !== "" ? "@" + r + ":" : "") + o + ":" + a
        )
      );
    });
  }), t;
}
let ns = !1;
function e0(n) {
  return typeof n == "boolean" && (ns = n), ns;
}
function is(n) {
  const e = typeof n == "string" ? Zs(n, !0, ns) : n;
  if (e) {
    const t = Cn(e.provider, e.prefix), i = e.name;
    return t.icons[i] || (t.missing.has(i) ? null : void 0);
  }
}
function t0(n, e) {
  const t = Zs(n, !0, ns);
  if (!t)
    return !1;
  const i = Cn(t.provider, t.prefix);
  return e ? fv(i, t.name, e) : (i.missing.add(t.name), !0);
}
function kd(n, e) {
  if (typeof n != "object")
    return !1;
  if (typeof e != "string" && (e = n.provider || ""), ns && !e && !n.prefix) {
    let r = !1;
    return Kg(n) && (n.prefix = "", Hg(n, (s, o) => {
      t0(s, o) && (r = !0);
    })), r;
  }
  const t = n.prefix;
  if (!Xo({
    prefix: t,
    name: "a"
  }))
    return !1;
  const i = Cn(e, t);
  return !!Jg(i, n);
}
function dv(n) {
  return !!is(n);
}
function Ov(n) {
  const e = is(n);
  return e && {
    ...qs,
    ...e
  };
}
function pv(n) {
  const e = {
    loaded: [],
    missing: [],
    pending: []
  }, t = /* @__PURE__ */ Object.create(null);
  n.sort((r, s) => r.provider !== s.provider ? r.provider.localeCompare(s.provider) : r.prefix !== s.prefix ? r.prefix.localeCompare(s.prefix) : r.name.localeCompare(s.name));
  let i = {
    provider: "",
    prefix: "",
    name: ""
  };
  return n.forEach((r) => {
    if (i.name === r.name && i.prefix === r.prefix && i.provider === r.provider)
      return;
    i = r;
    const s = r.provider, o = r.prefix, l = r.name, a = t[s] || (t[s] = /* @__PURE__ */ Object.create(null)), c = a[o] || (a[o] = Cn(s, o));
    let h;
    l in c.icons ? h = e.loaded : o === "" || c.missing.has(l) ? h = e.missing : h = e.pending;
    const f = {
      provider: s,
      prefix: o,
      name: l
    };
    h.push(f);
  }), e;
}
function n0(n, e) {
  n.forEach((t) => {
    const i = t.loaderCallbacks;
    i && (t.loaderCallbacks = i.filter((r) => r.id !== e));
  });
}
function mv(n) {
  n.pendingCallbacksFlag || (n.pendingCallbacksFlag = !0, setTimeout(() => {
    n.pendingCallbacksFlag = !1;
    const e = n.loaderCallbacks ? n.loaderCallbacks.slice(0) : [];
    if (!e.length)
      return;
    let t = !1;
    const i = n.provider, r = n.prefix;
    e.forEach((s) => {
      const o = s.icons, l = o.pending.length;
      o.pending = o.pending.filter((a) => {
        if (a.prefix !== r)
          return !0;
        const c = a.name;
        if (n.icons[c])
          o.loaded.push({
            provider: i,
            prefix: r,
            name: c
          });
        else if (n.missing.has(c))
          o.missing.push({
            provider: i,
            prefix: r,
            name: c
          });
        else
          return t = !0, !0;
        return !1;
      }), o.pending.length !== l && (t || n0([n], s.id), s.callback(
        o.loaded.slice(0),
        o.missing.slice(0),
        o.pending.slice(0),
        s.abort
      ));
    });
  }));
}
let gv = 0;
function yv(n, e, t) {
  const i = gv++, r = n0.bind(null, t, i);
  if (!e.pending.length)
    return r;
  const s = {
    id: i,
    icons: e,
    callback: n,
    abort: r
  };
  return t.forEach((o) => {
    (o.loaderCallbacks || (o.loaderCallbacks = [])).push(s);
  }), r;
}
const Jc = /* @__PURE__ */ Object.create(null);
function wd(n, e) {
  Jc[n] = e;
}
function eh(n) {
  return Jc[n] || Jc[""];
}
function Sv(n, e = !0, t = !1) {
  const i = [];
  return n.forEach((r) => {
    const s = typeof r == "string" ? Zs(r, e, t) : r;
    s && i.push(s);
  }), i;
}
var bv = {
  resources: [],
  index: 0,
  timeout: 2e3,
  rotate: 750,
  random: !1,
  dataAfterTimeout: !1
};
function Qv(n, e, t, i) {
  const r = n.resources.length, s = n.random ? Math.floor(Math.random() * r) : n.index;
  let o;
  if (n.random) {
    let Q = n.resources.slice(0);
    for (o = []; Q.length > 1; ) {
      const P = Math.floor(Math.random() * Q.length);
      o.push(Q[P]), Q = Q.slice(0, P).concat(Q.slice(P + 1));
    }
    o = o.concat(Q);
  } else
    o = n.resources.slice(s).concat(n.resources.slice(0, s));
  const l = Date.now();
  let a = "pending", c = 0, h, f = null, u = [], d = [];
  typeof i == "function" && d.push(i);
  function O() {
    f && (clearTimeout(f), f = null);
  }
  function p() {
    a === "pending" && (a = "aborted"), O(), u.forEach((Q) => {
      Q.status === "pending" && (Q.status = "aborted");
    }), u = [];
  }
  function m(Q, P) {
    P && (d = []), typeof Q == "function" && d.push(Q);
  }
  function y() {
    return {
      startTime: l,
      payload: e,
      status: a,
      queriesSent: c,
      queriesPending: u.length,
      subscribe: m,
      abort: p
    };
  }
  function S() {
    a = "failed", d.forEach((Q) => {
      Q(void 0, h);
    });
  }
  function b() {
    u.forEach((Q) => {
      Q.status === "pending" && (Q.status = "aborted");
    }), u = [];
  }
  function w(Q, P, E) {
    const z = P !== "success";
    switch (u = u.filter((N) => N !== Q), a) {
      case "pending":
        break;
      case "failed":
        if (z || !n.dataAfterTimeout)
          return;
        break;
      default:
        return;
    }
    if (P === "abort") {
      h = E, S();
      return;
    }
    if (z) {
      h = E, u.length || (o.length ? k() : S());
      return;
    }
    if (O(), b(), !n.random) {
      const N = n.resources.indexOf(Q.resource);
      N !== -1 && N !== n.index && (n.index = N);
    }
    a = "completed", d.forEach((N) => {
      N(E);
    });
  }
  function k() {
    if (a !== "pending")
      return;
    O();
    const Q = o.shift();
    if (Q === void 0) {
      if (u.length) {
        f = setTimeout(() => {
          O(), a === "pending" && (b(), S());
        }, n.timeout);
        return;
      }
      S();
      return;
    }
    const P = {
      status: "pending",
      resource: Q,
      callback: (E, z) => {
        w(P, E, z);
      }
    };
    u.push(P), c++, f = setTimeout(k, n.rotate), t(Q, e, P.callback);
  }
  return setTimeout(k), y;
}
function i0(n) {
  const e = {
    ...bv,
    ...n
  };
  let t = [];
  function i() {
    t = t.filter((l) => l().status === "pending");
  }
  function r(l, a, c) {
    const h = Qv(
      e,
      l,
      a,
      (f, u) => {
        i(), c && c(f, u);
      }
    );
    return t.push(h), h;
  }
  function s(l) {
    return t.find((a) => l(a)) || null;
  }
  return {
    query: r,
    find: s,
    setIndex: (l) => {
      e.index = l;
    },
    getIndex: () => e.index,
    cleanup: i
  };
}
function Wf(n) {
  let e;
  if (typeof n.resources == "string")
    e = [n.resources];
  else if (e = n.resources, !(e instanceof Array) || !e.length)
    return null;
  return {
    // API hosts
    resources: e,
    // Root path
    path: n.path || "/",
    // URL length limit
    maxURL: n.maxURL || 500,
    // Timeout before next host is used.
    rotate: n.rotate || 750,
    // Timeout before failing query.
    timeout: n.timeout || 5e3,
    // Randomise default API end point.
    random: n.random === !0,
    // Start index
    index: n.index || 0,
    // Receive data after time out (used if time out kicks in first, then API module sends data anyway).
    dataAfterTimeout: n.dataAfterTimeout !== !1
  };
}
const ta = /* @__PURE__ */ Object.create(null), kr = [
  "https://api.simplesvg.com",
  "https://api.unisvg.com"
], qo = [];
for (; kr.length > 0; )
  kr.length === 1 || Math.random() > 0.5 ? qo.push(kr.shift()) : qo.push(kr.pop());
ta[""] = Wf({
  resources: ["https://api.iconify.design"].concat(qo)
});
function vd(n, e) {
  const t = Wf(e);
  return t === null ? !1 : (ta[n] = t, !0);
}
function na(n) {
  return ta[n];
}
function xv() {
  return Object.keys(ta);
}
function Pd() {
}
const Za = /* @__PURE__ */ Object.create(null);
function kv(n) {
  if (!Za[n]) {
    const e = na(n);
    if (!e)
      return;
    const t = i0(e), i = {
      config: e,
      redundancy: t
    };
    Za[n] = i;
  }
  return Za[n];
}
function r0(n, e, t) {
  let i, r;
  if (typeof n == "string") {
    const s = eh(n);
    if (!s)
      return t(void 0, 424), Pd;
    r = s.send;
    const o = kv(n);
    o && (i = o.redundancy);
  } else {
    const s = Wf(n);
    if (s) {
      i = i0(s);
      const o = n.resources ? n.resources[0] : "", l = eh(o);
      l && (r = l.send);
    }
  }
  return !i || !r ? (t(void 0, 424), Pd) : i.query(e, r, t)().abort;
}
function $d() {
}
function wv(n) {
  n.iconsLoaderFlag || (n.iconsLoaderFlag = !0, setTimeout(() => {
    n.iconsLoaderFlag = !1, mv(n);
  }));
}
function vv(n) {
  const e = [], t = [];
  return n.forEach((i) => {
    (i.match(Fg) ? e : t).push(i);
  }), {
    valid: e,
    invalid: t
  };
}
function wr(n, e, t) {
  function i() {
    const r = n.pendingIcons;
    e.forEach((s) => {
      r && r.delete(s), n.icons[s] || n.missing.add(s);
    });
  }
  if (t && typeof t == "object")
    try {
      if (!Jg(n, t).length) {
        i();
        return;
      }
    } catch (r) {
      console.error(r);
    }
  i(), wv(n);
}
function Td(n, e) {
  n instanceof Promise ? n.then((t) => {
    e(t);
  }).catch(() => {
    e(null);
  }) : e(n);
}
function Pv(n, e) {
  n.iconsToLoad ? n.iconsToLoad = n.iconsToLoad.concat(e).sort() : n.iconsToLoad = e, n.iconsQueueFlag || (n.iconsQueueFlag = !0, setTimeout(() => {
    n.iconsQueueFlag = !1;
    const { provider: t, prefix: i } = n, r = n.iconsToLoad;
    if (delete n.iconsToLoad, !r || !r.length)
      return;
    const s = n.loadIcon;
    if (n.loadIcons && (r.length > 1 || !s)) {
      Td(
        n.loadIcons(r, i, t),
        (h) => {
          wr(n, r, h);
        }
      );
      return;
    }
    if (s) {
      r.forEach((h) => {
        const f = s(h, i, t);
        Td(f, (u) => {
          const d = u ? {
            prefix: i,
            icons: {
              [h]: u
            }
          } : null;
          wr(n, [h], d);
        });
      });
      return;
    }
    const { valid: o, invalid: l } = vv(r);
    if (l.length && wr(n, l, null), !o.length)
      return;
    const a = i.match(Fg) ? eh(t) : null;
    if (!a) {
      wr(n, o, null);
      return;
    }
    a.prepare(t, i, o).forEach((h) => {
      r0(t, h, (f) => {
        wr(n, h.icons, f);
      });
    });
  }));
}
const zf = (n, e) => {
  const t = Sv(n, !0, e0()), i = pv(t);
  if (!i.pending.length) {
    let a = !0;
    return e && setTimeout(() => {
      a && e(
        i.loaded,
        i.missing,
        i.pending,
        $d
      );
    }), () => {
      a = !1;
    };
  }
  const r = /* @__PURE__ */ Object.create(null), s = [];
  let o, l;
  return i.pending.forEach((a) => {
    const { provider: c, prefix: h } = a;
    if (h === l && c === o)
      return;
    o = c, l = h, s.push(Cn(c, h));
    const f = r[c] || (r[c] = /* @__PURE__ */ Object.create(null));
    f[h] || (f[h] = []);
  }), i.pending.forEach((a) => {
    const { provider: c, prefix: h, name: f } = a, u = Cn(c, h), d = u.pendingIcons || (u.pendingIcons = /* @__PURE__ */ new Set());
    d.has(f) || (d.add(f), r[c][h].push(f));
  }), s.forEach((a) => {
    const c = r[a.provider][a.prefix];
    c.length && Pv(a, c);
  }), e ? yv(e, i, s) : $d;
}, $v = (n) => new Promise((e, t) => {
  const i = typeof n == "string" ? Zs(n, !0) : n;
  if (!i) {
    t(n);
    return;
  }
  zf([i || n], (r) => {
    if (r.length && i) {
      const s = is(i);
      if (s) {
        e({
          ...qs,
          ...s
        });
        return;
      }
    }
    t(n);
  });
});
function Cd(n) {
  try {
    const e = typeof n == "string" ? JSON.parse(n) : n;
    if (typeof e.body == "string")
      return {
        ...e
      };
  } catch {
  }
}
function Tv(n, e) {
  if (typeof n == "object")
    return {
      data: Cd(n),
      value: n
    };
  if (typeof n != "string")
    return {
      value: n
    };
  if (n.includes("{")) {
    const s = Cd(n);
    if (s)
      return {
        data: s,
        value: n
      };
  }
  const t = Zs(n, !0, !0);
  if (!t)
    return {
      value: n
    };
  const i = is(t);
  if (i !== void 0 || !t.prefix)
    return {
      value: n,
      name: t,
      data: i
      // could be 'null' -> icon is missing
    };
  const r = zf([t], () => e(n, t, is(t)));
  return {
    value: n,
    name: t,
    loading: r
  };
}
let s0 = !1;
try {
  s0 = navigator.vendor.indexOf("Apple") === 0;
} catch {
}
function Cv(n, e) {
  switch (e) {
    // Force mode
    case "svg":
    case "bg":
    case "mask":
      return e;
  }
  return e !== "style" && (s0 || n.indexOf("<a") === -1) ? "svg" : n.indexOf("currentColor") === -1 ? "bg" : "mask";
}
const Rv = /(-?[0-9.]*[0-9]+[0-9.]*)/g, Ev = /^-?[0-9.]*[0-9]+[0-9.]*$/g;
function th(n, e, t) {
  if (e === 1)
    return n;
  if (t = t || 100, typeof n == "number")
    return Math.ceil(n * e * t) / t;
  if (typeof n != "string")
    return n;
  const i = n.split(Rv);
  if (i === null || !i.length)
    return n;
  const r = [];
  let s = i.shift(), o = Ev.test(s);
  for (; ; ) {
    if (o) {
      const l = parseFloat(s);
      isNaN(l) ? r.push(s) : r.push(Math.ceil(l * e * t) / t);
    } else
      r.push(s);
    if (s = i.shift(), s === void 0)
      return r.join("");
    o = !o;
  }
}
function Av(n, e = "defs") {
  let t = "";
  const i = n.indexOf("<" + e);
  for (; i >= 0; ) {
    const r = n.indexOf(">", i), s = n.indexOf("</" + e);
    if (r === -1 || s === -1)
      break;
    const o = n.indexOf(">", s);
    if (o === -1)
      break;
    t += n.slice(r + 1, s).trim(), n = n.slice(0, i).trim() + n.slice(o + 1);
  }
  return {
    defs: t,
    content: n
  };
}
function _v(n, e) {
  return n ? "<defs>" + n + "</defs>" + e : e;
}
function Xv(n, e, t) {
  const i = Av(n);
  return _v(i.defs, e + i.content + t);
}
const qv = (n) => n === "unset" || n === "undefined" || n === "none";
function o0(n, e) {
  const t = {
    ...qs,
    ...n
  }, i = {
    ...Ng,
    ...e
  }, r = {
    left: t.left,
    top: t.top,
    width: t.width,
    height: t.height
  };
  let s = t.body;
  [t, i].forEach((p) => {
    const m = [], y = p.hFlip, S = p.vFlip;
    let b = p.rotate;
    y ? S ? b += 2 : (m.push(
      "translate(" + (r.width + r.left).toString() + " " + (0 - r.top).toString() + ")"
    ), m.push("scale(-1 1)"), r.top = r.left = 0) : S && (m.push(
      "translate(" + (0 - r.left).toString() + " " + (r.height + r.top).toString() + ")"
    ), m.push("scale(1 -1)"), r.top = r.left = 0);
    let w;
    switch (b < 0 && (b -= Math.floor(b / 4) * 4), b = b % 4, b) {
      case 1:
        w = r.height / 2 + r.top, m.unshift(
          "rotate(90 " + w.toString() + " " + w.toString() + ")"
        );
        break;
      case 2:
        m.unshift(
          "rotate(180 " + (r.width / 2 + r.left).toString() + " " + (r.height / 2 + r.top).toString() + ")"
        );
        break;
      case 3:
        w = r.width / 2 + r.left, m.unshift(
          "rotate(-90 " + w.toString() + " " + w.toString() + ")"
        );
        break;
    }
    b % 2 === 1 && (r.left !== r.top && (w = r.left, r.left = r.top, r.top = w), r.width !== r.height && (w = r.width, r.width = r.height, r.height = w)), m.length && (s = Xv(
      s,
      '<g transform="' + m.join(" ") + '">',
      "</g>"
    ));
  });
  const o = i.width, l = i.height, a = r.width, c = r.height;
  let h, f;
  o === null ? (f = l === null ? "1em" : l === "auto" ? c : l, h = th(f, a / c)) : (h = o === "auto" ? a : o, f = l === null ? th(h, c / a) : l === "auto" ? c : l);
  const u = {}, d = (p, m) => {
    qv(m) || (u[p] = m.toString());
  };
  d("width", h), d("height", f);
  const O = [r.left, r.top, a, c];
  return u.viewBox = O.join(" "), {
    attributes: u,
    viewBox: O,
    body: s
  };
}
function Df(n, e) {
  let t = n.indexOf("xlink:") === -1 ? "" : ' xmlns:xlink="http://www.w3.org/1999/xlink"';
  for (const i in e)
    t += " " + i + '="' + e[i] + '"';
  return '<svg xmlns="http://www.w3.org/2000/svg"' + t + ">" + n + "</svg>";
}
function Zv(n) {
  return n.replace(/"/g, "'").replace(/%/g, "%25").replace(/#/g, "%23").replace(/</g, "%3C").replace(/>/g, "%3E").replace(/\s+/g, " ");
}
function Mv(n) {
  return "data:image/svg+xml," + Zv(n);
}
function l0(n) {
  return 'url("' + Mv(n) + '")';
}
const Lv = () => {
  let n;
  try {
    if (n = fetch, typeof n == "function")
      return n;
  } catch {
  }
};
let ul = Lv();
function Vv(n) {
  ul = n;
}
function Bv() {
  return ul;
}
function Wv(n, e) {
  const t = na(n);
  if (!t)
    return 0;
  let i;
  if (!t.maxURL)
    i = 0;
  else {
    let r = 0;
    t.resources.forEach((o) => {
      r = Math.max(r, o.length);
    });
    const s = e + ".json?icons=";
    i = t.maxURL - r - t.path.length - s.length;
  }
  return i;
}
function zv(n) {
  return n === 404;
}
const Dv = (n, e, t) => {
  const i = [], r = Wv(n, e), s = "icons";
  let o = {
    type: s,
    provider: n,
    prefix: e,
    icons: []
  }, l = 0;
  return t.forEach((a, c) => {
    l += a.length + 1, l >= r && c > 0 && (i.push(o), o = {
      type: s,
      provider: n,
      prefix: e,
      icons: []
    }, l = a.length), o.icons.push(a);
  }), i.push(o), i;
};
function Iv(n) {
  if (typeof n == "string") {
    const e = na(n);
    if (e)
      return e.path;
  }
  return "/";
}
const jv = (n, e, t) => {
  if (!ul) {
    t("abort", 424);
    return;
  }
  let i = Iv(e.provider);
  switch (e.type) {
    case "icons": {
      const s = e.prefix, l = e.icons.join(","), a = new URLSearchParams({
        icons: l
      });
      i += s + ".json?" + a.toString();
      break;
    }
    case "custom": {
      const s = e.uri;
      i += s.slice(0, 1) === "/" ? s.slice(1) : s;
      break;
    }
    default:
      t("abort", 400);
      return;
  }
  let r = 503;
  ul(n + i).then((s) => {
    const o = s.status;
    if (o !== 200) {
      setTimeout(() => {
        t(zv(o) ? "abort" : "next", o);
      });
      return;
    }
    return r = 501, s.json();
  }).then((s) => {
    if (typeof s != "object" || s === null) {
      setTimeout(() => {
        s === 404 ? t("abort", s) : t("next", r);
      });
      return;
    }
    setTimeout(() => {
      t("success", s);
    });
  }).catch(() => {
    t("next", r);
  });
}, Uv = {
  prepare: Dv,
  send: jv
};
function Yv(n, e, t) {
  Cn(t || "", e).loadIcons = n;
}
function Nv(n, e, t) {
  Cn(t || "", e).loadIcon = n;
}
const Ma = "data-style";
let a0 = "";
function Gv(n) {
  a0 = n;
}
function Rd(n, e) {
  let t = Array.from(n.childNodes).find((i) => i.hasAttribute && i.hasAttribute(Ma));
  t || (t = document.createElement("style"), t.setAttribute(Ma, Ma), n.appendChild(t)), t.textContent = ":host{display:inline-block;vertical-align:" + (e ? "-0.125em" : "0") + "}span,svg{display:block;margin:auto}" + a0;
}
function c0() {
  wd("", Uv), e0(!0);
  let n;
  try {
    n = window;
  } catch {
  }
  if (n) {
    if (n.IconifyPreload !== void 0) {
      const t = n.IconifyPreload, i = "Invalid IconifyPreload syntax.";
      typeof t == "object" && t !== null && (t instanceof Array ? t : [t]).forEach((r) => {
        try {
          // Check if item is an object and not null/array
          (typeof r != "object" || r === null || r instanceof Array || // Check for 'icons' and 'prefix'
          typeof r.icons != "object" || typeof r.prefix != "string" || // Add icon set
          !kd(r)) && console.error(i);
        } catch {
          console.error(i);
        }
      });
    }
    if (n.IconifyProviders !== void 0) {
      const t = n.IconifyProviders;
      if (typeof t == "object" && t !== null)
        for (const i in t) {
          const r = "IconifyProviders[" + i + "] is invalid.";
          try {
            const s = t[i];
            if (typeof s != "object" || !s || s.resources === void 0)
              continue;
            vd(i, s) || console.error(r);
          } catch {
            console.error(r);
          }
        }
    }
  }
  return {
    iconLoaded: dv,
    getIcon: Ov,
    listIcons: uv,
    addIcon: t0,
    addCollection: kd,
    calculateSize: th,
    buildIcon: o0,
    iconToHTML: Df,
    svgToURL: l0,
    loadIcons: zf,
    loadIcon: $v,
    addAPIProvider: vd,
    setCustomIconLoader: Nv,
    setCustomIconsLoader: Yv,
    appendCustomStyle: Gv,
    _api: {
      getAPIConfig: na,
      setAPIModule: wd,
      sendAPIQuery: r0,
      setFetch: Vv,
      getFetch: Bv,
      listAPIProviders: xv
    }
  };
}
const nh = {
  "background-color": "currentColor"
}, h0 = {
  "background-color": "transparent"
}, Ed = {
  image: "var(--svg)",
  repeat: "no-repeat",
  size: "100% 100%"
}, Ad = {
  "-webkit-mask": nh,
  mask: nh,
  background: h0
};
for (const n in Ad) {
  const e = Ad[n];
  for (const t in Ed)
    e[n + "-" + t] = Ed[t];
}
function _d(n) {
  return n ? n + (n.match(/^[-0-9.]+$/) ? "px" : "") : "inherit";
}
function Fv(n, e, t) {
  const i = document.createElement("span");
  let r = n.body;
  r.indexOf("<a") !== -1 && (r += "<!-- " + Date.now() + " -->");
  const s = n.attributes, o = Df(r, {
    ...s,
    width: e.width + "",
    height: e.height + ""
  }), l = l0(o), a = i.style, c = {
    "--svg": l,
    width: _d(s.width),
    height: _d(s.height),
    ...t ? nh : h0
  };
  for (const h in c)
    a.setProperty(h, c[h]);
  return i;
}
let Ir;
function Hv() {
  try {
    Ir = window.trustedTypes.createPolicy("iconify", {
      // eslint-disable-next-line @typescript-eslint/no-unsafe-return
      createHTML: (n) => n
    });
  } catch {
    Ir = null;
  }
}
function Kv(n) {
  return Ir === void 0 && Hv(), Ir ? Ir.createHTML(n) : n;
}
function Jv(n) {
  const e = document.createElement("span"), t = n.attributes;
  let i = "";
  t.width || (i = "width: inherit;"), t.height || (i += "height: inherit;"), i && (t.style = i);
  const r = Df(n.body, t);
  return e.innerHTML = Kv(r), e.firstChild;
}
function ih(n) {
  return Array.from(n.childNodes).find((e) => {
    const t = e.tagName && e.tagName.toUpperCase();
    return t === "SPAN" || t === "SVG";
  });
}
function Xd(n, e) {
  const t = e.icon.data, i = e.customisations, r = o0(t, i);
  i.preserveAspectRatio && (r.attributes.preserveAspectRatio = i.preserveAspectRatio);
  const s = e.renderedMode;
  let o;
  switch (s) {
    case "svg":
      o = Jv(r);
      break;
    default:
      o = Fv(r, {
        ...qs,
        ...t
      }, s === "mask");
  }
  const l = ih(n);
  l ? o.tagName === "SPAN" && l.tagName === o.tagName ? l.setAttribute("style", o.getAttribute("style")) : n.replaceChild(o, l) : n.appendChild(o);
}
function qd(n, e, t) {
  const i = t && (t.rendered ? t : t.lastRender);
  return {
    rendered: !1,
    inline: e,
    icon: n,
    lastRender: i
  };
}
function eP(n = "iconify-icon") {
  let e, t;
  try {
    e = window.customElements, t = window.HTMLElement;
  } catch {
    return;
  }
  if (!e || !t)
    return;
  const i = e.get(n);
  if (i)
    return i;
  const r = [
    // Icon
    "icon",
    // Mode
    "mode",
    "inline",
    "noobserver",
    // Customisations
    "width",
    "height",
    "rotate",
    "flip"
  ], s = class extends t {
    // Root
    _shadowRoot;
    // Initialised
    _initialised = !1;
    // Icon state
    _state;
    // Attributes check queued
    _checkQueued = !1;
    // Connected
    _connected = !1;
    // Observer
    _observer = null;
    _visible = !0;
    /**
     * Constructor
     */
    constructor() {
      super();
      const l = this._shadowRoot = this.attachShadow({
        mode: "open"
      }), a = this.hasAttribute("inline");
      Rd(l, a), this._state = qd({
        value: ""
      }, a), this._queueCheck();
    }
    /**
     * Connected to DOM
     */
    connectedCallback() {
      this._connected = !0, this.startObserver();
    }
    /**
     * Disconnected from DOM
     */
    disconnectedCallback() {
      this._connected = !1, this.stopObserver();
    }
    /**
     * Observed attributes
     */
    static get observedAttributes() {
      return r.slice(0);
    }
    /**
     * Observed properties that are different from attributes
     *
     * Experimental! Need to test with various frameworks that support it
     */
    /*
    static get properties() {
        return {
            inline: {
                type: Boolean,
                reflect: true,
            },
            // Not listing other attributes because they are strings or combination
            // of string and another type. Cannot have multiple types
        };
    }
    */
    /**
     * Attribute has changed
     */
    attributeChangedCallback(l) {
      switch (l) {
        case "inline": {
          const a = this.hasAttribute("inline"), c = this._state;
          a !== c.inline && (c.inline = a, Rd(this._shadowRoot, a));
          break;
        }
        case "noobserver": {
          this.hasAttribute("noobserver") ? this.startObserver() : this.stopObserver();
          break;
        }
        default:
          this._queueCheck();
      }
    }
    /**
     * Get/set icon
     */
    get icon() {
      const l = this.getAttribute("icon");
      if (l && l.slice(0, 1) === "{")
        try {
          return JSON.parse(l);
        } catch {
        }
      return l;
    }
    set icon(l) {
      typeof l == "object" && (l = JSON.stringify(l)), this.setAttribute("icon", l);
    }
    /**
     * Get/set inline
     */
    get inline() {
      return this.hasAttribute("inline");
    }
    set inline(l) {
      l ? this.setAttribute("inline", "true") : this.removeAttribute("inline");
    }
    /**
     * Get/set observer
     */
    get observer() {
      return this.hasAttribute("observer");
    }
    set observer(l) {
      l ? this.setAttribute("observer", "true") : this.removeAttribute("observer");
    }
    /**
     * Restart animation
     */
    restartAnimation() {
      const l = this._state;
      if (l.rendered) {
        const a = this._shadowRoot;
        if (l.renderedMode === "svg")
          try {
            a.lastChild.setCurrentTime(0);
            return;
          } catch {
          }
        Xd(a, l);
      }
    }
    /**
     * Get status
     */
    get status() {
      const l = this._state;
      return l.rendered ? "rendered" : l.icon.data === null ? "failed" : "loading";
    }
    /**
     * Queue attributes re-check
     */
    _queueCheck() {
      this._checkQueued || (this._checkQueued = !0, setTimeout(() => {
        this._check();
      }));
    }
    /**
     * Check for changes
     */
    _check() {
      if (!this._checkQueued)
        return;
      this._checkQueued = !1;
      const l = this._state, a = this.getAttribute("icon");
      if (a !== l.icon.value) {
        this._iconChanged(a);
        return;
      }
      if (!l.rendered || !this._visible)
        return;
      const c = this.getAttribute("mode"), h = Qd(this);
      (l.attrMode !== c || sv(l.customisations, h) || !ih(this._shadowRoot)) && this._renderIcon(l.icon, h, c);
    }
    /**
     * Icon value has changed
     */
    _iconChanged(l) {
      const a = Tv(l, (c, h, f) => {
        const u = this._state;
        if (u.rendered || this.getAttribute("icon") !== c)
          return;
        const d = {
          value: c,
          name: h,
          data: f
        };
        d.data ? this._gotIconData(d) : u.icon = d;
      });
      a.data ? this._gotIconData(a) : this._state = qd(a, this._state.inline, this._state);
    }
    /**
     * Force render icon on state change
     */
    _forceRender() {
      if (!this._visible) {
        const l = ih(this._shadowRoot);
        l && this._shadowRoot.removeChild(l);
        return;
      }
      this._queueCheck();
    }
    /**
     * Got new icon data, icon is ready to (re)render
     */
    _gotIconData(l) {
      this._checkQueued = !1, this._renderIcon(l, Qd(this), this.getAttribute("mode"));
    }
    /**
     * Re-render based on icon data
     */
    _renderIcon(l, a, c) {
      const h = Cv(l.data.body, c), f = this._state.inline;
      Xd(this._shadowRoot, this._state = {
        rendered: !0,
        icon: l,
        inline: f,
        customisations: a,
        attrMode: c,
        renderedMode: h
      });
    }
    /**
     * Start observer
     */
    startObserver() {
      if (!this._observer && !this.hasAttribute("noobserver"))
        try {
          this._observer = new IntersectionObserver((l) => {
            const a = l.some((c) => c.isIntersecting);
            a !== this._visible && (this._visible = a, this._forceRender());
          }), this._observer.observe(this);
        } catch {
          if (this._observer) {
            try {
              this._observer.disconnect();
            } catch {
            }
            this._observer = null;
          }
        }
    }
    /**
     * Stop observer
     */
    stopObserver() {
      this._observer && (this._observer.disconnect(), this._observer = null, this._visible = !0, this._connected && this._forceRender());
    }
  };
  r.forEach((l) => {
    l in s.prototype || Object.defineProperty(s.prototype, l, {
      get: function() {
        return this.getAttribute(l);
      },
      set: function(a) {
        a !== null ? this.setAttribute(l, a) : this.removeAttribute(l);
      }
    });
  });
  const o = c0();
  for (const l in o)
    s[l] = s.prototype[l] = o[l];
  return e.define(n, s), s;
}
const tP = eP() || c0(), { iconLoaded: TV, getIcon: CV, listIcons: RV, addIcon: EV, addCollection: AV, calculateSize: _V, buildIcon: XV, iconToHTML: qV, svgToURL: ZV, loadIcons: MV, loadIcon: LV, setCustomIconLoader: VV, setCustomIconsLoader: BV, addAPIProvider: WV, _api: zV } = tP;
var nP = /* @__PURE__ */ U("<iconify-icon>", !0, !1, !1);
function f0(n) {
  let {
    icon: e,
    mode: t,
    inline: i,
    rotate: r,
    flip: s,
    width: o,
    height: l,
    preserveAspectRatio: a,
    noobserver: c
  } = n;
  return typeof e == "object" && (e = JSON.stringify(e)), // @ts-ignore
  (() => {
    var h = nP();
    return Re(h, "icon", e), Re(h, "mode", t), Re(h, "inline", i), Re(h, "rotate", r), Re(h, "flip", s), Re(h, "width", o), Re(h, "height", l), Re(h, "preserveaspectratio", a), Re(h, "noobserver", c), cg(h, n, !1, !1), h._$owner = Nl(), h;
  })();
}
var iP = /* @__PURE__ */ U('<button class="w-full flex items-center gap-2 justify-center p-3 text-white bg-neutral-900 rounded-md hover:bg-neutral-800 mt-4"> Sign in with Google');
const rP = "http://localhost:5000/api/auth/google/callback";
function u0() {
  const [n, e] = G("");
  return As(() => {
    e(`${rP}`);
  }), (() => {
    var t = iP(), i = t.firstChild;
    return t.$$click = () => n() && (window.location.href = n()), I(t, X(f0, {
      icon: "flat-color-icons:google",
      width: "20",
      height: "20"
    }), i), t;
  })();
}
Ut(["click"]);
var sP = /* @__PURE__ */ U('<button class="w-full flex gap-2 items-center justify-center p-3 text-white bg-gray-700 rounded-md hover:bg-gray-600 mt-4"> Sign in with Github');
const oP = "http://localhost:5000/api/auth/github/callback";
function d0() {
  const [n, e] = G("");
  return As(() => {
    e(`${oP}`);
  }), (() => {
    var t = sP(), i = t.firstChild;
    return t.$$click = () => n() && (window.location.href = n()), I(t, X(f0, {
      icon: "mdi:github",
      width: "24",
      class: "text-gray-900",
      height: "24"
    }), i), t;
  })();
}
Ut(["click"]);
var lP = /* @__PURE__ */ U('<div class="dark:bg-neutral-900 bg-neutral-200 fixed inset-0 flex items-center justify-center"><svg class="m-auto h-12 w-12 animate-spin text-neutral-800 dark:text-neutral-100"xmlns=http://www.w3.org/2000/svg fill=none viewBox="0 0 24 24"><circle class=opacity-25 cx=12 cy=12 r=10 stroke=currentColor stroke-width=4></circle><path class=opacity-75 fill=currentColor d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z">');
const O0 = () => lP();
var aP = /* @__PURE__ */ U('<div class="bg-white dark:bg-neutral-900 h-screen w-full"><div class="flex min-h-screen items-center justify-center"><div class="w-full max-w-md rounded-lg bg-neutral-950 p-8 border border-neutral-300 dark:border-neutral-600 shadow-lg"><h2 class="text-center text-2xl font-bold text-white">Welcome Back 👋</h2><form class=space-y-4><div><label class="block text-gray-400">Email</label><input type=email placeholder="Enter email"class="mt-1 w-full rounded-md border border-neutral-300 dark:border-neutral-600 bg-neutral-200 dark:bg-neutral-800 p-3 text-neutral-900 dark:text-neutral-100 placeholder-neutral-400 focus:ring-2 focus:ring-blue-500"></div><div><label class="block text-gray-400">Password</label><input type=password placeholder=•••••••• class="mt-1 w-full rounded-md border border-neutral-300 dark:border-neutral-600 bg-neutral-200 dark:bg-neutral-800 p-3 text-neutral-900 dark:text-neutral-100 placeholder-neutral-400 focus:ring-2 focus:ring-blue-500"></div><button type=submit class="w-full rounded-md bg-blue-600 p-3 text-white hover:bg-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-400">Sign In'), cP = /* @__PURE__ */ U('<p class="text-center text-sm text-red-400">'), hP = /* @__PURE__ */ U('<div class="dark:bg-solid-darkbg fixed inset-0 flex items-center justify-center">');
const fP = () => {
  const [n, e] = G(""), [t, i] = G(""), [r, s] = G(""), [o, l] = G(!1), a = Qt();
  Yt();
  const c = async (h) => {
    h.preventDefault(), s(""), l(!0);
    try {
      const f = await fetch(`${Qi}/auth/login`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        credentials: "include",
        body: JSON.stringify({
          email: n(),
          password: t()
        })
      });
      if (!f.ok) {
        const d = await f.text();
        throw s(d || f.statusText), new Error(d || f.statusText);
      }
      const u = await f.json();
      if (u)
        localStorage.setItem("token", u.accessToken), location.reload(), a("/dashboard");
      else
        throw new Error("AccessToken not found in response");
    } catch (f) {
      s(f.message || "Login failed");
    } finally {
      l(!1);
    }
  };
  return X(Zt, {
    get when() {
      return !o();
    },
    get fallback() {
      return X(O0, {});
    },
    get children() {
      var h = aP(), f = h.firstChild, u = f.firstChild, d = u.firstChild, O = d.nextSibling, p = O.firstChild, m = p.firstChild, y = m.nextSibling, S = p.nextSibling, b = S.firstChild, w = b.nextSibling;
      return I(u, (() => {
        var k = bi(() => !!r());
        return () => k() && (() => {
          var Q = cP();
          return I(Q, r), Q;
        })();
      })(), O), O.addEventListener("submit", c), y.$$input = (k) => e(k.currentTarget.value), w.$$input = (k) => i(k.currentTarget.value), I(u, X(u0, {}), null), I(u, X(d0, {}), null), Pe(() => y.value = n()), Pe(() => w.value = t()), h;
    }
  });
}, uP = () => (Qt(), localStorage.getItem("user"), Yt(), Vt(() => {
}), (() => {
  var n = hP();
  return I(n, X(fP, {})), n;
})());
Ut(["input"]);
var dP = /* @__PURE__ */ U('<div class="bg-white dark:bg-neutral-900 h-screen w-full"><div class="flex min-h-screen items-center justify-center"><div class="w-full max-w-md rounded-lg bg-neutral-950 p-8 border border-neutral-300 dark:border-neutral-600 shadow-lg"><h2 class="text-center text-2xl font-bold text-white">Welcome Back 👋</h2><form class=space-y-4><div><label class="block text-gray-400">Email</label><input type=email placeholder="Enter email"class="mt-1 w-full rounded-md border border-neutral-300 dark:border-neutral-600 bg-neutral-200 dark:bg-neutral-800 p-3 text-neutral-900 dark:text-neutral-100 placeholder-neutral-400 focus:ring-2 focus:ring-blue-500"></div><div><label class="block text-gray-400">Password</label><input type=password placeholder=•••••••• class="mt-1 w-full rounded-md border border-neutral-300 dark:border-neutral-600 bg-neutral-200 dark:bg-neutral-800 p-3 text-neutral-900 dark:text-neutral-100 placeholder-neutral-400 focus:ring-2 focus:ring-blue-500"></div><button type=submit class="w-full rounded-md bg-blue-600 p-3 text-white hover:bg-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-400">Sign In'), OP = /* @__PURE__ */ U('<p class="text-center text-sm text-red-400">'), pP = /* @__PURE__ */ U('<div class="dark:bg-solid-darkbg fixed inset-0 flex items-center justify-center">');
const mP = () => {
  const [n, e] = G(""), [t, i] = G(""), [r, s] = G(""), [o, l] = G(!1), a = Qt();
  Yt();
  const c = async (h) => {
    h.preventDefault(), s(""), l(!0);
    try {
      const f = await fetch(`${Qi}/auth/login`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        credentials: "include",
        body: JSON.stringify({
          email: n(),
          password: t()
        })
      });
      if (!f.ok) {
        const d = await f.text();
        throw s(d || f.statusText), new Error(d || f.statusText);
      }
      const u = await f.json();
      if (u)
        localStorage.setItem("token", u.accessToken), location.reload(), a("/dashboard");
      else
        throw new Error("AccessToken not found in response");
    } catch (f) {
      s(f.message || "Login failed");
    } finally {
      l(!1);
    }
  };
  return X(Zt, {
    get when() {
      return !o();
    },
    get fallback() {
      return X(O0, {});
    },
    get children() {
      var h = dP(), f = h.firstChild, u = f.firstChild, d = u.firstChild, O = d.nextSibling, p = O.firstChild, m = p.firstChild, y = m.nextSibling, S = p.nextSibling, b = S.firstChild, w = b.nextSibling;
      return I(u, (() => {
        var k = bi(() => !!r());
        return () => k() && (() => {
          var Q = OP();
          return I(Q, r), Q;
        })();
      })(), O), O.addEventListener("submit", c), y.$$input = (k) => e(k.currentTarget.value), w.$$input = (k) => i(k.currentTarget.value), I(u, X(u0, {}), null), I(u, X(d0, {}), null), Pe(() => y.value = n()), Pe(() => w.value = t()), h;
    }
  });
}, gP = () => {
  Qt();
  const n = localStorage.getItem("user");
  return Yt(), Vt(() => {
    n && localStorage.removeItem("user");
  }), (() => {
    var e = pP();
    return I(e, X(mP, {})), e;
  })();
};
Ut(["input"]);
let rh = [], p0 = [];
(() => {
  let n = "lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map((e) => e ? parseInt(e, 36) : 1);
  for (let e = 0, t = 0; e < n.length; e++)
    (e % 2 ? p0 : rh).push(t = t + n[e]);
})();
function yP(n) {
  if (n < 768) return !1;
  for (let e = 0, t = rh.length; ; ) {
    let i = e + t >> 1;
    if (n < rh[i]) t = i;
    else if (n >= p0[i]) e = i + 1;
    else return !0;
    if (e == t) return !1;
  }
}
function Zd(n) {
  return n >= 127462 && n <= 127487;
}
const Md = 8205;
function SP(n, e, t = !0, i = !0) {
  return (t ? m0 : bP)(n, e, i);
}
function m0(n, e, t) {
  if (e == n.length) return e;
  e && g0(n.charCodeAt(e)) && y0(n.charCodeAt(e - 1)) && e--;
  let i = La(n, e);
  for (e += Ld(i); e < n.length; ) {
    let r = La(n, e);
    if (i == Md || r == Md || t && yP(r))
      e += Ld(r), i = r;
    else if (Zd(r)) {
      let s = 0, o = e - 2;
      for (; o >= 0 && Zd(La(n, o)); )
        s++, o -= 2;
      if (s % 2 == 0) break;
      e += 2;
    } else
      break;
  }
  return e;
}
function bP(n, e, t) {
  for (; e > 0; ) {
    let i = m0(n, e - 2, t);
    if (i < e) return i;
    e--;
  }
  return 0;
}
function La(n, e) {
  let t = n.charCodeAt(e);
  if (!y0(t) || e + 1 == n.length) return t;
  let i = n.charCodeAt(e + 1);
  return g0(i) ? (t - 55296 << 10) + (i - 56320) + 65536 : t;
}
function g0(n) {
  return n >= 56320 && n < 57344;
}
function y0(n) {
  return n >= 55296 && n < 56320;
}
function Ld(n) {
  return n < 65536 ? 1 : 2;
}
class de {
  /**
  Get the line description around the given position.
  */
  lineAt(e) {
    if (e < 0 || e > this.length)
      throw new RangeError(`Invalid position ${e} in document of length ${this.length}`);
    return this.lineInner(e, !1, 1, 0);
  }
  /**
  Get the description for the given (1-based) line number.
  */
  line(e) {
    if (e < 1 || e > this.lines)
      throw new RangeError(`Invalid line number ${e} in ${this.lines}-line document`);
    return this.lineInner(e, !0, 1, 0);
  }
  /**
  Replace a range of the text with the given content.
  */
  replace(e, t, i) {
    [e, t] = Hi(this, e, t);
    let r = [];
    return this.decompose(
      0,
      e,
      r,
      2
      /* Open.To */
    ), i.length && i.decompose(
      0,
      i.length,
      r,
      3
      /* Open.To */
    ), this.decompose(
      t,
      this.length,
      r,
      1
      /* Open.From */
    ), sn.from(r, this.length - (t - e) + i.length);
  }
  /**
  Append another document to this one.
  */
  append(e) {
    return this.replace(this.length, this.length, e);
  }
  /**
  Retrieve the text between the given points.
  */
  slice(e, t = this.length) {
    [e, t] = Hi(this, e, t);
    let i = [];
    return this.decompose(e, t, i, 0), sn.from(i, t - e);
  }
  /**
  Test whether this text is equal to another instance.
  */
  eq(e) {
    if (e == this)
      return !0;
    if (e.length != this.length || e.lines != this.lines)
      return !1;
    let t = this.scanIdentical(e, 1), i = this.length - this.scanIdentical(e, -1), r = new jr(this), s = new jr(e);
    for (let o = t, l = t; ; ) {
      if (r.next(o), s.next(o), o = 0, r.lineBreak != s.lineBreak || r.done != s.done || r.value != s.value)
        return !1;
      if (l += r.value.length, r.done || l >= i)
        return !0;
    }
  }
  /**
  Iterate over the text. When `dir` is `-1`, iteration happens
  from end to start. This will return lines and the breaks between
  them as separate strings.
  */
  iter(e = 1) {
    return new jr(this, e);
  }
  /**
  Iterate over a range of the text. When `from` > `to`, the
  iterator will run in reverse.
  */
  iterRange(e, t = this.length) {
    return new S0(this, e, t);
  }
  /**
  Return a cursor that iterates over the given range of lines,
  _without_ returning the line breaks between, and yielding empty
  strings for empty lines.
  
  When `from` and `to` are given, they should be 1-based line numbers.
  */
  iterLines(e, t) {
    let i;
    if (e == null)
      i = this.iter();
    else {
      t == null && (t = this.lines + 1);
      let r = this.line(e).from;
      i = this.iterRange(r, Math.max(r, t == this.lines + 1 ? this.length : t <= 1 ? 0 : this.line(t - 1).to));
    }
    return new b0(i);
  }
  /**
  Return the document as a string, using newline characters to
  separate lines.
  */
  toString() {
    return this.sliceString(0);
  }
  /**
  Convert the document to an array of lines (which can be
  deserialized again via [`Text.of`](https://codemirror.net/6/docs/ref/#state.Text^of)).
  */
  toJSON() {
    let e = [];
    return this.flatten(e), e;
  }
  /**
  @internal
  */
  constructor() {
  }
  /**
  Create a `Text` instance for the given array of lines.
  */
  static of(e) {
    if (e.length == 0)
      throw new RangeError("A document must have at least one line");
    return e.length == 1 && !e[0] ? de.empty : e.length <= 32 ? new Ae(e) : sn.from(Ae.split(e, []));
  }
}
class Ae extends de {
  constructor(e, t = QP(e)) {
    super(), this.text = e, this.length = t;
  }
  get lines() {
    return this.text.length;
  }
  get children() {
    return null;
  }
  lineInner(e, t, i, r) {
    for (let s = 0; ; s++) {
      let o = this.text[s], l = r + o.length;
      if ((t ? i : l) >= e)
        return new xP(r, l, i, o);
      r = l + 1, i++;
    }
  }
  decompose(e, t, i, r) {
    let s = e <= 0 && t >= this.length ? this : new Ae(Vd(this.text, e, t), Math.min(t, this.length) - Math.max(0, e));
    if (r & 1) {
      let o = i.pop(), l = Zo(s.text, o.text.slice(), 0, s.length);
      if (l.length <= 32)
        i.push(new Ae(l, o.length + s.length));
      else {
        let a = l.length >> 1;
        i.push(new Ae(l.slice(0, a)), new Ae(l.slice(a)));
      }
    } else
      i.push(s);
  }
  replace(e, t, i) {
    if (!(i instanceof Ae))
      return super.replace(e, t, i);
    [e, t] = Hi(this, e, t);
    let r = Zo(this.text, Zo(i.text, Vd(this.text, 0, e)), t), s = this.length + i.length - (t - e);
    return r.length <= 32 ? new Ae(r, s) : sn.from(Ae.split(r, []), s);
  }
  sliceString(e, t = this.length, i = `
`) {
    [e, t] = Hi(this, e, t);
    let r = "";
    for (let s = 0, o = 0; s <= t && o < this.text.length; o++) {
      let l = this.text[o], a = s + l.length;
      s > e && o && (r += i), e < a && t > s && (r += l.slice(Math.max(0, e - s), t - s)), s = a + 1;
    }
    return r;
  }
  flatten(e) {
    for (let t of this.text)
      e.push(t);
  }
  scanIdentical() {
    return 0;
  }
  static split(e, t) {
    let i = [], r = -1;
    for (let s of e)
      i.push(s), r += s.length + 1, i.length == 32 && (t.push(new Ae(i, r)), i = [], r = -1);
    return r > -1 && t.push(new Ae(i, r)), t;
  }
}
class sn extends de {
  constructor(e, t) {
    super(), this.children = e, this.length = t, this.lines = 0;
    for (let i of e)
      this.lines += i.lines;
  }
  lineInner(e, t, i, r) {
    for (let s = 0; ; s++) {
      let o = this.children[s], l = r + o.length, a = i + o.lines - 1;
      if ((t ? a : l) >= e)
        return o.lineInner(e, t, i, r);
      r = l + 1, i = a + 1;
    }
  }
  decompose(e, t, i, r) {
    for (let s = 0, o = 0; o <= t && s < this.children.length; s++) {
      let l = this.children[s], a = o + l.length;
      if (e <= a && t >= o) {
        let c = r & ((o <= e ? 1 : 0) | (a >= t ? 2 : 0));
        o >= e && a <= t && !c ? i.push(l) : l.decompose(e - o, t - o, i, c);
      }
      o = a + 1;
    }
  }
  replace(e, t, i) {
    if ([e, t] = Hi(this, e, t), i.lines < this.lines)
      for (let r = 0, s = 0; r < this.children.length; r++) {
        let o = this.children[r], l = s + o.length;
        if (e >= s && t <= l) {
          let a = o.replace(e - s, t - s, i), c = this.lines - o.lines + a.lines;
          if (a.lines < c >> 4 && a.lines > c >> 6) {
            let h = this.children.slice();
            return h[r] = a, new sn(h, this.length - (t - e) + i.length);
          }
          return super.replace(s, l, a);
        }
        s = l + 1;
      }
    return super.replace(e, t, i);
  }
  sliceString(e, t = this.length, i = `
`) {
    [e, t] = Hi(this, e, t);
    let r = "";
    for (let s = 0, o = 0; s < this.children.length && o <= t; s++) {
      let l = this.children[s], a = o + l.length;
      o > e && s && (r += i), e < a && t > o && (r += l.sliceString(e - o, t - o, i)), o = a + 1;
    }
    return r;
  }
  flatten(e) {
    for (let t of this.children)
      t.flatten(e);
  }
  scanIdentical(e, t) {
    if (!(e instanceof sn))
      return 0;
    let i = 0, [r, s, o, l] = t > 0 ? [0, 0, this.children.length, e.children.length] : [this.children.length - 1, e.children.length - 1, -1, -1];
    for (; ; r += t, s += t) {
      if (r == o || s == l)
        return i;
      let a = this.children[r], c = e.children[s];
      if (a != c)
        return i + a.scanIdentical(c, t);
      i += a.length + 1;
    }
  }
  static from(e, t = e.reduce((i, r) => i + r.length + 1, -1)) {
    let i = 0;
    for (let d of e)
      i += d.lines;
    if (i < 32) {
      let d = [];
      for (let O of e)
        O.flatten(d);
      return new Ae(d, t);
    }
    let r = Math.max(
      32,
      i >> 5
      /* Tree.BranchShift */
    ), s = r << 1, o = r >> 1, l = [], a = 0, c = -1, h = [];
    function f(d) {
      let O;
      if (d.lines > s && d instanceof sn)
        for (let p of d.children)
          f(p);
      else d.lines > o && (a > o || !a) ? (u(), l.push(d)) : d instanceof Ae && a && (O = h[h.length - 1]) instanceof Ae && d.lines + O.lines <= 32 ? (a += d.lines, c += d.length + 1, h[h.length - 1] = new Ae(O.text.concat(d.text), O.length + 1 + d.length)) : (a + d.lines > r && u(), a += d.lines, c += d.length + 1, h.push(d));
    }
    function u() {
      a != 0 && (l.push(h.length == 1 ? h[0] : sn.from(h, c)), c = -1, a = h.length = 0);
    }
    for (let d of e)
      f(d);
    return u(), l.length == 1 ? l[0] : new sn(l, t);
  }
}
de.empty = /* @__PURE__ */ new Ae([""], 0);
function QP(n) {
  let e = -1;
  for (let t of n)
    e += t.length + 1;
  return e;
}
function Zo(n, e, t = 0, i = 1e9) {
  for (let r = 0, s = 0, o = !0; s < n.length && r <= i; s++) {
    let l = n[s], a = r + l.length;
    a >= t && (a > i && (l = l.slice(0, i - r)), r < t && (l = l.slice(t - r)), o ? (e[e.length - 1] += l, o = !1) : e.push(l)), r = a + 1;
  }
  return e;
}
function Vd(n, e, t) {
  return Zo(n, [""], e, t);
}
class jr {
  constructor(e, t = 1) {
    this.dir = t, this.done = !1, this.lineBreak = !1, this.value = "", this.nodes = [e], this.offsets = [t > 0 ? 1 : (e instanceof Ae ? e.text.length : e.children.length) << 1];
  }
  nextInner(e, t) {
    for (this.done = this.lineBreak = !1; ; ) {
      let i = this.nodes.length - 1, r = this.nodes[i], s = this.offsets[i], o = s >> 1, l = r instanceof Ae ? r.text.length : r.children.length;
      if (o == (t > 0 ? l : 0)) {
        if (i == 0)
          return this.done = !0, this.value = "", this;
        t > 0 && this.offsets[i - 1]++, this.nodes.pop(), this.offsets.pop();
      } else if ((s & 1) == (t > 0 ? 0 : 1)) {
        if (this.offsets[i] += t, e == 0)
          return this.lineBreak = !0, this.value = `
`, this;
        e--;
      } else if (r instanceof Ae) {
        let a = r.text[o + (t < 0 ? -1 : 0)];
        if (this.offsets[i] += t, a.length > Math.max(0, e))
          return this.value = e == 0 ? a : t > 0 ? a.slice(e) : a.slice(0, a.length - e), this;
        e -= a.length;
      } else {
        let a = r.children[o + (t < 0 ? -1 : 0)];
        e > a.length ? (e -= a.length, this.offsets[i] += t) : (t < 0 && this.offsets[i]--, this.nodes.push(a), this.offsets.push(t > 0 ? 1 : (a instanceof Ae ? a.text.length : a.children.length) << 1));
      }
    }
  }
  next(e = 0) {
    return e < 0 && (this.nextInner(-e, -this.dir), e = this.value.length), this.nextInner(e, this.dir);
  }
}
class S0 {
  constructor(e, t, i) {
    this.value = "", this.done = !1, this.cursor = new jr(e, t > i ? -1 : 1), this.pos = t > i ? e.length : 0, this.from = Math.min(t, i), this.to = Math.max(t, i);
  }
  nextInner(e, t) {
    if (t < 0 ? this.pos <= this.from : this.pos >= this.to)
      return this.value = "", this.done = !0, this;
    e += Math.max(0, t < 0 ? this.pos - this.to : this.from - this.pos);
    let i = t < 0 ? this.pos - this.from : this.to - this.pos;
    e > i && (e = i), i -= e;
    let { value: r } = this.cursor.next(e);
    return this.pos += (r.length + e) * t, this.value = r.length <= i ? r : t < 0 ? r.slice(r.length - i) : r.slice(0, i), this.done = !this.value, this;
  }
  next(e = 0) {
    return e < 0 ? e = Math.max(e, this.from - this.pos) : e > 0 && (e = Math.min(e, this.to - this.pos)), this.nextInner(e, this.cursor.dir);
  }
  get lineBreak() {
    return this.cursor.lineBreak && this.value != "";
  }
}
class b0 {
  constructor(e) {
    this.inner = e, this.afterBreak = !0, this.value = "", this.done = !1;
  }
  next(e = 0) {
    let { done: t, lineBreak: i, value: r } = this.inner.next(e);
    return t && this.afterBreak ? (this.value = "", this.afterBreak = !1) : t ? (this.done = !0, this.value = "") : i ? this.afterBreak ? this.value = "" : (this.afterBreak = !0, this.next()) : (this.value = r, this.afterBreak = !1), this;
  }
  get lineBreak() {
    return !1;
  }
}
typeof Symbol < "u" && (de.prototype[Symbol.iterator] = function() {
  return this.iter();
}, jr.prototype[Symbol.iterator] = S0.prototype[Symbol.iterator] = b0.prototype[Symbol.iterator] = function() {
  return this;
});
let xP = class {
  /**
  @internal
  */
  constructor(e, t, i, r) {
    this.from = e, this.to = t, this.number = i, this.text = r;
  }
  /**
  The length of the line (not including any line break after it).
  */
  get length() {
    return this.to - this.from;
  }
};
function Hi(n, e, t) {
  return e = Math.max(0, Math.min(n.length, e)), [e, Math.max(e, Math.min(n.length, t))];
}
function Ge(n, e, t = !0, i = !0) {
  return SP(n, e, t, i);
}
function kP(n) {
  return n >= 56320 && n < 57344;
}
function wP(n) {
  return n >= 55296 && n < 56320;
}
function lt(n, e) {
  let t = n.charCodeAt(e);
  if (!wP(t) || e + 1 == n.length)
    return t;
  let i = n.charCodeAt(e + 1);
  return kP(i) ? (t - 55296 << 10) + (i - 56320) + 65536 : t;
}
function If(n) {
  return n <= 65535 ? String.fromCharCode(n) : (n -= 65536, String.fromCharCode((n >> 10) + 55296, (n & 1023) + 56320));
}
function on(n) {
  return n < 65536 ? 1 : 2;
}
const sh = /\r\n?|\n/;
var Ne = /* @__PURE__ */ function(n) {
  return n[n.Simple = 0] = "Simple", n[n.TrackDel = 1] = "TrackDel", n[n.TrackBefore = 2] = "TrackBefore", n[n.TrackAfter = 3] = "TrackAfter", n;
}(Ne || (Ne = {}));
class un {
  // Sections are encoded as pairs of integers. The first is the
  // length in the current document, and the second is -1 for
  // unaffected sections, and the length of the replacement content
  // otherwise. So an insertion would be (0, n>0), a deletion (n>0,
  // 0), and a replacement two positive numbers.
  /**
  @internal
  */
  constructor(e) {
    this.sections = e;
  }
  /**
  The length of the document before the change.
  */
  get length() {
    let e = 0;
    for (let t = 0; t < this.sections.length; t += 2)
      e += this.sections[t];
    return e;
  }
  /**
  The length of the document after the change.
  */
  get newLength() {
    let e = 0;
    for (let t = 0; t < this.sections.length; t += 2) {
      let i = this.sections[t + 1];
      e += i < 0 ? this.sections[t] : i;
    }
    return e;
  }
  /**
  False when there are actual changes in this set.
  */
  get empty() {
    return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0;
  }
  /**
  Iterate over the unchanged parts left by these changes. `posA`
  provides the position of the range in the old document, `posB`
  the new position in the changed document.
  */
  iterGaps(e) {
    for (let t = 0, i = 0, r = 0; t < this.sections.length; ) {
      let s = this.sections[t++], o = this.sections[t++];
      o < 0 ? (e(i, r, s), r += s) : r += o, i += s;
    }
  }
  /**
  Iterate over the ranges changed by these changes. (See
  [`ChangeSet.iterChanges`](https://codemirror.net/6/docs/ref/#state.ChangeSet.iterChanges) for a
  variant that also provides you with the inserted text.)
  `fromA`/`toA` provides the extent of the change in the starting
  document, `fromB`/`toB` the extent of the replacement in the
  changed document.
  
  When `individual` is true, adjacent changes (which are kept
  separate for [position mapping](https://codemirror.net/6/docs/ref/#state.ChangeDesc.mapPos)) are
  reported separately.
  */
  iterChangedRanges(e, t = !1) {
    oh(this, e, t);
  }
  /**
  Get a description of the inverted form of these changes.
  */
  get invertedDesc() {
    let e = [];
    for (let t = 0; t < this.sections.length; ) {
      let i = this.sections[t++], r = this.sections[t++];
      r < 0 ? e.push(i, r) : e.push(r, i);
    }
    return new un(e);
  }
  /**
  Compute the combined effect of applying another set of changes
  after this one. The length of the document after this set should
  match the length before `other`.
  */
  composeDesc(e) {
    return this.empty ? e : e.empty ? this : Q0(this, e);
  }
  /**
  Map this description, which should start with the same document
  as `other`, over another set of changes, so that it can be
  applied after it. When `before` is true, map as if the changes
  in `this` happened before the ones in `other`.
  */
  mapDesc(e, t = !1) {
    return e.empty ? this : lh(this, e, t);
  }
  mapPos(e, t = -1, i = Ne.Simple) {
    let r = 0, s = 0;
    for (let o = 0; o < this.sections.length; ) {
      let l = this.sections[o++], a = this.sections[o++], c = r + l;
      if (a < 0) {
        if (c > e)
          return s + (e - r);
        s += l;
      } else {
        if (i != Ne.Simple && c >= e && (i == Ne.TrackDel && r < e && c > e || i == Ne.TrackBefore && r < e || i == Ne.TrackAfter && c > e))
          return null;
        if (c > e || c == e && t < 0 && !l)
          return e == r || t < 0 ? s : s + a;
        s += a;
      }
      r = c;
    }
    if (e > r)
      throw new RangeError(`Position ${e} is out of range for changeset of length ${r}`);
    return s;
  }
  /**
  Check whether these changes touch a given range. When one of the
  changes entirely covers the range, the string `"cover"` is
  returned.
  */
  touchesRange(e, t = e) {
    for (let i = 0, r = 0; i < this.sections.length && r <= t; ) {
      let s = this.sections[i++], o = this.sections[i++], l = r + s;
      if (o >= 0 && r <= t && l >= e)
        return r < e && l > t ? "cover" : !0;
      r = l;
    }
    return !1;
  }
  /**
  @internal
  */
  toString() {
    let e = "";
    for (let t = 0; t < this.sections.length; ) {
      let i = this.sections[t++], r = this.sections[t++];
      e += (e ? " " : "") + i + (r >= 0 ? ":" + r : "");
    }
    return e;
  }
  /**
  Serialize this change desc to a JSON-representable value.
  */
  toJSON() {
    return this.sections;
  }
  /**
  Create a change desc from its JSON representation (as produced
  by [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeDesc.toJSON).
  */
  static fromJSON(e) {
    if (!Array.isArray(e) || e.length % 2 || e.some((t) => typeof t != "number"))
      throw new RangeError("Invalid JSON representation of ChangeDesc");
    return new un(e);
  }
  /**
  @internal
  */
  static create(e) {
    return new un(e);
  }
}
class Be extends un {
  constructor(e, t) {
    super(e), this.inserted = t;
  }
  /**
  Apply the changes to a document, returning the modified
  document.
  */
  apply(e) {
    if (this.length != e.length)
      throw new RangeError("Applying change set to a document with the wrong length");
    return oh(this, (t, i, r, s, o) => e = e.replace(r, r + (i - t), o), !1), e;
  }
  mapDesc(e, t = !1) {
    return lh(this, e, t, !0);
  }
  /**
  Given the document as it existed _before_ the changes, return a
  change set that represents the inverse of this set, which could
  be used to go from the document created by the changes back to
  the document as it existed before the changes.
  */
  invert(e) {
    let t = this.sections.slice(), i = [];
    for (let r = 0, s = 0; r < t.length; r += 2) {
      let o = t[r], l = t[r + 1];
      if (l >= 0) {
        t[r] = l, t[r + 1] = o;
        let a = r >> 1;
        for (; i.length < a; )
          i.push(de.empty);
        i.push(o ? e.slice(s, s + o) : de.empty);
      }
      s += o;
    }
    return new Be(t, i);
  }
  /**
  Combine two subsequent change sets into a single set. `other`
  must start in the document produced by `this`. If `this` goes
  `docA` → `docB` and `other` represents `docB` → `docC`, the
  returned value will represent the change `docA` → `docC`.
  */
  compose(e) {
    return this.empty ? e : e.empty ? this : Q0(this, e, !0);
  }
  /**
  Given another change set starting in the same document, maps this
  change set over the other, producing a new change set that can be
  applied to the document produced by applying `other`. When
  `before` is `true`, order changes as if `this` comes before
  `other`, otherwise (the default) treat `other` as coming first.
  
  Given two changes `A` and `B`, `A.compose(B.map(A))` and
  `B.compose(A.map(B, true))` will produce the same document. This
  provides a basic form of [operational
  transformation](https://en.wikipedia.org/wiki/Operational_transformation),
  and can be used for collaborative editing.
  */
  map(e, t = !1) {
    return e.empty ? this : lh(this, e, t, !0);
  }
  /**
  Iterate over the changed ranges in the document, calling `f` for
  each, with the range in the original document (`fromA`-`toA`)
  and the range that replaces it in the new document
  (`fromB`-`toB`).
  
  When `individual` is true, adjacent changes are reported
  separately.
  */
  iterChanges(e, t = !1) {
    oh(this, e, t);
  }
  /**
  Get a [change description](https://codemirror.net/6/docs/ref/#state.ChangeDesc) for this change
  set.
  */
  get desc() {
    return un.create(this.sections);
  }
  /**
  @internal
  */
  filter(e) {
    let t = [], i = [], r = [], s = new rs(this);
    e: for (let o = 0, l = 0; ; ) {
      let a = o == e.length ? 1e9 : e[o++];
      for (; l < a || l == a && s.len == 0; ) {
        if (s.done)
          break e;
        let h = Math.min(s.len, a - l);
        Ke(r, h, -1);
        let f = s.ins == -1 ? -1 : s.off == 0 ? s.ins : 0;
        Ke(t, h, f), f > 0 && zn(i, t, s.text), s.forward(h), l += h;
      }
      let c = e[o++];
      for (; l < c; ) {
        if (s.done)
          break e;
        let h = Math.min(s.len, c - l);
        Ke(t, h, -1), Ke(r, h, s.ins == -1 ? -1 : s.off == 0 ? s.ins : 0), s.forward(h), l += h;
      }
    }
    return {
      changes: new Be(t, i),
      filtered: un.create(r)
    };
  }
  /**
  Serialize this change set to a JSON-representable value.
  */
  toJSON() {
    let e = [];
    for (let t = 0; t < this.sections.length; t += 2) {
      let i = this.sections[t], r = this.sections[t + 1];
      r < 0 ? e.push(i) : r == 0 ? e.push([i]) : e.push([i].concat(this.inserted[t >> 1].toJSON()));
    }
    return e;
  }
  /**
  Create a change set for the given changes, for a document of the
  given length, using `lineSep` as line separator.
  */
  static of(e, t, i) {
    let r = [], s = [], o = 0, l = null;
    function a(h = !1) {
      if (!h && !r.length)
        return;
      o < t && Ke(r, t - o, -1);
      let f = new Be(r, s);
      l = l ? l.compose(f.map(l)) : f, r = [], s = [], o = 0;
    }
    function c(h) {
      if (Array.isArray(h))
        for (let f of h)
          c(f);
      else if (h instanceof Be) {
        if (h.length != t)
          throw new RangeError(`Mismatched change set length (got ${h.length}, expected ${t})`);
        a(), l = l ? l.compose(h.map(l)) : h;
      } else {
        let { from: f, to: u = f, insert: d } = h;
        if (f > u || f < 0 || u > t)
          throw new RangeError(`Invalid change range ${f} to ${u} (in doc of length ${t})`);
        let O = d ? typeof d == "string" ? de.of(d.split(i || sh)) : d : de.empty, p = O.length;
        if (f == u && p == 0)
          return;
        f < o && a(), f > o && Ke(r, f - o, -1), Ke(r, u - f, p), zn(s, r, O), o = u;
      }
    }
    return c(e), a(!l), l;
  }
  /**
  Create an empty changeset of the given length.
  */
  static empty(e) {
    return new Be(e ? [e, -1] : [], []);
  }
  /**
  Create a changeset from its JSON representation (as produced by
  [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeSet.toJSON).
  */
  static fromJSON(e) {
    if (!Array.isArray(e))
      throw new RangeError("Invalid JSON representation of ChangeSet");
    let t = [], i = [];
    for (let r = 0; r < e.length; r++) {
      let s = e[r];
      if (typeof s == "number")
        t.push(s, -1);
      else {
        if (!Array.isArray(s) || typeof s[0] != "number" || s.some((o, l) => l && typeof o != "string"))
          throw new RangeError("Invalid JSON representation of ChangeSet");
        if (s.length == 1)
          t.push(s[0], 0);
        else {
          for (; i.length < r; )
            i.push(de.empty);
          i[r] = de.of(s.slice(1)), t.push(s[0], i[r].length);
        }
      }
    }
    return new Be(t, i);
  }
  /**
  @internal
  */
  static createSet(e, t) {
    return new Be(e, t);
  }
}
function Ke(n, e, t, i = !1) {
  if (e == 0 && t <= 0)
    return;
  let r = n.length - 2;
  r >= 0 && t <= 0 && t == n[r + 1] ? n[r] += e : r >= 0 && e == 0 && n[r] == 0 ? n[r + 1] += t : i ? (n[r] += e, n[r + 1] += t) : n.push(e, t);
}
function zn(n, e, t) {
  if (t.length == 0)
    return;
  let i = e.length - 2 >> 1;
  if (i < n.length)
    n[n.length - 1] = n[n.length - 1].append(t);
  else {
    for (; n.length < i; )
      n.push(de.empty);
    n.push(t);
  }
}
function oh(n, e, t) {
  let i = n.inserted;
  for (let r = 0, s = 0, o = 0; o < n.sections.length; ) {
    let l = n.sections[o++], a = n.sections[o++];
    if (a < 0)
      r += l, s += l;
    else {
      let c = r, h = s, f = de.empty;
      for (; c += l, h += a, a && i && (f = f.append(i[o - 2 >> 1])), !(t || o == n.sections.length || n.sections[o + 1] < 0); )
        l = n.sections[o++], a = n.sections[o++];
      e(r, c, s, h, f), r = c, s = h;
    }
  }
}
function lh(n, e, t, i = !1) {
  let r = [], s = i ? [] : null, o = new rs(n), l = new rs(e);
  for (let a = -1; ; ) {
    if (o.done && l.len || l.done && o.len)
      throw new Error("Mismatched change set lengths");
    if (o.ins == -1 && l.ins == -1) {
      let c = Math.min(o.len, l.len);
      Ke(r, c, -1), o.forward(c), l.forward(c);
    } else if (l.ins >= 0 && (o.ins < 0 || a == o.i || o.off == 0 && (l.len < o.len || l.len == o.len && !t))) {
      let c = l.len;
      for (Ke(r, l.ins, -1); c; ) {
        let h = Math.min(o.len, c);
        o.ins >= 0 && a < o.i && o.len <= h && (Ke(r, 0, o.ins), s && zn(s, r, o.text), a = o.i), o.forward(h), c -= h;
      }
      l.next();
    } else if (o.ins >= 0) {
      let c = 0, h = o.len;
      for (; h; )
        if (l.ins == -1) {
          let f = Math.min(h, l.len);
          c += f, h -= f, l.forward(f);
        } else if (l.ins == 0 && l.len < h)
          h -= l.len, l.next();
        else
          break;
      Ke(r, c, a < o.i ? o.ins : 0), s && a < o.i && zn(s, r, o.text), a = o.i, o.forward(o.len - h);
    } else {
      if (o.done && l.done)
        return s ? Be.createSet(r, s) : un.create(r);
      throw new Error("Mismatched change set lengths");
    }
  }
}
function Q0(n, e, t = !1) {
  let i = [], r = t ? [] : null, s = new rs(n), o = new rs(e);
  for (let l = !1; ; ) {
    if (s.done && o.done)
      return r ? Be.createSet(i, r) : un.create(i);
    if (s.ins == 0)
      Ke(i, s.len, 0, l), s.next();
    else if (o.len == 0 && !o.done)
      Ke(i, 0, o.ins, l), r && zn(r, i, o.text), o.next();
    else {
      if (s.done || o.done)
        throw new Error("Mismatched change set lengths");
      {
        let a = Math.min(s.len2, o.len), c = i.length;
        if (s.ins == -1) {
          let h = o.ins == -1 ? -1 : o.off ? 0 : o.ins;
          Ke(i, a, h, l), r && h && zn(r, i, o.text);
        } else o.ins == -1 ? (Ke(i, s.off ? 0 : s.len, a, l), r && zn(r, i, s.textBit(a))) : (Ke(i, s.off ? 0 : s.len, o.off ? 0 : o.ins, l), r && !o.off && zn(r, i, o.text));
        l = (s.ins > a || o.ins >= 0 && o.len > a) && (l || i.length > c), s.forward2(a), o.forward(a);
      }
    }
  }
}
class rs {
  constructor(e) {
    this.set = e, this.i = 0, this.next();
  }
  next() {
    let { sections: e } = this.set;
    this.i < e.length ? (this.len = e[this.i++], this.ins = e[this.i++]) : (this.len = 0, this.ins = -2), this.off = 0;
  }
  get done() {
    return this.ins == -2;
  }
  get len2() {
    return this.ins < 0 ? this.len : this.ins;
  }
  get text() {
    let { inserted: e } = this.set, t = this.i - 2 >> 1;
    return t >= e.length ? de.empty : e[t];
  }
  textBit(e) {
    let { inserted: t } = this.set, i = this.i - 2 >> 1;
    return i >= t.length && !e ? de.empty : t[i].slice(this.off, e == null ? void 0 : this.off + e);
  }
  forward(e) {
    e == this.len ? this.next() : (this.len -= e, this.off += e);
  }
  forward2(e) {
    this.ins == -1 ? this.forward(e) : e == this.ins ? this.next() : (this.ins -= e, this.off += e);
  }
}
class hi {
  constructor(e, t, i) {
    this.from = e, this.to = t, this.flags = i;
  }
  /**
  The anchor of the range—the side that doesn't move when you
  extend it.
  */
  get anchor() {
    return this.flags & 32 ? this.to : this.from;
  }
  /**
  The head of the range, which is moved when the range is
  [extended](https://codemirror.net/6/docs/ref/#state.SelectionRange.extend).
  */
  get head() {
    return this.flags & 32 ? this.from : this.to;
  }
  /**
  True when `anchor` and `head` are at the same position.
  */
  get empty() {
    return this.from == this.to;
  }
  /**
  If this is a cursor that is explicitly associated with the
  character on one of its sides, this returns the side. -1 means
  the character before its position, 1 the character after, and 0
  means no association.
  */
  get assoc() {
    return this.flags & 8 ? -1 : this.flags & 16 ? 1 : 0;
  }
  /**
  The bidirectional text level associated with this cursor, if
  any.
  */
  get bidiLevel() {
    let e = this.flags & 7;
    return e == 7 ? null : e;
  }
  /**
  The goal column (stored vertical offset) associated with a
  cursor. This is used to preserve the vertical position when
  [moving](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) across
  lines of different length.
  */
  get goalColumn() {
    let e = this.flags >> 6;
    return e == 16777215 ? void 0 : e;
  }
  /**
  Map this range through a change, producing a valid range in the
  updated document.
  */
  map(e, t = -1) {
    let i, r;
    return this.empty ? i = r = e.mapPos(this.from, t) : (i = e.mapPos(this.from, 1), r = e.mapPos(this.to, -1)), i == this.from && r == this.to ? this : new hi(i, r, this.flags);
  }
  /**
  Extend this range to cover at least `from` to `to`.
  */
  extend(e, t = e) {
    if (e <= this.anchor && t >= this.anchor)
      return $.range(e, t);
    let i = Math.abs(e - this.anchor) > Math.abs(t - this.anchor) ? e : t;
    return $.range(this.anchor, i);
  }
  /**
  Compare this range to another range.
  */
  eq(e, t = !1) {
    return this.anchor == e.anchor && this.head == e.head && (!t || !this.empty || this.assoc == e.assoc);
  }
  /**
  Return a JSON-serializable object representing the range.
  */
  toJSON() {
    return { anchor: this.anchor, head: this.head };
  }
  /**
  Convert a JSON representation of a range to a `SelectionRange`
  instance.
  */
  static fromJSON(e) {
    if (!e || typeof e.anchor != "number" || typeof e.head != "number")
      throw new RangeError("Invalid JSON representation for SelectionRange");
    return $.range(e.anchor, e.head);
  }
  /**
  @internal
  */
  static create(e, t, i) {
    return new hi(e, t, i);
  }
}
class $ {
  constructor(e, t) {
    this.ranges = e, this.mainIndex = t;
  }
  /**
  Map a selection through a change. Used to adjust the selection
  position for changes.
  */
  map(e, t = -1) {
    return e.empty ? this : $.create(this.ranges.map((i) => i.map(e, t)), this.mainIndex);
  }
  /**
  Compare this selection to another selection. By default, ranges
  are compared only by position. When `includeAssoc` is true,
  cursor ranges must also have the same
  [`assoc`](https://codemirror.net/6/docs/ref/#state.SelectionRange.assoc) value.
  */
  eq(e, t = !1) {
    if (this.ranges.length != e.ranges.length || this.mainIndex != e.mainIndex)
      return !1;
    for (let i = 0; i < this.ranges.length; i++)
      if (!this.ranges[i].eq(e.ranges[i], t))
        return !1;
    return !0;
  }
  /**
  Get the primary selection range. Usually, you should make sure
  your code applies to _all_ ranges, by using methods like
  [`changeByRange`](https://codemirror.net/6/docs/ref/#state.EditorState.changeByRange).
  */
  get main() {
    return this.ranges[this.mainIndex];
  }
  /**
  Make sure the selection only has one range. Returns a selection
  holding only the main range from this selection.
  */
  asSingle() {
    return this.ranges.length == 1 ? this : new $([this.main], 0);
  }
  /**
  Extend this selection with an extra range.
  */
  addRange(e, t = !0) {
    return $.create([e].concat(this.ranges), t ? 0 : this.mainIndex + 1);
  }
  /**
  Replace a given range with another range, and then normalize the
  selection to merge and sort ranges if necessary.
  */
  replaceRange(e, t = this.mainIndex) {
    let i = this.ranges.slice();
    return i[t] = e, $.create(i, this.mainIndex);
  }
  /**
  Convert this selection to an object that can be serialized to
  JSON.
  */
  toJSON() {
    return { ranges: this.ranges.map((e) => e.toJSON()), main: this.mainIndex };
  }
  /**
  Create a selection from a JSON representation.
  */
  static fromJSON(e) {
    if (!e || !Array.isArray(e.ranges) || typeof e.main != "number" || e.main >= e.ranges.length)
      throw new RangeError("Invalid JSON representation for EditorSelection");
    return new $(e.ranges.map((t) => hi.fromJSON(t)), e.main);
  }
  /**
  Create a selection holding a single range.
  */
  static single(e, t = e) {
    return new $([$.range(e, t)], 0);
  }
  /**
  Sort and merge the given set of ranges, creating a valid
  selection.
  */
  static create(e, t = 0) {
    if (e.length == 0)
      throw new RangeError("A selection needs at least one range");
    for (let i = 0, r = 0; r < e.length; r++) {
      let s = e[r];
      if (s.empty ? s.from <= i : s.from < i)
        return $.normalized(e.slice(), t);
      i = s.to;
    }
    return new $(e, t);
  }
  /**
  Create a cursor selection range at the given position. You can
  safely ignore the optional arguments in most situations.
  */
  static cursor(e, t = 0, i, r) {
    return hi.create(e, e, (t == 0 ? 0 : t < 0 ? 8 : 16) | (i == null ? 7 : Math.min(6, i)) | (r ?? 16777215) << 6);
  }
  /**
  Create a selection range.
  */
  static range(e, t, i, r) {
    let s = (i ?? 16777215) << 6 | (r == null ? 7 : Math.min(6, r));
    return t < e ? hi.create(t, e, 48 | s) : hi.create(e, t, (t > e ? 8 : 0) | s);
  }
  /**
  @internal
  */
  static normalized(e, t = 0) {
    let i = e[t];
    e.sort((r, s) => r.from - s.from), t = e.indexOf(i);
    for (let r = 1; r < e.length; r++) {
      let s = e[r], o = e[r - 1];
      if (s.empty ? s.from <= o.to : s.from < o.to) {
        let l = o.from, a = Math.max(s.to, o.to);
        r <= t && t--, e.splice(--r, 2, s.anchor > s.head ? $.range(a, l) : $.range(l, a));
      }
    }
    return new $(e, t);
  }
}
function x0(n, e) {
  for (let t of n.ranges)
    if (t.to > e)
      throw new RangeError("Selection points outside of document");
}
let jf = 0;
class B {
  constructor(e, t, i, r, s) {
    this.combine = e, this.compareInput = t, this.compare = i, this.isStatic = r, this.id = jf++, this.default = e([]), this.extensions = typeof s == "function" ? s(this) : s;
  }
  /**
  Returns a facet reader for this facet, which can be used to
  [read](https://codemirror.net/6/docs/ref/#state.EditorState.facet) it but not to define values for it.
  */
  get reader() {
    return this;
  }
  /**
  Define a new facet.
  */
  static define(e = {}) {
    return new B(e.combine || ((t) => t), e.compareInput || ((t, i) => t === i), e.compare || (e.combine ? (t, i) => t === i : Uf), !!e.static, e.enables);
  }
  /**
  Returns an extension that adds the given value to this facet.
  */
  of(e) {
    return new Mo([], this, 0, e);
  }
  /**
  Create an extension that computes a value for the facet from a
  state. You must take care to declare the parts of the state that
  this value depends on, since your function is only called again
  for a new state when one of those parts changed.
  
  In cases where your value depends only on a single field, you'll
  want to use the [`from`](https://codemirror.net/6/docs/ref/#state.Facet.from) method instead.
  */
  compute(e, t) {
    if (this.isStatic)
      throw new Error("Can't compute a static facet");
    return new Mo(e, this, 1, t);
  }
  /**
  Create an extension that computes zero or more values for this
  facet from a state.
  */
  computeN(e, t) {
    if (this.isStatic)
      throw new Error("Can't compute a static facet");
    return new Mo(e, this, 2, t);
  }
  from(e, t) {
    return t || (t = (i) => i), this.compute([e], (i) => t(i.field(e)));
  }
}
function Uf(n, e) {
  return n == e || n.length == e.length && n.every((t, i) => t === e[i]);
}
class Mo {
  constructor(e, t, i, r) {
    this.dependencies = e, this.facet = t, this.type = i, this.value = r, this.id = jf++;
  }
  dynamicSlot(e) {
    var t;
    let i = this.value, r = this.facet.compareInput, s = this.id, o = e[s] >> 1, l = this.type == 2, a = !1, c = !1, h = [];
    for (let f of this.dependencies)
      f == "doc" ? a = !0 : f == "selection" ? c = !0 : (((t = e[f.id]) !== null && t !== void 0 ? t : 1) & 1) == 0 && h.push(e[f.id]);
    return {
      create(f) {
        return f.values[o] = i(f), 1;
      },
      update(f, u) {
        if (a && u.docChanged || c && (u.docChanged || u.selection) || ah(f, h)) {
          let d = i(f);
          if (l ? !Bd(d, f.values[o], r) : !r(d, f.values[o]))
            return f.values[o] = d, 1;
        }
        return 0;
      },
      reconfigure: (f, u) => {
        let d, O = u.config.address[s];
        if (O != null) {
          let p = Ol(u, O);
          if (this.dependencies.every((m) => m instanceof B ? u.facet(m) === f.facet(m) : m instanceof Ie ? u.field(m, !1) == f.field(m, !1) : !0) || (l ? Bd(d = i(f), p, r) : r(d = i(f), p)))
            return f.values[o] = p, 0;
        } else
          d = i(f);
        return f.values[o] = d, 1;
      }
    };
  }
}
function Bd(n, e, t) {
  if (n.length != e.length)
    return !1;
  for (let i = 0; i < n.length; i++)
    if (!t(n[i], e[i]))
      return !1;
  return !0;
}
function ah(n, e) {
  let t = !1;
  for (let i of e)
    Ur(n, i) & 1 && (t = !0);
  return t;
}
function vP(n, e, t) {
  let i = t.map((a) => n[a.id]), r = t.map((a) => a.type), s = i.filter((a) => !(a & 1)), o = n[e.id] >> 1;
  function l(a) {
    let c = [];
    for (let h = 0; h < i.length; h++) {
      let f = Ol(a, i[h]);
      if (r[h] == 2)
        for (let u of f)
          c.push(u);
      else
        c.push(f);
    }
    return e.combine(c);
  }
  return {
    create(a) {
      for (let c of i)
        Ur(a, c);
      return a.values[o] = l(a), 1;
    },
    update(a, c) {
      if (!ah(a, s))
        return 0;
      let h = l(a);
      return e.compare(h, a.values[o]) ? 0 : (a.values[o] = h, 1);
    },
    reconfigure(a, c) {
      let h = ah(a, i), f = c.config.facets[e.id], u = c.facet(e);
      if (f && !h && Uf(t, f))
        return a.values[o] = u, 0;
      let d = l(a);
      return e.compare(d, u) ? (a.values[o] = u, 0) : (a.values[o] = d, 1);
    }
  };
}
const eo = /* @__PURE__ */ B.define({ static: !0 });
class Ie {
  constructor(e, t, i, r, s) {
    this.id = e, this.createF = t, this.updateF = i, this.compareF = r, this.spec = s, this.provides = void 0;
  }
  /**
  Define a state field.
  */
  static define(e) {
    let t = new Ie(jf++, e.create, e.update, e.compare || ((i, r) => i === r), e);
    return e.provide && (t.provides = e.provide(t)), t;
  }
  create(e) {
    let t = e.facet(eo).find((i) => i.field == this);
    return (t?.create || this.createF)(e);
  }
  /**
  @internal
  */
  slot(e) {
    let t = e[this.id] >> 1;
    return {
      create: (i) => (i.values[t] = this.create(i), 1),
      update: (i, r) => {
        let s = i.values[t], o = this.updateF(s, r);
        return this.compareF(s, o) ? 0 : (i.values[t] = o, 1);
      },
      reconfigure: (i, r) => {
        let s = i.facet(eo), o = r.facet(eo), l;
        return (l = s.find((a) => a.field == this)) && l != o.find((a) => a.field == this) ? (i.values[t] = l.create(i), 1) : r.config.address[this.id] != null ? (i.values[t] = r.field(this), 0) : (i.values[t] = this.create(i), 1);
      }
    };
  }
  /**
  Returns an extension that enables this field and overrides the
  way it is initialized. Can be useful when you need to provide a
  non-default starting value for the field.
  */
  init(e) {
    return [this, eo.of({ field: this, create: e })];
  }
  /**
  State field instances can be used as
  [`Extension`](https://codemirror.net/6/docs/ref/#state.Extension) values to enable the field in a
  given state.
  */
  get extension() {
    return this;
  }
}
const li = { lowest: 4, low: 3, default: 2, high: 1, highest: 0 };
function vr(n) {
  return (e) => new k0(e, n);
}
const Xn = {
  /**
  The highest precedence level, for extensions that should end up
  near the start of the precedence ordering.
  */
  highest: /* @__PURE__ */ vr(li.highest),
  /**
  A higher-than-default precedence, for extensions that should
  come before those with default precedence.
  */
  high: /* @__PURE__ */ vr(li.high),
  /**
  The default precedence, which is also used for extensions
  without an explicit precedence.
  */
  default: /* @__PURE__ */ vr(li.default),
  /**
  A lower-than-default precedence.
  */
  low: /* @__PURE__ */ vr(li.low),
  /**
  The lowest precedence level. Meant for things that should end up
  near the end of the extension order.
  */
  lowest: /* @__PURE__ */ vr(li.lowest)
};
class k0 {
  constructor(e, t) {
    this.inner = e, this.prec = t;
  }
}
class ia {
  /**
  Create an instance of this compartment to add to your [state
  configuration](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions).
  */
  of(e) {
    return new ch(this, e);
  }
  /**
  Create an [effect](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) that
  reconfigures this compartment.
  */
  reconfigure(e) {
    return ia.reconfigure.of({ compartment: this, extension: e });
  }
  /**
  Get the current content of the compartment in the state, or
  `undefined` if it isn't present.
  */
  get(e) {
    return e.config.compartments.get(this);
  }
}
class ch {
  constructor(e, t) {
    this.compartment = e, this.inner = t;
  }
}
class dl {
  constructor(e, t, i, r, s, o) {
    for (this.base = e, this.compartments = t, this.dynamicSlots = i, this.address = r, this.staticValues = s, this.facets = o, this.statusTemplate = []; this.statusTemplate.length < i.length; )
      this.statusTemplate.push(
        0
        /* SlotStatus.Unresolved */
      );
  }
  staticFacet(e) {
    let t = this.address[e.id];
    return t == null ? e.default : this.staticValues[t >> 1];
  }
  static resolve(e, t, i) {
    let r = [], s = /* @__PURE__ */ Object.create(null), o = /* @__PURE__ */ new Map();
    for (let u of PP(e, t, o))
      u instanceof Ie ? r.push(u) : (s[u.facet.id] || (s[u.facet.id] = [])).push(u);
    let l = /* @__PURE__ */ Object.create(null), a = [], c = [];
    for (let u of r)
      l[u.id] = c.length << 1, c.push((d) => u.slot(d));
    let h = i?.config.facets;
    for (let u in s) {
      let d = s[u], O = d[0].facet, p = h && h[u] || [];
      if (d.every(
        (m) => m.type == 0
        /* Provider.Static */
      ))
        if (l[O.id] = a.length << 1 | 1, Uf(p, d))
          a.push(i.facet(O));
        else {
          let m = O.combine(d.map((y) => y.value));
          a.push(i && O.compare(m, i.facet(O)) ? i.facet(O) : m);
        }
      else {
        for (let m of d)
          m.type == 0 ? (l[m.id] = a.length << 1 | 1, a.push(m.value)) : (l[m.id] = c.length << 1, c.push((y) => m.dynamicSlot(y)));
        l[O.id] = c.length << 1, c.push((m) => vP(m, O, d));
      }
    }
    let f = c.map((u) => u(l));
    return new dl(e, o, f, l, a, s);
  }
}
function PP(n, e, t) {
  let i = [[], [], [], [], []], r = /* @__PURE__ */ new Map();
  function s(o, l) {
    let a = r.get(o);
    if (a != null) {
      if (a <= l)
        return;
      let c = i[a].indexOf(o);
      c > -1 && i[a].splice(c, 1), o instanceof ch && t.delete(o.compartment);
    }
    if (r.set(o, l), Array.isArray(o))
      for (let c of o)
        s(c, l);
    else if (o instanceof ch) {
      if (t.has(o.compartment))
        throw new RangeError("Duplicate use of compartment in extensions");
      let c = e.get(o.compartment) || o.inner;
      t.set(o.compartment, c), s(c, l);
    } else if (o instanceof k0)
      s(o.inner, o.prec);
    else if (o instanceof Ie)
      i[l].push(o), o.provides && s(o.provides, l);
    else if (o instanceof Mo)
      i[l].push(o), o.facet.extensions && s(o.facet.extensions, li.default);
    else {
      let c = o.extension;
      if (!c)
        throw new Error(`Unrecognized extension value in extension set (${o}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);
      s(c, l);
    }
  }
  return s(n, li.default), i.reduce((o, l) => o.concat(l));
}
function Ur(n, e) {
  if (e & 1)
    return 2;
  let t = e >> 1, i = n.status[t];
  if (i == 4)
    throw new Error("Cyclic dependency between fields and/or facets");
  if (i & 2)
    return i;
  n.status[t] = 4;
  let r = n.computeSlot(n, n.config.dynamicSlots[t]);
  return n.status[t] = 2 | r;
}
function Ol(n, e) {
  return e & 1 ? n.config.staticValues[e >> 1] : n.values[e >> 1];
}
const w0 = /* @__PURE__ */ B.define(), hh = /* @__PURE__ */ B.define({
  combine: (n) => n.some((e) => e),
  static: !0
}), v0 = /* @__PURE__ */ B.define({
  combine: (n) => n.length ? n[0] : void 0,
  static: !0
}), P0 = /* @__PURE__ */ B.define(), $0 = /* @__PURE__ */ B.define(), T0 = /* @__PURE__ */ B.define(), C0 = /* @__PURE__ */ B.define({
  combine: (n) => n.length ? n[0] : !1
});
class qn {
  /**
  @internal
  */
  constructor(e, t) {
    this.type = e, this.value = t;
  }
  /**
  Define a new type of annotation.
  */
  static define() {
    return new $P();
  }
}
class $P {
  /**
  Create an instance of this annotation.
  */
  of(e) {
    return new qn(this, e);
  }
}
class TP {
  /**
  @internal
  */
  constructor(e) {
    this.map = e;
  }
  /**
  Create a [state effect](https://codemirror.net/6/docs/ref/#state.StateEffect) instance of this
  type.
  */
  of(e) {
    return new te(this, e);
  }
}
class te {
  /**
  @internal
  */
  constructor(e, t) {
    this.type = e, this.value = t;
  }
  /**
  Map this effect through a position mapping. Will return
  `undefined` when that ends up deleting the effect.
  */
  map(e) {
    let t = this.type.map(this.value, e);
    return t === void 0 ? void 0 : t == this.value ? this : new te(this.type, t);
  }
  /**
  Tells you whether this effect object is of a given
  [type](https://codemirror.net/6/docs/ref/#state.StateEffectType).
  */
  is(e) {
    return this.type == e;
  }
  /**
  Define a new effect type. The type parameter indicates the type
  of values that his effect holds. It should be a type that
  doesn't include `undefined`, since that is used in
  [mapping](https://codemirror.net/6/docs/ref/#state.StateEffect.map) to indicate that an effect is
  removed.
  */
  static define(e = {}) {
    return new TP(e.map || ((t) => t));
  }
  /**
  Map an array of effects through a change set.
  */
  static mapEffects(e, t) {
    if (!e.length)
      return e;
    let i = [];
    for (let r of e) {
      let s = r.map(t);
      s && i.push(s);
    }
    return i;
  }
}
te.reconfigure = /* @__PURE__ */ te.define();
te.appendConfig = /* @__PURE__ */ te.define();
class Me {
  constructor(e, t, i, r, s, o) {
    this.startState = e, this.changes = t, this.selection = i, this.effects = r, this.annotations = s, this.scrollIntoView = o, this._doc = null, this._state = null, i && x0(i, t.newLength), s.some((l) => l.type == Me.time) || (this.annotations = s.concat(Me.time.of(Date.now())));
  }
  /**
  @internal
  */
  static create(e, t, i, r, s, o) {
    return new Me(e, t, i, r, s, o);
  }
  /**
  The new document produced by the transaction. Contrary to
  [`.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state)`.doc`, accessing this won't
  force the entire new state to be computed right away, so it is
  recommended that [transaction
  filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) use this getter
  when they need to look at the new document.
  */
  get newDoc() {
    return this._doc || (this._doc = this.changes.apply(this.startState.doc));
  }
  /**
  The new selection produced by the transaction. If
  [`this.selection`](https://codemirror.net/6/docs/ref/#state.Transaction.selection) is undefined,
  this will [map](https://codemirror.net/6/docs/ref/#state.EditorSelection.map) the start state's
  current selection through the changes made by the transaction.
  */
  get newSelection() {
    return this.selection || this.startState.selection.map(this.changes);
  }
  /**
  The new state created by the transaction. Computed on demand
  (but retained for subsequent access), so it is recommended not to
  access it in [transaction
  filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) when possible.
  */
  get state() {
    return this._state || this.startState.applyTransaction(this), this._state;
  }
  /**
  Get the value of the given annotation type, if any.
  */
  annotation(e) {
    for (let t of this.annotations)
      if (t.type == e)
        return t.value;
  }
  /**
  Indicates whether the transaction changed the document.
  */
  get docChanged() {
    return !this.changes.empty;
  }
  /**
  Indicates whether this transaction reconfigures the state
  (through a [configuration compartment](https://codemirror.net/6/docs/ref/#state.Compartment) or
  with a top-level configuration
  [effect](https://codemirror.net/6/docs/ref/#state.StateEffect^reconfigure).
  */
  get reconfigured() {
    return this.startState.config != this.state.config;
  }
  /**
  Returns true if the transaction has a [user
  event](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent) annotation that is equal to
  or more specific than `event`. For example, if the transaction
  has `"select.pointer"` as user event, `"select"` and
  `"select.pointer"` will match it.
  */
  isUserEvent(e) {
    let t = this.annotation(Me.userEvent);
    return !!(t && (t == e || t.length > e.length && t.slice(0, e.length) == e && t[e.length] == "."));
  }
}
Me.time = /* @__PURE__ */ qn.define();
Me.userEvent = /* @__PURE__ */ qn.define();
Me.addToHistory = /* @__PURE__ */ qn.define();
Me.remote = /* @__PURE__ */ qn.define();
function CP(n, e) {
  let t = [];
  for (let i = 0, r = 0; ; ) {
    let s, o;
    if (i < n.length && (r == e.length || e[r] >= n[i]))
      s = n[i++], o = n[i++];
    else if (r < e.length)
      s = e[r++], o = e[r++];
    else
      return t;
    !t.length || t[t.length - 1] < s ? t.push(s, o) : t[t.length - 1] < o && (t[t.length - 1] = o);
  }
}
function R0(n, e, t) {
  var i;
  let r, s, o;
  return t ? (r = e.changes, s = Be.empty(e.changes.length), o = n.changes.compose(e.changes)) : (r = e.changes.map(n.changes), s = n.changes.mapDesc(e.changes, !0), o = n.changes.compose(r)), {
    changes: o,
    selection: e.selection ? e.selection.map(s) : (i = n.selection) === null || i === void 0 ? void 0 : i.map(r),
    effects: te.mapEffects(n.effects, r).concat(te.mapEffects(e.effects, s)),
    annotations: n.annotations.length ? n.annotations.concat(e.annotations) : e.annotations,
    scrollIntoView: n.scrollIntoView || e.scrollIntoView
  };
}
function fh(n, e, t) {
  let i = e.selection, r = Ii(e.annotations);
  return e.userEvent && (r = r.concat(Me.userEvent.of(e.userEvent))), {
    changes: e.changes instanceof Be ? e.changes : Be.of(e.changes || [], t, n.facet(v0)),
    selection: i && (i instanceof $ ? i : $.single(i.anchor, i.head)),
    effects: Ii(e.effects),
    annotations: r,
    scrollIntoView: !!e.scrollIntoView
  };
}
function E0(n, e, t) {
  let i = fh(n, e.length ? e[0] : {}, n.doc.length);
  e.length && e[0].filter === !1 && (t = !1);
  for (let s = 1; s < e.length; s++) {
    e[s].filter === !1 && (t = !1);
    let o = !!e[s].sequential;
    i = R0(i, fh(n, e[s], o ? i.changes.newLength : n.doc.length), o);
  }
  let r = Me.create(n, i.changes, i.selection, i.effects, i.annotations, i.scrollIntoView);
  return EP(t ? RP(r) : r);
}
function RP(n) {
  let e = n.startState, t = !0;
  for (let r of e.facet(P0)) {
    let s = r(n);
    if (s === !1) {
      t = !1;
      break;
    }
    Array.isArray(s) && (t = t === !0 ? s : CP(t, s));
  }
  if (t !== !0) {
    let r, s;
    if (t === !1)
      s = n.changes.invertedDesc, r = Be.empty(e.doc.length);
    else {
      let o = n.changes.filter(t);
      r = o.changes, s = o.filtered.mapDesc(o.changes).invertedDesc;
    }
    n = Me.create(e, r, n.selection && n.selection.map(s), te.mapEffects(n.effects, s), n.annotations, n.scrollIntoView);
  }
  let i = e.facet($0);
  for (let r = i.length - 1; r >= 0; r--) {
    let s = i[r](n);
    s instanceof Me ? n = s : Array.isArray(s) && s.length == 1 && s[0] instanceof Me ? n = s[0] : n = E0(e, Ii(s), !1);
  }
  return n;
}
function EP(n) {
  let e = n.startState, t = e.facet(T0), i = n;
  for (let r = t.length - 1; r >= 0; r--) {
    let s = t[r](n);
    s && Object.keys(s).length && (i = R0(i, fh(e, s, n.changes.newLength), !0));
  }
  return i == n ? n : Me.create(e, n.changes, n.selection, i.effects, i.annotations, i.scrollIntoView);
}
const AP = [];
function Ii(n) {
  return n == null ? AP : Array.isArray(n) ? n : [n];
}
var Te = /* @__PURE__ */ function(n) {
  return n[n.Word = 0] = "Word", n[n.Space = 1] = "Space", n[n.Other = 2] = "Other", n;
}(Te || (Te = {}));
const _P = /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;
let uh;
try {
  uh = /* @__PURE__ */ new RegExp("[\\p{Alphabetic}\\p{Number}_]", "u");
} catch {
}
function XP(n) {
  if (uh)
    return uh.test(n);
  for (let e = 0; e < n.length; e++) {
    let t = n[e];
    if (/\w/.test(t) || t > "" && (t.toUpperCase() != t.toLowerCase() || _P.test(t)))
      return !0;
  }
  return !1;
}
function qP(n) {
  return (e) => {
    if (!/\S/.test(e))
      return Te.Space;
    if (XP(e))
      return Te.Word;
    for (let t = 0; t < n.length; t++)
      if (e.indexOf(n[t]) > -1)
        return Te.Word;
    return Te.Other;
  };
}
class ue {
  constructor(e, t, i, r, s, o) {
    this.config = e, this.doc = t, this.selection = i, this.values = r, this.status = e.statusTemplate.slice(), this.computeSlot = s, o && (o._state = this);
    for (let l = 0; l < this.config.dynamicSlots.length; l++)
      Ur(this, l << 1);
    this.computeSlot = null;
  }
  field(e, t = !0) {
    let i = this.config.address[e.id];
    if (i == null) {
      if (t)
        throw new RangeError("Field is not present in this state");
      return;
    }
    return Ur(this, i), Ol(this, i);
  }
  /**
  Create a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction) that updates this
  state. Any number of [transaction specs](https://codemirror.net/6/docs/ref/#state.TransactionSpec)
  can be passed. Unless
  [`sequential`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.sequential) is set, the
  [changes](https://codemirror.net/6/docs/ref/#state.TransactionSpec.changes) (if any) of each spec
  are assumed to start in the _current_ document (not the document
  produced by previous specs), and its
  [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) and
  [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) are assumed to refer
  to the document created by its _own_ changes. The resulting
  transaction contains the combined effect of all the different
  specs. For [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection), later
  specs take precedence over earlier ones.
  */
  update(...e) {
    return E0(this, e, !0);
  }
  /**
  @internal
  */
  applyTransaction(e) {
    let t = this.config, { base: i, compartments: r } = t;
    for (let l of e.effects)
      l.is(ia.reconfigure) ? (t && (r = /* @__PURE__ */ new Map(), t.compartments.forEach((a, c) => r.set(c, a)), t = null), r.set(l.value.compartment, l.value.extension)) : l.is(te.reconfigure) ? (t = null, i = l.value) : l.is(te.appendConfig) && (t = null, i = Ii(i).concat(l.value));
    let s;
    t ? s = e.startState.values.slice() : (t = dl.resolve(i, r, this), s = new ue(t, this.doc, this.selection, t.dynamicSlots.map(() => null), (a, c) => c.reconfigure(a, this), null).values);
    let o = e.startState.facet(hh) ? e.newSelection : e.newSelection.asSingle();
    new ue(t, e.newDoc, o, s, (l, a) => a.update(l, e), e);
  }
  /**
  Create a [transaction spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec) that
  replaces every selection range with the given content.
  */
  replaceSelection(e) {
    return typeof e == "string" && (e = this.toText(e)), this.changeByRange((t) => ({
      changes: { from: t.from, to: t.to, insert: e },
      range: $.cursor(t.from + e.length)
    }));
  }
  /**
  Create a set of changes and a new selection by running the given
  function for each range in the active selection. The function
  can return an optional set of changes (in the coordinate space
  of the start document), plus an updated range (in the coordinate
  space of the document produced by the call's own changes). This
  method will merge all the changes and ranges into a single
  changeset and selection, and return it as a [transaction
  spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec), which can be passed to
  [`update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).
  */
  changeByRange(e) {
    let t = this.selection, i = e(t.ranges[0]), r = this.changes(i.changes), s = [i.range], o = Ii(i.effects);
    for (let l = 1; l < t.ranges.length; l++) {
      let a = e(t.ranges[l]), c = this.changes(a.changes), h = c.map(r);
      for (let u = 0; u < l; u++)
        s[u] = s[u].map(h);
      let f = r.mapDesc(c, !0);
      s.push(a.range.map(f)), r = r.compose(h), o = te.mapEffects(o, h).concat(te.mapEffects(Ii(a.effects), f));
    }
    return {
      changes: r,
      selection: $.create(s, t.mainIndex),
      effects: o
    };
  }
  /**
  Create a [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet) from the given change
  description, taking the state's document length and line
  separator into account.
  */
  changes(e = []) {
    return e instanceof Be ? e : Be.of(e, this.doc.length, this.facet(ue.lineSeparator));
  }
  /**
  Using the state's [line
  separator](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator), create a
  [`Text`](https://codemirror.net/6/docs/ref/#state.Text) instance from the given string.
  */
  toText(e) {
    return de.of(e.split(this.facet(ue.lineSeparator) || sh));
  }
  /**
  Return the given range of the document as a string.
  */
  sliceDoc(e = 0, t = this.doc.length) {
    return this.doc.sliceString(e, t, this.lineBreak);
  }
  /**
  Get the value of a state [facet](https://codemirror.net/6/docs/ref/#state.Facet).
  */
  facet(e) {
    let t = this.config.address[e.id];
    return t == null ? e.default : (Ur(this, t), Ol(this, t));
  }
  /**
  Convert this state to a JSON-serializable object. When custom
  fields should be serialized, you can pass them in as an object
  mapping property names (in the resulting object, which should
  not use `doc` or `selection`) to fields.
  */
  toJSON(e) {
    let t = {
      doc: this.sliceDoc(),
      selection: this.selection.toJSON()
    };
    if (e)
      for (let i in e) {
        let r = e[i];
        r instanceof Ie && this.config.address[r.id] != null && (t[i] = r.spec.toJSON(this.field(e[i]), this));
      }
    return t;
  }
  /**
  Deserialize a state from its JSON representation. When custom
  fields should be deserialized, pass the same object you passed
  to [`toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) when serializing as
  third argument.
  */
  static fromJSON(e, t = {}, i) {
    if (!e || typeof e.doc != "string")
      throw new RangeError("Invalid JSON representation for EditorState");
    let r = [];
    if (i) {
      for (let s in i)
        if (Object.prototype.hasOwnProperty.call(e, s)) {
          let o = i[s], l = e[s];
          r.push(o.init((a) => o.spec.fromJSON(l, a)));
        }
    }
    return ue.create({
      doc: e.doc,
      selection: $.fromJSON(e.selection),
      extensions: t.extensions ? r.concat([t.extensions]) : r
    });
  }
  /**
  Create a new state. You'll usually only need this when
  initializing an editor—updated states are created by applying
  transactions.
  */
  static create(e = {}) {
    let t = dl.resolve(e.extensions || [], /* @__PURE__ */ new Map()), i = e.doc instanceof de ? e.doc : de.of((e.doc || "").split(t.staticFacet(ue.lineSeparator) || sh)), r = e.selection ? e.selection instanceof $ ? e.selection : $.single(e.selection.anchor, e.selection.head) : $.single(0);
    return x0(r, i.length), t.staticFacet(hh) || (r = r.asSingle()), new ue(t, i, r, t.dynamicSlots.map(() => null), (s, o) => o.create(s), null);
  }
  /**
  The size (in columns) of a tab in the document, determined by
  the [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) facet.
  */
  get tabSize() {
    return this.facet(ue.tabSize);
  }
  /**
  Get the proper [line-break](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator)
  string for this state.
  */
  get lineBreak() {
    return this.facet(ue.lineSeparator) || `
`;
  }
  /**
  Returns true when the editor is
  [configured](https://codemirror.net/6/docs/ref/#state.EditorState^readOnly) to be read-only.
  */
  get readOnly() {
    return this.facet(C0);
  }
  /**
  Look up a translation for the given phrase (via the
  [`phrases`](https://codemirror.net/6/docs/ref/#state.EditorState^phrases) facet), or return the
  original string if no translation is found.
  
  If additional arguments are passed, they will be inserted in
  place of markers like `$1` (for the first value) and `$2`, etc.
  A single `$` is equivalent to `$1`, and `$$` will produce a
  literal dollar sign.
  */
  phrase(e, ...t) {
    for (let i of this.facet(ue.phrases))
      if (Object.prototype.hasOwnProperty.call(i, e)) {
        e = i[e];
        break;
      }
    return t.length && (e = e.replace(/\$(\$|\d*)/g, (i, r) => {
      if (r == "$")
        return "$";
      let s = +(r || 1);
      return !s || s > t.length ? i : t[s - 1];
    })), e;
  }
  /**
  Find the values for a given language data field, provided by the
  the [`languageData`](https://codemirror.net/6/docs/ref/#state.EditorState^languageData) facet.
  
  Examples of language data fields are...
  
  - [`"commentTokens"`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) for specifying
    comment syntax.
  - [`"autocomplete"`](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion^config.override)
    for providing language-specific completion sources.
  - [`"wordChars"`](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) for adding
    characters that should be considered part of words in this
    language.
  - [`"closeBrackets"`](https://codemirror.net/6/docs/ref/#autocomplete.CloseBracketConfig) controls
    bracket closing behavior.
  */
  languageDataAt(e, t, i = -1) {
    let r = [];
    for (let s of this.facet(w0))
      for (let o of s(this, t, i))
        Object.prototype.hasOwnProperty.call(o, e) && r.push(o[e]);
    return r;
  }
  /**
  Return a function that can categorize strings (expected to
  represent a single [grapheme cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak))
  into one of:
  
   - Word (contains an alphanumeric character or a character
     explicitly listed in the local language's `"wordChars"`
     language data, which should be a string)
   - Space (contains only whitespace)
   - Other (anything else)
  */
  charCategorizer(e) {
    return qP(this.languageDataAt("wordChars", e).join(""));
  }
  /**
  Find the word at the given position, meaning the range
  containing all [word](https://codemirror.net/6/docs/ref/#state.CharCategory.Word) characters
  around it. If no word characters are adjacent to the position,
  this returns null.
  */
  wordAt(e) {
    let { text: t, from: i, length: r } = this.doc.lineAt(e), s = this.charCategorizer(e), o = e - i, l = e - i;
    for (; o > 0; ) {
      let a = Ge(t, o, !1);
      if (s(t.slice(a, o)) != Te.Word)
        break;
      o = a;
    }
    for (; l < r; ) {
      let a = Ge(t, l);
      if (s(t.slice(l, a)) != Te.Word)
        break;
      l = a;
    }
    return o == l ? null : $.range(o + i, l + i);
  }
}
ue.allowMultipleSelections = hh;
ue.tabSize = /* @__PURE__ */ B.define({
  combine: (n) => n.length ? n[0] : 4
});
ue.lineSeparator = v0;
ue.readOnly = C0;
ue.phrases = /* @__PURE__ */ B.define({
  compare(n, e) {
    let t = Object.keys(n), i = Object.keys(e);
    return t.length == i.length && t.every((r) => n[r] == e[r]);
  }
});
ue.languageData = w0;
ue.changeFilter = P0;
ue.transactionFilter = $0;
ue.transactionExtender = T0;
ia.reconfigure = /* @__PURE__ */ te.define();
function gn(n, e, t = {}) {
  let i = {};
  for (let r of n)
    for (let s of Object.keys(r)) {
      let o = r[s], l = i[s];
      if (l === void 0)
        i[s] = o;
      else if (!(l === o || o === void 0)) if (Object.hasOwnProperty.call(t, s))
        i[s] = t[s](l, o);
      else
        throw new Error("Config merge conflict for field " + s);
    }
  for (let r in e)
    i[r] === void 0 && (i[r] = e[r]);
  return i;
}
class xi {
  /**
  Compare this value with another value. Used when comparing
  rangesets. The default implementation compares by identity.
  Unless you are only creating a fixed number of unique instances
  of your value type, it is a good idea to implement this
  properly.
  */
  eq(e) {
    return this == e;
  }
  /**
  Create a [range](https://codemirror.net/6/docs/ref/#state.Range) with this value.
  */
  range(e, t = e) {
    return dh.create(e, t, this);
  }
}
xi.prototype.startSide = xi.prototype.endSide = 0;
xi.prototype.point = !1;
xi.prototype.mapMode = Ne.TrackDel;
let dh = class A0 {
  constructor(e, t, i) {
    this.from = e, this.to = t, this.value = i;
  }
  /**
  @internal
  */
  static create(e, t, i) {
    return new A0(e, t, i);
  }
};
function Oh(n, e) {
  return n.from - e.from || n.value.startSide - e.value.startSide;
}
class Yf {
  constructor(e, t, i, r) {
    this.from = e, this.to = t, this.value = i, this.maxPoint = r;
  }
  get length() {
    return this.to[this.to.length - 1];
  }
  // Find the index of the given position and side. Use the ranges'
  // `from` pos when `end == false`, `to` when `end == true`.
  findIndex(e, t, i, r = 0) {
    let s = i ? this.to : this.from;
    for (let o = r, l = s.length; ; ) {
      if (o == l)
        return o;
      let a = o + l >> 1, c = s[a] - e || (i ? this.value[a].endSide : this.value[a].startSide) - t;
      if (a == o)
        return c >= 0 ? o : l;
      c >= 0 ? l = a : o = a + 1;
    }
  }
  between(e, t, i, r) {
    for (let s = this.findIndex(t, -1e9, !0), o = this.findIndex(i, 1e9, !1, s); s < o; s++)
      if (r(this.from[s] + e, this.to[s] + e, this.value[s]) === !1)
        return !1;
  }
  map(e, t) {
    let i = [], r = [], s = [], o = -1, l = -1;
    for (let a = 0; a < this.value.length; a++) {
      let c = this.value[a], h = this.from[a] + e, f = this.to[a] + e, u, d;
      if (h == f) {
        let O = t.mapPos(h, c.startSide, c.mapMode);
        if (O == null || (u = d = O, c.startSide != c.endSide && (d = t.mapPos(h, c.endSide), d < u)))
          continue;
      } else if (u = t.mapPos(h, c.startSide), d = t.mapPos(f, c.endSide), u > d || u == d && c.startSide > 0 && c.endSide <= 0)
        continue;
      (d - u || c.endSide - c.startSide) < 0 || (o < 0 && (o = u), c.point && (l = Math.max(l, d - u)), i.push(c), r.push(u - o), s.push(d - o));
    }
    return { mapped: i.length ? new Yf(r, s, i, l) : null, pos: o };
  }
}
class Oe {
  constructor(e, t, i, r) {
    this.chunkPos = e, this.chunk = t, this.nextLayer = i, this.maxPoint = r;
  }
  /**
  @internal
  */
  static create(e, t, i, r) {
    return new Oe(e, t, i, r);
  }
  /**
  @internal
  */
  get length() {
    let e = this.chunk.length - 1;
    return e < 0 ? 0 : Math.max(this.chunkEnd(e), this.nextLayer.length);
  }
  /**
  The number of ranges in the set.
  */
  get size() {
    if (this.isEmpty)
      return 0;
    let e = this.nextLayer.size;
    for (let t of this.chunk)
      e += t.value.length;
    return e;
  }
  /**
  @internal
  */
  chunkEnd(e) {
    return this.chunkPos[e] + this.chunk[e].length;
  }
  /**
  Update the range set, optionally adding new ranges or filtering
  out existing ones.
  
  (Note: The type parameter is just there as a kludge to work
  around TypeScript variance issues that prevented `RangeSet<X>`
  from being a subtype of `RangeSet<Y>` when `X` is a subtype of
  `Y`.)
  */
  update(e) {
    let { add: t = [], sort: i = !1, filterFrom: r = 0, filterTo: s = this.length } = e, o = e.filter;
    if (t.length == 0 && !o)
      return this;
    if (i && (t = t.slice().sort(Oh)), this.isEmpty)
      return t.length ? Oe.of(t) : this;
    let l = new _0(this, null, -1).goto(0), a = 0, c = [], h = new Rn();
    for (; l.value || a < t.length; )
      if (a < t.length && (l.from - t[a].from || l.startSide - t[a].value.startSide) >= 0) {
        let f = t[a++];
        h.addInner(f.from, f.to, f.value) || c.push(f);
      } else l.rangeIndex == 1 && l.chunkIndex < this.chunk.length && (a == t.length || this.chunkEnd(l.chunkIndex) < t[a].from) && (!o || r > this.chunkEnd(l.chunkIndex) || s < this.chunkPos[l.chunkIndex]) && h.addChunk(this.chunkPos[l.chunkIndex], this.chunk[l.chunkIndex]) ? l.nextChunk() : ((!o || r > l.to || s < l.from || o(l.from, l.to, l.value)) && (h.addInner(l.from, l.to, l.value) || c.push(dh.create(l.from, l.to, l.value))), l.next());
    return h.finishInner(this.nextLayer.isEmpty && !c.length ? Oe.empty : this.nextLayer.update({ add: c, filter: o, filterFrom: r, filterTo: s }));
  }
  /**
  Map this range set through a set of changes, return the new set.
  */
  map(e) {
    if (e.empty || this.isEmpty)
      return this;
    let t = [], i = [], r = -1;
    for (let o = 0; o < this.chunk.length; o++) {
      let l = this.chunkPos[o], a = this.chunk[o], c = e.touchesRange(l, l + a.length);
      if (c === !1)
        r = Math.max(r, a.maxPoint), t.push(a), i.push(e.mapPos(l));
      else if (c === !0) {
        let { mapped: h, pos: f } = a.map(l, e);
        h && (r = Math.max(r, h.maxPoint), t.push(h), i.push(f));
      }
    }
    let s = this.nextLayer.map(e);
    return t.length == 0 ? s : new Oe(i, t, s || Oe.empty, r);
  }
  /**
  Iterate over the ranges that touch the region `from` to `to`,
  calling `f` for each. There is no guarantee that the ranges will
  be reported in any specific order. When the callback returns
  `false`, iteration stops.
  */
  between(e, t, i) {
    if (!this.isEmpty) {
      for (let r = 0; r < this.chunk.length; r++) {
        let s = this.chunkPos[r], o = this.chunk[r];
        if (t >= s && e <= s + o.length && o.between(s, e - s, t - s, i) === !1)
          return;
      }
      this.nextLayer.between(e, t, i);
    }
  }
  /**
  Iterate over the ranges in this set, in order, including all
  ranges that end at or after `from`.
  */
  iter(e = 0) {
    return ss.from([this]).goto(e);
  }
  /**
  @internal
  */
  get isEmpty() {
    return this.nextLayer == this;
  }
  /**
  Iterate over the ranges in a collection of sets, in order,
  starting from `from`.
  */
  static iter(e, t = 0) {
    return ss.from(e).goto(t);
  }
  /**
  Iterate over two groups of sets, calling methods on `comparator`
  to notify it of possible differences.
  */
  static compare(e, t, i, r, s = -1) {
    let o = e.filter((f) => f.maxPoint > 0 || !f.isEmpty && f.maxPoint >= s), l = t.filter((f) => f.maxPoint > 0 || !f.isEmpty && f.maxPoint >= s), a = Wd(o, l, i), c = new Pr(o, a, s), h = new Pr(l, a, s);
    i.iterGaps((f, u, d) => zd(c, f, h, u, d, r)), i.empty && i.length == 0 && zd(c, 0, h, 0, 0, r);
  }
  /**
  Compare the contents of two groups of range sets, returning true
  if they are equivalent in the given range.
  */
  static eq(e, t, i = 0, r) {
    r == null && (r = 999999999);
    let s = e.filter((h) => !h.isEmpty && t.indexOf(h) < 0), o = t.filter((h) => !h.isEmpty && e.indexOf(h) < 0);
    if (s.length != o.length)
      return !1;
    if (!s.length)
      return !0;
    let l = Wd(s, o), a = new Pr(s, l, 0).goto(i), c = new Pr(o, l, 0).goto(i);
    for (; ; ) {
      if (a.to != c.to || !ph(a.active, c.active) || a.point && (!c.point || !a.point.eq(c.point)))
        return !1;
      if (a.to > r)
        return !0;
      a.next(), c.next();
    }
  }
  /**
  Iterate over a group of range sets at the same time, notifying
  the iterator about the ranges covering every given piece of
  content. Returns the open count (see
  [`SpanIterator.span`](https://codemirror.net/6/docs/ref/#state.SpanIterator.span)) at the end
  of the iteration.
  */
  static spans(e, t, i, r, s = -1) {
    let o = new Pr(e, null, s).goto(t), l = t, a = o.openStart;
    for (; ; ) {
      let c = Math.min(o.to, i);
      if (o.point) {
        let h = o.activeForPoint(o.to), f = o.pointFrom < t ? h.length + 1 : o.point.startSide < 0 ? h.length : Math.min(h.length, a);
        r.point(l, c, o.point, h, f, o.pointRank), a = Math.min(o.openEnd(c), h.length);
      } else c > l && (r.span(l, c, o.active, a), a = o.openEnd(c));
      if (o.to > i)
        return a + (o.point && o.to > i ? 1 : 0);
      l = o.to, o.next();
    }
  }
  /**
  Create a range set for the given range or array of ranges. By
  default, this expects the ranges to be _sorted_ (by start
  position and, if two start at the same position,
  `value.startSide`). You can pass `true` as second argument to
  cause the method to sort them.
  */
  static of(e, t = !1) {
    let i = new Rn();
    for (let r of e instanceof dh ? [e] : t ? ZP(e) : e)
      i.add(r.from, r.to, r.value);
    return i.finish();
  }
  /**
  Join an array of range sets into a single set.
  */
  static join(e) {
    if (!e.length)
      return Oe.empty;
    let t = e[e.length - 1];
    for (let i = e.length - 2; i >= 0; i--)
      for (let r = e[i]; r != Oe.empty; r = r.nextLayer)
        t = new Oe(r.chunkPos, r.chunk, t, Math.max(r.maxPoint, t.maxPoint));
    return t;
  }
}
Oe.empty = /* @__PURE__ */ new Oe([], [], null, -1);
function ZP(n) {
  if (n.length > 1)
    for (let e = n[0], t = 1; t < n.length; t++) {
      let i = n[t];
      if (Oh(e, i) > 0)
        return n.slice().sort(Oh);
      e = i;
    }
  return n;
}
Oe.empty.nextLayer = Oe.empty;
class Rn {
  finishChunk(e) {
    this.chunks.push(new Yf(this.from, this.to, this.value, this.maxPoint)), this.chunkPos.push(this.chunkStart), this.chunkStart = -1, this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint), this.maxPoint = -1, e && (this.from = [], this.to = [], this.value = []);
  }
  /**
  Create an empty builder.
  */
  constructor() {
    this.chunks = [], this.chunkPos = [], this.chunkStart = -1, this.last = null, this.lastFrom = -1e9, this.lastTo = -1e9, this.from = [], this.to = [], this.value = [], this.maxPoint = -1, this.setMaxPoint = -1, this.nextLayer = null;
  }
  /**
  Add a range. Ranges should be added in sorted (by `from` and
  `value.startSide`) order.
  */
  add(e, t, i) {
    this.addInner(e, t, i) || (this.nextLayer || (this.nextLayer = new Rn())).add(e, t, i);
  }
  /**
  @internal
  */
  addInner(e, t, i) {
    let r = e - this.lastTo || i.startSide - this.last.endSide;
    if (r <= 0 && (e - this.lastFrom || i.startSide - this.last.startSide) < 0)
      throw new Error("Ranges must be added sorted by `from` position and `startSide`");
    return r < 0 ? !1 : (this.from.length == 250 && this.finishChunk(!0), this.chunkStart < 0 && (this.chunkStart = e), this.from.push(e - this.chunkStart), this.to.push(t - this.chunkStart), this.last = i, this.lastFrom = e, this.lastTo = t, this.value.push(i), i.point && (this.maxPoint = Math.max(this.maxPoint, t - e)), !0);
  }
  /**
  @internal
  */
  addChunk(e, t) {
    if ((e - this.lastTo || t.value[0].startSide - this.last.endSide) < 0)
      return !1;
    this.from.length && this.finishChunk(!0), this.setMaxPoint = Math.max(this.setMaxPoint, t.maxPoint), this.chunks.push(t), this.chunkPos.push(e);
    let i = t.value.length - 1;
    return this.last = t.value[i], this.lastFrom = t.from[i] + e, this.lastTo = t.to[i] + e, !0;
  }
  /**
  Finish the range set. Returns the new set. The builder can't be
  used anymore after this has been called.
  */
  finish() {
    return this.finishInner(Oe.empty);
  }
  /**
  @internal
  */
  finishInner(e) {
    if (this.from.length && this.finishChunk(!1), this.chunks.length == 0)
      return e;
    let t = Oe.create(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(e) : e, this.setMaxPoint);
    return this.from = null, t;
  }
}
function Wd(n, e, t) {
  let i = /* @__PURE__ */ new Map();
  for (let s of n)
    for (let o = 0; o < s.chunk.length; o++)
      s.chunk[o].maxPoint <= 0 && i.set(s.chunk[o], s.chunkPos[o]);
  let r = /* @__PURE__ */ new Set();
  for (let s of e)
    for (let o = 0; o < s.chunk.length; o++) {
      let l = i.get(s.chunk[o]);
      l != null && (t ? t.mapPos(l) : l) == s.chunkPos[o] && !t?.touchesRange(l, l + s.chunk[o].length) && r.add(s.chunk[o]);
    }
  return r;
}
class _0 {
  constructor(e, t, i, r = 0) {
    this.layer = e, this.skip = t, this.minPoint = i, this.rank = r;
  }
  get startSide() {
    return this.value ? this.value.startSide : 0;
  }
  get endSide() {
    return this.value ? this.value.endSide : 0;
  }
  goto(e, t = -1e9) {
    return this.chunkIndex = this.rangeIndex = 0, this.gotoInner(e, t, !1), this;
  }
  gotoInner(e, t, i) {
    for (; this.chunkIndex < this.layer.chunk.length; ) {
      let r = this.layer.chunk[this.chunkIndex];
      if (!(this.skip && this.skip.has(r) || this.layer.chunkEnd(this.chunkIndex) < e || r.maxPoint < this.minPoint))
        break;
      this.chunkIndex++, i = !1;
    }
    if (this.chunkIndex < this.layer.chunk.length) {
      let r = this.layer.chunk[this.chunkIndex].findIndex(e - this.layer.chunkPos[this.chunkIndex], t, !0);
      (!i || this.rangeIndex < r) && this.setRangeIndex(r);
    }
    this.next();
  }
  forward(e, t) {
    (this.to - e || this.endSide - t) < 0 && this.gotoInner(e, t, !0);
  }
  next() {
    for (; ; )
      if (this.chunkIndex == this.layer.chunk.length) {
        this.from = this.to = 1e9, this.value = null;
        break;
      } else {
        let e = this.layer.chunkPos[this.chunkIndex], t = this.layer.chunk[this.chunkIndex], i = e + t.from[this.rangeIndex];
        if (this.from = i, this.to = e + t.to[this.rangeIndex], this.value = t.value[this.rangeIndex], this.setRangeIndex(this.rangeIndex + 1), this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint)
          break;
      }
  }
  setRangeIndex(e) {
    if (e == this.layer.chunk[this.chunkIndex].value.length) {
      if (this.chunkIndex++, this.skip)
        for (; this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex]); )
          this.chunkIndex++;
      this.rangeIndex = 0;
    } else
      this.rangeIndex = e;
  }
  nextChunk() {
    this.chunkIndex++, this.rangeIndex = 0, this.next();
  }
  compare(e) {
    return this.from - e.from || this.startSide - e.startSide || this.rank - e.rank || this.to - e.to || this.endSide - e.endSide;
  }
}
class ss {
  constructor(e) {
    this.heap = e;
  }
  static from(e, t = null, i = -1) {
    let r = [];
    for (let s = 0; s < e.length; s++)
      for (let o = e[s]; !o.isEmpty; o = o.nextLayer)
        o.maxPoint >= i && r.push(new _0(o, t, i, s));
    return r.length == 1 ? r[0] : new ss(r);
  }
  get startSide() {
    return this.value ? this.value.startSide : 0;
  }
  goto(e, t = -1e9) {
    for (let i of this.heap)
      i.goto(e, t);
    for (let i = this.heap.length >> 1; i >= 0; i--)
      Va(this.heap, i);
    return this.next(), this;
  }
  forward(e, t) {
    for (let i of this.heap)
      i.forward(e, t);
    for (let i = this.heap.length >> 1; i >= 0; i--)
      Va(this.heap, i);
    (this.to - e || this.value.endSide - t) < 0 && this.next();
  }
  next() {
    if (this.heap.length == 0)
      this.from = this.to = 1e9, this.value = null, this.rank = -1;
    else {
      let e = this.heap[0];
      this.from = e.from, this.to = e.to, this.value = e.value, this.rank = e.rank, e.value && e.next(), Va(this.heap, 0);
    }
  }
}
function Va(n, e) {
  for (let t = n[e]; ; ) {
    let i = (e << 1) + 1;
    if (i >= n.length)
      break;
    let r = n[i];
    if (i + 1 < n.length && r.compare(n[i + 1]) >= 0 && (r = n[i + 1], i++), t.compare(r) < 0)
      break;
    n[i] = t, n[e] = r, e = i;
  }
}
class Pr {
  constructor(e, t, i) {
    this.minPoint = i, this.active = [], this.activeTo = [], this.activeRank = [], this.minActive = -1, this.point = null, this.pointFrom = 0, this.pointRank = 0, this.to = -1e9, this.endSide = 0, this.openStart = -1, this.cursor = ss.from(e, t, i);
  }
  goto(e, t = -1e9) {
    return this.cursor.goto(e, t), this.active.length = this.activeTo.length = this.activeRank.length = 0, this.minActive = -1, this.to = e, this.endSide = t, this.openStart = -1, this.next(), this;
  }
  forward(e, t) {
    for (; this.minActive > -1 && (this.activeTo[this.minActive] - e || this.active[this.minActive].endSide - t) < 0; )
      this.removeActive(this.minActive);
    this.cursor.forward(e, t);
  }
  removeActive(e) {
    to(this.active, e), to(this.activeTo, e), to(this.activeRank, e), this.minActive = Dd(this.active, this.activeTo);
  }
  addActive(e) {
    let t = 0, { value: i, to: r, rank: s } = this.cursor;
    for (; t < this.activeRank.length && (s - this.activeRank[t] || r - this.activeTo[t]) > 0; )
      t++;
    no(this.active, t, i), no(this.activeTo, t, r), no(this.activeRank, t, s), e && no(e, t, this.cursor.from), this.minActive = Dd(this.active, this.activeTo);
  }
  // After calling this, if `this.point` != null, the next range is a
  // point. Otherwise, it's a regular range, covered by `this.active`.
  next() {
    let e = this.to, t = this.point;
    this.point = null;
    let i = this.openStart < 0 ? [] : null;
    for (; ; ) {
      let r = this.minActive;
      if (r > -1 && (this.activeTo[r] - this.cursor.from || this.active[r].endSide - this.cursor.startSide) < 0) {
        if (this.activeTo[r] > e) {
          this.to = this.activeTo[r], this.endSide = this.active[r].endSide;
          break;
        }
        this.removeActive(r), i && to(i, r);
      } else if (this.cursor.value)
        if (this.cursor.from > e) {
          this.to = this.cursor.from, this.endSide = this.cursor.startSide;
          break;
        } else {
          let s = this.cursor.value;
          if (!s.point)
            this.addActive(i), this.cursor.next();
          else if (t && this.cursor.to == this.to && this.cursor.from < this.cursor.to)
            this.cursor.next();
          else {
            this.point = s, this.pointFrom = this.cursor.from, this.pointRank = this.cursor.rank, this.to = this.cursor.to, this.endSide = s.endSide, this.cursor.next(), this.forward(this.to, this.endSide);
            break;
          }
        }
      else {
        this.to = this.endSide = 1e9;
        break;
      }
    }
    if (i) {
      this.openStart = 0;
      for (let r = i.length - 1; r >= 0 && i[r] < e; r--)
        this.openStart++;
    }
  }
  activeForPoint(e) {
    if (!this.active.length)
      return this.active;
    let t = [];
    for (let i = this.active.length - 1; i >= 0 && !(this.activeRank[i] < this.pointRank); i--)
      (this.activeTo[i] > e || this.activeTo[i] == e && this.active[i].endSide >= this.point.endSide) && t.push(this.active[i]);
    return t.reverse();
  }
  openEnd(e) {
    let t = 0;
    for (let i = this.activeTo.length - 1; i >= 0 && this.activeTo[i] > e; i--)
      t++;
    return t;
  }
}
function zd(n, e, t, i, r, s) {
  n.goto(e), t.goto(i);
  let o = i + r, l = i, a = i - e;
  for (; ; ) {
    let c = n.to + a - t.to, h = c || n.endSide - t.endSide, f = h < 0 ? n.to + a : t.to, u = Math.min(f, o);
    if (n.point || t.point ? n.point && t.point && (n.point == t.point || n.point.eq(t.point)) && ph(n.activeForPoint(n.to), t.activeForPoint(t.to)) || s.comparePoint(l, u, n.point, t.point) : u > l && !ph(n.active, t.active) && s.compareRange(l, u, n.active, t.active), f > o)
      break;
    (c || n.openEnd != t.openEnd) && s.boundChange && s.boundChange(f), l = f, h <= 0 && n.next(), h >= 0 && t.next();
  }
}
function ph(n, e) {
  if (n.length != e.length)
    return !1;
  for (let t = 0; t < n.length; t++)
    if (n[t] != e[t] && !n[t].eq(e[t]))
      return !1;
  return !0;
}
function to(n, e) {
  for (let t = e, i = n.length - 1; t < i; t++)
    n[t] = n[t + 1];
  n.pop();
}
function no(n, e, t) {
  for (let i = n.length - 1; i >= e; i--)
    n[i + 1] = n[i];
  n[e] = t;
}
function Dd(n, e) {
  let t = -1, i = 1e9;
  for (let r = 0; r < e.length; r++)
    (e[r] - i || n[r].endSide - n[t].endSide) < 0 && (t = r, i = e[r]);
  return t;
}
function Wt(n, e, t = n.length) {
  let i = 0;
  for (let r = 0; r < t && r < n.length; )
    n.charCodeAt(r) == 9 ? (i += e - i % e, r++) : (i++, r = Ge(n, r));
  return i;
}
function mh(n, e, t, i) {
  for (let r = 0, s = 0; ; ) {
    if (s >= e)
      return r;
    if (r == n.length)
      break;
    s += n.charCodeAt(r) == 9 ? t - s % t : 1, r = Ge(n, r);
  }
  return i === !0 ? -1 : n.length;
}
const gh = "ͼ", Id = typeof Symbol > "u" ? "__" + gh : Symbol.for(gh), yh = typeof Symbol > "u" ? "__styleSet" + Math.floor(Math.random() * 1e8) : Symbol("styleSet"), jd = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : {};
class Nn {
  // :: (Object<Style>, ?{finish: ?(string) → string})
  // Create a style module from the given spec.
  //
  // When `finish` is given, it is called on regular (non-`@`)
  // selectors (after `&` expansion) to compute the final selector.
  constructor(e, t) {
    this.rules = [];
    let { finish: i } = t || {};
    function r(o) {
      return /^@/.test(o) ? [o] : o.split(/,\s*/);
    }
    function s(o, l, a, c) {
      let h = [], f = /^@(\w+)\b/.exec(o[0]), u = f && f[1] == "keyframes";
      if (f && l == null) return a.push(o[0] + ";");
      for (let d in l) {
        let O = l[d];
        if (/&/.test(d))
          s(
            d.split(/,\s*/).map((p) => o.map((m) => p.replace(/&/, m))).reduce((p, m) => p.concat(m)),
            O,
            a
          );
        else if (O && typeof O == "object") {
          if (!f) throw new RangeError("The value of a property (" + d + ") should be a primitive value.");
          s(r(d), O, h, u);
        } else O != null && h.push(d.replace(/_.*/, "").replace(/[A-Z]/g, (p) => "-" + p.toLowerCase()) + ": " + O + ";");
      }
      (h.length || u) && a.push((i && !f && !c ? o.map(i) : o).join(", ") + " {" + h.join(" ") + "}");
    }
    for (let o in e) s(r(o), e[o], this.rules);
  }
  // :: () → string
  // Returns a string containing the module's CSS rules.
  getRules() {
    return this.rules.join(`
`);
  }
  // :: () → string
  // Generate a new unique CSS class name.
  static newName() {
    let e = jd[Id] || 1;
    return jd[Id] = e + 1, gh + e.toString(36);
  }
  // :: (union<Document, ShadowRoot>, union<[StyleModule], StyleModule>, ?{nonce: ?string})
  //
  // Mount the given set of modules in the given DOM root, which ensures
  // that the CSS rules defined by the module are available in that
  // context.
  //
  // Rules are only added to the document once per root.
  //
  // Rule order will follow the order of the modules, so that rules from
  // modules later in the array take precedence of those from earlier
  // modules. If you call this function multiple times for the same root
  // in a way that changes the order of already mounted modules, the old
  // order will be changed.
  //
  // If a Content Security Policy nonce is provided, it is added to
  // the `<style>` tag generated by the library.
  static mount(e, t, i) {
    let r = e[yh], s = i && i.nonce;
    r ? s && r.setNonce(s) : r = new MP(e, s), r.mount(Array.isArray(t) ? t : [t], e);
  }
}
let Ud = /* @__PURE__ */ new Map();
class MP {
  constructor(e, t) {
    let i = e.ownerDocument || e, r = i.defaultView;
    if (!e.head && e.adoptedStyleSheets && r.CSSStyleSheet) {
      let s = Ud.get(i);
      if (s) return e[yh] = s;
      this.sheet = new r.CSSStyleSheet(), Ud.set(i, this);
    } else
      this.styleTag = i.createElement("style"), t && this.styleTag.setAttribute("nonce", t);
    this.modules = [], e[yh] = this;
  }
  mount(e, t) {
    let i = this.sheet, r = 0, s = 0;
    for (let o = 0; o < e.length; o++) {
      let l = e[o], a = this.modules.indexOf(l);
      if (a < s && a > -1 && (this.modules.splice(a, 1), s--, a = -1), a == -1) {
        if (this.modules.splice(s++, 0, l), i) for (let c = 0; c < l.rules.length; c++)
          i.insertRule(l.rules[c], r++);
      } else {
        for (; s < a; ) r += this.modules[s++].rules.length;
        r += l.rules.length, s++;
      }
    }
    if (i)
      t.adoptedStyleSheets.indexOf(this.sheet) < 0 && (t.adoptedStyleSheets = [this.sheet, ...t.adoptedStyleSheets]);
    else {
      let o = "";
      for (let a = 0; a < this.modules.length; a++)
        o += this.modules[a].getRules() + `
`;
      this.styleTag.textContent = o;
      let l = t.head || t;
      this.styleTag.parentNode != l && l.insertBefore(this.styleTag, l.firstChild);
    }
  }
  setNonce(e) {
    this.styleTag && this.styleTag.getAttribute("nonce") != e && this.styleTag.setAttribute("nonce", e);
  }
}
var Gn = {
  8: "Backspace",
  9: "Tab",
  10: "Enter",
  12: "NumLock",
  13: "Enter",
  16: "Shift",
  17: "Control",
  18: "Alt",
  20: "CapsLock",
  27: "Escape",
  32: " ",
  33: "PageUp",
  34: "PageDown",
  35: "End",
  36: "Home",
  37: "ArrowLeft",
  38: "ArrowUp",
  39: "ArrowRight",
  40: "ArrowDown",
  44: "PrintScreen",
  45: "Insert",
  46: "Delete",
  59: ";",
  61: "=",
  91: "Meta",
  92: "Meta",
  106: "*",
  107: "+",
  108: ",",
  109: "-",
  110: ".",
  111: "/",
  144: "NumLock",
  145: "ScrollLock",
  160: "Shift",
  161: "Shift",
  162: "Control",
  163: "Control",
  164: "Alt",
  165: "Alt",
  173: "-",
  186: ";",
  187: "=",
  188: ",",
  189: "-",
  190: ".",
  191: "/",
  192: "`",
  219: "[",
  220: "\\",
  221: "]",
  222: "'"
}, os = {
  48: ")",
  49: "!",
  50: "@",
  51: "#",
  52: "$",
  53: "%",
  54: "^",
  55: "&",
  56: "*",
  57: "(",
  59: ":",
  61: "+",
  173: "_",
  186: ":",
  187: "+",
  188: "<",
  189: "_",
  190: ">",
  191: "?",
  192: "~",
  219: "{",
  220: "|",
  221: "}",
  222: '"'
}, LP = typeof navigator < "u" && /Mac/.test(navigator.platform), VP = typeof navigator < "u" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);
for (var Ye = 0; Ye < 10; Ye++) Gn[48 + Ye] = Gn[96 + Ye] = String(Ye);
for (var Ye = 1; Ye <= 24; Ye++) Gn[Ye + 111] = "F" + Ye;
for (var Ye = 65; Ye <= 90; Ye++)
  Gn[Ye] = String.fromCharCode(Ye + 32), os[Ye] = String.fromCharCode(Ye);
for (var Ba in Gn) os.hasOwnProperty(Ba) || (os[Ba] = Gn[Ba]);
function BP(n) {
  var e = LP && n.metaKey && n.shiftKey && !n.ctrlKey && !n.altKey || VP && n.shiftKey && n.key && n.key.length == 1 || n.key == "Unidentified", t = !e && n.key || (n.shiftKey ? os : Gn)[n.keyCode] || n.key || "Unidentified";
  return t == "Esc" && (t = "Escape"), t == "Del" && (t = "Delete"), t == "Left" && (t = "ArrowLeft"), t == "Up" && (t = "ArrowUp"), t == "Right" && (t = "ArrowRight"), t == "Down" && (t = "ArrowDown"), t;
}
function be() {
  var n = arguments[0];
  typeof n == "string" && (n = document.createElement(n));
  var e = 1, t = arguments[1];
  if (t && typeof t == "object" && t.nodeType == null && !Array.isArray(t)) {
    for (var i in t) if (Object.prototype.hasOwnProperty.call(t, i)) {
      var r = t[i];
      typeof r == "string" ? n.setAttribute(i, r) : r != null && (n[i] = r);
    }
    e++;
  }
  for (; e < arguments.length; e++) X0(n, arguments[e]);
  return n;
}
function X0(n, e) {
  if (typeof e == "string")
    n.appendChild(document.createTextNode(e));
  else if (e != null) if (e.nodeType != null)
    n.appendChild(e);
  else if (Array.isArray(e))
    for (var t = 0; t < e.length; t++) X0(n, e[t]);
  else
    throw new RangeError("Unsupported child node: " + e);
}
function ls(n) {
  let e;
  return n.nodeType == 11 ? e = n.getSelection ? n : n.ownerDocument : e = n, e.getSelection();
}
function Sh(n, e) {
  return e ? n == e || n.contains(e.nodeType != 1 ? e.parentNode : e) : !1;
}
function Lo(n, e) {
  if (!e.anchorNode)
    return !1;
  try {
    return Sh(n, e.anchorNode);
  } catch {
    return !1;
  }
}
function as(n) {
  return n.nodeType == 3 ? wi(n, 0, n.nodeValue.length).getClientRects() : n.nodeType == 1 ? n.getClientRects() : [];
}
function Yr(n, e, t, i) {
  return t ? Yd(n, e, t, i, -1) || Yd(n, e, t, i, 1) : !1;
}
function ki(n) {
  for (var e = 0; ; e++)
    if (n = n.previousSibling, !n)
      return e;
}
function pl(n) {
  return n.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(n.nodeName);
}
function Yd(n, e, t, i, r) {
  for (; ; ) {
    if (n == t && e == i)
      return !0;
    if (e == (r < 0 ? 0 : pn(n))) {
      if (n.nodeName == "DIV")
        return !1;
      let s = n.parentNode;
      if (!s || s.nodeType != 1)
        return !1;
      e = ki(n) + (r < 0 ? 0 : 1), n = s;
    } else if (n.nodeType == 1) {
      if (n = n.childNodes[e + (r < 0 ? -1 : 0)], n.nodeType == 1 && n.contentEditable == "false")
        return !1;
      e = r < 0 ? pn(n) : 0;
    } else
      return !1;
  }
}
function pn(n) {
  return n.nodeType == 3 ? n.nodeValue.length : n.childNodes.length;
}
function ra(n, e) {
  let t = e ? n.left : n.right;
  return { left: t, right: t, top: n.top, bottom: n.bottom };
}
function WP(n) {
  let e = n.visualViewport;
  return e ? {
    left: 0,
    right: e.width,
    top: 0,
    bottom: e.height
  } : {
    left: 0,
    right: n.innerWidth,
    top: 0,
    bottom: n.innerHeight
  };
}
function q0(n, e) {
  let t = e.width / n.offsetWidth, i = e.height / n.offsetHeight;
  return (t > 0.995 && t < 1.005 || !isFinite(t) || Math.abs(e.width - n.offsetWidth) < 1) && (t = 1), (i > 0.995 && i < 1.005 || !isFinite(i) || Math.abs(e.height - n.offsetHeight) < 1) && (i = 1), { scaleX: t, scaleY: i };
}
function zP(n, e, t, i, r, s, o, l) {
  let a = n.ownerDocument, c = a.defaultView || window;
  for (let h = n, f = !1; h && !f; )
    if (h.nodeType == 1) {
      let u, d = h == a.body, O = 1, p = 1;
      if (d)
        u = WP(c);
      else {
        if (/^(fixed|sticky)$/.test(getComputedStyle(h).position) && (f = !0), h.scrollHeight <= h.clientHeight && h.scrollWidth <= h.clientWidth) {
          h = h.assignedSlot || h.parentNode;
          continue;
        }
        let S = h.getBoundingClientRect();
        ({ scaleX: O, scaleY: p } = q0(h, S)), u = {
          left: S.left,
          right: S.left + h.clientWidth * O,
          top: S.top,
          bottom: S.top + h.clientHeight * p
        };
      }
      let m = 0, y = 0;
      if (r == "nearest")
        e.top < u.top ? (y = e.top - (u.top + o), t > 0 && e.bottom > u.bottom + y && (y = e.bottom - u.bottom + o)) : e.bottom > u.bottom && (y = e.bottom - u.bottom + o, t < 0 && e.top - y < u.top && (y = e.top - (u.top + o)));
      else {
        let S = e.bottom - e.top, b = u.bottom - u.top;
        y = (r == "center" && S <= b ? e.top + S / 2 - b / 2 : r == "start" || r == "center" && t < 0 ? e.top - o : e.bottom - b + o) - u.top;
      }
      if (i == "nearest" ? e.left < u.left ? (m = e.left - (u.left + s), t > 0 && e.right > u.right + m && (m = e.right - u.right + s)) : e.right > u.right && (m = e.right - u.right + s, t < 0 && e.left < u.left + m && (m = e.left - (u.left + s))) : m = (i == "center" ? e.left + (e.right - e.left) / 2 - (u.right - u.left) / 2 : i == "start" == l ? e.left - s : e.right - (u.right - u.left) + s) - u.left, m || y)
        if (d)
          c.scrollBy(m, y);
        else {
          let S = 0, b = 0;
          if (y) {
            let w = h.scrollTop;
            h.scrollTop += y / p, b = (h.scrollTop - w) * p;
          }
          if (m) {
            let w = h.scrollLeft;
            h.scrollLeft += m / O, S = (h.scrollLeft - w) * O;
          }
          e = {
            left: e.left - S,
            top: e.top - b,
            right: e.right - S,
            bottom: e.bottom - b
          }, S && Math.abs(S - m) < 1 && (i = "nearest"), b && Math.abs(b - y) < 1 && (r = "nearest");
        }
      if (d)
        break;
      (e.top < u.top || e.bottom > u.bottom || e.left < u.left || e.right > u.right) && (e = {
        left: Math.max(e.left, u.left),
        right: Math.min(e.right, u.right),
        top: Math.max(e.top, u.top),
        bottom: Math.min(e.bottom, u.bottom)
      }), h = h.assignedSlot || h.parentNode;
    } else if (h.nodeType == 11)
      h = h.host;
    else
      break;
}
function DP(n) {
  let e = n.ownerDocument, t, i;
  for (let r = n.parentNode; r && !(r == e.body || t && i); )
    if (r.nodeType == 1)
      !i && r.scrollHeight > r.clientHeight && (i = r), !t && r.scrollWidth > r.clientWidth && (t = r), r = r.assignedSlot || r.parentNode;
    else if (r.nodeType == 11)
      r = r.host;
    else
      break;
  return { x: t, y: i };
}
class IP {
  constructor() {
    this.anchorNode = null, this.anchorOffset = 0, this.focusNode = null, this.focusOffset = 0;
  }
  eq(e) {
    return this.anchorNode == e.anchorNode && this.anchorOffset == e.anchorOffset && this.focusNode == e.focusNode && this.focusOffset == e.focusOffset;
  }
  setRange(e) {
    let { anchorNode: t, focusNode: i } = e;
    this.set(t, Math.min(e.anchorOffset, t ? pn(t) : 0), i, Math.min(e.focusOffset, i ? pn(i) : 0));
  }
  set(e, t, i, r) {
    this.anchorNode = e, this.anchorOffset = t, this.focusNode = i, this.focusOffset = r;
  }
}
let Ri = null;
function Z0(n) {
  if (n.setActive)
    return n.setActive();
  if (Ri)
    return n.focus(Ri);
  let e = [];
  for (let t = n; t && (e.push(t, t.scrollTop, t.scrollLeft), t != t.ownerDocument); t = t.parentNode)
    ;
  if (n.focus(Ri == null ? {
    get preventScroll() {
      return Ri = { preventScroll: !0 }, !0;
    }
  } : void 0), !Ri) {
    Ri = !1;
    for (let t = 0; t < e.length; ) {
      let i = e[t++], r = e[t++], s = e[t++];
      i.scrollTop != r && (i.scrollTop = r), i.scrollLeft != s && (i.scrollLeft = s);
    }
  }
}
let Nd;
function wi(n, e, t = e) {
  let i = Nd || (Nd = document.createRange());
  return i.setEnd(n, t), i.setStart(n, e), i;
}
function ji(n, e, t, i) {
  let r = { key: e, code: e, keyCode: t, which: t, cancelable: !0 };
  i && ({ altKey: r.altKey, ctrlKey: r.ctrlKey, shiftKey: r.shiftKey, metaKey: r.metaKey } = i);
  let s = new KeyboardEvent("keydown", r);
  s.synthetic = !0, n.dispatchEvent(s);
  let o = new KeyboardEvent("keyup", r);
  return o.synthetic = !0, n.dispatchEvent(o), s.defaultPrevented || o.defaultPrevented;
}
function jP(n) {
  for (; n; ) {
    if (n && (n.nodeType == 9 || n.nodeType == 11 && n.host))
      return n;
    n = n.assignedSlot || n.parentNode;
  }
  return null;
}
function M0(n) {
  for (; n.attributes.length; )
    n.removeAttributeNode(n.attributes[0]);
}
function UP(n, e) {
  let t = e.focusNode, i = e.focusOffset;
  if (!t || e.anchorNode != t || e.anchorOffset != i)
    return !1;
  for (i = Math.min(i, pn(t)); ; )
    if (i) {
      if (t.nodeType != 1)
        return !1;
      let r = t.childNodes[i - 1];
      r.contentEditable == "false" ? i-- : (t = r, i = pn(t));
    } else {
      if (t == n)
        return !0;
      i = ki(t), t = t.parentNode;
    }
}
function L0(n) {
  return n.scrollTop > Math.max(1, n.scrollHeight - n.clientHeight - 4);
}
function V0(n, e) {
  for (let t = n, i = e; ; ) {
    if (t.nodeType == 3 && i > 0)
      return { node: t, offset: i };
    if (t.nodeType == 1 && i > 0) {
      if (t.contentEditable == "false")
        return null;
      t = t.childNodes[i - 1], i = pn(t);
    } else if (t.parentNode && !pl(t))
      i = ki(t), t = t.parentNode;
    else
      return null;
  }
}
function B0(n, e) {
  for (let t = n, i = e; ; ) {
    if (t.nodeType == 3 && i < t.nodeValue.length)
      return { node: t, offset: i };
    if (t.nodeType == 1 && i < t.childNodes.length) {
      if (t.contentEditable == "false")
        return null;
      t = t.childNodes[i], i = 0;
    } else if (t.parentNode && !pl(t))
      i = ki(t) + 1, t = t.parentNode;
    else
      return null;
  }
}
class Je {
  constructor(e, t, i = !0) {
    this.node = e, this.offset = t, this.precise = i;
  }
  static before(e, t) {
    return new Je(e.parentNode, ki(e), t);
  }
  static after(e, t) {
    return new Je(e.parentNode, ki(e) + 1, t);
  }
}
const Nf = [];
class ke {
  constructor() {
    this.parent = null, this.dom = null, this.flags = 2;
  }
  get overrideDOMText() {
    return null;
  }
  get posAtStart() {
    return this.parent ? this.parent.posBefore(this) : 0;
  }
  get posAtEnd() {
    return this.posAtStart + this.length;
  }
  posBefore(e) {
    let t = this.posAtStart;
    for (let i of this.children) {
      if (i == e)
        return t;
      t += i.length + i.breakAfter;
    }
    throw new RangeError("Invalid child in posBefore");
  }
  posAfter(e) {
    return this.posBefore(e) + e.length;
  }
  sync(e, t) {
    if (this.flags & 2) {
      let i = this.dom, r = null, s;
      for (let o of this.children) {
        if (o.flags & 7) {
          if (!o.dom && (s = r ? r.nextSibling : i.firstChild)) {
            let l = ke.get(s);
            (!l || !l.parent && l.canReuseDOM(o)) && o.reuseDOM(s);
          }
          o.sync(e, t), o.flags &= -8;
        }
        if (s = r ? r.nextSibling : i.firstChild, t && !t.written && t.node == i && s != o.dom && (t.written = !0), o.dom.parentNode == i)
          for (; s && s != o.dom; )
            s = Gd(s);
        else
          i.insertBefore(o.dom, s);
        r = o.dom;
      }
      for (s = r ? r.nextSibling : i.firstChild, s && t && t.node == i && (t.written = !0); s; )
        s = Gd(s);
    } else if (this.flags & 1)
      for (let i of this.children)
        i.flags & 7 && (i.sync(e, t), i.flags &= -8);
  }
  reuseDOM(e) {
  }
  localPosFromDOM(e, t) {
    let i;
    if (e == this.dom)
      i = this.dom.childNodes[t];
    else {
      let r = pn(e) == 0 ? 0 : t == 0 ? -1 : 1;
      for (; ; ) {
        let s = e.parentNode;
        if (s == this.dom)
          break;
        r == 0 && s.firstChild != s.lastChild && (e == s.firstChild ? r = -1 : r = 1), e = s;
      }
      r < 0 ? i = e : i = e.nextSibling;
    }
    if (i == this.dom.firstChild)
      return 0;
    for (; i && !ke.get(i); )
      i = i.nextSibling;
    if (!i)
      return this.length;
    for (let r = 0, s = 0; ; r++) {
      let o = this.children[r];
      if (o.dom == i)
        return s;
      s += o.length + o.breakAfter;
    }
  }
  domBoundsAround(e, t, i = 0) {
    let r = -1, s = -1, o = -1, l = -1;
    for (let a = 0, c = i, h = i; a < this.children.length; a++) {
      let f = this.children[a], u = c + f.length;
      if (c < e && u > t)
        return f.domBoundsAround(e, t, c);
      if (u >= e && r == -1 && (r = a, s = c), c > t && f.dom.parentNode == this.dom) {
        o = a, l = h;
        break;
      }
      h = u, c = u + f.breakAfter;
    }
    return {
      from: s,
      to: l < 0 ? i + this.length : l,
      startDOM: (r ? this.children[r - 1].dom.nextSibling : null) || this.dom.firstChild,
      endDOM: o < this.children.length && o >= 0 ? this.children[o].dom : null
    };
  }
  markDirty(e = !1) {
    this.flags |= 2, this.markParentsDirty(e);
  }
  markParentsDirty(e) {
    for (let t = this.parent; t; t = t.parent) {
      if (e && (t.flags |= 2), t.flags & 1)
        return;
      t.flags |= 1, e = !1;
    }
  }
  setParent(e) {
    this.parent != e && (this.parent = e, this.flags & 7 && this.markParentsDirty(!0));
  }
  setDOM(e) {
    this.dom != e && (this.dom && (this.dom.cmView = null), this.dom = e, e.cmView = this);
  }
  get rootView() {
    for (let e = this; ; ) {
      let t = e.parent;
      if (!t)
        return e;
      e = t;
    }
  }
  replaceChildren(e, t, i = Nf) {
    this.markDirty();
    for (let r = e; r < t; r++) {
      let s = this.children[r];
      s.parent == this && i.indexOf(s) < 0 && s.destroy();
    }
    i.length < 250 ? this.children.splice(e, t - e, ...i) : this.children = [].concat(this.children.slice(0, e), i, this.children.slice(t));
    for (let r = 0; r < i.length; r++)
      i[r].setParent(this);
  }
  ignoreMutation(e) {
    return !1;
  }
  ignoreEvent(e) {
    return !1;
  }
  childCursor(e = this.length) {
    return new W0(this.children, e, this.children.length);
  }
  childPos(e, t = 1) {
    return this.childCursor().findPos(e, t);
  }
  toString() {
    let e = this.constructor.name.replace("View", "");
    return e + (this.children.length ? "(" + this.children.join() + ")" : this.length ? "[" + (e == "Text" ? this.text : this.length) + "]" : "") + (this.breakAfter ? "#" : "");
  }
  static get(e) {
    return e.cmView;
  }
  get isEditable() {
    return !0;
  }
  get isWidget() {
    return !1;
  }
  get isHidden() {
    return !1;
  }
  merge(e, t, i, r, s, o) {
    return !1;
  }
  become(e) {
    return !1;
  }
  canReuseDOM(e) {
    return e.constructor == this.constructor && !((this.flags | e.flags) & 8);
  }
  // When this is a zero-length view with a side, this should return a
  // number <= 0 to indicate it is before its position, or a
  // number > 0 when after its position.
  getSide() {
    return 0;
  }
  destroy() {
    for (let e of this.children)
      e.parent == this && e.destroy();
    this.parent = null;
  }
}
ke.prototype.breakAfter = 0;
function Gd(n) {
  let e = n.nextSibling;
  return n.parentNode.removeChild(n), e;
}
class W0 {
  constructor(e, t, i) {
    this.children = e, this.pos = t, this.i = i, this.off = 0;
  }
  findPos(e, t = 1) {
    for (; ; ) {
      if (e > this.pos || e == this.pos && (t > 0 || this.i == 0 || this.children[this.i - 1].breakAfter))
        return this.off = e - this.pos, this;
      let i = this.children[--this.i];
      this.pos -= i.length + i.breakAfter;
    }
  }
}
function z0(n, e, t, i, r, s, o, l, a) {
  let { children: c } = n, h = c.length ? c[e] : null, f = s.length ? s[s.length - 1] : null, u = f ? f.breakAfter : o;
  if (!(e == i && h && !o && !u && s.length < 2 && h.merge(t, r, s.length ? f : null, t == 0, l, a))) {
    if (i < c.length) {
      let d = c[i];
      d && (r < d.length || d.breakAfter && f?.breakAfter) ? (e == i && (d = d.split(r), r = 0), !u && f && d.merge(0, r, f, !0, 0, a) ? s[s.length - 1] = d : ((r || d.children.length && !d.children[0].length) && d.merge(0, r, null, !1, 0, a), s.push(d))) : d?.breakAfter && (f ? f.breakAfter = 1 : o = 1), i++;
    }
    for (h && (h.breakAfter = o, t > 0 && (!o && s.length && h.merge(t, h.length, s[0], !1, l, 0) ? h.breakAfter = s.shift().breakAfter : (t < h.length || h.children.length && h.children[h.children.length - 1].length == 0) && h.merge(t, h.length, null, !1, l, 0), e++)); e < i && s.length; )
      if (c[i - 1].become(s[s.length - 1]))
        i--, s.pop(), a = s.length ? 0 : l;
      else if (c[e].become(s[0]))
        e++, s.shift(), l = s.length ? 0 : a;
      else
        break;
    !s.length && e && i < c.length && !c[e - 1].breakAfter && c[i].merge(0, 0, c[e - 1], !1, l, a) && e--, (e < i || s.length) && n.replaceChildren(e, i, s);
  }
}
function D0(n, e, t, i, r, s) {
  let o = n.childCursor(), { i: l, off: a } = o.findPos(t, 1), { i: c, off: h } = o.findPos(e, -1), f = e - t;
  for (let u of i)
    f += u.length;
  n.length += f, z0(n, c, h, l, a, i, 0, r, s);
}
let at = typeof navigator < "u" ? navigator : { userAgent: "", vendor: "", platform: "" }, bh = typeof document < "u" ? document : { documentElement: { style: {} } };
const Qh = /* @__PURE__ */ /Edge\/(\d+)/.exec(at.userAgent), I0 = /* @__PURE__ */ /MSIE \d/.test(at.userAgent), xh = /* @__PURE__ */ /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(at.userAgent), sa = !!(I0 || xh || Qh), Fd = !sa && /* @__PURE__ */ /gecko\/(\d+)/i.test(at.userAgent), Wa = !sa && /* @__PURE__ */ /Chrome\/(\d+)/.exec(at.userAgent), YP = "webkitFontSmoothing" in bh.documentElement.style, j0 = !sa && /* @__PURE__ */ /Apple Computer/.test(at.vendor), Hd = j0 && (/* @__PURE__ */ /Mobile\/\w+/.test(at.userAgent) || at.maxTouchPoints > 2);
var W = {
  mac: Hd || /* @__PURE__ */ /Mac/.test(at.platform),
  windows: /* @__PURE__ */ /Win/.test(at.platform),
  linux: /* @__PURE__ */ /Linux|X11/.test(at.platform),
  ie: sa,
  ie_version: I0 ? bh.documentMode || 6 : xh ? +xh[1] : Qh ? +Qh[1] : 0,
  gecko: Fd,
  gecko_version: Fd ? +(/* @__PURE__ */ /Firefox\/(\d+)/.exec(at.userAgent) || [0, 0])[1] : 0,
  chrome: !!Wa,
  chrome_version: Wa ? +Wa[1] : 0,
  ios: Hd,
  android: /* @__PURE__ */ /Android\b/.test(at.userAgent),
  safari: j0,
  webkit_version: YP ? +(/* @__PURE__ */ /\bAppleWebKit\/(\d+)/.exec(at.userAgent) || [0, 0])[1] : 0,
  tabSize: bh.documentElement.style.tabSize != null ? "tab-size" : "-moz-tab-size"
};
const NP = 256;
class zt extends ke {
  constructor(e) {
    super(), this.text = e;
  }
  get length() {
    return this.text.length;
  }
  createDOM(e) {
    this.setDOM(e || document.createTextNode(this.text));
  }
  sync(e, t) {
    this.dom || this.createDOM(), this.dom.nodeValue != this.text && (t && t.node == this.dom && (t.written = !0), this.dom.nodeValue = this.text);
  }
  reuseDOM(e) {
    e.nodeType == 3 && this.createDOM(e);
  }
  merge(e, t, i) {
    return this.flags & 8 || i && (!(i instanceof zt) || this.length - (t - e) + i.length > NP || i.flags & 8) ? !1 : (this.text = this.text.slice(0, e) + (i ? i.text : "") + this.text.slice(t), this.markDirty(), !0);
  }
  split(e) {
    let t = new zt(this.text.slice(e));
    return this.text = this.text.slice(0, e), this.markDirty(), t.flags |= this.flags & 8, t;
  }
  localPosFromDOM(e, t) {
    return e == this.dom ? t : t ? this.text.length : 0;
  }
  domAtPos(e) {
    return new Je(this.dom, e);
  }
  domBoundsAround(e, t, i) {
    return { from: i, to: i + this.length, startDOM: this.dom, endDOM: this.dom.nextSibling };
  }
  coordsAt(e, t) {
    return GP(this.dom, e, t);
  }
}
class En extends ke {
  constructor(e, t = [], i = 0) {
    super(), this.mark = e, this.children = t, this.length = i;
    for (let r of t)
      r.setParent(this);
  }
  setAttrs(e) {
    if (M0(e), this.mark.class && (e.className = this.mark.class), this.mark.attrs)
      for (let t in this.mark.attrs)
        e.setAttribute(t, this.mark.attrs[t]);
    return e;
  }
  canReuseDOM(e) {
    return super.canReuseDOM(e) && !((this.flags | e.flags) & 8);
  }
  reuseDOM(e) {
    e.nodeName == this.mark.tagName.toUpperCase() && (this.setDOM(e), this.flags |= 6);
  }
  sync(e, t) {
    this.dom ? this.flags & 4 && this.setAttrs(this.dom) : this.setDOM(this.setAttrs(document.createElement(this.mark.tagName))), super.sync(e, t);
  }
  merge(e, t, i, r, s, o) {
    return i && (!(i instanceof En && i.mark.eq(this.mark)) || e && s <= 0 || t < this.length && o <= 0) ? !1 : (D0(this, e, t, i ? i.children.slice() : [], s - 1, o - 1), this.markDirty(), !0);
  }
  split(e) {
    let t = [], i = 0, r = -1, s = 0;
    for (let l of this.children) {
      let a = i + l.length;
      a > e && t.push(i < e ? l.split(e - i) : l), r < 0 && i >= e && (r = s), i = a, s++;
    }
    let o = this.length - e;
    return this.length = e, r > -1 && (this.children.length = r, this.markDirty()), new En(this.mark, t, o);
  }
  domAtPos(e) {
    return U0(this, e);
  }
  coordsAt(e, t) {
    return N0(this, e, t);
  }
}
function GP(n, e, t) {
  let i = n.nodeValue.length;
  e > i && (e = i);
  let r = e, s = e, o = 0;
  e == 0 && t < 0 || e == i && t >= 0 ? W.chrome || W.gecko || (e ? (r--, o = 1) : s < i && (s++, o = -1)) : t < 0 ? r-- : s < i && s++;
  let l = wi(n, r, s).getClientRects();
  if (!l.length)
    return null;
  let a = l[(o ? o < 0 : t >= 0) ? 0 : l.length - 1];
  return W.safari && !o && a.width == 0 && (a = Array.prototype.find.call(l, (c) => c.width) || a), o ? ra(a, o < 0) : a || null;
}
class Dn extends ke {
  static create(e, t, i) {
    return new Dn(e, t, i);
  }
  constructor(e, t, i) {
    super(), this.widget = e, this.length = t, this.side = i, this.prevWidget = null;
  }
  split(e) {
    let t = Dn.create(this.widget, this.length - e, this.side);
    return this.length -= e, t;
  }
  sync(e) {
    (!this.dom || !this.widget.updateDOM(this.dom, e)) && (this.dom && this.prevWidget && this.prevWidget.destroy(this.dom), this.prevWidget = null, this.setDOM(this.widget.toDOM(e)), this.widget.editable || (this.dom.contentEditable = "false"));
  }
  getSide() {
    return this.side;
  }
  merge(e, t, i, r, s, o) {
    return i && (!(i instanceof Dn) || !this.widget.compare(i.widget) || e > 0 && s <= 0 || t < this.length && o <= 0) ? !1 : (this.length = e + (i ? i.length : 0) + (this.length - t), !0);
  }
  become(e) {
    return e instanceof Dn && e.side == this.side && this.widget.constructor == e.widget.constructor ? (this.widget.compare(e.widget) || this.markDirty(!0), this.dom && !this.prevWidget && (this.prevWidget = this.widget), this.widget = e.widget, this.length = e.length, !0) : !1;
  }
  ignoreMutation() {
    return !0;
  }
  ignoreEvent(e) {
    return this.widget.ignoreEvent(e);
  }
  get overrideDOMText() {
    if (this.length == 0)
      return de.empty;
    let e = this;
    for (; e.parent; )
      e = e.parent;
    let { view: t } = e, i = t && t.state.doc, r = this.posAtStart;
    return i ? i.slice(r, r + this.length) : de.empty;
  }
  domAtPos(e) {
    return (this.length ? e == 0 : this.side > 0) ? Je.before(this.dom) : Je.after(this.dom, e == this.length);
  }
  domBoundsAround() {
    return null;
  }
  coordsAt(e, t) {
    let i = this.widget.coordsAt(this.dom, e, t);
    if (i)
      return i;
    let r = this.dom.getClientRects(), s = null;
    if (!r.length)
      return null;
    let o = this.side ? this.side < 0 : e > 0;
    for (let l = o ? r.length - 1 : 0; s = r[l], !(e > 0 ? l == 0 : l == r.length - 1 || s.top < s.bottom); l += o ? -1 : 1)
      ;
    return ra(s, !o);
  }
  get isEditable() {
    return !1;
  }
  get isWidget() {
    return !0;
  }
  get isHidden() {
    return this.widget.isHidden;
  }
  destroy() {
    super.destroy(), this.dom && this.widget.destroy(this.dom);
  }
}
class Ki extends ke {
  constructor(e) {
    super(), this.side = e;
  }
  get length() {
    return 0;
  }
  merge() {
    return !1;
  }
  become(e) {
    return e instanceof Ki && e.side == this.side;
  }
  split() {
    return new Ki(this.side);
  }
  sync() {
    if (!this.dom) {
      let e = document.createElement("img");
      e.className = "cm-widgetBuffer", e.setAttribute("aria-hidden", "true"), this.setDOM(e);
    }
  }
  getSide() {
    return this.side;
  }
  domAtPos(e) {
    return this.side > 0 ? Je.before(this.dom) : Je.after(this.dom);
  }
  localPosFromDOM() {
    return 0;
  }
  domBoundsAround() {
    return null;
  }
  coordsAt(e) {
    return this.dom.getBoundingClientRect();
  }
  get overrideDOMText() {
    return de.empty;
  }
  get isHidden() {
    return !0;
  }
}
zt.prototype.children = Dn.prototype.children = Ki.prototype.children = Nf;
function U0(n, e) {
  let t = n.dom, { children: i } = n, r = 0;
  for (let s = 0; r < i.length; r++) {
    let o = i[r], l = s + o.length;
    if (!(l == s && o.getSide() <= 0)) {
      if (e > s && e < l && o.dom.parentNode == t)
        return o.domAtPos(e - s);
      if (e <= s)
        break;
      s = l;
    }
  }
  for (let s = r; s > 0; s--) {
    let o = i[s - 1];
    if (o.dom.parentNode == t)
      return o.domAtPos(o.length);
  }
  for (let s = r; s < i.length; s++) {
    let o = i[s];
    if (o.dom.parentNode == t)
      return o.domAtPos(0);
  }
  return new Je(t, 0);
}
function Y0(n, e, t) {
  let i, { children: r } = n;
  t > 0 && e instanceof En && r.length && (i = r[r.length - 1]) instanceof En && i.mark.eq(e.mark) ? Y0(i, e.children[0], t - 1) : (r.push(e), e.setParent(n)), n.length += e.length;
}
function N0(n, e, t) {
  let i = null, r = -1, s = null, o = -1;
  function l(c, h) {
    for (let f = 0, u = 0; f < c.children.length && u <= h; f++) {
      let d = c.children[f], O = u + d.length;
      O >= h && (d.children.length ? l(d, h - u) : (!s || s.isHidden && (t > 0 || HP(s, d))) && (O > h || u == O && d.getSide() > 0) ? (s = d, o = h - u) : (u < h || u == O && d.getSide() < 0 && !d.isHidden) && (i = d, r = h - u)), u = O;
    }
  }
  l(n, e);
  let a = (t < 0 ? i : s) || i || s;
  return a ? a.coordsAt(Math.max(0, a == i ? r : o), t) : FP(n);
}
function FP(n) {
  let e = n.dom.lastChild;
  if (!e)
    return n.dom.getBoundingClientRect();
  let t = as(e);
  return t[t.length - 1] || null;
}
function HP(n, e) {
  let t = n.coordsAt(0, 1), i = e.coordsAt(0, 1);
  return t && i && i.top < t.bottom;
}
function kh(n, e) {
  for (let t in n)
    t == "class" && e.class ? e.class += " " + n.class : t == "style" && e.style ? e.style += ";" + n.style : e[t] = n[t];
  return e;
}
const Kd = /* @__PURE__ */ Object.create(null);
function ml(n, e, t) {
  if (n == e)
    return !0;
  n || (n = Kd), e || (e = Kd);
  let i = Object.keys(n), r = Object.keys(e);
  if (i.length - (t && i.indexOf(t) > -1 ? 1 : 0) != r.length - (t && r.indexOf(t) > -1 ? 1 : 0))
    return !1;
  for (let s of i)
    if (s != t && (r.indexOf(s) == -1 || n[s] !== e[s]))
      return !1;
  return !0;
}
function wh(n, e, t) {
  let i = !1;
  if (e)
    for (let r in e)
      t && r in t || (i = !0, r == "style" ? n.style.cssText = "" : n.removeAttribute(r));
  if (t)
    for (let r in t)
      e && e[r] == t[r] || (i = !0, r == "style" ? n.style.cssText = t[r] : n.setAttribute(r, t[r]));
  return i;
}
function KP(n) {
  let e = /* @__PURE__ */ Object.create(null);
  for (let t = 0; t < n.attributes.length; t++) {
    let i = n.attributes[t];
    e[i.name] = i.value;
  }
  return e;
}
class Zn {
  /**
  Compare this instance to another instance of the same type.
  (TypeScript can't express this, but only instances of the same
  specific class will be passed to this method.) This is used to
  avoid redrawing widgets when they are replaced by a new
  decoration of the same type. The default implementation just
  returns `false`, which will cause new instances of the widget to
  always be redrawn.
  */
  eq(e) {
    return !1;
  }
  /**
  Update a DOM element created by a widget of the same type (but
  different, non-`eq` content) to reflect this widget. May return
  true to indicate that it could update, false to indicate it
  couldn't (in which case the widget will be redrawn). The default
  implementation just returns false.
  */
  updateDOM(e, t) {
    return !1;
  }
  /**
  @internal
  */
  compare(e) {
    return this == e || this.constructor == e.constructor && this.eq(e);
  }
  /**
  The estimated height this widget will have, to be used when
  estimating the height of content that hasn't been drawn. May
  return -1 to indicate you don't know. The default implementation
  returns -1.
  */
  get estimatedHeight() {
    return -1;
  }
  /**
  For inline widgets that are displayed inline (as opposed to
  `inline-block`) and introduce line breaks (through `<br>` tags
  or textual newlines), this must indicate the amount of line
  breaks they introduce. Defaults to 0.
  */
  get lineBreaks() {
    return 0;
  }
  /**
  Can be used to configure which kinds of events inside the widget
  should be ignored by the editor. The default is to ignore all
  events.
  */
  ignoreEvent(e) {
    return !0;
  }
  /**
  Override the way screen coordinates for positions at/in the
  widget are found. `pos` will be the offset into the widget, and
  `side` the side of the position that is being queried—less than
  zero for before, greater than zero for after, and zero for
  directly at that position.
  */
  coordsAt(e, t, i) {
    return null;
  }
  /**
  @internal
  */
  get isHidden() {
    return !1;
  }
  /**
  @internal
  */
  get editable() {
    return !1;
  }
  /**
  This is called when the an instance of the widget is removed
  from the editor view.
  */
  destroy(e) {
  }
}
var st = /* @__PURE__ */ function(n) {
  return n[n.Text = 0] = "Text", n[n.WidgetBefore = 1] = "WidgetBefore", n[n.WidgetAfter = 2] = "WidgetAfter", n[n.WidgetRange = 3] = "WidgetRange", n;
}(st || (st = {}));
class F extends xi {
  constructor(e, t, i, r) {
    super(), this.startSide = e, this.endSide = t, this.widget = i, this.spec = r;
  }
  /**
  @internal
  */
  get heightRelevant() {
    return !1;
  }
  /**
  Create a mark decoration, which influences the styling of the
  content in its range. Nested mark decorations will cause nested
  DOM elements to be created. Nesting order is determined by
  precedence of the [facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), with
  the higher-precedence decorations creating the inner DOM nodes.
  Such elements are split on line boundaries and on the boundaries
  of lower-precedence decorations.
  */
  static mark(e) {
    return new Ms(e);
  }
  /**
  Create a widget decoration, which displays a DOM element at the
  given position.
  */
  static widget(e) {
    let t = Math.max(-1e4, Math.min(1e4, e.side || 0)), i = !!e.block;
    return t += i && !e.inlineOrder ? t > 0 ? 3e8 : -4e8 : t > 0 ? 1e8 : -1e8, new Fn(e, t, t, i, e.widget || null, !1);
  }
  /**
  Create a replace decoration which replaces the given range with
  a widget, or simply hides it.
  */
  static replace(e) {
    let t = !!e.block, i, r;
    if (e.isBlockGap)
      i = -5e8, r = 4e8;
    else {
      let { start: s, end: o } = G0(e, t);
      i = (s ? t ? -3e8 : -1 : 5e8) - 1, r = (o ? t ? 2e8 : 1 : -6e8) + 1;
    }
    return new Fn(e, i, r, t, e.widget || null, !0);
  }
  /**
  Create a line decoration, which can add DOM attributes to the
  line starting at the given position.
  */
  static line(e) {
    return new Ls(e);
  }
  /**
  Build a [`DecorationSet`](https://codemirror.net/6/docs/ref/#view.DecorationSet) from the given
  decorated range or ranges. If the ranges aren't already sorted,
  pass `true` for `sort` to make the library sort them for you.
  */
  static set(e, t = !1) {
    return Oe.of(e, t);
  }
  /**
  @internal
  */
  hasHeight() {
    return this.widget ? this.widget.estimatedHeight > -1 : !1;
  }
}
F.none = Oe.empty;
class Ms extends F {
  constructor(e) {
    let { start: t, end: i } = G0(e);
    super(t ? -1 : 5e8, i ? 1 : -6e8, null, e), this.tagName = e.tagName || "span", this.class = e.class || "", this.attrs = e.attributes || null;
  }
  eq(e) {
    var t, i;
    return this == e || e instanceof Ms && this.tagName == e.tagName && (this.class || ((t = this.attrs) === null || t === void 0 ? void 0 : t.class)) == (e.class || ((i = e.attrs) === null || i === void 0 ? void 0 : i.class)) && ml(this.attrs, e.attrs, "class");
  }
  range(e, t = e) {
    if (e >= t)
      throw new RangeError("Mark decorations may not be empty");
    return super.range(e, t);
  }
}
Ms.prototype.point = !1;
class Ls extends F {
  constructor(e) {
    super(-2e8, -2e8, null, e);
  }
  eq(e) {
    return e instanceof Ls && this.spec.class == e.spec.class && ml(this.spec.attributes, e.spec.attributes);
  }
  range(e, t = e) {
    if (t != e)
      throw new RangeError("Line decoration ranges must be zero-length");
    return super.range(e, t);
  }
}
Ls.prototype.mapMode = Ne.TrackBefore;
Ls.prototype.point = !0;
class Fn extends F {
  constructor(e, t, i, r, s, o) {
    super(t, i, s, e), this.block = r, this.isReplace = o, this.mapMode = r ? t <= 0 ? Ne.TrackBefore : Ne.TrackAfter : Ne.TrackDel;
  }
  // Only relevant when this.block == true
  get type() {
    return this.startSide != this.endSide ? st.WidgetRange : this.startSide <= 0 ? st.WidgetBefore : st.WidgetAfter;
  }
  get heightRelevant() {
    return this.block || !!this.widget && (this.widget.estimatedHeight >= 5 || this.widget.lineBreaks > 0);
  }
  eq(e) {
    return e instanceof Fn && JP(this.widget, e.widget) && this.block == e.block && this.startSide == e.startSide && this.endSide == e.endSide;
  }
  range(e, t = e) {
    if (this.isReplace && (e > t || e == t && this.startSide > 0 && this.endSide <= 0))
      throw new RangeError("Invalid range for replacement decoration");
    if (!this.isReplace && t != e)
      throw new RangeError("Widget decorations can only have zero-length ranges");
    return super.range(e, t);
  }
}
Fn.prototype.point = !0;
function G0(n, e = !1) {
  let { inclusiveStart: t, inclusiveEnd: i } = n;
  return t == null && (t = n.inclusive), i == null && (i = n.inclusive), { start: t ?? e, end: i ?? e };
}
function JP(n, e) {
  return n == e || !!(n && e && n.compare(e));
}
function Vo(n, e, t, i = 0) {
  let r = t.length - 1;
  r >= 0 && t[r] + i >= n ? t[r] = Math.max(t[r], e) : t.push(n, e);
}
class qe extends ke {
  constructor() {
    super(...arguments), this.children = [], this.length = 0, this.prevAttrs = void 0, this.attrs = null, this.breakAfter = 0;
  }
  // Consumes source
  merge(e, t, i, r, s, o) {
    if (i) {
      if (!(i instanceof qe))
        return !1;
      this.dom || i.transferDOM(this);
    }
    return r && this.setDeco(i ? i.attrs : null), D0(this, e, t, i ? i.children.slice() : [], s, o), !0;
  }
  split(e) {
    let t = new qe();
    if (t.breakAfter = this.breakAfter, this.length == 0)
      return t;
    let { i, off: r } = this.childPos(e);
    r && (t.append(this.children[i].split(r), 0), this.children[i].merge(r, this.children[i].length, null, !1, 0, 0), i++);
    for (let s = i; s < this.children.length; s++)
      t.append(this.children[s], 0);
    for (; i > 0 && this.children[i - 1].length == 0; )
      this.children[--i].destroy();
    return this.children.length = i, this.markDirty(), this.length = e, t;
  }
  transferDOM(e) {
    this.dom && (this.markDirty(), e.setDOM(this.dom), e.prevAttrs = this.prevAttrs === void 0 ? this.attrs : this.prevAttrs, this.prevAttrs = void 0, this.dom = null);
  }
  setDeco(e) {
    ml(this.attrs, e) || (this.dom && (this.prevAttrs = this.attrs, this.markDirty()), this.attrs = e);
  }
  append(e, t) {
    Y0(this, e, t);
  }
  // Only called when building a line view in ContentBuilder
  addLineDeco(e) {
    let t = e.spec.attributes, i = e.spec.class;
    t && (this.attrs = kh(t, this.attrs || {})), i && (this.attrs = kh({ class: i }, this.attrs || {}));
  }
  domAtPos(e) {
    return U0(this, e);
  }
  reuseDOM(e) {
    e.nodeName == "DIV" && (this.setDOM(e), this.flags |= 6);
  }
  sync(e, t) {
    var i;
    this.dom ? this.flags & 4 && (M0(this.dom), this.dom.className = "cm-line", this.prevAttrs = this.attrs ? null : void 0) : (this.setDOM(document.createElement("div")), this.dom.className = "cm-line", this.prevAttrs = this.attrs ? null : void 0), this.prevAttrs !== void 0 && (wh(this.dom, this.prevAttrs, this.attrs), this.dom.classList.add("cm-line"), this.prevAttrs = void 0), super.sync(e, t);
    let r = this.dom.lastChild;
    for (; r && ke.get(r) instanceof En; )
      r = r.lastChild;
    if (!r || !this.length || r.nodeName != "BR" && ((i = ke.get(r)) === null || i === void 0 ? void 0 : i.isEditable) == !1 && (!W.ios || !this.children.some((s) => s instanceof zt))) {
      let s = document.createElement("BR");
      s.cmIgnore = !0, this.dom.appendChild(s);
    }
  }
  measureTextSize() {
    if (this.children.length == 0 || this.length > 20)
      return null;
    let e = 0, t;
    for (let i of this.children) {
      if (!(i instanceof zt) || /[^ -~]/.test(i.text))
        return null;
      let r = as(i.dom);
      if (r.length != 1)
        return null;
      e += r[0].width, t = r[0].height;
    }
    return e ? {
      lineHeight: this.dom.getBoundingClientRect().height,
      charWidth: e / this.length,
      textHeight: t
    } : null;
  }
  coordsAt(e, t) {
    let i = N0(this, e, t);
    if (!this.children.length && i && this.parent) {
      let { heightOracle: r } = this.parent.view.viewState, s = i.bottom - i.top;
      if (Math.abs(s - r.lineHeight) < 2 && r.textHeight < s) {
        let o = (s - r.textHeight) / 2;
        return { top: i.top + o, bottom: i.bottom - o, left: i.left, right: i.left };
      }
    }
    return i;
  }
  become(e) {
    return e instanceof qe && this.children.length == 0 && e.children.length == 0 && ml(this.attrs, e.attrs) && this.breakAfter == e.breakAfter;
  }
  covers() {
    return !0;
  }
  static find(e, t) {
    for (let i = 0, r = 0; i < e.children.length; i++) {
      let s = e.children[i], o = r + s.length;
      if (o >= t) {
        if (s instanceof qe)
          return s;
        if (o > t)
          break;
      }
      r = o + s.breakAfter;
    }
    return null;
  }
}
class $n extends ke {
  constructor(e, t, i) {
    super(), this.widget = e, this.length = t, this.deco = i, this.breakAfter = 0, this.prevWidget = null;
  }
  merge(e, t, i, r, s, o) {
    return i && (!(i instanceof $n) || !this.widget.compare(i.widget) || e > 0 && s <= 0 || t < this.length && o <= 0) ? !1 : (this.length = e + (i ? i.length : 0) + (this.length - t), !0);
  }
  domAtPos(e) {
    return e == 0 ? Je.before(this.dom) : Je.after(this.dom, e == this.length);
  }
  split(e) {
    let t = this.length - e;
    this.length = e;
    let i = new $n(this.widget, t, this.deco);
    return i.breakAfter = this.breakAfter, i;
  }
  get children() {
    return Nf;
  }
  sync(e) {
    (!this.dom || !this.widget.updateDOM(this.dom, e)) && (this.dom && this.prevWidget && this.prevWidget.destroy(this.dom), this.prevWidget = null, this.setDOM(this.widget.toDOM(e)), this.widget.editable || (this.dom.contentEditable = "false"));
  }
  get overrideDOMText() {
    return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : de.empty;
  }
  domBoundsAround() {
    return null;
  }
  become(e) {
    return e instanceof $n && e.widget.constructor == this.widget.constructor ? (e.widget.compare(this.widget) || this.markDirty(!0), this.dom && !this.prevWidget && (this.prevWidget = this.widget), this.widget = e.widget, this.length = e.length, this.deco = e.deco, this.breakAfter = e.breakAfter, !0) : !1;
  }
  ignoreMutation() {
    return !0;
  }
  ignoreEvent(e) {
    return this.widget.ignoreEvent(e);
  }
  get isEditable() {
    return !1;
  }
  get isWidget() {
    return !0;
  }
  coordsAt(e, t) {
    let i = this.widget.coordsAt(this.dom, e, t);
    return i || (this.widget instanceof vh ? null : ra(this.dom.getBoundingClientRect(), this.length ? e == 0 : t <= 0));
  }
  destroy() {
    super.destroy(), this.dom && this.widget.destroy(this.dom);
  }
  covers(e) {
    let { startSide: t, endSide: i } = this.deco;
    return t == i ? !1 : e < 0 ? t < 0 : i > 0;
  }
}
class vh extends Zn {
  constructor(e) {
    super(), this.height = e;
  }
  toDOM() {
    let e = document.createElement("div");
    return e.className = "cm-gap", this.updateDOM(e), e;
  }
  eq(e) {
    return e.height == this.height;
  }
  updateDOM(e) {
    return e.style.height = this.height + "px", !0;
  }
  get editable() {
    return !0;
  }
  get estimatedHeight() {
    return this.height;
  }
  ignoreEvent() {
    return !1;
  }
}
class Nr {
  constructor(e, t, i, r) {
    this.doc = e, this.pos = t, this.end = i, this.disallowBlockEffectsFor = r, this.content = [], this.curLine = null, this.breakAtStart = 0, this.pendingBuffer = 0, this.bufferMarks = [], this.atCursorPos = !0, this.openStart = -1, this.openEnd = -1, this.text = "", this.textOff = 0, this.cursor = e.iter(), this.skip = t;
  }
  posCovered() {
    if (this.content.length == 0)
      return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;
    let e = this.content[this.content.length - 1];
    return !(e.breakAfter || e instanceof $n && e.deco.endSide < 0);
  }
  getLine() {
    return this.curLine || (this.content.push(this.curLine = new qe()), this.atCursorPos = !0), this.curLine;
  }
  flushBuffer(e = this.bufferMarks) {
    this.pendingBuffer && (this.curLine.append(io(new Ki(-1), e), e.length), this.pendingBuffer = 0);
  }
  addBlockWidget(e) {
    this.flushBuffer(), this.curLine = null, this.content.push(e);
  }
  finish(e) {
    this.pendingBuffer && e <= this.bufferMarks.length ? this.flushBuffer() : this.pendingBuffer = 0, !this.posCovered() && !(e && this.content.length && this.content[this.content.length - 1] instanceof $n) && this.getLine();
  }
  buildText(e, t, i) {
    for (; e > 0; ) {
      if (this.textOff == this.text.length) {
        let { value: s, lineBreak: o, done: l } = this.cursor.next(this.skip);
        if (this.skip = 0, l)
          throw new Error("Ran out of text content when drawing inline views");
        if (o) {
          this.posCovered() || this.getLine(), this.content.length ? this.content[this.content.length - 1].breakAfter = 1 : this.breakAtStart = 1, this.flushBuffer(), this.curLine = null, this.atCursorPos = !0, e--;
          continue;
        } else
          this.text = s, this.textOff = 0;
      }
      let r = Math.min(
        this.text.length - this.textOff,
        e,
        512
        /* T.Chunk */
      );
      this.flushBuffer(t.slice(t.length - i)), this.getLine().append(io(new zt(this.text.slice(this.textOff, this.textOff + r)), t), i), this.atCursorPos = !0, this.textOff += r, e -= r, i = 0;
    }
  }
  span(e, t, i, r) {
    this.buildText(t - e, i, r), this.pos = t, this.openStart < 0 && (this.openStart = r);
  }
  point(e, t, i, r, s, o) {
    if (this.disallowBlockEffectsFor[o] && i instanceof Fn) {
      if (i.block)
        throw new RangeError("Block decorations may not be specified via plugins");
      if (t > this.doc.lineAt(this.pos).to)
        throw new RangeError("Decorations that replace line breaks may not be specified via plugins");
    }
    let l = t - e;
    if (i instanceof Fn)
      if (i.block)
        i.startSide > 0 && !this.posCovered() && this.getLine(), this.addBlockWidget(new $n(i.widget || Ji.block, l, i));
      else {
        let a = Dn.create(i.widget || Ji.inline, l, l ? 0 : i.startSide), c = this.atCursorPos && !a.isEditable && s <= r.length && (e < t || i.startSide > 0), h = !a.isEditable && (e < t || s > r.length || i.startSide <= 0), f = this.getLine();
        this.pendingBuffer == 2 && !c && !a.isEditable && (this.pendingBuffer = 0), this.flushBuffer(r), c && (f.append(io(new Ki(1), r), s), s = r.length + Math.max(0, s - r.length)), f.append(io(a, r), s), this.atCursorPos = h, this.pendingBuffer = h ? e < t || s > r.length ? 1 : 2 : 0, this.pendingBuffer && (this.bufferMarks = r.slice());
      }
    else this.doc.lineAt(this.pos).from == this.pos && this.getLine().addLineDeco(i);
    l && (this.textOff + l <= this.text.length ? this.textOff += l : (this.skip += l - (this.text.length - this.textOff), this.text = "", this.textOff = 0), this.pos = t), this.openStart < 0 && (this.openStart = s);
  }
  static build(e, t, i, r, s) {
    let o = new Nr(e, t, i, s);
    return o.openEnd = Oe.spans(r, t, i, o), o.openStart < 0 && (o.openStart = o.openEnd), o.finish(o.openEnd), o;
  }
}
function io(n, e) {
  for (let t of e)
    n = new En(t, [n], n.length);
  return n;
}
class Ji extends Zn {
  constructor(e) {
    super(), this.tag = e;
  }
  eq(e) {
    return e.tag == this.tag;
  }
  toDOM() {
    return document.createElement(this.tag);
  }
  updateDOM(e) {
    return e.nodeName.toLowerCase() == this.tag;
  }
  get isHidden() {
    return !0;
  }
}
Ji.inline = /* @__PURE__ */ new Ji("span");
Ji.block = /* @__PURE__ */ new Ji("div");
var ve = /* @__PURE__ */ function(n) {
  return n[n.LTR = 0] = "LTR", n[n.RTL = 1] = "RTL", n;
}(ve || (ve = {}));
const vi = ve.LTR, Gf = ve.RTL;
function F0(n) {
  let e = [];
  for (let t = 0; t < n.length; t++)
    e.push(1 << +n[t]);
  return e;
}
const e$ = /* @__PURE__ */ F0("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008"), t$ = /* @__PURE__ */ F0("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333"), Ph = /* @__PURE__ */ Object.create(null), Kt = [];
for (let n of ["()", "[]", "{}"]) {
  let e = /* @__PURE__ */ n.charCodeAt(0), t = /* @__PURE__ */ n.charCodeAt(1);
  Ph[e] = t, Ph[t] = -e;
}
function H0(n) {
  return n <= 247 ? e$[n] : 1424 <= n && n <= 1524 ? 2 : 1536 <= n && n <= 1785 ? t$[n - 1536] : 1774 <= n && n <= 2220 ? 4 : 8192 <= n && n <= 8204 ? 256 : 64336 <= n && n <= 65023 ? 4 : 1;
}
const n$ = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac\ufb50-\ufdff]/;
class In {
  /**
  The direction of this span.
  */
  get dir() {
    return this.level % 2 ? Gf : vi;
  }
  /**
  @internal
  */
  constructor(e, t, i) {
    this.from = e, this.to = t, this.level = i;
  }
  /**
  @internal
  */
  side(e, t) {
    return this.dir == t == e ? this.to : this.from;
  }
  /**
  @internal
  */
  forward(e, t) {
    return e == (this.dir == t);
  }
  /**
  @internal
  */
  static find(e, t, i, r) {
    let s = -1;
    for (let o = 0; o < e.length; o++) {
      let l = e[o];
      if (l.from <= t && l.to >= t) {
        if (l.level == i)
          return o;
        (s < 0 || (r != 0 ? r < 0 ? l.from < t : l.to > t : e[s].level > l.level)) && (s = o);
      }
    }
    if (s < 0)
      throw new RangeError("Index out of range");
    return s;
  }
}
function K0(n, e) {
  if (n.length != e.length)
    return !1;
  for (let t = 0; t < n.length; t++) {
    let i = n[t], r = e[t];
    if (i.from != r.from || i.to != r.to || i.direction != r.direction || !K0(i.inner, r.inner))
      return !1;
  }
  return !0;
}
const Qe = [];
function i$(n, e, t, i, r) {
  for (let s = 0; s <= i.length; s++) {
    let o = s ? i[s - 1].to : e, l = s < i.length ? i[s].from : t, a = s ? 256 : r;
    for (let c = o, h = a, f = a; c < l; c++) {
      let u = H0(n.charCodeAt(c));
      u == 512 ? u = h : u == 8 && f == 4 && (u = 16), Qe[c] = u == 4 ? 2 : u, u & 7 && (f = u), h = u;
    }
    for (let c = o, h = a, f = a; c < l; c++) {
      let u = Qe[c];
      if (u == 128)
        c < l - 1 && h == Qe[c + 1] && h & 24 ? u = Qe[c] = h : Qe[c] = 256;
      else if (u == 64) {
        let d = c + 1;
        for (; d < l && Qe[d] == 64; )
          d++;
        let O = c && h == 8 || d < t && Qe[d] == 8 ? f == 1 ? 1 : 8 : 256;
        for (let p = c; p < d; p++)
          Qe[p] = O;
        c = d - 1;
      } else u == 8 && f == 1 && (Qe[c] = 1);
      h = u, u & 7 && (f = u);
    }
  }
}
function r$(n, e, t, i, r) {
  let s = r == 1 ? 2 : 1;
  for (let o = 0, l = 0, a = 0; o <= i.length; o++) {
    let c = o ? i[o - 1].to : e, h = o < i.length ? i[o].from : t;
    for (let f = c, u, d, O; f < h; f++)
      if (d = Ph[u = n.charCodeAt(f)])
        if (d < 0) {
          for (let p = l - 3; p >= 0; p -= 3)
            if (Kt[p + 1] == -d) {
              let m = Kt[p + 2], y = m & 2 ? r : m & 4 ? m & 1 ? s : r : 0;
              y && (Qe[f] = Qe[Kt[p]] = y), l = p;
              break;
            }
        } else {
          if (Kt.length == 189)
            break;
          Kt[l++] = f, Kt[l++] = u, Kt[l++] = a;
        }
      else if ((O = Qe[f]) == 2 || O == 1) {
        let p = O == r;
        a = p ? 0 : 1;
        for (let m = l - 3; m >= 0; m -= 3) {
          let y = Kt[m + 2];
          if (y & 2)
            break;
          if (p)
            Kt[m + 2] |= 2;
          else {
            if (y & 4)
              break;
            Kt[m + 2] |= 4;
          }
        }
      }
  }
}
function s$(n, e, t, i) {
  for (let r = 0, s = i; r <= t.length; r++) {
    let o = r ? t[r - 1].to : n, l = r < t.length ? t[r].from : e;
    for (let a = o; a < l; ) {
      let c = Qe[a];
      if (c == 256) {
        let h = a + 1;
        for (; ; )
          if (h == l) {
            if (r == t.length)
              break;
            h = t[r++].to, l = r < t.length ? t[r].from : e;
          } else if (Qe[h] == 256)
            h++;
          else
            break;
        let f = s == 1, u = (h < e ? Qe[h] : i) == 1, d = f == u ? f ? 1 : 2 : i;
        for (let O = h, p = r, m = p ? t[p - 1].to : n; O > a; )
          O == m && (O = t[--p].from, m = p ? t[p - 1].to : n), Qe[--O] = d;
        a = h;
      } else
        s = c, a++;
    }
  }
}
function $h(n, e, t, i, r, s, o) {
  let l = i % 2 ? 2 : 1;
  if (i % 2 == r % 2)
    for (let a = e, c = 0; a < t; ) {
      let h = !0, f = !1;
      if (c == s.length || a < s[c].from) {
        let p = Qe[a];
        p != l && (h = !1, f = p == 16);
      }
      let u = !h && l == 1 ? [] : null, d = h ? i : i + 1, O = a;
      e: for (; ; )
        if (c < s.length && O == s[c].from) {
          if (f)
            break e;
          let p = s[c];
          if (!h)
            for (let m = p.to, y = c + 1; ; ) {
              if (m == t)
                break e;
              if (y < s.length && s[y].from == m)
                m = s[y++].to;
              else {
                if (Qe[m] == l)
                  break e;
                break;
              }
            }
          if (c++, u)
            u.push(p);
          else {
            p.from > a && o.push(new In(a, p.from, d));
            let m = p.direction == vi != !(d % 2);
            Th(n, m ? i + 1 : i, r, p.inner, p.from, p.to, o), a = p.to;
          }
          O = p.to;
        } else {
          if (O == t || (h ? Qe[O] != l : Qe[O] == l))
            break;
          O++;
        }
      u ? $h(n, a, O, i + 1, r, u, o) : a < O && o.push(new In(a, O, d)), a = O;
    }
  else
    for (let a = t, c = s.length; a > e; ) {
      let h = !0, f = !1;
      if (!c || a > s[c - 1].to) {
        let p = Qe[a - 1];
        p != l && (h = !1, f = p == 16);
      }
      let u = !h && l == 1 ? [] : null, d = h ? i : i + 1, O = a;
      e: for (; ; )
        if (c && O == s[c - 1].to) {
          if (f)
            break e;
          let p = s[--c];
          if (!h)
            for (let m = p.from, y = c; ; ) {
              if (m == e)
                break e;
              if (y && s[y - 1].to == m)
                m = s[--y].from;
              else {
                if (Qe[m - 1] == l)
                  break e;
                break;
              }
            }
          if (u)
            u.push(p);
          else {
            p.to < a && o.push(new In(p.to, a, d));
            let m = p.direction == vi != !(d % 2);
            Th(n, m ? i + 1 : i, r, p.inner, p.from, p.to, o), a = p.from;
          }
          O = p.from;
        } else {
          if (O == e || (h ? Qe[O - 1] != l : Qe[O - 1] == l))
            break;
          O--;
        }
      u ? $h(n, O, a, i + 1, r, u, o) : O < a && o.push(new In(O, a, d)), a = O;
    }
}
function Th(n, e, t, i, r, s, o) {
  let l = e % 2 ? 2 : 1;
  i$(n, r, s, i, l), r$(n, r, s, i, l), s$(r, s, i, l), $h(n, r, s, e, t, i, o);
}
function o$(n, e, t) {
  if (!n)
    return [new In(0, 0, e == Gf ? 1 : 0)];
  if (e == vi && !t.length && !n$.test(n))
    return J0(n.length);
  if (t.length)
    for (; n.length > Qe.length; )
      Qe[Qe.length] = 256;
  let i = [], r = e == vi ? 0 : 1;
  return Th(n, r, r, t, 0, n.length, i), i;
}
function J0(n) {
  return [new In(0, n, 0)];
}
let ey = "";
function l$(n, e, t, i, r) {
  var s;
  let o = i.head - n.from, l = In.find(e, o, (s = i.bidiLevel) !== null && s !== void 0 ? s : -1, i.assoc), a = e[l], c = a.side(r, t);
  if (o == c) {
    let u = l += r ? 1 : -1;
    if (u < 0 || u >= e.length)
      return null;
    a = e[l = u], o = a.side(!r, t), c = a.side(r, t);
  }
  let h = Ge(n.text, o, a.forward(r, t));
  (h < a.from || h > a.to) && (h = c), ey = n.text.slice(Math.min(o, h), Math.max(o, h));
  let f = l == (r ? e.length - 1 : 0) ? null : e[l + (r ? 1 : -1)];
  return f && h == c && f.level + (r ? 0 : 1) < a.level ? $.cursor(f.side(!r, t) + n.from, f.forward(r, t) ? 1 : -1, f.level) : $.cursor(h + n.from, a.forward(r, t) ? -1 : 1, a.level);
}
function a$(n, e, t) {
  for (let i = e; i < t; i++) {
    let r = H0(n.charCodeAt(i));
    if (r == 1)
      return vi;
    if (r == 2 || r == 4)
      return Gf;
  }
  return vi;
}
const ty = /* @__PURE__ */ B.define(), ny = /* @__PURE__ */ B.define(), iy = /* @__PURE__ */ B.define(), ry = /* @__PURE__ */ B.define(), Ch = /* @__PURE__ */ B.define(), sy = /* @__PURE__ */ B.define(), oy = /* @__PURE__ */ B.define(), Ff = /* @__PURE__ */ B.define(), Hf = /* @__PURE__ */ B.define(), ly = /* @__PURE__ */ B.define({
  combine: (n) => n.some((e) => e)
}), ay = /* @__PURE__ */ B.define({
  combine: (n) => n.some((e) => e)
}), cy = /* @__PURE__ */ B.define();
class Ui {
  constructor(e, t = "nearest", i = "nearest", r = 5, s = 5, o = !1) {
    this.range = e, this.y = t, this.x = i, this.yMargin = r, this.xMargin = s, this.isSnapshot = o;
  }
  map(e) {
    return e.empty ? this : new Ui(this.range.map(e), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);
  }
  clip(e) {
    return this.range.to <= e.doc.length ? this : new Ui($.cursor(e.doc.length), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);
  }
}
const ro = /* @__PURE__ */ te.define({ map: (n, e) => n.map(e) }), hy = /* @__PURE__ */ te.define();
function ht(n, e, t) {
  let i = n.facet(ry);
  i.length ? i[0](e) : window.onerror && window.onerror(String(e), t, void 0, void 0, e) || (t ? console.error(t + ":", e) : console.error(e));
}
const Pn = /* @__PURE__ */ B.define({ combine: (n) => n.length ? n[0] : !0 });
let c$ = 0;
const Li = /* @__PURE__ */ B.define({
  combine(n) {
    return n.filter((e, t) => {
      for (let i = 0; i < t; i++)
        if (n[i].plugin == e.plugin)
          return !1;
      return !0;
    });
  }
});
class Le {
  constructor(e, t, i, r, s) {
    this.id = e, this.create = t, this.domEventHandlers = i, this.domEventObservers = r, this.baseExtensions = s(this), this.extension = this.baseExtensions.concat(Li.of({ plugin: this, arg: void 0 }));
  }
  /**
  Create an extension for this plugin with the given argument.
  */
  of(e) {
    return this.baseExtensions.concat(Li.of({ plugin: this, arg: e }));
  }
  /**
  Define a plugin from a constructor function that creates the
  plugin's value, given an editor view.
  */
  static define(e, t) {
    const { eventHandlers: i, eventObservers: r, provide: s, decorations: o } = t || {};
    return new Le(c$++, e, i, r, (l) => {
      let a = [];
      return o && a.push(cs.of((c) => {
        let h = c.plugin(l);
        return h ? o(h) : F.none;
      })), s && a.push(s(l)), a;
    });
  }
  /**
  Create a plugin for a class whose constructor takes a single
  editor view as argument.
  */
  static fromClass(e, t) {
    return Le.define((i, r) => new e(i, r), t);
  }
}
class za {
  constructor(e) {
    this.spec = e, this.mustUpdate = null, this.value = null;
  }
  get plugin() {
    return this.spec && this.spec.plugin;
  }
  update(e) {
    if (this.value) {
      if (this.mustUpdate) {
        let t = this.mustUpdate;
        if (this.mustUpdate = null, this.value.update)
          try {
            this.value.update(t);
          } catch (i) {
            if (ht(t.state, i, "CodeMirror plugin crashed"), this.value.destroy)
              try {
                this.value.destroy();
              } catch {
              }
            this.deactivate();
          }
      }
    } else if (this.spec)
      try {
        this.value = this.spec.plugin.create(e, this.spec.arg);
      } catch (t) {
        ht(e.state, t, "CodeMirror plugin crashed"), this.deactivate();
      }
    return this;
  }
  destroy(e) {
    var t;
    if (!((t = this.value) === null || t === void 0) && t.destroy)
      try {
        this.value.destroy();
      } catch (i) {
        ht(e.state, i, "CodeMirror plugin crashed");
      }
  }
  deactivate() {
    this.spec = this.value = null;
  }
}
const fy = /* @__PURE__ */ B.define(), Kf = /* @__PURE__ */ B.define(), cs = /* @__PURE__ */ B.define(), uy = /* @__PURE__ */ B.define(), Jf = /* @__PURE__ */ B.define(), dy = /* @__PURE__ */ B.define();
function Jd(n, e) {
  let t = n.state.facet(dy);
  if (!t.length)
    return t;
  let i = t.map((s) => s instanceof Function ? s(n) : s), r = [];
  return Oe.spans(i, e.from, e.to, {
    point() {
    },
    span(s, o, l, a) {
      let c = s - e.from, h = o - e.from, f = r;
      for (let u = l.length - 1; u >= 0; u--, a--) {
        let d = l[u].spec.bidiIsolate, O;
        if (d == null && (d = a$(e.text, c, h)), a > 0 && f.length && (O = f[f.length - 1]).to == c && O.direction == d)
          O.to = h, f = O.inner;
        else {
          let p = { from: c, to: h, direction: d, inner: [] };
          f.push(p), f = p.inner;
        }
      }
    }
  }), r;
}
const Oy = /* @__PURE__ */ B.define();
function eu(n) {
  let e = 0, t = 0, i = 0, r = 0;
  for (let s of n.state.facet(Oy)) {
    let o = s(n);
    o && (o.left != null && (e = Math.max(e, o.left)), o.right != null && (t = Math.max(t, o.right)), o.top != null && (i = Math.max(i, o.top)), o.bottom != null && (r = Math.max(r, o.bottom)));
  }
  return { left: e, right: t, top: i, bottom: r };
}
const Mr = /* @__PURE__ */ B.define();
class Tt {
  constructor(e, t, i, r) {
    this.fromA = e, this.toA = t, this.fromB = i, this.toB = r;
  }
  join(e) {
    return new Tt(Math.min(this.fromA, e.fromA), Math.max(this.toA, e.toA), Math.min(this.fromB, e.fromB), Math.max(this.toB, e.toB));
  }
  addToSet(e) {
    let t = e.length, i = this;
    for (; t > 0; t--) {
      let r = e[t - 1];
      if (!(r.fromA > i.toA)) {
        if (r.toA < i.fromA)
          break;
        i = i.join(r), e.splice(t - 1, 1);
      }
    }
    return e.splice(t, 0, i), e;
  }
  static extendWithRanges(e, t) {
    if (t.length == 0)
      return e;
    let i = [];
    for (let r = 0, s = 0, o = 0, l = 0; ; r++) {
      let a = r == e.length ? null : e[r], c = o - l, h = a ? a.fromB : 1e9;
      for (; s < t.length && t[s] < h; ) {
        let f = t[s], u = t[s + 1], d = Math.max(l, f), O = Math.min(h, u);
        if (d <= O && new Tt(d + c, O + c, d, O).addToSet(i), u > h)
          break;
        s += 2;
      }
      if (!a)
        return i;
      new Tt(a.fromA, a.toA, a.fromB, a.toB).addToSet(i), o = a.toA, l = a.toB;
    }
  }
}
class gl {
  constructor(e, t, i) {
    this.view = e, this.state = t, this.transactions = i, this.flags = 0, this.startState = e.state, this.changes = Be.empty(this.startState.doc.length);
    for (let s of i)
      this.changes = this.changes.compose(s.changes);
    let r = [];
    this.changes.iterChangedRanges((s, o, l, a) => r.push(new Tt(s, o, l, a))), this.changedRanges = r;
  }
  /**
  @internal
  */
  static create(e, t, i) {
    return new gl(e, t, i);
  }
  /**
  Tells you whether the [viewport](https://codemirror.net/6/docs/ref/#view.EditorView.viewport) or
  [visible ranges](https://codemirror.net/6/docs/ref/#view.EditorView.visibleRanges) changed in this
  update.
  */
  get viewportChanged() {
    return (this.flags & 4) > 0;
  }
  /**
  Returns true when
  [`viewportChanged`](https://codemirror.net/6/docs/ref/#view.ViewUpdate.viewportChanged) is true
  and the viewport change is not just the result of mapping it in
  response to document changes.
  */
  get viewportMoved() {
    return (this.flags & 8) > 0;
  }
  /**
  Indicates whether the height of a block element in the editor
  changed in this update.
  */
  get heightChanged() {
    return (this.flags & 2) > 0;
  }
  /**
  Returns true when the document was modified or the size of the
  editor, or elements within the editor, changed.
  */
  get geometryChanged() {
    return this.docChanged || (this.flags & 18) > 0;
  }
  /**
  True when this update indicates a focus change.
  */
  get focusChanged() {
    return (this.flags & 1) > 0;
  }
  /**
  Whether the document changed in this update.
  */
  get docChanged() {
    return !this.changes.empty;
  }
  /**
  Whether the selection was explicitly set in this update.
  */
  get selectionSet() {
    return this.transactions.some((e) => e.selection);
  }
  /**
  @internal
  */
  get empty() {
    return this.flags == 0 && this.transactions.length == 0;
  }
}
class eO extends ke {
  get length() {
    return this.view.state.doc.length;
  }
  constructor(e) {
    super(), this.view = e, this.decorations = [], this.dynamicDecorationMap = [!1], this.domChanged = null, this.hasComposition = null, this.markedForComposition = /* @__PURE__ */ new Set(), this.editContextFormatting = F.none, this.lastCompositionAfterCursor = !1, this.minWidth = 0, this.minWidthFrom = 0, this.minWidthTo = 0, this.impreciseAnchor = null, this.impreciseHead = null, this.forceSelection = !1, this.lastUpdate = Date.now(), this.setDOM(e.contentDOM), this.children = [new qe()], this.children[0].setParent(this), this.updateDeco(), this.updateInner([new Tt(0, 0, 0, e.state.doc.length)], 0, null);
  }
  // Update the document view to a given state.
  update(e) {
    var t;
    let i = e.changedRanges;
    this.minWidth > 0 && i.length && (i.every(({ fromA: c, toA: h }) => h < this.minWidthFrom || c > this.minWidthTo) ? (this.minWidthFrom = e.changes.mapPos(this.minWidthFrom, 1), this.minWidthTo = e.changes.mapPos(this.minWidthTo, 1)) : this.minWidth = this.minWidthFrom = this.minWidthTo = 0), this.updateEditContextFormatting(e);
    let r = -1;
    this.view.inputState.composing >= 0 && !this.view.observer.editContext && (!((t = this.domChanged) === null || t === void 0) && t.newSel ? r = this.domChanged.newSel.head : !m$(e.changes, this.hasComposition) && !e.selectionSet && (r = e.state.selection.main.head));
    let s = r > -1 ? f$(this.view, e.changes, r) : null;
    if (this.domChanged = null, this.hasComposition) {
      this.markedForComposition.clear();
      let { from: c, to: h } = this.hasComposition;
      i = new Tt(c, h, e.changes.mapPos(c, -1), e.changes.mapPos(h, 1)).addToSet(i.slice());
    }
    this.hasComposition = s ? { from: s.range.fromB, to: s.range.toB } : null, (W.ie || W.chrome) && !s && e && e.state.doc.lines != e.startState.doc.lines && (this.forceSelection = !0);
    let o = this.decorations, l = this.updateDeco(), a = O$(o, l, e.changes);
    return i = Tt.extendWithRanges(i, a), !(this.flags & 7) && i.length == 0 ? !1 : (this.updateInner(i, e.startState.doc.length, s), e.transactions.length && (this.lastUpdate = Date.now()), !0);
  }
  // Used by update and the constructor do perform the actual DOM
  // update
  updateInner(e, t, i) {
    this.view.viewState.mustMeasureContent = !0, this.updateChildren(e, t, i);
    let { observer: r } = this.view;
    r.ignore(() => {
      this.dom.style.height = this.view.viewState.contentHeight / this.view.scaleY + "px", this.dom.style.flexBasis = this.minWidth ? this.minWidth + "px" : "";
      let o = W.chrome || W.ios ? { node: r.selectionRange.focusNode, written: !1 } : void 0;
      this.sync(this.view, o), this.flags &= -8, o && (o.written || r.selectionRange.focusNode != o.node) && (this.forceSelection = !0), this.dom.style.height = "";
    }), this.markedForComposition.forEach(
      (o) => o.flags &= -9
      /* ViewFlag.Composition */
    );
    let s = [];
    if (this.view.viewport.from || this.view.viewport.to < this.view.state.doc.length)
      for (let o of this.children)
        o instanceof $n && o.widget instanceof vh && s.push(o.dom);
    r.updateGaps(s);
  }
  updateChildren(e, t, i) {
    let r = i ? i.range.addToSet(e.slice()) : e, s = this.childCursor(t);
    for (let o = r.length - 1; ; o--) {
      let l = o >= 0 ? r[o] : null;
      if (!l)
        break;
      let { fromA: a, toA: c, fromB: h, toB: f } = l, u, d, O, p;
      if (i && i.range.fromB < f && i.range.toB > h) {
        let w = Nr.build(this.view.state.doc, h, i.range.fromB, this.decorations, this.dynamicDecorationMap), k = Nr.build(this.view.state.doc, i.range.toB, f, this.decorations, this.dynamicDecorationMap);
        d = w.breakAtStart, O = w.openStart, p = k.openEnd;
        let Q = this.compositionView(i);
        k.breakAtStart ? Q.breakAfter = 1 : k.content.length && Q.merge(Q.length, Q.length, k.content[0], !1, k.openStart, 0) && (Q.breakAfter = k.content[0].breakAfter, k.content.shift()), w.content.length && Q.merge(0, 0, w.content[w.content.length - 1], !0, 0, w.openEnd) && w.content.pop(), u = w.content.concat(Q).concat(k.content);
      } else
        ({ content: u, breakAtStart: d, openStart: O, openEnd: p } = Nr.build(this.view.state.doc, h, f, this.decorations, this.dynamicDecorationMap));
      let { i: m, off: y } = s.findPos(c, 1), { i: S, off: b } = s.findPos(a, -1);
      z0(this, S, b, m, y, u, d, O, p);
    }
    i && this.fixCompositionDOM(i);
  }
  updateEditContextFormatting(e) {
    this.editContextFormatting = this.editContextFormatting.map(e.changes);
    for (let t of e.transactions)
      for (let i of t.effects)
        i.is(hy) && (this.editContextFormatting = i.value);
  }
  compositionView(e) {
    let t = new zt(e.text.nodeValue);
    t.flags |= 8;
    for (let { deco: r } of e.marks)
      t = new En(r, [t], t.length);
    let i = new qe();
    return i.append(t, 0), i;
  }
  fixCompositionDOM(e) {
    let t = (s, o) => {
      o.flags |= 8 | (o.children.some(
        (a) => a.flags & 7
        /* ViewFlag.Dirty */
      ) ? 1 : 0), this.markedForComposition.add(o);
      let l = ke.get(s);
      l && l != o && (l.dom = null), o.setDOM(s);
    }, i = this.childPos(e.range.fromB, 1), r = this.children[i.i];
    t(e.line, r);
    for (let s = e.marks.length - 1; s >= -1; s--)
      i = r.childPos(i.off, 1), r = r.children[i.i], t(s >= 0 ? e.marks[s].node : e.text, r);
  }
  // Sync the DOM selection to this.state.selection
  updateSelection(e = !1, t = !1) {
    (e || !this.view.observer.selectionRange.focusNode) && this.view.observer.readSelectionRange();
    let i = this.view.root.activeElement, r = i == this.dom, s = !r && !(this.view.state.facet(Pn) || this.dom.tabIndex > -1) && Lo(this.dom, this.view.observer.selectionRange) && !(i && this.dom.contains(i));
    if (!(r || t || s))
      return;
    let o = this.forceSelection;
    this.forceSelection = !1;
    let l = this.view.state.selection.main, a = this.moveToLine(this.domAtPos(l.anchor)), c = l.empty ? a : this.moveToLine(this.domAtPos(l.head));
    if (W.gecko && l.empty && !this.hasComposition && h$(a)) {
      let f = document.createTextNode("");
      this.view.observer.ignore(() => a.node.insertBefore(f, a.node.childNodes[a.offset] || null)), a = c = new Je(f, 0), o = !0;
    }
    let h = this.view.observer.selectionRange;
    (o || !h.focusNode || (!Yr(a.node, a.offset, h.anchorNode, h.anchorOffset) || !Yr(c.node, c.offset, h.focusNode, h.focusOffset)) && !this.suppressWidgetCursorChange(h, l)) && (this.view.observer.ignore(() => {
      W.android && W.chrome && this.dom.contains(h.focusNode) && p$(h.focusNode, this.dom) && (this.dom.blur(), this.dom.focus({ preventScroll: !0 }));
      let f = ls(this.view.root);
      if (f) if (l.empty) {
        if (W.gecko) {
          let u = u$(a.node, a.offset);
          if (u && u != 3) {
            let d = (u == 1 ? V0 : B0)(a.node, a.offset);
            d && (a = new Je(d.node, d.offset));
          }
        }
        f.collapse(a.node, a.offset), l.bidiLevel != null && f.caretBidiLevel !== void 0 && (f.caretBidiLevel = l.bidiLevel);
      } else if (f.extend) {
        f.collapse(a.node, a.offset);
        try {
          f.extend(c.node, c.offset);
        } catch {
        }
      } else {
        let u = document.createRange();
        l.anchor > l.head && ([a, c] = [c, a]), u.setEnd(c.node, c.offset), u.setStart(a.node, a.offset), f.removeAllRanges(), f.addRange(u);
      }
      s && this.view.root.activeElement == this.dom && (this.dom.blur(), i && i.focus());
    }), this.view.observer.setSelectionRange(a, c)), this.impreciseAnchor = a.precise ? null : new Je(h.anchorNode, h.anchorOffset), this.impreciseHead = c.precise ? null : new Je(h.focusNode, h.focusOffset);
  }
  // If a zero-length widget is inserted next to the cursor during
  // composition, avoid moving it across it and disrupting the
  // composition.
  suppressWidgetCursorChange(e, t) {
    return this.hasComposition && t.empty && Yr(e.focusNode, e.focusOffset, e.anchorNode, e.anchorOffset) && this.posFromDOM(e.focusNode, e.focusOffset) == t.head;
  }
  enforceCursorAssoc() {
    if (this.hasComposition)
      return;
    let { view: e } = this, t = e.state.selection.main, i = ls(e.root), { anchorNode: r, anchorOffset: s } = e.observer.selectionRange;
    if (!i || !t.empty || !t.assoc || !i.modify)
      return;
    let o = qe.find(this, t.head);
    if (!o)
      return;
    let l = o.posAtStart;
    if (t.head == l || t.head == l + o.length)
      return;
    let a = this.coordsAt(t.head, -1), c = this.coordsAt(t.head, 1);
    if (!a || !c || a.bottom > c.top)
      return;
    let h = this.domAtPos(t.head + t.assoc);
    i.collapse(h.node, h.offset), i.modify("move", t.assoc < 0 ? "forward" : "backward", "lineboundary"), e.observer.readSelectionRange();
    let f = e.observer.selectionRange;
    e.docView.posFromDOM(f.anchorNode, f.anchorOffset) != t.from && i.collapse(r, s);
  }
  // If a position is in/near a block widget, move it to a nearby text
  // line, since we don't want the cursor inside a block widget.
  moveToLine(e) {
    let t = this.dom, i;
    if (e.node != t)
      return e;
    for (let r = e.offset; !i && r < t.childNodes.length; r++) {
      let s = ke.get(t.childNodes[r]);
      s instanceof qe && (i = s.domAtPos(0));
    }
    for (let r = e.offset - 1; !i && r >= 0; r--) {
      let s = ke.get(t.childNodes[r]);
      s instanceof qe && (i = s.domAtPos(s.length));
    }
    return i ? new Je(i.node, i.offset, !0) : e;
  }
  nearest(e) {
    for (let t = e; t; ) {
      let i = ke.get(t);
      if (i && i.rootView == this)
        return i;
      t = t.parentNode;
    }
    return null;
  }
  posFromDOM(e, t) {
    let i = this.nearest(e);
    if (!i)
      throw new RangeError("Trying to find position for a DOM position outside of the document");
    return i.localPosFromDOM(e, t) + i.posAtStart;
  }
  domAtPos(e) {
    let { i: t, off: i } = this.childCursor().findPos(e, -1);
    for (; t < this.children.length - 1; ) {
      let r = this.children[t];
      if (i < r.length || r instanceof qe)
        break;
      t++, i = 0;
    }
    return this.children[t].domAtPos(i);
  }
  coordsAt(e, t) {
    let i = null, r = 0;
    for (let s = this.length, o = this.children.length - 1; o >= 0; o--) {
      let l = this.children[o], a = s - l.breakAfter, c = a - l.length;
      if (a < e)
        break;
      if (c <= e && (c < e || l.covers(-1)) && (a > e || l.covers(1)) && (!i || l instanceof qe && !(i instanceof qe && t >= 0)))
        i = l, r = c;
      else if (i && c == e && a == e && l instanceof $n && Math.abs(t) < 2) {
        if (l.deco.startSide < 0)
          break;
        o && (i = null);
      }
      s = c;
    }
    return i ? i.coordsAt(e - r, t) : null;
  }
  coordsForChar(e) {
    let { i: t, off: i } = this.childPos(e, 1), r = this.children[t];
    if (!(r instanceof qe))
      return null;
    for (; r.children.length; ) {
      let { i: l, off: a } = r.childPos(i, 1);
      for (; ; l++) {
        if (l == r.children.length)
          return null;
        if ((r = r.children[l]).length)
          break;
      }
      i = a;
    }
    if (!(r instanceof zt))
      return null;
    let s = Ge(r.text, i);
    if (s == i)
      return null;
    let o = wi(r.dom, i, s).getClientRects();
    for (let l = 0; l < o.length; l++) {
      let a = o[l];
      if (l == o.length - 1 || a.top < a.bottom && a.left < a.right)
        return a;
    }
    return null;
  }
  measureVisibleLineHeights(e) {
    let t = [], { from: i, to: r } = e, s = this.view.contentDOM.clientWidth, o = s > Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1, l = -1, a = this.view.textDirection == ve.LTR;
    for (let c = 0, h = 0; h < this.children.length; h++) {
      let f = this.children[h], u = c + f.length;
      if (u > r)
        break;
      if (c >= i) {
        let d = f.dom.getBoundingClientRect();
        if (t.push(d.height), o) {
          let O = f.dom.lastChild, p = O ? as(O) : [];
          if (p.length) {
            let m = p[p.length - 1], y = a ? m.right - d.left : d.right - m.left;
            y > l && (l = y, this.minWidth = s, this.minWidthFrom = c, this.minWidthTo = u);
          }
        }
      }
      c = u + f.breakAfter;
    }
    return t;
  }
  textDirectionAt(e) {
    let { i: t } = this.childPos(e, 1);
    return getComputedStyle(this.children[t].dom).direction == "rtl" ? ve.RTL : ve.LTR;
  }
  measureTextSize() {
    for (let s of this.children)
      if (s instanceof qe) {
        let o = s.measureTextSize();
        if (o)
          return o;
      }
    let e = document.createElement("div"), t, i, r;
    return e.className = "cm-line", e.style.width = "99999px", e.style.position = "absolute", e.textContent = "abc def ghi jkl mno pqr stu", this.view.observer.ignore(() => {
      this.dom.appendChild(e);
      let s = as(e.firstChild)[0];
      t = e.getBoundingClientRect().height, i = s ? s.width / 27 : 7, r = s ? s.height : t, e.remove();
    }), { lineHeight: t, charWidth: i, textHeight: r };
  }
  childCursor(e = this.length) {
    let t = this.children.length;
    return t && (e -= this.children[--t].length), new W0(this.children, e, t);
  }
  computeBlockGapDeco() {
    let e = [], t = this.view.viewState;
    for (let i = 0, r = 0; ; r++) {
      let s = r == t.viewports.length ? null : t.viewports[r], o = s ? s.from - 1 : this.length;
      if (o > i) {
        let l = (t.lineBlockAt(o).bottom - t.lineBlockAt(i).top) / this.view.scaleY;
        e.push(F.replace({
          widget: new vh(l),
          block: !0,
          inclusive: !0,
          isBlockGap: !0
        }).range(i, o));
      }
      if (!s)
        break;
      i = s.to + 1;
    }
    return F.set(e);
  }
  updateDeco() {
    let e = 1, t = this.view.state.facet(cs).map((s) => (this.dynamicDecorationMap[e++] = typeof s == "function") ? s(this.view) : s), i = !1, r = this.view.state.facet(uy).map((s, o) => {
      let l = typeof s == "function";
      return l && (i = !0), l ? s(this.view) : s;
    });
    for (r.length && (this.dynamicDecorationMap[e++] = i, t.push(Oe.join(r))), this.decorations = [
      this.editContextFormatting,
      ...t,
      this.computeBlockGapDeco(),
      this.view.viewState.lineGapDeco
    ]; e < this.decorations.length; )
      this.dynamicDecorationMap[e++] = !1;
    return this.decorations;
  }
  scrollIntoView(e) {
    if (e.isSnapshot) {
      let c = this.view.viewState.lineBlockAt(e.range.head);
      this.view.scrollDOM.scrollTop = c.top - e.yMargin, this.view.scrollDOM.scrollLeft = e.xMargin;
      return;
    }
    for (let c of this.view.state.facet(cy))
      try {
        if (c(this.view, e.range, e))
          return !0;
      } catch (h) {
        ht(this.view.state, h, "scroll handler");
      }
    let { range: t } = e, i = this.coordsAt(t.head, t.empty ? t.assoc : t.head > t.anchor ? -1 : 1), r;
    if (!i)
      return;
    !t.empty && (r = this.coordsAt(t.anchor, t.anchor > t.head ? -1 : 1)) && (i = {
      left: Math.min(i.left, r.left),
      top: Math.min(i.top, r.top),
      right: Math.max(i.right, r.right),
      bottom: Math.max(i.bottom, r.bottom)
    });
    let s = eu(this.view), o = {
      left: i.left - s.left,
      top: i.top - s.top,
      right: i.right + s.right,
      bottom: i.bottom + s.bottom
    }, { offsetWidth: l, offsetHeight: a } = this.view.scrollDOM;
    zP(this.view.scrollDOM, o, t.head < t.anchor ? -1 : 1, e.x, e.y, Math.max(Math.min(e.xMargin, l), -l), Math.max(Math.min(e.yMargin, a), -a), this.view.textDirection == ve.LTR);
  }
}
function h$(n) {
  return n.node.nodeType == 1 && n.node.firstChild && (n.offset == 0 || n.node.childNodes[n.offset - 1].contentEditable == "false") && (n.offset == n.node.childNodes.length || n.node.childNodes[n.offset].contentEditable == "false");
}
function py(n, e) {
  let t = n.observer.selectionRange;
  if (!t.focusNode)
    return null;
  let i = V0(t.focusNode, t.focusOffset), r = B0(t.focusNode, t.focusOffset), s = i || r;
  if (r && i && r.node != i.node) {
    let l = ke.get(r.node);
    if (!l || l instanceof zt && l.text != r.node.nodeValue)
      s = r;
    else if (n.docView.lastCompositionAfterCursor) {
      let a = ke.get(i.node);
      !a || a instanceof zt && a.text != i.node.nodeValue || (s = r);
    }
  }
  if (n.docView.lastCompositionAfterCursor = s != i, !s)
    return null;
  let o = e - s.offset;
  return { from: o, to: o + s.node.nodeValue.length, node: s.node };
}
function f$(n, e, t) {
  let i = py(n, t);
  if (!i)
    return null;
  let { node: r, from: s, to: o } = i, l = r.nodeValue;
  if (/[\n\r]/.test(l) || n.state.doc.sliceString(i.from, i.to) != l)
    return null;
  let a = e.invertedDesc, c = new Tt(a.mapPos(s), a.mapPos(o), s, o), h = [];
  for (let f = r.parentNode; ; f = f.parentNode) {
    let u = ke.get(f);
    if (u instanceof En)
      h.push({ node: f, deco: u.mark });
    else {
      if (u instanceof qe || f.nodeName == "DIV" && f.parentNode == n.contentDOM)
        return { range: c, text: r, marks: h, line: f };
      if (f != n.contentDOM)
        h.push({ node: f, deco: new Ms({
          inclusive: !0,
          attributes: KP(f),
          tagName: f.tagName.toLowerCase()
        }) });
      else
        return null;
    }
  }
}
function u$(n, e) {
  return n.nodeType != 1 ? 0 : (e && n.childNodes[e - 1].contentEditable == "false" ? 1 : 0) | (e < n.childNodes.length && n.childNodes[e].contentEditable == "false" ? 2 : 0);
}
let d$ = class {
  constructor() {
    this.changes = [];
  }
  compareRange(e, t) {
    Vo(e, t, this.changes);
  }
  comparePoint(e, t) {
    Vo(e, t, this.changes);
  }
  boundChange(e) {
    Vo(e, e, this.changes);
  }
};
function O$(n, e, t) {
  let i = new d$();
  return Oe.compare(n, e, t, i), i.changes;
}
function p$(n, e) {
  for (let t = n; t && t != e; t = t.assignedSlot || t.parentNode)
    if (t.nodeType == 1 && t.contentEditable == "false")
      return !0;
  return !1;
}
function m$(n, e) {
  let t = !1;
  return e && n.iterChangedRanges((i, r) => {
    i < e.to && r > e.from && (t = !0);
  }), t;
}
function g$(n, e, t = 1) {
  let i = n.charCategorizer(e), r = n.doc.lineAt(e), s = e - r.from;
  if (r.length == 0)
    return $.cursor(e);
  s == 0 ? t = 1 : s == r.length && (t = -1);
  let o = s, l = s;
  t < 0 ? o = Ge(r.text, s, !1) : l = Ge(r.text, s);
  let a = i(r.text.slice(o, l));
  for (; o > 0; ) {
    let c = Ge(r.text, o, !1);
    if (i(r.text.slice(c, o)) != a)
      break;
    o = c;
  }
  for (; l < r.length; ) {
    let c = Ge(r.text, l);
    if (i(r.text.slice(l, c)) != a)
      break;
    l = c;
  }
  return $.range(o + r.from, l + r.from);
}
function y$(n, e) {
  return e.left > n ? e.left - n : Math.max(0, n - e.right);
}
function S$(n, e) {
  return e.top > n ? e.top - n : Math.max(0, n - e.bottom);
}
function Da(n, e) {
  return n.top < e.bottom - 1 && n.bottom > e.top + 1;
}
function tO(n, e) {
  return e < n.top ? { top: e, left: n.left, right: n.right, bottom: n.bottom } : n;
}
function nO(n, e) {
  return e > n.bottom ? { top: n.top, left: n.left, right: n.right, bottom: e } : n;
}
function Rh(n, e, t) {
  let i, r, s, o, l = !1, a, c, h, f;
  for (let O = n.firstChild; O; O = O.nextSibling) {
    let p = as(O);
    for (let m = 0; m < p.length; m++) {
      let y = p[m];
      r && Da(r, y) && (y = tO(nO(y, r.bottom), r.top));
      let S = y$(e, y), b = S$(t, y);
      if (S == 0 && b == 0)
        return O.nodeType == 3 ? iO(O, e, t) : Rh(O, e, t);
      if (!i || o > b || o == b && s > S) {
        i = O, r = y, s = S, o = b;
        let w = b ? t < y.top ? -1 : 1 : S ? e < y.left ? -1 : 1 : 0;
        l = !w || (w > 0 ? m < p.length - 1 : m > 0);
      }
      S == 0 ? t > y.bottom && (!h || h.bottom < y.bottom) ? (a = O, h = y) : t < y.top && (!f || f.top > y.top) && (c = O, f = y) : h && Da(h, y) ? h = nO(h, y.bottom) : f && Da(f, y) && (f = tO(f, y.top));
    }
  }
  if (h && h.bottom >= t ? (i = a, r = h) : f && f.top <= t && (i = c, r = f), !i)
    return { node: n, offset: 0 };
  let u = Math.max(r.left, Math.min(r.right, e));
  if (i.nodeType == 3)
    return iO(i, u, t);
  if (l && i.contentEditable != "false")
    return Rh(i, u, t);
  let d = Array.prototype.indexOf.call(n.childNodes, i) + (e >= (r.left + r.right) / 2 ? 1 : 0);
  return { node: n, offset: d };
}
function iO(n, e, t) {
  let i = n.nodeValue.length, r = -1, s = 1e9, o = 0;
  for (let l = 0; l < i; l++) {
    let a = wi(n, l, l + 1).getClientRects();
    for (let c = 0; c < a.length; c++) {
      let h = a[c];
      if (h.top == h.bottom)
        continue;
      o || (o = e - h.left);
      let f = (h.top > t ? h.top - t : t - h.bottom) - 1;
      if (h.left - 1 <= e && h.right + 1 >= e && f < s) {
        let u = e >= (h.left + h.right) / 2, d = u;
        if ((W.chrome || W.gecko) && wi(n, l).getBoundingClientRect().left == h.right && (d = !u), f <= 0)
          return { node: n, offset: l + (d ? 1 : 0) };
        r = l + (d ? 1 : 0), s = f;
      }
    }
  }
  return { node: n, offset: r > -1 ? r : o > 0 ? n.nodeValue.length : 0 };
}
function my(n, e, t, i = -1) {
  var r, s;
  let o = n.contentDOM.getBoundingClientRect(), l = o.top + n.viewState.paddingTop, a, { docHeight: c } = n.viewState, { x: h, y: f } = e, u = f - l;
  if (u < 0)
    return 0;
  if (u > c)
    return n.state.doc.length;
  for (let w = n.viewState.heightOracle.textHeight / 2, k = !1; a = n.elementAtHeight(u), a.type != st.Text; )
    for (; u = i > 0 ? a.bottom + w : a.top - w, !(u >= 0 && u <= c); ) {
      if (k)
        return t ? null : 0;
      k = !0, i = -i;
    }
  f = l + u;
  let d = a.from;
  if (d < n.viewport.from)
    return n.viewport.from == 0 ? 0 : t ? null : rO(n, o, a, h, f);
  if (d > n.viewport.to)
    return n.viewport.to == n.state.doc.length ? n.state.doc.length : t ? null : rO(n, o, a, h, f);
  let O = n.dom.ownerDocument, p = n.root.elementFromPoint ? n.root : O, m = p.elementFromPoint(h, f);
  m && !n.contentDOM.contains(m) && (m = null), m || (h = Math.max(o.left + 1, Math.min(o.right - 1, h)), m = p.elementFromPoint(h, f), m && !n.contentDOM.contains(m) && (m = null));
  let y, S = -1;
  if (m && ((r = n.docView.nearest(m)) === null || r === void 0 ? void 0 : r.isEditable) != !1) {
    if (O.caretPositionFromPoint) {
      let w = O.caretPositionFromPoint(h, f);
      w && ({ offsetNode: y, offset: S } = w);
    } else if (O.caretRangeFromPoint) {
      let w = O.caretRangeFromPoint(h, f);
      w && ({ startContainer: y, startOffset: S } = w, (!n.contentDOM.contains(y) || W.safari && b$(y, S, h) || W.chrome && Q$(y, S, h)) && (y = void 0));
    }
    y && (S = Math.min(pn(y), S));
  }
  if (!y || !n.docView.dom.contains(y)) {
    let w = qe.find(n.docView, d);
    if (!w)
      return u > a.top + a.height / 2 ? a.to : a.from;
    ({ node: y, offset: S } = Rh(w.dom, h, f));
  }
  let b = n.docView.nearest(y);
  if (!b)
    return null;
  if (b.isWidget && ((s = b.dom) === null || s === void 0 ? void 0 : s.nodeType) == 1) {
    let w = b.dom.getBoundingClientRect();
    return e.y < w.top || e.y <= w.bottom && e.x <= (w.left + w.right) / 2 ? b.posAtStart : b.posAtEnd;
  } else
    return b.localPosFromDOM(y, S) + b.posAtStart;
}
function rO(n, e, t, i, r) {
  let s = Math.round((i - e.left) * n.defaultCharacterWidth);
  if (n.lineWrapping && t.height > n.defaultLineHeight * 1.5) {
    let l = n.viewState.heightOracle.textHeight, a = Math.floor((r - t.top - (n.defaultLineHeight - l) * 0.5) / l);
    s += a * n.viewState.heightOracle.lineLength;
  }
  let o = n.state.sliceDoc(t.from, t.to);
  return t.from + mh(o, s, n.state.tabSize);
}
function b$(n, e, t) {
  let i;
  if (n.nodeType != 3 || e != (i = n.nodeValue.length))
    return !1;
  for (let r = n.nextSibling; r; r = r.nextSibling)
    if (r.nodeType != 1 || r.nodeName != "BR")
      return !1;
  return wi(n, i - 1, i).getBoundingClientRect().left > t;
}
function Q$(n, e, t) {
  if (e != 0)
    return !1;
  for (let r = n; ; ) {
    let s = r.parentNode;
    if (!s || s.nodeType != 1 || s.firstChild != r)
      return !1;
    if (s.classList.contains("cm-line"))
      break;
    r = s;
  }
  let i = n.nodeType == 1 ? n.getBoundingClientRect() : wi(n, 0, Math.max(n.nodeValue.length, 1)).getBoundingClientRect();
  return t - i.left > 5;
}
function Eh(n, e, t) {
  let i = n.lineBlockAt(e);
  if (Array.isArray(i.type)) {
    let r;
    for (let s of i.type) {
      if (s.from > e)
        break;
      if (!(s.to < e)) {
        if (s.from < e && s.to > e)
          return s;
        (!r || s.type == st.Text && (r.type != s.type || (t < 0 ? s.from < e : s.to > e))) && (r = s);
      }
    }
    return r || i;
  }
  return i;
}
function x$(n, e, t, i) {
  let r = Eh(n, e.head, e.assoc || -1), s = !i || r.type != st.Text || !(n.lineWrapping || r.widgetLineBreaks) ? null : n.coordsAtPos(e.assoc < 0 && e.head > r.from ? e.head - 1 : e.head);
  if (s) {
    let o = n.dom.getBoundingClientRect(), l = n.textDirectionAt(r.from), a = n.posAtCoords({
      x: t == (l == ve.LTR) ? o.right - 1 : o.left + 1,
      y: (s.top + s.bottom) / 2
    });
    if (a != null)
      return $.cursor(a, t ? -1 : 1);
  }
  return $.cursor(t ? r.to : r.from, t ? -1 : 1);
}
function sO(n, e, t, i) {
  let r = n.state.doc.lineAt(e.head), s = n.bidiSpans(r), o = n.textDirectionAt(r.from);
  for (let l = e, a = null; ; ) {
    let c = l$(r, s, o, l, t), h = ey;
    if (!c) {
      if (r.number == (t ? n.state.doc.lines : 1))
        return l;
      h = `
`, r = n.state.doc.line(r.number + (t ? 1 : -1)), s = n.bidiSpans(r), c = n.visualLineSide(r, !t);
    }
    if (a) {
      if (!a(h))
        return l;
    } else {
      if (!i)
        return c;
      a = i(h);
    }
    l = c;
  }
}
function k$(n, e, t) {
  let i = n.state.charCategorizer(e), r = i(t);
  return (s) => {
    let o = i(s);
    return r == Te.Space && (r = o), r == o;
  };
}
function w$(n, e, t, i) {
  let r = e.head, s = t ? 1 : -1;
  if (r == (t ? n.state.doc.length : 0))
    return $.cursor(r, e.assoc);
  let o = e.goalColumn, l, a = n.contentDOM.getBoundingClientRect(), c = n.coordsAtPos(r, e.assoc || -1), h = n.documentTop;
  if (c)
    o == null && (o = c.left - a.left), l = s < 0 ? c.top : c.bottom;
  else {
    let d = n.viewState.lineBlockAt(r);
    o == null && (o = Math.min(a.right - a.left, n.defaultCharacterWidth * (r - d.from))), l = (s < 0 ? d.top : d.bottom) + h;
  }
  let f = a.left + o, u = i ?? n.viewState.heightOracle.textHeight >> 1;
  for (let d = 0; ; d += 10) {
    let O = l + (u + d) * s, p = my(n, { x: f, y: O }, !1, s);
    if (O < a.top || O > a.bottom || (s < 0 ? p < r : p > r)) {
      let m = n.docView.coordsForChar(p), y = !m || O < m.top ? -1 : 1;
      return $.cursor(p, y, void 0, o);
    }
  }
}
function Bo(n, e, t) {
  for (; ; ) {
    let i = 0;
    for (let r of n)
      r.between(e - 1, e + 1, (s, o, l) => {
        if (e > s && e < o) {
          let a = i || t || (e - s < o - e ? -1 : 1);
          e = a < 0 ? s : o, i = a;
        }
      });
    if (!i)
      return e;
  }
}
function Ia(n, e, t) {
  let i = Bo(n.state.facet(Jf).map((r) => r(n)), t.from, e.head > t.from ? -1 : 1);
  return i == t.from ? t : $.cursor(i, i < t.from ? 1 : -1);
}
const Lr = "￿";
class v$ {
  constructor(e, t) {
    this.points = e, this.text = "", this.lineSeparator = t.facet(ue.lineSeparator);
  }
  append(e) {
    this.text += e;
  }
  lineBreak() {
    this.text += Lr;
  }
  readRange(e, t) {
    if (!e)
      return this;
    let i = e.parentNode;
    for (let r = e; ; ) {
      this.findPointBefore(i, r);
      let s = this.text.length;
      this.readNode(r);
      let o = r.nextSibling;
      if (o == t)
        break;
      let l = ke.get(r), a = ke.get(o);
      (l && a ? l.breakAfter : (l ? l.breakAfter : pl(r)) || pl(o) && (r.nodeName != "BR" || r.cmIgnore) && this.text.length > s) && this.lineBreak(), r = o;
    }
    return this.findPointBefore(i, t), this;
  }
  readTextNode(e) {
    let t = e.nodeValue;
    for (let i of this.points)
      i.node == e && (i.pos = this.text.length + Math.min(i.offset, t.length));
    for (let i = 0, r = this.lineSeparator ? null : /\r\n?|\n/g; ; ) {
      let s = -1, o = 1, l;
      if (this.lineSeparator ? (s = t.indexOf(this.lineSeparator, i), o = this.lineSeparator.length) : (l = r.exec(t)) && (s = l.index, o = l[0].length), this.append(t.slice(i, s < 0 ? t.length : s)), s < 0)
        break;
      if (this.lineBreak(), o > 1)
        for (let a of this.points)
          a.node == e && a.pos > this.text.length && (a.pos -= o - 1);
      i = s + o;
    }
  }
  readNode(e) {
    if (e.cmIgnore)
      return;
    let t = ke.get(e), i = t && t.overrideDOMText;
    if (i != null) {
      this.findPointInside(e, i.length);
      for (let r = i.iter(); !r.next().done; )
        r.lineBreak ? this.lineBreak() : this.append(r.value);
    } else e.nodeType == 3 ? this.readTextNode(e) : e.nodeName == "BR" ? e.nextSibling && this.lineBreak() : e.nodeType == 1 && this.readRange(e.firstChild, null);
  }
  findPointBefore(e, t) {
    for (let i of this.points)
      i.node == e && e.childNodes[i.offset] == t && (i.pos = this.text.length);
  }
  findPointInside(e, t) {
    for (let i of this.points)
      (e.nodeType == 3 ? i.node == e : e.contains(i.node)) && (i.pos = this.text.length + (P$(e, i.node, i.offset) ? t : 0));
  }
}
function P$(n, e, t) {
  for (; ; ) {
    if (!e || t < pn(e))
      return !1;
    if (e == n)
      return !0;
    t = ki(e) + 1, e = e.parentNode;
  }
}
class oO {
  constructor(e, t) {
    this.node = e, this.offset = t, this.pos = -1;
  }
}
class $$ {
  constructor(e, t, i, r) {
    this.typeOver = r, this.bounds = null, this.text = "", this.domChanged = t > -1;
    let { impreciseHead: s, impreciseAnchor: o } = e.docView;
    if (e.state.readOnly && t > -1)
      this.newSel = null;
    else if (t > -1 && (this.bounds = e.docView.domBoundsAround(t, i, 0))) {
      let l = s || o ? [] : R$(e), a = new v$(l, e.state);
      a.readRange(this.bounds.startDOM, this.bounds.endDOM), this.text = a.text, this.newSel = E$(l, this.bounds.from);
    } else {
      let l = e.observer.selectionRange, a = s && s.node == l.focusNode && s.offset == l.focusOffset || !Sh(e.contentDOM, l.focusNode) ? e.state.selection.main.head : e.docView.posFromDOM(l.focusNode, l.focusOffset), c = o && o.node == l.anchorNode && o.offset == l.anchorOffset || !Sh(e.contentDOM, l.anchorNode) ? e.state.selection.main.anchor : e.docView.posFromDOM(l.anchorNode, l.anchorOffset), h = e.viewport;
      if ((W.ios || W.chrome) && e.state.selection.main.empty && a != c && (h.from > 0 || h.to < e.state.doc.length)) {
        let f = Math.min(a, c), u = Math.max(a, c), d = h.from - f, O = h.to - u;
        (d == 0 || d == 1 || f == 0) && (O == 0 || O == -1 || u == e.state.doc.length) && (a = 0, c = e.state.doc.length);
      }
      this.newSel = $.single(c, a);
    }
  }
}
function gy(n, e) {
  let t, { newSel: i } = e, r = n.state.selection.main, s = n.inputState.lastKeyTime > Date.now() - 100 ? n.inputState.lastKeyCode : -1;
  if (e.bounds) {
    let { from: o, to: l } = e.bounds, a = r.from, c = null;
    (s === 8 || W.android && e.text.length < l - o) && (a = r.to, c = "end");
    let h = C$(n.state.doc.sliceString(o, l, Lr), e.text, a - o, c);
    h && (W.chrome && s == 13 && h.toB == h.from + 2 && e.text.slice(h.from, h.toB) == Lr + Lr && h.toB--, t = {
      from: o + h.from,
      to: o + h.toA,
      insert: de.of(e.text.slice(h.from, h.toB).split(Lr))
    });
  } else i && (!n.hasFocus && n.state.facet(Pn) || i.main.eq(r)) && (i = null);
  if (!t && !i)
    return !1;
  if (!t && e.typeOver && !r.empty && i && i.main.empty ? t = { from: r.from, to: r.to, insert: n.state.doc.slice(r.from, r.to) } : (W.mac || W.android) && t && t.from == t.to && t.from == r.head - 1 && /^\. ?$/.test(t.insert.toString()) && n.contentDOM.getAttribute("autocorrect") == "off" ? (i && t.insert.length == 2 && (i = $.single(i.main.anchor - 1, i.main.head - 1)), t = { from: t.from, to: t.to, insert: de.of([t.insert.toString().replace(".", " ")]) }) : t && t.from >= r.from && t.to <= r.to && (t.from != r.from || t.to != r.to) && r.to - r.from - (t.to - t.from) <= 4 ? t = {
    from: r.from,
    to: r.to,
    insert: n.state.doc.slice(r.from, t.from).append(t.insert).append(n.state.doc.slice(t.to, r.to))
  } : W.chrome && t && t.from == t.to && t.from == r.head && t.insert.toString() == `
 ` && n.lineWrapping && (i && (i = $.single(i.main.anchor - 1, i.main.head - 1)), t = { from: r.from, to: r.to, insert: de.of([" "]) }), t)
    return tu(n, t, i, s);
  if (i && !i.main.eq(r)) {
    let o = !1, l = "select";
    return n.inputState.lastSelectionTime > Date.now() - 50 && (n.inputState.lastSelectionOrigin == "select" && (o = !0), l = n.inputState.lastSelectionOrigin), n.dispatch({ selection: i, scrollIntoView: o, userEvent: l }), !0;
  } else
    return !1;
}
function tu(n, e, t, i = -1) {
  if (W.ios && n.inputState.flushIOSKey(e))
    return !0;
  let r = n.state.selection.main;
  if (W.android && (e.to == r.to && // GBoard will sometimes remove a space it just inserted
  // after a completion when you press enter
  (e.from == r.from || e.from == r.from - 1 && n.state.sliceDoc(e.from, r.from) == " ") && e.insert.length == 1 && e.insert.lines == 2 && ji(n.contentDOM, "Enter", 13) || (e.from == r.from - 1 && e.to == r.to && e.insert.length == 0 || i == 8 && e.insert.length < e.to - e.from && e.to > r.head) && ji(n.contentDOM, "Backspace", 8) || e.from == r.from && e.to == r.to + 1 && e.insert.length == 0 && ji(n.contentDOM, "Delete", 46)))
    return !0;
  let s = e.insert.toString();
  n.inputState.composing >= 0 && n.inputState.composing++;
  let o, l = () => o || (o = T$(n, e, t));
  return n.state.facet(sy).some((a) => a(n, e.from, e.to, s, l)) || n.dispatch(l()), !0;
}
function T$(n, e, t) {
  let i, r = n.state, s = r.selection.main;
  if (e.from >= s.from && e.to <= s.to && e.to - e.from >= (s.to - s.from) / 3 && (!t || t.main.empty && t.main.from == e.from + e.insert.length) && n.inputState.composing < 0) {
    let l = s.from < e.from ? r.sliceDoc(s.from, e.from) : "", a = s.to > e.to ? r.sliceDoc(e.to, s.to) : "";
    i = r.replaceSelection(n.state.toText(l + e.insert.sliceString(0, void 0, n.state.lineBreak) + a));
  } else {
    let l = r.changes(e), a = t && t.main.to <= l.newLength ? t.main : void 0;
    if (r.selection.ranges.length > 1 && n.inputState.composing >= 0 && e.to <= s.to && e.to >= s.to - 10) {
      let c = n.state.sliceDoc(e.from, e.to), h, f = t && py(n, t.main.head);
      if (f) {
        let O = e.insert.length - (e.to - e.from);
        h = { from: f.from, to: f.to - O };
      } else
        h = n.state.doc.lineAt(s.head);
      let u = s.to - e.to, d = s.to - s.from;
      i = r.changeByRange((O) => {
        if (O.from == s.from && O.to == s.to)
          return { changes: l, range: a || O.map(l) };
        let p = O.to - u, m = p - c.length;
        if (O.to - O.from != d || n.state.sliceDoc(m, p) != c || // Unfortunately, there's no way to make multiple
        // changes in the same node work without aborting
        // composition, so cursors in the composition range are
        // ignored.
        O.to >= h.from && O.from <= h.to)
          return { range: O };
        let y = r.changes({ from: m, to: p, insert: e.insert }), S = O.to - s.to;
        return {
          changes: y,
          range: a ? $.range(Math.max(0, a.anchor + S), Math.max(0, a.head + S)) : O.map(y)
        };
      });
    } else
      i = {
        changes: l,
        selection: a && r.selection.replaceRange(a)
      };
  }
  let o = "input.type";
  return (n.composing || n.inputState.compositionPendingChange && n.inputState.compositionEndedAt > Date.now() - 50) && (n.inputState.compositionPendingChange = !1, o += ".compose", n.inputState.compositionFirstChange && (o += ".start", n.inputState.compositionFirstChange = !1)), r.update(i, { userEvent: o, scrollIntoView: !0 });
}
function C$(n, e, t, i) {
  let r = Math.min(n.length, e.length), s = 0;
  for (; s < r && n.charCodeAt(s) == e.charCodeAt(s); )
    s++;
  if (s == r && n.length == e.length)
    return null;
  let o = n.length, l = e.length;
  for (; o > 0 && l > 0 && n.charCodeAt(o - 1) == e.charCodeAt(l - 1); )
    o--, l--;
  if (i == "end") {
    let a = Math.max(0, s - Math.min(o, l));
    t -= o + a - s;
  }
  if (o < s && n.length < e.length) {
    let a = t <= s && t >= o ? s - t : 0;
    s -= a, l = s + (l - o), o = s;
  } else if (l < s) {
    let a = t <= s && t >= l ? s - t : 0;
    s -= a, o = s + (o - l), l = s;
  }
  return { from: s, toA: o, toB: l };
}
function R$(n) {
  let e = [];
  if (n.root.activeElement != n.contentDOM)
    return e;
  let { anchorNode: t, anchorOffset: i, focusNode: r, focusOffset: s } = n.observer.selectionRange;
  return t && (e.push(new oO(t, i)), (r != t || s != i) && e.push(new oO(r, s))), e;
}
function E$(n, e) {
  if (n.length == 0)
    return null;
  let t = n[0].pos, i = n.length == 2 ? n[1].pos : t;
  return t > -1 && i > -1 ? $.single(t + e, i + e) : null;
}
class A$ {
  setSelectionOrigin(e) {
    this.lastSelectionOrigin = e, this.lastSelectionTime = Date.now();
  }
  constructor(e) {
    this.view = e, this.lastKeyCode = 0, this.lastKeyTime = 0, this.lastTouchTime = 0, this.lastFocusTime = 0, this.lastScrollTop = 0, this.lastScrollLeft = 0, this.pendingIOSKey = void 0, this.tabFocusMode = -1, this.lastSelectionOrigin = null, this.lastSelectionTime = 0, this.lastContextMenu = 0, this.scrollHandlers = [], this.handlers = /* @__PURE__ */ Object.create(null), this.composing = -1, this.compositionFirstChange = null, this.compositionEndedAt = 0, this.compositionPendingKey = !1, this.compositionPendingChange = !1, this.mouseSelection = null, this.draggedContent = null, this.handleEvent = this.handleEvent.bind(this), this.notifiedFocused = e.hasFocus, W.safari && e.contentDOM.addEventListener("input", () => null), W.gecko && N$(e.contentDOM.ownerDocument);
  }
  handleEvent(e) {
    !B$(this.view, e) || this.ignoreDuringComposition(e) || e.type == "keydown" && this.keydown(e) || (this.view.updateState != 0 ? Promise.resolve().then(() => this.runHandlers(e.type, e)) : this.runHandlers(e.type, e));
  }
  runHandlers(e, t) {
    let i = this.handlers[e];
    if (i) {
      for (let r of i.observers)
        r(this.view, t);
      for (let r of i.handlers) {
        if (t.defaultPrevented)
          break;
        if (r(this.view, t)) {
          t.preventDefault();
          break;
        }
      }
    }
  }
  ensureHandlers(e) {
    let t = _$(e), i = this.handlers, r = this.view.contentDOM;
    for (let s in t)
      if (s != "scroll") {
        let o = !t[s].handlers.length, l = i[s];
        l && o != !l.handlers.length && (r.removeEventListener(s, this.handleEvent), l = null), l || r.addEventListener(s, this.handleEvent, { passive: o });
      }
    for (let s in i)
      s != "scroll" && !t[s] && r.removeEventListener(s, this.handleEvent);
    this.handlers = t;
  }
  keydown(e) {
    if (this.lastKeyCode = e.keyCode, this.lastKeyTime = Date.now(), e.keyCode == 9 && this.tabFocusMode > -1 && (!this.tabFocusMode || Date.now() <= this.tabFocusMode))
      return !0;
    if (this.tabFocusMode > 0 && e.keyCode != 27 && Sy.indexOf(e.keyCode) < 0 && (this.tabFocusMode = -1), W.android && W.chrome && !e.synthetic && (e.keyCode == 13 || e.keyCode == 8))
      return this.view.observer.delayAndroidKey(e.key, e.keyCode), !0;
    let t;
    return W.ios && !e.synthetic && !e.altKey && !e.metaKey && ((t = yy.find((i) => i.keyCode == e.keyCode)) && !e.ctrlKey || X$.indexOf(e.key) > -1 && e.ctrlKey && !e.shiftKey) ? (this.pendingIOSKey = t || e, setTimeout(() => this.flushIOSKey(), 250), !0) : (e.keyCode != 229 && this.view.observer.forceFlush(), !1);
  }
  flushIOSKey(e) {
    let t = this.pendingIOSKey;
    return !t || t.key == "Enter" && e && e.from < e.to && /^\S+$/.test(e.insert.toString()) ? !1 : (this.pendingIOSKey = void 0, ji(this.view.contentDOM, t.key, t.keyCode, t instanceof KeyboardEvent ? t : void 0));
  }
  ignoreDuringComposition(e) {
    return /^key/.test(e.type) ? this.composing > 0 ? !0 : W.safari && !W.ios && this.compositionPendingKey && Date.now() - this.compositionEndedAt < 100 ? (this.compositionPendingKey = !1, !0) : !1 : !1;
  }
  startMouseSelection(e) {
    this.mouseSelection && this.mouseSelection.destroy(), this.mouseSelection = e;
  }
  update(e) {
    this.view.observer.update(e), this.mouseSelection && this.mouseSelection.update(e), this.draggedContent && e.docChanged && (this.draggedContent = this.draggedContent.map(e.changes)), e.transactions.length && (this.lastKeyCode = this.lastSelectionTime = 0);
  }
  destroy() {
    this.mouseSelection && this.mouseSelection.destroy();
  }
}
function lO(n, e) {
  return (t, i) => {
    try {
      return e.call(n, i, t);
    } catch (r) {
      ht(t.state, r);
    }
  };
}
function _$(n) {
  let e = /* @__PURE__ */ Object.create(null);
  function t(i) {
    return e[i] || (e[i] = { observers: [], handlers: [] });
  }
  for (let i of n) {
    let r = i.spec, s = r && r.plugin.domEventHandlers, o = r && r.plugin.domEventObservers;
    if (s)
      for (let l in s) {
        let a = s[l];
        a && t(l).handlers.push(lO(i.value, a));
      }
    if (o)
      for (let l in o) {
        let a = o[l];
        a && t(l).observers.push(lO(i.value, a));
      }
  }
  for (let i in Dt)
    t(i).handlers.push(Dt[i]);
  for (let i in Rt)
    t(i).observers.push(Rt[i]);
  return e;
}
const yy = [
  { key: "Backspace", keyCode: 8, inputType: "deleteContentBackward" },
  { key: "Enter", keyCode: 13, inputType: "insertParagraph" },
  { key: "Enter", keyCode: 13, inputType: "insertLineBreak" },
  { key: "Delete", keyCode: 46, inputType: "deleteContentForward" }
], X$ = "dthko", Sy = [16, 17, 18, 20, 91, 92, 224, 225], so = 6;
function oo(n) {
  return Math.max(0, n) * 0.7 + 8;
}
function q$(n, e) {
  return Math.max(Math.abs(n.clientX - e.clientX), Math.abs(n.clientY - e.clientY));
}
class Z$ {
  constructor(e, t, i, r) {
    this.view = e, this.startEvent = t, this.style = i, this.mustSelect = r, this.scrollSpeed = { x: 0, y: 0 }, this.scrolling = -1, this.lastEvent = t, this.scrollParents = DP(e.contentDOM), this.atoms = e.state.facet(Jf).map((o) => o(e));
    let s = e.contentDOM.ownerDocument;
    s.addEventListener("mousemove", this.move = this.move.bind(this)), s.addEventListener("mouseup", this.up = this.up.bind(this)), this.extend = t.shiftKey, this.multiple = e.state.facet(ue.allowMultipleSelections) && M$(e, t), this.dragging = V$(e, t) && xy(t) == 1 ? null : !1;
  }
  start(e) {
    this.dragging === !1 && this.select(e);
  }
  move(e) {
    if (e.buttons == 0)
      return this.destroy();
    if (this.dragging || this.dragging == null && q$(this.startEvent, e) < 10)
      return;
    this.select(this.lastEvent = e);
    let t = 0, i = 0, r = 0, s = 0, o = this.view.win.innerWidth, l = this.view.win.innerHeight;
    this.scrollParents.x && ({ left: r, right: o } = this.scrollParents.x.getBoundingClientRect()), this.scrollParents.y && ({ top: s, bottom: l } = this.scrollParents.y.getBoundingClientRect());
    let a = eu(this.view);
    e.clientX - a.left <= r + so ? t = -oo(r - e.clientX) : e.clientX + a.right >= o - so && (t = oo(e.clientX - o)), e.clientY - a.top <= s + so ? i = -oo(s - e.clientY) : e.clientY + a.bottom >= l - so && (i = oo(e.clientY - l)), this.setScrollSpeed(t, i);
  }
  up(e) {
    this.dragging == null && this.select(this.lastEvent), this.dragging || e.preventDefault(), this.destroy();
  }
  destroy() {
    this.setScrollSpeed(0, 0);
    let e = this.view.contentDOM.ownerDocument;
    e.removeEventListener("mousemove", this.move), e.removeEventListener("mouseup", this.up), this.view.inputState.mouseSelection = this.view.inputState.draggedContent = null;
  }
  setScrollSpeed(e, t) {
    this.scrollSpeed = { x: e, y: t }, e || t ? this.scrolling < 0 && (this.scrolling = setInterval(() => this.scroll(), 50)) : this.scrolling > -1 && (clearInterval(this.scrolling), this.scrolling = -1);
  }
  scroll() {
    let { x: e, y: t } = this.scrollSpeed;
    e && this.scrollParents.x && (this.scrollParents.x.scrollLeft += e, e = 0), t && this.scrollParents.y && (this.scrollParents.y.scrollTop += t, t = 0), (e || t) && this.view.win.scrollBy(e, t), this.dragging === !1 && this.select(this.lastEvent);
  }
  skipAtoms(e) {
    let t = null;
    for (let i = 0; i < e.ranges.length; i++) {
      let r = e.ranges[i], s = null;
      if (r.empty) {
        let o = Bo(this.atoms, r.from, 0);
        o != r.from && (s = $.cursor(o, -1));
      } else {
        let o = Bo(this.atoms, r.from, -1), l = Bo(this.atoms, r.to, 1);
        (o != r.from || l != r.to) && (s = $.range(r.from == r.anchor ? o : l, r.from == r.head ? o : l));
      }
      s && (t || (t = e.ranges.slice()), t[i] = s);
    }
    return t ? $.create(t, e.mainIndex) : e;
  }
  select(e) {
    let { view: t } = this, i = this.skipAtoms(this.style.get(e, this.extend, this.multiple));
    (this.mustSelect || !i.eq(t.state.selection, this.dragging === !1)) && this.view.dispatch({
      selection: i,
      userEvent: "select.pointer"
    }), this.mustSelect = !1;
  }
  update(e) {
    e.transactions.some((t) => t.isUserEvent("input.type")) ? this.destroy() : this.style.update(e) && setTimeout(() => this.select(this.lastEvent), 20);
  }
}
function M$(n, e) {
  let t = n.state.facet(ty);
  return t.length ? t[0](e) : W.mac ? e.metaKey : e.ctrlKey;
}
function L$(n, e) {
  let t = n.state.facet(ny);
  return t.length ? t[0](e) : W.mac ? !e.altKey : !e.ctrlKey;
}
function V$(n, e) {
  let { main: t } = n.state.selection;
  if (t.empty)
    return !1;
  let i = ls(n.root);
  if (!i || i.rangeCount == 0)
    return !0;
  let r = i.getRangeAt(0).getClientRects();
  for (let s = 0; s < r.length; s++) {
    let o = r[s];
    if (o.left <= e.clientX && o.right >= e.clientX && o.top <= e.clientY && o.bottom >= e.clientY)
      return !0;
  }
  return !1;
}
function B$(n, e) {
  if (!e.bubbles)
    return !0;
  if (e.defaultPrevented)
    return !1;
  for (let t = e.target, i; t != n.contentDOM; t = t.parentNode)
    if (!t || t.nodeType == 11 || (i = ke.get(t)) && i.ignoreEvent(e))
      return !1;
  return !0;
}
const Dt = /* @__PURE__ */ Object.create(null), Rt = /* @__PURE__ */ Object.create(null), by = W.ie && W.ie_version < 15 || W.ios && W.webkit_version < 604;
function W$(n) {
  let e = n.dom.parentNode;
  if (!e)
    return;
  let t = e.appendChild(document.createElement("textarea"));
  t.style.cssText = "position: fixed; left: -10000px; top: 10px", t.focus(), setTimeout(() => {
    n.focus(), t.remove(), Qy(n, t.value);
  }, 50);
}
function oa(n, e, t) {
  for (let i of n.facet(e))
    t = i(t, n);
  return t;
}
function Qy(n, e) {
  e = oa(n.state, Ff, e);
  let { state: t } = n, i, r = 1, s = t.toText(e), o = s.lines == t.selection.ranges.length;
  if (Ah != null && t.selection.ranges.every((a) => a.empty) && Ah == s.toString()) {
    let a = -1;
    i = t.changeByRange((c) => {
      let h = t.doc.lineAt(c.from);
      if (h.from == a)
        return { range: c };
      a = h.from;
      let f = t.toText((o ? s.line(r++).text : e) + t.lineBreak);
      return {
        changes: { from: h.from, insert: f },
        range: $.cursor(c.from + f.length)
      };
    });
  } else o ? i = t.changeByRange((a) => {
    let c = s.line(r++);
    return {
      changes: { from: a.from, to: a.to, insert: c.text },
      range: $.cursor(a.from + c.length)
    };
  }) : i = t.replaceSelection(s);
  n.dispatch(i, {
    userEvent: "input.paste",
    scrollIntoView: !0
  });
}
Rt.scroll = (n) => {
  n.inputState.lastScrollTop = n.scrollDOM.scrollTop, n.inputState.lastScrollLeft = n.scrollDOM.scrollLeft;
};
Dt.keydown = (n, e) => (n.inputState.setSelectionOrigin("select"), e.keyCode == 27 && n.inputState.tabFocusMode != 0 && (n.inputState.tabFocusMode = Date.now() + 2e3), !1);
Rt.touchstart = (n, e) => {
  n.inputState.lastTouchTime = Date.now(), n.inputState.setSelectionOrigin("select.pointer");
};
Rt.touchmove = (n) => {
  n.inputState.setSelectionOrigin("select.pointer");
};
Dt.mousedown = (n, e) => {
  if (n.observer.flush(), n.inputState.lastTouchTime > Date.now() - 2e3)
    return !1;
  let t = null;
  for (let i of n.state.facet(iy))
    if (t = i(n, e), t)
      break;
  if (!t && e.button == 0 && (t = I$(n, e)), t) {
    let i = !n.hasFocus;
    n.inputState.startMouseSelection(new Z$(n, e, t, i)), i && n.observer.ignore(() => {
      Z0(n.contentDOM);
      let s = n.root.activeElement;
      s && !s.contains(n.contentDOM) && s.blur();
    });
    let r = n.inputState.mouseSelection;
    if (r)
      return r.start(e), r.dragging === !1;
  }
  return !1;
};
function aO(n, e, t, i) {
  if (i == 1)
    return $.cursor(e, t);
  if (i == 2)
    return g$(n.state, e, t);
  {
    let r = qe.find(n.docView, e), s = n.state.doc.lineAt(r ? r.posAtEnd : e), o = r ? r.posAtStart : s.from, l = r ? r.posAtEnd : s.to;
    return l < n.state.doc.length && l == s.to && l++, $.range(o, l);
  }
}
let cO = (n, e, t) => e >= t.top && e <= t.bottom && n >= t.left && n <= t.right;
function z$(n, e, t, i) {
  let r = qe.find(n.docView, e);
  if (!r)
    return 1;
  let s = e - r.posAtStart;
  if (s == 0)
    return 1;
  if (s == r.length)
    return -1;
  let o = r.coordsAt(s, -1);
  if (o && cO(t, i, o))
    return -1;
  let l = r.coordsAt(s, 1);
  return l && cO(t, i, l) ? 1 : o && o.bottom >= i ? -1 : 1;
}
function hO(n, e) {
  let t = n.posAtCoords({ x: e.clientX, y: e.clientY }, !1);
  return { pos: t, bias: z$(n, t, e.clientX, e.clientY) };
}
const D$ = W.ie && W.ie_version <= 11;
let fO = null, uO = 0, dO = 0;
function xy(n) {
  if (!D$)
    return n.detail;
  let e = fO, t = dO;
  return fO = n, dO = Date.now(), uO = !e || t > Date.now() - 400 && Math.abs(e.clientX - n.clientX) < 2 && Math.abs(e.clientY - n.clientY) < 2 ? (uO + 1) % 3 : 1;
}
function I$(n, e) {
  let t = hO(n, e), i = xy(e), r = n.state.selection;
  return {
    update(s) {
      s.docChanged && (t.pos = s.changes.mapPos(t.pos), r = r.map(s.changes));
    },
    get(s, o, l) {
      let a = hO(n, s), c, h = aO(n, a.pos, a.bias, i);
      if (t.pos != a.pos && !o) {
        let f = aO(n, t.pos, t.bias, i), u = Math.min(f.from, h.from), d = Math.max(f.to, h.to);
        h = u < h.from ? $.range(u, d) : $.range(d, u);
      }
      return o ? r.replaceRange(r.main.extend(h.from, h.to)) : l && i == 1 && r.ranges.length > 1 && (c = j$(r, a.pos)) ? c : l ? r.addRange(h) : $.create([h]);
    }
  };
}
function j$(n, e) {
  for (let t = 0; t < n.ranges.length; t++) {
    let { from: i, to: r } = n.ranges[t];
    if (i <= e && r >= e)
      return $.create(n.ranges.slice(0, t).concat(n.ranges.slice(t + 1)), n.mainIndex == t ? 0 : n.mainIndex - (n.mainIndex > t ? 1 : 0));
  }
  return null;
}
Dt.dragstart = (n, e) => {
  let { selection: { main: t } } = n.state;
  if (e.target.draggable) {
    let r = n.docView.nearest(e.target);
    if (r && r.isWidget) {
      let s = r.posAtStart, o = s + r.length;
      (s >= t.to || o <= t.from) && (t = $.range(s, o));
    }
  }
  let { inputState: i } = n;
  return i.mouseSelection && (i.mouseSelection.dragging = !0), i.draggedContent = t, e.dataTransfer && (e.dataTransfer.setData("Text", oa(n.state, Hf, n.state.sliceDoc(t.from, t.to))), e.dataTransfer.effectAllowed = "copyMove"), !1;
};
Dt.dragend = (n) => (n.inputState.draggedContent = null, !1);
function OO(n, e, t, i) {
  if (t = oa(n.state, Ff, t), !t)
    return;
  let r = n.posAtCoords({ x: e.clientX, y: e.clientY }, !1), { draggedContent: s } = n.inputState, o = i && s && L$(n, e) ? { from: s.from, to: s.to } : null, l = { from: r, insert: t }, a = n.state.changes(o ? [o, l] : l);
  n.focus(), n.dispatch({
    changes: a,
    selection: { anchor: a.mapPos(r, -1), head: a.mapPos(r, 1) },
    userEvent: o ? "move.drop" : "input.drop"
  }), n.inputState.draggedContent = null;
}
Dt.drop = (n, e) => {
  if (!e.dataTransfer)
    return !1;
  if (n.state.readOnly)
    return !0;
  let t = e.dataTransfer.files;
  if (t && t.length) {
    let i = Array(t.length), r = 0, s = () => {
      ++r == t.length && OO(n, e, i.filter((o) => o != null).join(n.state.lineBreak), !1);
    };
    for (let o = 0; o < t.length; o++) {
      let l = new FileReader();
      l.onerror = s, l.onload = () => {
        /[\x00-\x08\x0e-\x1f]{2}/.test(l.result) || (i[o] = l.result), s();
      }, l.readAsText(t[o]);
    }
    return !0;
  } else {
    let i = e.dataTransfer.getData("Text");
    if (i)
      return OO(n, e, i, !0), !0;
  }
  return !1;
};
Dt.paste = (n, e) => {
  if (n.state.readOnly)
    return !0;
  n.observer.flush();
  let t = by ? null : e.clipboardData;
  return t ? (Qy(n, t.getData("text/plain") || t.getData("text/uri-list")), !0) : (W$(n), !1);
};
function U$(n, e) {
  let t = n.dom.parentNode;
  if (!t)
    return;
  let i = t.appendChild(document.createElement("textarea"));
  i.style.cssText = "position: fixed; left: -10000px; top: 10px", i.value = e, i.focus(), i.selectionEnd = e.length, i.selectionStart = 0, setTimeout(() => {
    i.remove(), n.focus();
  }, 50);
}
function Y$(n) {
  let e = [], t = [], i = !1;
  for (let r of n.selection.ranges)
    r.empty || (e.push(n.sliceDoc(r.from, r.to)), t.push(r));
  if (!e.length) {
    let r = -1;
    for (let { from: s } of n.selection.ranges) {
      let o = n.doc.lineAt(s);
      o.number > r && (e.push(o.text), t.push({ from: o.from, to: Math.min(n.doc.length, o.to + 1) })), r = o.number;
    }
    i = !0;
  }
  return { text: oa(n, Hf, e.join(n.lineBreak)), ranges: t, linewise: i };
}
let Ah = null;
Dt.copy = Dt.cut = (n, e) => {
  let { text: t, ranges: i, linewise: r } = Y$(n.state);
  if (!t && !r)
    return !1;
  Ah = r ? t : null, e.type == "cut" && !n.state.readOnly && n.dispatch({
    changes: i,
    scrollIntoView: !0,
    userEvent: "delete.cut"
  });
  let s = by ? null : e.clipboardData;
  return s ? (s.clearData(), s.setData("text/plain", t), !0) : (U$(n, t), !1);
};
const ky = /* @__PURE__ */ qn.define();
function wy(n, e) {
  let t = [];
  for (let i of n.facet(oy)) {
    let r = i(n, e);
    r && t.push(r);
  }
  return t.length ? n.update({ effects: t, annotations: ky.of(!0) }) : null;
}
function vy(n) {
  setTimeout(() => {
    let e = n.hasFocus;
    if (e != n.inputState.notifiedFocused) {
      let t = wy(n.state, e);
      t ? n.dispatch(t) : n.update([]);
    }
  }, 10);
}
Rt.focus = (n) => {
  n.inputState.lastFocusTime = Date.now(), !n.scrollDOM.scrollTop && (n.inputState.lastScrollTop || n.inputState.lastScrollLeft) && (n.scrollDOM.scrollTop = n.inputState.lastScrollTop, n.scrollDOM.scrollLeft = n.inputState.lastScrollLeft), vy(n);
};
Rt.blur = (n) => {
  n.observer.clearSelectionRange(), vy(n);
};
Rt.compositionstart = Rt.compositionupdate = (n) => {
  n.observer.editContext || (n.inputState.compositionFirstChange == null && (n.inputState.compositionFirstChange = !0), n.inputState.composing < 0 && (n.inputState.composing = 0));
};
Rt.compositionend = (n) => {
  n.observer.editContext || (n.inputState.composing = -1, n.inputState.compositionEndedAt = Date.now(), n.inputState.compositionPendingKey = !0, n.inputState.compositionPendingChange = n.observer.pendingRecords().length > 0, n.inputState.compositionFirstChange = null, W.chrome && W.android ? n.observer.flushSoon() : n.inputState.compositionPendingChange ? Promise.resolve().then(() => n.observer.flush()) : setTimeout(() => {
    n.inputState.composing < 0 && n.docView.hasComposition && n.update([]);
  }, 50));
};
Rt.contextmenu = (n) => {
  n.inputState.lastContextMenu = Date.now();
};
Dt.beforeinput = (n, e) => {
  var t, i;
  if (e.inputType == "insertReplacementText" && n.observer.editContext) {
    let s = (t = e.dataTransfer) === null || t === void 0 ? void 0 : t.getData("text/plain"), o = e.getTargetRanges();
    if (s && o.length) {
      let l = o[0], a = n.posAtDOM(l.startContainer, l.startOffset), c = n.posAtDOM(l.endContainer, l.endOffset);
      return tu(n, { from: a, to: c, insert: n.state.toText(s) }, null), !0;
    }
  }
  let r;
  if (W.chrome && W.android && (r = yy.find((s) => s.inputType == e.inputType)) && (n.observer.delayAndroidKey(r.key, r.keyCode), r.key == "Backspace" || r.key == "Delete")) {
    let s = ((i = window.visualViewport) === null || i === void 0 ? void 0 : i.height) || 0;
    setTimeout(() => {
      var o;
      (((o = window.visualViewport) === null || o === void 0 ? void 0 : o.height) || 0) > s + 10 && n.hasFocus && (n.contentDOM.blur(), n.focus());
    }, 100);
  }
  return W.ios && e.inputType == "deleteContentForward" && n.observer.flushSoon(), W.safari && e.inputType == "insertText" && n.inputState.composing >= 0 && setTimeout(() => Rt.compositionend(n, e), 20), !1;
};
const pO = /* @__PURE__ */ new Set();
function N$(n) {
  pO.has(n) || (pO.add(n), n.addEventListener("copy", () => {
  }), n.addEventListener("cut", () => {
  }));
}
const mO = ["pre-wrap", "normal", "pre-line", "break-spaces"];
let er = !1;
function gO() {
  er = !1;
}
class G$ {
  constructor(e) {
    this.lineWrapping = e, this.doc = de.empty, this.heightSamples = {}, this.lineHeight = 14, this.charWidth = 7, this.textHeight = 14, this.lineLength = 30;
  }
  heightForGap(e, t) {
    let i = this.doc.lineAt(t).number - this.doc.lineAt(e).number + 1;
    return this.lineWrapping && (i += Math.max(0, Math.ceil((t - e - i * this.lineLength * 0.5) / this.lineLength))), this.lineHeight * i;
  }
  heightForLine(e) {
    return this.lineWrapping ? (1 + Math.max(0, Math.ceil((e - this.lineLength) / (this.lineLength - 5)))) * this.lineHeight : this.lineHeight;
  }
  setDoc(e) {
    return this.doc = e, this;
  }
  mustRefreshForWrapping(e) {
    return mO.indexOf(e) > -1 != this.lineWrapping;
  }
  mustRefreshForHeights(e) {
    let t = !1;
    for (let i = 0; i < e.length; i++) {
      let r = e[i];
      r < 0 ? i++ : this.heightSamples[Math.floor(r * 10)] || (t = !0, this.heightSamples[Math.floor(r * 10)] = !0);
    }
    return t;
  }
  refresh(e, t, i, r, s, o) {
    let l = mO.indexOf(e) > -1, a = Math.round(t) != Math.round(this.lineHeight) || this.lineWrapping != l;
    if (this.lineWrapping = l, this.lineHeight = t, this.charWidth = i, this.textHeight = r, this.lineLength = s, a) {
      this.heightSamples = {};
      for (let c = 0; c < o.length; c++) {
        let h = o[c];
        h < 0 ? c++ : this.heightSamples[Math.floor(h * 10)] = !0;
      }
    }
    return a;
  }
}
class F$ {
  constructor(e, t) {
    this.from = e, this.heights = t, this.index = 0;
  }
  get more() {
    return this.index < this.heights.length;
  }
}
class ln {
  /**
  @internal
  */
  constructor(e, t, i, r, s) {
    this.from = e, this.length = t, this.top = i, this.height = r, this._content = s;
  }
  /**
  The type of element this is. When querying lines, this may be
  an array of all the blocks that make up the line.
  */
  get type() {
    return typeof this._content == "number" ? st.Text : Array.isArray(this._content) ? this._content : this._content.type;
  }
  /**
  The end of the element as a document position.
  */
  get to() {
    return this.from + this.length;
  }
  /**
  The bottom position of the element.
  */
  get bottom() {
    return this.top + this.height;
  }
  /**
  If this is a widget block, this will return the widget
  associated with it.
  */
  get widget() {
    return this._content instanceof Fn ? this._content.widget : null;
  }
  /**
  If this is a textblock, this holds the number of line breaks
  that appear in widgets inside the block.
  */
  get widgetLineBreaks() {
    return typeof this._content == "number" ? this._content : 0;
  }
  /**
  @internal
  */
  join(e) {
    let t = (Array.isArray(this._content) ? this._content : [this]).concat(Array.isArray(e._content) ? e._content : [e]);
    return new ln(this.from, this.length + e.length, this.top, this.height + e.height, t);
  }
}
var we = /* @__PURE__ */ function(n) {
  return n[n.ByPos = 0] = "ByPos", n[n.ByHeight = 1] = "ByHeight", n[n.ByPosNoHeight = 2] = "ByPosNoHeight", n;
}(we || (we = {}));
const Wo = 1e-3;
class ot {
  constructor(e, t, i = 2) {
    this.length = e, this.height = t, this.flags = i;
  }
  get outdated() {
    return (this.flags & 2) > 0;
  }
  set outdated(e) {
    this.flags = (e ? 2 : 0) | this.flags & -3;
  }
  setHeight(e) {
    this.height != e && (Math.abs(this.height - e) > Wo && (er = !0), this.height = e);
  }
  // Base case is to replace a leaf node, which simply builds a tree
  // from the new nodes and returns that (HeightMapBranch and
  // HeightMapGap override this to actually use from/to)
  replace(e, t, i) {
    return ot.of(i);
  }
  // Again, these are base cases, and are overridden for branch and gap nodes.
  decomposeLeft(e, t) {
    t.push(this);
  }
  decomposeRight(e, t) {
    t.push(this);
  }
  applyChanges(e, t, i, r) {
    let s = this, o = i.doc;
    for (let l = r.length - 1; l >= 0; l--) {
      let { fromA: a, toA: c, fromB: h, toB: f } = r[l], u = s.lineAt(a, we.ByPosNoHeight, i.setDoc(t), 0, 0), d = u.to >= c ? u : s.lineAt(c, we.ByPosNoHeight, i, 0, 0);
      for (f += d.to - c, c = d.to; l > 0 && u.from <= r[l - 1].toA; )
        a = r[l - 1].fromA, h = r[l - 1].fromB, l--, a < u.from && (u = s.lineAt(a, we.ByPosNoHeight, i, 0, 0));
      h += u.from - a, a = u.from;
      let O = nu.build(i.setDoc(o), e, h, f);
      s = yl(s, s.replace(a, c, O));
    }
    return s.updateHeight(i, 0);
  }
  static empty() {
    return new gt(0, 0);
  }
  // nodes uses null values to indicate the position of line breaks.
  // There are never line breaks at the start or end of the array, or
  // two line breaks next to each other, and the array isn't allowed
  // to be empty (same restrictions as return value from the builder).
  static of(e) {
    if (e.length == 1)
      return e[0];
    let t = 0, i = e.length, r = 0, s = 0;
    for (; ; )
      if (t == i)
        if (r > s * 2) {
          let l = e[t - 1];
          l.break ? e.splice(--t, 1, l.left, null, l.right) : e.splice(--t, 1, l.left, l.right), i += 1 + l.break, r -= l.size;
        } else if (s > r * 2) {
          let l = e[i];
          l.break ? e.splice(i, 1, l.left, null, l.right) : e.splice(i, 1, l.left, l.right), i += 2 + l.break, s -= l.size;
        } else
          break;
      else if (r < s) {
        let l = e[t++];
        l && (r += l.size);
      } else {
        let l = e[--i];
        l && (s += l.size);
      }
    let o = 0;
    return e[t - 1] == null ? (o = 1, t--) : e[t] == null && (o = 1, i++), new H$(ot.of(e.slice(0, t)), o, ot.of(e.slice(i)));
  }
}
function yl(n, e) {
  return n == e ? n : (n.constructor != e.constructor && (er = !0), e);
}
ot.prototype.size = 1;
class Py extends ot {
  constructor(e, t, i) {
    super(e, t), this.deco = i;
  }
  blockAt(e, t, i, r) {
    return new ln(r, this.length, i, this.height, this.deco || 0);
  }
  lineAt(e, t, i, r, s) {
    return this.blockAt(0, i, r, s);
  }
  forEachLine(e, t, i, r, s, o) {
    e <= s + this.length && t >= s && o(this.blockAt(0, i, r, s));
  }
  updateHeight(e, t = 0, i = !1, r) {
    return r && r.from <= t && r.more && this.setHeight(r.heights[r.index++]), this.outdated = !1, this;
  }
  toString() {
    return `block(${this.length})`;
  }
}
class gt extends Py {
  constructor(e, t) {
    super(e, t, null), this.collapsed = 0, this.widgetHeight = 0, this.breaks = 0;
  }
  blockAt(e, t, i, r) {
    return new ln(r, this.length, i, this.height, this.breaks);
  }
  replace(e, t, i) {
    let r = i[0];
    return i.length == 1 && (r instanceof gt || r instanceof Ue && r.flags & 4) && Math.abs(this.length - r.length) < 10 ? (r instanceof Ue ? r = new gt(r.length, this.height) : r.height = this.height, this.outdated || (r.outdated = !1), r) : ot.of(i);
  }
  updateHeight(e, t = 0, i = !1, r) {
    return r && r.from <= t && r.more ? this.setHeight(r.heights[r.index++]) : (i || this.outdated) && this.setHeight(Math.max(this.widgetHeight, e.heightForLine(this.length - this.collapsed)) + this.breaks * e.lineHeight), this.outdated = !1, this;
  }
  toString() {
    return `line(${this.length}${this.collapsed ? -this.collapsed : ""}${this.widgetHeight ? ":" + this.widgetHeight : ""})`;
  }
}
class Ue extends ot {
  constructor(e) {
    super(e, 0);
  }
  heightMetrics(e, t) {
    let i = e.doc.lineAt(t).number, r = e.doc.lineAt(t + this.length).number, s = r - i + 1, o, l = 0;
    if (e.lineWrapping) {
      let a = Math.min(this.height, e.lineHeight * s);
      o = a / s, this.length > s + 1 && (l = (this.height - a) / (this.length - s - 1));
    } else
      o = this.height / s;
    return { firstLine: i, lastLine: r, perLine: o, perChar: l };
  }
  blockAt(e, t, i, r) {
    let { firstLine: s, lastLine: o, perLine: l, perChar: a } = this.heightMetrics(t, r);
    if (t.lineWrapping) {
      let c = r + (e < t.lineHeight ? 0 : Math.round(Math.max(0, Math.min(1, (e - i) / this.height)) * this.length)), h = t.doc.lineAt(c), f = l + h.length * a, u = Math.max(i, e - f / 2);
      return new ln(h.from, h.length, u, f, 0);
    } else {
      let c = Math.max(0, Math.min(o - s, Math.floor((e - i) / l))), { from: h, length: f } = t.doc.line(s + c);
      return new ln(h, f, i + l * c, l, 0);
    }
  }
  lineAt(e, t, i, r, s) {
    if (t == we.ByHeight)
      return this.blockAt(e, i, r, s);
    if (t == we.ByPosNoHeight) {
      let { from: d, to: O } = i.doc.lineAt(e);
      return new ln(d, O - d, 0, 0, 0);
    }
    let { firstLine: o, perLine: l, perChar: a } = this.heightMetrics(i, s), c = i.doc.lineAt(e), h = l + c.length * a, f = c.number - o, u = r + l * f + a * (c.from - s - f);
    return new ln(c.from, c.length, Math.max(r, Math.min(u, r + this.height - h)), h, 0);
  }
  forEachLine(e, t, i, r, s, o) {
    e = Math.max(e, s), t = Math.min(t, s + this.length);
    let { firstLine: l, perLine: a, perChar: c } = this.heightMetrics(i, s);
    for (let h = e, f = r; h <= t; ) {
      let u = i.doc.lineAt(h);
      if (h == e) {
        let O = u.number - l;
        f += a * O + c * (e - s - O);
      }
      let d = a + c * u.length;
      o(new ln(u.from, u.length, f, d, 0)), f += d, h = u.to + 1;
    }
  }
  replace(e, t, i) {
    let r = this.length - t;
    if (r > 0) {
      let s = i[i.length - 1];
      s instanceof Ue ? i[i.length - 1] = new Ue(s.length + r) : i.push(null, new Ue(r - 1));
    }
    if (e > 0) {
      let s = i[0];
      s instanceof Ue ? i[0] = new Ue(e + s.length) : i.unshift(new Ue(e - 1), null);
    }
    return ot.of(i);
  }
  decomposeLeft(e, t) {
    t.push(new Ue(e - 1), null);
  }
  decomposeRight(e, t) {
    t.push(null, new Ue(this.length - e - 1));
  }
  updateHeight(e, t = 0, i = !1, r) {
    let s = t + this.length;
    if (r && r.from <= t + this.length && r.more) {
      let o = [], l = Math.max(t, r.from), a = -1;
      for (r.from > t && o.push(new Ue(r.from - t - 1).updateHeight(e, t)); l <= s && r.more; ) {
        let h = e.doc.lineAt(l).length;
        o.length && o.push(null);
        let f = r.heights[r.index++];
        a == -1 ? a = f : Math.abs(f - a) >= Wo && (a = -2);
        let u = new gt(h, f);
        u.outdated = !1, o.push(u), l += h + 1;
      }
      l <= s && o.push(null, new Ue(s - l).updateHeight(e, l));
      let c = ot.of(o);
      return (a < 0 || Math.abs(c.height - this.height) >= Wo || Math.abs(a - this.heightMetrics(e, t).perLine) >= Wo) && (er = !0), yl(this, c);
    } else (i || this.outdated) && (this.setHeight(e.heightForGap(t, t + this.length)), this.outdated = !1);
    return this;
  }
  toString() {
    return `gap(${this.length})`;
  }
}
class H$ extends ot {
  constructor(e, t, i) {
    super(e.length + t + i.length, e.height + i.height, t | (e.outdated || i.outdated ? 2 : 0)), this.left = e, this.right = i, this.size = e.size + i.size;
  }
  get break() {
    return this.flags & 1;
  }
  blockAt(e, t, i, r) {
    let s = i + this.left.height;
    return e < s ? this.left.blockAt(e, t, i, r) : this.right.blockAt(e, t, s, r + this.left.length + this.break);
  }
  lineAt(e, t, i, r, s) {
    let o = r + this.left.height, l = s + this.left.length + this.break, a = t == we.ByHeight ? e < o : e < l, c = a ? this.left.lineAt(e, t, i, r, s) : this.right.lineAt(e, t, i, o, l);
    if (this.break || (a ? c.to < l : c.from > l))
      return c;
    let h = t == we.ByPosNoHeight ? we.ByPosNoHeight : we.ByPos;
    return a ? c.join(this.right.lineAt(l, h, i, o, l)) : this.left.lineAt(l, h, i, r, s).join(c);
  }
  forEachLine(e, t, i, r, s, o) {
    let l = r + this.left.height, a = s + this.left.length + this.break;
    if (this.break)
      e < a && this.left.forEachLine(e, t, i, r, s, o), t >= a && this.right.forEachLine(e, t, i, l, a, o);
    else {
      let c = this.lineAt(a, we.ByPos, i, r, s);
      e < c.from && this.left.forEachLine(e, c.from - 1, i, r, s, o), c.to >= e && c.from <= t && o(c), t > c.to && this.right.forEachLine(c.to + 1, t, i, l, a, o);
    }
  }
  replace(e, t, i) {
    let r = this.left.length + this.break;
    if (t < r)
      return this.balanced(this.left.replace(e, t, i), this.right);
    if (e > this.left.length)
      return this.balanced(this.left, this.right.replace(e - r, t - r, i));
    let s = [];
    e > 0 && this.decomposeLeft(e, s);
    let o = s.length;
    for (let l of i)
      s.push(l);
    if (e > 0 && yO(s, o - 1), t < this.length) {
      let l = s.length;
      this.decomposeRight(t, s), yO(s, l);
    }
    return ot.of(s);
  }
  decomposeLeft(e, t) {
    let i = this.left.length;
    if (e <= i)
      return this.left.decomposeLeft(e, t);
    t.push(this.left), this.break && (i++, e >= i && t.push(null)), e > i && this.right.decomposeLeft(e - i, t);
  }
  decomposeRight(e, t) {
    let i = this.left.length, r = i + this.break;
    if (e >= r)
      return this.right.decomposeRight(e - r, t);
    e < i && this.left.decomposeRight(e, t), this.break && e < r && t.push(null), t.push(this.right);
  }
  balanced(e, t) {
    return e.size > 2 * t.size || t.size > 2 * e.size ? ot.of(this.break ? [e, null, t] : [e, t]) : (this.left = yl(this.left, e), this.right = yl(this.right, t), this.setHeight(e.height + t.height), this.outdated = e.outdated || t.outdated, this.size = e.size + t.size, this.length = e.length + this.break + t.length, this);
  }
  updateHeight(e, t = 0, i = !1, r) {
    let { left: s, right: o } = this, l = t + s.length + this.break, a = null;
    return r && r.from <= t + s.length && r.more ? a = s = s.updateHeight(e, t, i, r) : s.updateHeight(e, t, i), r && r.from <= l + o.length && r.more ? a = o = o.updateHeight(e, l, i, r) : o.updateHeight(e, l, i), a ? this.balanced(s, o) : (this.height = this.left.height + this.right.height, this.outdated = !1, this);
  }
  toString() {
    return this.left + (this.break ? " " : "-") + this.right;
  }
}
function yO(n, e) {
  let t, i;
  n[e] == null && (t = n[e - 1]) instanceof Ue && (i = n[e + 1]) instanceof Ue && n.splice(e - 1, 3, new Ue(t.length + 1 + i.length));
}
const K$ = 5;
class nu {
  constructor(e, t) {
    this.pos = e, this.oracle = t, this.nodes = [], this.lineStart = -1, this.lineEnd = -1, this.covering = null, this.writtenTo = e;
  }
  get isCovered() {
    return this.covering && this.nodes[this.nodes.length - 1] == this.covering;
  }
  span(e, t) {
    if (this.lineStart > -1) {
      let i = Math.min(t, this.lineEnd), r = this.nodes[this.nodes.length - 1];
      r instanceof gt ? r.length += i - this.pos : (i > this.pos || !this.isCovered) && this.nodes.push(new gt(i - this.pos, -1)), this.writtenTo = i, t > i && (this.nodes.push(null), this.writtenTo++, this.lineStart = -1);
    }
    this.pos = t;
  }
  point(e, t, i) {
    if (e < t || i.heightRelevant) {
      let r = i.widget ? i.widget.estimatedHeight : 0, s = i.widget ? i.widget.lineBreaks : 0;
      r < 0 && (r = this.oracle.lineHeight);
      let o = t - e;
      i.block ? this.addBlock(new Py(o, r, i)) : (o || s || r >= K$) && this.addLineDeco(r, s, o);
    } else t > e && this.span(e, t);
    this.lineEnd > -1 && this.lineEnd < this.pos && (this.lineEnd = this.oracle.doc.lineAt(this.pos).to);
  }
  enterLine() {
    if (this.lineStart > -1)
      return;
    let { from: e, to: t } = this.oracle.doc.lineAt(this.pos);
    this.lineStart = e, this.lineEnd = t, this.writtenTo < e && ((this.writtenTo < e - 1 || this.nodes[this.nodes.length - 1] == null) && this.nodes.push(this.blankContent(this.writtenTo, e - 1)), this.nodes.push(null)), this.pos > e && this.nodes.push(new gt(this.pos - e, -1)), this.writtenTo = this.pos;
  }
  blankContent(e, t) {
    let i = new Ue(t - e);
    return this.oracle.doc.lineAt(e).to == t && (i.flags |= 4), i;
  }
  ensureLine() {
    this.enterLine();
    let e = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;
    if (e instanceof gt)
      return e;
    let t = new gt(0, -1);
    return this.nodes.push(t), t;
  }
  addBlock(e) {
    this.enterLine();
    let t = e.deco;
    t && t.startSide > 0 && !this.isCovered && this.ensureLine(), this.nodes.push(e), this.writtenTo = this.pos = this.pos + e.length, t && t.endSide > 0 && (this.covering = e);
  }
  addLineDeco(e, t, i) {
    let r = this.ensureLine();
    r.length += i, r.collapsed += i, r.widgetHeight = Math.max(r.widgetHeight, e), r.breaks += t, this.writtenTo = this.pos = this.pos + i;
  }
  finish(e) {
    let t = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];
    this.lineStart > -1 && !(t instanceof gt) && !this.isCovered ? this.nodes.push(new gt(0, -1)) : (this.writtenTo < this.pos || t == null) && this.nodes.push(this.blankContent(this.writtenTo, this.pos));
    let i = e;
    for (let r of this.nodes)
      r instanceof gt && r.updateHeight(this.oracle, i), i += r ? r.length : 1;
    return this.nodes;
  }
  // Always called with a region that on both sides either stretches
  // to a line break or the end of the document.
  // The returned array uses null to indicate line breaks, but never
  // starts or ends in a line break, or has multiple line breaks next
  // to each other.
  static build(e, t, i, r) {
    let s = new nu(i, e);
    return Oe.spans(t, i, r, s, 0), s.finish(i);
  }
}
function J$(n, e, t) {
  let i = new eT();
  return Oe.compare(n, e, t, i, 0), i.changes;
}
class eT {
  constructor() {
    this.changes = [];
  }
  compareRange() {
  }
  comparePoint(e, t, i, r) {
    (e < t || i && i.heightRelevant || r && r.heightRelevant) && Vo(e, t, this.changes, 5);
  }
}
function tT(n, e) {
  let t = n.getBoundingClientRect(), i = n.ownerDocument, r = i.defaultView || window, s = Math.max(0, t.left), o = Math.min(r.innerWidth, t.right), l = Math.max(0, t.top), a = Math.min(r.innerHeight, t.bottom);
  for (let c = n.parentNode; c && c != i.body; )
    if (c.nodeType == 1) {
      let h = c, f = window.getComputedStyle(h);
      if ((h.scrollHeight > h.clientHeight || h.scrollWidth > h.clientWidth) && f.overflow != "visible") {
        let u = h.getBoundingClientRect();
        s = Math.max(s, u.left), o = Math.min(o, u.right), l = Math.max(l, u.top), a = Math.min(c == n.parentNode ? r.innerHeight : a, u.bottom);
      }
      c = f.position == "absolute" || f.position == "fixed" ? h.offsetParent : h.parentNode;
    } else if (c.nodeType == 11)
      c = c.host;
    else
      break;
  return {
    left: s - t.left,
    right: Math.max(s, o) - t.left,
    top: l - (t.top + e),
    bottom: Math.max(l, a) - (t.top + e)
  };
}
function nT(n) {
  let e = n.getBoundingClientRect(), t = n.ownerDocument.defaultView || window;
  return e.left < t.innerWidth && e.right > 0 && e.top < t.innerHeight && e.bottom > 0;
}
function iT(n, e) {
  let t = n.getBoundingClientRect();
  return {
    left: 0,
    right: t.right - t.left,
    top: e,
    bottom: t.bottom - (t.top + e)
  };
}
class ja {
  constructor(e, t, i, r) {
    this.from = e, this.to = t, this.size = i, this.displaySize = r;
  }
  static same(e, t) {
    if (e.length != t.length)
      return !1;
    for (let i = 0; i < e.length; i++) {
      let r = e[i], s = t[i];
      if (r.from != s.from || r.to != s.to || r.size != s.size)
        return !1;
    }
    return !0;
  }
  draw(e, t) {
    return F.replace({
      widget: new rT(this.displaySize * (t ? e.scaleY : e.scaleX), t)
    }).range(this.from, this.to);
  }
}
class rT extends Zn {
  constructor(e, t) {
    super(), this.size = e, this.vertical = t;
  }
  eq(e) {
    return e.size == this.size && e.vertical == this.vertical;
  }
  toDOM() {
    let e = document.createElement("div");
    return this.vertical ? e.style.height = this.size + "px" : (e.style.width = this.size + "px", e.style.height = "2px", e.style.display = "inline-block"), e;
  }
  get estimatedHeight() {
    return this.vertical ? this.size : -1;
  }
}
class SO {
  constructor(e) {
    this.state = e, this.pixelViewport = { left: 0, right: window.innerWidth, top: 0, bottom: 0 }, this.inView = !0, this.paddingTop = 0, this.paddingBottom = 0, this.contentDOMWidth = 0, this.contentDOMHeight = 0, this.editorHeight = 0, this.editorWidth = 0, this.scrollTop = 0, this.scrolledToBottom = !1, this.scaleX = 1, this.scaleY = 1, this.scrollAnchorPos = 0, this.scrollAnchorHeight = -1, this.scaler = bO, this.scrollTarget = null, this.printing = !1, this.mustMeasureContent = !0, this.defaultTextDirection = ve.LTR, this.visibleRanges = [], this.mustEnforceCursorAssoc = !1;
    let t = e.facet(Kf).some((i) => typeof i != "function" && i.class == "cm-lineWrapping");
    this.heightOracle = new G$(t), this.stateDeco = e.facet(cs).filter((i) => typeof i != "function"), this.heightMap = ot.empty().applyChanges(this.stateDeco, de.empty, this.heightOracle.setDoc(e.doc), [new Tt(0, 0, 0, e.doc.length)]);
    for (let i = 0; i < 2 && (this.viewport = this.getViewport(0, null), !!this.updateForViewport()); i++)
      ;
    this.updateViewportLines(), this.lineGaps = this.ensureLineGaps([]), this.lineGapDeco = F.set(this.lineGaps.map((i) => i.draw(this, !1))), this.computeVisibleRanges();
  }
  updateForViewport() {
    let e = [this.viewport], { main: t } = this.state.selection;
    for (let i = 0; i <= 1; i++) {
      let r = i ? t.head : t.anchor;
      if (!e.some(({ from: s, to: o }) => r >= s && r <= o)) {
        let { from: s, to: o } = this.lineBlockAt(r);
        e.push(new lo(s, o));
      }
    }
    return this.viewports = e.sort((i, r) => i.from - r.from), this.updateScaler();
  }
  updateScaler() {
    let e = this.scaler;
    return this.scaler = this.heightMap.height <= 7e6 ? bO : new iu(this.heightOracle, this.heightMap, this.viewports), e.eq(this.scaler) ? 0 : 2;
  }
  updateViewportLines() {
    this.viewportLines = [], this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.heightOracle.setDoc(this.state.doc), 0, 0, (e) => {
      this.viewportLines.push(Vr(e, this.scaler));
    });
  }
  update(e, t = null) {
    this.state = e.state;
    let i = this.stateDeco;
    this.stateDeco = this.state.facet(cs).filter((h) => typeof h != "function");
    let r = e.changedRanges, s = Tt.extendWithRanges(r, J$(i, this.stateDeco, e ? e.changes : Be.empty(this.state.doc.length))), o = this.heightMap.height, l = this.scrolledToBottom ? null : this.scrollAnchorAt(this.scrollTop);
    gO(), this.heightMap = this.heightMap.applyChanges(this.stateDeco, e.startState.doc, this.heightOracle.setDoc(this.state.doc), s), (this.heightMap.height != o || er) && (e.flags |= 2), l ? (this.scrollAnchorPos = e.changes.mapPos(l.from, -1), this.scrollAnchorHeight = l.top) : (this.scrollAnchorPos = -1, this.scrollAnchorHeight = o);
    let a = s.length ? this.mapViewport(this.viewport, e.changes) : this.viewport;
    (t && (t.range.head < a.from || t.range.head > a.to) || !this.viewportIsAppropriate(a)) && (a = this.getViewport(0, t));
    let c = a.from != this.viewport.from || a.to != this.viewport.to;
    this.viewport = a, e.flags |= this.updateForViewport(), (c || !e.changes.empty || e.flags & 2) && this.updateViewportLines(), (this.lineGaps.length || this.viewport.to - this.viewport.from > 4e3) && this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, e.changes))), e.flags |= this.computeVisibleRanges(e.changes), t && (this.scrollTarget = t), !this.mustEnforceCursorAssoc && e.selectionSet && e.view.lineWrapping && e.state.selection.main.empty && e.state.selection.main.assoc && !e.state.facet(ay) && (this.mustEnforceCursorAssoc = !0);
  }
  measure(e) {
    let t = e.contentDOM, i = window.getComputedStyle(t), r = this.heightOracle, s = i.whiteSpace;
    this.defaultTextDirection = i.direction == "rtl" ? ve.RTL : ve.LTR;
    let o = this.heightOracle.mustRefreshForWrapping(s), l = t.getBoundingClientRect(), a = o || this.mustMeasureContent || this.contentDOMHeight != l.height;
    this.contentDOMHeight = l.height, this.mustMeasureContent = !1;
    let c = 0, h = 0;
    if (l.width && l.height) {
      let { scaleX: w, scaleY: k } = q0(t, l);
      (w > 5e-3 && Math.abs(this.scaleX - w) > 5e-3 || k > 5e-3 && Math.abs(this.scaleY - k) > 5e-3) && (this.scaleX = w, this.scaleY = k, c |= 16, o = a = !0);
    }
    let f = (parseInt(i.paddingTop) || 0) * this.scaleY, u = (parseInt(i.paddingBottom) || 0) * this.scaleY;
    (this.paddingTop != f || this.paddingBottom != u) && (this.paddingTop = f, this.paddingBottom = u, c |= 18), this.editorWidth != e.scrollDOM.clientWidth && (r.lineWrapping && (a = !0), this.editorWidth = e.scrollDOM.clientWidth, c |= 16);
    let d = e.scrollDOM.scrollTop * this.scaleY;
    this.scrollTop != d && (this.scrollAnchorHeight = -1, this.scrollTop = d), this.scrolledToBottom = L0(e.scrollDOM);
    let O = (this.printing ? iT : tT)(t, this.paddingTop), p = O.top - this.pixelViewport.top, m = O.bottom - this.pixelViewport.bottom;
    this.pixelViewport = O;
    let y = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;
    if (y != this.inView && (this.inView = y, y && (a = !0)), !this.inView && !this.scrollTarget && !nT(e.dom))
      return 0;
    let S = l.width;
    if ((this.contentDOMWidth != S || this.editorHeight != e.scrollDOM.clientHeight) && (this.contentDOMWidth = l.width, this.editorHeight = e.scrollDOM.clientHeight, c |= 16), a) {
      let w = e.docView.measureVisibleLineHeights(this.viewport);
      if (r.mustRefreshForHeights(w) && (o = !0), o || r.lineWrapping && Math.abs(S - this.contentDOMWidth) > r.charWidth) {
        let { lineHeight: k, charWidth: Q, textHeight: P } = e.docView.measureTextSize();
        o = k > 0 && r.refresh(s, k, Q, P, S / Q, w), o && (e.docView.minWidth = 0, c |= 16);
      }
      p > 0 && m > 0 ? h = Math.max(p, m) : p < 0 && m < 0 && (h = Math.min(p, m)), gO();
      for (let k of this.viewports) {
        let Q = k.from == this.viewport.from ? w : e.docView.measureVisibleLineHeights(k);
        this.heightMap = (o ? ot.empty().applyChanges(this.stateDeco, de.empty, this.heightOracle, [new Tt(0, 0, 0, e.state.doc.length)]) : this.heightMap).updateHeight(r, 0, o, new F$(k.from, Q));
      }
      er && (c |= 2);
    }
    let b = !this.viewportIsAppropriate(this.viewport, h) || this.scrollTarget && (this.scrollTarget.range.head < this.viewport.from || this.scrollTarget.range.head > this.viewport.to);
    return b && (c & 2 && (c |= this.updateScaler()), this.viewport = this.getViewport(h, this.scrollTarget), c |= this.updateForViewport()), (c & 2 || b) && this.updateViewportLines(), (this.lineGaps.length || this.viewport.to - this.viewport.from > 4e3) && this.updateLineGaps(this.ensureLineGaps(o ? [] : this.lineGaps, e)), c |= this.computeVisibleRanges(), this.mustEnforceCursorAssoc && (this.mustEnforceCursorAssoc = !1, e.docView.enforceCursorAssoc()), c;
  }
  get visibleTop() {
    return this.scaler.fromDOM(this.pixelViewport.top);
  }
  get visibleBottom() {
    return this.scaler.fromDOM(this.pixelViewport.bottom);
  }
  getViewport(e, t) {
    let i = 0.5 - Math.max(-0.5, Math.min(0.5, e / 1e3 / 2)), r = this.heightMap, s = this.heightOracle, { visibleTop: o, visibleBottom: l } = this, a = new lo(r.lineAt(o - i * 1e3, we.ByHeight, s, 0, 0).from, r.lineAt(l + (1 - i) * 1e3, we.ByHeight, s, 0, 0).to);
    if (t) {
      let { head: c } = t.range;
      if (c < a.from || c > a.to) {
        let h = Math.min(this.editorHeight, this.pixelViewport.bottom - this.pixelViewport.top), f = r.lineAt(c, we.ByPos, s, 0, 0), u;
        t.y == "center" ? u = (f.top + f.bottom) / 2 - h / 2 : t.y == "start" || t.y == "nearest" && c < a.from ? u = f.top : u = f.bottom - h, a = new lo(r.lineAt(u - 1e3 / 2, we.ByHeight, s, 0, 0).from, r.lineAt(u + h + 1e3 / 2, we.ByHeight, s, 0, 0).to);
      }
    }
    return a;
  }
  mapViewport(e, t) {
    let i = t.mapPos(e.from, -1), r = t.mapPos(e.to, 1);
    return new lo(this.heightMap.lineAt(i, we.ByPos, this.heightOracle, 0, 0).from, this.heightMap.lineAt(r, we.ByPos, this.heightOracle, 0, 0).to);
  }
  // Checks if a given viewport covers the visible part of the
  // document and not too much beyond that.
  viewportIsAppropriate({ from: e, to: t }, i = 0) {
    if (!this.inView)
      return !0;
    let { top: r } = this.heightMap.lineAt(e, we.ByPos, this.heightOracle, 0, 0), { bottom: s } = this.heightMap.lineAt(t, we.ByPos, this.heightOracle, 0, 0), { visibleTop: o, visibleBottom: l } = this;
    return (e == 0 || r <= o - Math.max(10, Math.min(
      -i,
      250
      /* VP.MaxCoverMargin */
    ))) && (t == this.state.doc.length || s >= l + Math.max(10, Math.min(
      i,
      250
      /* VP.MaxCoverMargin */
    ))) && r > o - 2 * 1e3 && s < l + 2 * 1e3;
  }
  mapLineGaps(e, t) {
    if (!e.length || t.empty)
      return e;
    let i = [];
    for (let r of e)
      t.touchesRange(r.from, r.to) || i.push(new ja(t.mapPos(r.from), t.mapPos(r.to), r.size, r.displaySize));
    return i;
  }
  // Computes positions in the viewport where the start or end of a
  // line should be hidden, trying to reuse existing line gaps when
  // appropriate to avoid unneccesary redraws.
  // Uses crude character-counting for the positioning and sizing,
  // since actual DOM coordinates aren't always available and
  // predictable. Relies on generous margins (see LG.Margin) to hide
  // the artifacts this might produce from the user.
  ensureLineGaps(e, t) {
    let i = this.heightOracle.lineWrapping, r = i ? 1e4 : 2e3, s = r >> 1, o = r << 1;
    if (this.defaultTextDirection != ve.LTR && !i)
      return [];
    let l = [], a = (h, f, u, d) => {
      if (f - h < s)
        return;
      let O = this.state.selection.main, p = [O.from];
      O.empty || p.push(O.to);
      for (let y of p)
        if (y > h && y < f) {
          a(h, y - 10, u, d), a(y + 10, f, u, d);
          return;
        }
      let m = oT(e, (y) => y.from >= u.from && y.to <= u.to && Math.abs(y.from - h) < s && Math.abs(y.to - f) < s && !p.some((S) => y.from < S && y.to > S));
      if (!m) {
        if (f < u.to && t && i && t.visibleRanges.some((b) => b.from <= f && b.to >= f)) {
          let b = t.moveToLineBoundary($.cursor(f), !1, !0).head;
          b > h && (f = b);
        }
        let y = this.gapSize(u, h, f, d), S = i || y < 2e6 ? y : 2e6;
        m = new ja(h, f, y, S);
      }
      l.push(m);
    }, c = (h) => {
      if (h.length < o || h.type != st.Text)
        return;
      let f = sT(h.from, h.to, this.stateDeco);
      if (f.total < o)
        return;
      let u = this.scrollTarget ? this.scrollTarget.range.head : null, d, O;
      if (i) {
        let p = r / this.heightOracle.lineLength * this.heightOracle.lineHeight, m, y;
        if (u != null) {
          let S = co(f, u), b = ((this.visibleBottom - this.visibleTop) / 2 + p) / h.height;
          m = S - b, y = S + b;
        } else
          m = (this.visibleTop - h.top - p) / h.height, y = (this.visibleBottom - h.top + p) / h.height;
        d = ao(f, m), O = ao(f, y);
      } else {
        let p = f.total * this.heightOracle.charWidth, m = r * this.heightOracle.charWidth, y = 0;
        if (p > 2e6)
          for (let Q of e)
            Q.from >= h.from && Q.from < h.to && Q.size != Q.displaySize && Q.from * this.heightOracle.charWidth + y < this.pixelViewport.left && (y = Q.size - Q.displaySize);
        let S = this.pixelViewport.left + y, b = this.pixelViewport.right + y, w, k;
        if (u != null) {
          let Q = co(f, u), P = ((b - S) / 2 + m) / p;
          w = Q - P, k = Q + P;
        } else
          w = (S - m) / p, k = (b + m) / p;
        d = ao(f, w), O = ao(f, k);
      }
      d > h.from && a(h.from, d, h, f), O < h.to && a(O, h.to, h, f);
    };
    for (let h of this.viewportLines)
      Array.isArray(h.type) ? h.type.forEach(c) : c(h);
    return l;
  }
  gapSize(e, t, i, r) {
    let s = co(r, i) - co(r, t);
    return this.heightOracle.lineWrapping ? e.height * s : r.total * this.heightOracle.charWidth * s;
  }
  updateLineGaps(e) {
    ja.same(e, this.lineGaps) || (this.lineGaps = e, this.lineGapDeco = F.set(e.map((t) => t.draw(this, this.heightOracle.lineWrapping))));
  }
  computeVisibleRanges(e) {
    let t = this.stateDeco;
    this.lineGaps.length && (t = t.concat(this.lineGapDeco));
    let i = [];
    Oe.spans(t, this.viewport.from, this.viewport.to, {
      span(s, o) {
        i.push({ from: s, to: o });
      },
      point() {
      }
    }, 20);
    let r = 0;
    if (i.length != this.visibleRanges.length)
      r = 12;
    else
      for (let s = 0; s < i.length && !(r & 8); s++) {
        let o = this.visibleRanges[s], l = i[s];
        (o.from != l.from || o.to != l.to) && (r |= 4, e && e.mapPos(o.from, -1) == l.from && e.mapPos(o.to, 1) == l.to || (r |= 8));
      }
    return this.visibleRanges = i, r;
  }
  lineBlockAt(e) {
    return e >= this.viewport.from && e <= this.viewport.to && this.viewportLines.find((t) => t.from <= e && t.to >= e) || Vr(this.heightMap.lineAt(e, we.ByPos, this.heightOracle, 0, 0), this.scaler);
  }
  lineBlockAtHeight(e) {
    return e >= this.viewportLines[0].top && e <= this.viewportLines[this.viewportLines.length - 1].bottom && this.viewportLines.find((t) => t.top <= e && t.bottom >= e) || Vr(this.heightMap.lineAt(this.scaler.fromDOM(e), we.ByHeight, this.heightOracle, 0, 0), this.scaler);
  }
  scrollAnchorAt(e) {
    let t = this.lineBlockAtHeight(e + 8);
    return t.from >= this.viewport.from || this.viewportLines[0].top - e > 200 ? t : this.viewportLines[0];
  }
  elementAtHeight(e) {
    return Vr(this.heightMap.blockAt(this.scaler.fromDOM(e), this.heightOracle, 0, 0), this.scaler);
  }
  get docHeight() {
    return this.scaler.toDOM(this.heightMap.height);
  }
  get contentHeight() {
    return this.docHeight + this.paddingTop + this.paddingBottom;
  }
}
class lo {
  constructor(e, t) {
    this.from = e, this.to = t;
  }
}
function sT(n, e, t) {
  let i = [], r = n, s = 0;
  return Oe.spans(t, n, e, {
    span() {
    },
    point(o, l) {
      o > r && (i.push({ from: r, to: o }), s += o - r), r = l;
    }
  }, 20), r < e && (i.push({ from: r, to: e }), s += e - r), { total: s, ranges: i };
}
function ao({ total: n, ranges: e }, t) {
  if (t <= 0)
    return e[0].from;
  if (t >= 1)
    return e[e.length - 1].to;
  let i = Math.floor(n * t);
  for (let r = 0; ; r++) {
    let { from: s, to: o } = e[r], l = o - s;
    if (i <= l)
      return s + i;
    i -= l;
  }
}
function co(n, e) {
  let t = 0;
  for (let { from: i, to: r } of n.ranges) {
    if (e <= r) {
      t += e - i;
      break;
    }
    t += r - i;
  }
  return t / n.total;
}
function oT(n, e) {
  for (let t of n)
    if (e(t))
      return t;
}
const bO = {
  toDOM(n) {
    return n;
  },
  fromDOM(n) {
    return n;
  },
  scale: 1,
  eq(n) {
    return n == this;
  }
};
class iu {
  constructor(e, t, i) {
    let r = 0, s = 0, o = 0;
    this.viewports = i.map(({ from: l, to: a }) => {
      let c = t.lineAt(l, we.ByPos, e, 0, 0).top, h = t.lineAt(a, we.ByPos, e, 0, 0).bottom;
      return r += h - c, { from: l, to: a, top: c, bottom: h, domTop: 0, domBottom: 0 };
    }), this.scale = (7e6 - r) / (t.height - r);
    for (let l of this.viewports)
      l.domTop = o + (l.top - s) * this.scale, o = l.domBottom = l.domTop + (l.bottom - l.top), s = l.bottom;
  }
  toDOM(e) {
    for (let t = 0, i = 0, r = 0; ; t++) {
      let s = t < this.viewports.length ? this.viewports[t] : null;
      if (!s || e < s.top)
        return r + (e - i) * this.scale;
      if (e <= s.bottom)
        return s.domTop + (e - s.top);
      i = s.bottom, r = s.domBottom;
    }
  }
  fromDOM(e) {
    for (let t = 0, i = 0, r = 0; ; t++) {
      let s = t < this.viewports.length ? this.viewports[t] : null;
      if (!s || e < s.domTop)
        return i + (e - r) / this.scale;
      if (e <= s.domBottom)
        return s.top + (e - s.domTop);
      i = s.bottom, r = s.domBottom;
    }
  }
  eq(e) {
    return e instanceof iu ? this.scale == e.scale && this.viewports.length == e.viewports.length && this.viewports.every((t, i) => t.from == e.viewports[i].from && t.to == e.viewports[i].to) : !1;
  }
}
function Vr(n, e) {
  if (e.scale == 1)
    return n;
  let t = e.toDOM(n.top), i = e.toDOM(n.bottom);
  return new ln(n.from, n.length, t, i - t, Array.isArray(n._content) ? n._content.map((r) => Vr(r, e)) : n._content);
}
const ho = /* @__PURE__ */ B.define({ combine: (n) => n.join(" ") }), _h = /* @__PURE__ */ B.define({ combine: (n) => n.indexOf(!0) > -1 }), Xh = /* @__PURE__ */ Nn.newName(), $y = /* @__PURE__ */ Nn.newName(), Ty = /* @__PURE__ */ Nn.newName(), Cy = { "&light": "." + $y, "&dark": "." + Ty };
function qh(n, e, t) {
  return new Nn(e, {
    finish(i) {
      return /&/.test(i) ? i.replace(/&\w*/, (r) => {
        if (r == "&")
          return n;
        if (!t || !t[r])
          throw new RangeError(`Unsupported selector: ${r}`);
        return t[r];
      }) : n + " " + i;
    }
  });
}
const lT = /* @__PURE__ */ qh("." + Xh, {
  "&": {
    position: "relative !important",
    boxSizing: "border-box",
    "&.cm-focused": {
      // Provide a simple default outline to make sure a focused
      // editor is visually distinct. Can't leave the default behavior
      // because that will apply to the content element, which is
      // inside the scrollable container and doesn't include the
      // gutters. We also can't use an 'auto' outline, since those
      // are, for some reason, drawn behind the element content, which
      // will cause things like the active line background to cover
      // the outline (#297).
      outline: "1px dotted #212121"
    },
    display: "flex !important",
    flexDirection: "column"
  },
  ".cm-scroller": {
    display: "flex !important",
    alignItems: "flex-start !important",
    fontFamily: "monospace",
    lineHeight: 1.4,
    height: "100%",
    overflowX: "auto",
    position: "relative",
    zIndex: 0,
    overflowAnchor: "none"
  },
  ".cm-content": {
    margin: 0,
    flexGrow: 2,
    flexShrink: 0,
    display: "block",
    whiteSpace: "pre",
    wordWrap: "normal",
    // https://github.com/codemirror/dev/issues/456
    boxSizing: "border-box",
    minHeight: "100%",
    padding: "4px 0",
    outline: "none",
    "&[contenteditable=true]": {
      WebkitUserModify: "read-write-plaintext-only"
    }
  },
  ".cm-lineWrapping": {
    whiteSpace_fallback: "pre-wrap",
    // For IE
    whiteSpace: "break-spaces",
    wordBreak: "break-word",
    // For Safari, which doesn't support overflow-wrap: anywhere
    overflowWrap: "anywhere",
    flexShrink: 1
  },
  "&light .cm-content": { caretColor: "black" },
  "&dark .cm-content": { caretColor: "white" },
  ".cm-line": {
    display: "block",
    padding: "0 2px 0 6px"
  },
  ".cm-layer": {
    position: "absolute",
    left: 0,
    top: 0,
    contain: "size style",
    "& > *": {
      position: "absolute"
    }
  },
  "&light .cm-selectionBackground": {
    background: "#d9d9d9"
  },
  "&dark .cm-selectionBackground": {
    background: "#222"
  },
  "&light.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
    background: "#d7d4f0"
  },
  "&dark.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
    background: "#233"
  },
  ".cm-cursorLayer": {
    pointerEvents: "none"
  },
  "&.cm-focused > .cm-scroller > .cm-cursorLayer": {
    animation: "steps(1) cm-blink 1.2s infinite"
  },
  // Two animations defined so that we can switch between them to
  // restart the animation without forcing another style
  // recomputation.
  "@keyframes cm-blink": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
  "@keyframes cm-blink2": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
  ".cm-cursor, .cm-dropCursor": {
    borderLeft: "1.2px solid black",
    marginLeft: "-0.6px",
    pointerEvents: "none"
  },
  ".cm-cursor": {
    display: "none"
  },
  "&dark .cm-cursor": {
    borderLeftColor: "#ddd"
  },
  ".cm-dropCursor": {
    position: "absolute"
  },
  "&.cm-focused > .cm-scroller > .cm-cursorLayer .cm-cursor": {
    display: "block"
  },
  ".cm-iso": {
    unicodeBidi: "isolate"
  },
  ".cm-announced": {
    position: "fixed",
    top: "-10000px"
  },
  "@media print": {
    ".cm-announced": { display: "none" }
  },
  "&light .cm-activeLine": { backgroundColor: "#cceeff44" },
  "&dark .cm-activeLine": { backgroundColor: "#99eeff33" },
  "&light .cm-specialChar": { color: "red" },
  "&dark .cm-specialChar": { color: "#f78" },
  ".cm-gutters": {
    flexShrink: 0,
    display: "flex",
    height: "100%",
    boxSizing: "border-box",
    insetInlineStart: 0,
    zIndex: 200
  },
  "&light .cm-gutters": {
    backgroundColor: "#f5f5f5",
    color: "#6c6c6c",
    borderRight: "1px solid #ddd"
  },
  "&dark .cm-gutters": {
    backgroundColor: "#333338",
    color: "#ccc"
  },
  ".cm-gutter": {
    display: "flex !important",
    // Necessary -- prevents margin collapsing
    flexDirection: "column",
    flexShrink: 0,
    boxSizing: "border-box",
    minHeight: "100%",
    overflow: "hidden"
  },
  ".cm-gutterElement": {
    boxSizing: "border-box"
  },
  ".cm-lineNumbers .cm-gutterElement": {
    padding: "0 3px 0 5px",
    minWidth: "20px",
    textAlign: "right",
    whiteSpace: "nowrap"
  },
  "&light .cm-activeLineGutter": {
    backgroundColor: "#e2f2ff"
  },
  "&dark .cm-activeLineGutter": {
    backgroundColor: "#222227"
  },
  ".cm-panels": {
    boxSizing: "border-box",
    position: "sticky",
    left: 0,
    right: 0,
    zIndex: 300
  },
  "&light .cm-panels": {
    backgroundColor: "#f5f5f5",
    color: "black"
  },
  "&light .cm-panels-top": {
    borderBottom: "1px solid #ddd"
  },
  "&light .cm-panels-bottom": {
    borderTop: "1px solid #ddd"
  },
  "&dark .cm-panels": {
    backgroundColor: "#333338",
    color: "white"
  },
  ".cm-dialog": {
    padding: "2px 19px 4px 6px",
    position: "relative",
    "& label": { fontSize: "80%" }
  },
  ".cm-dialog-close": {
    position: "absolute",
    top: "3px",
    right: "4px",
    backgroundColor: "inherit",
    border: "none",
    font: "inherit",
    fontSize: "14px",
    padding: "0"
  },
  ".cm-tab": {
    display: "inline-block",
    overflow: "hidden",
    verticalAlign: "bottom"
  },
  ".cm-widgetBuffer": {
    verticalAlign: "text-top",
    height: "1em",
    width: 0,
    display: "inline"
  },
  ".cm-placeholder": {
    color: "#888",
    display: "inline-block",
    verticalAlign: "top",
    userSelect: "none"
  },
  ".cm-highlightSpace": {
    backgroundImage: "radial-gradient(circle at 50% 55%, #aaa 20%, transparent 5%)",
    backgroundPosition: "center"
  },
  ".cm-highlightTab": {
    backgroundImage: `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="200" height="20"><path stroke="%23888" stroke-width="1" fill="none" d="M1 10H196L190 5M190 15L196 10M197 4L197 16"/></svg>')`,
    backgroundSize: "auto 100%",
    backgroundPosition: "right 90%",
    backgroundRepeat: "no-repeat"
  },
  ".cm-trailingSpace": {
    backgroundColor: "#ff332255"
  },
  ".cm-button": {
    verticalAlign: "middle",
    color: "inherit",
    fontSize: "70%",
    padding: ".2em 1em",
    borderRadius: "1px"
  },
  "&light .cm-button": {
    backgroundImage: "linear-gradient(#eff1f5, #d9d9df)",
    border: "1px solid #888",
    "&:active": {
      backgroundImage: "linear-gradient(#b4b4b4, #d0d3d6)"
    }
  },
  "&dark .cm-button": {
    backgroundImage: "linear-gradient(#393939, #111)",
    border: "1px solid #888",
    "&:active": {
      backgroundImage: "linear-gradient(#111, #333)"
    }
  },
  ".cm-textfield": {
    verticalAlign: "middle",
    color: "inherit",
    fontSize: "70%",
    border: "1px solid silver",
    padding: ".2em .5em"
  },
  "&light .cm-textfield": {
    backgroundColor: "white"
  },
  "&dark .cm-textfield": {
    border: "1px solid #555",
    backgroundColor: "inherit"
  }
}, Cy), aT = {
  childList: !0,
  characterData: !0,
  subtree: !0,
  attributes: !0,
  characterDataOldValue: !0
}, Ua = W.ie && W.ie_version <= 11;
class cT {
  constructor(e) {
    this.view = e, this.active = !1, this.editContext = null, this.selectionRange = new IP(), this.selectionChanged = !1, this.delayedFlush = -1, this.resizeTimeout = -1, this.queue = [], this.delayedAndroidKey = null, this.flushingAndroidKey = -1, this.lastChange = 0, this.scrollTargets = [], this.intersection = null, this.resizeScroll = null, this.intersecting = !1, this.gapIntersection = null, this.gaps = [], this.printQuery = null, this.parentCheck = -1, this.dom = e.contentDOM, this.observer = new MutationObserver((t) => {
      for (let i of t)
        this.queue.push(i);
      (W.ie && W.ie_version <= 11 || W.ios && e.composing) && t.some((i) => i.type == "childList" && i.removedNodes.length || i.type == "characterData" && i.oldValue.length > i.target.nodeValue.length) ? this.flushSoon() : this.flush();
    }), window.EditContext && e.constructor.EDIT_CONTEXT !== !1 && // Chrome <126 doesn't support inverted selections in edit context (#1392)
    !(W.chrome && W.chrome_version < 126) && (this.editContext = new fT(e), e.state.facet(Pn) && (e.contentDOM.editContext = this.editContext.editContext)), Ua && (this.onCharData = (t) => {
      this.queue.push({
        target: t.target,
        type: "characterData",
        oldValue: t.prevValue
      }), this.flushSoon();
    }), this.onSelectionChange = this.onSelectionChange.bind(this), this.onResize = this.onResize.bind(this), this.onPrint = this.onPrint.bind(this), this.onScroll = this.onScroll.bind(this), window.matchMedia && (this.printQuery = window.matchMedia("print")), typeof ResizeObserver == "function" && (this.resizeScroll = new ResizeObserver(() => {
      var t;
      ((t = this.view.docView) === null || t === void 0 ? void 0 : t.lastUpdate) < Date.now() - 75 && this.onResize();
    }), this.resizeScroll.observe(e.scrollDOM)), this.addWindowListeners(this.win = e.win), this.start(), typeof IntersectionObserver == "function" && (this.intersection = new IntersectionObserver((t) => {
      this.parentCheck < 0 && (this.parentCheck = setTimeout(this.listenForScroll.bind(this), 1e3)), t.length > 0 && t[t.length - 1].intersectionRatio > 0 != this.intersecting && (this.intersecting = !this.intersecting, this.intersecting != this.view.inView && this.onScrollChanged(document.createEvent("Event")));
    }, { threshold: [0, 1e-3] }), this.intersection.observe(this.dom), this.gapIntersection = new IntersectionObserver((t) => {
      t.length > 0 && t[t.length - 1].intersectionRatio > 0 && this.onScrollChanged(document.createEvent("Event"));
    }, {})), this.listenForScroll(), this.readSelectionRange();
  }
  onScrollChanged(e) {
    this.view.inputState.runHandlers("scroll", e), this.intersecting && this.view.measure();
  }
  onScroll(e) {
    this.intersecting && this.flush(!1), this.editContext && this.view.requestMeasure(this.editContext.measureReq), this.onScrollChanged(e);
  }
  onResize() {
    this.resizeTimeout < 0 && (this.resizeTimeout = setTimeout(() => {
      this.resizeTimeout = -1, this.view.requestMeasure();
    }, 50));
  }
  onPrint(e) {
    (e.type == "change" || !e.type) && !e.matches || (this.view.viewState.printing = !0, this.view.measure(), setTimeout(() => {
      this.view.viewState.printing = !1, this.view.requestMeasure();
    }, 500));
  }
  updateGaps(e) {
    if (this.gapIntersection && (e.length != this.gaps.length || this.gaps.some((t, i) => t != e[i]))) {
      this.gapIntersection.disconnect();
      for (let t of e)
        this.gapIntersection.observe(t);
      this.gaps = e;
    }
  }
  onSelectionChange(e) {
    let t = this.selectionChanged;
    if (!this.readSelectionRange() || this.delayedAndroidKey)
      return;
    let { view: i } = this, r = this.selectionRange;
    if (i.state.facet(Pn) ? i.root.activeElement != this.dom : !Lo(this.dom, r))
      return;
    let s = r.anchorNode && i.docView.nearest(r.anchorNode);
    if (s && s.ignoreEvent(e)) {
      t || (this.selectionChanged = !1);
      return;
    }
    (W.ie && W.ie_version <= 11 || W.android && W.chrome) && !i.state.selection.main.empty && // (Selection.isCollapsed isn't reliable on IE)
    r.focusNode && Yr(r.focusNode, r.focusOffset, r.anchorNode, r.anchorOffset) ? this.flushSoon() : this.flush(!1);
  }
  readSelectionRange() {
    let { view: e } = this, t = ls(e.root);
    if (!t)
      return !1;
    let i = W.safari && e.root.nodeType == 11 && e.root.activeElement == this.dom && hT(this.view, t) || t;
    if (!i || this.selectionRange.eq(i))
      return !1;
    let r = Lo(this.dom, i);
    return r && !this.selectionChanged && e.inputState.lastFocusTime > Date.now() - 200 && e.inputState.lastTouchTime < Date.now() - 300 && UP(this.dom, i) ? (this.view.inputState.lastFocusTime = 0, e.docView.updateSelection(), !1) : (this.selectionRange.setRange(i), r && (this.selectionChanged = !0), !0);
  }
  setSelectionRange(e, t) {
    this.selectionRange.set(e.node, e.offset, t.node, t.offset), this.selectionChanged = !1;
  }
  clearSelectionRange() {
    this.selectionRange.set(null, 0, null, 0);
  }
  listenForScroll() {
    this.parentCheck = -1;
    let e = 0, t = null;
    for (let i = this.dom; i; )
      if (i.nodeType == 1)
        !t && e < this.scrollTargets.length && this.scrollTargets[e] == i ? e++ : t || (t = this.scrollTargets.slice(0, e)), t && t.push(i), i = i.assignedSlot || i.parentNode;
      else if (i.nodeType == 11)
        i = i.host;
      else
        break;
    if (e < this.scrollTargets.length && !t && (t = this.scrollTargets.slice(0, e)), t) {
      for (let i of this.scrollTargets)
        i.removeEventListener("scroll", this.onScroll);
      for (let i of this.scrollTargets = t)
        i.addEventListener("scroll", this.onScroll);
    }
  }
  ignore(e) {
    if (!this.active)
      return e();
    try {
      return this.stop(), e();
    } finally {
      this.start(), this.clear();
    }
  }
  start() {
    this.active || (this.observer.observe(this.dom, aT), Ua && this.dom.addEventListener("DOMCharacterDataModified", this.onCharData), this.active = !0);
  }
  stop() {
    this.active && (this.active = !1, this.observer.disconnect(), Ua && this.dom.removeEventListener("DOMCharacterDataModified", this.onCharData));
  }
  // Throw away any pending changes
  clear() {
    this.processRecords(), this.queue.length = 0, this.selectionChanged = !1;
  }
  // Chrome Android, especially in combination with GBoard, not only
  // doesn't reliably fire regular key events, but also often
  // surrounds the effect of enter or backspace with a bunch of
  // composition events that, when interrupted, cause text duplication
  // or other kinds of corruption. This hack makes the editor back off
  // from handling DOM changes for a moment when such a key is
  // detected (via beforeinput or keydown), and then tries to flush
  // them or, if that has no effect, dispatches the given key.
  delayAndroidKey(e, t) {
    var i;
    if (!this.delayedAndroidKey) {
      let r = () => {
        let s = this.delayedAndroidKey;
        s && (this.clearDelayedAndroidKey(), this.view.inputState.lastKeyCode = s.keyCode, this.view.inputState.lastKeyTime = Date.now(), !this.flush() && s.force && ji(this.dom, s.key, s.keyCode));
      };
      this.flushingAndroidKey = this.view.win.requestAnimationFrame(r);
    }
    (!this.delayedAndroidKey || e == "Enter") && (this.delayedAndroidKey = {
      key: e,
      keyCode: t,
      // Only run the key handler when no changes are detected if
      // this isn't coming right after another change, in which case
      // it is probably part of a weird chain of updates, and should
      // be ignored if it returns the DOM to its previous state.
      force: this.lastChange < Date.now() - 50 || !!(!((i = this.delayedAndroidKey) === null || i === void 0) && i.force)
    });
  }
  clearDelayedAndroidKey() {
    this.win.cancelAnimationFrame(this.flushingAndroidKey), this.delayedAndroidKey = null, this.flushingAndroidKey = -1;
  }
  flushSoon() {
    this.delayedFlush < 0 && (this.delayedFlush = this.view.win.requestAnimationFrame(() => {
      this.delayedFlush = -1, this.flush();
    }));
  }
  forceFlush() {
    this.delayedFlush >= 0 && (this.view.win.cancelAnimationFrame(this.delayedFlush), this.delayedFlush = -1), this.flush();
  }
  pendingRecords() {
    for (let e of this.observer.takeRecords())
      this.queue.push(e);
    return this.queue;
  }
  processRecords() {
    let e = this.pendingRecords();
    e.length && (this.queue = []);
    let t = -1, i = -1, r = !1;
    for (let s of e) {
      let o = this.readMutation(s);
      o && (o.typeOver && (r = !0), t == -1 ? { from: t, to: i } = o : (t = Math.min(o.from, t), i = Math.max(o.to, i)));
    }
    return { from: t, to: i, typeOver: r };
  }
  readChange() {
    let { from: e, to: t, typeOver: i } = this.processRecords(), r = this.selectionChanged && Lo(this.dom, this.selectionRange);
    if (e < 0 && !r)
      return null;
    e > -1 && (this.lastChange = Date.now()), this.view.inputState.lastFocusTime = 0, this.selectionChanged = !1;
    let s = new $$(this.view, e, t, i);
    return this.view.docView.domChanged = { newSel: s.newSel ? s.newSel.main : null }, s;
  }
  // Apply pending changes, if any
  flush(e = !0) {
    if (this.delayedFlush >= 0 || this.delayedAndroidKey)
      return !1;
    e && this.readSelectionRange();
    let t = this.readChange();
    if (!t)
      return this.view.requestMeasure(), !1;
    let i = this.view.state, r = gy(this.view, t);
    return this.view.state == i && (t.domChanged || t.newSel && !t.newSel.main.eq(this.view.state.selection.main)) && this.view.update([]), r;
  }
  readMutation(e) {
    let t = this.view.docView.nearest(e.target);
    if (!t || t.ignoreMutation(e))
      return null;
    if (t.markDirty(e.type == "attributes"), e.type == "attributes" && (t.flags |= 4), e.type == "childList") {
      let i = QO(t, e.previousSibling || e.target.previousSibling, -1), r = QO(t, e.nextSibling || e.target.nextSibling, 1);
      return {
        from: i ? t.posAfter(i) : t.posAtStart,
        to: r ? t.posBefore(r) : t.posAtEnd,
        typeOver: !1
      };
    } else return e.type == "characterData" ? { from: t.posAtStart, to: t.posAtEnd, typeOver: e.target.nodeValue == e.oldValue } : null;
  }
  setWindow(e) {
    e != this.win && (this.removeWindowListeners(this.win), this.win = e, this.addWindowListeners(this.win));
  }
  addWindowListeners(e) {
    e.addEventListener("resize", this.onResize), this.printQuery ? this.printQuery.addEventListener ? this.printQuery.addEventListener("change", this.onPrint) : this.printQuery.addListener(this.onPrint) : e.addEventListener("beforeprint", this.onPrint), e.addEventListener("scroll", this.onScroll), e.document.addEventListener("selectionchange", this.onSelectionChange);
  }
  removeWindowListeners(e) {
    e.removeEventListener("scroll", this.onScroll), e.removeEventListener("resize", this.onResize), this.printQuery ? this.printQuery.removeEventListener ? this.printQuery.removeEventListener("change", this.onPrint) : this.printQuery.removeListener(this.onPrint) : e.removeEventListener("beforeprint", this.onPrint), e.document.removeEventListener("selectionchange", this.onSelectionChange);
  }
  update(e) {
    this.editContext && (this.editContext.update(e), e.startState.facet(Pn) != e.state.facet(Pn) && (e.view.contentDOM.editContext = e.state.facet(Pn) ? this.editContext.editContext : null));
  }
  destroy() {
    var e, t, i;
    this.stop(), (e = this.intersection) === null || e === void 0 || e.disconnect(), (t = this.gapIntersection) === null || t === void 0 || t.disconnect(), (i = this.resizeScroll) === null || i === void 0 || i.disconnect();
    for (let r of this.scrollTargets)
      r.removeEventListener("scroll", this.onScroll);
    this.removeWindowListeners(this.win), clearTimeout(this.parentCheck), clearTimeout(this.resizeTimeout), this.win.cancelAnimationFrame(this.delayedFlush), this.win.cancelAnimationFrame(this.flushingAndroidKey), this.editContext && (this.view.contentDOM.editContext = null, this.editContext.destroy());
  }
}
function QO(n, e, t) {
  for (; e; ) {
    let i = ke.get(e);
    if (i && i.parent == n)
      return i;
    let r = e.parentNode;
    e = r != n.dom ? r : t > 0 ? e.nextSibling : e.previousSibling;
  }
  return null;
}
function xO(n, e) {
  let t = e.startContainer, i = e.startOffset, r = e.endContainer, s = e.endOffset, o = n.docView.domAtPos(n.state.selection.main.anchor);
  return Yr(o.node, o.offset, r, s) && ([t, i, r, s] = [r, s, t, i]), { anchorNode: t, anchorOffset: i, focusNode: r, focusOffset: s };
}
function hT(n, e) {
  if (e.getComposedRanges) {
    let r = e.getComposedRanges(n.root)[0];
    if (r)
      return xO(n, r);
  }
  let t = null;
  function i(r) {
    r.preventDefault(), r.stopImmediatePropagation(), t = r.getTargetRanges()[0];
  }
  return n.contentDOM.addEventListener("beforeinput", i, !0), n.dom.ownerDocument.execCommand("indent"), n.contentDOM.removeEventListener("beforeinput", i, !0), t ? xO(n, t) : null;
}
class fT {
  constructor(e) {
    this.from = 0, this.to = 0, this.pendingContextChange = null, this.handlers = /* @__PURE__ */ Object.create(null), this.composing = null, this.resetRange(e.state);
    let t = this.editContext = new window.EditContext({
      text: e.state.doc.sliceString(this.from, this.to),
      selectionStart: this.toContextPos(Math.max(this.from, Math.min(this.to, e.state.selection.main.anchor))),
      selectionEnd: this.toContextPos(e.state.selection.main.head)
    });
    this.handlers.textupdate = (i) => {
      let r = e.state.selection.main, { anchor: s, head: o } = r, l = this.toEditorPos(i.updateRangeStart), a = this.toEditorPos(i.updateRangeEnd);
      e.inputState.composing >= 0 && !this.composing && (this.composing = { contextBase: i.updateRangeStart, editorBase: l, drifted: !1 });
      let c = { from: l, to: a, insert: de.of(i.text.split(`
`)) };
      if (c.from == this.from && s < this.from ? c.from = s : c.to == this.to && s > this.to && (c.to = s), c.from == c.to && !c.insert.length) {
        let h = $.single(this.toEditorPos(i.selectionStart), this.toEditorPos(i.selectionEnd));
        h.main.eq(r) || e.dispatch({ selection: h, userEvent: "select" });
        return;
      }
      if ((W.mac || W.android) && c.from == o - 1 && /^\. ?$/.test(i.text) && e.contentDOM.getAttribute("autocorrect") == "off" && (c = { from: l, to: a, insert: de.of([i.text.replace(".", " ")]) }), this.pendingContextChange = c, !e.state.readOnly) {
        let h = this.to - this.from + (c.to - c.from + c.insert.length);
        tu(e, c, $.single(this.toEditorPos(i.selectionStart, h), this.toEditorPos(i.selectionEnd, h)));
      }
      this.pendingContextChange && (this.revertPending(e.state), this.setSelection(e.state));
    }, this.handlers.characterboundsupdate = (i) => {
      let r = [], s = null;
      for (let o = this.toEditorPos(i.rangeStart), l = this.toEditorPos(i.rangeEnd); o < l; o++) {
        let a = e.coordsForChar(o);
        s = a && new DOMRect(a.left, a.top, a.right - a.left, a.bottom - a.top) || s || new DOMRect(), r.push(s);
      }
      t.updateCharacterBounds(i.rangeStart, r);
    }, this.handlers.textformatupdate = (i) => {
      let r = [];
      for (let s of i.getTextFormats()) {
        let o = s.underlineStyle, l = s.underlineThickness;
        if (o != "None" && l != "None") {
          let a = this.toEditorPos(s.rangeStart), c = this.toEditorPos(s.rangeEnd);
          if (a < c) {
            let h = `text-decoration: underline ${o == "Dashed" ? "dashed " : o == "Squiggle" ? "wavy " : ""}${l == "Thin" ? 1 : 2}px`;
            r.push(F.mark({ attributes: { style: h } }).range(a, c));
          }
        }
      }
      e.dispatch({ effects: hy.of(F.set(r)) });
    }, this.handlers.compositionstart = () => {
      e.inputState.composing < 0 && (e.inputState.composing = 0, e.inputState.compositionFirstChange = !0);
    }, this.handlers.compositionend = () => {
      if (e.inputState.composing = -1, e.inputState.compositionFirstChange = null, this.composing) {
        let { drifted: i } = this.composing;
        this.composing = null, i && this.reset(e.state);
      }
    };
    for (let i in this.handlers)
      t.addEventListener(i, this.handlers[i]);
    this.measureReq = { read: (i) => {
      this.editContext.updateControlBounds(i.contentDOM.getBoundingClientRect());
      let r = ls(i.root);
      r && r.rangeCount && this.editContext.updateSelectionBounds(r.getRangeAt(0).getBoundingClientRect());
    } };
  }
  applyEdits(e) {
    let t = 0, i = !1, r = this.pendingContextChange;
    return e.changes.iterChanges((s, o, l, a, c) => {
      if (i)
        return;
      let h = c.length - (o - s);
      if (r && o >= r.to)
        if (r.from == s && r.to == o && r.insert.eq(c)) {
          r = this.pendingContextChange = null, t += h, this.to += h;
          return;
        } else
          r = null, this.revertPending(e.state);
      if (s += t, o += t, o <= this.from)
        this.from += h, this.to += h;
      else if (s < this.to) {
        if (s < this.from || o > this.to || this.to - this.from + c.length > 3e4) {
          i = !0;
          return;
        }
        this.editContext.updateText(this.toContextPos(s), this.toContextPos(o), c.toString()), this.to += h;
      }
      t += h;
    }), r && !i && this.revertPending(e.state), !i;
  }
  update(e) {
    let t = this.pendingContextChange, i = e.startState.selection.main;
    this.composing && (this.composing.drifted || !e.changes.touchesRange(i.from, i.to) && e.transactions.some((r) => !r.isUserEvent("input.type") && r.changes.touchesRange(this.from, this.to))) ? (this.composing.drifted = !0, this.composing.editorBase = e.changes.mapPos(this.composing.editorBase)) : !this.applyEdits(e) || !this.rangeIsValid(e.state) ? (this.pendingContextChange = null, this.reset(e.state)) : (e.docChanged || e.selectionSet || t) && this.setSelection(e.state), (e.geometryChanged || e.docChanged || e.selectionSet) && e.view.requestMeasure(this.measureReq);
  }
  resetRange(e) {
    let { head: t } = e.selection.main;
    this.from = Math.max(
      0,
      t - 1e4
      /* CxVp.Margin */
    ), this.to = Math.min(
      e.doc.length,
      t + 1e4
      /* CxVp.Margin */
    );
  }
  reset(e) {
    this.resetRange(e), this.editContext.updateText(0, this.editContext.text.length, e.doc.sliceString(this.from, this.to)), this.setSelection(e);
  }
  revertPending(e) {
    let t = this.pendingContextChange;
    this.pendingContextChange = null, this.editContext.updateText(this.toContextPos(t.from), this.toContextPos(t.from + t.insert.length), e.doc.sliceString(t.from, t.to));
  }
  setSelection(e) {
    let { main: t } = e.selection, i = this.toContextPos(Math.max(this.from, Math.min(this.to, t.anchor))), r = this.toContextPos(t.head);
    (this.editContext.selectionStart != i || this.editContext.selectionEnd != r) && this.editContext.updateSelection(i, r);
  }
  rangeIsValid(e) {
    let { head: t } = e.selection.main;
    return !(this.from > 0 && t - this.from < 500 || this.to < e.doc.length && this.to - t < 500 || this.to - this.from > 1e4 * 3);
  }
  toEditorPos(e, t = this.to - this.from) {
    e = Math.min(e, t);
    let i = this.composing;
    return i && i.drifted ? i.editorBase + (e - i.contextBase) : e + this.from;
  }
  toContextPos(e) {
    let t = this.composing;
    return t && t.drifted ? t.contextBase + (e - t.editorBase) : e - this.from;
  }
  destroy() {
    for (let e in this.handlers)
      this.editContext.removeEventListener(e, this.handlers[e]);
  }
}
class Z {
  /**
  The current editor state.
  */
  get state() {
    return this.viewState.state;
  }
  /**
  To be able to display large documents without consuming too much
  memory or overloading the browser, CodeMirror only draws the
  code that is visible (plus a margin around it) to the DOM. This
  property tells you the extent of the current drawn viewport, in
  document positions.
  */
  get viewport() {
    return this.viewState.viewport;
  }
  /**
  When there are, for example, large collapsed ranges in the
  viewport, its size can be a lot bigger than the actual visible
  content. Thus, if you are doing something like styling the
  content in the viewport, it is preferable to only do so for
  these ranges, which are the subset of the viewport that is
  actually drawn.
  */
  get visibleRanges() {
    return this.viewState.visibleRanges;
  }
  /**
  Returns false when the editor is entirely scrolled out of view
  or otherwise hidden.
  */
  get inView() {
    return this.viewState.inView;
  }
  /**
  Indicates whether the user is currently composing text via
  [IME](https://en.wikipedia.org/wiki/Input_method), and at least
  one change has been made in the current composition.
  */
  get composing() {
    return !!this.inputState && this.inputState.composing > 0;
  }
  /**
  Indicates whether the user is currently in composing state. Note
  that on some platforms, like Android, this will be the case a
  lot, since just putting the cursor on a word starts a
  composition there.
  */
  get compositionStarted() {
    return !!this.inputState && this.inputState.composing >= 0;
  }
  /**
  The document or shadow root that the view lives in.
  */
  get root() {
    return this._root;
  }
  /**
  @internal
  */
  get win() {
    return this.dom.ownerDocument.defaultView || window;
  }
  /**
  Construct a new view. You'll want to either provide a `parent`
  option, or put `view.dom` into your document after creating a
  view, so that the user can see the editor.
  */
  constructor(e = {}) {
    var t;
    this.plugins = [], this.pluginMap = /* @__PURE__ */ new Map(), this.editorAttrs = {}, this.contentAttrs = {}, this.bidiCache = [], this.destroyed = !1, this.updateState = 2, this.measureScheduled = -1, this.measureRequests = [], this.contentDOM = document.createElement("div"), this.scrollDOM = document.createElement("div"), this.scrollDOM.tabIndex = -1, this.scrollDOM.className = "cm-scroller", this.scrollDOM.appendChild(this.contentDOM), this.announceDOM = document.createElement("div"), this.announceDOM.className = "cm-announced", this.announceDOM.setAttribute("aria-live", "polite"), this.dom = document.createElement("div"), this.dom.appendChild(this.announceDOM), this.dom.appendChild(this.scrollDOM), e.parent && e.parent.appendChild(this.dom);
    let { dispatch: i } = e;
    this.dispatchTransactions = e.dispatchTransactions || i && ((r) => r.forEach((s) => i(s, this))) || ((r) => this.update(r)), this.dispatch = this.dispatch.bind(this), this._root = e.root || jP(e.parent) || document, this.viewState = new SO(e.state || ue.create(e)), e.scrollTo && e.scrollTo.is(ro) && (this.viewState.scrollTarget = e.scrollTo.value.clip(this.viewState.state)), this.plugins = this.state.facet(Li).map((r) => new za(r));
    for (let r of this.plugins)
      r.update(this);
    this.observer = new cT(this), this.inputState = new A$(this), this.inputState.ensureHandlers(this.plugins), this.docView = new eO(this), this.mountStyles(), this.updateAttrs(), this.updateState = 0, this.requestMeasure(), !((t = document.fonts) === null || t === void 0) && t.ready && document.fonts.ready.then(() => this.requestMeasure());
  }
  dispatch(...e) {
    let t = e.length == 1 && e[0] instanceof Me ? e : e.length == 1 && Array.isArray(e[0]) ? e[0] : [this.state.update(...e)];
    this.dispatchTransactions(t, this);
  }
  /**
  Update the view for the given array of transactions. This will
  update the visible document and selection to match the state
  produced by the transactions, and notify view plugins of the
  change. You should usually call
  [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead, which uses this
  as a primitive.
  */
  update(e) {
    if (this.updateState != 0)
      throw new Error("Calls to EditorView.update are not allowed while an update is in progress");
    let t = !1, i = !1, r, s = this.state;
    for (let u of e) {
      if (u.startState != s)
        throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");
      s = u.state;
    }
    if (this.destroyed) {
      this.viewState.state = s;
      return;
    }
    let o = this.hasFocus, l = 0, a = null;
    e.some((u) => u.annotation(ky)) ? (this.inputState.notifiedFocused = o, l = 1) : o != this.inputState.notifiedFocused && (this.inputState.notifiedFocused = o, a = wy(s, o), a || (l = 1));
    let c = this.observer.delayedAndroidKey, h = null;
    if (c ? (this.observer.clearDelayedAndroidKey(), h = this.observer.readChange(), (h && !this.state.doc.eq(s.doc) || !this.state.selection.eq(s.selection)) && (h = null)) : this.observer.clear(), s.facet(ue.phrases) != this.state.facet(ue.phrases))
      return this.setState(s);
    r = gl.create(this, s, e), r.flags |= l;
    let f = this.viewState.scrollTarget;
    try {
      this.updateState = 2;
      for (let u of e) {
        if (f && (f = f.map(u.changes)), u.scrollIntoView) {
          let { main: d } = u.state.selection;
          f = new Ui(d.empty ? d : $.cursor(d.head, d.head > d.anchor ? -1 : 1));
        }
        for (let d of u.effects)
          d.is(ro) && (f = d.value.clip(this.state));
      }
      this.viewState.update(r, f), this.bidiCache = Sl.update(this.bidiCache, r.changes), r.empty || (this.updatePlugins(r), this.inputState.update(r)), t = this.docView.update(r), this.state.facet(Mr) != this.styleModules && this.mountStyles(), i = this.updateAttrs(), this.showAnnouncements(e), this.docView.updateSelection(t, e.some((u) => u.isUserEvent("select.pointer")));
    } finally {
      this.updateState = 0;
    }
    if (r.startState.facet(ho) != r.state.facet(ho) && (this.viewState.mustMeasureContent = !0), (t || i || f || this.viewState.mustEnforceCursorAssoc || this.viewState.mustMeasureContent) && this.requestMeasure(), t && this.docViewUpdate(), !r.empty)
      for (let u of this.state.facet(Ch))
        try {
          u(r);
        } catch (d) {
          ht(this.state, d, "update listener");
        }
    (a || h) && Promise.resolve().then(() => {
      a && this.state == a.startState && this.dispatch(a), h && !gy(this, h) && c.force && ji(this.contentDOM, c.key, c.keyCode);
    });
  }
  /**
  Reset the view to the given state. (This will cause the entire
  document to be redrawn and all view plugins to be reinitialized,
  so you should probably only use it when the new state isn't
  derived from the old state. Otherwise, use
  [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead.)
  */
  setState(e) {
    if (this.updateState != 0)
      throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");
    if (this.destroyed) {
      this.viewState.state = e;
      return;
    }
    this.updateState = 2;
    let t = this.hasFocus;
    try {
      for (let i of this.plugins)
        i.destroy(this);
      this.viewState = new SO(e), this.plugins = e.facet(Li).map((i) => new za(i)), this.pluginMap.clear();
      for (let i of this.plugins)
        i.update(this);
      this.docView.destroy(), this.docView = new eO(this), this.inputState.ensureHandlers(this.plugins), this.mountStyles(), this.updateAttrs(), this.bidiCache = [];
    } finally {
      this.updateState = 0;
    }
    t && this.focus(), this.requestMeasure();
  }
  updatePlugins(e) {
    let t = e.startState.facet(Li), i = e.state.facet(Li);
    if (t != i) {
      let r = [];
      for (let s of i) {
        let o = t.indexOf(s);
        if (o < 0)
          r.push(new za(s));
        else {
          let l = this.plugins[o];
          l.mustUpdate = e, r.push(l);
        }
      }
      for (let s of this.plugins)
        s.mustUpdate != e && s.destroy(this);
      this.plugins = r, this.pluginMap.clear();
    } else
      for (let r of this.plugins)
        r.mustUpdate = e;
    for (let r = 0; r < this.plugins.length; r++)
      this.plugins[r].update(this);
    t != i && this.inputState.ensureHandlers(this.plugins);
  }
  docViewUpdate() {
    for (let e of this.plugins) {
      let t = e.value;
      if (t && t.docViewUpdate)
        try {
          t.docViewUpdate(this);
        } catch (i) {
          ht(this.state, i, "doc view update listener");
        }
    }
  }
  /**
  @internal
  */
  measure(e = !0) {
    if (this.destroyed)
      return;
    if (this.measureScheduled > -1 && this.win.cancelAnimationFrame(this.measureScheduled), this.observer.delayedAndroidKey) {
      this.measureScheduled = -1, this.requestMeasure();
      return;
    }
    this.measureScheduled = 0, e && this.observer.forceFlush();
    let t = null, i = this.scrollDOM, r = i.scrollTop * this.scaleY, { scrollAnchorPos: s, scrollAnchorHeight: o } = this.viewState;
    Math.abs(r - this.viewState.scrollTop) > 1 && (o = -1), this.viewState.scrollAnchorHeight = -1;
    try {
      for (let l = 0; ; l++) {
        if (o < 0)
          if (L0(i))
            s = -1, o = this.viewState.heightMap.height;
          else {
            let d = this.viewState.scrollAnchorAt(r);
            s = d.from, o = d.top;
          }
        this.updateState = 1;
        let a = this.viewState.measure(this);
        if (!a && !this.measureRequests.length && this.viewState.scrollTarget == null)
          break;
        if (l > 5) {
          console.warn(this.measureRequests.length ? "Measure loop restarted more than 5 times" : "Viewport failed to stabilize");
          break;
        }
        let c = [];
        a & 4 || ([this.measureRequests, c] = [c, this.measureRequests]);
        let h = c.map((d) => {
          try {
            return d.read(this);
          } catch (O) {
            return ht(this.state, O), kO;
          }
        }), f = gl.create(this, this.state, []), u = !1;
        f.flags |= a, t ? t.flags |= a : t = f, this.updateState = 2, f.empty || (this.updatePlugins(f), this.inputState.update(f), this.updateAttrs(), u = this.docView.update(f), u && this.docViewUpdate());
        for (let d = 0; d < c.length; d++)
          if (h[d] != kO)
            try {
              let O = c[d];
              O.write && O.write(h[d], this);
            } catch (O) {
              ht(this.state, O);
            }
        if (u && this.docView.updateSelection(!0), !f.viewportChanged && this.measureRequests.length == 0) {
          if (this.viewState.editorHeight)
            if (this.viewState.scrollTarget) {
              this.docView.scrollIntoView(this.viewState.scrollTarget), this.viewState.scrollTarget = null, o = -1;
              continue;
            } else {
              let O = (s < 0 ? this.viewState.heightMap.height : this.viewState.lineBlockAt(s).top) - o;
              if (O > 1 || O < -1) {
                r = r + O, i.scrollTop = r / this.scaleY, o = -1;
                continue;
              }
            }
          break;
        }
      }
    } finally {
      this.updateState = 0, this.measureScheduled = -1;
    }
    if (t && !t.empty)
      for (let l of this.state.facet(Ch))
        l(t);
  }
  /**
  Get the CSS classes for the currently active editor themes.
  */
  get themeClasses() {
    return Xh + " " + (this.state.facet(_h) ? Ty : $y) + " " + this.state.facet(ho);
  }
  updateAttrs() {
    let e = wO(this, fy, {
      class: "cm-editor" + (this.hasFocus ? " cm-focused " : " ") + this.themeClasses
    }), t = {
      spellcheck: "false",
      autocorrect: "off",
      autocapitalize: "off",
      writingsuggestions: "false",
      translate: "no",
      contenteditable: this.state.facet(Pn) ? "true" : "false",
      class: "cm-content",
      style: `${W.tabSize}: ${this.state.tabSize}`,
      role: "textbox",
      "aria-multiline": "true"
    };
    this.state.readOnly && (t["aria-readonly"] = "true"), wO(this, Kf, t);
    let i = this.observer.ignore(() => {
      let r = wh(this.contentDOM, this.contentAttrs, t), s = wh(this.dom, this.editorAttrs, e);
      return r || s;
    });
    return this.editorAttrs = e, this.contentAttrs = t, i;
  }
  showAnnouncements(e) {
    let t = !0;
    for (let i of e)
      for (let r of i.effects)
        if (r.is(Z.announce)) {
          t && (this.announceDOM.textContent = ""), t = !1;
          let s = this.announceDOM.appendChild(document.createElement("div"));
          s.textContent = r.value;
        }
  }
  mountStyles() {
    this.styleModules = this.state.facet(Mr);
    let e = this.state.facet(Z.cspNonce);
    Nn.mount(this.root, this.styleModules.concat(lT).reverse(), e ? { nonce: e } : void 0);
  }
  readMeasured() {
    if (this.updateState == 2)
      throw new Error("Reading the editor layout isn't allowed during an update");
    this.updateState == 0 && this.measureScheduled > -1 && this.measure(!1);
  }
  /**
  Schedule a layout measurement, optionally providing callbacks to
  do custom DOM measuring followed by a DOM write phase. Using
  this is preferable reading DOM layout directly from, for
  example, an event handler, because it'll make sure measuring and
  drawing done by other components is synchronized, avoiding
  unnecessary DOM layout computations.
  */
  requestMeasure(e) {
    if (this.measureScheduled < 0 && (this.measureScheduled = this.win.requestAnimationFrame(() => this.measure())), e) {
      if (this.measureRequests.indexOf(e) > -1)
        return;
      if (e.key != null) {
        for (let t = 0; t < this.measureRequests.length; t++)
          if (this.measureRequests[t].key === e.key) {
            this.measureRequests[t] = e;
            return;
          }
      }
      this.measureRequests.push(e);
    }
  }
  /**
  Get the value of a specific plugin, if present. Note that
  plugins that crash can be dropped from a view, so even when you
  know you registered a given plugin, it is recommended to check
  the return value of this method.
  */
  plugin(e) {
    let t = this.pluginMap.get(e);
    return (t === void 0 || t && t.plugin != e) && this.pluginMap.set(e, t = this.plugins.find((i) => i.plugin == e) || null), t && t.update(this).value;
  }
  /**
  The top position of the document, in screen coordinates. This
  may be negative when the editor is scrolled down. Points
  directly to the top of the first line, not above the padding.
  */
  get documentTop() {
    return this.contentDOM.getBoundingClientRect().top + this.viewState.paddingTop;
  }
  /**
  Reports the padding above and below the document.
  */
  get documentPadding() {
    return { top: this.viewState.paddingTop, bottom: this.viewState.paddingBottom };
  }
  /**
  If the editor is transformed with CSS, this provides the scale
  along the X axis. Otherwise, it will just be 1. Note that
  transforms other than translation and scaling are not supported.
  */
  get scaleX() {
    return this.viewState.scaleX;
  }
  /**
  Provide the CSS transformed scale along the Y axis.
  */
  get scaleY() {
    return this.viewState.scaleY;
  }
  /**
  Find the text line or block widget at the given vertical
  position (which is interpreted as relative to the [top of the
  document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop)).
  */
  elementAtHeight(e) {
    return this.readMeasured(), this.viewState.elementAtHeight(e);
  }
  /**
  Find the line block (see
  [`lineBlockAt`](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) at the given
  height, again interpreted relative to the [top of the
  document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop).
  */
  lineBlockAtHeight(e) {
    return this.readMeasured(), this.viewState.lineBlockAtHeight(e);
  }
  /**
  Get the extent and vertical position of all [line
  blocks](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) in the viewport. Positions
  are relative to the [top of the
  document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop);
  */
  get viewportLineBlocks() {
    return this.viewState.viewportLines;
  }
  /**
  Find the line block around the given document position. A line
  block is a range delimited on both sides by either a
  non-[hidden](https://codemirror.net/6/docs/ref/#view.Decoration^replace) line break, or the
  start/end of the document. It will usually just hold a line of
  text, but may be broken into multiple textblocks by block
  widgets.
  */
  lineBlockAt(e) {
    return this.viewState.lineBlockAt(e);
  }
  /**
  The editor's total content height.
  */
  get contentHeight() {
    return this.viewState.contentHeight;
  }
  /**
  Move a cursor position by [grapheme
  cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak). `forward` determines whether
  the motion is away from the line start, or towards it. In
  bidirectional text, the line is traversed in visual order, using
  the editor's [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
  When the start position was the last one on the line, the
  returned position will be across the line break. If there is no
  further line, the original position is returned.
  
  By default, this method moves over a single cluster. The
  optional `by` argument can be used to move across more. It will
  be called with the first cluster as argument, and should return
  a predicate that determines, for each subsequent cluster,
  whether it should also be moved over.
  */
  moveByChar(e, t, i) {
    return Ia(this, e, sO(this, e, t, i));
  }
  /**
  Move a cursor position across the next group of either
  [letters](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) or non-letter
  non-whitespace characters.
  */
  moveByGroup(e, t) {
    return Ia(this, e, sO(this, e, t, (i) => k$(this, e.head, i)));
  }
  /**
  Get the cursor position visually at the start or end of a line.
  Note that this may differ from the _logical_ position at its
  start or end (which is simply at `line.from`/`line.to`) if text
  at the start or end goes against the line's base text direction.
  */
  visualLineSide(e, t) {
    let i = this.bidiSpans(e), r = this.textDirectionAt(e.from), s = i[t ? i.length - 1 : 0];
    return $.cursor(s.side(t, r) + e.from, s.forward(!t, r) ? 1 : -1);
  }
  /**
  Move to the next line boundary in the given direction. If
  `includeWrap` is true, line wrapping is on, and there is a
  further wrap point on the current line, the wrap point will be
  returned. Otherwise this function will return the start or end
  of the line.
  */
  moveToLineBoundary(e, t, i = !0) {
    return x$(this, e, t, i);
  }
  /**
  Move a cursor position vertically. When `distance` isn't given,
  it defaults to moving to the next line (including wrapped
  lines). Otherwise, `distance` should provide a positive distance
  in pixels.
  
  When `start` has a
  [`goalColumn`](https://codemirror.net/6/docs/ref/#state.SelectionRange.goalColumn), the vertical
  motion will use that as a target horizontal position. Otherwise,
  the cursor's own horizontal position is used. The returned
  cursor will have its goal column set to whichever column was
  used.
  */
  moveVertically(e, t, i) {
    return Ia(this, e, w$(this, e, t, i));
  }
  /**
  Find the DOM parent node and offset (child offset if `node` is
  an element, character offset when it is a text node) at the
  given document position.
  
  Note that for positions that aren't currently in
  `visibleRanges`, the resulting DOM position isn't necessarily
  meaningful (it may just point before or after a placeholder
  element).
  */
  domAtPos(e) {
    return this.docView.domAtPos(e);
  }
  /**
  Find the document position at the given DOM node. Can be useful
  for associating positions with DOM events. Will raise an error
  when `node` isn't part of the editor content.
  */
  posAtDOM(e, t = 0) {
    return this.docView.posFromDOM(e, t);
  }
  posAtCoords(e, t = !0) {
    return this.readMeasured(), my(this, e, t);
  }
  /**
  Get the screen coordinates at the given document position.
  `side` determines whether the coordinates are based on the
  element before (-1) or after (1) the position (if no element is
  available on the given side, the method will transparently use
  another strategy to get reasonable coordinates).
  */
  coordsAtPos(e, t = 1) {
    this.readMeasured();
    let i = this.docView.coordsAt(e, t);
    if (!i || i.left == i.right)
      return i;
    let r = this.state.doc.lineAt(e), s = this.bidiSpans(r), o = s[In.find(s, e - r.from, -1, t)];
    return ra(i, o.dir == ve.LTR == t > 0);
  }
  /**
  Return the rectangle around a given character. If `pos` does not
  point in front of a character that is in the viewport and
  rendered (i.e. not replaced, not a line break), this will return
  null. For space characters that are a line wrap point, this will
  return the position before the line break.
  */
  coordsForChar(e) {
    return this.readMeasured(), this.docView.coordsForChar(e);
  }
  /**
  The default width of a character in the editor. May not
  accurately reflect the width of all characters (given variable
  width fonts or styling of invididual ranges).
  */
  get defaultCharacterWidth() {
    return this.viewState.heightOracle.charWidth;
  }
  /**
  The default height of a line in the editor. May not be accurate
  for all lines.
  */
  get defaultLineHeight() {
    return this.viewState.heightOracle.lineHeight;
  }
  /**
  The text direction
  ([`direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/direction)
  CSS property) of the editor's content element.
  */
  get textDirection() {
    return this.viewState.defaultTextDirection;
  }
  /**
  Find the text direction of the block at the given position, as
  assigned by CSS. If
  [`perLineTextDirection`](https://codemirror.net/6/docs/ref/#view.EditorView^perLineTextDirection)
  isn't enabled, or the given position is outside of the viewport,
  this will always return the same as
  [`textDirection`](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection). Note that
  this may trigger a DOM layout.
  */
  textDirectionAt(e) {
    return !this.state.facet(ly) || e < this.viewport.from || e > this.viewport.to ? this.textDirection : (this.readMeasured(), this.docView.textDirectionAt(e));
  }
  /**
  Whether this editor [wraps lines](https://codemirror.net/6/docs/ref/#view.EditorView.lineWrapping)
  (as determined by the
  [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)
  CSS property of its content element).
  */
  get lineWrapping() {
    return this.viewState.heightOracle.lineWrapping;
  }
  /**
  Returns the bidirectional text structure of the given line
  (which should be in the current document) as an array of span
  objects. The order of these spans matches the [text
  direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection)—if that is
  left-to-right, the leftmost spans come first, otherwise the
  rightmost spans come first.
  */
  bidiSpans(e) {
    if (e.length > uT)
      return J0(e.length);
    let t = this.textDirectionAt(e.from), i;
    for (let s of this.bidiCache)
      if (s.from == e.from && s.dir == t && (s.fresh || K0(s.isolates, i = Jd(this, e))))
        return s.order;
    i || (i = Jd(this, e));
    let r = o$(e.text, t, i);
    return this.bidiCache.push(new Sl(e.from, e.to, t, i, !0, r)), r;
  }
  /**
  Check whether the editor has focus.
  */
  get hasFocus() {
    var e;
    return (this.dom.ownerDocument.hasFocus() || W.safari && ((e = this.inputState) === null || e === void 0 ? void 0 : e.lastContextMenu) > Date.now() - 3e4) && this.root.activeElement == this.contentDOM;
  }
  /**
  Put focus on the editor.
  */
  focus() {
    this.observer.ignore(() => {
      Z0(this.contentDOM), this.docView.updateSelection();
    });
  }
  /**
  Update the [root](https://codemirror.net/6/docs/ref/##view.EditorViewConfig.root) in which the editor lives. This is only
  necessary when moving the editor's existing DOM to a new window or shadow root.
  */
  setRoot(e) {
    this._root != e && (this._root = e, this.observer.setWindow((e.nodeType == 9 ? e : e.ownerDocument).defaultView || window), this.mountStyles());
  }
  /**
  Clean up this editor view, removing its element from the
  document, unregistering event handlers, and notifying
  plugins. The view instance can no longer be used after
  calling this.
  */
  destroy() {
    this.root.activeElement == this.contentDOM && this.contentDOM.blur();
    for (let e of this.plugins)
      e.destroy(this);
    this.plugins = [], this.inputState.destroy(), this.docView.destroy(), this.dom.remove(), this.observer.destroy(), this.measureScheduled > -1 && this.win.cancelAnimationFrame(this.measureScheduled), this.destroyed = !0;
  }
  /**
  Returns an effect that can be
  [added](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) to a transaction to
  cause it to scroll the given position or range into view.
  */
  static scrollIntoView(e, t = {}) {
    return ro.of(new Ui(typeof e == "number" ? $.cursor(e) : e, t.y, t.x, t.yMargin, t.xMargin));
  }
  /**
  Return an effect that resets the editor to its current (at the
  time this method was called) scroll position. Note that this
  only affects the editor's own scrollable element, not parents.
  See also
  [`EditorViewConfig.scrollTo`](https://codemirror.net/6/docs/ref/#view.EditorViewConfig.scrollTo).
  
  The effect should be used with a document identical to the one
  it was created for. Failing to do so is not an error, but may
  not scroll to the expected position. You can
  [map](https://codemirror.net/6/docs/ref/#state.StateEffect.map) the effect to account for changes.
  */
  scrollSnapshot() {
    let { scrollTop: e, scrollLeft: t } = this.scrollDOM, i = this.viewState.scrollAnchorAt(e);
    return ro.of(new Ui($.cursor(i.from), "start", "start", i.top - e, t, !0));
  }
  /**
  Enable or disable tab-focus mode, which disables key bindings
  for Tab and Shift-Tab, letting the browser's default
  focus-changing behavior go through instead. This is useful to
  prevent trapping keyboard users in your editor.
  
  Without argument, this toggles the mode. With a boolean, it
  enables (true) or disables it (false). Given a number, it
  temporarily enables the mode until that number of milliseconds
  have passed or another non-Tab key is pressed.
  */
  setTabFocusMode(e) {
    e == null ? this.inputState.tabFocusMode = this.inputState.tabFocusMode < 0 ? 0 : -1 : typeof e == "boolean" ? this.inputState.tabFocusMode = e ? 0 : -1 : this.inputState.tabFocusMode != 0 && (this.inputState.tabFocusMode = Date.now() + e);
  }
  /**
  Returns an extension that can be used to add DOM event handlers.
  The value should be an object mapping event names to handler
  functions. For any given event, such functions are ordered by
  extension precedence, and the first handler to return true will
  be assumed to have handled that event, and no other handlers or
  built-in behavior will be activated for it. These are registered
  on the [content element](https://codemirror.net/6/docs/ref/#view.EditorView.contentDOM), except
  for `scroll` handlers, which will be called any time the
  editor's [scroll element](https://codemirror.net/6/docs/ref/#view.EditorView.scrollDOM) or one of
  its parent nodes is scrolled.
  */
  static domEventHandlers(e) {
    return Le.define(() => ({}), { eventHandlers: e });
  }
  /**
  Create an extension that registers DOM event observers. Contrary
  to event [handlers](https://codemirror.net/6/docs/ref/#view.EditorView^domEventHandlers),
  observers can't be prevented from running by a higher-precedence
  handler returning true. They also don't prevent other handlers
  and observers from running when they return true, and should not
  call `preventDefault`.
  */
  static domEventObservers(e) {
    return Le.define(() => ({}), { eventObservers: e });
  }
  /**
  Create a theme extension. The first argument can be a
  [`style-mod`](https://github.com/marijnh/style-mod#documentation)
  style spec providing the styles for the theme. These will be
  prefixed with a generated class for the style.
  
  Because the selectors will be prefixed with a scope class, rule
  that directly match the editor's [wrapper
  element](https://codemirror.net/6/docs/ref/#view.EditorView.dom)—to which the scope class will be
  added—need to be explicitly differentiated by adding an `&` to
  the selector for that element—for example
  `&.cm-focused`.
  
  When `dark` is set to true, the theme will be marked as dark,
  which will cause the `&dark` rules from [base
  themes](https://codemirror.net/6/docs/ref/#view.EditorView^baseTheme) to be used (as opposed to
  `&light` when a light theme is active).
  */
  static theme(e, t) {
    let i = Nn.newName(), r = [ho.of(i), Mr.of(qh(`.${i}`, e))];
    return t && t.dark && r.push(_h.of(!0)), r;
  }
  /**
  Create an extension that adds styles to the base theme. Like
  with [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme), use `&` to indicate the
  place of the editor wrapper element when directly targeting
  that. You can also use `&dark` or `&light` instead to only
  target editors with a dark or light theme.
  */
  static baseTheme(e) {
    return Xn.lowest(Mr.of(qh("." + Xh, e, Cy)));
  }
  /**
  Retrieve an editor view instance from the view's DOM
  representation.
  */
  static findFromDOM(e) {
    var t;
    let i = e.querySelector(".cm-content"), r = i && ke.get(i) || ke.get(e);
    return ((t = r?.rootView) === null || t === void 0 ? void 0 : t.view) || null;
  }
}
Z.styleModule = Mr;
Z.inputHandler = sy;
Z.clipboardInputFilter = Ff;
Z.clipboardOutputFilter = Hf;
Z.scrollHandler = cy;
Z.focusChangeEffect = oy;
Z.perLineTextDirection = ly;
Z.exceptionSink = ry;
Z.updateListener = Ch;
Z.editable = Pn;
Z.mouseSelectionStyle = iy;
Z.dragMovesSelection = ny;
Z.clickAddsSelectionRange = ty;
Z.decorations = cs;
Z.outerDecorations = uy;
Z.atomicRanges = Jf;
Z.bidiIsolatedRanges = dy;
Z.scrollMargins = Oy;
Z.darkTheme = _h;
Z.cspNonce = /* @__PURE__ */ B.define({ combine: (n) => n.length ? n[0] : "" });
Z.contentAttributes = Kf;
Z.editorAttributes = fy;
Z.lineWrapping = /* @__PURE__ */ Z.contentAttributes.of({ class: "cm-lineWrapping" });
Z.announce = /* @__PURE__ */ te.define();
const uT = 4096, kO = {};
class Sl {
  constructor(e, t, i, r, s, o) {
    this.from = e, this.to = t, this.dir = i, this.isolates = r, this.fresh = s, this.order = o;
  }
  static update(e, t) {
    if (t.empty && !e.some((s) => s.fresh))
      return e;
    let i = [], r = e.length ? e[e.length - 1].dir : ve.LTR;
    for (let s = Math.max(0, e.length - 10); s < e.length; s++) {
      let o = e[s];
      o.dir == r && !t.touchesRange(o.from, o.to) && i.push(new Sl(t.mapPos(o.from, 1), t.mapPos(o.to, -1), o.dir, o.isolates, !1, o.order));
    }
    return i;
  }
}
function wO(n, e, t) {
  for (let i = n.state.facet(e), r = i.length - 1; r >= 0; r--) {
    let s = i[r], o = typeof s == "function" ? s(n) : s;
    o && kh(o, t);
  }
  return t;
}
const dT = W.mac ? "mac" : W.windows ? "win" : W.linux ? "linux" : "key";
function OT(n, e) {
  const t = n.split(/-(?!$)/);
  let i = t[t.length - 1];
  i == "Space" && (i = " ");
  let r, s, o, l;
  for (let a = 0; a < t.length - 1; ++a) {
    const c = t[a];
    if (/^(cmd|meta|m)$/i.test(c))
      l = !0;
    else if (/^a(lt)?$/i.test(c))
      r = !0;
    else if (/^(c|ctrl|control)$/i.test(c))
      s = !0;
    else if (/^s(hift)?$/i.test(c))
      o = !0;
    else if (/^mod$/i.test(c))
      e == "mac" ? l = !0 : s = !0;
    else
      throw new Error("Unrecognized modifier name: " + c);
  }
  return r && (i = "Alt-" + i), s && (i = "Ctrl-" + i), l && (i = "Meta-" + i), o && (i = "Shift-" + i), i;
}
function fo(n, e, t) {
  return e.altKey && (n = "Alt-" + n), e.ctrlKey && (n = "Ctrl-" + n), e.metaKey && (n = "Meta-" + n), t !== !1 && e.shiftKey && (n = "Shift-" + n), n;
}
const pT = /* @__PURE__ */ Xn.default(/* @__PURE__ */ Z.domEventHandlers({
  keydown(n, e) {
    return Ey(Ry(e.state), n, e, "editor");
  }
})), Vs = /* @__PURE__ */ B.define({ enables: pT }), vO = /* @__PURE__ */ new WeakMap();
function Ry(n) {
  let e = n.facet(Vs), t = vO.get(e);
  return t || vO.set(e, t = yT(e.reduce((i, r) => i.concat(r), []))), t;
}
function mT(n, e, t) {
  return Ey(Ry(n.state), e, n, t);
}
let Wn = null;
const gT = 4e3;
function yT(n, e = dT) {
  let t = /* @__PURE__ */ Object.create(null), i = /* @__PURE__ */ Object.create(null), r = (o, l) => {
    let a = i[o];
    if (a == null)
      i[o] = l;
    else if (a != l)
      throw new Error("Key binding " + o + " is used both as a regular binding and as a multi-stroke prefix");
  }, s = (o, l, a, c, h) => {
    var f, u;
    let d = t[o] || (t[o] = /* @__PURE__ */ Object.create(null)), O = l.split(/ (?!$)/).map((y) => OT(y, e));
    for (let y = 1; y < O.length; y++) {
      let S = O.slice(0, y).join(" ");
      r(S, !0), d[S] || (d[S] = {
        preventDefault: !0,
        stopPropagation: !1,
        run: [(b) => {
          let w = Wn = { view: b, prefix: S, scope: o };
          return setTimeout(() => {
            Wn == w && (Wn = null);
          }, gT), !0;
        }]
      });
    }
    let p = O.join(" ");
    r(p, !1);
    let m = d[p] || (d[p] = {
      preventDefault: !1,
      stopPropagation: !1,
      run: ((u = (f = d._any) === null || f === void 0 ? void 0 : f.run) === null || u === void 0 ? void 0 : u.slice()) || []
    });
    a && m.run.push(a), c && (m.preventDefault = !0), h && (m.stopPropagation = !0);
  };
  for (let o of n) {
    let l = o.scope ? o.scope.split(" ") : ["editor"];
    if (o.any)
      for (let c of l) {
        let h = t[c] || (t[c] = /* @__PURE__ */ Object.create(null));
        h._any || (h._any = { preventDefault: !1, stopPropagation: !1, run: [] });
        let { any: f } = o;
        for (let u in h)
          h[u].run.push((d) => f(d, Zh));
      }
    let a = o[e] || o.key;
    if (a)
      for (let c of l)
        s(c, a, o.run, o.preventDefault, o.stopPropagation), o.shift && s(c, "Shift-" + a, o.shift, o.preventDefault, o.stopPropagation);
  }
  return t;
}
let Zh = null;
function Ey(n, e, t, i) {
  Zh = e;
  let r = BP(e), s = lt(r, 0), o = on(s) == r.length && r != " ", l = "", a = !1, c = !1, h = !1;
  Wn && Wn.view == t && Wn.scope == i && (l = Wn.prefix + " ", Sy.indexOf(e.keyCode) < 0 && (c = !0, Wn = null));
  let f = /* @__PURE__ */ new Set(), u = (m) => {
    if (m) {
      for (let y of m.run)
        if (!f.has(y) && (f.add(y), y(t)))
          return m.stopPropagation && (h = !0), !0;
      m.preventDefault && (m.stopPropagation && (h = !0), c = !0);
    }
    return !1;
  }, d = n[i], O, p;
  return d && (u(d[l + fo(r, e, !o)]) ? a = !0 : o && (e.altKey || e.metaKey || e.ctrlKey) && // Ctrl-Alt may be used for AltGr on Windows
  !(W.windows && e.ctrlKey && e.altKey) && (O = Gn[e.keyCode]) && O != r ? (u(d[l + fo(O, e, !0)]) || e.shiftKey && (p = os[e.keyCode]) != r && p != O && u(d[l + fo(p, e, !1)])) && (a = !0) : o && e.shiftKey && u(d[l + fo(r, e, !0)]) && (a = !0), !a && u(d._any) && (a = !0)), c && (a = !0), a && h && e.stopPropagation(), Zh = null, a;
}
class Bs {
  /**
  Create a marker with the given class and dimensions. If `width`
  is null, the DOM element will get no width style.
  */
  constructor(e, t, i, r, s) {
    this.className = e, this.left = t, this.top = i, this.width = r, this.height = s;
  }
  draw() {
    let e = document.createElement("div");
    return e.className = this.className, this.adjust(e), e;
  }
  update(e, t) {
    return t.className != this.className ? !1 : (this.adjust(e), !0);
  }
  adjust(e) {
    e.style.left = this.left + "px", e.style.top = this.top + "px", this.width != null && (e.style.width = this.width + "px"), e.style.height = this.height + "px";
  }
  eq(e) {
    return this.left == e.left && this.top == e.top && this.width == e.width && this.height == e.height && this.className == e.className;
  }
  /**
  Create a set of rectangles for the given selection range,
  assigning them theclass`className`. Will create a single
  rectangle for empty ranges, and a set of selection-style
  rectangles covering the range's content (in a bidi-aware
  way) for non-empty ones.
  */
  static forRange(e, t, i) {
    if (i.empty) {
      let r = e.coordsAtPos(i.head, i.assoc || 1);
      if (!r)
        return [];
      let s = Ay(e);
      return [new Bs(t, r.left - s.left, r.top - s.top, null, r.bottom - r.top)];
    } else
      return ST(e, t, i);
  }
}
function Ay(n) {
  let e = n.scrollDOM.getBoundingClientRect();
  return { left: (n.textDirection == ve.LTR ? e.left : e.right - n.scrollDOM.clientWidth * n.scaleX) - n.scrollDOM.scrollLeft * n.scaleX, top: e.top - n.scrollDOM.scrollTop * n.scaleY };
}
function PO(n, e, t, i) {
  let r = n.coordsAtPos(e, t * 2);
  if (!r)
    return i;
  let s = n.dom.getBoundingClientRect(), o = (r.top + r.bottom) / 2, l = n.posAtCoords({ x: s.left + 1, y: o }), a = n.posAtCoords({ x: s.right - 1, y: o });
  return l == null || a == null ? i : { from: Math.max(i.from, Math.min(l, a)), to: Math.min(i.to, Math.max(l, a)) };
}
function ST(n, e, t) {
  if (t.to <= n.viewport.from || t.from >= n.viewport.to)
    return [];
  let i = Math.max(t.from, n.viewport.from), r = Math.min(t.to, n.viewport.to), s = n.textDirection == ve.LTR, o = n.contentDOM, l = o.getBoundingClientRect(), a = Ay(n), c = o.querySelector(".cm-line"), h = c && window.getComputedStyle(c), f = l.left + (h ? parseInt(h.paddingLeft) + Math.min(0, parseInt(h.textIndent)) : 0), u = l.right - (h ? parseInt(h.paddingRight) : 0), d = Eh(n, i, 1), O = Eh(n, r, -1), p = d.type == st.Text ? d : null, m = O.type == st.Text ? O : null;
  if (p && (n.lineWrapping || d.widgetLineBreaks) && (p = PO(n, i, 1, p)), m && (n.lineWrapping || O.widgetLineBreaks) && (m = PO(n, r, -1, m)), p && m && p.from == m.from && p.to == m.to)
    return S(b(t.from, t.to, p));
  {
    let k = p ? b(t.from, null, p) : w(d, !1), Q = m ? b(null, t.to, m) : w(O, !0), P = [];
    return (p || d).to < (m || O).from - (p && m ? 1 : 0) || d.widgetLineBreaks > 1 && k.bottom + n.defaultLineHeight / 2 < Q.top ? P.push(y(f, k.bottom, u, Q.top)) : k.bottom < Q.top && n.elementAtHeight((k.bottom + Q.top) / 2).type == st.Text && (k.bottom = Q.top = (k.bottom + Q.top) / 2), S(k).concat(P).concat(S(Q));
  }
  function y(k, Q, P, E) {
    return new Bs(e, k - a.left, Q - a.top, P - k, E - Q);
  }
  function S({ top: k, bottom: Q, horizontal: P }) {
    let E = [];
    for (let z = 0; z < P.length; z += 2)
      E.push(y(P[z], k, P[z + 1], Q));
    return E;
  }
  function b(k, Q, P) {
    let E = 1e9, z = -1e9, N = [];
    function C(_, V, ee, ye, H) {
      let K = n.coordsAtPos(_, _ == P.to ? -2 : 2), le = n.coordsAtPos(ee, ee == P.from ? 2 : -2);
      !K || !le || (E = Math.min(K.top, le.top, E), z = Math.max(K.bottom, le.bottom, z), H == ve.LTR ? N.push(s && V ? f : K.left, s && ye ? u : le.right) : N.push(!s && ye ? f : le.left, !s && V ? u : K.right));
    }
    let x = k ?? P.from, L = Q ?? P.to;
    for (let _ of n.visibleRanges)
      if (_.to > x && _.from < L)
        for (let V = Math.max(_.from, x), ee = Math.min(_.to, L); ; ) {
          let ye = n.state.doc.lineAt(V);
          for (let H of n.bidiSpans(ye)) {
            let K = H.from + ye.from, le = H.to + ye.from;
            if (K >= ee)
              break;
            le > V && C(Math.max(K, V), k == null && K <= x, Math.min(le, ee), Q == null && le >= L, H.dir);
          }
          if (V = ye.to + 1, V >= ee)
            break;
        }
    return N.length == 0 && C(x, k == null, L, Q == null, n.textDirection), { top: E, bottom: z, horizontal: N };
  }
  function w(k, Q) {
    let P = l.top + (Q ? k.top : k.bottom);
    return { top: P, bottom: P, horizontal: [] };
  }
}
function bT(n, e) {
  return n.constructor == e.constructor && n.eq(e);
}
class QT {
  constructor(e, t) {
    this.view = e, this.layer = t, this.drawn = [], this.scaleX = 1, this.scaleY = 1, this.measureReq = { read: this.measure.bind(this), write: this.draw.bind(this) }, this.dom = e.scrollDOM.appendChild(document.createElement("div")), this.dom.classList.add("cm-layer"), t.above && this.dom.classList.add("cm-layer-above"), t.class && this.dom.classList.add(t.class), this.scale(), this.dom.setAttribute("aria-hidden", "true"), this.setOrder(e.state), e.requestMeasure(this.measureReq), t.mount && t.mount(this.dom, e);
  }
  update(e) {
    e.startState.facet(zo) != e.state.facet(zo) && this.setOrder(e.state), (this.layer.update(e, this.dom) || e.geometryChanged) && (this.scale(), e.view.requestMeasure(this.measureReq));
  }
  docViewUpdate(e) {
    this.layer.updateOnDocViewUpdate !== !1 && e.requestMeasure(this.measureReq);
  }
  setOrder(e) {
    let t = 0, i = e.facet(zo);
    for (; t < i.length && i[t] != this.layer; )
      t++;
    this.dom.style.zIndex = String((this.layer.above ? 150 : -1) - t);
  }
  measure() {
    return this.layer.markers(this.view);
  }
  scale() {
    let { scaleX: e, scaleY: t } = this.view;
    (e != this.scaleX || t != this.scaleY) && (this.scaleX = e, this.scaleY = t, this.dom.style.transform = `scale(${1 / e}, ${1 / t})`);
  }
  draw(e) {
    if (e.length != this.drawn.length || e.some((t, i) => !bT(t, this.drawn[i]))) {
      let t = this.dom.firstChild, i = 0;
      for (let r of e)
        r.update && t && r.constructor && this.drawn[i].constructor && r.update(t, this.drawn[i]) ? (t = t.nextSibling, i++) : this.dom.insertBefore(r.draw(), t);
      for (; t; ) {
        let r = t.nextSibling;
        t.remove(), t = r;
      }
      this.drawn = e;
    }
  }
  destroy() {
    this.layer.destroy && this.layer.destroy(this.dom, this.view), this.dom.remove();
  }
}
const zo = /* @__PURE__ */ B.define();
function _y(n) {
  return [
    Le.define((e) => new QT(e, n)),
    zo.of(n)
  ];
}
const hs = /* @__PURE__ */ B.define({
  combine(n) {
    return gn(n, {
      cursorBlinkRate: 1200,
      drawRangeCursor: !0
    }, {
      cursorBlinkRate: (e, t) => Math.min(e, t),
      drawRangeCursor: (e, t) => e || t
    });
  }
});
function xT(n = {}) {
  return [
    hs.of(n),
    kT,
    wT,
    vT,
    ay.of(!0)
  ];
}
function Xy(n) {
  return n.startState.facet(hs) != n.state.facet(hs);
}
const kT = /* @__PURE__ */ _y({
  above: !0,
  markers(n) {
    let { state: e } = n, t = e.facet(hs), i = [];
    for (let r of e.selection.ranges) {
      let s = r == e.selection.main;
      if (r.empty || t.drawRangeCursor) {
        let o = s ? "cm-cursor cm-cursor-primary" : "cm-cursor cm-cursor-secondary", l = r.empty ? r : $.cursor(r.head, r.head > r.anchor ? -1 : 1);
        for (let a of Bs.forRange(n, o, l))
          i.push(a);
      }
    }
    return i;
  },
  update(n, e) {
    n.transactions.some((i) => i.selection) && (e.style.animationName = e.style.animationName == "cm-blink" ? "cm-blink2" : "cm-blink");
    let t = Xy(n);
    return t && $O(n.state, e), n.docChanged || n.selectionSet || t;
  },
  mount(n, e) {
    $O(e.state, n);
  },
  class: "cm-cursorLayer"
});
function $O(n, e) {
  e.style.animationDuration = n.facet(hs).cursorBlinkRate + "ms";
}
const wT = /* @__PURE__ */ _y({
  above: !1,
  markers(n) {
    return n.state.selection.ranges.map((e) => e.empty ? [] : Bs.forRange(n, "cm-selectionBackground", e)).reduce((e, t) => e.concat(t));
  },
  update(n, e) {
    return n.docChanged || n.selectionSet || n.viewportChanged || Xy(n);
  },
  class: "cm-selectionLayer"
}), vT = /* @__PURE__ */ Xn.highest(/* @__PURE__ */ Z.theme({
  ".cm-line": {
    "& ::selection, &::selection": { backgroundColor: "transparent !important" },
    caretColor: "transparent !important"
  },
  ".cm-content": {
    caretColor: "transparent !important",
    "& :focus": {
      caretColor: "initial !important",
      "&::selection, & ::selection": {
        backgroundColor: "Highlight !important"
      }
    }
  }
})), qy = /* @__PURE__ */ te.define({
  map(n, e) {
    return n == null ? null : e.mapPos(n);
  }
}), Br = /* @__PURE__ */ Ie.define({
  create() {
    return null;
  },
  update(n, e) {
    return n != null && (n = e.changes.mapPos(n)), e.effects.reduce((t, i) => i.is(qy) ? i.value : t, n);
  }
}), PT = /* @__PURE__ */ Le.fromClass(class {
  constructor(n) {
    this.view = n, this.cursor = null, this.measureReq = { read: this.readPos.bind(this), write: this.drawCursor.bind(this) };
  }
  update(n) {
    var e;
    let t = n.state.field(Br);
    t == null ? this.cursor != null && ((e = this.cursor) === null || e === void 0 || e.remove(), this.cursor = null) : (this.cursor || (this.cursor = this.view.scrollDOM.appendChild(document.createElement("div")), this.cursor.className = "cm-dropCursor"), (n.startState.field(Br) != t || n.docChanged || n.geometryChanged) && this.view.requestMeasure(this.measureReq));
  }
  readPos() {
    let { view: n } = this, e = n.state.field(Br), t = e != null && n.coordsAtPos(e);
    if (!t)
      return null;
    let i = n.scrollDOM.getBoundingClientRect();
    return {
      left: t.left - i.left + n.scrollDOM.scrollLeft * n.scaleX,
      top: t.top - i.top + n.scrollDOM.scrollTop * n.scaleY,
      height: t.bottom - t.top
    };
  }
  drawCursor(n) {
    if (this.cursor) {
      let { scaleX: e, scaleY: t } = this.view;
      n ? (this.cursor.style.left = n.left / e + "px", this.cursor.style.top = n.top / t + "px", this.cursor.style.height = n.height / t + "px") : this.cursor.style.left = "-100000px";
    }
  }
  destroy() {
    this.cursor && this.cursor.remove();
  }
  setDropPos(n) {
    this.view.state.field(Br) != n && this.view.dispatch({ effects: qy.of(n) });
  }
}, {
  eventObservers: {
    dragover(n) {
      this.setDropPos(this.view.posAtCoords({ x: n.clientX, y: n.clientY }));
    },
    dragleave(n) {
      (n.target == this.view.contentDOM || !this.view.contentDOM.contains(n.relatedTarget)) && this.setDropPos(null);
    },
    dragend() {
      this.setDropPos(null);
    },
    drop() {
      this.setDropPos(null);
    }
  }
});
function $T() {
  return [Br, PT];
}
function TO(n, e, t, i, r) {
  e.lastIndex = 0;
  for (let s = n.iterRange(t, i), o = t, l; !s.next().done; o += s.value.length)
    if (!s.lineBreak)
      for (; l = e.exec(s.value); )
        r(o + l.index, l);
}
function TT(n, e) {
  let t = n.visibleRanges;
  if (t.length == 1 && t[0].from == n.viewport.from && t[0].to == n.viewport.to)
    return t;
  let i = [];
  for (let { from: r, to: s } of t)
    r = Math.max(n.state.doc.lineAt(r).from, r - e), s = Math.min(n.state.doc.lineAt(s).to, s + e), i.length && i[i.length - 1].to >= r ? i[i.length - 1].to = s : i.push({ from: r, to: s });
  return i;
}
class CT {
  /**
  Create a decorator.
  */
  constructor(e) {
    const { regexp: t, decoration: i, decorate: r, boundary: s, maxLength: o = 1e3 } = e;
    if (!t.global)
      throw new RangeError("The regular expression given to MatchDecorator should have its 'g' flag set");
    if (this.regexp = t, r)
      this.addMatch = (l, a, c, h) => r(h, c, c + l[0].length, l, a);
    else if (typeof i == "function")
      this.addMatch = (l, a, c, h) => {
        let f = i(l, a, c);
        f && h(c, c + l[0].length, f);
      };
    else if (i)
      this.addMatch = (l, a, c, h) => h(c, c + l[0].length, i);
    else
      throw new RangeError("Either 'decorate' or 'decoration' should be provided to MatchDecorator");
    this.boundary = s, this.maxLength = o;
  }
  /**
  Compute the full set of decorations for matches in the given
  view's viewport. You'll want to call this when initializing your
  plugin.
  */
  createDeco(e) {
    let t = new Rn(), i = t.add.bind(t);
    for (let { from: r, to: s } of TT(e, this.maxLength))
      TO(e.state.doc, this.regexp, r, s, (o, l) => this.addMatch(l, e, o, i));
    return t.finish();
  }
  /**
  Update a set of decorations for a view update. `deco` _must_ be
  the set of decorations produced by _this_ `MatchDecorator` for
  the view state before the update.
  */
  updateDeco(e, t) {
    let i = 1e9, r = -1;
    return e.docChanged && e.changes.iterChanges((s, o, l, a) => {
      a >= e.view.viewport.from && l <= e.view.viewport.to && (i = Math.min(l, i), r = Math.max(a, r));
    }), e.viewportMoved || r - i > 1e3 ? this.createDeco(e.view) : r > -1 ? this.updateRange(e.view, t.map(e.changes), i, r) : t;
  }
  updateRange(e, t, i, r) {
    for (let s of e.visibleRanges) {
      let o = Math.max(s.from, i), l = Math.min(s.to, r);
      if (l >= o) {
        let a = e.state.doc.lineAt(o), c = a.to < l ? e.state.doc.lineAt(l) : a, h = Math.max(s.from, a.from), f = Math.min(s.to, c.to);
        if (this.boundary) {
          for (; o > a.from; o--)
            if (this.boundary.test(a.text[o - 1 - a.from])) {
              h = o;
              break;
            }
          for (; l < c.to; l++)
            if (this.boundary.test(c.text[l - c.from])) {
              f = l;
              break;
            }
        }
        let u = [], d, O = (p, m, y) => u.push(y.range(p, m));
        if (a == c)
          for (this.regexp.lastIndex = h - a.from; (d = this.regexp.exec(a.text)) && d.index < f - a.from; )
            this.addMatch(d, e, d.index + a.from, O);
        else
          TO(e.state.doc, this.regexp, h, f, (p, m) => this.addMatch(m, e, p, O));
        t = t.update({ filterFrom: h, filterTo: f, filter: (p, m) => p < h || m > f, add: u });
      }
    }
    return t;
  }
}
const Mh = /x/.unicode != null ? "gu" : "g", RT = /* @__PURE__ */ new RegExp(`[\0-\b
--­؜​‎‏\u2028\u2029‭‮⁦⁧⁩\uFEFF￹-￼]`, Mh), ET = {
  0: "null",
  7: "bell",
  8: "backspace",
  10: "newline",
  11: "vertical tab",
  13: "carriage return",
  27: "escape",
  8203: "zero width space",
  8204: "zero width non-joiner",
  8205: "zero width joiner",
  8206: "left-to-right mark",
  8207: "right-to-left mark",
  8232: "line separator",
  8237: "left-to-right override",
  8238: "right-to-left override",
  8294: "left-to-right isolate",
  8295: "right-to-left isolate",
  8297: "pop directional isolate",
  8233: "paragraph separator",
  65279: "zero width no-break space",
  65532: "object replacement"
};
let Ya = null;
function AT() {
  var n;
  if (Ya == null && typeof document < "u" && document.body) {
    let e = document.body.style;
    Ya = ((n = e.tabSize) !== null && n !== void 0 ? n : e.MozTabSize) != null;
  }
  return Ya || !1;
}
const Do = /* @__PURE__ */ B.define({
  combine(n) {
    let e = gn(n, {
      render: null,
      specialChars: RT,
      addSpecialChars: null
    });
    return (e.replaceTabs = !AT()) && (e.specialChars = new RegExp("	|" + e.specialChars.source, Mh)), e.addSpecialChars && (e.specialChars = new RegExp(e.specialChars.source + "|" + e.addSpecialChars.source, Mh)), e;
  }
});
function _T(n = {}) {
  return [Do.of(n), XT()];
}
let CO = null;
function XT() {
  return CO || (CO = Le.fromClass(class {
    constructor(n) {
      this.view = n, this.decorations = F.none, this.decorationCache = /* @__PURE__ */ Object.create(null), this.decorator = this.makeDecorator(n.state.facet(Do)), this.decorations = this.decorator.createDeco(n);
    }
    makeDecorator(n) {
      return new CT({
        regexp: n.specialChars,
        decoration: (e, t, i) => {
          let { doc: r } = t.state, s = lt(e[0], 0);
          if (s == 9) {
            let o = r.lineAt(i), l = t.state.tabSize, a = Wt(o.text, l, i - o.from);
            return F.replace({
              widget: new LT((l - a % l) * this.view.defaultCharacterWidth / this.view.scaleX)
            });
          }
          return this.decorationCache[s] || (this.decorationCache[s] = F.replace({ widget: new MT(n, s) }));
        },
        boundary: n.replaceTabs ? void 0 : /[^]/
      });
    }
    update(n) {
      let e = n.state.facet(Do);
      n.startState.facet(Do) != e ? (this.decorator = this.makeDecorator(e), this.decorations = this.decorator.createDeco(n.view)) : this.decorations = this.decorator.updateDeco(n, this.decorations);
    }
  }, {
    decorations: (n) => n.decorations
  }));
}
const qT = "•";
function ZT(n) {
  return n >= 32 ? qT : n == 10 ? "␤" : String.fromCharCode(9216 + n);
}
class MT extends Zn {
  constructor(e, t) {
    super(), this.options = e, this.code = t;
  }
  eq(e) {
    return e.code == this.code;
  }
  toDOM(e) {
    let t = ZT(this.code), i = e.state.phrase("Control character") + " " + (ET[this.code] || "0x" + this.code.toString(16)), r = this.options.render && this.options.render(this.code, i, t);
    if (r)
      return r;
    let s = document.createElement("span");
    return s.textContent = t, s.title = i, s.setAttribute("aria-label", i), s.className = "cm-specialChar", s;
  }
  ignoreEvent() {
    return !1;
  }
}
class LT extends Zn {
  constructor(e) {
    super(), this.width = e;
  }
  eq(e) {
    return e.width == this.width;
  }
  toDOM() {
    let e = document.createElement("span");
    return e.textContent = "	", e.className = "cm-tab", e.style.width = this.width + "px", e;
  }
  ignoreEvent() {
    return !1;
  }
}
function VT() {
  return WT;
}
const BT = /* @__PURE__ */ F.line({ class: "cm-activeLine" }), WT = /* @__PURE__ */ Le.fromClass(class {
  constructor(n) {
    this.decorations = this.getDeco(n);
  }
  update(n) {
    (n.docChanged || n.selectionSet) && (this.decorations = this.getDeco(n.view));
  }
  getDeco(n) {
    let e = -1, t = [];
    for (let i of n.state.selection.ranges) {
      let r = n.lineBlockAt(i.head);
      r.from > e && (t.push(BT.range(r.from)), e = r.from);
    }
    return F.set(t);
  }
}, {
  decorations: (n) => n.decorations
}), Lh = 2e3;
function zT(n, e, t) {
  let i = Math.min(e.line, t.line), r = Math.max(e.line, t.line), s = [];
  if (e.off > Lh || t.off > Lh || e.col < 0 || t.col < 0) {
    let o = Math.min(e.off, t.off), l = Math.max(e.off, t.off);
    for (let a = i; a <= r; a++) {
      let c = n.doc.line(a);
      c.length <= l && s.push($.range(c.from + o, c.to + l));
    }
  } else {
    let o = Math.min(e.col, t.col), l = Math.max(e.col, t.col);
    for (let a = i; a <= r; a++) {
      let c = n.doc.line(a), h = mh(c.text, o, n.tabSize, !0);
      if (h < 0)
        s.push($.cursor(c.to));
      else {
        let f = mh(c.text, l, n.tabSize);
        s.push($.range(c.from + h, c.from + f));
      }
    }
  }
  return s;
}
function DT(n, e) {
  let t = n.coordsAtPos(n.viewport.from);
  return t ? Math.round(Math.abs((t.left - e) / n.defaultCharacterWidth)) : -1;
}
function RO(n, e) {
  let t = n.posAtCoords({ x: e.clientX, y: e.clientY }, !1), i = n.state.doc.lineAt(t), r = t - i.from, s = r > Lh ? -1 : r == i.length ? DT(n, e.clientX) : Wt(i.text, n.state.tabSize, t - i.from);
  return { line: i.number, col: s, off: r };
}
function IT(n, e) {
  let t = RO(n, e), i = n.state.selection;
  return t ? {
    update(r) {
      if (r.docChanged) {
        let s = r.changes.mapPos(r.startState.doc.line(t.line).from), o = r.state.doc.lineAt(s);
        t = { line: o.number, col: t.col, off: Math.min(t.off, o.length) }, i = i.map(r.changes);
      }
    },
    get(r, s, o) {
      let l = RO(n, r);
      if (!l)
        return i;
      let a = zT(n.state, t, l);
      return a.length ? o ? $.create(a.concat(i.ranges)) : $.create(a) : i;
    }
  } : null;
}
function jT(n) {
  let e = (t) => t.altKey && t.button == 0;
  return Z.mouseSelectionStyle.of((t, i) => e(i) ? IT(t, i) : null);
}
const UT = {
  Alt: [18, (n) => !!n.altKey],
  Control: [17, (n) => !!n.ctrlKey],
  Shift: [16, (n) => !!n.shiftKey],
  Meta: [91, (n) => !!n.metaKey]
}, YT = { style: "cursor: crosshair" };
function NT(n = {}) {
  let [e, t] = UT[n.key || "Alt"], i = Le.fromClass(class {
    constructor(r) {
      this.view = r, this.isDown = !1;
    }
    set(r) {
      this.isDown != r && (this.isDown = r, this.view.update([]));
    }
  }, {
    eventObservers: {
      keydown(r) {
        this.set(r.keyCode == e || t(r));
      },
      keyup(r) {
        (r.keyCode == e || !t(r)) && this.set(!1);
      },
      mousemove(r) {
        this.set(t(r));
      }
    }
  });
  return [
    i,
    Z.contentAttributes.of((r) => {
      var s;
      return !((s = r.plugin(i)) === null || s === void 0) && s.isDown ? YT : null;
    })
  ];
}
const $r = "-10000px";
class Zy {
  constructor(e, t, i, r) {
    this.facet = t, this.createTooltipView = i, this.removeTooltipView = r, this.input = e.state.facet(t), this.tooltips = this.input.filter((o) => o);
    let s = null;
    this.tooltipViews = this.tooltips.map((o) => s = i(o, s));
  }
  update(e, t) {
    var i;
    let r = e.state.facet(this.facet), s = r.filter((a) => a);
    if (r === this.input) {
      for (let a of this.tooltipViews)
        a.update && a.update(e);
      return !1;
    }
    let o = [], l = t ? [] : null;
    for (let a = 0; a < s.length; a++) {
      let c = s[a], h = -1;
      if (c) {
        for (let f = 0; f < this.tooltips.length; f++) {
          let u = this.tooltips[f];
          u && u.create == c.create && (h = f);
        }
        if (h < 0)
          o[a] = this.createTooltipView(c, a ? o[a - 1] : null), l && (l[a] = !!c.above);
        else {
          let f = o[a] = this.tooltipViews[h];
          l && (l[a] = t[h]), f.update && f.update(e);
        }
      }
    }
    for (let a of this.tooltipViews)
      o.indexOf(a) < 0 && (this.removeTooltipView(a), (i = a.destroy) === null || i === void 0 || i.call(a));
    return t && (l.forEach((a, c) => t[c] = a), t.length = l.length), this.input = r, this.tooltips = s, this.tooltipViews = o, !0;
  }
}
function GT(n) {
  let e = n.dom.ownerDocument.documentElement;
  return { top: 0, left: 0, bottom: e.clientHeight, right: e.clientWidth };
}
const Na = /* @__PURE__ */ B.define({
  combine: (n) => {
    var e, t, i;
    return {
      position: W.ios ? "absolute" : ((e = n.find((r) => r.position)) === null || e === void 0 ? void 0 : e.position) || "fixed",
      parent: ((t = n.find((r) => r.parent)) === null || t === void 0 ? void 0 : t.parent) || null,
      tooltipSpace: ((i = n.find((r) => r.tooltipSpace)) === null || i === void 0 ? void 0 : i.tooltipSpace) || GT
    };
  }
}), EO = /* @__PURE__ */ new WeakMap(), ru = /* @__PURE__ */ Le.fromClass(class {
  constructor(n) {
    this.view = n, this.above = [], this.inView = !0, this.madeAbsolute = !1, this.lastTransaction = 0, this.measureTimeout = -1;
    let e = n.state.facet(Na);
    this.position = e.position, this.parent = e.parent, this.classes = n.themeClasses, this.createContainer(), this.measureReq = { read: this.readMeasure.bind(this), write: this.writeMeasure.bind(this), key: this }, this.resizeObserver = typeof ResizeObserver == "function" ? new ResizeObserver(() => this.measureSoon()) : null, this.manager = new Zy(n, su, (t, i) => this.createTooltip(t, i), (t) => {
      this.resizeObserver && this.resizeObserver.unobserve(t.dom), t.dom.remove();
    }), this.above = this.manager.tooltips.map((t) => !!t.above), this.intersectionObserver = typeof IntersectionObserver == "function" ? new IntersectionObserver((t) => {
      Date.now() > this.lastTransaction - 50 && t.length > 0 && t[t.length - 1].intersectionRatio < 1 && this.measureSoon();
    }, { threshold: [1] }) : null, this.observeIntersection(), n.win.addEventListener("resize", this.measureSoon = this.measureSoon.bind(this)), this.maybeMeasure();
  }
  createContainer() {
    this.parent ? (this.container = document.createElement("div"), this.container.style.position = "relative", this.container.className = this.view.themeClasses, this.parent.appendChild(this.container)) : this.container = this.view.dom;
  }
  observeIntersection() {
    if (this.intersectionObserver) {
      this.intersectionObserver.disconnect();
      for (let n of this.manager.tooltipViews)
        this.intersectionObserver.observe(n.dom);
    }
  }
  measureSoon() {
    this.measureTimeout < 0 && (this.measureTimeout = setTimeout(() => {
      this.measureTimeout = -1, this.maybeMeasure();
    }, 50));
  }
  update(n) {
    n.transactions.length && (this.lastTransaction = Date.now());
    let e = this.manager.update(n, this.above);
    e && this.observeIntersection();
    let t = e || n.geometryChanged, i = n.state.facet(Na);
    if (i.position != this.position && !this.madeAbsolute) {
      this.position = i.position;
      for (let r of this.manager.tooltipViews)
        r.dom.style.position = this.position;
      t = !0;
    }
    if (i.parent != this.parent) {
      this.parent && this.container.remove(), this.parent = i.parent, this.createContainer();
      for (let r of this.manager.tooltipViews)
        this.container.appendChild(r.dom);
      t = !0;
    } else this.parent && this.view.themeClasses != this.classes && (this.classes = this.container.className = this.view.themeClasses);
    t && this.maybeMeasure();
  }
  createTooltip(n, e) {
    let t = n.create(this.view), i = e ? e.dom : null;
    if (t.dom.classList.add("cm-tooltip"), n.arrow && !t.dom.querySelector(".cm-tooltip > .cm-tooltip-arrow")) {
      let r = document.createElement("div");
      r.className = "cm-tooltip-arrow", t.dom.appendChild(r);
    }
    return t.dom.style.position = this.position, t.dom.style.top = $r, t.dom.style.left = "0px", this.container.insertBefore(t.dom, i), t.mount && t.mount(this.view), this.resizeObserver && this.resizeObserver.observe(t.dom), t;
  }
  destroy() {
    var n, e, t;
    this.view.win.removeEventListener("resize", this.measureSoon);
    for (let i of this.manager.tooltipViews)
      i.dom.remove(), (n = i.destroy) === null || n === void 0 || n.call(i);
    this.parent && this.container.remove(), (e = this.resizeObserver) === null || e === void 0 || e.disconnect(), (t = this.intersectionObserver) === null || t === void 0 || t.disconnect(), clearTimeout(this.measureTimeout);
  }
  readMeasure() {
    let n = 1, e = 1, t = !1;
    if (this.position == "fixed" && this.manager.tooltipViews.length) {
      let { dom: s } = this.manager.tooltipViews[0];
      if (W.gecko)
        t = s.offsetParent != this.container.ownerDocument.body;
      else if (s.style.top == $r && s.style.left == "0px") {
        let o = s.getBoundingClientRect();
        t = Math.abs(o.top + 1e4) > 1 || Math.abs(o.left) > 1;
      }
    }
    if (t || this.position == "absolute")
      if (this.parent) {
        let s = this.parent.getBoundingClientRect();
        s.width && s.height && (n = s.width / this.parent.offsetWidth, e = s.height / this.parent.offsetHeight);
      } else
        ({ scaleX: n, scaleY: e } = this.view.viewState);
    let i = this.view.scrollDOM.getBoundingClientRect(), r = eu(this.view);
    return {
      visible: {
        left: i.left + r.left,
        top: i.top + r.top,
        right: i.right - r.right,
        bottom: i.bottom - r.bottom
      },
      parent: this.parent ? this.container.getBoundingClientRect() : this.view.dom.getBoundingClientRect(),
      pos: this.manager.tooltips.map((s, o) => {
        let l = this.manager.tooltipViews[o];
        return l.getCoords ? l.getCoords(s.pos) : this.view.coordsAtPos(s.pos);
      }),
      size: this.manager.tooltipViews.map(({ dom: s }) => s.getBoundingClientRect()),
      space: this.view.state.facet(Na).tooltipSpace(this.view),
      scaleX: n,
      scaleY: e,
      makeAbsolute: t
    };
  }
  writeMeasure(n) {
    var e;
    if (n.makeAbsolute) {
      this.madeAbsolute = !0, this.position = "absolute";
      for (let l of this.manager.tooltipViews)
        l.dom.style.position = "absolute";
    }
    let { visible: t, space: i, scaleX: r, scaleY: s } = n, o = [];
    for (let l = 0; l < this.manager.tooltips.length; l++) {
      let a = this.manager.tooltips[l], c = this.manager.tooltipViews[l], { dom: h } = c, f = n.pos[l], u = n.size[l];
      if (!f || a.clip !== !1 && (f.bottom <= Math.max(t.top, i.top) || f.top >= Math.min(t.bottom, i.bottom) || f.right < Math.max(t.left, i.left) - 0.1 || f.left > Math.min(t.right, i.right) + 0.1)) {
        h.style.top = $r;
        continue;
      }
      let d = a.arrow ? c.dom.querySelector(".cm-tooltip-arrow") : null, O = d ? 7 : 0, p = u.right - u.left, m = (e = EO.get(c)) !== null && e !== void 0 ? e : u.bottom - u.top, y = c.offset || HT, S = this.view.textDirection == ve.LTR, b = u.width > i.right - i.left ? S ? i.left : i.right - u.width : S ? Math.max(i.left, Math.min(f.left - (d ? 14 : 0) + y.x, i.right - p)) : Math.min(Math.max(i.left, f.left - p + (d ? 14 : 0) - y.x), i.right - p), w = this.above[l];
      !a.strictSide && (w ? f.top - m - O - y.y < i.top : f.bottom + m + O + y.y > i.bottom) && w == i.bottom - f.bottom > f.top - i.top && (w = this.above[l] = !w);
      let k = (w ? f.top - i.top : i.bottom - f.bottom) - O;
      if (k < m && c.resize !== !1) {
        if (k < this.view.defaultLineHeight) {
          h.style.top = $r;
          continue;
        }
        EO.set(c, m), h.style.height = (m = k) / s + "px";
      } else h.style.height && (h.style.height = "");
      let Q = w ? f.top - m - O - y.y : f.bottom + O + y.y, P = b + p;
      if (c.overlap !== !0)
        for (let E of o)
          E.left < P && E.right > b && E.top < Q + m && E.bottom > Q && (Q = w ? E.top - m - 2 - O : E.bottom + O + 2);
      if (this.position == "absolute" ? (h.style.top = (Q - n.parent.top) / s + "px", AO(h, (b - n.parent.left) / r)) : (h.style.top = Q / s + "px", AO(h, b / r)), d) {
        let E = f.left + (S ? y.x : -y.x) - (b + 14 - 7);
        d.style.left = E / r + "px";
      }
      c.overlap !== !0 && o.push({ left: b, top: Q, right: P, bottom: Q + m }), h.classList.toggle("cm-tooltip-above", w), h.classList.toggle("cm-tooltip-below", !w), c.positioned && c.positioned(n.space);
    }
  }
  maybeMeasure() {
    if (this.manager.tooltips.length && (this.view.inView && this.view.requestMeasure(this.measureReq), this.inView != this.view.inView && (this.inView = this.view.inView, !this.inView)))
      for (let n of this.manager.tooltipViews)
        n.dom.style.top = $r;
  }
}, {
  eventObservers: {
    scroll() {
      this.maybeMeasure();
    }
  }
});
function AO(n, e) {
  let t = parseInt(n.style.left, 10);
  (isNaN(t) || Math.abs(e - t) > 1) && (n.style.left = e + "px");
}
const FT = /* @__PURE__ */ Z.baseTheme({
  ".cm-tooltip": {
    zIndex: 500,
    boxSizing: "border-box"
  },
  "&light .cm-tooltip": {
    border: "1px solid #bbb",
    backgroundColor: "#f5f5f5"
  },
  "&light .cm-tooltip-section:not(:first-child)": {
    borderTop: "1px solid #bbb"
  },
  "&dark .cm-tooltip": {
    backgroundColor: "#333338",
    color: "white"
  },
  ".cm-tooltip-arrow": {
    height: "7px",
    width: `${7 * 2}px`,
    position: "absolute",
    zIndex: -1,
    overflow: "hidden",
    "&:before, &:after": {
      content: "''",
      position: "absolute",
      width: 0,
      height: 0,
      borderLeft: "7px solid transparent",
      borderRight: "7px solid transparent"
    },
    ".cm-tooltip-above &": {
      bottom: "-7px",
      "&:before": {
        borderTop: "7px solid #bbb"
      },
      "&:after": {
        borderTop: "7px solid #f5f5f5",
        bottom: "1px"
      }
    },
    ".cm-tooltip-below &": {
      top: "-7px",
      "&:before": {
        borderBottom: "7px solid #bbb"
      },
      "&:after": {
        borderBottom: "7px solid #f5f5f5",
        top: "1px"
      }
    }
  },
  "&dark .cm-tooltip .cm-tooltip-arrow": {
    "&:before": {
      borderTopColor: "#333338",
      borderBottomColor: "#333338"
    },
    "&:after": {
      borderTopColor: "transparent",
      borderBottomColor: "transparent"
    }
  }
}), HT = { x: 0, y: 0 }, su = /* @__PURE__ */ B.define({
  enables: [ru, FT]
}), bl = /* @__PURE__ */ B.define({
  combine: (n) => n.reduce((e, t) => e.concat(t), [])
});
class la {
  // Needs to be static so that host tooltip instances always match
  static create(e) {
    return new la(e);
  }
  constructor(e) {
    this.view = e, this.mounted = !1, this.dom = document.createElement("div"), this.dom.classList.add("cm-tooltip-hover"), this.manager = new Zy(e, bl, (t, i) => this.createHostedView(t, i), (t) => t.dom.remove());
  }
  createHostedView(e, t) {
    let i = e.create(this.view);
    return i.dom.classList.add("cm-tooltip-section"), this.dom.insertBefore(i.dom, t ? t.dom.nextSibling : this.dom.firstChild), this.mounted && i.mount && i.mount(this.view), i;
  }
  mount(e) {
    for (let t of this.manager.tooltipViews)
      t.mount && t.mount(e);
    this.mounted = !0;
  }
  positioned(e) {
    for (let t of this.manager.tooltipViews)
      t.positioned && t.positioned(e);
  }
  update(e) {
    this.manager.update(e);
  }
  destroy() {
    var e;
    for (let t of this.manager.tooltipViews)
      (e = t.destroy) === null || e === void 0 || e.call(t);
  }
  passProp(e) {
    let t;
    for (let i of this.manager.tooltipViews) {
      let r = i[e];
      if (r !== void 0) {
        if (t === void 0)
          t = r;
        else if (t !== r)
          return;
      }
    }
    return t;
  }
  get offset() {
    return this.passProp("offset");
  }
  get getCoords() {
    return this.passProp("getCoords");
  }
  get overlap() {
    return this.passProp("overlap");
  }
  get resize() {
    return this.passProp("resize");
  }
}
const KT = /* @__PURE__ */ su.compute([bl], (n) => {
  let e = n.facet(bl);
  return e.length === 0 ? null : {
    pos: Math.min(...e.map((t) => t.pos)),
    end: Math.max(...e.map((t) => {
      var i;
      return (i = t.end) !== null && i !== void 0 ? i : t.pos;
    })),
    create: la.create,
    above: e[0].above,
    arrow: e.some((t) => t.arrow)
  };
});
class JT {
  constructor(e, t, i, r, s) {
    this.view = e, this.source = t, this.field = i, this.setHover = r, this.hoverTime = s, this.hoverTimeout = -1, this.restartTimeout = -1, this.pending = null, this.lastMove = { x: 0, y: 0, target: e.dom, time: 0 }, this.checkHover = this.checkHover.bind(this), e.dom.addEventListener("mouseleave", this.mouseleave = this.mouseleave.bind(this)), e.dom.addEventListener("mousemove", this.mousemove = this.mousemove.bind(this));
  }
  update() {
    this.pending && (this.pending = null, clearTimeout(this.restartTimeout), this.restartTimeout = setTimeout(() => this.startHover(), 20));
  }
  get active() {
    return this.view.state.field(this.field);
  }
  checkHover() {
    if (this.hoverTimeout = -1, this.active.length)
      return;
    let e = Date.now() - this.lastMove.time;
    e < this.hoverTime ? this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime - e) : this.startHover();
  }
  startHover() {
    clearTimeout(this.restartTimeout);
    let { view: e, lastMove: t } = this, i = e.docView.nearest(t.target);
    if (!i)
      return;
    let r, s = 1;
    if (i instanceof Dn)
      r = i.posAtStart;
    else {
      if (r = e.posAtCoords(t), r == null)
        return;
      let l = e.coordsAtPos(r);
      if (!l || t.y < l.top || t.y > l.bottom || t.x < l.left - e.defaultCharacterWidth || t.x > l.right + e.defaultCharacterWidth)
        return;
      let a = e.bidiSpans(e.state.doc.lineAt(r)).find((h) => h.from <= r && h.to >= r), c = a && a.dir == ve.RTL ? -1 : 1;
      s = t.x < l.left ? -c : c;
    }
    let o = this.source(e, r, s);
    if (o?.then) {
      let l = this.pending = { pos: r };
      o.then((a) => {
        this.pending == l && (this.pending = null, a && !(Array.isArray(a) && !a.length) && e.dispatch({ effects: this.setHover.of(Array.isArray(a) ? a : [a]) }));
      }, (a) => ht(e.state, a, "hover tooltip"));
    } else o && !(Array.isArray(o) && !o.length) && e.dispatch({ effects: this.setHover.of(Array.isArray(o) ? o : [o]) });
  }
  get tooltip() {
    let e = this.view.plugin(ru), t = e ? e.manager.tooltips.findIndex((i) => i.create == la.create) : -1;
    return t > -1 ? e.manager.tooltipViews[t] : null;
  }
  mousemove(e) {
    var t, i;
    this.lastMove = { x: e.clientX, y: e.clientY, target: e.target, time: Date.now() }, this.hoverTimeout < 0 && (this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime));
    let { active: r, tooltip: s } = this;
    if (r.length && s && !eC(s.dom, e) || this.pending) {
      let { pos: o } = r[0] || this.pending, l = (i = (t = r[0]) === null || t === void 0 ? void 0 : t.end) !== null && i !== void 0 ? i : o;
      (o == l ? this.view.posAtCoords(this.lastMove) != o : !tC(this.view, o, l, e.clientX, e.clientY)) && (this.view.dispatch({ effects: this.setHover.of([]) }), this.pending = null);
    }
  }
  mouseleave(e) {
    clearTimeout(this.hoverTimeout), this.hoverTimeout = -1;
    let { active: t } = this;
    if (t.length) {
      let { tooltip: i } = this;
      i && i.dom.contains(e.relatedTarget) ? this.watchTooltipLeave(i.dom) : this.view.dispatch({ effects: this.setHover.of([]) });
    }
  }
  watchTooltipLeave(e) {
    let t = (i) => {
      e.removeEventListener("mouseleave", t), this.active.length && !this.view.dom.contains(i.relatedTarget) && this.view.dispatch({ effects: this.setHover.of([]) });
    };
    e.addEventListener("mouseleave", t);
  }
  destroy() {
    clearTimeout(this.hoverTimeout), this.view.dom.removeEventListener("mouseleave", this.mouseleave), this.view.dom.removeEventListener("mousemove", this.mousemove);
  }
}
const uo = 4;
function eC(n, e) {
  let { left: t, right: i, top: r, bottom: s } = n.getBoundingClientRect(), o;
  if (o = n.querySelector(".cm-tooltip-arrow")) {
    let l = o.getBoundingClientRect();
    r = Math.min(l.top, r), s = Math.max(l.bottom, s);
  }
  return e.clientX >= t - uo && e.clientX <= i + uo && e.clientY >= r - uo && e.clientY <= s + uo;
}
function tC(n, e, t, i, r, s) {
  let o = n.scrollDOM.getBoundingClientRect(), l = n.documentTop + n.documentPadding.top + n.contentHeight;
  if (o.left > i || o.right < i || o.top > r || Math.min(o.bottom, l) < r)
    return !1;
  let a = n.posAtCoords({ x: i, y: r }, !1);
  return a >= e && a <= t;
}
function nC(n, e = {}) {
  let t = te.define(), i = Ie.define({
    create() {
      return [];
    },
    update(r, s) {
      if (r.length && (e.hideOnChange && (s.docChanged || s.selection) ? r = [] : e.hideOn && (r = r.filter((o) => !e.hideOn(s, o))), s.docChanged)) {
        let o = [];
        for (let l of r) {
          let a = s.changes.mapPos(l.pos, -1, Ne.TrackDel);
          if (a != null) {
            let c = Object.assign(/* @__PURE__ */ Object.create(null), l);
            c.pos = a, c.end != null && (c.end = s.changes.mapPos(c.end)), o.push(c);
          }
        }
        r = o;
      }
      for (let o of s.effects)
        o.is(t) && (r = o.value), o.is(iC) && (r = []);
      return r;
    },
    provide: (r) => bl.from(r)
  });
  return {
    active: i,
    extension: [
      i,
      Le.define((r) => new JT(
        r,
        n,
        i,
        t,
        e.hoverTime || 300
        /* Hover.Time */
      )),
      KT
    ]
  };
}
function My(n, e) {
  let t = n.plugin(ru);
  if (!t)
    return null;
  let i = t.manager.tooltips.indexOf(e);
  return i < 0 ? null : t.manager.tooltipViews[i];
}
const iC = /* @__PURE__ */ te.define(), _O = /* @__PURE__ */ B.define({
  combine(n) {
    let e, t;
    for (let i of n)
      e = e || i.topContainer, t = t || i.bottomContainer;
    return { topContainer: e, bottomContainer: t };
  }
});
function fs(n, e) {
  let t = n.plugin(Ly), i = t ? t.specs.indexOf(e) : -1;
  return i > -1 ? t.panels[i] : null;
}
const Ly = /* @__PURE__ */ Le.fromClass(class {
  constructor(n) {
    this.input = n.state.facet(us), this.specs = this.input.filter((t) => t), this.panels = this.specs.map((t) => t(n));
    let e = n.state.facet(_O);
    this.top = new Oo(n, !0, e.topContainer), this.bottom = new Oo(n, !1, e.bottomContainer), this.top.sync(this.panels.filter((t) => t.top)), this.bottom.sync(this.panels.filter((t) => !t.top));
    for (let t of this.panels)
      t.dom.classList.add("cm-panel"), t.mount && t.mount();
  }
  update(n) {
    let e = n.state.facet(_O);
    this.top.container != e.topContainer && (this.top.sync([]), this.top = new Oo(n.view, !0, e.topContainer)), this.bottom.container != e.bottomContainer && (this.bottom.sync([]), this.bottom = new Oo(n.view, !1, e.bottomContainer)), this.top.syncClasses(), this.bottom.syncClasses();
    let t = n.state.facet(us);
    if (t != this.input) {
      let i = t.filter((a) => a), r = [], s = [], o = [], l = [];
      for (let a of i) {
        let c = this.specs.indexOf(a), h;
        c < 0 ? (h = a(n.view), l.push(h)) : (h = this.panels[c], h.update && h.update(n)), r.push(h), (h.top ? s : o).push(h);
      }
      this.specs = i, this.panels = r, this.top.sync(s), this.bottom.sync(o);
      for (let a of l)
        a.dom.classList.add("cm-panel"), a.mount && a.mount();
    } else
      for (let i of this.panels)
        i.update && i.update(n);
  }
  destroy() {
    this.top.sync([]), this.bottom.sync([]);
  }
}, {
  provide: (n) => Z.scrollMargins.of((e) => {
    let t = e.plugin(n);
    return t && { top: t.top.scrollMargin(), bottom: t.bottom.scrollMargin() };
  })
});
class Oo {
  constructor(e, t, i) {
    this.view = e, this.top = t, this.container = i, this.dom = void 0, this.classes = "", this.panels = [], this.syncClasses();
  }
  sync(e) {
    for (let t of this.panels)
      t.destroy && e.indexOf(t) < 0 && t.destroy();
    this.panels = e, this.syncDOM();
  }
  syncDOM() {
    if (this.panels.length == 0) {
      this.dom && (this.dom.remove(), this.dom = void 0);
      return;
    }
    if (!this.dom) {
      this.dom = document.createElement("div"), this.dom.className = this.top ? "cm-panels cm-panels-top" : "cm-panels cm-panels-bottom", this.dom.style[this.top ? "top" : "bottom"] = "0";
      let t = this.container || this.view.dom;
      t.insertBefore(this.dom, this.top ? t.firstChild : null);
    }
    let e = this.dom.firstChild;
    for (let t of this.panels)
      if (t.dom.parentNode == this.dom) {
        for (; e != t.dom; )
          e = XO(e);
        e = e.nextSibling;
      } else
        this.dom.insertBefore(t.dom, e);
    for (; e; )
      e = XO(e);
  }
  scrollMargin() {
    return !this.dom || this.container ? 0 : Math.max(0, this.top ? this.dom.getBoundingClientRect().bottom - Math.max(0, this.view.scrollDOM.getBoundingClientRect().top) : Math.min(innerHeight, this.view.scrollDOM.getBoundingClientRect().bottom) - this.dom.getBoundingClientRect().top);
  }
  syncClasses() {
    if (!(!this.container || this.classes == this.view.themeClasses)) {
      for (let e of this.classes.split(" "))
        e && this.container.classList.remove(e);
      for (let e of (this.classes = this.view.themeClasses).split(" "))
        e && this.container.classList.add(e);
    }
  }
}
function XO(n) {
  let e = n.nextSibling;
  return n.remove(), e;
}
const us = /* @__PURE__ */ B.define({
  enables: Ly
});
class An extends xi {
  /**
  @internal
  */
  compare(e) {
    return this == e || this.constructor == e.constructor && this.eq(e);
  }
  /**
  Compare this marker to another marker of the same type.
  */
  eq(e) {
    return !1;
  }
  /**
  Called if the marker has a `toDOM` method and its representation
  was removed from a gutter.
  */
  destroy(e) {
  }
}
An.prototype.elementClass = "";
An.prototype.toDOM = void 0;
An.prototype.mapMode = Ne.TrackBefore;
An.prototype.startSide = An.prototype.endSide = -1;
An.prototype.point = !0;
const Io = /* @__PURE__ */ B.define(), rC = /* @__PURE__ */ B.define(), sC = {
  class: "",
  renderEmptyElements: !1,
  elementStyle: "",
  markers: () => Oe.empty,
  lineMarker: () => null,
  widgetMarker: () => null,
  lineMarkerChange: null,
  initialSpacer: null,
  updateSpacer: null,
  domEventHandlers: {}
}, Gr = /* @__PURE__ */ B.define();
function oC(n) {
  return [Vy(), Gr.of({ ...sC, ...n })];
}
const qO = /* @__PURE__ */ B.define({
  combine: (n) => n.some((e) => e)
});
function Vy(n) {
  return [
    lC
  ];
}
const lC = /* @__PURE__ */ Le.fromClass(class {
  constructor(n) {
    this.view = n, this.prevViewport = n.viewport, this.dom = document.createElement("div"), this.dom.className = "cm-gutters", this.dom.setAttribute("aria-hidden", "true"), this.dom.style.minHeight = this.view.contentHeight / this.view.scaleY + "px", this.gutters = n.state.facet(Gr).map((e) => new MO(n, e));
    for (let e of this.gutters)
      this.dom.appendChild(e.dom);
    this.fixed = !n.state.facet(qO), this.fixed && (this.dom.style.position = "sticky"), this.syncGutters(!1), n.scrollDOM.insertBefore(this.dom, n.contentDOM);
  }
  update(n) {
    if (this.updateGutters(n)) {
      let e = this.prevViewport, t = n.view.viewport, i = Math.min(e.to, t.to) - Math.max(e.from, t.from);
      this.syncGutters(i < (t.to - t.from) * 0.8);
    }
    n.geometryChanged && (this.dom.style.minHeight = this.view.contentHeight / this.view.scaleY + "px"), this.view.state.facet(qO) != !this.fixed && (this.fixed = !this.fixed, this.dom.style.position = this.fixed ? "sticky" : ""), this.prevViewport = n.view.viewport;
  }
  syncGutters(n) {
    let e = this.dom.nextSibling;
    n && this.dom.remove();
    let t = Oe.iter(this.view.state.facet(Io), this.view.viewport.from), i = [], r = this.gutters.map((s) => new aC(s, this.view.viewport, -this.view.documentPadding.top));
    for (let s of this.view.viewportLineBlocks)
      if (i.length && (i = []), Array.isArray(s.type)) {
        let o = !0;
        for (let l of s.type)
          if (l.type == st.Text && o) {
            Vh(t, i, l.from);
            for (let a of r)
              a.line(this.view, l, i);
            o = !1;
          } else if (l.widget)
            for (let a of r)
              a.widget(this.view, l);
      } else if (s.type == st.Text) {
        Vh(t, i, s.from);
        for (let o of r)
          o.line(this.view, s, i);
      } else if (s.widget)
        for (let o of r)
          o.widget(this.view, s);
    for (let s of r)
      s.finish();
    n && this.view.scrollDOM.insertBefore(this.dom, e);
  }
  updateGutters(n) {
    let e = n.startState.facet(Gr), t = n.state.facet(Gr), i = n.docChanged || n.heightChanged || n.viewportChanged || !Oe.eq(n.startState.facet(Io), n.state.facet(Io), n.view.viewport.from, n.view.viewport.to);
    if (e == t)
      for (let r of this.gutters)
        r.update(n) && (i = !0);
    else {
      i = !0;
      let r = [];
      for (let s of t) {
        let o = e.indexOf(s);
        o < 0 ? r.push(new MO(this.view, s)) : (this.gutters[o].update(n), r.push(this.gutters[o]));
      }
      for (let s of this.gutters)
        s.dom.remove(), r.indexOf(s) < 0 && s.destroy();
      for (let s of r)
        this.dom.appendChild(s.dom);
      this.gutters = r;
    }
    return i;
  }
  destroy() {
    for (let n of this.gutters)
      n.destroy();
    this.dom.remove();
  }
}, {
  provide: (n) => Z.scrollMargins.of((e) => {
    let t = e.plugin(n);
    return !t || t.gutters.length == 0 || !t.fixed ? null : e.textDirection == ve.LTR ? { left: t.dom.offsetWidth * e.scaleX } : { right: t.dom.offsetWidth * e.scaleX };
  })
});
function ZO(n) {
  return Array.isArray(n) ? n : [n];
}
function Vh(n, e, t) {
  for (; n.value && n.from <= t; )
    n.from == t && e.push(n.value), n.next();
}
class aC {
  constructor(e, t, i) {
    this.gutter = e, this.height = i, this.i = 0, this.cursor = Oe.iter(e.markers, t.from);
  }
  addElement(e, t, i) {
    let { gutter: r } = this, s = (t.top - this.height) / e.scaleY, o = t.height / e.scaleY;
    if (this.i == r.elements.length) {
      let l = new By(e, o, s, i);
      r.elements.push(l), r.dom.appendChild(l.dom);
    } else
      r.elements[this.i].update(e, o, s, i);
    this.height = t.bottom, this.i++;
  }
  line(e, t, i) {
    let r = [];
    Vh(this.cursor, r, t.from), i.length && (r = r.concat(i));
    let s = this.gutter.config.lineMarker(e, t, r);
    s && r.unshift(s);
    let o = this.gutter;
    r.length == 0 && !o.config.renderEmptyElements || this.addElement(e, t, r);
  }
  widget(e, t) {
    let i = this.gutter.config.widgetMarker(e, t.widget, t), r = i ? [i] : null;
    for (let s of e.state.facet(rC)) {
      let o = s(e, t.widget, t);
      o && (r || (r = [])).push(o);
    }
    r && this.addElement(e, t, r);
  }
  finish() {
    let e = this.gutter;
    for (; e.elements.length > this.i; ) {
      let t = e.elements.pop();
      e.dom.removeChild(t.dom), t.destroy();
    }
  }
}
class MO {
  constructor(e, t) {
    this.view = e, this.config = t, this.elements = [], this.spacer = null, this.dom = document.createElement("div"), this.dom.className = "cm-gutter" + (this.config.class ? " " + this.config.class : "");
    for (let i in t.domEventHandlers)
      this.dom.addEventListener(i, (r) => {
        let s = r.target, o;
        if (s != this.dom && this.dom.contains(s)) {
          for (; s.parentNode != this.dom; )
            s = s.parentNode;
          let a = s.getBoundingClientRect();
          o = (a.top + a.bottom) / 2;
        } else
          o = r.clientY;
        let l = e.lineBlockAtHeight(o - e.documentTop);
        t.domEventHandlers[i](e, l, r) && r.preventDefault();
      });
    this.markers = ZO(t.markers(e)), t.initialSpacer && (this.spacer = new By(e, 0, 0, [t.initialSpacer(e)]), this.dom.appendChild(this.spacer.dom), this.spacer.dom.style.cssText += "visibility: hidden; pointer-events: none");
  }
  update(e) {
    let t = this.markers;
    if (this.markers = ZO(this.config.markers(e.view)), this.spacer && this.config.updateSpacer) {
      let r = this.config.updateSpacer(this.spacer.markers[0], e);
      r != this.spacer.markers[0] && this.spacer.update(e.view, 0, 0, [r]);
    }
    let i = e.view.viewport;
    return !Oe.eq(this.markers, t, i.from, i.to) || (this.config.lineMarkerChange ? this.config.lineMarkerChange(e) : !1);
  }
  destroy() {
    for (let e of this.elements)
      e.destroy();
  }
}
class By {
  constructor(e, t, i, r) {
    this.height = -1, this.above = 0, this.markers = [], this.dom = document.createElement("div"), this.dom.className = "cm-gutterElement", this.update(e, t, i, r);
  }
  update(e, t, i, r) {
    this.height != t && (this.height = t, this.dom.style.height = t + "px"), this.above != i && (this.dom.style.marginTop = (this.above = i) ? i + "px" : ""), cC(this.markers, r) || this.setMarkers(e, r);
  }
  setMarkers(e, t) {
    let i = "cm-gutterElement", r = this.dom.firstChild;
    for (let s = 0, o = 0; ; ) {
      let l = o, a = s < t.length ? t[s++] : null, c = !1;
      if (a) {
        let h = a.elementClass;
        h && (i += " " + h);
        for (let f = o; f < this.markers.length; f++)
          if (this.markers[f].compare(a)) {
            l = f, c = !0;
            break;
          }
      } else
        l = this.markers.length;
      for (; o < l; ) {
        let h = this.markers[o++];
        if (h.toDOM) {
          h.destroy(r);
          let f = r.nextSibling;
          r.remove(), r = f;
        }
      }
      if (!a)
        break;
      a.toDOM && (c ? r = r.nextSibling : this.dom.insertBefore(a.toDOM(e), r)), c && o++;
    }
    this.dom.className = i, this.markers = t;
  }
  destroy() {
    this.setMarkers(null, []);
  }
}
function cC(n, e) {
  if (n.length != e.length)
    return !1;
  for (let t = 0; t < n.length; t++)
    if (!n[t].compare(e[t]))
      return !1;
  return !0;
}
const hC = /* @__PURE__ */ B.define(), fC = /* @__PURE__ */ B.define(), Vi = /* @__PURE__ */ B.define({
  combine(n) {
    return gn(n, { formatNumber: String, domEventHandlers: {} }, {
      domEventHandlers(e, t) {
        let i = Object.assign({}, e);
        for (let r in t) {
          let s = i[r], o = t[r];
          i[r] = s ? (l, a, c) => s(l, a, c) || o(l, a, c) : o;
        }
        return i;
      }
    });
  }
});
class Ga extends An {
  constructor(e) {
    super(), this.number = e;
  }
  eq(e) {
    return this.number == e.number;
  }
  toDOM() {
    return document.createTextNode(this.number);
  }
}
function Fa(n, e) {
  return n.state.facet(Vi).formatNumber(e, n.state);
}
const uC = /* @__PURE__ */ Gr.compute([Vi], (n) => ({
  class: "cm-lineNumbers",
  renderEmptyElements: !1,
  markers(e) {
    return e.state.facet(hC);
  },
  lineMarker(e, t, i) {
    return i.some((r) => r.toDOM) ? null : new Ga(Fa(e, e.state.doc.lineAt(t.from).number));
  },
  widgetMarker: (e, t, i) => {
    for (let r of e.state.facet(fC)) {
      let s = r(e, t, i);
      if (s)
        return s;
    }
    return null;
  },
  lineMarkerChange: (e) => e.startState.facet(Vi) != e.state.facet(Vi),
  initialSpacer(e) {
    return new Ga(Fa(e, LO(e.state.doc.lines)));
  },
  updateSpacer(e, t) {
    let i = Fa(t.view, LO(t.view.state.doc.lines));
    return i == e.number ? e : new Ga(i);
  },
  domEventHandlers: n.facet(Vi).domEventHandlers
}));
function dC(n = {}) {
  return [
    Vi.of(n),
    Vy(),
    uC
  ];
}
function LO(n) {
  let e = 9;
  for (; e < n; )
    e = e * 10 + 9;
  return e;
}
const OC = /* @__PURE__ */ new class extends An {
  constructor() {
    super(...arguments), this.elementClass = "cm-activeLineGutter";
  }
}(), pC = /* @__PURE__ */ Io.compute(["selection"], (n) => {
  let e = [], t = -1;
  for (let i of n.selection.ranges) {
    let r = n.doc.lineAt(i.head).from;
    r > t && (t = r, e.push(OC.range(r)));
  }
  return Oe.of(e);
});
function mC() {
  return pC;
}
const Wy = 1024;
let gC = 0;
class wt {
  constructor(e, t) {
    this.from = e, this.to = t;
  }
}
class J {
  /**
  Create a new node prop type.
  */
  constructor(e = {}) {
    this.id = gC++, this.perNode = !!e.perNode, this.deserialize = e.deserialize || (() => {
      throw new Error("This node type doesn't define a deserialize function");
    });
  }
  /**
  This is meant to be used with
  [`NodeSet.extend`](#common.NodeSet.extend) or
  [`LRParser.configure`](#lr.ParserConfig.props) to compute
  prop values for each node type in the set. Takes a [match
  object](#common.NodeType^match) or function that returns undefined
  if the node type doesn't get this prop, and the prop's value if
  it does.
  */
  add(e) {
    if (this.perNode)
      throw new RangeError("Can't add per-node props to node types");
    return typeof e != "function" && (e = We.match(e)), (t) => {
      let i = e(t);
      return i === void 0 ? null : [this, i];
    };
  }
}
J.closedBy = new J({ deserialize: (n) => n.split(" ") });
J.openedBy = new J({ deserialize: (n) => n.split(" ") });
J.group = new J({ deserialize: (n) => n.split(" ") });
J.isolate = new J({ deserialize: (n) => {
  if (n && n != "rtl" && n != "ltr" && n != "auto")
    throw new RangeError("Invalid value for isolate: " + n);
  return n || "auto";
} });
J.contextHash = new J({ perNode: !0 });
J.lookAhead = new J({ perNode: !0 });
J.mounted = new J({ perNode: !0 });
class ds {
  constructor(e, t, i) {
    this.tree = e, this.overlay = t, this.parser = i;
  }
  /**
  @internal
  */
  static get(e) {
    return e && e.props && e.props[J.mounted.id];
  }
}
const yC = /* @__PURE__ */ Object.create(null);
class We {
  /**
  @internal
  */
  constructor(e, t, i, r = 0) {
    this.name = e, this.props = t, this.id = i, this.flags = r;
  }
  /**
  Define a node type.
  */
  static define(e) {
    let t = e.props && e.props.length ? /* @__PURE__ */ Object.create(null) : yC, i = (e.top ? 1 : 0) | (e.skipped ? 2 : 0) | (e.error ? 4 : 0) | (e.name == null ? 8 : 0), r = new We(e.name || "", t, e.id, i);
    if (e.props) {
      for (let s of e.props)
        if (Array.isArray(s) || (s = s(r)), s) {
          if (s[0].perNode)
            throw new RangeError("Can't store a per-node prop on a node type");
          t[s[0].id] = s[1];
        }
    }
    return r;
  }
  /**
  Retrieves a node prop for this type. Will return `undefined` if
  the prop isn't present on this node.
  */
  prop(e) {
    return this.props[e.id];
  }
  /**
  True when this is the top node of a grammar.
  */
  get isTop() {
    return (this.flags & 1) > 0;
  }
  /**
  True when this node is produced by a skip rule.
  */
  get isSkipped() {
    return (this.flags & 2) > 0;
  }
  /**
  Indicates whether this is an error node.
  */
  get isError() {
    return (this.flags & 4) > 0;
  }
  /**
  When true, this node type doesn't correspond to a user-declared
  named node, for example because it is used to cache repetition.
  */
  get isAnonymous() {
    return (this.flags & 8) > 0;
  }
  /**
  Returns true when this node's name or one of its
  [groups](#common.NodeProp^group) matches the given string.
  */
  is(e) {
    if (typeof e == "string") {
      if (this.name == e)
        return !0;
      let t = this.prop(J.group);
      return t ? t.indexOf(e) > -1 : !1;
    }
    return this.id == e;
  }
  /**
  Create a function from node types to arbitrary values by
  specifying an object whose property names are node or
  [group](#common.NodeProp^group) names. Often useful with
  [`NodeProp.add`](#common.NodeProp.add). You can put multiple
  names, separated by spaces, in a single property name to map
  multiple node names to a single value.
  */
  static match(e) {
    let t = /* @__PURE__ */ Object.create(null);
    for (let i in e)
      for (let r of i.split(" "))
        t[r] = e[i];
    return (i) => {
      for (let r = i.prop(J.group), s = -1; s < (r ? r.length : 0); s++) {
        let o = t[s < 0 ? i.name : r[s]];
        if (o)
          return o;
      }
    };
  }
}
We.none = new We(
  "",
  /* @__PURE__ */ Object.create(null),
  0,
  8
  /* NodeFlag.Anonymous */
);
class Ws {
  /**
  Create a set with the given types. The `id` property of each
  type should correspond to its position within the array.
  */
  constructor(e) {
    this.types = e;
    for (let t = 0; t < e.length; t++)
      if (e[t].id != t)
        throw new RangeError("Node type ids should correspond to array positions when creating a node set");
  }
  /**
  Create a copy of this set with some node properties added. The
  arguments to this method can be created with
  [`NodeProp.add`](#common.NodeProp.add).
  */
  extend(...e) {
    let t = [];
    for (let i of this.types) {
      let r = null;
      for (let s of e) {
        let o = s(i);
        o && (r || (r = Object.assign({}, i.props)), r[o[0].id] = o[1]);
      }
      t.push(r ? new We(i.name, r, i.id, i.flags) : i);
    }
    return new Ws(t);
  }
}
const po = /* @__PURE__ */ new WeakMap(), VO = /* @__PURE__ */ new WeakMap();
var xe;
(function(n) {
  n[n.ExcludeBuffers = 1] = "ExcludeBuffers", n[n.IncludeAnonymous = 2] = "IncludeAnonymous", n[n.IgnoreMounts = 4] = "IgnoreMounts", n[n.IgnoreOverlays = 8] = "IgnoreOverlays";
})(xe || (xe = {}));
class me {
  /**
  Construct a new tree. See also [`Tree.build`](#common.Tree^build).
  */
  constructor(e, t, i, r, s) {
    if (this.type = e, this.children = t, this.positions = i, this.length = r, this.props = null, s && s.length) {
      this.props = /* @__PURE__ */ Object.create(null);
      for (let [o, l] of s)
        this.props[typeof o == "number" ? o : o.id] = l;
    }
  }
  /**
  @internal
  */
  toString() {
    let e = ds.get(this);
    if (e && !e.overlay)
      return e.tree.toString();
    let t = "";
    for (let i of this.children) {
      let r = i.toString();
      r && (t && (t += ","), t += r);
    }
    return this.type.name ? (/\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) + (t.length ? "(" + t + ")" : "") : t;
  }
  /**
  Get a [tree cursor](#common.TreeCursor) positioned at the top of
  the tree. Mode can be used to [control](#common.IterMode) which
  nodes the cursor visits.
  */
  cursor(e = 0) {
    return new Ql(this.topNode, e);
  }
  /**
  Get a [tree cursor](#common.TreeCursor) pointing into this tree
  at the given position and side (see
  [`moveTo`](#common.TreeCursor.moveTo).
  */
  cursorAt(e, t = 0, i = 0) {
    let r = po.get(this) || this.topNode, s = new Ql(r);
    return s.moveTo(e, t), po.set(this, s._tree), s;
  }
  /**
  Get a [syntax node](#common.SyntaxNode) object for the top of the
  tree.
  */
  get topNode() {
    return new nt(this, 0, 0, null);
  }
  /**
  Get the [syntax node](#common.SyntaxNode) at the given position.
  If `side` is -1, this will move into nodes that end at the
  position. If 1, it'll move into nodes that start at the
  position. With 0, it'll only enter nodes that cover the position
  from both sides.
  
  Note that this will not enter
  [overlays](#common.MountedTree.overlay), and you often want
  [`resolveInner`](#common.Tree.resolveInner) instead.
  */
  resolve(e, t = 0) {
    let i = Os(po.get(this) || this.topNode, e, t, !1);
    return po.set(this, i), i;
  }
  /**
  Like [`resolve`](#common.Tree.resolve), but will enter
  [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node
  pointing into the innermost overlaid tree at the given position
  (with parent links going through all parent structure, including
  the host trees).
  */
  resolveInner(e, t = 0) {
    let i = Os(VO.get(this) || this.topNode, e, t, !0);
    return VO.set(this, i), i;
  }
  /**
  In some situations, it can be useful to iterate through all
  nodes around a position, including those in overlays that don't
  directly cover the position. This method gives you an iterator
  that will produce all nodes, from small to big, around the given
  position.
  */
  resolveStack(e, t = 0) {
    return QC(this, e, t);
  }
  /**
  Iterate over the tree and its children, calling `enter` for any
  node that touches the `from`/`to` region (if given) before
  running over such a node's children, and `leave` (if given) when
  leaving the node. When `enter` returns `false`, that node will
  not have its children iterated over (or `leave` called).
  */
  iterate(e) {
    let { enter: t, leave: i, from: r = 0, to: s = this.length } = e, o = e.mode || 0, l = (o & xe.IncludeAnonymous) > 0;
    for (let a = this.cursor(o | xe.IncludeAnonymous); ; ) {
      let c = !1;
      if (a.from <= s && a.to >= r && (!l && a.type.isAnonymous || t(a) !== !1)) {
        if (a.firstChild())
          continue;
        c = !0;
      }
      for (; c && i && (l || !a.type.isAnonymous) && i(a), !a.nextSibling(); ) {
        if (!a.parent())
          return;
        c = !0;
      }
    }
  }
  /**
  Get the value of the given [node prop](#common.NodeProp) for this
  node. Works with both per-node and per-type props.
  */
  prop(e) {
    return e.perNode ? this.props ? this.props[e.id] : void 0 : this.type.prop(e);
  }
  /**
  Returns the node's [per-node props](#common.NodeProp.perNode) in a
  format that can be passed to the [`Tree`](#common.Tree)
  constructor.
  */
  get propValues() {
    let e = [];
    if (this.props)
      for (let t in this.props)
        e.push([+t, this.props[t]]);
    return e;
  }
  /**
  Balance the direct children of this tree, producing a copy of
  which may have children grouped into subtrees with type
  [`NodeType.none`](#common.NodeType^none).
  */
  balance(e = {}) {
    return this.children.length <= 8 ? this : au(We.none, this.children, this.positions, 0, this.children.length, 0, this.length, (t, i, r) => new me(this.type, t, i, r, this.propValues), e.makeTree || ((t, i, r) => new me(We.none, t, i, r)));
  }
  /**
  Build a tree from a postfix-ordered buffer of node information,
  or a cursor over such a buffer.
  */
  static build(e) {
    return xC(e);
  }
}
me.empty = new me(We.none, [], [], 0);
class ou {
  constructor(e, t) {
    this.buffer = e, this.index = t;
  }
  get id() {
    return this.buffer[this.index - 4];
  }
  get start() {
    return this.buffer[this.index - 3];
  }
  get end() {
    return this.buffer[this.index - 2];
  }
  get size() {
    return this.buffer[this.index - 1];
  }
  get pos() {
    return this.index;
  }
  next() {
    this.index -= 4;
  }
  fork() {
    return new ou(this.buffer, this.index);
  }
}
class Hn {
  /**
  Create a tree buffer.
  */
  constructor(e, t, i) {
    this.buffer = e, this.length = t, this.set = i;
  }
  /**
  @internal
  */
  get type() {
    return We.none;
  }
  /**
  @internal
  */
  toString() {
    let e = [];
    for (let t = 0; t < this.buffer.length; )
      e.push(this.childString(t)), t = this.buffer[t + 3];
    return e.join(",");
  }
  /**
  @internal
  */
  childString(e) {
    let t = this.buffer[e], i = this.buffer[e + 3], r = this.set.types[t], s = r.name;
    if (/\W/.test(s) && !r.isError && (s = JSON.stringify(s)), e += 4, i == e)
      return s;
    let o = [];
    for (; e < i; )
      o.push(this.childString(e)), e = this.buffer[e + 3];
    return s + "(" + o.join(",") + ")";
  }
  /**
  @internal
  */
  findChild(e, t, i, r, s) {
    let { buffer: o } = this, l = -1;
    for (let a = e; a != t && !(zy(s, r, o[a + 1], o[a + 2]) && (l = a, i > 0)); a = o[a + 3])
      ;
    return l;
  }
  /**
  @internal
  */
  slice(e, t, i) {
    let r = this.buffer, s = new Uint16Array(t - e), o = 0;
    for (let l = e, a = 0; l < t; ) {
      s[a++] = r[l++], s[a++] = r[l++] - i;
      let c = s[a++] = r[l++] - i;
      s[a++] = r[l++] - e, o = Math.max(o, c);
    }
    return new Hn(s, o, this.set);
  }
}
function zy(n, e, t, i) {
  switch (n) {
    case -2:
      return t < e;
    case -1:
      return i >= e && t < e;
    case 0:
      return t < e && i > e;
    case 1:
      return t <= e && i > e;
    case 2:
      return i > e;
    case 4:
      return !0;
  }
}
function Os(n, e, t, i) {
  for (var r; n.from == n.to || (t < 1 ? n.from >= e : n.from > e) || (t > -1 ? n.to <= e : n.to < e); ) {
    let o = !i && n instanceof nt && n.index < 0 ? null : n.parent;
    if (!o)
      return n;
    n = o;
  }
  let s = i ? 0 : xe.IgnoreOverlays;
  if (i)
    for (let o = n, l = o.parent; l; o = l, l = o.parent)
      o instanceof nt && o.index < 0 && ((r = l.enter(e, t, s)) === null || r === void 0 ? void 0 : r.from) != o.from && (n = l);
  for (; ; ) {
    let o = n.enter(e, t, s);
    if (!o)
      return n;
    n = o;
  }
}
class Dy {
  cursor(e = 0) {
    return new Ql(this, e);
  }
  getChild(e, t = null, i = null) {
    let r = BO(this, e, t, i);
    return r.length ? r[0] : null;
  }
  getChildren(e, t = null, i = null) {
    return BO(this, e, t, i);
  }
  resolve(e, t = 0) {
    return Os(this, e, t, !1);
  }
  resolveInner(e, t = 0) {
    return Os(this, e, t, !0);
  }
  matchContext(e) {
    return Bh(this.parent, e);
  }
  enterUnfinishedNodesBefore(e) {
    let t = this.childBefore(e), i = this;
    for (; t; ) {
      let r = t.lastChild;
      if (!r || r.to != t.to)
        break;
      r.type.isError && r.from == r.to ? (i = t, t = r.prevSibling) : t = r;
    }
    return i;
  }
  get node() {
    return this;
  }
  get next() {
    return this.parent;
  }
}
class nt extends Dy {
  constructor(e, t, i, r) {
    super(), this._tree = e, this.from = t, this.index = i, this._parent = r;
  }
  get type() {
    return this._tree.type;
  }
  get name() {
    return this._tree.type.name;
  }
  get to() {
    return this.from + this._tree.length;
  }
  nextChild(e, t, i, r, s = 0) {
    for (let o = this; ; ) {
      for (let { children: l, positions: a } = o._tree, c = t > 0 ? l.length : -1; e != c; e += t) {
        let h = l[e], f = a[e] + o.from;
        if (zy(r, i, f, f + h.length)) {
          if (h instanceof Hn) {
            if (s & xe.ExcludeBuffers)
              continue;
            let u = h.findChild(0, h.buffer.length, t, i - f, r);
            if (u > -1)
              return new cn(new SC(o, h, e, f), null, u);
          } else if (s & xe.IncludeAnonymous || !h.type.isAnonymous || lu(h)) {
            let u;
            if (!(s & xe.IgnoreMounts) && (u = ds.get(h)) && !u.overlay)
              return new nt(u.tree, f, e, o);
            let d = new nt(h, f, e, o);
            return s & xe.IncludeAnonymous || !d.type.isAnonymous ? d : d.nextChild(t < 0 ? h.children.length - 1 : 0, t, i, r);
          }
        }
      }
      if (s & xe.IncludeAnonymous || !o.type.isAnonymous || (o.index >= 0 ? e = o.index + t : e = t < 0 ? -1 : o._parent._tree.children.length, o = o._parent, !o))
        return null;
    }
  }
  get firstChild() {
    return this.nextChild(
      0,
      1,
      0,
      4
      /* Side.DontCare */
    );
  }
  get lastChild() {
    return this.nextChild(
      this._tree.children.length - 1,
      -1,
      0,
      4
      /* Side.DontCare */
    );
  }
  childAfter(e) {
    return this.nextChild(
      0,
      1,
      e,
      2
      /* Side.After */
    );
  }
  childBefore(e) {
    return this.nextChild(
      this._tree.children.length - 1,
      -1,
      e,
      -2
      /* Side.Before */
    );
  }
  enter(e, t, i = 0) {
    let r;
    if (!(i & xe.IgnoreOverlays) && (r = ds.get(this._tree)) && r.overlay) {
      let s = e - this.from;
      for (let { from: o, to: l } of r.overlay)
        if ((t > 0 ? o <= s : o < s) && (t < 0 ? l >= s : l > s))
          return new nt(r.tree, r.overlay[0].from + this.from, -1, this);
    }
    return this.nextChild(0, 1, e, t, i);
  }
  nextSignificantParent() {
    let e = this;
    for (; e.type.isAnonymous && e._parent; )
      e = e._parent;
    return e;
  }
  get parent() {
    return this._parent ? this._parent.nextSignificantParent() : null;
  }
  get nextSibling() {
    return this._parent && this.index >= 0 ? this._parent.nextChild(
      this.index + 1,
      1,
      0,
      4
      /* Side.DontCare */
    ) : null;
  }
  get prevSibling() {
    return this._parent && this.index >= 0 ? this._parent.nextChild(
      this.index - 1,
      -1,
      0,
      4
      /* Side.DontCare */
    ) : null;
  }
  get tree() {
    return this._tree;
  }
  toTree() {
    return this._tree;
  }
  /**
  @internal
  */
  toString() {
    return this._tree.toString();
  }
}
function BO(n, e, t, i) {
  let r = n.cursor(), s = [];
  if (!r.firstChild())
    return s;
  if (t != null) {
    for (let o = !1; !o; )
      if (o = r.type.is(t), !r.nextSibling())
        return s;
  }
  for (; ; ) {
    if (i != null && r.type.is(i))
      return s;
    if (r.type.is(e) && s.push(r.node), !r.nextSibling())
      return i == null ? s : [];
  }
}
function Bh(n, e, t = e.length - 1) {
  for (let i = n; t >= 0; i = i.parent) {
    if (!i)
      return !1;
    if (!i.type.isAnonymous) {
      if (e[t] && e[t] != i.name)
        return !1;
      t--;
    }
  }
  return !0;
}
class SC {
  constructor(e, t, i, r) {
    this.parent = e, this.buffer = t, this.index = i, this.start = r;
  }
}
class cn extends Dy {
  get name() {
    return this.type.name;
  }
  get from() {
    return this.context.start + this.context.buffer.buffer[this.index + 1];
  }
  get to() {
    return this.context.start + this.context.buffer.buffer[this.index + 2];
  }
  constructor(e, t, i) {
    super(), this.context = e, this._parent = t, this.index = i, this.type = e.buffer.set.types[e.buffer.buffer[i]];
  }
  child(e, t, i) {
    let { buffer: r } = this.context, s = r.findChild(this.index + 4, r.buffer[this.index + 3], e, t - this.context.start, i);
    return s < 0 ? null : new cn(this.context, this, s);
  }
  get firstChild() {
    return this.child(
      1,
      0,
      4
      /* Side.DontCare */
    );
  }
  get lastChild() {
    return this.child(
      -1,
      0,
      4
      /* Side.DontCare */
    );
  }
  childAfter(e) {
    return this.child(
      1,
      e,
      2
      /* Side.After */
    );
  }
  childBefore(e) {
    return this.child(
      -1,
      e,
      -2
      /* Side.Before */
    );
  }
  enter(e, t, i = 0) {
    if (i & xe.ExcludeBuffers)
      return null;
    let { buffer: r } = this.context, s = r.findChild(this.index + 4, r.buffer[this.index + 3], t > 0 ? 1 : -1, e - this.context.start, t);
    return s < 0 ? null : new cn(this.context, this, s);
  }
  get parent() {
    return this._parent || this.context.parent.nextSignificantParent();
  }
  externalSibling(e) {
    return this._parent ? null : this.context.parent.nextChild(
      this.context.index + e,
      e,
      0,
      4
      /* Side.DontCare */
    );
  }
  get nextSibling() {
    let { buffer: e } = this.context, t = e.buffer[this.index + 3];
    return t < (this._parent ? e.buffer[this._parent.index + 3] : e.buffer.length) ? new cn(this.context, this._parent, t) : this.externalSibling(1);
  }
  get prevSibling() {
    let { buffer: e } = this.context, t = this._parent ? this._parent.index + 4 : 0;
    return this.index == t ? this.externalSibling(-1) : new cn(this.context, this._parent, e.findChild(
      t,
      this.index,
      -1,
      0,
      4
      /* Side.DontCare */
    ));
  }
  get tree() {
    return null;
  }
  toTree() {
    let e = [], t = [], { buffer: i } = this.context, r = this.index + 4, s = i.buffer[this.index + 3];
    if (s > r) {
      let o = i.buffer[this.index + 1];
      e.push(i.slice(r, s, o)), t.push(0);
    }
    return new me(this.type, e, t, this.to - this.from);
  }
  /**
  @internal
  */
  toString() {
    return this.context.buffer.childString(this.index);
  }
}
function Iy(n) {
  if (!n.length)
    return null;
  let e = 0, t = n[0];
  for (let s = 1; s < n.length; s++) {
    let o = n[s];
    (o.from > t.from || o.to < t.to) && (t = o, e = s);
  }
  let i = t instanceof nt && t.index < 0 ? null : t.parent, r = n.slice();
  return i ? r[e] = i : r.splice(e, 1), new bC(r, t);
}
class bC {
  constructor(e, t) {
    this.heads = e, this.node = t;
  }
  get next() {
    return Iy(this.heads);
  }
}
function QC(n, e, t) {
  let i = n.resolveInner(e, t), r = null;
  for (let s = i instanceof nt ? i : i.context.parent; s; s = s.parent)
    if (s.index < 0) {
      let o = s.parent;
      (r || (r = [i])).push(o.resolve(e, t)), s = o;
    } else {
      let o = ds.get(s.tree);
      if (o && o.overlay && o.overlay[0].from <= e && o.overlay[o.overlay.length - 1].to >= e) {
        let l = new nt(o.tree, o.overlay[0].from + s.from, -1, s);
        (r || (r = [i])).push(Os(l, e, t, !1));
      }
    }
  return r ? Iy(r) : i;
}
class Ql {
  /**
  Shorthand for `.type.name`.
  */
  get name() {
    return this.type.name;
  }
  /**
  @internal
  */
  constructor(e, t = 0) {
    if (this.mode = t, this.buffer = null, this.stack = [], this.index = 0, this.bufferNode = null, e instanceof nt)
      this.yieldNode(e);
    else {
      this._tree = e.context.parent, this.buffer = e.context;
      for (let i = e._parent; i; i = i._parent)
        this.stack.unshift(i.index);
      this.bufferNode = e, this.yieldBuf(e.index);
    }
  }
  yieldNode(e) {
    return e ? (this._tree = e, this.type = e.type, this.from = e.from, this.to = e.to, !0) : !1;
  }
  yieldBuf(e, t) {
    this.index = e;
    let { start: i, buffer: r } = this.buffer;
    return this.type = t || r.set.types[r.buffer[e]], this.from = i + r.buffer[e + 1], this.to = i + r.buffer[e + 2], !0;
  }
  /**
  @internal
  */
  yield(e) {
    return e ? e instanceof nt ? (this.buffer = null, this.yieldNode(e)) : (this.buffer = e.context, this.yieldBuf(e.index, e.type)) : !1;
  }
  /**
  @internal
  */
  toString() {
    return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();
  }
  /**
  @internal
  */
  enterChild(e, t, i) {
    if (!this.buffer)
      return this.yield(this._tree.nextChild(e < 0 ? this._tree._tree.children.length - 1 : 0, e, t, i, this.mode));
    let { buffer: r } = this.buffer, s = r.findChild(this.index + 4, r.buffer[this.index + 3], e, t - this.buffer.start, i);
    return s < 0 ? !1 : (this.stack.push(this.index), this.yieldBuf(s));
  }
  /**
  Move the cursor to this node's first child. When this returns
  false, the node has no child, and the cursor has not been moved.
  */
  firstChild() {
    return this.enterChild(
      1,
      0,
      4
      /* Side.DontCare */
    );
  }
  /**
  Move the cursor to this node's last child.
  */
  lastChild() {
    return this.enterChild(
      -1,
      0,
      4
      /* Side.DontCare */
    );
  }
  /**
  Move the cursor to the first child that ends after `pos`.
  */
  childAfter(e) {
    return this.enterChild(
      1,
      e,
      2
      /* Side.After */
    );
  }
  /**
  Move to the last child that starts before `pos`.
  */
  childBefore(e) {
    return this.enterChild(
      -1,
      e,
      -2
      /* Side.Before */
    );
  }
  /**
  Move the cursor to the child around `pos`. If side is -1 the
  child may end at that position, when 1 it may start there. This
  will also enter [overlaid](#common.MountedTree.overlay)
  [mounted](#common.NodeProp^mounted) trees unless `overlays` is
  set to false.
  */
  enter(e, t, i = this.mode) {
    return this.buffer ? i & xe.ExcludeBuffers ? !1 : this.enterChild(1, e, t) : this.yield(this._tree.enter(e, t, i));
  }
  /**
  Move to the node's parent node, if this isn't the top node.
  */
  parent() {
    if (!this.buffer)
      return this.yieldNode(this.mode & xe.IncludeAnonymous ? this._tree._parent : this._tree.parent);
    if (this.stack.length)
      return this.yieldBuf(this.stack.pop());
    let e = this.mode & xe.IncludeAnonymous ? this.buffer.parent : this.buffer.parent.nextSignificantParent();
    return this.buffer = null, this.yieldNode(e);
  }
  /**
  @internal
  */
  sibling(e) {
    if (!this.buffer)
      return this._tree._parent ? this.yield(this._tree.index < 0 ? null : this._tree._parent.nextChild(this._tree.index + e, e, 0, 4, this.mode)) : !1;
    let { buffer: t } = this.buffer, i = this.stack.length - 1;
    if (e < 0) {
      let r = i < 0 ? 0 : this.stack[i] + 4;
      if (this.index != r)
        return this.yieldBuf(t.findChild(
          r,
          this.index,
          -1,
          0,
          4
          /* Side.DontCare */
        ));
    } else {
      let r = t.buffer[this.index + 3];
      if (r < (i < 0 ? t.buffer.length : t.buffer[this.stack[i] + 3]))
        return this.yieldBuf(r);
    }
    return i < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + e, e, 0, 4, this.mode)) : !1;
  }
  /**
  Move to this node's next sibling, if any.
  */
  nextSibling() {
    return this.sibling(1);
  }
  /**
  Move to this node's previous sibling, if any.
  */
  prevSibling() {
    return this.sibling(-1);
  }
  atLastNode(e) {
    let t, i, { buffer: r } = this;
    if (r) {
      if (e > 0) {
        if (this.index < r.buffer.buffer.length)
          return !1;
      } else
        for (let s = 0; s < this.index; s++)
          if (r.buffer.buffer[s + 3] < this.index)
            return !1;
      ({ index: t, parent: i } = r);
    } else
      ({ index: t, _parent: i } = this._tree);
    for (; i; { index: t, _parent: i } = i)
      if (t > -1)
        for (let s = t + e, o = e < 0 ? -1 : i._tree.children.length; s != o; s += e) {
          let l = i._tree.children[s];
          if (this.mode & xe.IncludeAnonymous || l instanceof Hn || !l.type.isAnonymous || lu(l))
            return !1;
        }
    return !0;
  }
  move(e, t) {
    if (t && this.enterChild(
      e,
      0,
      4
      /* Side.DontCare */
    ))
      return !0;
    for (; ; ) {
      if (this.sibling(e))
        return !0;
      if (this.atLastNode(e) || !this.parent())
        return !1;
    }
  }
  /**
  Move to the next node in a
  [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR)
  traversal, going from a node to its first child or, if the
  current node is empty or `enter` is false, its next sibling or
  the next sibling of the first parent node that has one.
  */
  next(e = !0) {
    return this.move(1, e);
  }
  /**
  Move to the next node in a last-to-first pre-order traversal. A
  node is followed by its last child or, if it has none, its
  previous sibling or the previous sibling of the first parent
  node that has one.
  */
  prev(e = !0) {
    return this.move(-1, e);
  }
  /**
  Move the cursor to the innermost node that covers `pos`. If
  `side` is -1, it will enter nodes that end at `pos`. If it is 1,
  it will enter nodes that start at `pos`.
  */
  moveTo(e, t = 0) {
    for (; (this.from == this.to || (t < 1 ? this.from >= e : this.from > e) || (t > -1 ? this.to <= e : this.to < e)) && this.parent(); )
      ;
    for (; this.enterChild(1, e, t); )
      ;
    return this;
  }
  /**
  Get a [syntax node](#common.SyntaxNode) at the cursor's current
  position.
  */
  get node() {
    if (!this.buffer)
      return this._tree;
    let e = this.bufferNode, t = null, i = 0;
    if (e && e.context == this.buffer)
      e: for (let r = this.index, s = this.stack.length; s >= 0; ) {
        for (let o = e; o; o = o._parent)
          if (o.index == r) {
            if (r == this.index)
              return o;
            t = o, i = s + 1;
            break e;
          }
        r = this.stack[--s];
      }
    for (let r = i; r < this.stack.length; r++)
      t = new cn(this.buffer, t, this.stack[r]);
    return this.bufferNode = new cn(this.buffer, t, this.index);
  }
  /**
  Get the [tree](#common.Tree) that represents the current node, if
  any. Will return null when the node is in a [tree
  buffer](#common.TreeBuffer).
  */
  get tree() {
    return this.buffer ? null : this._tree._tree;
  }
  /**
  Iterate over the current node and all its descendants, calling
  `enter` when entering a node and `leave`, if given, when leaving
  one. When `enter` returns `false`, any children of that node are
  skipped, and `leave` isn't called for it.
  */
  iterate(e, t) {
    for (let i = 0; ; ) {
      let r = !1;
      if (this.type.isAnonymous || e(this) !== !1) {
        if (this.firstChild()) {
          i++;
          continue;
        }
        this.type.isAnonymous || (r = !0);
      }
      for (; ; ) {
        if (r && t && t(this), r = this.type.isAnonymous, !i)
          return;
        if (this.nextSibling())
          break;
        this.parent(), i--, r = !0;
      }
    }
  }
  /**
  Test whether the current node matches a given context—a sequence
  of direct parent node names. Empty strings in the context array
  are treated as wildcards.
  */
  matchContext(e) {
    if (!this.buffer)
      return Bh(this.node.parent, e);
    let { buffer: t } = this.buffer, { types: i } = t.set;
    for (let r = e.length - 1, s = this.stack.length - 1; r >= 0; s--) {
      if (s < 0)
        return Bh(this._tree, e, r);
      let o = i[t.buffer[this.stack[s]]];
      if (!o.isAnonymous) {
        if (e[r] && e[r] != o.name)
          return !1;
        r--;
      }
    }
    return !0;
  }
}
function lu(n) {
  return n.children.some((e) => e instanceof Hn || !e.type.isAnonymous || lu(e));
}
function xC(n) {
  var e;
  let { buffer: t, nodeSet: i, maxBufferLength: r = Wy, reused: s = [], minRepeatType: o = i.types.length } = n, l = Array.isArray(t) ? new ou(t, t.length) : t, a = i.types, c = 0, h = 0;
  function f(k, Q, P, E, z, N) {
    let { id: C, start: x, end: L, size: _ } = l, V = h, ee = c;
    for (; _ < 0; )
      if (l.next(), _ == -1) {
        let ne = s[C];
        P.push(ne), E.push(x - k);
        return;
      } else if (_ == -3) {
        c = C;
        return;
      } else if (_ == -4) {
        h = C;
        return;
      } else
        throw new RangeError(`Unrecognized record size: ${_}`);
    let ye = a[C], H, K, le = x - k;
    if (L - x <= r && (K = m(l.pos - Q, z))) {
      let ne = new Uint16Array(K.size - K.skip), T = l.pos - K.size, D = ne.length;
      for (; l.pos > T; )
        D = y(K.start, ne, D);
      H = new Hn(ne, L - K.start, i), le = K.start - k;
    } else {
      let ne = l.pos - _;
      l.next();
      let T = [], D = [], A = C >= o ? C : -1, se = 0, Se = L;
      for (; l.pos > ne; )
        A >= 0 && l.id == A && l.size >= 0 ? (l.end <= Se - r && (O(T, D, x, se, l.end, Se, A, V, ee), se = T.length, Se = l.end), l.next()) : N > 2500 ? u(x, ne, T, D) : f(x, ne, T, D, A, N + 1);
      if (A >= 0 && se > 0 && se < T.length && O(T, D, x, se, x, Se, A, V, ee), T.reverse(), D.reverse(), A > -1 && se > 0) {
        let Fe = d(ye, ee);
        H = au(ye, T, D, 0, T.length, 0, L - x, Fe, Fe);
      } else
        H = p(ye, T, D, L - x, V - L, ee);
    }
    P.push(H), E.push(le);
  }
  function u(k, Q, P, E) {
    let z = [], N = 0, C = -1;
    for (; l.pos > Q; ) {
      let { id: x, start: L, end: _, size: V } = l;
      if (V > 4)
        l.next();
      else {
        if (C > -1 && L < C)
          break;
        C < 0 && (C = _ - r), z.push(x, L, _), N++, l.next();
      }
    }
    if (N) {
      let x = new Uint16Array(N * 4), L = z[z.length - 2];
      for (let _ = z.length - 3, V = 0; _ >= 0; _ -= 3)
        x[V++] = z[_], x[V++] = z[_ + 1] - L, x[V++] = z[_ + 2] - L, x[V++] = V;
      P.push(new Hn(x, z[2] - L, i)), E.push(L - k);
    }
  }
  function d(k, Q) {
    return (P, E, z) => {
      let N = 0, C = P.length - 1, x, L;
      if (C >= 0 && (x = P[C]) instanceof me) {
        if (!C && x.type == k && x.length == z)
          return x;
        (L = x.prop(J.lookAhead)) && (N = E[C] + x.length + L);
      }
      return p(k, P, E, z, N, Q);
    };
  }
  function O(k, Q, P, E, z, N, C, x, L) {
    let _ = [], V = [];
    for (; k.length > E; )
      _.push(k.pop()), V.push(Q.pop() + P - z);
    k.push(p(i.types[C], _, V, N - z, x - N, L)), Q.push(z - P);
  }
  function p(k, Q, P, E, z, N, C) {
    if (N) {
      let x = [J.contextHash, N];
      C = C ? [x].concat(C) : [x];
    }
    if (z > 25) {
      let x = [J.lookAhead, z];
      C = C ? [x].concat(C) : [x];
    }
    return new me(k, Q, P, E, C);
  }
  function m(k, Q) {
    let P = l.fork(), E = 0, z = 0, N = 0, C = P.end - r, x = { size: 0, start: 0, skip: 0 };
    e: for (let L = P.pos - k; P.pos > L; ) {
      let _ = P.size;
      if (P.id == Q && _ >= 0) {
        x.size = E, x.start = z, x.skip = N, N += 4, E += 4, P.next();
        continue;
      }
      let V = P.pos - _;
      if (_ < 0 || V < L || P.start < C)
        break;
      let ee = P.id >= o ? 4 : 0, ye = P.start;
      for (P.next(); P.pos > V; ) {
        if (P.size < 0)
          if (P.size == -3)
            ee += 4;
          else
            break e;
        else P.id >= o && (ee += 4);
        P.next();
      }
      z = ye, E += _, N += ee;
    }
    return (Q < 0 || E == k) && (x.size = E, x.start = z, x.skip = N), x.size > 4 ? x : void 0;
  }
  function y(k, Q, P) {
    let { id: E, start: z, end: N, size: C } = l;
    if (l.next(), C >= 0 && E < o) {
      let x = P;
      if (C > 4) {
        let L = l.pos - (C - 4);
        for (; l.pos > L; )
          P = y(k, Q, P);
      }
      Q[--P] = x, Q[--P] = N - k, Q[--P] = z - k, Q[--P] = E;
    } else C == -3 ? c = E : C == -4 && (h = E);
    return P;
  }
  let S = [], b = [];
  for (; l.pos > 0; )
    f(n.start || 0, n.bufferStart || 0, S, b, -1, 0);
  let w = (e = n.length) !== null && e !== void 0 ? e : S.length ? b[0] + S[0].length : 0;
  return new me(a[n.topID], S.reverse(), b.reverse(), w);
}
const WO = /* @__PURE__ */ new WeakMap();
function jo(n, e) {
  if (!n.isAnonymous || e instanceof Hn || e.type != n)
    return 1;
  let t = WO.get(e);
  if (t == null) {
    t = 1;
    for (let i of e.children) {
      if (i.type != n || !(i instanceof me)) {
        t = 1;
        break;
      }
      t += jo(n, i);
    }
    WO.set(e, t);
  }
  return t;
}
function au(n, e, t, i, r, s, o, l, a) {
  let c = 0;
  for (let O = i; O < r; O++)
    c += jo(n, e[O]);
  let h = Math.ceil(
    c * 1.5 / 8
    /* Balance.BranchFactor */
  ), f = [], u = [];
  function d(O, p, m, y, S) {
    for (let b = m; b < y; ) {
      let w = b, k = p[b], Q = jo(n, O[b]);
      for (b++; b < y; b++) {
        let P = jo(n, O[b]);
        if (Q + P >= h)
          break;
        Q += P;
      }
      if (b == w + 1) {
        if (Q > h) {
          let P = O[w];
          d(P.children, P.positions, 0, P.children.length, p[w] + S);
          continue;
        }
        f.push(O[w]);
      } else {
        let P = p[b - 1] + O[b - 1].length - k;
        f.push(au(n, O, p, w, b, k, P, null, a));
      }
      u.push(k + S - s);
    }
  }
  return d(e, t, i, r, 0), (l || a)(f, u, o);
}
class cu {
  constructor() {
    this.map = /* @__PURE__ */ new WeakMap();
  }
  setBuffer(e, t, i) {
    let r = this.map.get(e);
    r || this.map.set(e, r = /* @__PURE__ */ new Map()), r.set(t, i);
  }
  getBuffer(e, t) {
    let i = this.map.get(e);
    return i && i.get(t);
  }
  /**
  Set the value for this syntax node.
  */
  set(e, t) {
    e instanceof cn ? this.setBuffer(e.context.buffer, e.index, t) : e instanceof nt && this.map.set(e.tree, t);
  }
  /**
  Retrieve value for this syntax node, if it exists in the map.
  */
  get(e) {
    return e instanceof cn ? this.getBuffer(e.context.buffer, e.index) : e instanceof nt ? this.map.get(e.tree) : void 0;
  }
  /**
  Set the value for the node that a cursor currently points to.
  */
  cursorSet(e, t) {
    e.buffer ? this.setBuffer(e.buffer.buffer, e.index, t) : this.map.set(e.tree, t);
  }
  /**
  Retrieve the value for the node that a cursor currently points
  to.
  */
  cursorGet(e) {
    return e.buffer ? this.getBuffer(e.buffer.buffer, e.index) : this.map.get(e.tree);
  }
}
class Tn {
  /**
  Construct a tree fragment. You'll usually want to use
  [`addTree`](#common.TreeFragment^addTree) and
  [`applyChanges`](#common.TreeFragment^applyChanges) instead of
  calling this directly.
  */
  constructor(e, t, i, r, s = !1, o = !1) {
    this.from = e, this.to = t, this.tree = i, this.offset = r, this.open = (s ? 1 : 0) | (o ? 2 : 0);
  }
  /**
  Whether the start of the fragment represents the start of a
  parse, or the end of a change. (In the second case, it may not
  be safe to reuse some nodes at the start, depending on the
  parsing algorithm.)
  */
  get openStart() {
    return (this.open & 1) > 0;
  }
  /**
  Whether the end of the fragment represents the end of a
  full-document parse, or the start of a change.
  */
  get openEnd() {
    return (this.open & 2) > 0;
  }
  /**
  Create a set of fragments from a freshly parsed tree, or update
  an existing set of fragments by replacing the ones that overlap
  with a tree with content from the new tree. When `partial` is
  true, the parse is treated as incomplete, and the resulting
  fragment has [`openEnd`](#common.TreeFragment.openEnd) set to
  true.
  */
  static addTree(e, t = [], i = !1) {
    let r = [new Tn(0, e.length, e, 0, !1, i)];
    for (let s of t)
      s.to > e.length && r.push(s);
    return r;
  }
  /**
  Apply a set of edits to an array of fragments, removing or
  splitting fragments as necessary to remove edited ranges, and
  adjusting offsets for fragments that moved.
  */
  static applyChanges(e, t, i = 128) {
    if (!t.length)
      return e;
    let r = [], s = 1, o = e.length ? e[0] : null;
    for (let l = 0, a = 0, c = 0; ; l++) {
      let h = l < t.length ? t[l] : null, f = h ? h.fromA : 1e9;
      if (f - a >= i)
        for (; o && o.from < f; ) {
          let u = o;
          if (a >= u.from || f <= u.to || c) {
            let d = Math.max(u.from, a) - c, O = Math.min(u.to, f) - c;
            u = d >= O ? null : new Tn(d, O, u.tree, u.offset + c, l > 0, !!h);
          }
          if (u && r.push(u), o.to > f)
            break;
          o = s < e.length ? e[s++] : null;
        }
      if (!h)
        break;
      a = h.toA, c = h.toA - h.toB;
    }
    return r;
  }
}
class hu {
  /**
  Start a parse, returning a [partial parse](#common.PartialParse)
  object. [`fragments`](#common.TreeFragment) can be passed in to
  make the parse incremental.
  
  By default, the entire input is parsed. You can pass `ranges`,
  which should be a sorted array of non-empty, non-overlapping
  ranges, to parse only those ranges. The tree returned in that
  case will start at `ranges[0].from`.
  */
  startParse(e, t, i) {
    return typeof e == "string" && (e = new kC(e)), i = i ? i.length ? i.map((r) => new wt(r.from, r.to)) : [new wt(0, 0)] : [new wt(0, e.length)], this.createParse(e, t || [], i);
  }
  /**
  Run a full parse, returning the resulting tree.
  */
  parse(e, t, i) {
    let r = this.startParse(e, t, i);
    for (; ; ) {
      let s = r.advance();
      if (s)
        return s;
    }
  }
}
class kC {
  constructor(e) {
    this.string = e;
  }
  get length() {
    return this.string.length;
  }
  chunk(e) {
    return this.string.slice(e);
  }
  get lineChunks() {
    return !1;
  }
  read(e, t) {
    return this.string.slice(e, t);
  }
}
function jy(n) {
  return (e, t, i, r) => new vC(e, n, t, i, r);
}
class zO {
  constructor(e, t, i, r, s) {
    this.parser = e, this.parse = t, this.overlay = i, this.target = r, this.from = s;
  }
}
function DO(n) {
  if (!n.length || n.some((e) => e.from >= e.to))
    throw new RangeError("Invalid inner parse ranges given: " + JSON.stringify(n));
}
class wC {
  constructor(e, t, i, r, s, o, l) {
    this.parser = e, this.predicate = t, this.mounts = i, this.index = r, this.start = s, this.target = o, this.prev = l, this.depth = 0, this.ranges = [];
  }
}
const Wh = new J({ perNode: !0 });
class vC {
  constructor(e, t, i, r, s) {
    this.nest = t, this.input = i, this.fragments = r, this.ranges = s, this.inner = [], this.innerDone = 0, this.baseTree = null, this.stoppedAt = null, this.baseParse = e;
  }
  advance() {
    if (this.baseParse) {
      let i = this.baseParse.advance();
      if (!i)
        return null;
      if (this.baseParse = null, this.baseTree = i, this.startInner(), this.stoppedAt != null)
        for (let r of this.inner)
          r.parse.stopAt(this.stoppedAt);
    }
    if (this.innerDone == this.inner.length) {
      let i = this.baseTree;
      return this.stoppedAt != null && (i = new me(i.type, i.children, i.positions, i.length, i.propValues.concat([[Wh, this.stoppedAt]]))), i;
    }
    let e = this.inner[this.innerDone], t = e.parse.advance();
    if (t) {
      this.innerDone++;
      let i = Object.assign(/* @__PURE__ */ Object.create(null), e.target.props);
      i[J.mounted.id] = new ds(t, e.overlay, e.parser), e.target.props = i;
    }
    return null;
  }
  get parsedPos() {
    if (this.baseParse)
      return 0;
    let e = this.input.length;
    for (let t = this.innerDone; t < this.inner.length; t++)
      this.inner[t].from < e && (e = Math.min(e, this.inner[t].parse.parsedPos));
    return e;
  }
  stopAt(e) {
    if (this.stoppedAt = e, this.baseParse)
      this.baseParse.stopAt(e);
    else
      for (let t = this.innerDone; t < this.inner.length; t++)
        this.inner[t].parse.stopAt(e);
  }
  startInner() {
    let e = new TC(this.fragments), t = null, i = null, r = new Ql(new nt(this.baseTree, this.ranges[0].from, 0, null), xe.IncludeAnonymous | xe.IgnoreMounts);
    e: for (let s, o; ; ) {
      let l = !0, a;
      if (this.stoppedAt != null && r.from >= this.stoppedAt)
        l = !1;
      else if (e.hasNode(r)) {
        if (t) {
          let c = t.mounts.find((h) => h.frag.from <= r.from && h.frag.to >= r.to && h.mount.overlay);
          if (c)
            for (let h of c.mount.overlay) {
              let f = h.from + c.pos, u = h.to + c.pos;
              f >= r.from && u <= r.to && !t.ranges.some((d) => d.from < u && d.to > f) && t.ranges.push({ from: f, to: u });
            }
        }
        l = !1;
      } else if (i && (o = PC(i.ranges, r.from, r.to)))
        l = o != 2;
      else if (!r.type.isAnonymous && (s = this.nest(r, this.input)) && (r.from < r.to || !s.overlay)) {
        r.tree || $C(r);
        let c = e.findMounts(r.from, s.parser);
        if (typeof s.overlay == "function")
          t = new wC(s.parser, s.overlay, c, this.inner.length, r.from, r.tree, t);
        else {
          let h = UO(this.ranges, s.overlay || (r.from < r.to ? [new wt(r.from, r.to)] : []));
          h.length && DO(h), (h.length || !s.overlay) && this.inner.push(new zO(s.parser, h.length ? s.parser.startParse(this.input, YO(c, h), h) : s.parser.startParse(""), s.overlay ? s.overlay.map((f) => new wt(f.from - r.from, f.to - r.from)) : null, r.tree, h.length ? h[0].from : r.from)), s.overlay ? h.length && (i = { ranges: h, depth: 0, prev: i }) : l = !1;
        }
      } else if (t && (a = t.predicate(r)) && (a === !0 && (a = new wt(r.from, r.to)), a.from < a.to)) {
        let c = t.ranges.length - 1;
        c >= 0 && t.ranges[c].to == a.from ? t.ranges[c] = { from: t.ranges[c].from, to: a.to } : t.ranges.push(a);
      }
      if (l && r.firstChild())
        t && t.depth++, i && i.depth++;
      else
        for (; !r.nextSibling(); ) {
          if (!r.parent())
            break e;
          if (t && !--t.depth) {
            let c = UO(this.ranges, t.ranges);
            c.length && (DO(c), this.inner.splice(t.index, 0, new zO(t.parser, t.parser.startParse(this.input, YO(t.mounts, c), c), t.ranges.map((h) => new wt(h.from - t.start, h.to - t.start)), t.target, c[0].from))), t = t.prev;
          }
          i && !--i.depth && (i = i.prev);
        }
    }
  }
}
function PC(n, e, t) {
  for (let i of n) {
    if (i.from >= t)
      break;
    if (i.to > e)
      return i.from <= e && i.to >= t ? 2 : 1;
  }
  return 0;
}
function IO(n, e, t, i, r, s) {
  if (e < t) {
    let o = n.buffer[e + 1];
    i.push(n.slice(e, t, o)), r.push(o - s);
  }
}
function $C(n) {
  let { node: e } = n, t = [], i = e.context.buffer;
  do
    t.push(n.index), n.parent();
  while (!n.tree);
  let r = n.tree, s = r.children.indexOf(i), o = r.children[s], l = o.buffer, a = [s];
  function c(h, f, u, d, O, p) {
    let m = t[p], y = [], S = [];
    IO(o, h, m, y, S, d);
    let b = l[m + 1], w = l[m + 2];
    a.push(y.length);
    let k = p ? c(m + 4, l[m + 3], o.set.types[l[m]], b, w - b, p - 1) : e.toTree();
    return y.push(k), S.push(b - d), IO(o, l[m + 3], f, y, S, d), new me(u, y, S, O);
  }
  r.children[s] = c(0, l.length, We.none, 0, o.length, t.length - 1);
  for (let h of a) {
    let f = n.tree.children[h], u = n.tree.positions[h];
    n.yield(new nt(f, u + n.from, h, n._tree));
  }
}
class jO {
  constructor(e, t) {
    this.offset = t, this.done = !1, this.cursor = e.cursor(xe.IncludeAnonymous | xe.IgnoreMounts);
  }
  // Move to the first node (in pre-order) that starts at or after `pos`.
  moveTo(e) {
    let { cursor: t } = this, i = e - this.offset;
    for (; !this.done && t.from < i; )
      t.to >= e && t.enter(i, 1, xe.IgnoreOverlays | xe.ExcludeBuffers) || t.next(!1) || (this.done = !0);
  }
  hasNode(e) {
    if (this.moveTo(e.from), !this.done && this.cursor.from + this.offset == e.from && this.cursor.tree)
      for (let t = this.cursor.tree; ; ) {
        if (t == e.tree)
          return !0;
        if (t.children.length && t.positions[0] == 0 && t.children[0] instanceof me)
          t = t.children[0];
        else
          break;
      }
    return !1;
  }
}
let TC = class {
  constructor(e) {
    var t;
    if (this.fragments = e, this.curTo = 0, this.fragI = 0, e.length) {
      let i = this.curFrag = e[0];
      this.curTo = (t = i.tree.prop(Wh)) !== null && t !== void 0 ? t : i.to, this.inner = new jO(i.tree, -i.offset);
    } else
      this.curFrag = this.inner = null;
  }
  hasNode(e) {
    for (; this.curFrag && e.from >= this.curTo; )
      this.nextFrag();
    return this.curFrag && this.curFrag.from <= e.from && this.curTo >= e.to && this.inner.hasNode(e);
  }
  nextFrag() {
    var e;
    if (this.fragI++, this.fragI == this.fragments.length)
      this.curFrag = this.inner = null;
    else {
      let t = this.curFrag = this.fragments[this.fragI];
      this.curTo = (e = t.tree.prop(Wh)) !== null && e !== void 0 ? e : t.to, this.inner = new jO(t.tree, -t.offset);
    }
  }
  findMounts(e, t) {
    var i;
    let r = [];
    if (this.inner) {
      this.inner.cursor.moveTo(e, 1);
      for (let s = this.inner.cursor.node; s; s = s.parent) {
        let o = (i = s.tree) === null || i === void 0 ? void 0 : i.prop(J.mounted);
        if (o && o.parser == t)
          for (let l = this.fragI; l < this.fragments.length; l++) {
            let a = this.fragments[l];
            if (a.from >= s.to)
              break;
            a.tree == this.curFrag.tree && r.push({
              frag: a,
              pos: s.from - a.offset,
              mount: o
            });
          }
      }
    }
    return r;
  }
};
function UO(n, e) {
  let t = null, i = e;
  for (let r = 1, s = 0; r < n.length; r++) {
    let o = n[r - 1].to, l = n[r].from;
    for (; s < i.length; s++) {
      let a = i[s];
      if (a.from >= l)
        break;
      a.to <= o || (t || (i = t = e.slice()), a.from < o ? (t[s] = new wt(a.from, o), a.to > l && t.splice(s + 1, 0, new wt(l, a.to))) : a.to > l ? t[s--] = new wt(l, a.to) : t.splice(s--, 1));
    }
  }
  return i;
}
function CC(n, e, t, i) {
  let r = 0, s = 0, o = !1, l = !1, a = -1e9, c = [];
  for (; ; ) {
    let h = r == n.length ? 1e9 : o ? n[r].to : n[r].from, f = s == e.length ? 1e9 : l ? e[s].to : e[s].from;
    if (o != l) {
      let u = Math.max(a, t), d = Math.min(h, f, i);
      u < d && c.push(new wt(u, d));
    }
    if (a = Math.min(h, f), a == 1e9)
      break;
    h == a && (o ? (o = !1, r++) : o = !0), f == a && (l ? (l = !1, s++) : l = !0);
  }
  return c;
}
function YO(n, e) {
  let t = [];
  for (let { pos: i, mount: r, frag: s } of n) {
    let o = i + (r.overlay ? r.overlay[0].from : 0), l = o + r.tree.length, a = Math.max(s.from, o), c = Math.min(s.to, l);
    if (r.overlay) {
      let h = r.overlay.map((u) => new wt(u.from + i, u.to + i)), f = CC(e, h, a, c);
      for (let u = 0, d = a; ; u++) {
        let O = u == f.length, p = O ? c : f[u].from;
        if (p > d && t.push(new Tn(d, p, r.tree, -o, s.from >= d || s.openStart, s.to <= p || s.openEnd)), O)
          break;
        d = f[u].to;
      }
    } else
      t.push(new Tn(a, c, r.tree, -o, s.from >= o || s.openStart, s.to <= l || s.openEnd));
  }
  return t;
}
let RC = 0, rn = class zh {
  /**
  @internal
  */
  constructor(e, t, i, r) {
    this.name = e, this.set = t, this.base = i, this.modified = r, this.id = RC++;
  }
  toString() {
    let { name: e } = this;
    for (let t of this.modified)
      t.name && (e = `${t.name}(${e})`);
    return e;
  }
  static define(e, t) {
    let i = typeof e == "string" ? e : "?";
    if (e instanceof zh && (t = e), t?.base)
      throw new Error("Can not derive from a modified tag");
    let r = new zh(i, [], null, []);
    if (r.set.push(r), t)
      for (let s of t.set)
        r.set.push(s);
    return r;
  }
  /**
  Define a tag _modifier_, which is a function that, given a tag,
  will return a tag that is a subtag of the original. Applying the
  same modifier to a twice tag will return the same value (`m1(t1)
  == m1(t1)`) and applying multiple modifiers will, regardless or
  order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).
  
  When multiple modifiers are applied to a given base tag, each
  smaller set of modifiers is registered as a parent, so that for
  example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,
  `m1(m3(t1)`, and so on.
  */
  static defineModifier(e) {
    let t = new xl(e);
    return (i) => i.modified.indexOf(t) > -1 ? i : xl.get(i.base || i, i.modified.concat(t).sort((r, s) => r.id - s.id));
  }
}, EC = 0;
class xl {
  constructor(e) {
    this.name = e, this.instances = [], this.id = EC++;
  }
  static get(e, t) {
    if (!t.length)
      return e;
    let i = t[0].instances.find((l) => l.base == e && AC(t, l.modified));
    if (i)
      return i;
    let r = [], s = new rn(e.name, r, e, t);
    for (let l of t)
      l.instances.push(s);
    let o = _C(t);
    for (let l of e.set)
      if (!l.modified.length)
        for (let a of o)
          r.push(xl.get(l, a));
    return s;
  }
}
function AC(n, e) {
  return n.length == e.length && n.every((t, i) => t == e[i]);
}
function _C(n) {
  let e = [[]];
  for (let t = 0; t < n.length; t++)
    for (let i = 0, r = e.length; i < r; i++)
      e.push(e[i].concat(n[t]));
  return e.sort((t, i) => i.length - t.length);
}
function Nt(n) {
  let e = /* @__PURE__ */ Object.create(null);
  for (let t in n) {
    let i = n[t];
    Array.isArray(i) || (i = [i]);
    for (let r of t.split(" "))
      if (r) {
        let s = [], o = 2, l = r;
        for (let f = 0; ; ) {
          if (l == "..." && f > 0 && f + 3 == r.length) {
            o = 1;
            break;
          }
          let u = /^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(l);
          if (!u)
            throw new RangeError("Invalid path: " + r);
          if (s.push(u[0] == "*" ? "" : u[0][0] == '"' ? JSON.parse(u[0]) : u[0]), f += u[0].length, f == r.length)
            break;
          let d = r[f++];
          if (f == r.length && d == "!") {
            o = 0;
            break;
          }
          if (d != "/")
            throw new RangeError("Invalid path: " + r);
          l = r.slice(f);
        }
        let a = s.length - 1, c = s[a];
        if (!c)
          throw new RangeError("Invalid path: " + r);
        let h = new kl(i, o, a > 0 ? s.slice(0, a) : null);
        e[c] = h.sort(e[c]);
      }
  }
  return Uy.add(e);
}
const Uy = new J();
class kl {
  constructor(e, t, i, r) {
    this.tags = e, this.mode = t, this.context = i, this.next = r;
  }
  get opaque() {
    return this.mode == 0;
  }
  get inherit() {
    return this.mode == 1;
  }
  sort(e) {
    return !e || e.depth < this.depth ? (this.next = e, this) : (e.next = this.sort(e.next), e);
  }
  get depth() {
    return this.context ? this.context.length : 0;
  }
}
kl.empty = new kl([], 2, null);
function Yy(n, e) {
  let t = /* @__PURE__ */ Object.create(null);
  for (let s of n)
    if (!Array.isArray(s.tag))
      t[s.tag.id] = s.class;
    else
      for (let o of s.tag)
        t[o.id] = s.class;
  let { scope: i, all: r = null } = e || {};
  return {
    style: (s) => {
      let o = r;
      for (let l of s)
        for (let a of l.set) {
          let c = t[a.id];
          if (c) {
            o = o ? o + " " + c : c;
            break;
          }
        }
      return o;
    },
    scope: i
  };
}
function XC(n, e) {
  let t = null;
  for (let i of n) {
    let r = i.style(e);
    r && (t = t ? t + " " + r : r);
  }
  return t;
}
function qC(n, e, t, i = 0, r = n.length) {
  let s = new ZC(i, Array.isArray(e) ? e : [e], t);
  s.highlightRange(n.cursor(), i, r, "", s.highlighters), s.flush(r);
}
class ZC {
  constructor(e, t, i) {
    this.at = e, this.highlighters = t, this.span = i, this.class = "";
  }
  startSpan(e, t) {
    t != this.class && (this.flush(e), e > this.at && (this.at = e), this.class = t);
  }
  flush(e) {
    e > this.at && this.class && this.span(this.at, e, this.class);
  }
  highlightRange(e, t, i, r, s) {
    let { type: o, from: l, to: a } = e;
    if (l >= i || a <= t)
      return;
    o.isTop && (s = this.highlighters.filter((d) => !d.scope || d.scope(o)));
    let c = r, h = MC(e) || kl.empty, f = XC(s, h.tags);
    if (f && (c && (c += " "), c += f, h.mode == 1 && (r += (r ? " " : "") + f)), this.startSpan(Math.max(t, l), c), h.opaque)
      return;
    let u = e.tree && e.tree.prop(J.mounted);
    if (u && u.overlay) {
      let d = e.node.enter(u.overlay[0].from + l, 1), O = this.highlighters.filter((m) => !m.scope || m.scope(u.tree.type)), p = e.firstChild();
      for (let m = 0, y = l; ; m++) {
        let S = m < u.overlay.length ? u.overlay[m] : null, b = S ? S.from + l : a, w = Math.max(t, y), k = Math.min(i, b);
        if (w < k && p)
          for (; e.from < k && (this.highlightRange(e, w, k, r, s), this.startSpan(Math.min(k, e.to), c), !(e.to >= b || !e.nextSibling())); )
            ;
        if (!S || b > i)
          break;
        y = S.to + l, y > t && (this.highlightRange(d.cursor(), Math.max(t, S.from + l), Math.min(i, y), "", O), this.startSpan(Math.min(i, y), c));
      }
      p && e.parent();
    } else if (e.firstChild()) {
      u && (r = "");
      do
        if (!(e.to <= t)) {
          if (e.from >= i)
            break;
          this.highlightRange(e, t, i, r, s), this.startSpan(Math.min(i, e.to), c);
        }
      while (e.nextSibling());
      e.parent();
    }
  }
}
function MC(n) {
  let e = n.type.prop(Uy);
  for (; e && e.context && !n.matchContext(e.context); )
    e = e.next;
  return e || null;
}
const q = rn.define, mo = q(), Vn = q(), NO = q(Vn), GO = q(Vn), Bn = q(), go = q(Bn), Ha = q(Bn), nn = q(), ni = q(nn), Jt = q(), en = q(), Dh = q(), Tr = q(Dh), yo = q(), g = {
  /**
  A comment.
  */
  comment: mo,
  /**
  A line [comment](#highlight.tags.comment).
  */
  lineComment: q(mo),
  /**
  A block [comment](#highlight.tags.comment).
  */
  blockComment: q(mo),
  /**
  A documentation [comment](#highlight.tags.comment).
  */
  docComment: q(mo),
  /**
  Any kind of identifier.
  */
  name: Vn,
  /**
  The [name](#highlight.tags.name) of a variable.
  */
  variableName: q(Vn),
  /**
  A type [name](#highlight.tags.name).
  */
  typeName: NO,
  /**
  A tag name (subtag of [`typeName`](#highlight.tags.typeName)).
  */
  tagName: q(NO),
  /**
  A property or field [name](#highlight.tags.name).
  */
  propertyName: GO,
  /**
  An attribute name (subtag of [`propertyName`](#highlight.tags.propertyName)).
  */
  attributeName: q(GO),
  /**
  The [name](#highlight.tags.name) of a class.
  */
  className: q(Vn),
  /**
  A label [name](#highlight.tags.name).
  */
  labelName: q(Vn),
  /**
  A namespace [name](#highlight.tags.name).
  */
  namespace: q(Vn),
  /**
  The [name](#highlight.tags.name) of a macro.
  */
  macroName: q(Vn),
  /**
  A literal value.
  */
  literal: Bn,
  /**
  A string [literal](#highlight.tags.literal).
  */
  string: go,
  /**
  A documentation [string](#highlight.tags.string).
  */
  docString: q(go),
  /**
  A character literal (subtag of [string](#highlight.tags.string)).
  */
  character: q(go),
  /**
  An attribute value (subtag of [string](#highlight.tags.string)).
  */
  attributeValue: q(go),
  /**
  A number [literal](#highlight.tags.literal).
  */
  number: Ha,
  /**
  An integer [number](#highlight.tags.number) literal.
  */
  integer: q(Ha),
  /**
  A floating-point [number](#highlight.tags.number) literal.
  */
  float: q(Ha),
  /**
  A boolean [literal](#highlight.tags.literal).
  */
  bool: q(Bn),
  /**
  Regular expression [literal](#highlight.tags.literal).
  */
  regexp: q(Bn),
  /**
  An escape [literal](#highlight.tags.literal), for example a
  backslash escape in a string.
  */
  escape: q(Bn),
  /**
  A color [literal](#highlight.tags.literal).
  */
  color: q(Bn),
  /**
  A URL [literal](#highlight.tags.literal).
  */
  url: q(Bn),
  /**
  A language keyword.
  */
  keyword: Jt,
  /**
  The [keyword](#highlight.tags.keyword) for the self or this
  object.
  */
  self: q(Jt),
  /**
  The [keyword](#highlight.tags.keyword) for null.
  */
  null: q(Jt),
  /**
  A [keyword](#highlight.tags.keyword) denoting some atomic value.
  */
  atom: q(Jt),
  /**
  A [keyword](#highlight.tags.keyword) that represents a unit.
  */
  unit: q(Jt),
  /**
  A modifier [keyword](#highlight.tags.keyword).
  */
  modifier: q(Jt),
  /**
  A [keyword](#highlight.tags.keyword) that acts as an operator.
  */
  operatorKeyword: q(Jt),
  /**
  A control-flow related [keyword](#highlight.tags.keyword).
  */
  controlKeyword: q(Jt),
  /**
  A [keyword](#highlight.tags.keyword) that defines something.
  */
  definitionKeyword: q(Jt),
  /**
  A [keyword](#highlight.tags.keyword) related to defining or
  interfacing with modules.
  */
  moduleKeyword: q(Jt),
  /**
  An operator.
  */
  operator: en,
  /**
  An [operator](#highlight.tags.operator) that dereferences something.
  */
  derefOperator: q(en),
  /**
  Arithmetic-related [operator](#highlight.tags.operator).
  */
  arithmeticOperator: q(en),
  /**
  Logical [operator](#highlight.tags.operator).
  */
  logicOperator: q(en),
  /**
  Bit [operator](#highlight.tags.operator).
  */
  bitwiseOperator: q(en),
  /**
  Comparison [operator](#highlight.tags.operator).
  */
  compareOperator: q(en),
  /**
  [Operator](#highlight.tags.operator) that updates its operand.
  */
  updateOperator: q(en),
  /**
  [Operator](#highlight.tags.operator) that defines something.
  */
  definitionOperator: q(en),
  /**
  Type-related [operator](#highlight.tags.operator).
  */
  typeOperator: q(en),
  /**
  Control-flow [operator](#highlight.tags.operator).
  */
  controlOperator: q(en),
  /**
  Program or markup punctuation.
  */
  punctuation: Dh,
  /**
  [Punctuation](#highlight.tags.punctuation) that separates
  things.
  */
  separator: q(Dh),
  /**
  Bracket-style [punctuation](#highlight.tags.punctuation).
  */
  bracket: Tr,
  /**
  Angle [brackets](#highlight.tags.bracket) (usually `<` and `>`
  tokens).
  */
  angleBracket: q(Tr),
  /**
  Square [brackets](#highlight.tags.bracket) (usually `[` and `]`
  tokens).
  */
  squareBracket: q(Tr),
  /**
  Parentheses (usually `(` and `)` tokens). Subtag of
  [bracket](#highlight.tags.bracket).
  */
  paren: q(Tr),
  /**
  Braces (usually `{` and `}` tokens). Subtag of
  [bracket](#highlight.tags.bracket).
  */
  brace: q(Tr),
  /**
  Content, for example plain text in XML or markup documents.
  */
  content: nn,
  /**
  [Content](#highlight.tags.content) that represents a heading.
  */
  heading: ni,
  /**
  A level 1 [heading](#highlight.tags.heading).
  */
  heading1: q(ni),
  /**
  A level 2 [heading](#highlight.tags.heading).
  */
  heading2: q(ni),
  /**
  A level 3 [heading](#highlight.tags.heading).
  */
  heading3: q(ni),
  /**
  A level 4 [heading](#highlight.tags.heading).
  */
  heading4: q(ni),
  /**
  A level 5 [heading](#highlight.tags.heading).
  */
  heading5: q(ni),
  /**
  A level 6 [heading](#highlight.tags.heading).
  */
  heading6: q(ni),
  /**
  A prose [content](#highlight.tags.content) separator (such as a horizontal rule).
  */
  contentSeparator: q(nn),
  /**
  [Content](#highlight.tags.content) that represents a list.
  */
  list: q(nn),
  /**
  [Content](#highlight.tags.content) that represents a quote.
  */
  quote: q(nn),
  /**
  [Content](#highlight.tags.content) that is emphasized.
  */
  emphasis: q(nn),
  /**
  [Content](#highlight.tags.content) that is styled strong.
  */
  strong: q(nn),
  /**
  [Content](#highlight.tags.content) that is part of a link.
  */
  link: q(nn),
  /**
  [Content](#highlight.tags.content) that is styled as code or
  monospace.
  */
  monospace: q(nn),
  /**
  [Content](#highlight.tags.content) that has a strike-through
  style.
  */
  strikethrough: q(nn),
  /**
  Inserted text in a change-tracking format.
  */
  inserted: q(),
  /**
  Deleted text.
  */
  deleted: q(),
  /**
  Changed text.
  */
  changed: q(),
  /**
  An invalid or unsyntactic element.
  */
  invalid: q(),
  /**
  Metadata or meta-instruction.
  */
  meta: yo,
  /**
  [Metadata](#highlight.tags.meta) that applies to the entire
  document.
  */
  documentMeta: q(yo),
  /**
  [Metadata](#highlight.tags.meta) that annotates or adds
  attributes to a given syntactic element.
  */
  annotation: q(yo),
  /**
  Processing instruction or preprocessor directive. Subtag of
  [meta](#highlight.tags.meta).
  */
  processingInstruction: q(yo),
  /**
  [Modifier](#highlight.Tag^defineModifier) that indicates that a
  given element is being defined. Expected to be used with the
  various [name](#highlight.tags.name) tags.
  */
  definition: rn.defineModifier("definition"),
  /**
  [Modifier](#highlight.Tag^defineModifier) that indicates that
  something is constant. Mostly expected to be used with
  [variable names](#highlight.tags.variableName).
  */
  constant: rn.defineModifier("constant"),
  /**
  [Modifier](#highlight.Tag^defineModifier) used to indicate that
  a [variable](#highlight.tags.variableName) or [property
  name](#highlight.tags.propertyName) is being called or defined
  as a function.
  */
  function: rn.defineModifier("function"),
  /**
  [Modifier](#highlight.Tag^defineModifier) that can be applied to
  [names](#highlight.tags.name) to indicate that they belong to
  the language's standard environment.
  */
  standard: rn.defineModifier("standard"),
  /**
  [Modifier](#highlight.Tag^defineModifier) that indicates a given
  [names](#highlight.tags.name) is local to some scope.
  */
  local: rn.defineModifier("local"),
  /**
  A generic variant [modifier](#highlight.Tag^defineModifier) that
  can be used to tag language-specific alternative variants of
  some common tag. It is recommended for themes to define special
  forms of at least the [string](#highlight.tags.string) and
  [variable name](#highlight.tags.variableName) tags, since those
  come up a lot.
  */
  special: rn.defineModifier("special")
};
for (let n in g) {
  let e = g[n];
  e instanceof rn && (e.name = n);
}
Yy([
  { tag: g.link, class: "tok-link" },
  { tag: g.heading, class: "tok-heading" },
  { tag: g.emphasis, class: "tok-emphasis" },
  { tag: g.strong, class: "tok-strong" },
  { tag: g.keyword, class: "tok-keyword" },
  { tag: g.atom, class: "tok-atom" },
  { tag: g.bool, class: "tok-bool" },
  { tag: g.url, class: "tok-url" },
  { tag: g.labelName, class: "tok-labelName" },
  { tag: g.inserted, class: "tok-inserted" },
  { tag: g.deleted, class: "tok-deleted" },
  { tag: g.literal, class: "tok-literal" },
  { tag: g.string, class: "tok-string" },
  { tag: g.number, class: "tok-number" },
  { tag: [g.regexp, g.escape, g.special(g.string)], class: "tok-string2" },
  { tag: g.variableName, class: "tok-variableName" },
  { tag: g.local(g.variableName), class: "tok-variableName tok-local" },
  { tag: g.definition(g.variableName), class: "tok-variableName tok-definition" },
  { tag: g.special(g.variableName), class: "tok-variableName2" },
  { tag: g.definition(g.propertyName), class: "tok-propertyName tok-definition" },
  { tag: g.typeName, class: "tok-typeName" },
  { tag: g.namespace, class: "tok-namespace" },
  { tag: g.className, class: "tok-className" },
  { tag: g.macroName, class: "tok-macroName" },
  { tag: g.propertyName, class: "tok-propertyName" },
  { tag: g.operator, class: "tok-operator" },
  { tag: g.comment, class: "tok-comment" },
  { tag: g.meta, class: "tok-meta" },
  { tag: g.invalid, class: "tok-invalid" },
  { tag: g.punctuation, class: "tok-punctuation" }
]);
var Ka;
const fi = /* @__PURE__ */ new J();
function fu(n) {
  return B.define({
    combine: n ? (e) => e.concat(n) : void 0
  });
}
const uu = /* @__PURE__ */ new J();
class vt {
  /**
  Construct a language object. If you need to invoke this
  directly, first define a data facet with
  [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet), and then
  configure your parser to [attach](https://codemirror.net/6/docs/ref/#language.languageDataProp) it
  to the language's outer syntax node.
  */
  constructor(e, t, i = [], r = "") {
    this.data = e, this.name = r, ue.prototype.hasOwnProperty("tree") || Object.defineProperty(ue.prototype, "tree", { get() {
      return ge(this);
    } }), this.parser = t, this.extension = [
      Kn.of(this),
      ue.languageData.of((s, o, l) => {
        let a = FO(s, o, l), c = a.type.prop(fi);
        if (!c)
          return [];
        let h = s.facet(c), f = a.type.prop(uu);
        if (f) {
          let u = a.resolve(o - a.from, l);
          for (let d of f)
            if (d.test(u, s)) {
              let O = s.facet(d.facet);
              return d.type == "replace" ? O : O.concat(h);
            }
        }
        return h;
      })
    ].concat(i);
  }
  /**
  Query whether this language is active at the given position.
  */
  isActiveAt(e, t, i = -1) {
    return FO(e, t, i).type.prop(fi) == this.data;
  }
  /**
  Find the document regions that were parsed using this language.
  The returned regions will _include_ any nested languages rooted
  in this language, when those exist.
  */
  findRegions(e) {
    let t = e.facet(Kn);
    if (t?.data == this.data)
      return [{ from: 0, to: e.doc.length }];
    if (!t || !t.allowsNesting)
      return [];
    let i = [], r = (s, o) => {
      if (s.prop(fi) == this.data) {
        i.push({ from: o, to: o + s.length });
        return;
      }
      let l = s.prop(J.mounted);
      if (l) {
        if (l.tree.prop(fi) == this.data) {
          if (l.overlay)
            for (let a of l.overlay)
              i.push({ from: a.from + o, to: a.to + o });
          else
            i.push({ from: o, to: o + s.length });
          return;
        } else if (l.overlay) {
          let a = i.length;
          if (r(l.tree, l.overlay[0].from + o), i.length > a)
            return;
        }
      }
      for (let a = 0; a < s.children.length; a++) {
        let c = s.children[a];
        c instanceof me && r(c, s.positions[a] + o);
      }
    };
    return r(ge(e), 0), i;
  }
  /**
  Indicates whether this language allows nested languages. The
  default implementation returns true.
  */
  get allowsNesting() {
    return !0;
  }
}
vt.setState = /* @__PURE__ */ te.define();
function FO(n, e, t) {
  let i = n.facet(Kn), r = ge(n).topNode;
  if (!i || i.allowsNesting)
    for (let s = r; s; s = s.enter(e, t, xe.ExcludeBuffers))
      s.type.isTop && (r = s);
  return r;
}
class It extends vt {
  constructor(e, t, i) {
    super(e, t, [], i), this.parser = t;
  }
  /**
  Define a language from a parser.
  */
  static define(e) {
    let t = fu(e.languageData);
    return new It(t, e.parser.configure({
      props: [fi.add((i) => i.isTop ? t : void 0)]
    }), e.name);
  }
  /**
  Create a new instance of this language with a reconfigured
  version of its parser and optionally a new name.
  */
  configure(e, t) {
    return new It(this.data, this.parser.configure(e), t || this.name);
  }
  get allowsNesting() {
    return this.parser.hasWrappers();
  }
}
function ge(n) {
  let e = n.field(vt.state, !1);
  return e ? e.tree : me.empty;
}
class LC {
  /**
  Create an input object for the given document.
  */
  constructor(e) {
    this.doc = e, this.cursorPos = 0, this.string = "", this.cursor = e.iter();
  }
  get length() {
    return this.doc.length;
  }
  syncTo(e) {
    return this.string = this.cursor.next(e - this.cursorPos).value, this.cursorPos = e + this.string.length, this.cursorPos - this.string.length;
  }
  chunk(e) {
    return this.syncTo(e), this.string;
  }
  get lineChunks() {
    return !0;
  }
  read(e, t) {
    let i = this.cursorPos - this.string.length;
    return e < i || t >= this.cursorPos ? this.doc.sliceString(e, t) : this.string.slice(e - i, t - i);
  }
}
let Cr = null;
class ps {
  constructor(e, t, i = [], r, s, o, l, a) {
    this.parser = e, this.state = t, this.fragments = i, this.tree = r, this.treeLen = s, this.viewport = o, this.skipped = l, this.scheduleOn = a, this.parse = null, this.tempSkipped = [];
  }
  /**
  @internal
  */
  static create(e, t, i) {
    return new ps(e, t, [], me.empty, 0, i, [], null);
  }
  startParse() {
    return this.parser.startParse(new LC(this.state.doc), this.fragments);
  }
  /**
  @internal
  */
  work(e, t) {
    return t != null && t >= this.state.doc.length && (t = void 0), this.tree != me.empty && this.isDone(t ?? this.state.doc.length) ? (this.takeTree(), !0) : this.withContext(() => {
      var i;
      if (typeof e == "number") {
        let r = Date.now() + e;
        e = () => Date.now() > r;
      }
      for (this.parse || (this.parse = this.startParse()), t != null && (this.parse.stoppedAt == null || this.parse.stoppedAt > t) && t < this.state.doc.length && this.parse.stopAt(t); ; ) {
        let r = this.parse.advance();
        if (r)
          if (this.fragments = this.withoutTempSkipped(Tn.addTree(r, this.fragments, this.parse.stoppedAt != null)), this.treeLen = (i = this.parse.stoppedAt) !== null && i !== void 0 ? i : this.state.doc.length, this.tree = r, this.parse = null, this.treeLen < (t ?? this.state.doc.length))
            this.parse = this.startParse();
          else
            return !0;
        if (e())
          return !1;
      }
    });
  }
  /**
  @internal
  */
  takeTree() {
    let e, t;
    this.parse && (e = this.parse.parsedPos) >= this.treeLen && ((this.parse.stoppedAt == null || this.parse.stoppedAt > e) && this.parse.stopAt(e), this.withContext(() => {
      for (; !(t = this.parse.advance()); )
        ;
    }), this.treeLen = e, this.tree = t, this.fragments = this.withoutTempSkipped(Tn.addTree(this.tree, this.fragments, !0)), this.parse = null);
  }
  withContext(e) {
    let t = Cr;
    Cr = this;
    try {
      return e();
    } finally {
      Cr = t;
    }
  }
  withoutTempSkipped(e) {
    for (let t; t = this.tempSkipped.pop(); )
      e = HO(e, t.from, t.to);
    return e;
  }
  /**
  @internal
  */
  changes(e, t) {
    let { fragments: i, tree: r, treeLen: s, viewport: o, skipped: l } = this;
    if (this.takeTree(), !e.empty) {
      let a = [];
      if (e.iterChangedRanges((c, h, f, u) => a.push({ fromA: c, toA: h, fromB: f, toB: u })), i = Tn.applyChanges(i, a), r = me.empty, s = 0, o = { from: e.mapPos(o.from, -1), to: e.mapPos(o.to, 1) }, this.skipped.length) {
        l = [];
        for (let c of this.skipped) {
          let h = e.mapPos(c.from, 1), f = e.mapPos(c.to, -1);
          h < f && l.push({ from: h, to: f });
        }
      }
    }
    return new ps(this.parser, t, i, r, s, o, l, this.scheduleOn);
  }
  /**
  @internal
  */
  updateViewport(e) {
    if (this.viewport.from == e.from && this.viewport.to == e.to)
      return !1;
    this.viewport = e;
    let t = this.skipped.length;
    for (let i = 0; i < this.skipped.length; i++) {
      let { from: r, to: s } = this.skipped[i];
      r < e.to && s > e.from && (this.fragments = HO(this.fragments, r, s), this.skipped.splice(i--, 1));
    }
    return this.skipped.length >= t ? !1 : (this.reset(), !0);
  }
  /**
  @internal
  */
  reset() {
    this.parse && (this.takeTree(), this.parse = null);
  }
  /**
  Notify the parse scheduler that the given region was skipped
  because it wasn't in view, and the parse should be restarted
  when it comes into view.
  */
  skipUntilInView(e, t) {
    this.skipped.push({ from: e, to: t });
  }
  /**
  Returns a parser intended to be used as placeholder when
  asynchronously loading a nested parser. It'll skip its input and
  mark it as not-really-parsed, so that the next update will parse
  it again.
  
  When `until` is given, a reparse will be scheduled when that
  promise resolves.
  */
  static getSkippingParser(e) {
    return new class extends hu {
      createParse(t, i, r) {
        let s = r[0].from, o = r[r.length - 1].to;
        return {
          parsedPos: s,
          advance() {
            let a = Cr;
            if (a) {
              for (let c of r)
                a.tempSkipped.push(c);
              e && (a.scheduleOn = a.scheduleOn ? Promise.all([a.scheduleOn, e]) : e);
            }
            return this.parsedPos = o, new me(We.none, [], [], o - s);
          },
          stoppedAt: null,
          stopAt() {
          }
        };
      }
    }();
  }
  /**
  @internal
  */
  isDone(e) {
    e = Math.min(e, this.state.doc.length);
    let t = this.fragments;
    return this.treeLen >= e && t.length && t[0].from == 0 && t[0].to >= e;
  }
  /**
  Get the context for the current parse, or `null` if no editor
  parse is in progress.
  */
  static get() {
    return Cr;
  }
}
function HO(n, e, t) {
  return Tn.applyChanges(n, [{ fromA: e, toA: t, fromB: e, toB: t }]);
}
class tr {
  constructor(e) {
    this.context = e, this.tree = e.tree;
  }
  apply(e) {
    if (!e.docChanged && this.tree == this.context.tree)
      return this;
    let t = this.context.changes(e.changes, e.state), i = this.context.treeLen == e.startState.doc.length ? void 0 : Math.max(e.changes.mapPos(this.context.treeLen), t.viewport.to);
    return t.work(20, i) || t.takeTree(), new tr(t);
  }
  static init(e) {
    let t = Math.min(3e3, e.doc.length), i = ps.create(e.facet(Kn).parser, e, { from: 0, to: t });
    return i.work(20, t) || i.takeTree(), new tr(i);
  }
}
vt.state = /* @__PURE__ */ Ie.define({
  create: tr.init,
  update(n, e) {
    for (let t of e.effects)
      if (t.is(vt.setState))
        return t.value;
    return e.startState.facet(Kn) != e.state.facet(Kn) ? tr.init(e.state) : n.apply(e);
  }
});
let Ny = (n) => {
  let e = setTimeout(
    () => n(),
    500
    /* Work.MaxPause */
  );
  return () => clearTimeout(e);
};
typeof requestIdleCallback < "u" && (Ny = (n) => {
  let e = -1, t = setTimeout(
    () => {
      e = requestIdleCallback(n, {
        timeout: 400
        /* Work.MinPause */
      });
    },
    100
    /* Work.MinPause */
  );
  return () => e < 0 ? clearTimeout(t) : cancelIdleCallback(e);
});
const Ja = typeof navigator < "u" && (!((Ka = navigator.scheduling) === null || Ka === void 0) && Ka.isInputPending) ? () => navigator.scheduling.isInputPending() : null, VC = /* @__PURE__ */ Le.fromClass(class {
  constructor(e) {
    this.view = e, this.working = null, this.workScheduled = 0, this.chunkEnd = -1, this.chunkBudget = -1, this.work = this.work.bind(this), this.scheduleWork();
  }
  update(e) {
    let t = this.view.state.field(vt.state).context;
    (t.updateViewport(e.view.viewport) || this.view.viewport.to > t.treeLen) && this.scheduleWork(), (e.docChanged || e.selectionSet) && (this.view.hasFocus && (this.chunkBudget += 50), this.scheduleWork()), this.checkAsyncSchedule(t);
  }
  scheduleWork() {
    if (this.working)
      return;
    let { state: e } = this.view, t = e.field(vt.state);
    (t.tree != t.context.tree || !t.context.isDone(e.doc.length)) && (this.working = Ny(this.work));
  }
  work(e) {
    this.working = null;
    let t = Date.now();
    if (this.chunkEnd < t && (this.chunkEnd < 0 || this.view.hasFocus) && (this.chunkEnd = t + 3e4, this.chunkBudget = 3e3), this.chunkBudget <= 0)
      return;
    let { state: i, viewport: { to: r } } = this.view, s = i.field(vt.state);
    if (s.tree == s.context.tree && s.context.isDone(
      r + 1e5
      /* Work.MaxParseAhead */
    ))
      return;
    let o = Date.now() + Math.min(this.chunkBudget, 100, e && !Ja ? Math.max(25, e.timeRemaining() - 5) : 1e9), l = s.context.treeLen < r && i.doc.length > r + 1e3, a = s.context.work(() => Ja && Ja() || Date.now() > o, r + (l ? 0 : 1e5));
    this.chunkBudget -= Date.now() - t, (a || this.chunkBudget <= 0) && (s.context.takeTree(), this.view.dispatch({ effects: vt.setState.of(new tr(s.context)) })), this.chunkBudget > 0 && !(a && !l) && this.scheduleWork(), this.checkAsyncSchedule(s.context);
  }
  checkAsyncSchedule(e) {
    e.scheduleOn && (this.workScheduled++, e.scheduleOn.then(() => this.scheduleWork()).catch((t) => ht(this.view.state, t)).then(() => this.workScheduled--), e.scheduleOn = null);
  }
  destroy() {
    this.working && this.working();
  }
  isWorking() {
    return !!(this.working || this.workScheduled > 0);
  }
}, {
  eventHandlers: { focus() {
    this.scheduleWork();
  } }
}), Kn = /* @__PURE__ */ B.define({
  combine(n) {
    return n.length ? n[0] : null;
  },
  enables: (n) => [
    vt.state,
    VC,
    Z.contentAttributes.compute([n], (e) => {
      let t = e.facet(n);
      return t && t.name ? { "data-language": t.name } : {};
    })
  ]
});
class mn {
  /**
  Create a language support object.
  */
  constructor(e, t = []) {
    this.language = e, this.support = t, this.extension = [e, t];
  }
}
class wl {
  constructor(e, t, i, r, s, o = void 0) {
    this.name = e, this.alias = t, this.extensions = i, this.filename = r, this.loadFunc = s, this.support = o, this.loading = null;
  }
  /**
  Start loading the the language. Will return a promise that
  resolves to a [`LanguageSupport`](https://codemirror.net/6/docs/ref/#language.LanguageSupport)
  object when the language successfully loads.
  */
  load() {
    return this.loading || (this.loading = this.loadFunc().then((e) => this.support = e, (e) => {
      throw this.loading = null, e;
    }));
  }
  /**
  Create a language description.
  */
  static of(e) {
    let { load: t, support: i } = e;
    if (!t) {
      if (!i)
        throw new RangeError("Must pass either 'load' or 'support' to LanguageDescription.of");
      t = () => Promise.resolve(i);
    }
    return new wl(e.name, (e.alias || []).concat(e.name).map((r) => r.toLowerCase()), e.extensions || [], e.filename, t, i);
  }
  /**
  Look for a language in the given array of descriptions that
  matches the filename. Will first match
  [`filename`](https://codemirror.net/6/docs/ref/#language.LanguageDescription.filename) patterns,
  and then [extensions](https://codemirror.net/6/docs/ref/#language.LanguageDescription.extensions),
  and return the first language that matches.
  */
  static matchFilename(e, t) {
    for (let r of e)
      if (r.filename && r.filename.test(t))
        return r;
    let i = /\.([^.]+)$/.exec(t);
    if (i) {
      for (let r of e)
        if (r.extensions.indexOf(i[1]) > -1)
          return r;
    }
    return null;
  }
  /**
  Look for a language whose name or alias matches the the given
  name (case-insensitively). If `fuzzy` is true, and no direct
  matchs is found, this'll also search for a language whose name
  or alias occurs in the string (for names shorter than three
  characters, only when surrounded by non-word characters).
  */
  static matchLanguageName(e, t, i = !0) {
    t = t.toLowerCase();
    for (let r of e)
      if (r.alias.some((s) => s == t))
        return r;
    if (i)
      for (let r of e)
        for (let s of r.alias) {
          let o = t.indexOf(s);
          if (o > -1 && (s.length > 2 || !/\w/.test(t[o - 1]) && !/\w/.test(t[o + s.length])))
            return r;
        }
    return null;
  }
}
const BC = /* @__PURE__ */ B.define(), zs = /* @__PURE__ */ B.define({
  combine: (n) => {
    if (!n.length)
      return "  ";
    let e = n[0];
    if (!e || /\S/.test(e) || Array.from(e).some((t) => t != e[0]))
      throw new Error("Invalid indent unit: " + JSON.stringify(n[0]));
    return e;
  }
});
function vl(n) {
  let e = n.facet(zs);
  return e.charCodeAt(0) == 9 ? n.tabSize * e.length : e.length;
}
function ms(n, e) {
  let t = "", i = n.tabSize, r = n.facet(zs)[0];
  if (r == "	") {
    for (; e >= i; )
      t += "	", e -= i;
    r = " ";
  }
  for (let s = 0; s < e; s++)
    t += r;
  return t;
}
function du(n, e) {
  n instanceof ue && (n = new aa(n));
  for (let i of n.state.facet(BC)) {
    let r = i(n, e);
    if (r !== void 0)
      return r;
  }
  let t = ge(n.state);
  return t.length >= e ? WC(n, t, e) : null;
}
class aa {
  /**
  Create an indent context.
  */
  constructor(e, t = {}) {
    this.state = e, this.options = t, this.unit = vl(e);
  }
  /**
  Get a description of the line at the given position, taking
  [simulated line
  breaks](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
  into account. If there is such a break at `pos`, the `bias`
  argument determines whether the part of the line line before or
  after the break is used.
  */
  lineAt(e, t = 1) {
    let i = this.state.doc.lineAt(e), { simulateBreak: r, simulateDoubleBreak: s } = this.options;
    return r != null && r >= i.from && r <= i.to ? s && r == e ? { text: "", from: e } : (t < 0 ? r < e : r <= e) ? { text: i.text.slice(r - i.from), from: r } : { text: i.text.slice(0, r - i.from), from: i.from } : i;
  }
  /**
  Get the text directly after `pos`, either the entire line
  or the next 100 characters, whichever is shorter.
  */
  textAfterPos(e, t = 1) {
    if (this.options.simulateDoubleBreak && e == this.options.simulateBreak)
      return "";
    let { text: i, from: r } = this.lineAt(e, t);
    return i.slice(e - r, Math.min(i.length, e + 100 - r));
  }
  /**
  Find the column for the given position.
  */
  column(e, t = 1) {
    let { text: i, from: r } = this.lineAt(e, t), s = this.countColumn(i, e - r), o = this.options.overrideIndentation ? this.options.overrideIndentation(r) : -1;
    return o > -1 && (s += o - this.countColumn(i, i.search(/\S|$/))), s;
  }
  /**
  Find the column position (taking tabs into account) of the given
  position in the given string.
  */
  countColumn(e, t = e.length) {
    return Wt(e, this.state.tabSize, t);
  }
  /**
  Find the indentation column of the line at the given point.
  */
  lineIndent(e, t = 1) {
    let { text: i, from: r } = this.lineAt(e, t), s = this.options.overrideIndentation;
    if (s) {
      let o = s(r);
      if (o > -1)
        return o;
    }
    return this.countColumn(i, i.search(/\S|$/));
  }
  /**
  Returns the [simulated line
  break](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
  for this context, if any.
  */
  get simulatedBreak() {
    return this.options.simulateBreak || null;
  }
}
const yn = /* @__PURE__ */ new J();
function WC(n, e, t) {
  let i = e.resolveStack(t), r = e.resolveInner(t, -1).resolve(t, 0).enterUnfinishedNodesBefore(t);
  if (r != i.node) {
    let s = [];
    for (let o = r; o && !(o.from == i.node.from && o.type == i.node.type); o = o.parent)
      s.push(o);
    for (let o = s.length - 1; o >= 0; o--)
      i = { node: s[o], next: i };
  }
  return Gy(i, n, t);
}
function Gy(n, e, t) {
  for (let i = n; i; i = i.next) {
    let r = DC(i.node);
    if (r)
      return r(Ou.create(e, t, i));
  }
  return 0;
}
function zC(n) {
  return n.pos == n.options.simulateBreak && n.options.simulateDoubleBreak;
}
function DC(n) {
  let e = n.type.prop(yn);
  if (e)
    return e;
  let t = n.firstChild, i;
  if (t && (i = t.type.prop(J.closedBy))) {
    let r = n.lastChild, s = r && i.indexOf(r.name) > -1;
    return (o) => Fy(o, !0, 1, void 0, s && !zC(o) ? r.from : void 0);
  }
  return n.parent == null ? IC : null;
}
function IC() {
  return 0;
}
class Ou extends aa {
  constructor(e, t, i) {
    super(e.state, e.options), this.base = e, this.pos = t, this.context = i;
  }
  /**
  The syntax tree node to which the indentation strategy
  applies.
  */
  get node() {
    return this.context.node;
  }
  /**
  @internal
  */
  static create(e, t, i) {
    return new Ou(e, t, i);
  }
  /**
  Get the text directly after `this.pos`, either the entire line
  or the next 100 characters, whichever is shorter.
  */
  get textAfter() {
    return this.textAfterPos(this.pos);
  }
  /**
  Get the indentation at the reference line for `this.node`, which
  is the line on which it starts, unless there is a node that is
  _not_ a parent of this node covering the start of that line. If
  so, the line at the start of that node is tried, again skipping
  on if it is covered by another such node.
  */
  get baseIndent() {
    return this.baseIndentFor(this.node);
  }
  /**
  Get the indentation for the reference line of the given node
  (see [`baseIndent`](https://codemirror.net/6/docs/ref/#language.TreeIndentContext.baseIndent)).
  */
  baseIndentFor(e) {
    let t = this.state.doc.lineAt(e.from);
    for (; ; ) {
      let i = e.resolve(t.from);
      for (; i.parent && i.parent.from == i.from; )
        i = i.parent;
      if (jC(i, e))
        break;
      t = this.state.doc.lineAt(i.from);
    }
    return this.lineIndent(t.from);
  }
  /**
  Continue looking for indentations in the node's parent nodes,
  and return the result of that.
  */
  continue() {
    return Gy(this.context.next, this.base, this.pos);
  }
}
function jC(n, e) {
  for (let t = e; t; t = t.parent)
    if (n == t)
      return !0;
  return !1;
}
function UC(n) {
  let e = n.node, t = e.childAfter(e.from), i = e.lastChild;
  if (!t)
    return null;
  let r = n.options.simulateBreak, s = n.state.doc.lineAt(t.from), o = r == null || r <= s.from ? s.to : Math.min(s.to, r);
  for (let l = t.to; ; ) {
    let a = e.childAfter(l);
    if (!a || a == i)
      return null;
    if (!a.type.isSkipped) {
      if (a.from >= o)
        return null;
      let c = /^ */.exec(s.text.slice(t.to - s.from))[0].length;
      return { from: t.from, to: t.to + c };
    }
    l = a.to;
  }
}
function Yi({ closing: n, align: e = !0, units: t = 1 }) {
  return (i) => Fy(i, e, t, n);
}
function Fy(n, e, t, i, r) {
  let s = n.textAfter, o = s.match(/^\s*/)[0].length, l = i && s.slice(o, o + i.length) == i || r == n.pos + o, a = e ? UC(n) : null;
  return a ? l ? n.column(a.from) : n.column(a.to) : n.baseIndent + (l ? 0 : n.unit * t);
}
const YC = (n) => n.baseIndent;
function mi({ except: n, units: e = 1 } = {}) {
  return (t) => {
    let i = n && n.test(t.textAfter);
    return t.baseIndent + (i ? 0 : e * t.unit);
  };
}
const NC = 200;
function GC() {
  return ue.transactionFilter.of((n) => {
    if (!n.docChanged || !n.isUserEvent("input.type") && !n.isUserEvent("input.complete"))
      return n;
    let e = n.startState.languageDataAt("indentOnInput", n.startState.selection.main.head);
    if (!e.length)
      return n;
    let t = n.newDoc, { head: i } = n.newSelection.main, r = t.lineAt(i);
    if (i > r.from + NC)
      return n;
    let s = t.sliceString(r.from, i);
    if (!e.some((c) => c.test(s)))
      return n;
    let { state: o } = n, l = -1, a = [];
    for (let { head: c } of o.selection.ranges) {
      let h = o.doc.lineAt(c);
      if (h.from == l)
        continue;
      l = h.from;
      let f = du(o, h.from);
      if (f == null)
        continue;
      let u = /^\s*/.exec(h.text)[0], d = ms(o, f);
      u != d && a.push({ from: h.from, to: h.from + u.length, insert: d });
    }
    return a.length ? [n, { changes: a, sequential: !0 }] : n;
  });
}
const Hy = /* @__PURE__ */ B.define(), Gt = /* @__PURE__ */ new J();
function Ds(n) {
  let e = n.firstChild, t = n.lastChild;
  return e && e.to < t.from ? { from: e.to, to: t.type.isError ? n.to : t.from } : null;
}
function FC(n, e, t) {
  let i = ge(n);
  if (i.length < t)
    return null;
  let r = i.resolveStack(t, 1), s = null;
  for (let o = r; o; o = o.next) {
    let l = o.node;
    if (l.to <= t || l.from > t)
      continue;
    if (s && l.from < e)
      break;
    let a = l.type.prop(Gt);
    if (a && (l.to < i.length - 50 || i.length == n.doc.length || !HC(l))) {
      let c = a(l, n);
      c && c.from <= t && c.from >= e && c.to > t && (s = c);
    }
  }
  return s;
}
function HC(n) {
  let e = n.lastChild;
  return e && e.to == n.to && e.type.isError;
}
function Pl(n, e, t) {
  for (let i of n.facet(Hy)) {
    let r = i(n, e, t);
    if (r)
      return r;
  }
  return FC(n, e, t);
}
function Ky(n, e) {
  let t = e.mapPos(n.from, 1), i = e.mapPos(n.to, -1);
  return t >= i ? void 0 : { from: t, to: i };
}
const ca = /* @__PURE__ */ te.define({ map: Ky }), Is = /* @__PURE__ */ te.define({ map: Ky });
function Jy(n) {
  let e = [];
  for (let { head: t } of n.state.selection.ranges)
    e.some((i) => i.from <= t && i.to >= t) || e.push(n.lineBlockAt(t));
  return e;
}
const Pi = /* @__PURE__ */ Ie.define({
  create() {
    return F.none;
  },
  update(n, e) {
    n = n.map(e.changes);
    for (let t of e.effects)
      if (t.is(ca) && !KC(n, t.value.from, t.value.to)) {
        let { preparePlaceholder: i } = e.state.facet(nS), r = i ? F.replace({ widget: new sR(i(e.state, t.value)) }) : KO;
        n = n.update({ add: [r.range(t.value.from, t.value.to)] });
      } else t.is(Is) && (n = n.update({
        filter: (i, r) => t.value.from != i || t.value.to != r,
        filterFrom: t.value.from,
        filterTo: t.value.to
      }));
    if (e.selection) {
      let t = !1, { head: i } = e.selection.main;
      n.between(i, i, (r, s) => {
        r < i && s > i && (t = !0);
      }), t && (n = n.update({
        filterFrom: i,
        filterTo: i,
        filter: (r, s) => s <= i || r >= i
      }));
    }
    return n;
  },
  provide: (n) => Z.decorations.from(n),
  toJSON(n, e) {
    let t = [];
    return n.between(0, e.doc.length, (i, r) => {
      t.push(i, r);
    }), t;
  },
  fromJSON(n) {
    if (!Array.isArray(n) || n.length % 2)
      throw new RangeError("Invalid JSON for fold state");
    let e = [];
    for (let t = 0; t < n.length; ) {
      let i = n[t++], r = n[t++];
      if (typeof i != "number" || typeof r != "number")
        throw new RangeError("Invalid JSON for fold state");
      e.push(KO.range(i, r));
    }
    return F.set(e, !0);
  }
});
function $l(n, e, t) {
  var i;
  let r = null;
  return (i = n.field(Pi, !1)) === null || i === void 0 || i.between(e, t, (s, o) => {
    (!r || r.from > s) && (r = { from: s, to: o });
  }), r;
}
function KC(n, e, t) {
  let i = !1;
  return n.between(e, e, (r, s) => {
    r == e && s == t && (i = !0);
  }), i;
}
function eS(n, e) {
  return n.field(Pi, !1) ? e : e.concat(te.appendConfig.of(iS()));
}
const JC = (n) => {
  for (let e of Jy(n)) {
    let t = Pl(n.state, e.from, e.to);
    if (t)
      return n.dispatch({ effects: eS(n.state, [ca.of(t), tS(n, t)]) }), !0;
  }
  return !1;
}, eR = (n) => {
  if (!n.state.field(Pi, !1))
    return !1;
  let e = [];
  for (let t of Jy(n)) {
    let i = $l(n.state, t.from, t.to);
    i && e.push(Is.of(i), tS(n, i, !1));
  }
  return e.length && n.dispatch({ effects: e }), e.length > 0;
};
function tS(n, e, t = !0) {
  let i = n.state.doc.lineAt(e.from).number, r = n.state.doc.lineAt(e.to).number;
  return Z.announce.of(`${n.state.phrase(t ? "Folded lines" : "Unfolded lines")} ${i} ${n.state.phrase("to")} ${r}.`);
}
const tR = (n) => {
  let { state: e } = n, t = [];
  for (let i = 0; i < e.doc.length; ) {
    let r = n.lineBlockAt(i), s = Pl(e, r.from, r.to);
    s && t.push(ca.of(s)), i = (s ? n.lineBlockAt(s.to) : r).to + 1;
  }
  return t.length && n.dispatch({ effects: eS(n.state, t) }), !!t.length;
}, nR = (n) => {
  let e = n.state.field(Pi, !1);
  if (!e || !e.size)
    return !1;
  let t = [];
  return e.between(0, n.state.doc.length, (i, r) => {
    t.push(Is.of({ from: i, to: r }));
  }), n.dispatch({ effects: t }), !0;
}, iR = [
  { key: "Ctrl-Shift-[", mac: "Cmd-Alt-[", run: JC },
  { key: "Ctrl-Shift-]", mac: "Cmd-Alt-]", run: eR },
  { key: "Ctrl-Alt-[", run: tR },
  { key: "Ctrl-Alt-]", run: nR }
], rR = {
  placeholderDOM: null,
  preparePlaceholder: null,
  placeholderText: "…"
}, nS = /* @__PURE__ */ B.define({
  combine(n) {
    return gn(n, rR);
  }
});
function iS(n) {
  return [Pi, aR];
}
function rS(n, e) {
  let { state: t } = n, i = t.facet(nS), r = (o) => {
    let l = n.lineBlockAt(n.posAtDOM(o.target)), a = $l(n.state, l.from, l.to);
    a && n.dispatch({ effects: Is.of(a) }), o.preventDefault();
  };
  if (i.placeholderDOM)
    return i.placeholderDOM(n, r, e);
  let s = document.createElement("span");
  return s.textContent = i.placeholderText, s.setAttribute("aria-label", t.phrase("folded code")), s.title = t.phrase("unfold"), s.className = "cm-foldPlaceholder", s.onclick = r, s;
}
const KO = /* @__PURE__ */ F.replace({ widget: /* @__PURE__ */ new class extends Zn {
  toDOM(n) {
    return rS(n, null);
  }
}() });
class sR extends Zn {
  constructor(e) {
    super(), this.value = e;
  }
  eq(e) {
    return this.value == e.value;
  }
  toDOM(e) {
    return rS(e, this.value);
  }
}
const oR = {
  openText: "⌄",
  closedText: "›",
  markerDOM: null,
  domEventHandlers: {},
  foldingChanged: () => !1
};
class ec extends An {
  constructor(e, t) {
    super(), this.config = e, this.open = t;
  }
  eq(e) {
    return this.config == e.config && this.open == e.open;
  }
  toDOM(e) {
    if (this.config.markerDOM)
      return this.config.markerDOM(this.open);
    let t = document.createElement("span");
    return t.textContent = this.open ? this.config.openText : this.config.closedText, t.title = e.state.phrase(this.open ? "Fold line" : "Unfold line"), t;
  }
}
function lR(n = {}) {
  let e = Object.assign(Object.assign({}, oR), n), t = new ec(e, !0), i = new ec(e, !1), r = Le.fromClass(class {
    constructor(o) {
      this.from = o.viewport.from, this.markers = this.buildMarkers(o);
    }
    update(o) {
      (o.docChanged || o.viewportChanged || o.startState.facet(Kn) != o.state.facet(Kn) || o.startState.field(Pi, !1) != o.state.field(Pi, !1) || ge(o.startState) != ge(o.state) || e.foldingChanged(o)) && (this.markers = this.buildMarkers(o.view));
    }
    buildMarkers(o) {
      let l = new Rn();
      for (let a of o.viewportLineBlocks) {
        let c = $l(o.state, a.from, a.to) ? i : Pl(o.state, a.from, a.to) ? t : null;
        c && l.add(a.from, a.from, c);
      }
      return l.finish();
    }
  }), { domEventHandlers: s } = e;
  return [
    r,
    oC({
      class: "cm-foldGutter",
      markers(o) {
        var l;
        return ((l = o.plugin(r)) === null || l === void 0 ? void 0 : l.markers) || Oe.empty;
      },
      initialSpacer() {
        return new ec(e, !1);
      },
      domEventHandlers: Object.assign(Object.assign({}, s), { click: (o, l, a) => {
        if (s.click && s.click(o, l, a))
          return !0;
        let c = $l(o.state, l.from, l.to);
        if (c)
          return o.dispatch({ effects: Is.of(c) }), !0;
        let h = Pl(o.state, l.from, l.to);
        return h ? (o.dispatch({ effects: ca.of(h) }), !0) : !1;
      } })
    }),
    iS()
  ];
}
const aR = /* @__PURE__ */ Z.baseTheme({
  ".cm-foldPlaceholder": {
    backgroundColor: "#eee",
    border: "1px solid #ddd",
    color: "#888",
    borderRadius: ".2em",
    margin: "0 1px",
    padding: "0 1px",
    cursor: "pointer"
  },
  ".cm-foldGutter span": {
    padding: "0 1px",
    cursor: "pointer"
  }
});
class Or {
  constructor(e, t) {
    this.specs = e;
    let i;
    function r(l) {
      let a = Nn.newName();
      return (i || (i = /* @__PURE__ */ Object.create(null)))["." + a] = l, a;
    }
    const s = typeof t.all == "string" ? t.all : t.all ? r(t.all) : void 0, o = t.scope;
    this.scope = o instanceof vt ? (l) => l.prop(fi) == o.data : o ? (l) => l == o : void 0, this.style = Yy(e.map((l) => ({
      tag: l.tag,
      class: l.class || r(Object.assign({}, l, { tag: null }))
    })), {
      all: s
    }).style, this.module = i ? new Nn(i) : null, this.themeType = t.themeType;
  }
  /**
  Create a highlighter style that associates the given styles to
  the given tags. The specs must be objects that hold a style tag
  or array of tags in their `tag` property, and either a single
  `class` property providing a static CSS class (for highlighter
  that rely on external styling), or a
  [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style
  set of CSS properties (which define the styling for those tags).
  
  The CSS rules created for a highlighter will be emitted in the
  order of the spec's properties. That means that for elements that
  have multiple tags associated with them, styles defined further
  down in the list will have a higher CSS precedence than styles
  defined earlier.
  */
  static define(e, t) {
    return new Or(e, t || {});
  }
}
const Ih = /* @__PURE__ */ B.define(), sS = /* @__PURE__ */ B.define({
  combine(n) {
    return n.length ? [n[0]] : null;
  }
});
function tc(n) {
  let e = n.facet(Ih);
  return e.length ? e : n.facet(sS);
}
function oS(n, e) {
  let t = [hR], i;
  return n instanceof Or && (n.module && t.push(Z.styleModule.of(n.module)), i = n.themeType), e?.fallback ? t.push(sS.of(n)) : i ? t.push(Ih.computeN([Z.darkTheme], (r) => r.facet(Z.darkTheme) == (i == "dark") ? [n] : [])) : t.push(Ih.of(n)), t;
}
class cR {
  constructor(e) {
    this.markCache = /* @__PURE__ */ Object.create(null), this.tree = ge(e.state), this.decorations = this.buildDeco(e, tc(e.state)), this.decoratedTo = e.viewport.to;
  }
  update(e) {
    let t = ge(e.state), i = tc(e.state), r = i != tc(e.startState), { viewport: s } = e.view, o = e.changes.mapPos(this.decoratedTo, 1);
    t.length < s.to && !r && t.type == this.tree.type && o >= s.to ? (this.decorations = this.decorations.map(e.changes), this.decoratedTo = o) : (t != this.tree || e.viewportChanged || r) && (this.tree = t, this.decorations = this.buildDeco(e.view, i), this.decoratedTo = s.to);
  }
  buildDeco(e, t) {
    if (!t || !this.tree.length)
      return F.none;
    let i = new Rn();
    for (let { from: r, to: s } of e.visibleRanges)
      qC(this.tree, t, (o, l, a) => {
        i.add(o, l, this.markCache[a] || (this.markCache[a] = F.mark({ class: a })));
      }, r, s);
    return i.finish();
  }
}
const hR = /* @__PURE__ */ Xn.high(/* @__PURE__ */ Le.fromClass(cR, {
  decorations: (n) => n.decorations
})), fR = /* @__PURE__ */ Or.define([
  {
    tag: g.meta,
    color: "#404740"
  },
  {
    tag: g.link,
    textDecoration: "underline"
  },
  {
    tag: g.heading,
    textDecoration: "underline",
    fontWeight: "bold"
  },
  {
    tag: g.emphasis,
    fontStyle: "italic"
  },
  {
    tag: g.strong,
    fontWeight: "bold"
  },
  {
    tag: g.strikethrough,
    textDecoration: "line-through"
  },
  {
    tag: g.keyword,
    color: "#708"
  },
  {
    tag: [g.atom, g.bool, g.url, g.contentSeparator, g.labelName],
    color: "#219"
  },
  {
    tag: [g.literal, g.inserted],
    color: "#164"
  },
  {
    tag: [g.string, g.deleted],
    color: "#a11"
  },
  {
    tag: [g.regexp, g.escape, /* @__PURE__ */ g.special(g.string)],
    color: "#e40"
  },
  {
    tag: /* @__PURE__ */ g.definition(g.variableName),
    color: "#00f"
  },
  {
    tag: /* @__PURE__ */ g.local(g.variableName),
    color: "#30a"
  },
  {
    tag: [g.typeName, g.namespace],
    color: "#085"
  },
  {
    tag: g.className,
    color: "#167"
  },
  {
    tag: [/* @__PURE__ */ g.special(g.variableName), g.macroName],
    color: "#256"
  },
  {
    tag: /* @__PURE__ */ g.definition(g.propertyName),
    color: "#00c"
  },
  {
    tag: g.comment,
    color: "#940"
  },
  {
    tag: g.invalid,
    color: "#f00"
  }
]), uR = /* @__PURE__ */ Z.baseTheme({
  "&.cm-focused .cm-matchingBracket": { backgroundColor: "#328c8252" },
  "&.cm-focused .cm-nonmatchingBracket": { backgroundColor: "#bb555544" }
}), lS = 1e4, aS = "()[]{}", cS = /* @__PURE__ */ B.define({
  combine(n) {
    return gn(n, {
      afterCursor: !0,
      brackets: aS,
      maxScanDistance: lS,
      renderMatch: pR
    });
  }
}), dR = /* @__PURE__ */ F.mark({ class: "cm-matchingBracket" }), OR = /* @__PURE__ */ F.mark({ class: "cm-nonmatchingBracket" });
function pR(n) {
  let e = [], t = n.matched ? dR : OR;
  return e.push(t.range(n.start.from, n.start.to)), n.end && e.push(t.range(n.end.from, n.end.to)), e;
}
const mR = /* @__PURE__ */ Ie.define({
  create() {
    return F.none;
  },
  update(n, e) {
    if (!e.docChanged && !e.selection)
      return n;
    let t = [], i = e.state.facet(cS);
    for (let r of e.state.selection.ranges) {
      if (!r.empty)
        continue;
      let s = hn(e.state, r.head, -1, i) || r.head > 0 && hn(e.state, r.head - 1, 1, i) || i.afterCursor && (hn(e.state, r.head, 1, i) || r.head < e.state.doc.length && hn(e.state, r.head + 1, -1, i));
      s && (t = t.concat(i.renderMatch(s, e.state)));
    }
    return F.set(t, !0);
  },
  provide: (n) => Z.decorations.from(n)
}), gR = [
  mR,
  uR
];
function yR(n = {}) {
  return [cS.of(n), gR];
}
const pu = /* @__PURE__ */ new J();
function jh(n, e, t) {
  let i = n.prop(e < 0 ? J.openedBy : J.closedBy);
  if (i)
    return i;
  if (n.name.length == 1) {
    let r = t.indexOf(n.name);
    if (r > -1 && r % 2 == (e < 0 ? 1 : 0))
      return [t[r + e]];
  }
  return null;
}
function Uh(n) {
  let e = n.type.prop(pu);
  return e ? e(n.node) : n;
}
function hn(n, e, t, i = {}) {
  let r = i.maxScanDistance || lS, s = i.brackets || aS, o = ge(n), l = o.resolveInner(e, t);
  for (let a = l; a; a = a.parent) {
    let c = jh(a.type, t, s);
    if (c && a.from < a.to) {
      let h = Uh(a);
      if (h && (t > 0 ? e >= h.from && e < h.to : e > h.from && e <= h.to))
        return SR(n, e, t, a, h, c, s);
    }
  }
  return bR(n, e, t, o, l.type, r, s);
}
function SR(n, e, t, i, r, s, o) {
  let l = i.parent, a = { from: r.from, to: r.to }, c = 0, h = l?.cursor();
  if (h && (t < 0 ? h.childBefore(i.from) : h.childAfter(i.to)))
    do
      if (t < 0 ? h.to <= i.from : h.from >= i.to) {
        if (c == 0 && s.indexOf(h.type.name) > -1 && h.from < h.to) {
          let f = Uh(h);
          return { start: a, end: f ? { from: f.from, to: f.to } : void 0, matched: !0 };
        } else if (jh(h.type, t, o))
          c++;
        else if (jh(h.type, -t, o)) {
          if (c == 0) {
            let f = Uh(h);
            return {
              start: a,
              end: f && f.from < f.to ? { from: f.from, to: f.to } : void 0,
              matched: !1
            };
          }
          c--;
        }
      }
    while (t < 0 ? h.prevSibling() : h.nextSibling());
  return { start: a, matched: !1 };
}
function bR(n, e, t, i, r, s, o) {
  let l = t < 0 ? n.sliceDoc(e - 1, e) : n.sliceDoc(e, e + 1), a = o.indexOf(l);
  if (a < 0 || a % 2 == 0 != t > 0)
    return null;
  let c = { from: t < 0 ? e - 1 : e, to: t > 0 ? e + 1 : e }, h = n.doc.iterRange(e, t > 0 ? n.doc.length : 0), f = 0;
  for (let u = 0; !h.next().done && u <= s; ) {
    let d = h.value;
    t < 0 && (u += d.length);
    let O = e + u * t;
    for (let p = t > 0 ? 0 : d.length - 1, m = t > 0 ? d.length : -1; p != m; p += t) {
      let y = o.indexOf(d[p]);
      if (!(y < 0 || i.resolveInner(O + p, 1).type != r))
        if (y % 2 == 0 == t > 0)
          f++;
        else {
          if (f == 1)
            return { start: c, end: { from: O + p, to: O + p + 1 }, matched: y >> 1 == a >> 1 };
          f--;
        }
    }
    t > 0 && (u += d.length);
  }
  return h.done ? { start: c, matched: !1 } : null;
}
const QR = /* @__PURE__ */ Object.create(null), JO = [We.none], ep = [], tp = /* @__PURE__ */ Object.create(null), xR = /* @__PURE__ */ Object.create(null);
for (let [n, e] of [
  ["variable", "variableName"],
  ["variable-2", "variableName.special"],
  ["string-2", "string.special"],
  ["def", "variableName.definition"],
  ["tag", "tagName"],
  ["attribute", "attributeName"],
  ["type", "typeName"],
  ["builtin", "variableName.standard"],
  ["qualifier", "modifier"],
  ["error", "invalid"],
  ["header", "heading"],
  ["property", "propertyName"]
])
  xR[n] = /* @__PURE__ */ kR(QR, e);
function nc(n, e) {
  ep.indexOf(n) > -1 || (ep.push(n), console.warn(e));
}
function kR(n, e) {
  let t = [];
  for (let l of e.split(" ")) {
    let a = [];
    for (let c of l.split(".")) {
      let h = n[c] || g[c];
      h ? typeof h == "function" ? a.length ? a = a.map(h) : nc(c, `Modifier ${c} used at start of tag`) : a.length ? nc(c, `Tag ${c} used as modifier`) : a = Array.isArray(h) ? h : [h] : nc(c, `Unknown highlighting tag ${c}`);
    }
    for (let c of a)
      t.push(c);
  }
  if (!t.length)
    return 0;
  let i = e.replace(/ /g, "_"), r = i + " " + t.map((l) => l.id), s = tp[r];
  if (s)
    return s.id;
  let o = tp[r] = We.define({
    id: JO.length,
    name: i,
    props: [Nt({ [i]: t })]
  });
  return JO.push(o), o.id;
}
ve.RTL, ve.LTR;
const wR = (n) => {
  let { state: e } = n, t = e.doc.lineAt(e.selection.main.from), i = gu(n.state, t.from);
  return i.line ? vR(n) : i.block ? $R(n) : !1;
};
function mu(n, e) {
  return ({ state: t, dispatch: i }) => {
    if (t.readOnly)
      return !1;
    let r = n(e, t);
    return r ? (i(t.update(r)), !0) : !1;
  };
}
const vR = /* @__PURE__ */ mu(
  RR,
  0
  /* CommentOption.Toggle */
), PR = /* @__PURE__ */ mu(
  hS,
  0
  /* CommentOption.Toggle */
), $R = /* @__PURE__ */ mu(
  (n, e) => hS(n, e, CR(e)),
  0
  /* CommentOption.Toggle */
);
function gu(n, e) {
  let t = n.languageDataAt("commentTokens", e, 1);
  return t.length ? t[0] : {};
}
const Rr = 50;
function TR(n, { open: e, close: t }, i, r) {
  let s = n.sliceDoc(i - Rr, i), o = n.sliceDoc(r, r + Rr), l = /\s*$/.exec(s)[0].length, a = /^\s*/.exec(o)[0].length, c = s.length - l;
  if (s.slice(c - e.length, c) == e && o.slice(a, a + t.length) == t)
    return {
      open: { pos: i - l, margin: l && 1 },
      close: { pos: r + a, margin: a && 1 }
    };
  let h, f;
  r - i <= 2 * Rr ? h = f = n.sliceDoc(i, r) : (h = n.sliceDoc(i, i + Rr), f = n.sliceDoc(r - Rr, r));
  let u = /^\s*/.exec(h)[0].length, d = /\s*$/.exec(f)[0].length, O = f.length - d - t.length;
  return h.slice(u, u + e.length) == e && f.slice(O, O + t.length) == t ? {
    open: {
      pos: i + u + e.length,
      margin: /\s/.test(h.charAt(u + e.length)) ? 1 : 0
    },
    close: {
      pos: r - d - t.length,
      margin: /\s/.test(f.charAt(O - 1)) ? 1 : 0
    }
  } : null;
}
function CR(n) {
  let e = [];
  for (let t of n.selection.ranges) {
    let i = n.doc.lineAt(t.from), r = t.to <= i.to ? i : n.doc.lineAt(t.to);
    r.from > i.from && r.from == t.to && (r = t.to == i.to + 1 ? i : n.doc.lineAt(t.to - 1));
    let s = e.length - 1;
    s >= 0 && e[s].to > i.from ? e[s].to = r.to : e.push({ from: i.from + /^\s*/.exec(i.text)[0].length, to: r.to });
  }
  return e;
}
function hS(n, e, t = e.selection.ranges) {
  let i = t.map((s) => gu(e, s.from).block);
  if (!i.every((s) => s))
    return null;
  let r = t.map((s, o) => TR(e, i[o], s.from, s.to));
  if (n != 2 && !r.every((s) => s))
    return { changes: e.changes(t.map((s, o) => r[o] ? [] : [{ from: s.from, insert: i[o].open + " " }, { from: s.to, insert: " " + i[o].close }])) };
  if (n != 1 && r.some((s) => s)) {
    let s = [];
    for (let o = 0, l; o < r.length; o++)
      if (l = r[o]) {
        let a = i[o], { open: c, close: h } = l;
        s.push({ from: c.pos - a.open.length, to: c.pos + c.margin }, { from: h.pos - h.margin, to: h.pos + a.close.length });
      }
    return { changes: s };
  }
  return null;
}
function RR(n, e, t = e.selection.ranges) {
  let i = [], r = -1;
  for (let { from: s, to: o } of t) {
    let l = i.length, a = 1e9, c = gu(e, s).line;
    if (c) {
      for (let h = s; h <= o; ) {
        let f = e.doc.lineAt(h);
        if (f.from > r && (s == o || o > f.from)) {
          r = f.from;
          let u = /^\s*/.exec(f.text)[0].length, d = u == f.length, O = f.text.slice(u, u + c.length) == c ? u : -1;
          u < f.text.length && u < a && (a = u), i.push({ line: f, comment: O, token: c, indent: u, empty: d, single: !1 });
        }
        h = f.to + 1;
      }
      if (a < 1e9)
        for (let h = l; h < i.length; h++)
          i[h].indent < i[h].line.text.length && (i[h].indent = a);
      i.length == l + 1 && (i[l].single = !0);
    }
  }
  if (n != 2 && i.some((s) => s.comment < 0 && (!s.empty || s.single))) {
    let s = [];
    for (let { line: l, token: a, indent: c, empty: h, single: f } of i)
      (f || !h) && s.push({ from: l.from + c, insert: a + " " });
    let o = e.changes(s);
    return { changes: o, selection: e.selection.map(o, 1) };
  } else if (n != 1 && i.some((s) => s.comment >= 0)) {
    let s = [];
    for (let { line: o, comment: l, token: a } of i)
      if (l >= 0) {
        let c = o.from + l, h = c + a.length;
        o.text[h - o.from] == " " && h++, s.push({ from: c, to: h });
      }
    return { changes: s };
  }
  return null;
}
const Yh = /* @__PURE__ */ qn.define(), ER = /* @__PURE__ */ qn.define(), AR = /* @__PURE__ */ B.define(), fS = /* @__PURE__ */ B.define({
  combine(n) {
    return gn(n, {
      minDepth: 100,
      newGroupDelay: 500,
      joinToEvent: (e, t) => t
    }, {
      minDepth: Math.max,
      newGroupDelay: Math.min,
      joinToEvent: (e, t) => (i, r) => e(i, r) || t(i, r)
    });
  }
}), uS = /* @__PURE__ */ Ie.define({
  create() {
    return fn.empty;
  },
  update(n, e) {
    let t = e.state.facet(fS), i = e.annotation(Yh);
    if (i) {
      let a = ft.fromTransaction(e, i.selection), c = i.side, h = c == 0 ? n.undone : n.done;
      return a ? h = Tl(h, h.length, t.minDepth, a) : h = pS(h, e.startState.selection), new fn(c == 0 ? i.rest : h, c == 0 ? h : i.rest);
    }
    let r = e.annotation(ER);
    if ((r == "full" || r == "before") && (n = n.isolate()), e.annotation(Me.addToHistory) === !1)
      return e.changes.empty ? n : n.addMapping(e.changes.desc);
    let s = ft.fromTransaction(e), o = e.annotation(Me.time), l = e.annotation(Me.userEvent);
    return s ? n = n.addChanges(s, o, l, t, e) : e.selection && (n = n.addSelection(e.startState.selection, o, l, t.newGroupDelay)), (r == "full" || r == "after") && (n = n.isolate()), n;
  },
  toJSON(n) {
    return { done: n.done.map((e) => e.toJSON()), undone: n.undone.map((e) => e.toJSON()) };
  },
  fromJSON(n) {
    return new fn(n.done.map(ft.fromJSON), n.undone.map(ft.fromJSON));
  }
});
function _R(n = {}) {
  return [
    uS,
    fS.of(n),
    Z.domEventHandlers({
      beforeinput(e, t) {
        let i = e.inputType == "historyUndo" ? dS : e.inputType == "historyRedo" ? Nh : null;
        return i ? (e.preventDefault(), i(t)) : !1;
      }
    })
  ];
}
function ha(n, e) {
  return function({ state: t, dispatch: i }) {
    if (!e && t.readOnly)
      return !1;
    let r = t.field(uS, !1);
    if (!r)
      return !1;
    let s = r.pop(n, t, e);
    return s ? (i(s), !0) : !1;
  };
}
const dS = /* @__PURE__ */ ha(0, !1), Nh = /* @__PURE__ */ ha(1, !1), XR = /* @__PURE__ */ ha(0, !0), qR = /* @__PURE__ */ ha(1, !0);
class ft {
  constructor(e, t, i, r, s) {
    this.changes = e, this.effects = t, this.mapped = i, this.startSelection = r, this.selectionsAfter = s;
  }
  setSelAfter(e) {
    return new ft(this.changes, this.effects, this.mapped, this.startSelection, e);
  }
  toJSON() {
    var e, t, i;
    return {
      changes: (e = this.changes) === null || e === void 0 ? void 0 : e.toJSON(),
      mapped: (t = this.mapped) === null || t === void 0 ? void 0 : t.toJSON(),
      startSelection: (i = this.startSelection) === null || i === void 0 ? void 0 : i.toJSON(),
      selectionsAfter: this.selectionsAfter.map((r) => r.toJSON())
    };
  }
  static fromJSON(e) {
    return new ft(e.changes && Be.fromJSON(e.changes), [], e.mapped && un.fromJSON(e.mapped), e.startSelection && $.fromJSON(e.startSelection), e.selectionsAfter.map($.fromJSON));
  }
  // This does not check `addToHistory` and such, it assumes the
  // transaction needs to be converted to an item. Returns null when
  // there are no changes or effects in the transaction.
  static fromTransaction(e, t) {
    let i = Pt;
    for (let r of e.startState.facet(AR)) {
      let s = r(e);
      s.length && (i = i.concat(s));
    }
    return !i.length && e.changes.empty ? null : new ft(e.changes.invert(e.startState.doc), i, void 0, t || e.startState.selection, Pt);
  }
  static selection(e) {
    return new ft(void 0, Pt, void 0, void 0, e);
  }
}
function Tl(n, e, t, i) {
  let r = e + 1 > t + 20 ? e - t - 1 : 0, s = n.slice(r, e);
  return s.push(i), s;
}
function ZR(n, e) {
  let t = [], i = !1;
  return n.iterChangedRanges((r, s) => t.push(r, s)), e.iterChangedRanges((r, s, o, l) => {
    for (let a = 0; a < t.length; ) {
      let c = t[a++], h = t[a++];
      l >= c && o <= h && (i = !0);
    }
  }), i;
}
function MR(n, e) {
  return n.ranges.length == e.ranges.length && n.ranges.filter((t, i) => t.empty != e.ranges[i].empty).length === 0;
}
function OS(n, e) {
  return n.length ? e.length ? n.concat(e) : n : e;
}
const Pt = [], LR = 200;
function pS(n, e) {
  if (n.length) {
    let t = n[n.length - 1], i = t.selectionsAfter.slice(Math.max(0, t.selectionsAfter.length - LR));
    return i.length && i[i.length - 1].eq(e) ? n : (i.push(e), Tl(n, n.length - 1, 1e9, t.setSelAfter(i)));
  } else
    return [ft.selection([e])];
}
function VR(n) {
  let e = n[n.length - 1], t = n.slice();
  return t[n.length - 1] = e.setSelAfter(e.selectionsAfter.slice(0, e.selectionsAfter.length - 1)), t;
}
function ic(n, e) {
  if (!n.length)
    return n;
  let t = n.length, i = Pt;
  for (; t; ) {
    let r = BR(n[t - 1], e, i);
    if (r.changes && !r.changes.empty || r.effects.length) {
      let s = n.slice(0, t);
      return s[t - 1] = r, s;
    } else
      e = r.mapped, t--, i = r.selectionsAfter;
  }
  return i.length ? [ft.selection(i)] : Pt;
}
function BR(n, e, t) {
  let i = OS(n.selectionsAfter.length ? n.selectionsAfter.map((l) => l.map(e)) : Pt, t);
  if (!n.changes)
    return ft.selection(i);
  let r = n.changes.map(e), s = e.mapDesc(n.changes, !0), o = n.mapped ? n.mapped.composeDesc(s) : s;
  return new ft(r, te.mapEffects(n.effects, e), o, n.startSelection.map(s), i);
}
const WR = /^(input\.type|delete)($|\.)/;
class fn {
  constructor(e, t, i = 0, r = void 0) {
    this.done = e, this.undone = t, this.prevTime = i, this.prevUserEvent = r;
  }
  isolate() {
    return this.prevTime ? new fn(this.done, this.undone) : this;
  }
  addChanges(e, t, i, r, s) {
    let o = this.done, l = o[o.length - 1];
    return l && l.changes && !l.changes.empty && e.changes && (!i || WR.test(i)) && (!l.selectionsAfter.length && t - this.prevTime < r.newGroupDelay && r.joinToEvent(s, ZR(l.changes, e.changes)) || // For compose (but not compose.start) events, always join with previous event
    i == "input.type.compose") ? o = Tl(o, o.length - 1, r.minDepth, new ft(e.changes.compose(l.changes), OS(te.mapEffects(e.effects, l.changes), l.effects), l.mapped, l.startSelection, Pt)) : o = Tl(o, o.length, r.minDepth, e), new fn(o, Pt, t, i);
  }
  addSelection(e, t, i, r) {
    let s = this.done.length ? this.done[this.done.length - 1].selectionsAfter : Pt;
    return s.length > 0 && t - this.prevTime < r && i == this.prevUserEvent && i && /^select($|\.)/.test(i) && MR(s[s.length - 1], e) ? this : new fn(pS(this.done, e), this.undone, t, i);
  }
  addMapping(e) {
    return new fn(ic(this.done, e), ic(this.undone, e), this.prevTime, this.prevUserEvent);
  }
  pop(e, t, i) {
    let r = e == 0 ? this.done : this.undone;
    if (r.length == 0)
      return null;
    let s = r[r.length - 1], o = s.selectionsAfter[0] || t.selection;
    if (i && s.selectionsAfter.length)
      return t.update({
        selection: s.selectionsAfter[s.selectionsAfter.length - 1],
        annotations: Yh.of({ side: e, rest: VR(r), selection: o }),
        userEvent: e == 0 ? "select.undo" : "select.redo",
        scrollIntoView: !0
      });
    if (s.changes) {
      let l = r.length == 1 ? Pt : r.slice(0, r.length - 1);
      return s.mapped && (l = ic(l, s.mapped)), t.update({
        changes: s.changes,
        selection: s.startSelection,
        effects: s.effects,
        annotations: Yh.of({ side: e, rest: l, selection: o }),
        filter: !1,
        userEvent: e == 0 ? "undo" : "redo",
        scrollIntoView: !0
      });
    } else
      return null;
  }
}
fn.empty = /* @__PURE__ */ new fn(Pt, Pt);
const zR = [
  { key: "Mod-z", run: dS, preventDefault: !0 },
  { key: "Mod-y", mac: "Mod-Shift-z", run: Nh, preventDefault: !0 },
  { linux: "Ctrl-Shift-z", run: Nh, preventDefault: !0 },
  { key: "Mod-u", run: XR, preventDefault: !0 },
  { key: "Alt-u", mac: "Mod-Shift-u", run: qR, preventDefault: !0 }
];
function pr(n, e) {
  return $.create(n.ranges.map(e), n.mainIndex);
}
function Sn(n, e) {
  return n.update({ selection: e, scrollIntoView: !0, userEvent: "select" });
}
function Ft({ state: n, dispatch: e }, t) {
  let i = pr(n.selection, t);
  return i.eq(n.selection, !0) ? !1 : (e(Sn(n, i)), !0);
}
function fa(n, e) {
  return $.cursor(e ? n.to : n.from);
}
function mS(n, e) {
  return Ft(n, (t) => t.empty ? n.moveByChar(t, e) : fa(t, e));
}
function it(n) {
  return n.textDirectionAt(n.state.selection.main.head) == ve.LTR;
}
const gS = (n) => mS(n, !it(n)), yS = (n) => mS(n, it(n));
function SS(n, e) {
  return Ft(n, (t) => t.empty ? n.moveByGroup(t, e) : fa(t, e));
}
const DR = (n) => SS(n, !it(n)), IR = (n) => SS(n, it(n));
function jR(n, e, t) {
  if (e.type.prop(t))
    return !0;
  let i = e.to - e.from;
  return i && (i > 2 || /[^\s,.;:]/.test(n.sliceDoc(e.from, e.to))) || e.firstChild;
}
function ua(n, e, t) {
  let i = ge(n).resolveInner(e.head), r = t ? J.closedBy : J.openedBy;
  for (let a = e.head; ; ) {
    let c = t ? i.childAfter(a) : i.childBefore(a);
    if (!c)
      break;
    jR(n, c, r) ? i = c : a = t ? c.to : c.from;
  }
  let s = i.type.prop(r), o, l;
  return s && (o = t ? hn(n, i.from, 1) : hn(n, i.to, -1)) && o.matched ? l = t ? o.end.to : o.end.from : l = t ? i.to : i.from, $.cursor(l, t ? -1 : 1);
}
const UR = (n) => Ft(n, (e) => ua(n.state, e, !it(n))), YR = (n) => Ft(n, (e) => ua(n.state, e, it(n)));
function bS(n, e) {
  return Ft(n, (t) => {
    if (!t.empty)
      return fa(t, e);
    let i = n.moveVertically(t, e);
    return i.head != t.head ? i : n.moveToLineBoundary(t, e);
  });
}
const QS = (n) => bS(n, !1), xS = (n) => bS(n, !0);
function kS(n) {
  let e = n.scrollDOM.clientHeight < n.scrollDOM.scrollHeight - 2, t = 0, i = 0, r;
  if (e) {
    for (let s of n.state.facet(Z.scrollMargins)) {
      let o = s(n);
      o?.top && (t = Math.max(o?.top, t)), o?.bottom && (i = Math.max(o?.bottom, i));
    }
    r = n.scrollDOM.clientHeight - t - i;
  } else
    r = (n.dom.ownerDocument.defaultView || window).innerHeight;
  return {
    marginTop: t,
    marginBottom: i,
    selfScroll: e,
    height: Math.max(n.defaultLineHeight, r - 5)
  };
}
function wS(n, e) {
  let t = kS(n), { state: i } = n, r = pr(i.selection, (o) => o.empty ? n.moveVertically(o, e, t.height) : fa(o, e));
  if (r.eq(i.selection))
    return !1;
  let s;
  if (t.selfScroll) {
    let o = n.coordsAtPos(i.selection.main.head), l = n.scrollDOM.getBoundingClientRect(), a = l.top + t.marginTop, c = l.bottom - t.marginBottom;
    o && o.top > a && o.bottom < c && (s = Z.scrollIntoView(r.main.head, { y: "start", yMargin: o.top - a }));
  }
  return n.dispatch(Sn(i, r), { effects: s }), !0;
}
const np = (n) => wS(n, !1), Gh = (n) => wS(n, !0);
function Jn(n, e, t) {
  let i = n.lineBlockAt(e.head), r = n.moveToLineBoundary(e, t);
  if (r.head == e.head && r.head != (t ? i.to : i.from) && (r = n.moveToLineBoundary(e, t, !1)), !t && r.head == i.from && i.length) {
    let s = /^\s*/.exec(n.state.sliceDoc(i.from, Math.min(i.from + 100, i.to)))[0].length;
    s && e.head != i.from + s && (r = $.cursor(i.from + s));
  }
  return r;
}
const NR = (n) => Ft(n, (e) => Jn(n, e, !0)), GR = (n) => Ft(n, (e) => Jn(n, e, !1)), FR = (n) => Ft(n, (e) => Jn(n, e, !it(n))), HR = (n) => Ft(n, (e) => Jn(n, e, it(n))), KR = (n) => Ft(n, (e) => $.cursor(n.lineBlockAt(e.head).from, 1)), JR = (n) => Ft(n, (e) => $.cursor(n.lineBlockAt(e.head).to, -1));
function e2(n, e, t) {
  let i = !1, r = pr(n.selection, (s) => {
    let o = hn(n, s.head, -1) || hn(n, s.head, 1) || s.head > 0 && hn(n, s.head - 1, 1) || s.head < n.doc.length && hn(n, s.head + 1, -1);
    if (!o || !o.end)
      return s;
    i = !0;
    let l = o.start.from == s.head ? o.end.to : o.end.from;
    return $.cursor(l);
  });
  return i ? (e(Sn(n, r)), !0) : !1;
}
const t2 = ({ state: n, dispatch: e }) => e2(n, e);
function Et(n, e) {
  let t = pr(n.state.selection, (i) => {
    let r = e(i);
    return $.range(i.anchor, r.head, r.goalColumn, r.bidiLevel || void 0);
  });
  return t.eq(n.state.selection) ? !1 : (n.dispatch(Sn(n.state, t)), !0);
}
function vS(n, e) {
  return Et(n, (t) => n.moveByChar(t, e));
}
const PS = (n) => vS(n, !it(n)), $S = (n) => vS(n, it(n));
function TS(n, e) {
  return Et(n, (t) => n.moveByGroup(t, e));
}
const n2 = (n) => TS(n, !it(n)), i2 = (n) => TS(n, it(n)), r2 = (n) => Et(n, (e) => ua(n.state, e, !it(n))), s2 = (n) => Et(n, (e) => ua(n.state, e, it(n)));
function CS(n, e) {
  return Et(n, (t) => n.moveVertically(t, e));
}
const RS = (n) => CS(n, !1), ES = (n) => CS(n, !0);
function AS(n, e) {
  return Et(n, (t) => n.moveVertically(t, e, kS(n).height));
}
const ip = (n) => AS(n, !1), rp = (n) => AS(n, !0), o2 = (n) => Et(n, (e) => Jn(n, e, !0)), l2 = (n) => Et(n, (e) => Jn(n, e, !1)), a2 = (n) => Et(n, (e) => Jn(n, e, !it(n))), c2 = (n) => Et(n, (e) => Jn(n, e, it(n))), h2 = (n) => Et(n, (e) => $.cursor(n.lineBlockAt(e.head).from)), f2 = (n) => Et(n, (e) => $.cursor(n.lineBlockAt(e.head).to)), sp = ({ state: n, dispatch: e }) => (e(Sn(n, { anchor: 0 })), !0), op = ({ state: n, dispatch: e }) => (e(Sn(n, { anchor: n.doc.length })), !0), lp = ({ state: n, dispatch: e }) => (e(Sn(n, { anchor: n.selection.main.anchor, head: 0 })), !0), ap = ({ state: n, dispatch: e }) => (e(Sn(n, { anchor: n.selection.main.anchor, head: n.doc.length })), !0), u2 = ({ state: n, dispatch: e }) => (e(n.update({ selection: { anchor: 0, head: n.doc.length }, userEvent: "select" })), !0), d2 = ({ state: n, dispatch: e }) => {
  let t = da(n).map(({ from: i, to: r }) => $.range(i, Math.min(r + 1, n.doc.length)));
  return e(n.update({ selection: $.create(t), userEvent: "select" })), !0;
}, O2 = ({ state: n, dispatch: e }) => {
  let t = pr(n.selection, (i) => {
    let r = ge(n), s = r.resolveStack(i.from, 1);
    if (i.empty) {
      let o = r.resolveStack(i.from, -1);
      o.node.from >= s.node.from && o.node.to <= s.node.to && (s = o);
    }
    for (let o = s; o; o = o.next) {
      let { node: l } = o;
      if ((l.from < i.from && l.to >= i.to || l.to > i.to && l.from <= i.from) && o.next)
        return $.range(l.to, l.from);
    }
    return i;
  });
  return t.eq(n.selection) ? !1 : (e(Sn(n, t)), !0);
}, p2 = ({ state: n, dispatch: e }) => {
  let t = n.selection, i = null;
  return t.ranges.length > 1 ? i = $.create([t.main]) : t.main.empty || (i = $.create([$.cursor(t.main.head)])), i ? (e(Sn(n, i)), !0) : !1;
};
function js(n, e) {
  if (n.state.readOnly)
    return !1;
  let t = "delete.selection", { state: i } = n, r = i.changeByRange((s) => {
    let { from: o, to: l } = s;
    if (o == l) {
      let a = e(s);
      a < o ? (t = "delete.backward", a = So(n, a, !1)) : a > o && (t = "delete.forward", a = So(n, a, !0)), o = Math.min(o, a), l = Math.max(l, a);
    } else
      o = So(n, o, !1), l = So(n, l, !0);
    return o == l ? { range: s } : { changes: { from: o, to: l }, range: $.cursor(o, o < s.head ? -1 : 1) };
  });
  return r.changes.empty ? !1 : (n.dispatch(i.update(r, {
    scrollIntoView: !0,
    userEvent: t,
    effects: t == "delete.selection" ? Z.announce.of(i.phrase("Selection deleted")) : void 0
  })), !0);
}
function So(n, e, t) {
  if (n instanceof Z)
    for (let i of n.state.facet(Z.atomicRanges).map((r) => r(n)))
      i.between(e, e, (r, s) => {
        r < e && s > e && (e = t ? s : r);
      });
  return e;
}
const _S = (n, e, t) => js(n, (i) => {
  let r = i.from, { state: s } = n, o = s.doc.lineAt(r), l, a;
  if (t && !e && r > o.from && r < o.from + 200 && !/[^ \t]/.test(l = o.text.slice(0, r - o.from))) {
    if (l[l.length - 1] == "	")
      return r - 1;
    let c = Wt(l, s.tabSize), h = c % vl(s) || vl(s);
    for (let f = 0; f < h && l[l.length - 1 - f] == " "; f++)
      r--;
    a = r;
  } else
    a = Ge(o.text, r - o.from, e, e) + o.from, a == r && o.number != (e ? s.doc.lines : 1) ? a += e ? 1 : -1 : !e && /[\ufe00-\ufe0f]/.test(o.text.slice(a - o.from, r - o.from)) && (a = Ge(o.text, a - o.from, !1, !1) + o.from);
  return a;
}), Fh = (n) => _S(n, !1, !0), XS = (n) => _S(n, !0, !1), qS = (n, e) => js(n, (t) => {
  let i = t.head, { state: r } = n, s = r.doc.lineAt(i), o = r.charCategorizer(i);
  for (let l = null; ; ) {
    if (i == (e ? s.to : s.from)) {
      i == t.head && s.number != (e ? r.doc.lines : 1) && (i += e ? 1 : -1);
      break;
    }
    let a = Ge(s.text, i - s.from, e) + s.from, c = s.text.slice(Math.min(i, a) - s.from, Math.max(i, a) - s.from), h = o(c);
    if (l != null && h != l)
      break;
    (c != " " || i != t.head) && (l = h), i = a;
  }
  return i;
}), ZS = (n) => qS(n, !1), m2 = (n) => qS(n, !0), g2 = (n) => js(n, (e) => {
  let t = n.lineBlockAt(e.head).to;
  return e.head < t ? t : Math.min(n.state.doc.length, e.head + 1);
}), y2 = (n) => js(n, (e) => {
  let t = n.moveToLineBoundary(e, !1).head;
  return e.head > t ? t : Math.max(0, e.head - 1);
}), S2 = (n) => js(n, (e) => {
  let t = n.moveToLineBoundary(e, !0).head;
  return e.head < t ? t : Math.min(n.state.doc.length, e.head + 1);
}), b2 = ({ state: n, dispatch: e }) => {
  if (n.readOnly)
    return !1;
  let t = n.changeByRange((i) => ({
    changes: { from: i.from, to: i.to, insert: de.of(["", ""]) },
    range: $.cursor(i.from)
  }));
  return e(n.update(t, { scrollIntoView: !0, userEvent: "input" })), !0;
}, Q2 = ({ state: n, dispatch: e }) => {
  if (n.readOnly)
    return !1;
  let t = n.changeByRange((i) => {
    if (!i.empty || i.from == 0 || i.from == n.doc.length)
      return { range: i };
    let r = i.from, s = n.doc.lineAt(r), o = r == s.from ? r - 1 : Ge(s.text, r - s.from, !1) + s.from, l = r == s.to ? r + 1 : Ge(s.text, r - s.from, !0) + s.from;
    return {
      changes: { from: o, to: l, insert: n.doc.slice(r, l).append(n.doc.slice(o, r)) },
      range: $.cursor(l)
    };
  });
  return t.changes.empty ? !1 : (e(n.update(t, { scrollIntoView: !0, userEvent: "move.character" })), !0);
};
function da(n) {
  let e = [], t = -1;
  for (let i of n.selection.ranges) {
    let r = n.doc.lineAt(i.from), s = n.doc.lineAt(i.to);
    if (!i.empty && i.to == s.from && (s = n.doc.lineAt(i.to - 1)), t >= r.number) {
      let o = e[e.length - 1];
      o.to = s.to, o.ranges.push(i);
    } else
      e.push({ from: r.from, to: s.to, ranges: [i] });
    t = s.number + 1;
  }
  return e;
}
function MS(n, e, t) {
  if (n.readOnly)
    return !1;
  let i = [], r = [];
  for (let s of da(n)) {
    if (t ? s.to == n.doc.length : s.from == 0)
      continue;
    let o = n.doc.lineAt(t ? s.to + 1 : s.from - 1), l = o.length + 1;
    if (t) {
      i.push({ from: s.to, to: o.to }, { from: s.from, insert: o.text + n.lineBreak });
      for (let a of s.ranges)
        r.push($.range(Math.min(n.doc.length, a.anchor + l), Math.min(n.doc.length, a.head + l)));
    } else {
      i.push({ from: o.from, to: s.from }, { from: s.to, insert: n.lineBreak + o.text });
      for (let a of s.ranges)
        r.push($.range(a.anchor - l, a.head - l));
    }
  }
  return i.length ? (e(n.update({
    changes: i,
    scrollIntoView: !0,
    selection: $.create(r, n.selection.mainIndex),
    userEvent: "move.line"
  })), !0) : !1;
}
const x2 = ({ state: n, dispatch: e }) => MS(n, e, !1), k2 = ({ state: n, dispatch: e }) => MS(n, e, !0);
function LS(n, e, t) {
  if (n.readOnly)
    return !1;
  let i = [];
  for (let r of da(n))
    t ? i.push({ from: r.from, insert: n.doc.slice(r.from, r.to) + n.lineBreak }) : i.push({ from: r.to, insert: n.lineBreak + n.doc.slice(r.from, r.to) });
  return e(n.update({ changes: i, scrollIntoView: !0, userEvent: "input.copyline" })), !0;
}
const w2 = ({ state: n, dispatch: e }) => LS(n, e, !1), v2 = ({ state: n, dispatch: e }) => LS(n, e, !0), P2 = (n) => {
  if (n.state.readOnly)
    return !1;
  let { state: e } = n, t = e.changes(da(e).map(({ from: r, to: s }) => (r > 0 ? r-- : s < e.doc.length && s++, { from: r, to: s }))), i = pr(e.selection, (r) => {
    let s;
    if (n.lineWrapping) {
      let o = n.lineBlockAt(r.head), l = n.coordsAtPos(r.head, r.assoc || 1);
      l && (s = o.bottom + n.documentTop - l.bottom + n.defaultLineHeight / 2);
    }
    return n.moveVertically(r, !0, s);
  }).map(t);
  return n.dispatch({ changes: t, selection: i, scrollIntoView: !0, userEvent: "delete.line" }), !0;
};
function $2(n, e) {
  if (/\(\)|\[\]|\{\}/.test(n.sliceDoc(e - 1, e + 1)))
    return { from: e, to: e };
  let t = ge(n).resolveInner(e), i = t.childBefore(e), r = t.childAfter(e), s;
  return i && r && i.to <= e && r.from >= e && (s = i.type.prop(J.closedBy)) && s.indexOf(r.name) > -1 && n.doc.lineAt(i.to).from == n.doc.lineAt(r.from).from && !/\S/.test(n.sliceDoc(i.to, r.from)) ? { from: i.to, to: r.from } : null;
}
const cp = /* @__PURE__ */ VS(!1), T2 = /* @__PURE__ */ VS(!0);
function VS(n) {
  return ({ state: e, dispatch: t }) => {
    if (e.readOnly)
      return !1;
    let i = e.changeByRange((r) => {
      let { from: s, to: o } = r, l = e.doc.lineAt(s), a = !n && s == o && $2(e, s);
      n && (s = o = (o <= l.to ? l : e.doc.lineAt(o)).to);
      let c = new aa(e, { simulateBreak: s, simulateDoubleBreak: !!a }), h = du(c, s);
      for (h == null && (h = Wt(/^\s*/.exec(e.doc.lineAt(s).text)[0], e.tabSize)); o < l.to && /\s/.test(l.text[o - l.from]); )
        o++;
      a ? { from: s, to: o } = a : s > l.from && s < l.from + 100 && !/\S/.test(l.text.slice(0, s)) && (s = l.from);
      let f = ["", ms(e, h)];
      return a && f.push(ms(e, c.lineIndent(l.from, -1))), {
        changes: { from: s, to: o, insert: de.of(f) },
        range: $.cursor(s + 1 + f[1].length)
      };
    });
    return t(e.update(i, { scrollIntoView: !0, userEvent: "input" })), !0;
  };
}
function yu(n, e) {
  let t = -1;
  return n.changeByRange((i) => {
    let r = [];
    for (let o = i.from; o <= i.to; ) {
      let l = n.doc.lineAt(o);
      l.number > t && (i.empty || i.to > l.from) && (e(l, r, i), t = l.number), o = l.to + 1;
    }
    let s = n.changes(r);
    return {
      changes: r,
      range: $.range(s.mapPos(i.anchor, 1), s.mapPos(i.head, 1))
    };
  });
}
const C2 = ({ state: n, dispatch: e }) => {
  if (n.readOnly)
    return !1;
  let t = /* @__PURE__ */ Object.create(null), i = new aa(n, { overrideIndentation: (s) => {
    let o = t[s];
    return o ?? -1;
  } }), r = yu(n, (s, o, l) => {
    let a = du(i, s.from);
    if (a == null)
      return;
    /\S/.test(s.text) || (a = 0);
    let c = /^\s*/.exec(s.text)[0], h = ms(n, a);
    (c != h || l.from < s.from + c.length) && (t[s.from] = a, o.push({ from: s.from, to: s.from + c.length, insert: h }));
  });
  return r.changes.empty || e(n.update(r, { userEvent: "indent" })), !0;
}, R2 = ({ state: n, dispatch: e }) => n.readOnly ? !1 : (e(n.update(yu(n, (t, i) => {
  i.push({ from: t.from, insert: n.facet(zs) });
}), { userEvent: "input.indent" })), !0), E2 = ({ state: n, dispatch: e }) => n.readOnly ? !1 : (e(n.update(yu(n, (t, i) => {
  let r = /^\s*/.exec(t.text)[0];
  if (!r)
    return;
  let s = Wt(r, n.tabSize), o = 0, l = ms(n, Math.max(0, s - vl(n)));
  for (; o < r.length && o < l.length && r.charCodeAt(o) == l.charCodeAt(o); )
    o++;
  i.push({ from: t.from + o, to: t.from + r.length, insert: l.slice(o) });
}), { userEvent: "delete.dedent" })), !0), A2 = (n) => (n.setTabFocusMode(), !0), _2 = [
  { key: "Ctrl-b", run: gS, shift: PS, preventDefault: !0 },
  { key: "Ctrl-f", run: yS, shift: $S },
  { key: "Ctrl-p", run: QS, shift: RS },
  { key: "Ctrl-n", run: xS, shift: ES },
  { key: "Ctrl-a", run: KR, shift: h2 },
  { key: "Ctrl-e", run: JR, shift: f2 },
  { key: "Ctrl-d", run: XS },
  { key: "Ctrl-h", run: Fh },
  { key: "Ctrl-k", run: g2 },
  { key: "Ctrl-Alt-h", run: ZS },
  { key: "Ctrl-o", run: b2 },
  { key: "Ctrl-t", run: Q2 },
  { key: "Ctrl-v", run: Gh }
], X2 = /* @__PURE__ */ [
  { key: "ArrowLeft", run: gS, shift: PS, preventDefault: !0 },
  { key: "Mod-ArrowLeft", mac: "Alt-ArrowLeft", run: DR, shift: n2, preventDefault: !0 },
  { mac: "Cmd-ArrowLeft", run: FR, shift: a2, preventDefault: !0 },
  { key: "ArrowRight", run: yS, shift: $S, preventDefault: !0 },
  { key: "Mod-ArrowRight", mac: "Alt-ArrowRight", run: IR, shift: i2, preventDefault: !0 },
  { mac: "Cmd-ArrowRight", run: HR, shift: c2, preventDefault: !0 },
  { key: "ArrowUp", run: QS, shift: RS, preventDefault: !0 },
  { mac: "Cmd-ArrowUp", run: sp, shift: lp },
  { mac: "Ctrl-ArrowUp", run: np, shift: ip },
  { key: "ArrowDown", run: xS, shift: ES, preventDefault: !0 },
  { mac: "Cmd-ArrowDown", run: op, shift: ap },
  { mac: "Ctrl-ArrowDown", run: Gh, shift: rp },
  { key: "PageUp", run: np, shift: ip },
  { key: "PageDown", run: Gh, shift: rp },
  { key: "Home", run: GR, shift: l2, preventDefault: !0 },
  { key: "Mod-Home", run: sp, shift: lp },
  { key: "End", run: NR, shift: o2, preventDefault: !0 },
  { key: "Mod-End", run: op, shift: ap },
  { key: "Enter", run: cp, shift: cp },
  { key: "Mod-a", run: u2 },
  { key: "Backspace", run: Fh, shift: Fh },
  { key: "Delete", run: XS },
  { key: "Mod-Backspace", mac: "Alt-Backspace", run: ZS },
  { key: "Mod-Delete", mac: "Alt-Delete", run: m2 },
  { mac: "Mod-Backspace", run: y2 },
  { mac: "Mod-Delete", run: S2 }
].concat(/* @__PURE__ */ _2.map((n) => ({ mac: n.key, run: n.run, shift: n.shift }))), q2 = /* @__PURE__ */ [
  { key: "Alt-ArrowLeft", mac: "Ctrl-ArrowLeft", run: UR, shift: r2 },
  { key: "Alt-ArrowRight", mac: "Ctrl-ArrowRight", run: YR, shift: s2 },
  { key: "Alt-ArrowUp", run: x2 },
  { key: "Shift-Alt-ArrowUp", run: w2 },
  { key: "Alt-ArrowDown", run: k2 },
  { key: "Shift-Alt-ArrowDown", run: v2 },
  { key: "Escape", run: p2 },
  { key: "Mod-Enter", run: T2 },
  { key: "Alt-l", mac: "Ctrl-l", run: d2 },
  { key: "Mod-i", run: O2, preventDefault: !0 },
  { key: "Mod-[", run: E2 },
  { key: "Mod-]", run: R2 },
  { key: "Mod-Alt-\\", run: C2 },
  { key: "Shift-Mod-k", run: P2 },
  { key: "Shift-Mod-\\", run: t2 },
  { key: "Mod-/", run: wR },
  { key: "Alt-A", run: PR },
  { key: "Ctrl-m", mac: "Shift-Alt-m", run: A2 }
].concat(X2), hp = typeof String.prototype.normalize == "function" ? (n) => n.normalize("NFKD") : (n) => n;
class nr {
  /**
  Create a text cursor. The query is the search string, `from` to
  `to` provides the region to search.
  
  When `normalize` is given, it will be called, on both the query
  string and the content it is matched against, before comparing.
  You can, for example, create a case-insensitive search by
  passing `s => s.toLowerCase()`.
  
  Text is always normalized with
  [`.normalize("NFKD")`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize)
  (when supported).
  */
  constructor(e, t, i = 0, r = e.length, s, o) {
    this.test = o, this.value = { from: 0, to: 0 }, this.done = !1, this.matches = [], this.buffer = "", this.bufferPos = 0, this.iter = e.iterRange(i, r), this.bufferStart = i, this.normalize = s ? (l) => s(hp(l)) : hp, this.query = this.normalize(t);
  }
  peek() {
    if (this.bufferPos == this.buffer.length) {
      if (this.bufferStart += this.buffer.length, this.iter.next(), this.iter.done)
        return -1;
      this.bufferPos = 0, this.buffer = this.iter.value;
    }
    return lt(this.buffer, this.bufferPos);
  }
  /**
  Look for the next match. Updates the iterator's
  [`value`](https://codemirror.net/6/docs/ref/#search.SearchCursor.value) and
  [`done`](https://codemirror.net/6/docs/ref/#search.SearchCursor.done) properties. Should be called
  at least once before using the cursor.
  */
  next() {
    for (; this.matches.length; )
      this.matches.pop();
    return this.nextOverlapping();
  }
  /**
  The `next` method will ignore matches that partially overlap a
  previous match. This method behaves like `next`, but includes
  such matches.
  */
  nextOverlapping() {
    for (; ; ) {
      let e = this.peek();
      if (e < 0)
        return this.done = !0, this;
      let t = If(e), i = this.bufferStart + this.bufferPos;
      this.bufferPos += on(e);
      let r = this.normalize(t);
      if (r.length)
        for (let s = 0, o = i; ; s++) {
          let l = r.charCodeAt(s), a = this.match(l, o, this.bufferPos + this.bufferStart);
          if (s == r.length - 1) {
            if (a)
              return this.value = a, this;
            break;
          }
          o == i && s < t.length && t.charCodeAt(s) == l && o++;
        }
    }
  }
  match(e, t, i) {
    let r = null;
    for (let s = 0; s < this.matches.length; s += 2) {
      let o = this.matches[s], l = !1;
      this.query.charCodeAt(o) == e && (o == this.query.length - 1 ? r = { from: this.matches[s + 1], to: i } : (this.matches[s]++, l = !0)), l || (this.matches.splice(s, 2), s -= 2);
    }
    return this.query.charCodeAt(0) == e && (this.query.length == 1 ? r = { from: t, to: i } : this.matches.push(1, t)), r && this.test && !this.test(r.from, r.to, this.buffer, this.bufferStart) && (r = null), r;
  }
}
typeof Symbol < "u" && (nr.prototype[Symbol.iterator] = function() {
  return this;
});
const BS = { from: -1, to: -1, match: /* @__PURE__ */ /.*/.exec("") }, Su = "gm" + (/x/.unicode == null ? "" : "u");
class WS {
  /**
  Create a cursor that will search the given range in the given
  document. `query` should be the raw pattern (as you'd pass it to
  `new RegExp`).
  */
  constructor(e, t, i, r = 0, s = e.length) {
    if (this.text = e, this.to = s, this.curLine = "", this.done = !1, this.value = BS, /\\[sWDnr]|\n|\r|\[\^/.test(t))
      return new zS(e, t, i, r, s);
    this.re = new RegExp(t, Su + (i?.ignoreCase ? "i" : "")), this.test = i?.test, this.iter = e.iter();
    let o = e.lineAt(r);
    this.curLineStart = o.from, this.matchPos = Cl(e, r), this.getLine(this.curLineStart);
  }
  getLine(e) {
    this.iter.next(e), this.iter.lineBreak ? this.curLine = "" : (this.curLine = this.iter.value, this.curLineStart + this.curLine.length > this.to && (this.curLine = this.curLine.slice(0, this.to - this.curLineStart)), this.iter.next());
  }
  nextLine() {
    this.curLineStart = this.curLineStart + this.curLine.length + 1, this.curLineStart > this.to ? this.curLine = "" : this.getLine(0);
  }
  /**
  Move to the next match, if there is one.
  */
  next() {
    for (let e = this.matchPos - this.curLineStart; ; ) {
      this.re.lastIndex = e;
      let t = this.matchPos <= this.to && this.re.exec(this.curLine);
      if (t) {
        let i = this.curLineStart + t.index, r = i + t[0].length;
        if (this.matchPos = Cl(this.text, r + (i == r ? 1 : 0)), i == this.curLineStart + this.curLine.length && this.nextLine(), (i < r || i > this.value.to) && (!this.test || this.test(i, r, t)))
          return this.value = { from: i, to: r, match: t }, this;
        e = this.matchPos - this.curLineStart;
      } else if (this.curLineStart + this.curLine.length < this.to)
        this.nextLine(), e = 0;
      else
        return this.done = !0, this;
    }
  }
}
const rc = /* @__PURE__ */ new WeakMap();
class Ni {
  constructor(e, t) {
    this.from = e, this.text = t;
  }
  get to() {
    return this.from + this.text.length;
  }
  static get(e, t, i) {
    let r = rc.get(e);
    if (!r || r.from >= i || r.to <= t) {
      let l = new Ni(t, e.sliceString(t, i));
      return rc.set(e, l), l;
    }
    if (r.from == t && r.to == i)
      return r;
    let { text: s, from: o } = r;
    return o > t && (s = e.sliceString(t, o) + s, o = t), r.to < i && (s += e.sliceString(r.to, i)), rc.set(e, new Ni(o, s)), new Ni(t, s.slice(t - o, i - o));
  }
}
class zS {
  constructor(e, t, i, r, s) {
    this.text = e, this.to = s, this.done = !1, this.value = BS, this.matchPos = Cl(e, r), this.re = new RegExp(t, Su + (i?.ignoreCase ? "i" : "")), this.test = i?.test, this.flat = Ni.get(e, r, this.chunkEnd(
      r + 5e3
      /* Chunk.Base */
    ));
  }
  chunkEnd(e) {
    return e >= this.to ? this.to : this.text.lineAt(e).to;
  }
  next() {
    for (; ; ) {
      let e = this.re.lastIndex = this.matchPos - this.flat.from, t = this.re.exec(this.flat.text);
      if (t && !t[0] && t.index == e && (this.re.lastIndex = e + 1, t = this.re.exec(this.flat.text)), t) {
        let i = this.flat.from + t.index, r = i + t[0].length;
        if ((this.flat.to >= this.to || t.index + t[0].length <= this.flat.text.length - 10) && (!this.test || this.test(i, r, t)))
          return this.value = { from: i, to: r, match: t }, this.matchPos = Cl(this.text, r + (i == r ? 1 : 0)), this;
      }
      if (this.flat.to == this.to)
        return this.done = !0, this;
      this.flat = Ni.get(this.text, this.flat.from, this.chunkEnd(this.flat.from + this.flat.text.length * 2));
    }
  }
}
typeof Symbol < "u" && (WS.prototype[Symbol.iterator] = zS.prototype[Symbol.iterator] = function() {
  return this;
});
function Z2(n) {
  try {
    return new RegExp(n, Su), !0;
  } catch {
    return !1;
  }
}
function Cl(n, e) {
  if (e >= n.length)
    return e;
  let t = n.lineAt(e), i;
  for (; e < t.to && (i = t.text.charCodeAt(e - t.from)) >= 56320 && i < 57344; )
    e++;
  return e;
}
function Hh(n) {
  let e = String(n.state.doc.lineAt(n.state.selection.main.head).number), t = be("input", { class: "cm-textfield", name: "line", value: e }), i = be("form", {
    class: "cm-gotoLine",
    onkeydown: (s) => {
      s.keyCode == 27 ? (s.preventDefault(), n.dispatch({ effects: Fr.of(!1) }), n.focus()) : s.keyCode == 13 && (s.preventDefault(), r());
    },
    onsubmit: (s) => {
      s.preventDefault(), r();
    }
  }, be("label", n.state.phrase("Go to line"), ": ", t), " ", be("button", { class: "cm-button", type: "submit" }, n.state.phrase("go")), be("button", {
    name: "close",
    onclick: () => {
      n.dispatch({ effects: Fr.of(!1) }), n.focus();
    },
    "aria-label": n.state.phrase("close"),
    type: "button"
  }, ["×"]));
  function r() {
    let s = /^([+-])?(\d+)?(:\d+)?(%)?$/.exec(t.value);
    if (!s)
      return;
    let { state: o } = n, l = o.doc.lineAt(o.selection.main.head), [, a, c, h, f] = s, u = h ? +h.slice(1) : 0, d = c ? +c : l.number;
    if (c && f) {
      let m = d / 100;
      a && (m = m * (a == "-" ? -1 : 1) + l.number / o.doc.lines), d = Math.round(o.doc.lines * m);
    } else c && a && (d = d * (a == "-" ? -1 : 1) + l.number);
    let O = o.doc.line(Math.max(1, Math.min(o.doc.lines, d))), p = $.cursor(O.from + Math.max(0, Math.min(u, O.length)));
    n.dispatch({
      effects: [Fr.of(!1), Z.scrollIntoView(p.from, { y: "center" })],
      selection: p
    }), n.focus();
  }
  return { dom: i };
}
const Fr = /* @__PURE__ */ te.define(), fp = /* @__PURE__ */ Ie.define({
  create() {
    return !0;
  },
  update(n, e) {
    for (let t of e.effects)
      t.is(Fr) && (n = t.value);
    return n;
  },
  provide: (n) => us.from(n, (e) => e ? Hh : null)
}), M2 = (n) => {
  let e = fs(n, Hh);
  if (!e) {
    let t = [Fr.of(!0)];
    n.state.field(fp, !1) == null && t.push(te.appendConfig.of([fp, L2])), n.dispatch({ effects: t }), e = fs(n, Hh);
  }
  return e && e.dom.querySelector("input").select(), !0;
}, L2 = /* @__PURE__ */ Z.baseTheme({
  ".cm-panel.cm-gotoLine": {
    padding: "2px 6px 4px",
    position: "relative",
    "& label": { fontSize: "80%" },
    "& [name=close]": {
      position: "absolute",
      top: "0",
      bottom: "0",
      right: "4px",
      backgroundColor: "inherit",
      border: "none",
      font: "inherit",
      padding: "0"
    }
  }
}), V2 = {
  highlightWordAroundCursor: !1,
  minSelectionLength: 1,
  maxMatches: 100,
  wholeWords: !1
}, B2 = /* @__PURE__ */ B.define({
  combine(n) {
    return gn(n, V2, {
      highlightWordAroundCursor: (e, t) => e || t,
      minSelectionLength: Math.min,
      maxMatches: Math.min
    });
  }
});
function W2(n) {
  return [U2, j2];
}
const z2 = /* @__PURE__ */ F.mark({ class: "cm-selectionMatch" }), D2 = /* @__PURE__ */ F.mark({ class: "cm-selectionMatch cm-selectionMatch-main" });
function up(n, e, t, i) {
  return (t == 0 || n(e.sliceDoc(t - 1, t)) != Te.Word) && (i == e.doc.length || n(e.sliceDoc(i, i + 1)) != Te.Word);
}
function I2(n, e, t, i) {
  return n(e.sliceDoc(t, t + 1)) == Te.Word && n(e.sliceDoc(i - 1, i)) == Te.Word;
}
const j2 = /* @__PURE__ */ Le.fromClass(class {
  constructor(n) {
    this.decorations = this.getDeco(n);
  }
  update(n) {
    (n.selectionSet || n.docChanged || n.viewportChanged) && (this.decorations = this.getDeco(n.view));
  }
  getDeco(n) {
    let e = n.state.facet(B2), { state: t } = n, i = t.selection;
    if (i.ranges.length > 1)
      return F.none;
    let r = i.main, s, o = null;
    if (r.empty) {
      if (!e.highlightWordAroundCursor)
        return F.none;
      let a = t.wordAt(r.head);
      if (!a)
        return F.none;
      o = t.charCategorizer(r.head), s = t.sliceDoc(a.from, a.to);
    } else {
      let a = r.to - r.from;
      if (a < e.minSelectionLength || a > 200)
        return F.none;
      if (e.wholeWords) {
        if (s = t.sliceDoc(r.from, r.to), o = t.charCategorizer(r.head), !(up(o, t, r.from, r.to) && I2(o, t, r.from, r.to)))
          return F.none;
      } else if (s = t.sliceDoc(r.from, r.to), !s)
        return F.none;
    }
    let l = [];
    for (let a of n.visibleRanges) {
      let c = new nr(t.doc, s, a.from, a.to);
      for (; !c.next().done; ) {
        let { from: h, to: f } = c.value;
        if ((!o || up(o, t, h, f)) && (r.empty && h <= r.from && f >= r.to ? l.push(D2.range(h, f)) : (h >= r.to || f <= r.from) && l.push(z2.range(h, f)), l.length > e.maxMatches))
          return F.none;
      }
    }
    return F.set(l);
  }
}, {
  decorations: (n) => n.decorations
}), U2 = /* @__PURE__ */ Z.baseTheme({
  ".cm-selectionMatch": { backgroundColor: "#99ff7780" },
  ".cm-searchMatch .cm-selectionMatch": { backgroundColor: "transparent" }
}), Y2 = ({ state: n, dispatch: e }) => {
  let { selection: t } = n, i = $.create(t.ranges.map((r) => n.wordAt(r.head) || $.cursor(r.head)), t.mainIndex);
  return i.eq(t) ? !1 : (e(n.update({ selection: i })), !0);
};
function N2(n, e) {
  let { main: t, ranges: i } = n.selection, r = n.wordAt(t.head), s = r && r.from == t.from && r.to == t.to;
  for (let o = !1, l = new nr(n.doc, e, i[i.length - 1].to); ; )
    if (l.next(), l.done) {
      if (o)
        return null;
      l = new nr(n.doc, e, 0, Math.max(0, i[i.length - 1].from - 1)), o = !0;
    } else {
      if (o && i.some((a) => a.from == l.value.from))
        continue;
      if (s) {
        let a = n.wordAt(l.value.from);
        if (!a || a.from != l.value.from || a.to != l.value.to)
          continue;
      }
      return l.value;
    }
}
const G2 = ({ state: n, dispatch: e }) => {
  let { ranges: t } = n.selection;
  if (t.some((s) => s.from === s.to))
    return Y2({ state: n, dispatch: e });
  let i = n.sliceDoc(t[0].from, t[0].to);
  if (n.selection.ranges.some((s) => n.sliceDoc(s.from, s.to) != i))
    return !1;
  let r = N2(n, i);
  return r ? (e(n.update({
    selection: n.selection.addRange($.range(r.from, r.to), !1),
    effects: Z.scrollIntoView(r.to)
  })), !0) : !1;
}, mr = /* @__PURE__ */ B.define({
  combine(n) {
    return gn(n, {
      top: !1,
      caseSensitive: !1,
      literal: !1,
      regexp: !1,
      wholeWord: !1,
      createPanel: (e) => new lE(e),
      scrollToMatch: (e) => Z.scrollIntoView(e)
    });
  }
});
class DS {
  /**
  Create a query object.
  */
  constructor(e) {
    this.search = e.search, this.caseSensitive = !!e.caseSensitive, this.literal = !!e.literal, this.regexp = !!e.regexp, this.replace = e.replace || "", this.valid = !!this.search && (!this.regexp || Z2(this.search)), this.unquoted = this.unquote(this.search), this.wholeWord = !!e.wholeWord;
  }
  /**
  @internal
  */
  unquote(e) {
    return this.literal ? e : e.replace(/\\([nrt\\])/g, (t, i) => i == "n" ? `
` : i == "r" ? "\r" : i == "t" ? "	" : "\\");
  }
  /**
  Compare this query to another query.
  */
  eq(e) {
    return this.search == e.search && this.replace == e.replace && this.caseSensitive == e.caseSensitive && this.regexp == e.regexp && this.wholeWord == e.wholeWord;
  }
  /**
  @internal
  */
  create() {
    return this.regexp ? new J2(this) : new H2(this);
  }
  /**
  Get a search cursor for this query, searching through the given
  range in the given state.
  */
  getCursor(e, t = 0, i) {
    let r = e.doc ? e : ue.create({ doc: e });
    return i == null && (i = r.doc.length), this.regexp ? Xi(this, r, t, i) : _i(this, r, t, i);
  }
}
class IS {
  constructor(e) {
    this.spec = e;
  }
}
function _i(n, e, t, i) {
  return new nr(e.doc, n.unquoted, t, i, n.caseSensitive ? void 0 : (r) => r.toLowerCase(), n.wholeWord ? F2(e.doc, e.charCategorizer(e.selection.main.head)) : void 0);
}
function F2(n, e) {
  return (t, i, r, s) => ((s > t || s + r.length < i) && (s = Math.max(0, t - 2), r = n.sliceString(s, Math.min(n.length, i + 2))), (e(Rl(r, t - s)) != Te.Word || e(El(r, t - s)) != Te.Word) && (e(El(r, i - s)) != Te.Word || e(Rl(r, i - s)) != Te.Word));
}
class H2 extends IS {
  constructor(e) {
    super(e);
  }
  nextMatch(e, t, i) {
    let r = _i(this.spec, e, i, e.doc.length).nextOverlapping();
    if (r.done) {
      let s = Math.min(e.doc.length, t + this.spec.unquoted.length);
      r = _i(this.spec, e, 0, s).nextOverlapping();
    }
    return r.done || r.value.from == t && r.value.to == i ? null : r.value;
  }
  // Searching in reverse is, rather than implementing an inverted search
  // cursor, done by scanning chunk after chunk forward.
  prevMatchInRange(e, t, i) {
    for (let r = i; ; ) {
      let s = Math.max(t, r - 1e4 - this.spec.unquoted.length), o = _i(this.spec, e, s, r), l = null;
      for (; !o.nextOverlapping().done; )
        l = o.value;
      if (l)
        return l;
      if (s == t)
        return null;
      r -= 1e4;
    }
  }
  prevMatch(e, t, i) {
    let r = this.prevMatchInRange(e, 0, t);
    return r || (r = this.prevMatchInRange(e, Math.max(0, i - this.spec.unquoted.length), e.doc.length)), r && (r.from != t || r.to != i) ? r : null;
  }
  getReplacement(e) {
    return this.spec.unquote(this.spec.replace);
  }
  matchAll(e, t) {
    let i = _i(this.spec, e, 0, e.doc.length), r = [];
    for (; !i.next().done; ) {
      if (r.length >= t)
        return null;
      r.push(i.value);
    }
    return r;
  }
  highlight(e, t, i, r) {
    let s = _i(this.spec, e, Math.max(0, t - this.spec.unquoted.length), Math.min(i + this.spec.unquoted.length, e.doc.length));
    for (; !s.next().done; )
      r(s.value.from, s.value.to);
  }
}
function Xi(n, e, t, i) {
  return new WS(e.doc, n.search, {
    ignoreCase: !n.caseSensitive,
    test: n.wholeWord ? K2(e.charCategorizer(e.selection.main.head)) : void 0
  }, t, i);
}
function Rl(n, e) {
  return n.slice(Ge(n, e, !1), e);
}
function El(n, e) {
  return n.slice(e, Ge(n, e));
}
function K2(n) {
  return (e, t, i) => !i[0].length || (n(Rl(i.input, i.index)) != Te.Word || n(El(i.input, i.index)) != Te.Word) && (n(El(i.input, i.index + i[0].length)) != Te.Word || n(Rl(i.input, i.index + i[0].length)) != Te.Word);
}
class J2 extends IS {
  nextMatch(e, t, i) {
    let r = Xi(this.spec, e, i, e.doc.length).next();
    return r.done && (r = Xi(this.spec, e, 0, t).next()), r.done ? null : r.value;
  }
  prevMatchInRange(e, t, i) {
    for (let r = 1; ; r++) {
      let s = Math.max(
        t,
        i - r * 1e4
        /* FindPrev.ChunkSize */
      ), o = Xi(this.spec, e, s, i), l = null;
      for (; !o.next().done; )
        l = o.value;
      if (l && (s == t || l.from > s + 10))
        return l;
      if (s == t)
        return null;
    }
  }
  prevMatch(e, t, i) {
    return this.prevMatchInRange(e, 0, t) || this.prevMatchInRange(e, i, e.doc.length);
  }
  getReplacement(e) {
    return this.spec.unquote(this.spec.replace).replace(/\$([$&]|\d+)/g, (t, i) => {
      if (i == "&")
        return e.match[0];
      if (i == "$")
        return "$";
      for (let r = i.length; r > 0; r--) {
        let s = +i.slice(0, r);
        if (s > 0 && s < e.match.length)
          return e.match[s] + i.slice(r);
      }
      return t;
    });
  }
  matchAll(e, t) {
    let i = Xi(this.spec, e, 0, e.doc.length), r = [];
    for (; !i.next().done; ) {
      if (r.length >= t)
        return null;
      r.push(i.value);
    }
    return r;
  }
  highlight(e, t, i, r) {
    let s = Xi(this.spec, e, Math.max(
      0,
      t - 250
      /* RegExp.HighlightMargin */
    ), Math.min(i + 250, e.doc.length));
    for (; !s.next().done; )
      r(s.value.from, s.value.to);
  }
}
const gs = /* @__PURE__ */ te.define(), bu = /* @__PURE__ */ te.define(), Un = /* @__PURE__ */ Ie.define({
  create(n) {
    return new sc(Kh(n).create(), null);
  },
  update(n, e) {
    for (let t of e.effects)
      t.is(gs) ? n = new sc(t.value.create(), n.panel) : t.is(bu) && (n = new sc(n.query, t.value ? Qu : null));
    return n;
  },
  provide: (n) => us.from(n, (e) => e.panel)
});
class sc {
  constructor(e, t) {
    this.query = e, this.panel = t;
  }
}
const eE = /* @__PURE__ */ F.mark({ class: "cm-searchMatch" }), tE = /* @__PURE__ */ F.mark({ class: "cm-searchMatch cm-searchMatch-selected" }), nE = /* @__PURE__ */ Le.fromClass(class {
  constructor(n) {
    this.view = n, this.decorations = this.highlight(n.state.field(Un));
  }
  update(n) {
    let e = n.state.field(Un);
    (e != n.startState.field(Un) || n.docChanged || n.selectionSet || n.viewportChanged) && (this.decorations = this.highlight(e));
  }
  highlight({ query: n, panel: e }) {
    if (!e || !n.spec.valid)
      return F.none;
    let { view: t } = this, i = new Rn();
    for (let r = 0, s = t.visibleRanges, o = s.length; r < o; r++) {
      let { from: l, to: a } = s[r];
      for (; r < o - 1 && a > s[r + 1].from - 2 * 250; )
        a = s[++r].to;
      n.highlight(t.state, l, a, (c, h) => {
        let f = t.state.selection.ranges.some((u) => u.from == c && u.to == h);
        i.add(c, h, f ? tE : eE);
      });
    }
    return i.finish();
  }
}, {
  decorations: (n) => n.decorations
});
function Us(n) {
  return (e) => {
    let t = e.state.field(Un, !1);
    return t && t.query.spec.valid ? n(e, t) : YS(e);
  };
}
const Al = /* @__PURE__ */ Us((n, { query: e }) => {
  let { to: t } = n.state.selection.main, i = e.nextMatch(n.state, t, t);
  if (!i)
    return !1;
  let r = $.single(i.from, i.to), s = n.state.facet(mr);
  return n.dispatch({
    selection: r,
    effects: [xu(n, i), s.scrollToMatch(r.main, n)],
    userEvent: "select.search"
  }), US(n), !0;
}), _l = /* @__PURE__ */ Us((n, { query: e }) => {
  let { state: t } = n, { from: i } = t.selection.main, r = e.prevMatch(t, i, i);
  if (!r)
    return !1;
  let s = $.single(r.from, r.to), o = n.state.facet(mr);
  return n.dispatch({
    selection: s,
    effects: [xu(n, r), o.scrollToMatch(s.main, n)],
    userEvent: "select.search"
  }), US(n), !0;
}), iE = /* @__PURE__ */ Us((n, { query: e }) => {
  let t = e.matchAll(n.state, 1e3);
  return !t || !t.length ? !1 : (n.dispatch({
    selection: $.create(t.map((i) => $.range(i.from, i.to))),
    userEvent: "select.search.matches"
  }), !0);
}), rE = ({ state: n, dispatch: e }) => {
  let t = n.selection;
  if (t.ranges.length > 1 || t.main.empty)
    return !1;
  let { from: i, to: r } = t.main, s = [], o = 0;
  for (let l = new nr(n.doc, n.sliceDoc(i, r)); !l.next().done; ) {
    if (s.length > 1e3)
      return !1;
    l.value.from == i && (o = s.length), s.push($.range(l.value.from, l.value.to));
  }
  return e(n.update({
    selection: $.create(s, o),
    userEvent: "select.search.matches"
  })), !0;
}, dp = /* @__PURE__ */ Us((n, { query: e }) => {
  let { state: t } = n, { from: i, to: r } = t.selection.main;
  if (t.readOnly)
    return !1;
  let s = e.nextMatch(t, i, i);
  if (!s)
    return !1;
  let o = s, l = [], a, c, h = [];
  o.from == i && o.to == r && (c = t.toText(e.getReplacement(o)), l.push({ from: o.from, to: o.to, insert: c }), o = e.nextMatch(t, o.from, o.to), h.push(Z.announce.of(t.phrase("replaced match on line $", t.doc.lineAt(i).number) + ".")));
  let f = n.state.changes(l);
  return o && (a = $.single(o.from, o.to).map(f), h.push(xu(n, o)), h.push(t.facet(mr).scrollToMatch(a.main, n))), n.dispatch({
    changes: f,
    selection: a,
    effects: h,
    userEvent: "input.replace"
  }), !0;
}), sE = /* @__PURE__ */ Us((n, { query: e }) => {
  if (n.state.readOnly)
    return !1;
  let t = e.matchAll(n.state, 1e9).map((r) => {
    let { from: s, to: o } = r;
    return { from: s, to: o, insert: e.getReplacement(r) };
  });
  if (!t.length)
    return !1;
  let i = n.state.phrase("replaced $ matches", t.length) + ".";
  return n.dispatch({
    changes: t,
    effects: Z.announce.of(i),
    userEvent: "input.replace.all"
  }), !0;
});
function Qu(n) {
  return n.state.facet(mr).createPanel(n);
}
function Kh(n, e) {
  var t, i, r, s, o;
  let l = n.selection.main, a = l.empty || l.to > l.from + 100 ? "" : n.sliceDoc(l.from, l.to);
  if (e && !a)
    return e;
  let c = n.facet(mr);
  return new DS({
    search: ((t = e?.literal) !== null && t !== void 0 ? t : c.literal) ? a : a.replace(/\n/g, "\\n"),
    caseSensitive: (i = e?.caseSensitive) !== null && i !== void 0 ? i : c.caseSensitive,
    literal: (r = e?.literal) !== null && r !== void 0 ? r : c.literal,
    regexp: (s = e?.regexp) !== null && s !== void 0 ? s : c.regexp,
    wholeWord: (o = e?.wholeWord) !== null && o !== void 0 ? o : c.wholeWord
  });
}
function jS(n) {
  let e = fs(n, Qu);
  return e && e.dom.querySelector("[main-field]");
}
function US(n) {
  let e = jS(n);
  e && e == n.root.activeElement && e.select();
}
const YS = (n) => {
  let e = n.state.field(Un, !1);
  if (e && e.panel) {
    let t = jS(n);
    if (t && t != n.root.activeElement) {
      let i = Kh(n.state, e.query.spec);
      i.valid && n.dispatch({ effects: gs.of(i) }), t.focus(), t.select();
    }
  } else
    n.dispatch({ effects: [
      bu.of(!0),
      e ? gs.of(Kh(n.state, e.query.spec)) : te.appendConfig.of(cE)
    ] });
  return !0;
}, NS = (n) => {
  let e = n.state.field(Un, !1);
  if (!e || !e.panel)
    return !1;
  let t = fs(n, Qu);
  return t && t.dom.contains(n.root.activeElement) && n.focus(), n.dispatch({ effects: bu.of(!1) }), !0;
}, oE = [
  { key: "Mod-f", run: YS, scope: "editor search-panel" },
  { key: "F3", run: Al, shift: _l, scope: "editor search-panel", preventDefault: !0 },
  { key: "Mod-g", run: Al, shift: _l, scope: "editor search-panel", preventDefault: !0 },
  { key: "Escape", run: NS, scope: "editor search-panel" },
  { key: "Mod-Shift-l", run: rE },
  { key: "Mod-Alt-g", run: M2 },
  { key: "Mod-d", run: G2, preventDefault: !0 }
];
class lE {
  constructor(e) {
    this.view = e;
    let t = this.query = e.state.field(Un).query.spec;
    this.commit = this.commit.bind(this), this.searchField = be("input", {
      value: t.search,
      placeholder: Ot(e, "Find"),
      "aria-label": Ot(e, "Find"),
      class: "cm-textfield",
      name: "search",
      form: "",
      "main-field": "true",
      onchange: this.commit,
      onkeyup: this.commit
    }), this.replaceField = be("input", {
      value: t.replace,
      placeholder: Ot(e, "Replace"),
      "aria-label": Ot(e, "Replace"),
      class: "cm-textfield",
      name: "replace",
      form: "",
      onchange: this.commit,
      onkeyup: this.commit
    }), this.caseField = be("input", {
      type: "checkbox",
      name: "case",
      form: "",
      checked: t.caseSensitive,
      onchange: this.commit
    }), this.reField = be("input", {
      type: "checkbox",
      name: "re",
      form: "",
      checked: t.regexp,
      onchange: this.commit
    }), this.wordField = be("input", {
      type: "checkbox",
      name: "word",
      form: "",
      checked: t.wholeWord,
      onchange: this.commit
    });
    function i(r, s, o) {
      return be("button", { class: "cm-button", name: r, onclick: s, type: "button" }, o);
    }
    this.dom = be("div", { onkeydown: (r) => this.keydown(r), class: "cm-search" }, [
      this.searchField,
      i("next", () => Al(e), [Ot(e, "next")]),
      i("prev", () => _l(e), [Ot(e, "previous")]),
      i("select", () => iE(e), [Ot(e, "all")]),
      be("label", null, [this.caseField, Ot(e, "match case")]),
      be("label", null, [this.reField, Ot(e, "regexp")]),
      be("label", null, [this.wordField, Ot(e, "by word")]),
      ...e.state.readOnly ? [] : [
        be("br"),
        this.replaceField,
        i("replace", () => dp(e), [Ot(e, "replace")]),
        i("replaceAll", () => sE(e), [Ot(e, "replace all")])
      ],
      be("button", {
        name: "close",
        onclick: () => NS(e),
        "aria-label": Ot(e, "close"),
        type: "button"
      }, ["×"])
    ]);
  }
  commit() {
    let e = new DS({
      search: this.searchField.value,
      caseSensitive: this.caseField.checked,
      regexp: this.reField.checked,
      wholeWord: this.wordField.checked,
      replace: this.replaceField.value
    });
    e.eq(this.query) || (this.query = e, this.view.dispatch({ effects: gs.of(e) }));
  }
  keydown(e) {
    mT(this.view, e, "search-panel") ? e.preventDefault() : e.keyCode == 13 && e.target == this.searchField ? (e.preventDefault(), (e.shiftKey ? _l : Al)(this.view)) : e.keyCode == 13 && e.target == this.replaceField && (e.preventDefault(), dp(this.view));
  }
  update(e) {
    for (let t of e.transactions)
      for (let i of t.effects)
        i.is(gs) && !i.value.eq(this.query) && this.setQuery(i.value);
  }
  setQuery(e) {
    this.query = e, this.searchField.value = e.search, this.replaceField.value = e.replace, this.caseField.checked = e.caseSensitive, this.reField.checked = e.regexp, this.wordField.checked = e.wholeWord;
  }
  mount() {
    this.searchField.select();
  }
  get pos() {
    return 80;
  }
  get top() {
    return this.view.state.facet(mr).top;
  }
}
function Ot(n, e) {
  return n.state.phrase(e);
}
const bo = 30, Qo = /[\s\.,:;?!]/;
function xu(n, { from: e, to: t }) {
  let i = n.state.doc.lineAt(e), r = n.state.doc.lineAt(t).to, s = Math.max(i.from, e - bo), o = Math.min(r, t + bo), l = n.state.sliceDoc(s, o);
  if (s != i.from) {
    for (let a = 0; a < bo; a++)
      if (!Qo.test(l[a + 1]) && Qo.test(l[a])) {
        l = l.slice(a);
        break;
      }
  }
  if (o != r) {
    for (let a = l.length - 1; a > l.length - bo; a--)
      if (!Qo.test(l[a - 1]) && Qo.test(l[a])) {
        l = l.slice(0, a);
        break;
      }
  }
  return Z.announce.of(`${n.state.phrase("current match")}. ${l} ${n.state.phrase("on line")} ${i.number}.`);
}
const aE = /* @__PURE__ */ Z.baseTheme({
  ".cm-panel.cm-search": {
    padding: "2px 6px 4px",
    position: "relative",
    "& [name=close]": {
      position: "absolute",
      top: "0",
      right: "4px",
      backgroundColor: "inherit",
      border: "none",
      font: "inherit",
      padding: 0,
      margin: 0
    },
    "& input, & button, & label": {
      margin: ".2em .6em .2em 0"
    },
    "& input[type=checkbox]": {
      marginRight: ".2em"
    },
    "& label": {
      fontSize: "80%",
      whiteSpace: "pre"
    }
  },
  "&light .cm-searchMatch": { backgroundColor: "#ffff0054" },
  "&dark .cm-searchMatch": { backgroundColor: "#00ffff8a" },
  "&light .cm-searchMatch-selected": { backgroundColor: "#ff6a0054" },
  "&dark .cm-searchMatch-selected": { backgroundColor: "#ff00ff8a" }
}), cE = [
  Un,
  /* @__PURE__ */ Xn.low(nE),
  aE
];
class ku {
  /**
  Create a new completion context. (Mostly useful for testing
  completion sources—in the editor, the extension will create
  these for you.)
  */
  constructor(e, t, i, r) {
    this.state = e, this.pos = t, this.explicit = i, this.view = r, this.abortListeners = [], this.abortOnDocChange = !1;
  }
  /**
  Get the extent, content, and (if there is a token) type of the
  token before `this.pos`.
  */
  tokenBefore(e) {
    let t = ge(this.state).resolveInner(this.pos, -1);
    for (; t && e.indexOf(t.name) < 0; )
      t = t.parent;
    return t ? {
      from: t.from,
      to: this.pos,
      text: this.state.sliceDoc(t.from, this.pos),
      type: t.type
    } : null;
  }
  /**
  Get the match of the given expression directly before the
  cursor.
  */
  matchBefore(e) {
    let t = this.state.doc.lineAt(this.pos), i = Math.max(t.from, this.pos - 250), r = t.text.slice(i - t.from, this.pos - t.from), s = r.search(GS(e, !1));
    return s < 0 ? null : { from: i + s, to: this.pos, text: r.slice(s) };
  }
  /**
  Yields true when the query has been aborted. Can be useful in
  asynchronous queries to avoid doing work that will be ignored.
  */
  get aborted() {
    return this.abortListeners == null;
  }
  /**
  Allows you to register abort handlers, which will be called when
  the query is
  [aborted](https://codemirror.net/6/docs/ref/#autocomplete.CompletionContext.aborted).
  
  By default, running queries will not be aborted for regular
  typing or backspacing, on the assumption that they are likely to
  return a result with a
  [`validFor`](https://codemirror.net/6/docs/ref/#autocomplete.CompletionResult.validFor) field that
  allows the result to be used after all. Passing `onDocChange:
  true` will cause this query to be aborted for any document
  change.
  */
  addEventListener(e, t, i) {
    e == "abort" && this.abortListeners && (this.abortListeners.push(t), i && i.onDocChange && (this.abortOnDocChange = !0));
  }
}
function Op(n) {
  let e = Object.keys(n).join(""), t = /\w/.test(e);
  return t && (e = e.replace(/\w/g, "")), `[${t ? "\\w" : ""}${e.replace(/[^\w\s]/g, "\\$&")}]`;
}
function hE(n) {
  let e = /* @__PURE__ */ Object.create(null), t = /* @__PURE__ */ Object.create(null);
  for (let { label: r } of n) {
    e[r[0]] = !0;
    for (let s = 1; s < r.length; s++)
      t[r[s]] = !0;
  }
  let i = Op(e) + Op(t) + "*$";
  return [new RegExp("^" + i), new RegExp(i)];
}
function Oa(n) {
  let e = n.map((r) => typeof r == "string" ? { label: r } : r), [t, i] = e.every((r) => /^\w+$/.test(r.label)) ? [/\w*$/, /\w+$/] : hE(e);
  return (r) => {
    let s = r.matchBefore(i);
    return s || r.explicit ? { from: s ? s.from : r.pos, options: e, validFor: t } : null;
  };
}
function wu(n, e) {
  return (t) => {
    for (let i = ge(t.state).resolveInner(t.pos, -1); i; i = i.parent) {
      if (n.indexOf(i.name) > -1)
        return null;
      if (i.type.isTop)
        break;
    }
    return e(t);
  };
}
class pp {
  constructor(e, t, i, r) {
    this.completion = e, this.source = t, this.match = i, this.score = r;
  }
}
function gi(n) {
  return n.selection.main.from;
}
function GS(n, e) {
  var t;
  let { source: i } = n, r = e && i[0] != "^", s = i[i.length - 1] != "$";
  return !r && !s ? n : new RegExp(`${r ? "^" : ""}(?:${i})${s ? "$" : ""}`, (t = n.flags) !== null && t !== void 0 ? t : n.ignoreCase ? "i" : "");
}
const vu = /* @__PURE__ */ qn.define();
function fE(n, e, t, i) {
  let { main: r } = n.selection, s = t - r.from, o = i - r.from;
  return Object.assign(Object.assign({}, n.changeByRange((l) => {
    if (l != r && t != i && n.sliceDoc(l.from + s, l.from + o) != n.sliceDoc(t, i))
      return { range: l };
    let a = n.toText(e);
    return {
      changes: { from: l.from + s, to: i == r.from ? l.to : l.from + o, insert: a },
      range: $.cursor(l.from + s + a.length)
    };
  })), { scrollIntoView: !0, userEvent: "input.complete" });
}
const mp = /* @__PURE__ */ new WeakMap();
function uE(n) {
  if (!Array.isArray(n))
    return n;
  let e = mp.get(n);
  return e || mp.set(n, e = Oa(n)), e;
}
const Xl = /* @__PURE__ */ te.define(), ys = /* @__PURE__ */ te.define();
class dE {
  constructor(e) {
    this.pattern = e, this.chars = [], this.folded = [], this.any = [], this.precise = [], this.byWord = [], this.score = 0, this.matched = [];
    for (let t = 0; t < e.length; ) {
      let i = lt(e, t), r = on(i);
      this.chars.push(i);
      let s = e.slice(t, t + r), o = s.toUpperCase();
      this.folded.push(lt(o == s ? s.toLowerCase() : o, 0)), t += r;
    }
    this.astral = e.length != this.chars.length;
  }
  ret(e, t) {
    return this.score = e, this.matched = t, this;
  }
  // Matches a given word (completion) against the pattern (input).
  // Will return a boolean indicating whether there was a match and,
  // on success, set `this.score` to the score, `this.matched` to an
  // array of `from, to` pairs indicating the matched parts of `word`.
  //
  // The score is a number that is more negative the worse the match
  // is. See `Penalty` above.
  match(e) {
    if (this.pattern.length == 0)
      return this.ret(-100, []);
    if (e.length < this.pattern.length)
      return null;
    let { chars: t, folded: i, any: r, precise: s, byWord: o } = this;
    if (t.length == 1) {
      let S = lt(e, 0), b = on(S), w = b == e.length ? 0 : -100;
      if (S != t[0]) if (S == i[0])
        w += -200;
      else
        return null;
      return this.ret(w, [0, b]);
    }
    let l = e.indexOf(this.pattern);
    if (l == 0)
      return this.ret(e.length == this.pattern.length ? 0 : -100, [0, this.pattern.length]);
    let a = t.length, c = 0;
    if (l < 0) {
      for (let S = 0, b = Math.min(e.length, 200); S < b && c < a; ) {
        let w = lt(e, S);
        (w == t[c] || w == i[c]) && (r[c++] = S), S += on(w);
      }
      if (c < a)
        return null;
    }
    let h = 0, f = 0, u = !1, d = 0, O = -1, p = -1, m = /[a-z]/.test(e), y = !0;
    for (let S = 0, b = Math.min(e.length, 200), w = 0; S < b && f < a; ) {
      let k = lt(e, S);
      l < 0 && (h < a && k == t[h] && (s[h++] = S), d < a && (k == t[d] || k == i[d] ? (d == 0 && (O = S), p = S + 1, d++) : d = 0));
      let Q, P = k < 255 ? k >= 48 && k <= 57 || k >= 97 && k <= 122 ? 2 : k >= 65 && k <= 90 ? 1 : 0 : (Q = If(k)) != Q.toLowerCase() ? 1 : Q != Q.toUpperCase() ? 2 : 0;
      (!S || P == 1 && m || w == 0 && P != 0) && (t[f] == k || i[f] == k && (u = !0) ? o[f++] = S : o.length && (y = !1)), w = P, S += on(k);
    }
    return f == a && o[0] == 0 && y ? this.result(-100 + (u ? -200 : 0), o, e) : d == a && O == 0 ? this.ret(-200 - e.length + (p == e.length ? 0 : -100), [0, p]) : l > -1 ? this.ret(-700 - e.length, [l, l + this.pattern.length]) : d == a ? this.ret(-900 - e.length, [O, p]) : f == a ? this.result(-100 + (u ? -200 : 0) + -700 + (y ? 0 : -1100), o, e) : t.length == 2 ? null : this.result((r[0] ? -700 : 0) + -200 + -1100, r, e);
  }
  result(e, t, i) {
    let r = [], s = 0;
    for (let o of t) {
      let l = o + (this.astral ? on(lt(i, o)) : 1);
      s && r[s - 1] == o ? r[s - 1] = l : (r[s++] = o, r[s++] = l);
    }
    return this.ret(e - i.length, r);
  }
}
class OE {
  constructor(e) {
    this.pattern = e, this.matched = [], this.score = 0, this.folded = e.toLowerCase();
  }
  match(e) {
    if (e.length < this.pattern.length)
      return null;
    let t = e.slice(0, this.pattern.length), i = t == this.pattern ? 0 : t.toLowerCase() == this.folded ? -200 : null;
    return i == null ? null : (this.matched = [0, t.length], this.score = i + (e.length == this.pattern.length ? 0 : -100), this);
  }
}
const ze = /* @__PURE__ */ B.define({
  combine(n) {
    return gn(n, {
      activateOnTyping: !0,
      activateOnCompletion: () => !1,
      activateOnTypingDelay: 100,
      selectOnOpen: !0,
      override: null,
      closeOnBlur: !0,
      maxRenderedOptions: 100,
      defaultKeymap: !0,
      tooltipClass: () => "",
      optionClass: () => "",
      aboveCursor: !1,
      icons: !0,
      addToOptions: [],
      positionInfo: pE,
      filterStrict: !1,
      compareCompletions: (e, t) => e.label.localeCompare(t.label),
      interactionDelay: 75,
      updateSyncTime: 100
    }, {
      defaultKeymap: (e, t) => e && t,
      closeOnBlur: (e, t) => e && t,
      icons: (e, t) => e && t,
      tooltipClass: (e, t) => (i) => gp(e(i), t(i)),
      optionClass: (e, t) => (i) => gp(e(i), t(i)),
      addToOptions: (e, t) => e.concat(t),
      filterStrict: (e, t) => e || t
    });
  }
});
function gp(n, e) {
  return n ? e ? n + " " + e : n : e;
}
function pE(n, e, t, i, r, s) {
  let o = n.textDirection == ve.RTL, l = o, a = !1, c = "top", h, f, u = e.left - r.left, d = r.right - e.right, O = i.right - i.left, p = i.bottom - i.top;
  if (l && u < Math.min(O, d) ? l = !1 : !l && d < Math.min(O, u) && (l = !0), O <= (l ? u : d))
    h = Math.max(r.top, Math.min(t.top, r.bottom - p)) - e.top, f = Math.min(400, l ? u : d);
  else {
    a = !0, f = Math.min(
      400,
      (o ? e.right : r.right - e.left) - 30
      /* Info.Margin */
    );
    let S = r.bottom - e.bottom;
    S >= p || S > e.top ? h = t.bottom - e.top : (c = "bottom", h = e.bottom - t.top);
  }
  let m = (e.bottom - e.top) / s.offsetHeight, y = (e.right - e.left) / s.offsetWidth;
  return {
    style: `${c}: ${h / m}px; max-width: ${f / y}px`,
    class: "cm-completionInfo-" + (a ? o ? "left-narrow" : "right-narrow" : l ? "left" : "right")
  };
}
function mE(n) {
  let e = n.addToOptions.slice();
  return n.icons && e.push({
    render(t) {
      let i = document.createElement("div");
      return i.classList.add("cm-completionIcon"), t.type && i.classList.add(...t.type.split(/\s+/g).map((r) => "cm-completionIcon-" + r)), i.setAttribute("aria-hidden", "true"), i;
    },
    position: 20
  }), e.push({
    render(t, i, r, s) {
      let o = document.createElement("span");
      o.className = "cm-completionLabel";
      let l = t.displayLabel || t.label, a = 0;
      for (let c = 0; c < s.length; ) {
        let h = s[c++], f = s[c++];
        h > a && o.appendChild(document.createTextNode(l.slice(a, h)));
        let u = o.appendChild(document.createElement("span"));
        u.appendChild(document.createTextNode(l.slice(h, f))), u.className = "cm-completionMatchedText", a = f;
      }
      return a < l.length && o.appendChild(document.createTextNode(l.slice(a))), o;
    },
    position: 50
  }, {
    render(t) {
      if (!t.detail)
        return null;
      let i = document.createElement("span");
      return i.className = "cm-completionDetail", i.textContent = t.detail, i;
    },
    position: 80
  }), e.sort((t, i) => t.position - i.position).map((t) => t.render);
}
function oc(n, e, t) {
  if (n <= t)
    return { from: 0, to: n };
  if (e < 0 && (e = 0), e <= n >> 1) {
    let r = Math.floor(e / t);
    return { from: r * t, to: (r + 1) * t };
  }
  let i = Math.floor((n - e) / t);
  return { from: n - (i + 1) * t, to: n - i * t };
}
class gE {
  constructor(e, t, i) {
    this.view = e, this.stateField = t, this.applyCompletion = i, this.info = null, this.infoDestroy = null, this.placeInfoReq = {
      read: () => this.measureInfo(),
      write: (a) => this.placeInfo(a),
      key: this
    }, this.space = null, this.currentClass = "";
    let r = e.state.field(t), { options: s, selected: o } = r.open, l = e.state.facet(ze);
    this.optionContent = mE(l), this.optionClass = l.optionClass, this.tooltipClass = l.tooltipClass, this.range = oc(s.length, o, l.maxRenderedOptions), this.dom = document.createElement("div"), this.dom.className = "cm-tooltip-autocomplete", this.updateTooltipClass(e.state), this.dom.addEventListener("mousedown", (a) => {
      let { options: c } = e.state.field(t).open;
      for (let h = a.target, f; h && h != this.dom; h = h.parentNode)
        if (h.nodeName == "LI" && (f = /-(\d+)$/.exec(h.id)) && +f[1] < c.length) {
          this.applyCompletion(e, c[+f[1]]), a.preventDefault();
          return;
        }
    }), this.dom.addEventListener("focusout", (a) => {
      let c = e.state.field(this.stateField, !1);
      c && c.tooltip && e.state.facet(ze).closeOnBlur && a.relatedTarget != e.contentDOM && e.dispatch({ effects: ys.of(null) });
    }), this.showOptions(s, r.id);
  }
  mount() {
    this.updateSel();
  }
  showOptions(e, t) {
    this.list && this.list.remove(), this.list = this.dom.appendChild(this.createListBox(e, t, this.range)), this.list.addEventListener("scroll", () => {
      this.info && this.view.requestMeasure(this.placeInfoReq);
    });
  }
  update(e) {
    var t;
    let i = e.state.field(this.stateField), r = e.startState.field(this.stateField);
    if (this.updateTooltipClass(e.state), i != r) {
      let { options: s, selected: o, disabled: l } = i.open;
      (!r.open || r.open.options != s) && (this.range = oc(s.length, o, e.state.facet(ze).maxRenderedOptions), this.showOptions(s, i.id)), this.updateSel(), l != ((t = r.open) === null || t === void 0 ? void 0 : t.disabled) && this.dom.classList.toggle("cm-tooltip-autocomplete-disabled", !!l);
    }
  }
  updateTooltipClass(e) {
    let t = this.tooltipClass(e);
    if (t != this.currentClass) {
      for (let i of this.currentClass.split(" "))
        i && this.dom.classList.remove(i);
      for (let i of t.split(" "))
        i && this.dom.classList.add(i);
      this.currentClass = t;
    }
  }
  positioned(e) {
    this.space = e, this.info && this.view.requestMeasure(this.placeInfoReq);
  }
  updateSel() {
    let e = this.view.state.field(this.stateField), t = e.open;
    if ((t.selected > -1 && t.selected < this.range.from || t.selected >= this.range.to) && (this.range = oc(t.options.length, t.selected, this.view.state.facet(ze).maxRenderedOptions), this.showOptions(t.options, e.id)), this.updateSelectedOption(t.selected)) {
      this.destroyInfo();
      let { completion: i } = t.options[t.selected], { info: r } = i;
      if (!r)
        return;
      let s = typeof r == "string" ? document.createTextNode(r) : r(i);
      if (!s)
        return;
      "then" in s ? s.then((o) => {
        o && this.view.state.field(this.stateField, !1) == e && this.addInfoPane(o, i);
      }).catch((o) => ht(this.view.state, o, "completion info")) : this.addInfoPane(s, i);
    }
  }
  addInfoPane(e, t) {
    this.destroyInfo();
    let i = this.info = document.createElement("div");
    if (i.className = "cm-tooltip cm-completionInfo", e.nodeType != null)
      i.appendChild(e), this.infoDestroy = null;
    else {
      let { dom: r, destroy: s } = e;
      i.appendChild(r), this.infoDestroy = s || null;
    }
    this.dom.appendChild(i), this.view.requestMeasure(this.placeInfoReq);
  }
  updateSelectedOption(e) {
    let t = null;
    for (let i = this.list.firstChild, r = this.range.from; i; i = i.nextSibling, r++)
      i.nodeName != "LI" || !i.id ? r-- : r == e ? i.hasAttribute("aria-selected") || (i.setAttribute("aria-selected", "true"), t = i) : i.hasAttribute("aria-selected") && i.removeAttribute("aria-selected");
    return t && SE(this.list, t), t;
  }
  measureInfo() {
    let e = this.dom.querySelector("[aria-selected]");
    if (!e || !this.info)
      return null;
    let t = this.dom.getBoundingClientRect(), i = this.info.getBoundingClientRect(), r = e.getBoundingClientRect(), s = this.space;
    if (!s) {
      let o = this.dom.ownerDocument.documentElement;
      s = { left: 0, top: 0, right: o.clientWidth, bottom: o.clientHeight };
    }
    return r.top > Math.min(s.bottom, t.bottom) - 10 || r.bottom < Math.max(s.top, t.top) + 10 ? null : this.view.state.facet(ze).positionInfo(this.view, t, r, i, s, this.dom);
  }
  placeInfo(e) {
    this.info && (e ? (e.style && (this.info.style.cssText = e.style), this.info.className = "cm-tooltip cm-completionInfo " + (e.class || "")) : this.info.style.cssText = "top: -1e6px");
  }
  createListBox(e, t, i) {
    const r = document.createElement("ul");
    r.id = t, r.setAttribute("role", "listbox"), r.setAttribute("aria-expanded", "true"), r.setAttribute("aria-label", this.view.state.phrase("Completions")), r.addEventListener("mousedown", (o) => {
      o.target == r && o.preventDefault();
    });
    let s = null;
    for (let o = i.from; o < i.to; o++) {
      let { completion: l, match: a } = e[o], { section: c } = l;
      if (c) {
        let u = typeof c == "string" ? c : c.name;
        if (u != s && (o > i.from || i.from == 0))
          if (s = u, typeof c != "string" && c.header)
            r.appendChild(c.header(c));
          else {
            let d = r.appendChild(document.createElement("completion-section"));
            d.textContent = u;
          }
      }
      const h = r.appendChild(document.createElement("li"));
      h.id = t + "-" + o, h.setAttribute("role", "option");
      let f = this.optionClass(l);
      f && (h.className = f);
      for (let u of this.optionContent) {
        let d = u(l, this.view.state, this.view, a);
        d && h.appendChild(d);
      }
    }
    return i.from && r.classList.add("cm-completionListIncompleteTop"), i.to < e.length && r.classList.add("cm-completionListIncompleteBottom"), r;
  }
  destroyInfo() {
    this.info && (this.infoDestroy && this.infoDestroy(), this.info.remove(), this.info = null);
  }
  destroy() {
    this.destroyInfo();
  }
}
function yE(n, e) {
  return (t) => new gE(t, n, e);
}
function SE(n, e) {
  let t = n.getBoundingClientRect(), i = e.getBoundingClientRect(), r = t.height / n.offsetHeight;
  i.top < t.top ? n.scrollTop -= (t.top - i.top) / r : i.bottom > t.bottom && (n.scrollTop += (i.bottom - t.bottom) / r);
}
function yp(n) {
  return (n.boost || 0) * 100 + (n.apply ? 10 : 0) + (n.info ? 5 : 0) + (n.type ? 1 : 0);
}
function bE(n, e) {
  let t = [], i = null, r = (c) => {
    t.push(c);
    let { section: h } = c.completion;
    if (h) {
      i || (i = []);
      let f = typeof h == "string" ? h : h.name;
      i.some((u) => u.name == f) || i.push(typeof h == "string" ? { name: f } : h);
    }
  }, s = e.facet(ze);
  for (let c of n)
    if (c.hasResult()) {
      let h = c.result.getMatch;
      if (c.result.filter === !1)
        for (let f of c.result.options)
          r(new pp(f, c.source, h ? h(f) : [], 1e9 - t.length));
      else {
        let f = e.sliceDoc(c.from, c.to), u, d = s.filterStrict ? new OE(f) : new dE(f);
        for (let O of c.result.options)
          if (u = d.match(O.label)) {
            let p = O.displayLabel ? h ? h(O, u.matched) : [] : u.matched;
            r(new pp(O, c.source, p, u.score + (O.boost || 0)));
          }
      }
    }
  if (i) {
    let c = /* @__PURE__ */ Object.create(null), h = 0, f = (u, d) => {
      var O, p;
      return ((O = u.rank) !== null && O !== void 0 ? O : 1e9) - ((p = d.rank) !== null && p !== void 0 ? p : 1e9) || (u.name < d.name ? -1 : 1);
    };
    for (let u of i.sort(f))
      h -= 1e5, c[u.name] = h;
    for (let u of t) {
      let { section: d } = u.completion;
      d && (u.score += c[typeof d == "string" ? d : d.name]);
    }
  }
  let o = [], l = null, a = s.compareCompletions;
  for (let c of t.sort((h, f) => f.score - h.score || a(h.completion, f.completion))) {
    let h = c.completion;
    !l || l.label != h.label || l.detail != h.detail || l.type != null && h.type != null && l.type != h.type || l.apply != h.apply || l.boost != h.boost ? o.push(c) : yp(c.completion) > yp(l) && (o[o.length - 1] = c), l = c.completion;
  }
  return o;
}
class Bi {
  constructor(e, t, i, r, s, o) {
    this.options = e, this.attrs = t, this.tooltip = i, this.timestamp = r, this.selected = s, this.disabled = o;
  }
  setSelected(e, t) {
    return e == this.selected || e >= this.options.length ? this : new Bi(this.options, Sp(t, e), this.tooltip, this.timestamp, e, this.disabled);
  }
  static build(e, t, i, r, s, o) {
    if (r && !o && e.some((c) => c.isPending))
      return r.setDisabled();
    let l = bE(e, t);
    if (!l.length)
      return r && e.some((c) => c.isPending) ? r.setDisabled() : null;
    let a = t.facet(ze).selectOnOpen ? 0 : -1;
    if (r && r.selected != a && r.selected != -1) {
      let c = r.options[r.selected].completion;
      for (let h = 0; h < l.length; h++)
        if (l[h].completion == c) {
          a = h;
          break;
        }
    }
    return new Bi(l, Sp(i, a), {
      pos: e.reduce((c, h) => h.hasResult() ? Math.min(c, h.from) : c, 1e8),
      create: PE,
      above: s.aboveCursor
    }, r ? r.timestamp : Date.now(), a, !1);
  }
  map(e) {
    return new Bi(this.options, this.attrs, Object.assign(Object.assign({}, this.tooltip), { pos: e.mapPos(this.tooltip.pos) }), this.timestamp, this.selected, this.disabled);
  }
  setDisabled() {
    return new Bi(this.options, this.attrs, this.tooltip, this.timestamp, this.selected, !0);
  }
}
class ql {
  constructor(e, t, i) {
    this.active = e, this.id = t, this.open = i;
  }
  static start() {
    return new ql(wE, "cm-ac-" + Math.floor(Math.random() * 2e6).toString(36), null);
  }
  update(e) {
    let { state: t } = e, i = t.facet(ze), s = (i.override || t.languageDataAt("autocomplete", gi(t)).map(uE)).map((a) => (this.active.find((h) => h.source == a) || new $t(
      a,
      this.active.some(
        (h) => h.state != 0
        /* State.Inactive */
      ) ? 1 : 0
      /* State.Inactive */
    )).update(e, i));
    s.length == this.active.length && s.every((a, c) => a == this.active[c]) && (s = this.active);
    let o = this.open, l = e.effects.some((a) => a.is(Pu));
    o && e.docChanged && (o = o.map(e.changes)), e.selection || s.some((a) => a.hasResult() && e.changes.touchesRange(a.from, a.to)) || !QE(s, this.active) || l ? o = Bi.build(s, t, this.id, o, i, l) : o && o.disabled && !s.some((a) => a.isPending) && (o = null), !o && s.every((a) => !a.isPending) && s.some((a) => a.hasResult()) && (s = s.map((a) => a.hasResult() ? new $t(
      a.source,
      0
      /* State.Inactive */
    ) : a));
    for (let a of e.effects)
      a.is(HS) && (o = o && o.setSelected(a.value, this.id));
    return s == this.active && o == this.open ? this : new ql(s, this.id, o);
  }
  get tooltip() {
    return this.open ? this.open.tooltip : null;
  }
  get attrs() {
    return this.open ? this.open.attrs : this.active.length ? xE : kE;
  }
}
function QE(n, e) {
  if (n == e)
    return !0;
  for (let t = 0, i = 0; ; ) {
    for (; t < n.length && !n[t].hasResult(); )
      t++;
    for (; i < e.length && !e[i].hasResult(); )
      i++;
    let r = t == n.length, s = i == e.length;
    if (r || s)
      return r == s;
    if (n[t++].result != e[i++].result)
      return !1;
  }
}
const xE = {
  "aria-autocomplete": "list"
}, kE = {};
function Sp(n, e) {
  let t = {
    "aria-autocomplete": "list",
    "aria-haspopup": "listbox",
    "aria-controls": n
  };
  return e > -1 && (t["aria-activedescendant"] = n + "-" + e), t;
}
const wE = [];
function FS(n, e) {
  if (n.isUserEvent("input.complete")) {
    let i = n.annotation(vu);
    if (i && e.activateOnCompletion(i))
      return 12;
  }
  let t = n.isUserEvent("input.type");
  return t && e.activateOnTyping ? 5 : t ? 1 : n.isUserEvent("delete.backward") ? 2 : n.selection ? 8 : n.docChanged ? 16 : 0;
}
class $t {
  constructor(e, t, i = !1) {
    this.source = e, this.state = t, this.explicit = i;
  }
  hasResult() {
    return !1;
  }
  get isPending() {
    return this.state == 1;
  }
  update(e, t) {
    let i = FS(e, t), r = this;
    (i & 8 || i & 16 && this.touches(e)) && (r = new $t(
      r.source,
      0
      /* State.Inactive */
    )), i & 4 && r.state == 0 && (r = new $t(
      this.source,
      1
      /* State.Pending */
    )), r = r.updateFor(e, i);
    for (let s of e.effects)
      if (s.is(Xl))
        r = new $t(r.source, 1, s.value);
      else if (s.is(ys))
        r = new $t(
          r.source,
          0
          /* State.Inactive */
        );
      else if (s.is(Pu))
        for (let o of s.value)
          o.source == r.source && (r = o);
    return r;
  }
  updateFor(e, t) {
    return this.map(e.changes);
  }
  map(e) {
    return this;
  }
  touches(e) {
    return e.changes.touchesRange(gi(e.state));
  }
}
class Gi extends $t {
  constructor(e, t, i, r, s, o) {
    super(e, 3, t), this.limit = i, this.result = r, this.from = s, this.to = o;
  }
  hasResult() {
    return !0;
  }
  updateFor(e, t) {
    var i;
    if (!(t & 3))
      return this.map(e.changes);
    let r = this.result;
    r.map && !e.changes.empty && (r = r.map(r, e.changes));
    let s = e.changes.mapPos(this.from), o = e.changes.mapPos(this.to, 1), l = gi(e.state);
    if (l > o || !r || t & 2 && (gi(e.startState) == this.from || l < this.limit))
      return new $t(
        this.source,
        t & 4 ? 1 : 0
        /* State.Inactive */
      );
    let a = e.changes.mapPos(this.limit);
    return vE(r.validFor, e.state, s, o) ? new Gi(this.source, this.explicit, a, r, s, o) : r.update && (r = r.update(r, s, o, new ku(e.state, l, !1))) ? new Gi(this.source, this.explicit, a, r, r.from, (i = r.to) !== null && i !== void 0 ? i : gi(e.state)) : new $t(this.source, 1, this.explicit);
  }
  map(e) {
    return e.empty ? this : (this.result.map ? this.result.map(this.result, e) : this.result) ? new Gi(this.source, this.explicit, e.mapPos(this.limit), this.result, e.mapPos(this.from), e.mapPos(this.to, 1)) : new $t(
      this.source,
      0
      /* State.Inactive */
    );
  }
  touches(e) {
    return e.changes.touchesRange(this.from, this.to);
  }
}
function vE(n, e, t, i) {
  if (!n)
    return !1;
  let r = e.sliceDoc(t, i);
  return typeof n == "function" ? n(r, t, i, e) : GS(n, !0).test(r);
}
const Pu = /* @__PURE__ */ te.define({
  map(n, e) {
    return n.map((t) => t.map(e));
  }
}), HS = /* @__PURE__ */ te.define(), ct = /* @__PURE__ */ Ie.define({
  create() {
    return ql.start();
  },
  update(n, e) {
    return n.update(e);
  },
  provide: (n) => [
    su.from(n, (e) => e.tooltip),
    Z.contentAttributes.from(n, (e) => e.attrs)
  ]
});
function $u(n, e) {
  const t = e.completion.apply || e.completion.label;
  let i = n.state.field(ct).active.find((r) => r.source == e.source);
  return i instanceof Gi ? (typeof t == "string" ? n.dispatch(Object.assign(Object.assign({}, fE(n.state, t, i.from, i.to)), { annotations: vu.of(e.completion) })) : t(n, e.completion, i.from, i.to), !0) : !1;
}
const PE = /* @__PURE__ */ yE(ct, $u);
function xo(n, e = "option") {
  return (t) => {
    let i = t.state.field(ct, !1);
    if (!i || !i.open || i.open.disabled || Date.now() - i.open.timestamp < t.state.facet(ze).interactionDelay)
      return !1;
    let r = 1, s;
    e == "page" && (s = My(t, i.open.tooltip)) && (r = Math.max(2, Math.floor(s.dom.offsetHeight / s.dom.querySelector("li").offsetHeight) - 1));
    let { length: o } = i.open.options, l = i.open.selected > -1 ? i.open.selected + r * (n ? 1 : -1) : n ? 0 : o - 1;
    return l < 0 ? l = e == "page" ? 0 : o - 1 : l >= o && (l = e == "page" ? o - 1 : 0), t.dispatch({ effects: HS.of(l) }), !0;
  };
}
const $E = (n) => {
  let e = n.state.field(ct, !1);
  return n.state.readOnly || !e || !e.open || e.open.selected < 0 || e.open.disabled || Date.now() - e.open.timestamp < n.state.facet(ze).interactionDelay ? !1 : $u(n, e.open.options[e.open.selected]);
}, bp = (n) => n.state.field(ct, !1) ? (n.dispatch({ effects: Xl.of(!0) }), !0) : !1, TE = (n) => {
  let e = n.state.field(ct, !1);
  return !e || !e.active.some(
    (t) => t.state != 0
    /* State.Inactive */
  ) ? !1 : (n.dispatch({ effects: ys.of(null) }), !0);
};
class CE {
  constructor(e, t) {
    this.active = e, this.context = t, this.time = Date.now(), this.updates = [], this.done = void 0;
  }
}
const RE = 50, EE = 1e3, AE = /* @__PURE__ */ Le.fromClass(class {
  constructor(n) {
    this.view = n, this.debounceUpdate = -1, this.running = [], this.debounceAccept = -1, this.pendingStart = !1, this.composing = 0;
    for (let e of n.state.field(ct).active)
      e.isPending && this.startQuery(e);
  }
  update(n) {
    let e = n.state.field(ct), t = n.state.facet(ze);
    if (!n.selectionSet && !n.docChanged && n.startState.field(ct) == e)
      return;
    let i = n.transactions.some((s) => {
      let o = FS(s, t);
      return o & 8 || (s.selection || s.docChanged) && !(o & 3);
    });
    for (let s = 0; s < this.running.length; s++) {
      let o = this.running[s];
      if (i || o.context.abortOnDocChange && n.docChanged || o.updates.length + n.transactions.length > RE && Date.now() - o.time > EE) {
        for (let l of o.context.abortListeners)
          try {
            l();
          } catch (a) {
            ht(this.view.state, a);
          }
        o.context.abortListeners = null, this.running.splice(s--, 1);
      } else
        o.updates.push(...n.transactions);
    }
    this.debounceUpdate > -1 && clearTimeout(this.debounceUpdate), n.transactions.some((s) => s.effects.some((o) => o.is(Xl))) && (this.pendingStart = !0);
    let r = this.pendingStart ? 50 : t.activateOnTypingDelay;
    if (this.debounceUpdate = e.active.some((s) => s.isPending && !this.running.some((o) => o.active.source == s.source)) ? setTimeout(() => this.startUpdate(), r) : -1, this.composing != 0)
      for (let s of n.transactions)
        s.isUserEvent("input.type") ? this.composing = 2 : this.composing == 2 && s.selection && (this.composing = 3);
  }
  startUpdate() {
    this.debounceUpdate = -1, this.pendingStart = !1;
    let { state: n } = this.view, e = n.field(ct);
    for (let t of e.active)
      t.isPending && !this.running.some((i) => i.active.source == t.source) && this.startQuery(t);
    this.running.length && e.open && e.open.disabled && (this.debounceAccept = setTimeout(() => this.accept(), this.view.state.facet(ze).updateSyncTime));
  }
  startQuery(n) {
    let { state: e } = this.view, t = gi(e), i = new ku(e, t, n.explicit, this.view), r = new CE(n, i);
    this.running.push(r), Promise.resolve(n.source(i)).then((s) => {
      r.context.aborted || (r.done = s || null, this.scheduleAccept());
    }, (s) => {
      this.view.dispatch({ effects: ys.of(null) }), ht(this.view.state, s);
    });
  }
  scheduleAccept() {
    this.running.every((n) => n.done !== void 0) ? this.accept() : this.debounceAccept < 0 && (this.debounceAccept = setTimeout(() => this.accept(), this.view.state.facet(ze).updateSyncTime));
  }
  // For each finished query in this.running, try to create a result
  // or, if appropriate, restart the query.
  accept() {
    var n;
    this.debounceAccept > -1 && clearTimeout(this.debounceAccept), this.debounceAccept = -1;
    let e = [], t = this.view.state.facet(ze), i = this.view.state.field(ct);
    for (let r = 0; r < this.running.length; r++) {
      let s = this.running[r];
      if (s.done === void 0)
        continue;
      if (this.running.splice(r--, 1), s.done) {
        let l = gi(s.updates.length ? s.updates[0].startState : this.view.state), a = Math.min(l, s.done.from + (s.active.explicit ? 0 : 1)), c = new Gi(s.active.source, s.active.explicit, a, s.done, s.done.from, (n = s.done.to) !== null && n !== void 0 ? n : l);
        for (let h of s.updates)
          c = c.update(h, t);
        if (c.hasResult()) {
          e.push(c);
          continue;
        }
      }
      let o = i.active.find((l) => l.source == s.active.source);
      if (o && o.isPending)
        if (s.done == null) {
          let l = new $t(
            s.active.source,
            0
            /* State.Inactive */
          );
          for (let a of s.updates)
            l = l.update(a, t);
          l.isPending || e.push(l);
        } else
          this.startQuery(o);
    }
    (e.length || i.open && i.open.disabled) && this.view.dispatch({ effects: Pu.of(e) });
  }
}, {
  eventHandlers: {
    blur(n) {
      let e = this.view.state.field(ct, !1);
      if (e && e.tooltip && this.view.state.facet(ze).closeOnBlur) {
        let t = e.open && My(this.view, e.open.tooltip);
        (!t || !t.dom.contains(n.relatedTarget)) && setTimeout(() => this.view.dispatch({ effects: ys.of(null) }), 10);
      }
    },
    compositionstart() {
      this.composing = 1;
    },
    compositionend() {
      this.composing == 3 && setTimeout(() => this.view.dispatch({ effects: Xl.of(!1) }), 20), this.composing = 0;
    }
  }
}), _E = typeof navigator == "object" && /* @__PURE__ */ /Win/.test(navigator.platform), XE = /* @__PURE__ */ Xn.highest(/* @__PURE__ */ Z.domEventHandlers({
  keydown(n, e) {
    let t = e.state.field(ct, !1);
    if (!t || !t.open || t.open.disabled || t.open.selected < 0 || n.key.length > 1 || n.ctrlKey && !(_E && n.altKey) || n.metaKey)
      return !1;
    let i = t.open.options[t.open.selected], r = t.active.find((o) => o.source == i.source), s = i.completion.commitCharacters || r.result.commitCharacters;
    return s && s.indexOf(n.key) > -1 && $u(e, i), !1;
  }
})), KS = /* @__PURE__ */ Z.baseTheme({
  ".cm-tooltip.cm-tooltip-autocomplete": {
    "& > ul": {
      fontFamily: "monospace",
      whiteSpace: "nowrap",
      overflow: "hidden auto",
      maxWidth_fallback: "700px",
      maxWidth: "min(700px, 95vw)",
      minWidth: "250px",
      maxHeight: "10em",
      height: "100%",
      listStyle: "none",
      margin: 0,
      padding: 0,
      "& > li, & > completion-section": {
        padding: "1px 3px",
        lineHeight: 1.2
      },
      "& > li": {
        overflowX: "hidden",
        textOverflow: "ellipsis",
        cursor: "pointer"
      },
      "& > completion-section": {
        display: "list-item",
        borderBottom: "1px solid silver",
        paddingLeft: "0.5em",
        opacity: 0.7
      }
    }
  },
  "&light .cm-tooltip-autocomplete ul li[aria-selected]": {
    background: "#17c",
    color: "white"
  },
  "&light .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
    background: "#777"
  },
  "&dark .cm-tooltip-autocomplete ul li[aria-selected]": {
    background: "#347",
    color: "white"
  },
  "&dark .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
    background: "#444"
  },
  ".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after": {
    content: '"···"',
    opacity: 0.5,
    display: "block",
    textAlign: "center"
  },
  ".cm-tooltip.cm-completionInfo": {
    position: "absolute",
    padding: "3px 9px",
    width: "max-content",
    maxWidth: "400px",
    boxSizing: "border-box",
    whiteSpace: "pre-line"
  },
  ".cm-completionInfo.cm-completionInfo-left": { right: "100%" },
  ".cm-completionInfo.cm-completionInfo-right": { left: "100%" },
  ".cm-completionInfo.cm-completionInfo-left-narrow": { right: "30px" },
  ".cm-completionInfo.cm-completionInfo-right-narrow": { left: "30px" },
  "&light .cm-snippetField": { backgroundColor: "#00000022" },
  "&dark .cm-snippetField": { backgroundColor: "#ffffff22" },
  ".cm-snippetFieldPosition": {
    verticalAlign: "text-top",
    width: 0,
    height: "1.15em",
    display: "inline-block",
    margin: "0 -0.7px -.7em",
    borderLeft: "1.4px dotted #888"
  },
  ".cm-completionMatchedText": {
    textDecoration: "underline"
  },
  ".cm-completionDetail": {
    marginLeft: "0.5em",
    fontStyle: "italic"
  },
  ".cm-completionIcon": {
    fontSize: "90%",
    width: ".8em",
    display: "inline-block",
    textAlign: "center",
    paddingRight: ".6em",
    opacity: "0.6",
    boxSizing: "content-box"
  },
  ".cm-completionIcon-function, .cm-completionIcon-method": {
    "&:after": { content: "'ƒ'" }
  },
  ".cm-completionIcon-class": {
    "&:after": { content: "'○'" }
  },
  ".cm-completionIcon-interface": {
    "&:after": { content: "'◌'" }
  },
  ".cm-completionIcon-variable": {
    "&:after": { content: "'𝑥'" }
  },
  ".cm-completionIcon-constant": {
    "&:after": { content: "'𝐶'" }
  },
  ".cm-completionIcon-type": {
    "&:after": { content: "'𝑡'" }
  },
  ".cm-completionIcon-enum": {
    "&:after": { content: "'∪'" }
  },
  ".cm-completionIcon-property": {
    "&:after": { content: "'□'" }
  },
  ".cm-completionIcon-keyword": {
    "&:after": { content: "'🔑︎'" }
    // Disable emoji rendering
  },
  ".cm-completionIcon-namespace": {
    "&:after": { content: "'▢'" }
  },
  ".cm-completionIcon-text": {
    "&:after": { content: "'abc'", fontSize: "50%", verticalAlign: "middle" }
  }
});
class qE {
  constructor(e, t, i, r) {
    this.field = e, this.line = t, this.from = i, this.to = r;
  }
}
class Tu {
  constructor(e, t, i) {
    this.field = e, this.from = t, this.to = i;
  }
  map(e) {
    let t = e.mapPos(this.from, -1, Ne.TrackDel), i = e.mapPos(this.to, 1, Ne.TrackDel);
    return t == null || i == null ? null : new Tu(this.field, t, i);
  }
}
class Cu {
  constructor(e, t) {
    this.lines = e, this.fieldPositions = t;
  }
  instantiate(e, t) {
    let i = [], r = [t], s = e.doc.lineAt(t), o = /^\s*/.exec(s.text)[0];
    for (let a of this.lines) {
      if (i.length) {
        let c = o, h = /^\t*/.exec(a)[0].length;
        for (let f = 0; f < h; f++)
          c += e.facet(zs);
        r.push(t + c.length - h), a = c + a.slice(h);
      }
      i.push(a), t += a.length + 1;
    }
    let l = this.fieldPositions.map((a) => new Tu(a.field, r[a.line] + a.from, r[a.line] + a.to));
    return { text: i, ranges: l };
  }
  static parse(e) {
    let t = [], i = [], r = [], s;
    for (let o of e.split(/\r\n?|\n/)) {
      for (; s = /[#$]\{(?:(\d+)(?::([^}]*))?|((?:\\[{}]|[^}])*))\}/.exec(o); ) {
        let l = s[1] ? +s[1] : null, a = s[2] || s[3] || "", c = -1, h = a.replace(/\\[{}]/g, (f) => f[1]);
        for (let f = 0; f < t.length; f++)
          (l != null ? t[f].seq == l : h && t[f].name == h) && (c = f);
        if (c < 0) {
          let f = 0;
          for (; f < t.length && (l == null || t[f].seq != null && t[f].seq < l); )
            f++;
          t.splice(f, 0, { seq: l, name: h }), c = f;
          for (let u of r)
            u.field >= c && u.field++;
        }
        r.push(new qE(c, i.length, s.index, s.index + h.length)), o = o.slice(0, s.index) + a + o.slice(s.index + s[0].length);
      }
      o = o.replace(/\\([{}])/g, (l, a, c) => {
        for (let h of r)
          h.line == i.length && h.from > c && (h.from--, h.to--);
        return a;
      }), i.push(o);
    }
    return new Cu(i, r);
  }
}
let ZE = /* @__PURE__ */ F.widget({ widget: /* @__PURE__ */ new class extends Zn {
  toDOM() {
    let n = document.createElement("span");
    return n.className = "cm-snippetFieldPosition", n;
  }
  ignoreEvent() {
    return !1;
  }
}() }), ME = /* @__PURE__ */ F.mark({ class: "cm-snippetField" });
class gr {
  constructor(e, t) {
    this.ranges = e, this.active = t, this.deco = F.set(e.map((i) => (i.from == i.to ? ZE : ME).range(i.from, i.to)));
  }
  map(e) {
    let t = [];
    for (let i of this.ranges) {
      let r = i.map(e);
      if (!r)
        return null;
      t.push(r);
    }
    return new gr(t, this.active);
  }
  selectionInsideField(e) {
    return e.ranges.every((t) => this.ranges.some((i) => i.field == this.active && i.from <= t.from && i.to >= t.to));
  }
}
const Ys = /* @__PURE__ */ te.define({
  map(n, e) {
    return n && n.map(e);
  }
}), LE = /* @__PURE__ */ te.define(), Ss = /* @__PURE__ */ Ie.define({
  create() {
    return null;
  },
  update(n, e) {
    for (let t of e.effects) {
      if (t.is(Ys))
        return t.value;
      if (t.is(LE) && n)
        return new gr(n.ranges, t.value);
    }
    return n && e.docChanged && (n = n.map(e.changes)), n && e.selection && !n.selectionInsideField(e.selection) && (n = null), n;
  },
  provide: (n) => Z.decorations.from(n, (e) => e ? e.deco : F.none)
});
function Ru(n, e) {
  return $.create(n.filter((t) => t.field == e).map((t) => $.range(t.from, t.to)));
}
function VE(n) {
  let e = Cu.parse(n);
  return (t, i, r, s) => {
    let { text: o, ranges: l } = e.instantiate(t.state, r), { main: a } = t.state.selection, c = {
      changes: { from: r, to: s == a.from ? a.to : s, insert: de.of(o) },
      scrollIntoView: !0,
      annotations: i ? [vu.of(i), Me.userEvent.of("input.complete")] : void 0
    };
    if (l.length && (c.selection = Ru(l, 0)), l.some((h) => h.field > 0)) {
      let h = new gr(l, 0), f = c.effects = [Ys.of(h)];
      t.state.field(Ss, !1) === void 0 && f.push(te.appendConfig.of([Ss, IE, jE, KS]));
    }
    t.dispatch(t.state.update(c));
  };
}
function JS(n) {
  return ({ state: e, dispatch: t }) => {
    let i = e.field(Ss, !1);
    if (!i || n < 0 && i.active == 0)
      return !1;
    let r = i.active + n, s = n > 0 && !i.ranges.some((o) => o.field == r + n);
    return t(e.update({
      selection: Ru(i.ranges, r),
      effects: Ys.of(s ? null : new gr(i.ranges, r)),
      scrollIntoView: !0
    })), !0;
  };
}
const BE = ({ state: n, dispatch: e }) => n.field(Ss, !1) ? (e(n.update({ effects: Ys.of(null) })), !0) : !1, WE = /* @__PURE__ */ JS(1), zE = /* @__PURE__ */ JS(-1), DE = [
  { key: "Tab", run: WE, shift: zE },
  { key: "Escape", run: BE }
], Qp = /* @__PURE__ */ B.define({
  combine(n) {
    return n.length ? n[0] : DE;
  }
}), IE = /* @__PURE__ */ Xn.highest(/* @__PURE__ */ Vs.compute([Qp], (n) => n.facet(Qp)));
function Ce(n, e) {
  return Object.assign(Object.assign({}, e), { apply: VE(n) });
}
const jE = /* @__PURE__ */ Z.domEventHandlers({
  mousedown(n, e) {
    let t = e.state.field(Ss, !1), i;
    if (!t || (i = e.posAtCoords({ x: n.clientX, y: n.clientY })) == null)
      return !1;
    let r = t.ranges.find((s) => s.from <= i && s.to >= i);
    return !r || r.field == t.active ? !1 : (e.dispatch({
      selection: Ru(t.ranges, r.field),
      effects: Ys.of(t.ranges.some((s) => s.field > r.field) ? new gr(t.ranges, r.field) : null),
      scrollIntoView: !0
    }), !0);
  }
}), bs = {
  brackets: ["(", "[", "{", "'", '"'],
  before: ")]}:;>",
  stringPrefixes: []
}, ui = /* @__PURE__ */ te.define({
  map(n, e) {
    let t = e.mapPos(n, -1, Ne.TrackAfter);
    return t ?? void 0;
  }
}), Eu = /* @__PURE__ */ new class extends xi {
}();
Eu.startSide = 1;
Eu.endSide = -1;
const eb = /* @__PURE__ */ Ie.define({
  create() {
    return Oe.empty;
  },
  update(n, e) {
    if (n = n.map(e.changes), e.selection) {
      let t = e.state.doc.lineAt(e.selection.main.head);
      n = n.update({ filter: (i) => i >= t.from && i <= t.to });
    }
    for (let t of e.effects)
      t.is(ui) && (n = n.update({ add: [Eu.range(t.value, t.value + 1)] }));
    return n;
  }
});
function UE() {
  return [NE, eb];
}
const lc = "()[]{}<>«»»«［］｛｝";
function tb(n) {
  for (let e = 0; e < lc.length; e += 2)
    if (lc.charCodeAt(e) == n)
      return lc.charAt(e + 1);
  return If(n < 128 ? n : n + 1);
}
function nb(n, e) {
  return n.languageDataAt("closeBrackets", e)[0] || bs;
}
const YE = typeof navigator == "object" && /* @__PURE__ */ /Android\b/.test(navigator.userAgent), NE = /* @__PURE__ */ Z.inputHandler.of((n, e, t, i) => {
  if ((YE ? n.composing : n.compositionStarted) || n.state.readOnly)
    return !1;
  let r = n.state.selection.main;
  if (i.length > 2 || i.length == 2 && on(lt(i, 0)) == 1 || e != r.from || t != r.to)
    return !1;
  let s = HE(n.state, i);
  return s ? (n.dispatch(s), !0) : !1;
}), GE = ({ state: n, dispatch: e }) => {
  if (n.readOnly)
    return !1;
  let i = nb(n, n.selection.main.head).brackets || bs.brackets, r = null, s = n.changeByRange((o) => {
    if (o.empty) {
      let l = KE(n.doc, o.head);
      for (let a of i)
        if (a == l && pa(n.doc, o.head) == tb(lt(a, 0)))
          return {
            changes: { from: o.head - a.length, to: o.head + a.length },
            range: $.cursor(o.head - a.length)
          };
    }
    return { range: r = o };
  });
  return r || e(n.update(s, { scrollIntoView: !0, userEvent: "delete.backward" })), !r;
}, FE = [
  { key: "Backspace", run: GE }
];
function HE(n, e) {
  let t = nb(n, n.selection.main.head), i = t.brackets || bs.brackets;
  for (let r of i) {
    let s = tb(lt(r, 0));
    if (e == r)
      return s == r ? tA(n, r, i.indexOf(r + r + r) > -1, t) : JE(n, r, s, t.before || bs.before);
    if (e == s && ib(n, n.selection.main.from))
      return eA(n, r, s);
  }
  return null;
}
function ib(n, e) {
  let t = !1;
  return n.field(eb).between(0, n.doc.length, (i) => {
    i == e && (t = !0);
  }), t;
}
function pa(n, e) {
  let t = n.sliceString(e, e + 2);
  return t.slice(0, on(lt(t, 0)));
}
function KE(n, e) {
  let t = n.sliceString(e - 2, e);
  return on(lt(t, 0)) == t.length ? t : t.slice(1);
}
function JE(n, e, t, i) {
  let r = null, s = n.changeByRange((o) => {
    if (!o.empty)
      return {
        changes: [{ insert: e, from: o.from }, { insert: t, from: o.to }],
        effects: ui.of(o.to + e.length),
        range: $.range(o.anchor + e.length, o.head + e.length)
      };
    let l = pa(n.doc, o.head);
    return !l || /\s/.test(l) || i.indexOf(l) > -1 ? {
      changes: { insert: e + t, from: o.head },
      effects: ui.of(o.head + e.length),
      range: $.cursor(o.head + e.length)
    } : { range: r = o };
  });
  return r ? null : n.update(s, {
    scrollIntoView: !0,
    userEvent: "input.type"
  });
}
function eA(n, e, t) {
  let i = null, r = n.changeByRange((s) => s.empty && pa(n.doc, s.head) == t ? {
    changes: { from: s.head, to: s.head + t.length, insert: t },
    range: $.cursor(s.head + t.length)
  } : i = { range: s });
  return i ? null : n.update(r, {
    scrollIntoView: !0,
    userEvent: "input.type"
  });
}
function tA(n, e, t, i) {
  let r = i.stringPrefixes || bs.stringPrefixes, s = null, o = n.changeByRange((l) => {
    if (!l.empty)
      return {
        changes: [{ insert: e, from: l.from }, { insert: e, from: l.to }],
        effects: ui.of(l.to + e.length),
        range: $.range(l.anchor + e.length, l.head + e.length)
      };
    let a = l.head, c = pa(n.doc, a), h;
    if (c == e) {
      if (xp(n, a))
        return {
          changes: { insert: e + e, from: a },
          effects: ui.of(a + e.length),
          range: $.cursor(a + e.length)
        };
      if (ib(n, a)) {
        let u = t && n.sliceDoc(a, a + e.length * 3) == e + e + e ? e + e + e : e;
        return {
          changes: { from: a, to: a + u.length, insert: u },
          range: $.cursor(a + u.length)
        };
      }
    } else {
      if (t && n.sliceDoc(a - 2 * e.length, a) == e + e && (h = kp(n, a - 2 * e.length, r)) > -1 && xp(n, h))
        return {
          changes: { insert: e + e + e + e, from: a },
          effects: ui.of(a + e.length),
          range: $.cursor(a + e.length)
        };
      if (n.charCategorizer(a)(c) != Te.Word && kp(n, a, r) > -1 && !nA(n, a, e, r))
        return {
          changes: { insert: e + e, from: a },
          effects: ui.of(a + e.length),
          range: $.cursor(a + e.length)
        };
    }
    return { range: s = l };
  });
  return s ? null : n.update(o, {
    scrollIntoView: !0,
    userEvent: "input.type"
  });
}
function xp(n, e) {
  let t = ge(n).resolveInner(e + 1);
  return t.parent && t.from == e;
}
function nA(n, e, t, i) {
  let r = ge(n).resolveInner(e, -1), s = i.reduce((o, l) => Math.max(o, l.length), 0);
  for (let o = 0; o < 5; o++) {
    let l = n.sliceDoc(r.from, Math.min(r.to, r.from + t.length + s)), a = l.indexOf(t);
    if (!a || a > -1 && i.indexOf(l.slice(0, a)) > -1) {
      let h = r.firstChild;
      for (; h && h.from == r.from && h.to - h.from > t.length + a; ) {
        if (n.sliceDoc(h.to - t.length, h.to) == t)
          return !1;
        h = h.firstChild;
      }
      return !0;
    }
    let c = r.to == e && r.parent;
    if (!c)
      break;
    r = c;
  }
  return !1;
}
function kp(n, e, t) {
  let i = n.charCategorizer(e);
  if (i(n.sliceDoc(e - 1, e)) != Te.Word)
    return e;
  for (let r of t) {
    let s = e - r.length;
    if (n.sliceDoc(s, e) == r && i(n.sliceDoc(s - 1, s)) != Te.Word)
      return s;
  }
  return -1;
}
function iA(n = {}) {
  return [
    XE,
    ct,
    ze.of(n),
    AE,
    rA,
    KS
  ];
}
const rb = [
  { key: "Ctrl-Space", run: bp },
  { mac: "Alt-`", run: bp },
  { key: "Escape", run: TE },
  { key: "ArrowDown", run: /* @__PURE__ */ xo(!0) },
  { key: "ArrowUp", run: /* @__PURE__ */ xo(!1) },
  { key: "PageDown", run: /* @__PURE__ */ xo(!0, "page") },
  { key: "PageUp", run: /* @__PURE__ */ xo(!1, "page") },
  { key: "Enter", run: $E }
], rA = /* @__PURE__ */ Xn.highest(/* @__PURE__ */ Vs.computeN([ze], (n) => n.facet(ze).defaultKeymap ? [rb] : []));
class wp {
  constructor(e, t, i) {
    this.from = e, this.to = t, this.diagnostic = i;
  }
}
class ai {
  constructor(e, t, i) {
    this.diagnostics = e, this.panel = t, this.selected = i;
  }
  static init(e, t, i) {
    let r = i.facet(Qs).markerFilter;
    r && (e = r(e, i));
    let s = e.slice().sort((h, f) => h.from - f.from || h.to - f.to), o = new Rn(), l = [], a = 0;
    for (let h = 0; ; ) {
      let f = h == s.length ? null : s[h];
      if (!f && !l.length)
        break;
      let u, d;
      for (l.length ? (u = a, d = l.reduce((p, m) => Math.min(p, m.to), f && f.from > u ? f.from : 1e8)) : (u = f.from, d = f.to, l.push(f), h++); h < s.length; ) {
        let p = s[h];
        if (p.from == u && (p.to > p.from || p.to == u))
          l.push(p), h++, d = Math.min(p.to, d);
        else {
          d = Math.min(p.from, d);
          break;
        }
      }
      let O = gA(l);
      if (l.some((p) => p.from == p.to || p.from == p.to - 1 && i.doc.lineAt(p.from).to == p.from))
        o.add(u, u, F.widget({
          widget: new dA(O),
          diagnostics: l.slice()
        }));
      else {
        let p = l.reduce((m, y) => y.markClass ? m + " " + y.markClass : m, "");
        o.add(u, d, F.mark({
          class: "cm-lintRange cm-lintRange-" + O + p,
          diagnostics: l.slice(),
          inclusiveEnd: l.some((m) => m.to > d)
        }));
      }
      a = d;
      for (let p = 0; p < l.length; p++)
        l[p].to <= a && l.splice(p--, 1);
    }
    let c = o.finish();
    return new ai(c, t, ir(c));
  }
}
function ir(n, e = null, t = 0) {
  let i = null;
  return n.between(t, 1e9, (r, s, { spec: o }) => {
    if (!(e && o.diagnostics.indexOf(e) < 0))
      if (!i)
        i = new wp(r, s, e || o.diagnostics[0]);
      else {
        if (o.diagnostics.indexOf(i.diagnostic) < 0)
          return !1;
        i = new wp(i.from, s, i.diagnostic);
      }
  }), i;
}
function sA(n, e) {
  let t = e.pos, i = e.end || t, r = n.state.facet(Qs).hideOn(n, t, i);
  if (r != null)
    return r;
  let s = n.startState.doc.lineAt(e.pos);
  return !!(n.effects.some((o) => o.is(sb)) || n.changes.touchesRange(s.from, Math.max(s.to, i)));
}
function oA(n, e) {
  return n.field(St, !1) ? e : e.concat(te.appendConfig.of(yA));
}
const sb = /* @__PURE__ */ te.define(), Au = /* @__PURE__ */ te.define(), ob = /* @__PURE__ */ te.define(), St = /* @__PURE__ */ Ie.define({
  create() {
    return new ai(F.none, null, null);
  },
  update(n, e) {
    if (e.docChanged && n.diagnostics.size) {
      let t = n.diagnostics.map(e.changes), i = null, r = n.panel;
      if (n.selected) {
        let s = e.changes.mapPos(n.selected.from, 1);
        i = ir(t, n.selected.diagnostic, s) || ir(t, null, s);
      }
      !t.size && r && e.state.facet(Qs).autoPanel && (r = null), n = new ai(t, r, i);
    }
    for (let t of e.effects)
      if (t.is(sb)) {
        let i = e.state.facet(Qs).autoPanel ? t.value.length ? xs.open : null : n.panel;
        n = ai.init(t.value, i, e.state);
      } else t.is(Au) ? n = new ai(n.diagnostics, t.value ? xs.open : null, n.selected) : t.is(ob) && (n = new ai(n.diagnostics, n.panel, t.value));
    return n;
  },
  provide: (n) => [
    us.from(n, (e) => e.panel),
    Z.decorations.from(n, (e) => e.diagnostics)
  ]
}), lA = /* @__PURE__ */ F.mark({ class: "cm-lintRange cm-lintRange-active" });
function aA(n, e, t) {
  let { diagnostics: i } = n.state.field(St), r, s = -1, o = -1;
  i.between(e - (t < 0 ? 1 : 0), e + (t > 0 ? 1 : 0), (a, c, { spec: h }) => {
    if (e >= a && e <= c && (a == c || (e > a || t > 0) && (e < c || t < 0)))
      return r = h.diagnostics, s = a, o = c, !1;
  });
  let l = n.state.facet(Qs).tooltipFilter;
  return r && l && (r = l(r, n.state)), r ? {
    pos: s,
    end: o,
    above: n.state.doc.lineAt(s).to < o,
    create() {
      return { dom: cA(n, r) };
    }
  } : null;
}
function cA(n, e) {
  return be("ul", { class: "cm-tooltip-lint" }, e.map((t) => ab(n, t, !1)));
}
const hA = (n) => {
  let e = n.state.field(St, !1);
  (!e || !e.panel) && n.dispatch({ effects: oA(n.state, [Au.of(!0)]) });
  let t = fs(n, xs.open);
  return t && t.dom.querySelector(".cm-panel-lint ul").focus(), !0;
}, vp = (n) => {
  let e = n.state.field(St, !1);
  return !e || !e.panel ? !1 : (n.dispatch({ effects: Au.of(!1) }), !0);
}, fA = (n) => {
  let e = n.state.field(St, !1);
  if (!e)
    return !1;
  let t = n.state.selection.main, i = e.diagnostics.iter(t.to + 1);
  return !i.value && (i = e.diagnostics.iter(0), !i.value || i.from == t.from && i.to == t.to) ? !1 : (n.dispatch({ selection: { anchor: i.from, head: i.to }, scrollIntoView: !0 }), !0);
}, uA = [
  { key: "Mod-Shift-m", run: hA, preventDefault: !0 },
  { key: "F8", run: fA }
], Qs = /* @__PURE__ */ B.define({
  combine(n) {
    return Object.assign({ sources: n.map((e) => e.source).filter((e) => e != null) }, gn(n.map((e) => e.config), {
      delay: 750,
      markerFilter: null,
      tooltipFilter: null,
      needsRefresh: null,
      hideOn: () => null
    }, {
      needsRefresh: (e, t) => e ? t ? (i) => e(i) || t(i) : e : t
    }));
  }
});
function lb(n) {
  let e = [];
  if (n)
    e: for (let { name: t } of n) {
      for (let i = 0; i < t.length; i++) {
        let r = t[i];
        if (/[a-zA-Z]/.test(r) && !e.some((s) => s.toLowerCase() == r.toLowerCase())) {
          e.push(r);
          continue e;
        }
      }
      e.push("");
    }
  return e;
}
function ab(n, e, t) {
  var i;
  let r = t ? lb(e.actions) : [];
  return be("li", { class: "cm-diagnostic cm-diagnostic-" + e.severity }, be("span", { class: "cm-diagnosticText" }, e.renderMessage ? e.renderMessage(n) : e.message), (i = e.actions) === null || i === void 0 ? void 0 : i.map((s, o) => {
    let l = !1, a = (u) => {
      if (u.preventDefault(), l)
        return;
      l = !0;
      let d = ir(n.state.field(St).diagnostics, e);
      d && s.apply(n, d.from, d.to);
    }, { name: c } = s, h = r[o] ? c.indexOf(r[o]) : -1, f = h < 0 ? c : [
      c.slice(0, h),
      be("u", c.slice(h, h + 1)),
      c.slice(h + 1)
    ];
    return be("button", {
      type: "button",
      class: "cm-diagnosticAction",
      onclick: a,
      onmousedown: a,
      "aria-label": ` Action: ${c}${h < 0 ? "" : ` (access key "${r[o]})"`}.`
    }, f);
  }), e.source && be("div", { class: "cm-diagnosticSource" }, e.source));
}
class dA extends Zn {
  constructor(e) {
    super(), this.sev = e;
  }
  eq(e) {
    return e.sev == this.sev;
  }
  toDOM() {
    return be("span", { class: "cm-lintPoint cm-lintPoint-" + this.sev });
  }
}
class Pp {
  constructor(e, t) {
    this.diagnostic = t, this.id = "item_" + Math.floor(Math.random() * 4294967295).toString(16), this.dom = ab(e, t, !0), this.dom.id = this.id, this.dom.setAttribute("role", "option");
  }
}
class xs {
  constructor(e) {
    this.view = e, this.items = [];
    let t = (r) => {
      if (r.keyCode == 27)
        vp(this.view), this.view.focus();
      else if (r.keyCode == 38 || r.keyCode == 33)
        this.moveSelection((this.selectedIndex - 1 + this.items.length) % this.items.length);
      else if (r.keyCode == 40 || r.keyCode == 34)
        this.moveSelection((this.selectedIndex + 1) % this.items.length);
      else if (r.keyCode == 36)
        this.moveSelection(0);
      else if (r.keyCode == 35)
        this.moveSelection(this.items.length - 1);
      else if (r.keyCode == 13)
        this.view.focus();
      else if (r.keyCode >= 65 && r.keyCode <= 90 && this.selectedIndex >= 0) {
        let { diagnostic: s } = this.items[this.selectedIndex], o = lb(s.actions);
        for (let l = 0; l < o.length; l++)
          if (o[l].toUpperCase().charCodeAt(0) == r.keyCode) {
            let a = ir(this.view.state.field(St).diagnostics, s);
            a && s.actions[l].apply(e, a.from, a.to);
          }
      } else
        return;
      r.preventDefault();
    }, i = (r) => {
      for (let s = 0; s < this.items.length; s++)
        this.items[s].dom.contains(r.target) && this.moveSelection(s);
    };
    this.list = be("ul", {
      tabIndex: 0,
      role: "listbox",
      "aria-label": this.view.state.phrase("Diagnostics"),
      onkeydown: t,
      onclick: i
    }), this.dom = be("div", { class: "cm-panel-lint" }, this.list, be("button", {
      type: "button",
      name: "close",
      "aria-label": this.view.state.phrase("close"),
      onclick: () => vp(this.view)
    }, "×")), this.update();
  }
  get selectedIndex() {
    let e = this.view.state.field(St).selected;
    if (!e)
      return -1;
    for (let t = 0; t < this.items.length; t++)
      if (this.items[t].diagnostic == e.diagnostic)
        return t;
    return -1;
  }
  update() {
    let { diagnostics: e, selected: t } = this.view.state.field(St), i = 0, r = !1, s = null, o = /* @__PURE__ */ new Set();
    for (e.between(0, this.view.state.doc.length, (l, a, { spec: c }) => {
      for (let h of c.diagnostics) {
        if (o.has(h))
          continue;
        o.add(h);
        let f = -1, u;
        for (let d = i; d < this.items.length; d++)
          if (this.items[d].diagnostic == h) {
            f = d;
            break;
          }
        f < 0 ? (u = new Pp(this.view, h), this.items.splice(i, 0, u), r = !0) : (u = this.items[f], f > i && (this.items.splice(i, f - i), r = !0)), t && u.diagnostic == t.diagnostic ? u.dom.hasAttribute("aria-selected") || (u.dom.setAttribute("aria-selected", "true"), s = u) : u.dom.hasAttribute("aria-selected") && u.dom.removeAttribute("aria-selected"), i++;
      }
    }); i < this.items.length && !(this.items.length == 1 && this.items[0].diagnostic.from < 0); )
      r = !0, this.items.pop();
    this.items.length == 0 && (this.items.push(new Pp(this.view, {
      from: -1,
      to: -1,
      severity: "info",
      message: this.view.state.phrase("No diagnostics")
    })), r = !0), s ? (this.list.setAttribute("aria-activedescendant", s.id), this.view.requestMeasure({
      key: this,
      read: () => ({ sel: s.dom.getBoundingClientRect(), panel: this.list.getBoundingClientRect() }),
      write: ({ sel: l, panel: a }) => {
        let c = a.height / this.list.offsetHeight;
        l.top < a.top ? this.list.scrollTop -= (a.top - l.top) / c : l.bottom > a.bottom && (this.list.scrollTop += (l.bottom - a.bottom) / c);
      }
    })) : this.selectedIndex < 0 && this.list.removeAttribute("aria-activedescendant"), r && this.sync();
  }
  sync() {
    let e = this.list.firstChild;
    function t() {
      let i = e;
      e = i.nextSibling, i.remove();
    }
    for (let i of this.items)
      if (i.dom.parentNode == this.list) {
        for (; e != i.dom; )
          t();
        e = i.dom.nextSibling;
      } else
        this.list.insertBefore(i.dom, e);
    for (; e; )
      t();
  }
  moveSelection(e) {
    if (this.selectedIndex < 0)
      return;
    let t = this.view.state.field(St), i = ir(t.diagnostics, this.items[e].diagnostic);
    i && this.view.dispatch({
      selection: { anchor: i.from, head: i.to },
      scrollIntoView: !0,
      effects: ob.of(i)
    });
  }
  static open(e) {
    return new xs(e);
  }
}
function OA(n, e = 'viewBox="0 0 40 40"') {
  return `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" ${e}>${encodeURIComponent(n)}</svg>')`;
}
function ko(n) {
  return OA(`<path d="m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0" stroke="${n}" fill="none" stroke-width=".7"/>`, 'width="6" height="3"');
}
const pA = /* @__PURE__ */ Z.baseTheme({
  ".cm-diagnostic": {
    padding: "3px 6px 3px 8px",
    marginLeft: "-1px",
    display: "block",
    whiteSpace: "pre-wrap"
  },
  ".cm-diagnostic-error": { borderLeft: "5px solid #d11" },
  ".cm-diagnostic-warning": { borderLeft: "5px solid orange" },
  ".cm-diagnostic-info": { borderLeft: "5px solid #999" },
  ".cm-diagnostic-hint": { borderLeft: "5px solid #66d" },
  ".cm-diagnosticAction": {
    font: "inherit",
    border: "none",
    padding: "2px 4px",
    backgroundColor: "#444",
    color: "white",
    borderRadius: "3px",
    marginLeft: "8px",
    cursor: "pointer"
  },
  ".cm-diagnosticSource": {
    fontSize: "70%",
    opacity: 0.7
  },
  ".cm-lintRange": {
    backgroundPosition: "left bottom",
    backgroundRepeat: "repeat-x",
    paddingBottom: "0.7px"
  },
  ".cm-lintRange-error": { backgroundImage: /* @__PURE__ */ ko("#d11") },
  ".cm-lintRange-warning": { backgroundImage: /* @__PURE__ */ ko("orange") },
  ".cm-lintRange-info": { backgroundImage: /* @__PURE__ */ ko("#999") },
  ".cm-lintRange-hint": { backgroundImage: /* @__PURE__ */ ko("#66d") },
  ".cm-lintRange-active": { backgroundColor: "#ffdd9980" },
  ".cm-tooltip-lint": {
    padding: 0,
    margin: 0
  },
  ".cm-lintPoint": {
    position: "relative",
    "&:after": {
      content: '""',
      position: "absolute",
      bottom: 0,
      left: "-2px",
      borderLeft: "3px solid transparent",
      borderRight: "3px solid transparent",
      borderBottom: "4px solid #d11"
    }
  },
  ".cm-lintPoint-warning": {
    "&:after": { borderBottomColor: "orange" }
  },
  ".cm-lintPoint-info": {
    "&:after": { borderBottomColor: "#999" }
  },
  ".cm-lintPoint-hint": {
    "&:after": { borderBottomColor: "#66d" }
  },
  ".cm-panel.cm-panel-lint": {
    position: "relative",
    "& ul": {
      maxHeight: "100px",
      overflowY: "auto",
      "& [aria-selected]": {
        backgroundColor: "#ddd",
        "& u": { textDecoration: "underline" }
      },
      "&:focus [aria-selected]": {
        background_fallback: "#bdf",
        backgroundColor: "Highlight",
        color_fallback: "white",
        color: "HighlightText"
      },
      "& u": { textDecoration: "none" },
      padding: 0,
      margin: 0
    },
    "& [name=close]": {
      position: "absolute",
      top: "0",
      right: "2px",
      background: "inherit",
      border: "none",
      font: "inherit",
      padding: 0,
      margin: 0
    }
  }
});
function mA(n) {
  return n == "error" ? 4 : n == "warning" ? 3 : n == "info" ? 2 : 1;
}
function gA(n) {
  let e = "hint", t = 1;
  for (let i of n) {
    let r = mA(i.severity);
    r > t && (t = r, e = i.severity);
  }
  return e;
}
const yA = [
  St,
  /* @__PURE__ */ Z.decorations.compute([St], (n) => {
    let { selected: e, panel: t } = n.field(St);
    return !e || !t || e.from == e.to ? F.none : F.set([
      lA.range(e.from, e.to)
    ]);
  }),
  /* @__PURE__ */ nC(aA, { hideOn: sA }),
  pA
], SA = [
  dC(),
  mC(),
  _T(),
  _R(),
  lR(),
  xT(),
  $T(),
  ue.allowMultipleSelections.of(!0),
  GC(),
  oS(fR, { fallback: !0 }),
  yR(),
  UE(),
  iA(),
  jT(),
  NT(),
  VT(),
  W2(),
  Vs.of([
    ...FE,
    ...q2,
    ...oE,
    ...zR,
    ...iR,
    ...rb,
    ...uA
  ])
];
class Zl {
  /**
  @internal
  */
  constructor(e, t, i, r, s, o, l, a, c, h = 0, f) {
    this.p = e, this.stack = t, this.state = i, this.reducePos = r, this.pos = s, this.score = o, this.buffer = l, this.bufferBase = a, this.curContext = c, this.lookAhead = h, this.parent = f;
  }
  /**
  @internal
  */
  toString() {
    return `[${this.stack.filter((e, t) => t % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? "!" + this.score : ""}`;
  }
  // Start an empty stack
  /**
  @internal
  */
  static start(e, t, i = 0) {
    let r = e.parser.context;
    return new Zl(e, [], t, i, i, 0, [], 0, r ? new $p(r, r.start) : null, 0, null);
  }
  /**
  The stack's current [context](#lr.ContextTracker) value, if
  any. Its type will depend on the context tracker's type
  parameter, or it will be `null` if there is no context
  tracker.
  */
  get context() {
    return this.curContext ? this.curContext.context : null;
  }
  // Push a state onto the stack, tracking its start position as well
  // as the buffer base at that point.
  /**
  @internal
  */
  pushState(e, t) {
    this.stack.push(this.state, t, this.bufferBase + this.buffer.length), this.state = e;
  }
  // Apply a reduce action
  /**
  @internal
  */
  reduce(e) {
    var t;
    let i = e >> 19, r = e & 65535, { parser: s } = this.p, o = this.reducePos < this.pos - 25;
    o && this.setLookAhead(this.pos);
    let l = s.dynamicPrecedence(r);
    if (l && (this.score += l), i == 0) {
      this.pushState(s.getGoto(this.state, r, !0), this.reducePos), r < s.minRepeatTerm && this.storeNode(r, this.reducePos, this.reducePos, o ? 8 : 4, !0), this.reduceContext(r, this.reducePos);
      return;
    }
    let a = this.stack.length - (i - 1) * 3 - (e & 262144 ? 6 : 0), c = a ? this.stack[a - 2] : this.p.ranges[0].from, h = this.reducePos - c;
    h >= 2e3 && !(!((t = this.p.parser.nodeSet.types[r]) === null || t === void 0) && t.isAnonymous) && (c == this.p.lastBigReductionStart ? (this.p.bigReductionCount++, this.p.lastBigReductionSize = h) : this.p.lastBigReductionSize < h && (this.p.bigReductionCount = 1, this.p.lastBigReductionStart = c, this.p.lastBigReductionSize = h));
    let f = a ? this.stack[a - 1] : 0, u = this.bufferBase + this.buffer.length - f;
    if (r < s.minRepeatTerm || e & 131072) {
      let d = s.stateFlag(
        this.state,
        1
        /* StateFlag.Skipped */
      ) ? this.pos : this.reducePos;
      this.storeNode(r, c, d, u + 4, !0);
    }
    if (e & 262144)
      this.state = this.stack[a];
    else {
      let d = this.stack[a - 3];
      this.state = s.getGoto(d, r, !0);
    }
    for (; this.stack.length > a; )
      this.stack.pop();
    this.reduceContext(r, c);
  }
  // Shift a value into the buffer
  /**
  @internal
  */
  storeNode(e, t, i, r = 4, s = !1) {
    if (e == 0 && (!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {
      let o = this, l = this.buffer.length;
      if (l == 0 && o.parent && (l = o.bufferBase - o.parent.bufferBase, o = o.parent), l > 0 && o.buffer[l - 4] == 0 && o.buffer[l - 1] > -1) {
        if (t == i)
          return;
        if (o.buffer[l - 2] >= t) {
          o.buffer[l - 2] = i;
          return;
        }
      }
    }
    if (!s || this.pos == i)
      this.buffer.push(e, t, i, r);
    else {
      let o = this.buffer.length;
      if (o > 0 && this.buffer[o - 4] != 0) {
        let l = !1;
        for (let a = o; a > 0 && this.buffer[a - 2] > i; a -= 4)
          if (this.buffer[a - 1] >= 0) {
            l = !0;
            break;
          }
        if (l)
          for (; o > 0 && this.buffer[o - 2] > i; )
            this.buffer[o] = this.buffer[o - 4], this.buffer[o + 1] = this.buffer[o - 3], this.buffer[o + 2] = this.buffer[o - 2], this.buffer[o + 3] = this.buffer[o - 1], o -= 4, r > 4 && (r -= 4);
      }
      this.buffer[o] = e, this.buffer[o + 1] = t, this.buffer[o + 2] = i, this.buffer[o + 3] = r;
    }
  }
  // Apply a shift action
  /**
  @internal
  */
  shift(e, t, i, r) {
    if (e & 131072)
      this.pushState(e & 65535, this.pos);
    else if ((e & 262144) == 0) {
      let s = e, { parser: o } = this.p;
      (r > this.pos || t <= o.maxNode) && (this.pos = r, o.stateFlag(
        s,
        1
        /* StateFlag.Skipped */
      ) || (this.reducePos = r)), this.pushState(s, i), this.shiftContext(t, i), t <= o.maxNode && this.buffer.push(t, i, r, 4);
    } else
      this.pos = r, this.shiftContext(t, i), t <= this.p.parser.maxNode && this.buffer.push(t, i, r, 4);
  }
  // Apply an action
  /**
  @internal
  */
  apply(e, t, i, r) {
    e & 65536 ? this.reduce(e) : this.shift(e, t, i, r);
  }
  // Add a prebuilt (reused) node into the buffer.
  /**
  @internal
  */
  useNode(e, t) {
    let i = this.p.reused.length - 1;
    (i < 0 || this.p.reused[i] != e) && (this.p.reused.push(e), i++);
    let r = this.pos;
    this.reducePos = this.pos = r + e.length, this.pushState(t, r), this.buffer.push(
      i,
      r,
      this.reducePos,
      -1
      /* size == -1 means this is a reused value */
    ), this.curContext && this.updateContext(this.curContext.tracker.reuse(this.curContext.context, e, this, this.p.stream.reset(this.pos - e.length)));
  }
  // Split the stack. Due to the buffer sharing and the fact
  // that `this.stack` tends to stay quite shallow, this isn't very
  // expensive.
  /**
  @internal
  */
  split() {
    let e = this, t = e.buffer.length;
    for (; t > 0 && e.buffer[t - 2] > e.reducePos; )
      t -= 4;
    let i = e.buffer.slice(t), r = e.bufferBase + t;
    for (; e && r == e.bufferBase; )
      e = e.parent;
    return new Zl(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, i, r, this.curContext, this.lookAhead, e);
  }
  // Try to recover from an error by 'deleting' (ignoring) one token.
  /**
  @internal
  */
  recoverByDelete(e, t) {
    let i = e <= this.p.parser.maxNode;
    i && this.storeNode(e, this.pos, t, 4), this.storeNode(0, this.pos, t, i ? 8 : 4), this.pos = this.reducePos = t, this.score -= 190;
  }
  /**
  Check if the given term would be able to be shifted (optionally
  after some reductions) on this stack. This can be useful for
  external tokenizers that want to make sure they only provide a
  given token when it applies.
  */
  canShift(e) {
    for (let t = new bA(this); ; ) {
      let i = this.p.parser.stateSlot(
        t.state,
        4
        /* ParseState.DefaultReduce */
      ) || this.p.parser.hasAction(t.state, e);
      if (i == 0)
        return !1;
      if ((i & 65536) == 0)
        return !0;
      t.reduce(i);
    }
  }
  // Apply up to Recover.MaxNext recovery actions that conceptually
  // inserts some missing token or rule.
  /**
  @internal
  */
  recoverByInsert(e) {
    if (this.stack.length >= 300)
      return [];
    let t = this.p.parser.nextStates(this.state);
    if (t.length > 8 || this.stack.length >= 120) {
      let r = [];
      for (let s = 0, o; s < t.length; s += 2)
        (o = t[s + 1]) != this.state && this.p.parser.hasAction(o, e) && r.push(t[s], o);
      if (this.stack.length < 120)
        for (let s = 0; r.length < 8 && s < t.length; s += 2) {
          let o = t[s + 1];
          r.some((l, a) => a & 1 && l == o) || r.push(t[s], o);
        }
      t = r;
    }
    let i = [];
    for (let r = 0; r < t.length && i.length < 4; r += 2) {
      let s = t[r + 1];
      if (s == this.state)
        continue;
      let o = this.split();
      o.pushState(s, this.pos), o.storeNode(0, o.pos, o.pos, 4, !0), o.shiftContext(t[r], this.pos), o.reducePos = this.pos, o.score -= 200, i.push(o);
    }
    return i;
  }
  // Force a reduce, if possible. Return false if that can't
  // be done.
  /**
  @internal
  */
  forceReduce() {
    let { parser: e } = this.p, t = e.stateSlot(
      this.state,
      5
      /* ParseState.ForcedReduce */
    );
    if ((t & 65536) == 0)
      return !1;
    if (!e.validAction(this.state, t)) {
      let i = t >> 19, r = t & 65535, s = this.stack.length - i * 3;
      if (s < 0 || e.getGoto(this.stack[s], r, !1) < 0) {
        let o = this.findForcedReduction();
        if (o == null)
          return !1;
        t = o;
      }
      this.storeNode(0, this.pos, this.pos, 4, !0), this.score -= 100;
    }
    return this.reducePos = this.pos, this.reduce(t), !0;
  }
  /**
  Try to scan through the automaton to find some kind of reduction
  that can be applied. Used when the regular ForcedReduce field
  isn't a valid action. @internal
  */
  findForcedReduction() {
    let { parser: e } = this.p, t = [], i = (r, s) => {
      if (!t.includes(r))
        return t.push(r), e.allActions(r, (o) => {
          if (!(o & 393216)) if (o & 65536) {
            let l = (o >> 19) - s;
            if (l > 1) {
              let a = o & 65535, c = this.stack.length - l * 3;
              if (c >= 0 && e.getGoto(this.stack[c], a, !1) >= 0)
                return l << 19 | 65536 | a;
            }
          } else {
            let l = i(o, s + 1);
            if (l != null)
              return l;
          }
        });
    };
    return i(this.state, 0);
  }
  /**
  @internal
  */
  forceAll() {
    for (; !this.p.parser.stateFlag(
      this.state,
      2
      /* StateFlag.Accepting */
    ); )
      if (!this.forceReduce()) {
        this.storeNode(0, this.pos, this.pos, 4, !0);
        break;
      }
    return this;
  }
  /**
  Check whether this state has no further actions (assumed to be a direct descendant of the
  top state, since any other states must be able to continue
  somehow). @internal
  */
  get deadEnd() {
    if (this.stack.length != 3)
      return !1;
    let { parser: e } = this.p;
    return e.data[e.stateSlot(
      this.state,
      1
      /* ParseState.Actions */
    )] == 65535 && !e.stateSlot(
      this.state,
      4
      /* ParseState.DefaultReduce */
    );
  }
  /**
  Restart the stack (put it back in its start state). Only safe
  when this.stack.length == 3 (state is directly below the top
  state). @internal
  */
  restart() {
    this.storeNode(0, this.pos, this.pos, 4, !0), this.state = this.stack[0], this.stack.length = 0;
  }
  /**
  @internal
  */
  sameState(e) {
    if (this.state != e.state || this.stack.length != e.stack.length)
      return !1;
    for (let t = 0; t < this.stack.length; t += 3)
      if (this.stack[t] != e.stack[t])
        return !1;
    return !0;
  }
  /**
  Get the parser used by this stack.
  */
  get parser() {
    return this.p.parser;
  }
  /**
  Test whether a given dialect (by numeric ID, as exported from
  the terms file) is enabled.
  */
  dialectEnabled(e) {
    return this.p.parser.dialect.flags[e];
  }
  shiftContext(e, t) {
    this.curContext && this.updateContext(this.curContext.tracker.shift(this.curContext.context, e, this, this.p.stream.reset(t)));
  }
  reduceContext(e, t) {
    this.curContext && this.updateContext(this.curContext.tracker.reduce(this.curContext.context, e, this, this.p.stream.reset(t)));
  }
  /**
  @internal
  */
  emitContext() {
    let e = this.buffer.length - 1;
    (e < 0 || this.buffer[e] != -3) && this.buffer.push(this.curContext.hash, this.pos, this.pos, -3);
  }
  /**
  @internal
  */
  emitLookAhead() {
    let e = this.buffer.length - 1;
    (e < 0 || this.buffer[e] != -4) && this.buffer.push(this.lookAhead, this.pos, this.pos, -4);
  }
  updateContext(e) {
    if (e != this.curContext.context) {
      let t = new $p(this.curContext.tracker, e);
      t.hash != this.curContext.hash && this.emitContext(), this.curContext = t;
    }
  }
  /**
  @internal
  */
  setLookAhead(e) {
    e > this.lookAhead && (this.emitLookAhead(), this.lookAhead = e);
  }
  /**
  @internal
  */
  close() {
    this.curContext && this.curContext.tracker.strict && this.emitContext(), this.lookAhead > 0 && this.emitLookAhead();
  }
}
class $p {
  constructor(e, t) {
    this.tracker = e, this.context = t, this.hash = e.strict ? e.hash(t) : 0;
  }
}
class bA {
  constructor(e) {
    this.start = e, this.state = e.state, this.stack = e.stack, this.base = this.stack.length;
  }
  reduce(e) {
    let t = e & 65535, i = e >> 19;
    i == 0 ? (this.stack == this.start.stack && (this.stack = this.stack.slice()), this.stack.push(this.state, 0, 0), this.base += 3) : this.base -= (i - 1) * 3;
    let r = this.start.p.parser.getGoto(this.stack[this.base - 3], t, !0);
    this.state = r;
  }
}
class Ml {
  constructor(e, t, i) {
    this.stack = e, this.pos = t, this.index = i, this.buffer = e.buffer, this.index == 0 && this.maybeNext();
  }
  static create(e, t = e.bufferBase + e.buffer.length) {
    return new Ml(e, t, t - e.bufferBase);
  }
  maybeNext() {
    let e = this.stack.parent;
    e != null && (this.index = this.stack.bufferBase - e.bufferBase, this.stack = e, this.buffer = e.buffer);
  }
  get id() {
    return this.buffer[this.index - 4];
  }
  get start() {
    return this.buffer[this.index - 3];
  }
  get end() {
    return this.buffer[this.index - 2];
  }
  get size() {
    return this.buffer[this.index - 1];
  }
  next() {
    this.index -= 4, this.pos -= 4, this.index == 0 && this.maybeNext();
  }
  fork() {
    return new Ml(this.stack, this.pos, this.index);
  }
}
function Wr(n, e = Uint16Array) {
  if (typeof n != "string")
    return n;
  let t = null;
  for (let i = 0, r = 0; i < n.length; ) {
    let s = 0;
    for (; ; ) {
      let o = n.charCodeAt(i++), l = !1;
      if (o == 126) {
        s = 65535;
        break;
      }
      o >= 92 && o--, o >= 34 && o--;
      let a = o - 32;
      if (a >= 46 && (a -= 46, l = !0), s += a, l)
        break;
      s *= 46;
    }
    t ? t[r++] = s : t = new e(s);
  }
  return t;
}
class Uo {
  constructor() {
    this.start = -1, this.value = -1, this.end = -1, this.extended = -1, this.lookAhead = 0, this.mask = 0, this.context = 0;
  }
}
const Tp = new Uo();
class QA {
  /**
  @internal
  */
  constructor(e, t) {
    this.input = e, this.ranges = t, this.chunk = "", this.chunkOff = 0, this.chunk2 = "", this.chunk2Pos = 0, this.next = -1, this.token = Tp, this.rangeIndex = 0, this.pos = this.chunkPos = t[0].from, this.range = t[0], this.end = t[t.length - 1].to, this.readNext();
  }
  /**
  @internal
  */
  resolveOffset(e, t) {
    let i = this.range, r = this.rangeIndex, s = this.pos + e;
    for (; s < i.from; ) {
      if (!r)
        return null;
      let o = this.ranges[--r];
      s -= i.from - o.to, i = o;
    }
    for (; t < 0 ? s > i.to : s >= i.to; ) {
      if (r == this.ranges.length - 1)
        return null;
      let o = this.ranges[++r];
      s += o.from - i.to, i = o;
    }
    return s;
  }
  /**
  @internal
  */
  clipPos(e) {
    if (e >= this.range.from && e < this.range.to)
      return e;
    for (let t of this.ranges)
      if (t.to > e)
        return Math.max(e, t.from);
    return this.end;
  }
  /**
  Look at a code unit near the stream position. `.peek(0)` equals
  `.next`, `.peek(-1)` gives you the previous character, and so
  on.
  
  Note that looking around during tokenizing creates dependencies
  on potentially far-away content, which may reduce the
  effectiveness incremental parsing—when looking forward—or even
  cause invalid reparses when looking backward more than 25 code
  units, since the library does not track lookbehind.
  */
  peek(e) {
    let t = this.chunkOff + e, i, r;
    if (t >= 0 && t < this.chunk.length)
      i = this.pos + e, r = this.chunk.charCodeAt(t);
    else {
      let s = this.resolveOffset(e, 1);
      if (s == null)
        return -1;
      if (i = s, i >= this.chunk2Pos && i < this.chunk2Pos + this.chunk2.length)
        r = this.chunk2.charCodeAt(i - this.chunk2Pos);
      else {
        let o = this.rangeIndex, l = this.range;
        for (; l.to <= i; )
          l = this.ranges[++o];
        this.chunk2 = this.input.chunk(this.chunk2Pos = i), i + this.chunk2.length > l.to && (this.chunk2 = this.chunk2.slice(0, l.to - i)), r = this.chunk2.charCodeAt(0);
      }
    }
    return i >= this.token.lookAhead && (this.token.lookAhead = i + 1), r;
  }
  /**
  Accept a token. By default, the end of the token is set to the
  current stream position, but you can pass an offset (relative to
  the stream position) to change that.
  */
  acceptToken(e, t = 0) {
    let i = t ? this.resolveOffset(t, -1) : this.pos;
    if (i == null || i < this.token.start)
      throw new RangeError("Token end out of bounds");
    this.token.value = e, this.token.end = i;
  }
  /**
  Accept a token ending at a specific given position.
  */
  acceptTokenTo(e, t) {
    this.token.value = e, this.token.end = t;
  }
  getChunk() {
    if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {
      let { chunk: e, chunkPos: t } = this;
      this.chunk = this.chunk2, this.chunkPos = this.chunk2Pos, this.chunk2 = e, this.chunk2Pos = t, this.chunkOff = this.pos - this.chunkPos;
    } else {
      this.chunk2 = this.chunk, this.chunk2Pos = this.chunkPos;
      let e = this.input.chunk(this.pos), t = this.pos + e.length;
      this.chunk = t > this.range.to ? e.slice(0, this.range.to - this.pos) : e, this.chunkPos = this.pos, this.chunkOff = 0;
    }
  }
  readNext() {
    return this.chunkOff >= this.chunk.length && (this.getChunk(), this.chunkOff == this.chunk.length) ? this.next = -1 : this.next = this.chunk.charCodeAt(this.chunkOff);
  }
  /**
  Move the stream forward N (defaults to 1) code units. Returns
  the new value of [`next`](#lr.InputStream.next).
  */
  advance(e = 1) {
    for (this.chunkOff += e; this.pos + e >= this.range.to; ) {
      if (this.rangeIndex == this.ranges.length - 1)
        return this.setDone();
      e -= this.range.to - this.pos, this.range = this.ranges[++this.rangeIndex], this.pos = this.range.from;
    }
    return this.pos += e, this.pos >= this.token.lookAhead && (this.token.lookAhead = this.pos + 1), this.readNext();
  }
  setDone() {
    return this.pos = this.chunkPos = this.end, this.range = this.ranges[this.rangeIndex = this.ranges.length - 1], this.chunk = "", this.next = -1;
  }
  /**
  @internal
  */
  reset(e, t) {
    if (t ? (this.token = t, t.start = e, t.lookAhead = e + 1, t.value = t.extended = -1) : this.token = Tp, this.pos != e) {
      if (this.pos = e, e == this.end)
        return this.setDone(), this;
      for (; e < this.range.from; )
        this.range = this.ranges[--this.rangeIndex];
      for (; e >= this.range.to; )
        this.range = this.ranges[++this.rangeIndex];
      e >= this.chunkPos && e < this.chunkPos + this.chunk.length ? this.chunkOff = e - this.chunkPos : (this.chunk = "", this.chunkOff = 0), this.readNext();
    }
    return this;
  }
  /**
  @internal
  */
  read(e, t) {
    if (e >= this.chunkPos && t <= this.chunkPos + this.chunk.length)
      return this.chunk.slice(e - this.chunkPos, t - this.chunkPos);
    if (e >= this.chunk2Pos && t <= this.chunk2Pos + this.chunk2.length)
      return this.chunk2.slice(e - this.chunk2Pos, t - this.chunk2Pos);
    if (e >= this.range.from && t <= this.range.to)
      return this.input.read(e, t);
    let i = "";
    for (let r of this.ranges) {
      if (r.from >= t)
        break;
      r.to > e && (i += this.input.read(Math.max(r.from, e), Math.min(r.to, t)));
    }
    return i;
  }
}
class Fi {
  constructor(e, t) {
    this.data = e, this.id = t;
  }
  token(e, t) {
    let { parser: i } = t.p;
    cb(this.data, e, t, this.id, i.data, i.tokenPrecTable);
  }
}
Fi.prototype.contextual = Fi.prototype.fallback = Fi.prototype.extend = !1;
class Ll {
  constructor(e, t, i) {
    this.precTable = t, this.elseToken = i, this.data = typeof e == "string" ? Wr(e) : e;
  }
  token(e, t) {
    let i = e.pos, r = 0;
    for (; ; ) {
      let s = e.next < 0, o = e.resolveOffset(1, 1);
      if (cb(this.data, e, t, 0, this.data, this.precTable), e.token.value > -1)
        break;
      if (this.elseToken == null)
        return;
      if (s || r++, o == null)
        break;
      e.reset(o, e.token);
    }
    r && (e.reset(i, e.token), e.acceptToken(this.elseToken, r));
  }
}
Ll.prototype.contextual = Fi.prototype.fallback = Fi.prototype.extend = !1;
class Ee {
  /**
  Create a tokenizer. The first argument is the function that,
  given an input stream, scans for the types of tokens it
  recognizes at the stream's position, and calls
  [`acceptToken`](#lr.InputStream.acceptToken) when it finds
  one.
  */
  constructor(e, t = {}) {
    this.token = e, this.contextual = !!t.contextual, this.fallback = !!t.fallback, this.extend = !!t.extend;
  }
}
function cb(n, e, t, i, r, s) {
  let o = 0, l = 1 << i, { dialect: a } = t.p.parser;
  e: for (; (l & n[o]) != 0; ) {
    let c = n[o + 1];
    for (let d = o + 3; d < c; d += 2)
      if ((n[d + 1] & l) > 0) {
        let O = n[d];
        if (a.allows(O) && (e.token.value == -1 || e.token.value == O || xA(O, e.token.value, r, s))) {
          e.acceptToken(O);
          break;
        }
      }
    let h = e.next, f = 0, u = n[o + 2];
    if (e.next < 0 && u > f && n[c + u * 3 - 3] == 65535) {
      o = n[c + u * 3 - 1];
      continue e;
    }
    for (; f < u; ) {
      let d = f + u >> 1, O = c + d + (d << 1), p = n[O], m = n[O + 1] || 65536;
      if (h < p)
        u = d;
      else if (h >= m)
        f = d + 1;
      else {
        o = n[O + 2], e.advance();
        continue e;
      }
    }
    break;
  }
}
function Cp(n, e, t) {
  for (let i = e, r; (r = n[i]) != 65535; i++)
    if (r == t)
      return i - e;
  return -1;
}
function xA(n, e, t, i) {
  let r = Cp(t, i, e);
  return r < 0 || Cp(t, i, n) < r;
}
const pt = typeof process < "u" && process.env && /\bparse\b/.test(process.env.LOG);
let ac = null;
function Rp(n, e, t) {
  let i = n.cursor(xe.IncludeAnonymous);
  for (i.moveTo(e); ; )
    if (!(t < 0 ? i.childBefore(e) : i.childAfter(e)))
      for (; ; ) {
        if ((t < 0 ? i.to < e : i.from > e) && !i.type.isError)
          return t < 0 ? Math.max(0, Math.min(
            i.to - 1,
            e - 25
            /* Lookahead.Margin */
          )) : Math.min(n.length, Math.max(
            i.from + 1,
            e + 25
            /* Lookahead.Margin */
          ));
        if (t < 0 ? i.prevSibling() : i.nextSibling())
          break;
        if (!i.parent())
          return t < 0 ? 0 : n.length;
      }
}
let kA = class {
  constructor(e, t) {
    this.fragments = e, this.nodeSet = t, this.i = 0, this.fragment = null, this.safeFrom = -1, this.safeTo = -1, this.trees = [], this.start = [], this.index = [], this.nextFragment();
  }
  nextFragment() {
    let e = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];
    if (e) {
      for (this.safeFrom = e.openStart ? Rp(e.tree, e.from + e.offset, 1) - e.offset : e.from, this.safeTo = e.openEnd ? Rp(e.tree, e.to + e.offset, -1) - e.offset : e.to; this.trees.length; )
        this.trees.pop(), this.start.pop(), this.index.pop();
      this.trees.push(e.tree), this.start.push(-e.offset), this.index.push(0), this.nextStart = this.safeFrom;
    } else
      this.nextStart = 1e9;
  }
  // `pos` must be >= any previously given `pos` for this cursor
  nodeAt(e) {
    if (e < this.nextStart)
      return null;
    for (; this.fragment && this.safeTo <= e; )
      this.nextFragment();
    if (!this.fragment)
      return null;
    for (; ; ) {
      let t = this.trees.length - 1;
      if (t < 0)
        return this.nextFragment(), null;
      let i = this.trees[t], r = this.index[t];
      if (r == i.children.length) {
        this.trees.pop(), this.start.pop(), this.index.pop();
        continue;
      }
      let s = i.children[r], o = this.start[t] + i.positions[r];
      if (o > e)
        return this.nextStart = o, null;
      if (s instanceof me) {
        if (o == e) {
          if (o < this.safeFrom)
            return null;
          let l = o + s.length;
          if (l <= this.safeTo) {
            let a = s.prop(J.lookAhead);
            if (!a || l + a < this.fragment.to)
              return s;
          }
        }
        this.index[t]++, o + s.length >= Math.max(this.safeFrom, e) && (this.trees.push(s), this.start.push(o), this.index.push(0));
      } else
        this.index[t]++, this.nextStart = o + s.length;
    }
  }
};
class wA {
  constructor(e, t) {
    this.stream = t, this.tokens = [], this.mainToken = null, this.actions = [], this.tokens = e.tokenizers.map((i) => new Uo());
  }
  getActions(e) {
    let t = 0, i = null, { parser: r } = e.p, { tokenizers: s } = r, o = r.stateSlot(
      e.state,
      3
      /* ParseState.TokenizerMask */
    ), l = e.curContext ? e.curContext.hash : 0, a = 0;
    for (let c = 0; c < s.length; c++) {
      if ((1 << c & o) == 0)
        continue;
      let h = s[c], f = this.tokens[c];
      if (!(i && !h.fallback) && ((h.contextual || f.start != e.pos || f.mask != o || f.context != l) && (this.updateCachedToken(f, h, e), f.mask = o, f.context = l), f.lookAhead > f.end + 25 && (a = Math.max(f.lookAhead, a)), f.value != 0)) {
        let u = t;
        if (f.extended > -1 && (t = this.addActions(e, f.extended, f.end, t)), t = this.addActions(e, f.value, f.end, t), !h.extend && (i = f, t > u))
          break;
      }
    }
    for (; this.actions.length > t; )
      this.actions.pop();
    return a && e.setLookAhead(a), !i && e.pos == this.stream.end && (i = new Uo(), i.value = e.p.parser.eofTerm, i.start = i.end = e.pos, t = this.addActions(e, i.value, i.end, t)), this.mainToken = i, this.actions;
  }
  getMainToken(e) {
    if (this.mainToken)
      return this.mainToken;
    let t = new Uo(), { pos: i, p: r } = e;
    return t.start = i, t.end = Math.min(i + 1, r.stream.end), t.value = i == r.stream.end ? r.parser.eofTerm : 0, t;
  }
  updateCachedToken(e, t, i) {
    let r = this.stream.clipPos(i.pos);
    if (t.token(this.stream.reset(r, e), i), e.value > -1) {
      let { parser: s } = i.p;
      for (let o = 0; o < s.specialized.length; o++)
        if (s.specialized[o] == e.value) {
          let l = s.specializers[o](this.stream.read(e.start, e.end), i);
          if (l >= 0 && i.p.parser.dialect.allows(l >> 1)) {
            (l & 1) == 0 ? e.value = l >> 1 : e.extended = l >> 1;
            break;
          }
        }
    } else
      e.value = 0, e.end = this.stream.clipPos(r + 1);
  }
  putAction(e, t, i, r) {
    for (let s = 0; s < r; s += 3)
      if (this.actions[s] == e)
        return r;
    return this.actions[r++] = e, this.actions[r++] = t, this.actions[r++] = i, r;
  }
  addActions(e, t, i, r) {
    let { state: s } = e, { parser: o } = e.p, { data: l } = o;
    for (let a = 0; a < 2; a++)
      for (let c = o.stateSlot(
        s,
        a ? 2 : 1
        /* ParseState.Actions */
      ); ; c += 3) {
        if (l[c] == 65535)
          if (l[c + 1] == 1)
            c = vn(l, c + 2);
          else {
            r == 0 && l[c + 1] == 2 && (r = this.putAction(vn(l, c + 2), t, i, r));
            break;
          }
        l[c] == t && (r = this.putAction(vn(l, c + 1), t, i, r));
      }
    return r;
  }
}
class vA {
  constructor(e, t, i, r) {
    this.parser = e, this.input = t, this.ranges = r, this.recovering = 0, this.nextStackID = 9812, this.minStackPos = 0, this.reused = [], this.stoppedAt = null, this.lastBigReductionStart = -1, this.lastBigReductionSize = 0, this.bigReductionCount = 0, this.stream = new QA(t, r), this.tokens = new wA(e, this.stream), this.topTerm = e.top[1];
    let { from: s } = r[0];
    this.stacks = [Zl.start(this, e.top[0], s)], this.fragments = i.length && this.stream.end - s > e.bufferLength * 4 ? new kA(i, e.nodeSet) : null;
  }
  get parsedPos() {
    return this.minStackPos;
  }
  // Move the parser forward. This will process all parse stacks at
  // `this.pos` and try to advance them to a further position. If no
  // stack for such a position is found, it'll start error-recovery.
  //
  // When the parse is finished, this will return a syntax tree. When
  // not, it returns `null`.
  advance() {
    let e = this.stacks, t = this.minStackPos, i = this.stacks = [], r, s;
    if (this.bigReductionCount > 300 && e.length == 1) {
      let [o] = e;
      for (; o.forceReduce() && o.stack.length && o.stack[o.stack.length - 2] >= this.lastBigReductionStart; )
        ;
      this.bigReductionCount = this.lastBigReductionSize = 0;
    }
    for (let o = 0; o < e.length; o++) {
      let l = e[o];
      for (; ; ) {
        if (this.tokens.mainToken = null, l.pos > t)
          i.push(l);
        else {
          if (this.advanceStack(l, i, e))
            continue;
          {
            r || (r = [], s = []), r.push(l);
            let a = this.tokens.getMainToken(l);
            s.push(a.value, a.end);
          }
        }
        break;
      }
    }
    if (!i.length) {
      let o = r && $A(r);
      if (o)
        return pt && console.log("Finish with " + this.stackID(o)), this.stackToTree(o);
      if (this.parser.strict)
        throw pt && r && console.log("Stuck with token " + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : "none")), new SyntaxError("No parse at " + t);
      this.recovering || (this.recovering = 5);
    }
    if (this.recovering && r) {
      let o = this.stoppedAt != null && r[0].pos > this.stoppedAt ? r[0] : this.runRecovery(r, s, i);
      if (o)
        return pt && console.log("Force-finish " + this.stackID(o)), this.stackToTree(o.forceAll());
    }
    if (this.recovering) {
      let o = this.recovering == 1 ? 1 : this.recovering * 3;
      if (i.length > o)
        for (i.sort((l, a) => a.score - l.score); i.length > o; )
          i.pop();
      i.some((l) => l.reducePos > t) && this.recovering--;
    } else if (i.length > 1) {
      e: for (let o = 0; o < i.length - 1; o++) {
        let l = i[o];
        for (let a = o + 1; a < i.length; a++) {
          let c = i[a];
          if (l.sameState(c) || l.buffer.length > 500 && c.buffer.length > 500)
            if ((l.score - c.score || l.buffer.length - c.buffer.length) > 0)
              i.splice(a--, 1);
            else {
              i.splice(o--, 1);
              continue e;
            }
        }
      }
      i.length > 12 && i.splice(
        12,
        i.length - 12
        /* Rec.MaxStackCount */
      );
    }
    this.minStackPos = i[0].pos;
    for (let o = 1; o < i.length; o++)
      i[o].pos < this.minStackPos && (this.minStackPos = i[o].pos);
    return null;
  }
  stopAt(e) {
    if (this.stoppedAt != null && this.stoppedAt < e)
      throw new RangeError("Can't move stoppedAt forward");
    this.stoppedAt = e;
  }
  // Returns an updated version of the given stack, or null if the
  // stack can't advance normally. When `split` and `stacks` are
  // given, stacks split off by ambiguous operations will be pushed to
  // `split`, or added to `stacks` if they move `pos` forward.
  advanceStack(e, t, i) {
    let r = e.pos, { parser: s } = this, o = pt ? this.stackID(e) + " -> " : "";
    if (this.stoppedAt != null && r > this.stoppedAt)
      return e.forceReduce() ? e : null;
    if (this.fragments) {
      let c = e.curContext && e.curContext.tracker.strict, h = c ? e.curContext.hash : 0;
      for (let f = this.fragments.nodeAt(r); f; ) {
        let u = this.parser.nodeSet.types[f.type.id] == f.type ? s.getGoto(e.state, f.type.id) : -1;
        if (u > -1 && f.length && (!c || (f.prop(J.contextHash) || 0) == h))
          return e.useNode(f, u), pt && console.log(o + this.stackID(e) + ` (via reuse of ${s.getName(f.type.id)})`), !0;
        if (!(f instanceof me) || f.children.length == 0 || f.positions[0] > 0)
          break;
        let d = f.children[0];
        if (d instanceof me && f.positions[0] == 0)
          f = d;
        else
          break;
      }
    }
    let l = s.stateSlot(
      e.state,
      4
      /* ParseState.DefaultReduce */
    );
    if (l > 0)
      return e.reduce(l), pt && console.log(o + this.stackID(e) + ` (via always-reduce ${s.getName(
        l & 65535
        /* Action.ValueMask */
      )})`), !0;
    if (e.stack.length >= 8400)
      for (; e.stack.length > 6e3 && e.forceReduce(); )
        ;
    let a = this.tokens.getActions(e);
    for (let c = 0; c < a.length; ) {
      let h = a[c++], f = a[c++], u = a[c++], d = c == a.length || !i, O = d ? e : e.split(), p = this.tokens.mainToken;
      if (O.apply(h, f, p ? p.start : O.pos, u), pt && console.log(o + this.stackID(O) + ` (via ${(h & 65536) == 0 ? "shift" : `reduce of ${s.getName(
        h & 65535
        /* Action.ValueMask */
      )}`} for ${s.getName(f)} @ ${r}${O == e ? "" : ", split"})`), d)
        return !0;
      O.pos > r ? t.push(O) : i.push(O);
    }
    return !1;
  }
  // Advance a given stack forward as far as it will go. Returns the
  // (possibly updated) stack if it got stuck, or null if it moved
  // forward and was given to `pushStackDedup`.
  advanceFully(e, t) {
    let i = e.pos;
    for (; ; ) {
      if (!this.advanceStack(e, null, null))
        return !1;
      if (e.pos > i)
        return Ep(e, t), !0;
    }
  }
  runRecovery(e, t, i) {
    let r = null, s = !1;
    for (let o = 0; o < e.length; o++) {
      let l = e[o], a = t[o << 1], c = t[(o << 1) + 1], h = pt ? this.stackID(l) + " -> " : "";
      if (l.deadEnd && (s || (s = !0, l.restart(), pt && console.log(h + this.stackID(l) + " (restarted)"), this.advanceFully(l, i))))
        continue;
      let f = l.split(), u = h;
      for (let d = 0; f.forceReduce() && d < 10 && (pt && console.log(u + this.stackID(f) + " (via force-reduce)"), !this.advanceFully(f, i)); d++)
        pt && (u = this.stackID(f) + " -> ");
      for (let d of l.recoverByInsert(a))
        pt && console.log(h + this.stackID(d) + " (via recover-insert)"), this.advanceFully(d, i);
      this.stream.end > l.pos ? (c == l.pos && (c++, a = 0), l.recoverByDelete(a, c), pt && console.log(h + this.stackID(l) + ` (via recover-delete ${this.parser.getName(a)})`), Ep(l, i)) : (!r || r.score < l.score) && (r = l);
    }
    return r;
  }
  // Convert the stack's buffer to a syntax tree.
  stackToTree(e) {
    return e.close(), me.build({
      buffer: Ml.create(e),
      nodeSet: this.parser.nodeSet,
      topID: this.topTerm,
      maxBufferLength: this.parser.bufferLength,
      reused: this.reused,
      start: this.ranges[0].from,
      length: e.pos - this.ranges[0].from,
      minRepeatType: this.parser.minRepeatTerm
    });
  }
  stackID(e) {
    let t = (ac || (ac = /* @__PURE__ */ new WeakMap())).get(e);
    return t || ac.set(e, t = String.fromCodePoint(this.nextStackID++)), t + e;
  }
}
function Ep(n, e) {
  for (let t = 0; t < e.length; t++) {
    let i = e[t];
    if (i.pos == n.pos && i.sameState(n)) {
      e[t].score < n.score && (e[t] = n);
      return;
    }
  }
  e.push(n);
}
class PA {
  constructor(e, t, i) {
    this.source = e, this.flags = t, this.disabled = i;
  }
  allows(e) {
    return !this.disabled || this.disabled[e] == 0;
  }
}
const cc = (n) => n;
class Ns {
  /**
  Define a context tracker.
  */
  constructor(e) {
    this.start = e.start, this.shift = e.shift || cc, this.reduce = e.reduce || cc, this.reuse = e.reuse || cc, this.hash = e.hash || (() => 0), this.strict = e.strict !== !1;
  }
}
class jt extends hu {
  /**
  @internal
  */
  constructor(e) {
    if (super(), this.wrappers = [], e.version != 14)
      throw new RangeError(`Parser version (${e.version}) doesn't match runtime version (14)`);
    let t = e.nodeNames.split(" ");
    this.minRepeatTerm = t.length;
    for (let l = 0; l < e.repeatNodeCount; l++)
      t.push("");
    let i = Object.keys(e.topRules).map((l) => e.topRules[l][1]), r = [];
    for (let l = 0; l < t.length; l++)
      r.push([]);
    function s(l, a, c) {
      r[l].push([a, a.deserialize(String(c))]);
    }
    if (e.nodeProps)
      for (let l of e.nodeProps) {
        let a = l[0];
        typeof a == "string" && (a = J[a]);
        for (let c = 1; c < l.length; ) {
          let h = l[c++];
          if (h >= 0)
            s(h, a, l[c++]);
          else {
            let f = l[c + -h];
            for (let u = -h; u > 0; u--)
              s(l[c++], a, f);
            c++;
          }
        }
      }
    this.nodeSet = new Ws(t.map((l, a) => We.define({
      name: a >= this.minRepeatTerm ? void 0 : l,
      id: a,
      props: r[a],
      top: i.indexOf(a) > -1,
      error: a == 0,
      skipped: e.skippedNodes && e.skippedNodes.indexOf(a) > -1
    }))), e.propSources && (this.nodeSet = this.nodeSet.extend(...e.propSources)), this.strict = !1, this.bufferLength = Wy;
    let o = Wr(e.tokenData);
    this.context = e.context, this.specializerSpecs = e.specialized || [], this.specialized = new Uint16Array(this.specializerSpecs.length);
    for (let l = 0; l < this.specializerSpecs.length; l++)
      this.specialized[l] = this.specializerSpecs[l].term;
    this.specializers = this.specializerSpecs.map(Ap), this.states = Wr(e.states, Uint32Array), this.data = Wr(e.stateData), this.goto = Wr(e.goto), this.maxTerm = e.maxTerm, this.tokenizers = e.tokenizers.map((l) => typeof l == "number" ? new Fi(o, l) : l), this.topRules = e.topRules, this.dialects = e.dialects || {}, this.dynamicPrecedences = e.dynamicPrecedences || null, this.tokenPrecTable = e.tokenPrec, this.termNames = e.termNames || null, this.maxNode = this.nodeSet.types.length - 1, this.dialect = this.parseDialect(), this.top = this.topRules[Object.keys(this.topRules)[0]];
  }
  createParse(e, t, i) {
    let r = new vA(this, e, t, i);
    for (let s of this.wrappers)
      r = s(r, e, t, i);
    return r;
  }
  /**
  Get a goto table entry @internal
  */
  getGoto(e, t, i = !1) {
    let r = this.goto;
    if (t >= r[0])
      return -1;
    for (let s = r[t + 1]; ; ) {
      let o = r[s++], l = o & 1, a = r[s++];
      if (l && i)
        return a;
      for (let c = s + (o >> 1); s < c; s++)
        if (r[s] == e)
          return a;
      if (l)
        return -1;
    }
  }
  /**
  Check if this state has an action for a given terminal @internal
  */
  hasAction(e, t) {
    let i = this.data;
    for (let r = 0; r < 2; r++)
      for (let s = this.stateSlot(
        e,
        r ? 2 : 1
        /* ParseState.Actions */
      ), o; ; s += 3) {
        if ((o = i[s]) == 65535)
          if (i[s + 1] == 1)
            o = i[s = vn(i, s + 2)];
          else {
            if (i[s + 1] == 2)
              return vn(i, s + 2);
            break;
          }
        if (o == t || o == 0)
          return vn(i, s + 1);
      }
    return 0;
  }
  /**
  @internal
  */
  stateSlot(e, t) {
    return this.states[e * 6 + t];
  }
  /**
  @internal
  */
  stateFlag(e, t) {
    return (this.stateSlot(
      e,
      0
      /* ParseState.Flags */
    ) & t) > 0;
  }
  /**
  @internal
  */
  validAction(e, t) {
    return !!this.allActions(e, (i) => i == t ? !0 : null);
  }
  /**
  @internal
  */
  allActions(e, t) {
    let i = this.stateSlot(
      e,
      4
      /* ParseState.DefaultReduce */
    ), r = i ? t(i) : void 0;
    for (let s = this.stateSlot(
      e,
      1
      /* ParseState.Actions */
    ); r == null; s += 3) {
      if (this.data[s] == 65535)
        if (this.data[s + 1] == 1)
          s = vn(this.data, s + 2);
        else
          break;
      r = t(vn(this.data, s + 1));
    }
    return r;
  }
  /**
  Get the states that can follow this one through shift actions or
  goto jumps. @internal
  */
  nextStates(e) {
    let t = [];
    for (let i = this.stateSlot(
      e,
      1
      /* ParseState.Actions */
    ); ; i += 3) {
      if (this.data[i] == 65535)
        if (this.data[i + 1] == 1)
          i = vn(this.data, i + 2);
        else
          break;
      if ((this.data[i + 2] & 1) == 0) {
        let r = this.data[i + 1];
        t.some((s, o) => o & 1 && s == r) || t.push(this.data[i], r);
      }
    }
    return t;
  }
  /**
  Configure the parser. Returns a new parser instance that has the
  given settings modified. Settings not provided in `config` are
  kept from the original parser.
  */
  configure(e) {
    let t = Object.assign(Object.create(jt.prototype), this);
    if (e.props && (t.nodeSet = this.nodeSet.extend(...e.props)), e.top) {
      let i = this.topRules[e.top];
      if (!i)
        throw new RangeError(`Invalid top rule name ${e.top}`);
      t.top = i;
    }
    return e.tokenizers && (t.tokenizers = this.tokenizers.map((i) => {
      let r = e.tokenizers.find((s) => s.from == i);
      return r ? r.to : i;
    })), e.specializers && (t.specializers = this.specializers.slice(), t.specializerSpecs = this.specializerSpecs.map((i, r) => {
      let s = e.specializers.find((l) => l.from == i.external);
      if (!s)
        return i;
      let o = Object.assign(Object.assign({}, i), { external: s.to });
      return t.specializers[r] = Ap(o), o;
    })), e.contextTracker && (t.context = e.contextTracker), e.dialect && (t.dialect = this.parseDialect(e.dialect)), e.strict != null && (t.strict = e.strict), e.wrap && (t.wrappers = t.wrappers.concat(e.wrap)), e.bufferLength != null && (t.bufferLength = e.bufferLength), t;
  }
  /**
  Tells you whether any [parse wrappers](#lr.ParserConfig.wrap)
  are registered for this parser.
  */
  hasWrappers() {
    return this.wrappers.length > 0;
  }
  /**
  Returns the name associated with a given term. This will only
  work for all terms when the parser was generated with the
  `--names` option. By default, only the names of tagged terms are
  stored.
  */
  getName(e) {
    return this.termNames ? this.termNames[e] : String(e <= this.maxNode && this.nodeSet.types[e].name || e);
  }
  /**
  The eof term id is always allocated directly after the node
  types. @internal
  */
  get eofTerm() {
    return this.maxNode + 1;
  }
  /**
  The type of top node produced by the parser.
  */
  get topNode() {
    return this.nodeSet.types[this.top[1]];
  }
  /**
  @internal
  */
  dynamicPrecedence(e) {
    let t = this.dynamicPrecedences;
    return t == null ? 0 : t[e] || 0;
  }
  /**
  @internal
  */
  parseDialect(e) {
    let t = Object.keys(this.dialects), i = t.map(() => !1);
    if (e)
      for (let s of e.split(" ")) {
        let o = t.indexOf(s);
        o >= 0 && (i[o] = !0);
      }
    let r = null;
    for (let s = 0; s < t.length; s++)
      if (!i[s])
        for (let o = this.dialects[t[s]], l; (l = this.data[o++]) != 65535; )
          (r || (r = new Uint8Array(this.maxTerm + 1)))[l] = 1;
    return new PA(e, i, r);
  }
  /**
  Used by the output of the parser generator. Not available to
  user code. @hide
  */
  static deserialize(e) {
    return new jt(e);
  }
}
function vn(n, e) {
  return n[e] | n[e + 1] << 16;
}
function $A(n) {
  let e = null;
  for (let t of n) {
    let i = t.p.stoppedAt;
    (t.pos == t.p.stream.end || i != null && t.pos > i) && t.p.parser.stateFlag(
      t.state,
      2
      /* StateFlag.Accepting */
    ) && (!e || e.score < t.score) && (e = t);
  }
  return e;
}
function Ap(n) {
  if (n.external) {
    let e = n.extend ? 1 : 0;
    return (t, i) => n.external(t, i) << 1 | e;
  }
  return n.get;
}
const TA = 315, CA = 316, _p = 1, RA = 2, EA = 3, AA = 4, _A = 317, XA = 319, qA = 320, ZA = 5, MA = 6, LA = 0, Jh = [
  9,
  10,
  11,
  12,
  13,
  32,
  133,
  160,
  5760,
  8192,
  8193,
  8194,
  8195,
  8196,
  8197,
  8198,
  8199,
  8200,
  8201,
  8202,
  8232,
  8233,
  8239,
  8287,
  12288
], hb = 125, VA = 59, ef = 47, BA = 42, WA = 43, zA = 45, DA = 60, IA = 44, jA = 63, UA = 46, YA = 91, NA = new Ns({
  start: !1,
  shift(n, e) {
    return e == ZA || e == MA || e == XA ? n : e == qA;
  },
  strict: !1
}), GA = new Ee((n, e) => {
  let { next: t } = n;
  (t == hb || t == -1 || e.context) && n.acceptToken(_A);
}, { contextual: !0, fallback: !0 }), FA = new Ee((n, e) => {
  let { next: t } = n, i;
  Jh.indexOf(t) > -1 || t == ef && ((i = n.peek(1)) == ef || i == BA) || t != hb && t != VA && t != -1 && !e.context && n.acceptToken(TA);
}, { contextual: !0 }), HA = new Ee((n, e) => {
  n.next == YA && !e.context && n.acceptToken(CA);
}, { contextual: !0 }), KA = new Ee((n, e) => {
  let { next: t } = n;
  if (t == WA || t == zA) {
    if (n.advance(), t == n.next) {
      n.advance();
      let i = !e.context && e.canShift(_p);
      n.acceptToken(i ? _p : RA);
    }
  } else t == jA && n.peek(1) == UA && (n.advance(), n.advance(), (n.next < 48 || n.next > 57) && n.acceptToken(EA));
}, { contextual: !0 });
function hc(n, e) {
  return n >= 65 && n <= 90 || n >= 97 && n <= 122 || n == 95 || n >= 192 || !e && n >= 48 && n <= 57;
}
const JA = new Ee((n, e) => {
  if (n.next != DA || !e.dialectEnabled(LA) || (n.advance(), n.next == ef)) return;
  let t = 0;
  for (; Jh.indexOf(n.next) > -1; )
    n.advance(), t++;
  if (hc(n.next, !0)) {
    for (n.advance(), t++; hc(n.next, !1); )
      n.advance(), t++;
    for (; Jh.indexOf(n.next) > -1; )
      n.advance(), t++;
    if (n.next == IA) return;
    for (let i = 0; ; i++) {
      if (i == 7) {
        if (!hc(n.next, !0)) return;
        break;
      }
      if (n.next != "extends".charCodeAt(i)) break;
      n.advance(), t++;
    }
  }
  n.acceptToken(AA, -t);
}), e5 = Nt({
  "get set async static": g.modifier,
  "for while do if else switch try catch finally return throw break continue default case": g.controlKeyword,
  "in of await yield void typeof delete instanceof as satisfies": g.operatorKeyword,
  "let var const using function class extends": g.definitionKeyword,
  "import export from": g.moduleKeyword,
  "with debugger new": g.keyword,
  TemplateString: g.special(g.string),
  super: g.atom,
  BooleanLiteral: g.bool,
  this: g.self,
  null: g.null,
  Star: g.modifier,
  VariableName: g.variableName,
  "CallExpression/VariableName TaggedTemplateExpression/VariableName": g.function(g.variableName),
  VariableDefinition: g.definition(g.variableName),
  Label: g.labelName,
  PropertyName: g.propertyName,
  PrivatePropertyName: g.special(g.propertyName),
  "CallExpression/MemberExpression/PropertyName": g.function(g.propertyName),
  "FunctionDeclaration/VariableDefinition": g.function(g.definition(g.variableName)),
  "ClassDeclaration/VariableDefinition": g.definition(g.className),
  "NewExpression/VariableName": g.className,
  PropertyDefinition: g.definition(g.propertyName),
  PrivatePropertyDefinition: g.definition(g.special(g.propertyName)),
  UpdateOp: g.updateOperator,
  "LineComment Hashbang": g.lineComment,
  BlockComment: g.blockComment,
  Number: g.number,
  String: g.string,
  Escape: g.escape,
  ArithOp: g.arithmeticOperator,
  LogicOp: g.logicOperator,
  BitOp: g.bitwiseOperator,
  CompareOp: g.compareOperator,
  RegExp: g.regexp,
  Equals: g.definitionOperator,
  Arrow: g.function(g.punctuation),
  ": Spread": g.punctuation,
  "( )": g.paren,
  "[ ]": g.squareBracket,
  "{ }": g.brace,
  "InterpolationStart InterpolationEnd": g.special(g.brace),
  ".": g.derefOperator,
  ", ;": g.separator,
  "@": g.meta,
  TypeName: g.typeName,
  TypeDefinition: g.definition(g.typeName),
  "type enum interface implements namespace module declare": g.definitionKeyword,
  "abstract global Privacy readonly override": g.modifier,
  "is keyof unique infer asserts": g.operatorKeyword,
  JSXAttributeValue: g.attributeValue,
  JSXText: g.content,
  "JSXStartTag JSXStartCloseTag JSXSelfCloseEndTag JSXEndTag": g.angleBracket,
  "JSXIdentifier JSXNameSpacedName": g.tagName,
  "JSXAttribute/JSXIdentifier JSXAttribute/JSXNameSpacedName": g.attributeName,
  "JSXBuiltin/JSXIdentifier": g.standard(g.tagName)
}), t5 = { __proto__: null, export: 20, as: 25, from: 33, default: 36, async: 41, function: 42, in: 52, out: 55, const: 56, extends: 60, this: 64, true: 72, false: 72, null: 84, void: 88, typeof: 92, super: 108, new: 142, delete: 154, yield: 163, await: 167, class: 172, public: 235, private: 235, protected: 235, readonly: 237, instanceof: 256, satisfies: 259, import: 292, keyof: 349, unique: 353, infer: 359, asserts: 395, is: 397, abstract: 417, implements: 419, type: 421, let: 424, var: 426, using: 429, interface: 435, enum: 439, namespace: 445, module: 447, declare: 451, global: 455, for: 474, of: 483, while: 486, with: 490, do: 494, if: 498, else: 500, switch: 504, case: 510, try: 516, catch: 520, finally: 524, return: 528, throw: 532, break: 536, continue: 540, debugger: 544 }, n5 = { __proto__: null, async: 129, get: 131, set: 133, declare: 195, public: 197, private: 197, protected: 197, static: 199, abstract: 201, override: 203, readonly: 209, accessor: 211, new: 401 }, i5 = { __proto__: null, "<": 193 }, r5 = jt.deserialize({
  version: 14,
  states: "$EOQ%TQlOOO%[QlOOO'_QpOOP(lO`OOO*zQ!0MxO'#CiO+RO#tO'#CjO+aO&jO'#CjO+oO#@ItO'#DaO.QQlO'#DgO.bQlO'#DrO%[QlO'#DzO0fQlO'#ESOOQ!0Lf'#E['#E[O1PQ`O'#EXOOQO'#Ep'#EpOOQO'#Ik'#IkO1XQ`O'#GsO1dQ`O'#EoO1iQ`O'#EoO3hQ!0MxO'#JqO6[Q!0MxO'#JrO6uQ`O'#F]O6zQ,UO'#FtOOQ!0Lf'#Ff'#FfO7VO7dO'#FfO7eQMhO'#F|O9[Q`O'#F{OOQ!0Lf'#Jr'#JrOOQ!0Lb'#Jq'#JqO9aQ`O'#GwOOQ['#K^'#K^O9lQ`O'#IXO9qQ!0LrO'#IYOOQ['#J_'#J_OOQ['#I^'#I^Q`QlOOQ`QlOOO9yQ!L^O'#DvO:QQlO'#EOO:XQlO'#EQO9gQ`O'#GsO:`QMhO'#CoO:nQ`O'#EnO:yQ`O'#EyO;OQMhO'#FeO;mQ`O'#GsOOQO'#K_'#K_O;rQ`O'#K_O<QQ`O'#G{O<QQ`O'#G|O<QQ`O'#HOO9gQ`O'#HRO<wQ`O'#HUO>`Q`O'#CeO>pQ`O'#HbO>xQ`O'#HhO>xQ`O'#HjO`QlO'#HlO>xQ`O'#HnO>xQ`O'#HqO>}Q`O'#HwO?SQ!0LsO'#H}O%[QlO'#IPO?_Q!0LsO'#IRO?jQ!0LsO'#ITO9qQ!0LrO'#IVO?uQ!0MxO'#CiO@wQpO'#DlQOQ`OOO%[QlO'#EQOA_Q`O'#ETO:`QMhO'#EnOAjQ`O'#EnOAuQ!bO'#FeOOQ['#Cg'#CgOOQ!0Lb'#Dq'#DqOOQ!0Lb'#Ju'#JuO%[QlO'#JuOOQO'#Jx'#JxOOQO'#Ig'#IgOBuQpO'#EgOOQ!0Lb'#Ef'#EfOOQ!0Lb'#J|'#J|OCqQ!0MSO'#EgOC{QpO'#EWOOQO'#Jw'#JwODaQpO'#JxOEnQpO'#EWOC{QpO'#EgPE{O&2DjO'#CbPOOO)CD|)CD|OOOO'#I_'#I_OFWO#tO,59UOOQ!0Lh,59U,59UOOOO'#I`'#I`OFfO&jO,59UOFtQ!L^O'#DcOOOO'#Ib'#IbOF{O#@ItO,59{OOQ!0Lf,59{,59{OGZQlO'#IcOGnQ`O'#JsOImQ!fO'#JsO+}QlO'#JsOItQ`O,5:ROJ[Q`O'#EpOJiQ`O'#KSOJtQ`O'#KROJtQ`O'#KROJ|Q`O,5;^OKRQ`O'#KQOOQ!0Ln,5:^,5:^OKYQlO,5:^OMWQ!0MxO,5:fOMwQ`O,5:nONbQ!0LrO'#KPONiQ`O'#KOO9aQ`O'#KOON}Q`O'#KOO! VQ`O,5;]O! [Q`O'#KOO!#aQ!fO'#JrOOQ!0Lh'#Ci'#CiO%[QlO'#ESO!$PQ!fO,5:sOOQS'#Jy'#JyOOQO-E<i-E<iO9gQ`O,5=_O!$gQ`O,5=_O!$lQlO,5;ZO!&oQMhO'#EkO!(YQ`O,5;ZO!(_QlO'#DyO!(iQpO,5;dO!(qQpO,5;dO%[QlO,5;dOOQ['#FT'#FTOOQ['#FV'#FVO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eOOQ['#FZ'#FZO!)PQlO,5;tOOQ!0Lf,5;y,5;yOOQ!0Lf,5;z,5;zOOQ!0Lf,5;|,5;|O%[QlO'#IoO!+SQ!0LrO,5<iO%[QlO,5;eO!&oQMhO,5;eO!+qQMhO,5;eO!-cQMhO'#E^O%[QlO,5;wOOQ!0Lf,5;{,5;{O!-jQ,UO'#FjO!.gQ,UO'#KWO!.RQ,UO'#KWO!.nQ,UO'#KWOOQO'#KW'#KWO!/SQ,UO,5<SOOOW,5<`,5<`O!/eQlO'#FvOOOW'#In'#InO7VO7dO,5<QO!/lQ,UO'#FxOOQ!0Lf,5<Q,5<QO!0]Q$IUO'#CyOOQ!0Lh'#C}'#C}O!0pO#@ItO'#DRO!1^QMjO,5<eO!1eQ`O,5<hO!3QQ(CWO'#GXO!3_Q`O'#GYO!3dQ`O'#GYO!5SQ(CWO'#G^O!6XQpO'#GbOOQO'#Gn'#GnO!+xQMhO'#GmOOQO'#Gp'#GpO!+xQMhO'#GoO!6zQ$IUO'#JkOOQ!0Lh'#Jk'#JkO!7UQ`O'#JjO!7dQ`O'#JiO!7lQ`O'#CuOOQ!0Lh'#C{'#C{O!7}Q`O'#C}OOQ!0Lh'#DV'#DVOOQ!0Lh'#DX'#DXO1SQ`O'#DZO!+xQMhO'#GPO!+xQMhO'#GRO!8SQ`O'#GTO!8XQ`O'#GUO!3dQ`O'#G[O!+xQMhO'#GaO<QQ`O'#JjO!8^Q`O'#EqO!8{Q`O,5<gOOQ!0Lb'#Cr'#CrO!9TQ`O'#ErO!9}QpO'#EsOOQ!0Lb'#KQ'#KQO!:UQ!0LrO'#K`O9qQ!0LrO,5=cO`QlO,5>sOOQ['#Jg'#JgOOQ[,5>t,5>tOOQ[-E<[-E<[O!<TQ!0MxO,5:bO!9xQpO,5:`O!>nQ!0MxO,5:jO%[QlO,5:jO!AUQ!0MxO,5:lOOQO,5@y,5@yO!AuQMhO,5=_O!BTQ!0LrO'#JhO9[Q`O'#JhO!BfQ!0LrO,59ZO!BqQpO,59ZO!ByQMhO,59ZO:`QMhO,59ZO!CUQ`O,5;ZO!C^Q`O'#HaO!CrQ`O'#KcO%[QlO,5;}O!9xQpO,5<PO!CzQ`O,5=zO!DPQ`O,5=zO!DUQ`O,5=zO9qQ!0LrO,5=zO<QQ`O,5=jOOQO'#Cy'#CyO!DdQpO,5=gO!DlQMhO,5=hO!DwQ`O,5=jO!D|Q!bO,5=mO!EUQ`O'#K_O>}Q`O'#HWO9gQ`O'#HYO!EZQ`O'#HYO:`QMhO'#H[O!E`Q`O'#H[OOQ[,5=p,5=pO!EeQ`O'#H]O!EvQ`O'#CoO!E{Q`O,59PO!FVQ`O,59PO!H[QlO,59POOQ[,59P,59PO!HlQ!0LrO,59PO%[QlO,59PO!JwQlO'#HdOOQ['#He'#HeOOQ['#Hf'#HfO`QlO,5=|O!K_Q`O,5=|O`QlO,5>SO`QlO,5>UO!KdQ`O,5>WO`QlO,5>YO!KiQ`O,5>]O!KnQlO,5>cOOQ[,5>i,5>iO%[QlO,5>iO9qQ!0LrO,5>kOOQ[,5>m,5>mO# xQ`O,5>mOOQ[,5>o,5>oO# xQ`O,5>oOOQ[,5>q,5>qO#!fQpO'#D_O%[QlO'#JuO##XQpO'#JuO##cQpO'#DmO##tQpO'#DmO#&VQlO'#DmO#&^Q`O'#JtO#&fQ`O,5:WO#&kQ`O'#EtO#&yQ`O'#KTO#'RQ`O,5;_O#'WQpO'#DmO#'eQpO'#EVOOQ!0Lf,5:o,5:oO%[QlO,5:oO#'lQ`O,5:oO>}Q`O,5;YO!BqQpO,5;YO!ByQMhO,5;YO:`QMhO,5;YO#'tQ`O,5@aO#'yQ07dO,5:sOOQO-E<e-E<eO#)PQ!0MSO,5;ROC{QpO,5:rO#)ZQpO,5:rOC{QpO,5;RO!BfQ!0LrO,5:rOOQ!0Lb'#Ej'#EjOOQO,5;R,5;RO%[QlO,5;RO#)hQ!0LrO,5;RO#)sQ!0LrO,5;RO!BqQpO,5:rOOQO,5;X,5;XO#*RQ!0LrO,5;RPOOO'#I]'#I]P#*gO&2DjO,58|POOO,58|,58|OOOO-E<]-E<]OOQ!0Lh1G.p1G.pOOOO-E<^-E<^OOOO,59},59}O#*rQ!bO,59}OOOO-E<`-E<`OOQ!0Lf1G/g1G/gO#*wQ!fO,5>}O+}QlO,5>}OOQO,5?T,5?TO#+RQlO'#IcOOQO-E<a-E<aO#+`Q`O,5@_O#+hQ!fO,5@_O#+oQ`O,5@mOOQ!0Lf1G/m1G/mO%[QlO,5@nO#+wQ`O'#IiOOQO-E<g-E<gO#+oQ`O,5@mOOQ!0Lb1G0x1G0xOOQ!0Ln1G/x1G/xOOQ!0Ln1G0Y1G0YO%[QlO,5@kO#,]Q!0LrO,5@kO#,nQ!0LrO,5@kO#,uQ`O,5@jO9aQ`O,5@jO#,}Q`O,5@jO#-]Q`O'#IlO#,uQ`O,5@jOOQ!0Lb1G0w1G0wO!(iQpO,5:uO!(tQpO,5:uOOQS,5:w,5:wO#-}QdO,5:wO#.VQMhO1G2yO9gQ`O1G2yOOQ!0Lf1G0u1G0uO#.eQ!0MxO1G0uO#/jQ!0MvO,5;VOOQ!0Lh'#GW'#GWO#0WQ!0MzO'#JkO!$lQlO1G0uO#2cQ!fO'#JvO%[QlO'#JvO#2mQ`O,5:eOOQ!0Lh'#D_'#D_OOQ!0Lf1G1O1G1OO%[QlO1G1OOOQ!0Lf1G1f1G1fO#2rQ`O1G1OO#5WQ!0MxO1G1PO#5_Q!0MxO1G1PO#7uQ!0MxO1G1PO#7|Q!0MxO1G1PO#:dQ!0MxO1G1PO#<zQ!0MxO1G1PO#=RQ!0MxO1G1PO#=YQ!0MxO1G1PO#?pQ!0MxO1G1PO#?wQ!0MxO1G1PO#BUQ?MtO'#CiO#DPQ?MtO1G1`O#DWQ?MtO'#JrO#DkQ!0MxO,5?ZOOQ!0Lb-E<m-E<mO#FxQ!0MxO1G1PO#GuQ!0MzO1G1POOQ!0Lf1G1P1G1PO#HxQMjO'#J{O#ISQ`O,5:xO#IXQ!0MxO1G1cO#I{Q,UO,5<WO#JTQ,UO,5<XO#J]Q,UO'#FoO#JtQ`O'#FnOOQO'#KX'#KXOOQO'#Im'#ImO#JyQ,UO1G1nOOQ!0Lf1G1n1G1nOOOW1G1y1G1yO#K[Q?MtO'#JqO#KfQ`O,5<bO!)PQlO,5<bOOOW-E<l-E<lOOQ!0Lf1G1l1G1lO#KkQpO'#KWOOQ!0Lf,5<d,5<dO#KsQpO,5<dO#KxQMhO'#DTOOOO'#Ia'#IaO#LPO#@ItO,59mOOQ!0Lh,59m,59mO%[QlO1G2PO!8XQ`O'#IqO#L[Q`O,5<zOOQ!0Lh,5<w,5<wO!+xQMhO'#ItO#LxQMjO,5=XO!+xQMhO'#IvO#MkQMjO,5=ZO!&oQMhO,5=]OOQO1G2S1G2SO#MuQ!dO'#CrO#NYQ(CWO'#ErO$ _QpO'#GbO$ uQ!dO,5<sO$ |Q`O'#KZO9aQ`O'#KZO$![Q`O,5<uO!+xQMhO,5<tO$!aQ`O'#GZO$!rQ`O,5<tO$!wQ!dO'#GWO$#UQ!dO'#K[O$#`Q`O'#K[O!&oQMhO'#K[O$#eQ`O,5<xO$#jQlO'#JuO$#tQpO'#GcO##tQpO'#GcO$$VQ`O'#GgO!3dQ`O'#GkO$$[Q!0LrO'#IsO$$gQpO,5<|OOQ!0Lp,5<|,5<|O$$nQpO'#GcO$${QpO'#GdO$%^QpO'#GdO$%cQMjO,5=XO$%sQMjO,5=ZOOQ!0Lh,5=^,5=^O!+xQMhO,5@UO!+xQMhO,5@UO$&TQ`O'#IxO$&iQ`O,5@TO$&qQ`O,59aOOQ!0Lh,59i,59iO$'hQ$IYO,59uOOQ!0Lh'#Jo'#JoO$(ZQMjO,5<kO$(|QMjO,5<mO@oQ`O,5<oOOQ!0Lh,5<p,5<pO$)WQ`O,5<vO$)]QMjO,5<{O$)mQ`O,5@UO$){Q`O'#KOO!$lQlO1G2RO$*QQ`O1G2RO9aQ`O'#KRO9aQ`O'#EtO%[QlO'#EtO9aQ`O'#IzO$*VQ!0LrO,5@zOOQ[1G2}1G2}OOQ[1G4_1G4_OOQ!0Lf1G/|1G/|OOQ!0Lf1G/z1G/zO$,XQ!0MxO1G0UOOQ[1G2y1G2yO!&oQMhO1G2yO%[QlO1G2yO#.YQ`O1G2yO$.]QMhO'#EkOOQ!0Lb,5@S,5@SO$.jQ!0LrO,5@SOOQ[1G.u1G.uO!BfQ!0LrO1G.uO!BqQpO1G.uO!ByQMhO1G.uO$.{Q`O1G0uO$/QQ`O'#CiO$/]Q`O'#KdO$/eQ`O,5={O$/jQ`O'#KdO$/oQ`O'#KdO$/}Q`O'#JQO$0]Q`O,5@}O$0eQ!fO1G1iOOQ!0Lf1G1k1G1kO9gQ`O1G3fO@oQ`O1G3fO$0lQ`O1G3fO$0qQ`O1G3fOOQ[1G3f1G3fO!DwQ`O1G3UO!&oQMhO1G3RO$0vQ`O1G3ROOQ[1G3S1G3SO!&oQMhO1G3SO$0{Q`O1G3SO$1TQpO'#HQOOQ[1G3U1G3UO!6SQpO'#I|O!D|Q!bO1G3XOOQ[1G3X1G3XOOQ[,5=r,5=rO$1]QMhO,5=tO9gQ`O,5=tO$$VQ`O,5=vO9[Q`O,5=vO!BqQpO,5=vO!ByQMhO,5=vO:`QMhO,5=vO$1kQ`O'#KbO$1vQ`O,5=wOOQ[1G.k1G.kO$1{Q!0LrO1G.kO@oQ`O1G.kO$2WQ`O1G.kO9qQ!0LrO1G.kO$4`Q!fO,5APO$4mQ`O,5APO9aQ`O,5APO$4xQlO,5>OO$5PQ`O,5>OOOQ[1G3h1G3hO`QlO1G3hOOQ[1G3n1G3nOOQ[1G3p1G3pO>xQ`O1G3rO$5UQlO1G3tO$9YQlO'#HsOOQ[1G3w1G3wO$9gQ`O'#HyO>}Q`O'#H{OOQ[1G3}1G3}O$9oQlO1G3}O9qQ!0LrO1G4TOOQ[1G4V1G4VOOQ!0Lb'#G_'#G_O9qQ!0LrO1G4XO9qQ!0LrO1G4ZO$=vQ`O,5@aO!)PQlO,5;`O9aQ`O,5;`O>}Q`O,5:XO!)PQlO,5:XO!BqQpO,5:XO$={Q?MtO,5:XOOQO,5;`,5;`O$>VQpO'#IdO$>mQ`O,5@`OOQ!0Lf1G/r1G/rO$>uQpO'#IjO$?PQ`O,5@oOOQ!0Lb1G0y1G0yO##tQpO,5:XOOQO'#If'#IfO$?XQpO,5:qOOQ!0Ln,5:q,5:qO#'oQ`O1G0ZOOQ!0Lf1G0Z1G0ZO%[QlO1G0ZOOQ!0Lf1G0t1G0tO>}Q`O1G0tO!BqQpO1G0tO!ByQMhO1G0tOOQ!0Lb1G5{1G5{O!BfQ!0LrO1G0^OOQO1G0m1G0mO%[QlO1G0mO$?`Q!0LrO1G0mO$?kQ!0LrO1G0mO!BqQpO1G0^OC{QpO1G0^O$?yQ!0LrO1G0mOOQO1G0^1G0^O$@_Q!0MxO1G0mPOOO-E<Z-E<ZPOOO1G.h1G.hOOOO1G/i1G/iO$@iQ!bO,5<iO$@qQ!fO1G4iOOQO1G4o1G4oO%[QlO,5>}O$@{Q`O1G5yO$ATQ`O1G6XO$A]Q!fO1G6YO9aQ`O,5?TO$AgQ!0MxO1G6VO%[QlO1G6VO$AwQ!0LrO1G6VO$BYQ`O1G6UO$BYQ`O1G6UO9aQ`O1G6UO$BbQ`O,5?WO9aQ`O,5?WOOQO,5?W,5?WO$BvQ`O,5?WO$){Q`O,5?WOOQO-E<j-E<jOOQS1G0a1G0aOOQS1G0c1G0cO#.QQ`O1G0cOOQ[7+(e7+(eO!&oQMhO7+(eO%[QlO7+(eO$CUQ`O7+(eO$CaQMhO7+(eO$CoQ!0MzO,5=XO$EzQ!0MzO,5=ZO$HVQ!0MzO,5=XO$JhQ!0MzO,5=ZO$LyQ!0MzO,59uO% OQ!0MzO,5<kO%#ZQ!0MzO,5<mO%%fQ!0MzO,5<{OOQ!0Lf7+&a7+&aO%'wQ!0MxO7+&aO%(kQlO'#IeO%(xQ`O,5@bO%)QQ!fO,5@bOOQ!0Lf1G0P1G0PO%)[Q`O7+&jOOQ!0Lf7+&j7+&jO%)aQ?MtO,5:fO%[QlO7+&zO%)kQ?MtO,5:bO%)xQ?MtO,5:jO%*SQ?MtO,5:lO%*^QMhO'#IhO%*hQ`O,5@gOOQ!0Lh1G0d1G0dOOQO1G1r1G1rOOQO1G1s1G1sO%*pQ!jO,5<ZO!)PQlO,5<YOOQO-E<k-E<kOOQ!0Lf7+'Y7+'YOOOW7+'e7+'eOOOW1G1|1G1|O%*{Q`O1G1|OOQ!0Lf1G2O1G2OOOOO,59o,59oO%+QQ!dO,59oOOOO-E<_-E<_OOQ!0Lh1G/X1G/XO%+XQ!0MxO7+'kOOQ!0Lh,5?],5?]O%+{QMhO1G2fP%,SQ`O'#IqPOQ!0Lh-E<o-E<oO%,pQMjO,5?`OOQ!0Lh-E<r-E<rO%-cQMjO,5?bOOQ!0Lh-E<t-E<tO%-mQ!dO1G2wO%-tQ!dO'#CrO%.[QMhO'#KRO$#jQlO'#JuOOQ!0Lh1G2_1G2_O%.cQ`O'#IpO%.wQ`O,5@uO%.wQ`O,5@uO%/PQ`O,5@uO%/[Q`O,5@uOOQO1G2a1G2aO%/jQMjO1G2`O!+xQMhO1G2`O%/zQ(CWO'#IrO%0XQ`O,5@vO!&oQMhO,5@vO%0aQ!dO,5@vOOQ!0Lh1G2d1G2dO%2qQ!fO'#CiO%2{Q`O,5=POOQ!0Lb,5<},5<}O%3TQpO,5<}OOQ!0Lb,5=O,5=OOClQ`O,5<}O%3`QpO,5<}OOQ!0Lb,5=R,5=RO$){Q`O,5=VOOQO,5?_,5?_OOQO-E<q-E<qOOQ!0Lp1G2h1G2hO##tQpO,5<}O$#jQlO,5=PO%3nQ`O,5=OO%3yQpO,5=OO!+xQMhO'#ItO%4sQMjO1G2sO!+xQMhO'#IvO%5fQMjO1G2uO%5pQMjO1G5pO%5zQMjO1G5pOOQO,5?d,5?dOOQO-E<v-E<vOOQO1G.{1G.{O!9xQpO,59wO%[QlO,59wOOQ!0Lh,5<j,5<jO%6XQ`O1G2ZO!+xQMhO1G2bO!+xQMhO1G5pO!+xQMhO1G5pO%6^Q!0MxO7+'mOOQ!0Lf7+'m7+'mO!$lQlO7+'mO%7QQ`O,5;`OOQ!0Lb,5?f,5?fOOQ!0Lb-E<x-E<xO%7VQ!dO'#K]O#'oQ`O7+(eO4UQ!fO7+(eO$CXQ`O7+(eO%7aQ!0MvO'#CiO%7tQ!0MvO,5=SO%8fQ`O,5=SO%8nQ`O,5=SOOQ!0Lb1G5n1G5nOOQ[7+$a7+$aO!BfQ!0LrO7+$aO!BqQpO7+$aO!$lQlO7+&aO%8sQ`O'#JPO%9[Q`O,5AOOOQO1G3g1G3gO9gQ`O,5AOO%9[Q`O,5AOO%9dQ`O,5AOOOQO,5?l,5?lOOQO-E=O-E=OOOQ!0Lf7+'T7+'TO%9iQ`O7+)QO9qQ!0LrO7+)QO9gQ`O7+)QO@oQ`O7+)QOOQ[7+(p7+(pO%9nQ!0MvO7+(mO!&oQMhO7+(mO!DrQ`O7+(nOOQ[7+(n7+(nO!&oQMhO7+(nO%9xQ`O'#KaO%:TQ`O,5=lOOQO,5?h,5?hOOQO-E<z-E<zOOQ[7+(s7+(sO%;gQpO'#HZOOQ[1G3`1G3`O!&oQMhO1G3`O%[QlO1G3`O%;nQ`O1G3`O%;yQMhO1G3`O9qQ!0LrO1G3bO$$VQ`O1G3bO9[Q`O1G3bO!BqQpO1G3bO!ByQMhO1G3bO%<XQ`O'#JOO%<mQ`O,5@|O%<uQpO,5@|OOQ!0Lb1G3c1G3cOOQ[7+$V7+$VO@oQ`O7+$VO9qQ!0LrO7+$VO%=QQ`O7+$VO%[QlO1G6kO%[QlO1G6lO%=VQ!0LrO1G6kO%=aQlO1G3jO%=hQ`O1G3jO%=mQlO1G3jOOQ[7+)S7+)SO9qQ!0LrO7+)^O`QlO7+)`OOQ['#Kg'#KgOOQ['#JR'#JRO%=tQlO,5>_OOQ[,5>_,5>_O%[QlO'#HtO%>RQ`O'#HvOOQ[,5>e,5>eO9aQ`O,5>eOOQ[,5>g,5>gOOQ[7+)i7+)iOOQ[7+)o7+)oOOQ[7+)s7+)sOOQ[7+)u7+)uO%>WQpO1G5{O%>rQ?MtO1G0zO%>|Q`O1G0zOOQO1G/s1G/sO%?XQ?MtO1G/sO>}Q`O1G/sO!)PQlO'#DmOOQO,5?O,5?OOOQO-E<b-E<bOOQO,5?U,5?UOOQO-E<h-E<hO!BqQpO1G/sOOQO-E<d-E<dOOQ!0Ln1G0]1G0]OOQ!0Lf7+%u7+%uO#'oQ`O7+%uOOQ!0Lf7+&`7+&`O>}Q`O7+&`O!BqQpO7+&`OOQO7+%x7+%xO$@_Q!0MxO7+&XOOQO7+&X7+&XO%[QlO7+&XO%?cQ!0LrO7+&XO!BfQ!0LrO7+%xO!BqQpO7+%xO%?nQ!0LrO7+&XO%?|Q!0MxO7++qO%[QlO7++qO%@^Q`O7++pO%@^Q`O7++pOOQO1G4r1G4rO9aQ`O1G4rO%@fQ`O1G4rOOQS7+%}7+%}O#'oQ`O<<LPO4UQ!fO<<LPO%@tQ`O<<LPOOQ[<<LP<<LPO!&oQMhO<<LPO%[QlO<<LPO%@|Q`O<<LPO%AXQ!0MzO,5?`O%CdQ!0MzO,5?bO%EoQ!0MzO1G2`O%HQQ!0MzO1G2sO%J]Q!0MzO1G2uO%LhQ!fO,5?PO%[QlO,5?POOQO-E<c-E<cO%LrQ`O1G5|OOQ!0Lf<<JU<<JUO%LzQ?MtO1G0uO& RQ?MtO1G1PO& YQ?MtO1G1PO&#ZQ?MtO1G1PO&#bQ?MtO1G1PO&%cQ?MtO1G1PO&'dQ?MtO1G1PO&'kQ?MtO1G1PO&'rQ?MtO1G1PO&)sQ?MtO1G1PO&)zQ?MtO1G1PO&*RQ!0MxO<<JfO&+yQ?MtO1G1PO&,vQ?MvO1G1PO&-yQ?MvO'#JkO&0PQ?MtO1G1cO&0^Q?MtO1G0UO&0hQMjO,5?SOOQO-E<f-E<fO!)PQlO'#FqOOQO'#KY'#KYOOQO1G1u1G1uO&0rQ`O1G1tO&0wQ?MtO,5?ZOOOW7+'h7+'hOOOO1G/Z1G/ZO&1RQ!dO1G4wOOQ!0Lh7+(Q7+(QP!&oQMhO,5?]O!+xQMhO7+(cO&1YQ`O,5?[O9aQ`O,5?[OOQO-E<n-E<nO&1hQ`O1G6aO&1hQ`O1G6aO&1pQ`O1G6aO&1{QMjO7+'zO&2]Q!dO,5?^O&2gQ`O,5?^O!&oQMhO,5?^OOQO-E<p-E<pO&2lQ!dO1G6bO&2vQ`O1G6bO&3OQ`O1G2kO!&oQMhO1G2kOOQ!0Lb1G2i1G2iOOQ!0Lb1G2j1G2jO%3TQpO1G2iO!BqQpO1G2iOClQ`O1G2iOOQ!0Lb1G2q1G2qO&3TQpO1G2iO&3cQ`O1G2kO$){Q`O1G2jOClQ`O1G2jO$#jQlO1G2kO&3kQ`O1G2jO&4_QMjO,5?`OOQ!0Lh-E<s-E<sO&5QQMjO,5?bOOQ!0Lh-E<u-E<uO!+xQMhO7++[OOQ!0Lh1G/c1G/cO&5[Q`O1G/cOOQ!0Lh7+'u7+'uO&5aQMjO7+'|O&5qQMjO7++[O&5{QMjO7++[O&6YQ!0MxO<<KXOOQ!0Lf<<KX<<KXO&6|Q`O1G0zO!&oQMhO'#IyO&7RQ`O,5@wO&9TQ!fO<<LPO!&oQMhO1G2nO&9[Q!0LrO1G2nOOQ[<<G{<<G{O!BfQ!0LrO<<G{O&9mQ!0MxO<<I{OOQ!0Lf<<I{<<I{OOQO,5?k,5?kO&:aQ`O,5?kO&:fQ`O,5?kOOQO-E<}-E<}O&:tQ`O1G6jO&:tQ`O1G6jO9gQ`O1G6jO@oQ`O<<LlOOQ[<<Ll<<LlO&:|Q`O<<LlO9qQ!0LrO<<LlOOQ[<<LX<<LXO%9nQ!0MvO<<LXOOQ[<<LY<<LYO!DrQ`O<<LYO&;RQpO'#I{O&;^Q`O,5@{O!)PQlO,5@{OOQ[1G3W1G3WOOQO'#I}'#I}O9qQ!0LrO'#I}O&;fQpO,5=uOOQ[,5=u,5=uO&;mQpO'#EgO&;tQpO'#GeO&;yQ`O7+(zO&<OQ`O7+(zOOQ[7+(z7+(zO!&oQMhO7+(zO%[QlO7+(zO&<WQ`O7+(zOOQ[7+(|7+(|O9qQ!0LrO7+(|O$$VQ`O7+(|O9[Q`O7+(|O!BqQpO7+(|O&<cQ`O,5?jOOQO-E<|-E<|OOQO'#H^'#H^O&<nQ`O1G6hO9qQ!0LrO<<GqOOQ[<<Gq<<GqO@oQ`O<<GqO&<vQ`O7+,VO&<{Q`O7+,WO%[QlO7+,VO%[QlO7+,WOOQ[7+)U7+)UO&=QQ`O7+)UO&=VQlO7+)UO&=^Q`O7+)UOOQ[<<Lx<<LxOOQ[<<Lz<<LzOOQ[-E=P-E=POOQ[1G3y1G3yO&=cQ`O,5>`OOQ[,5>b,5>bO&=hQ`O1G4PO9aQ`O7+&fO!)PQlO7+&fOOQO7+%_7+%_O&=mQ?MtO1G6YO>}Q`O7+%_OOQ!0Lf<<Ia<<IaOOQ!0Lf<<Iz<<IzO>}Q`O<<IzOOQO<<Is<<IsO$@_Q!0MxO<<IsO%[QlO<<IsOOQO<<Id<<IdO!BfQ!0LrO<<IdO&=wQ!0LrO<<IsO&>SQ!0MxO<= ]O&>dQ`O<= [OOQO7+*^7+*^O9aQ`O7+*^OOQ[ANAkANAkO&>lQ!fOANAkO!&oQMhOANAkO#'oQ`OANAkO4UQ!fOANAkO&>sQ`OANAkO%[QlOANAkO&>{Q!0MzO7+'zO&A^Q!0MzO,5?`O&CiQ!0MzO,5?bO&EtQ!0MzO7+'|O&HVQ!fO1G4kO&HaQ?MtO7+&aO&JeQ?MvO,5=XO&LlQ?MvO,5=ZO&L|Q?MvO,5=XO&M^Q?MvO,5=ZO&MnQ?MvO,59uO' tQ?MvO,5<kO'#wQ?MvO,5<mO'&]Q?MvO,5<{O'(RQ?MtO7+'kO'(`Q?MtO7+'mO'(mQ`O,5<]OOQO7+'`7+'`OOQ!0Lh7+*c7+*cO'(rQMjO<<K}OOQO1G4v1G4vO'(yQ`O1G4vO')UQ`O1G4vO')dQ`O7++{O')dQ`O7++{O!&oQMhO1G4xO')lQ!dO1G4xO')vQ`O7++|O'*OQ`O7+(VO'*ZQ!dO7+(VOOQ!0Lb7+(T7+(TOOQ!0Lb7+(U7+(UO!BqQpO7+(TOClQ`O7+(TO'*eQ`O7+(VO!&oQMhO7+(VO$){Q`O7+(UO'*jQ`O7+(VOClQ`O7+(UO'*rQMjO<<NvOOQ!0Lh7+$}7+$}O!+xQMhO<<NvO'*|Q!dO,5?eOOQO-E<w-E<wO'+WQ!0MvO7+(YO!&oQMhO7+(YOOQ[AN=gAN=gO9gQ`O1G5VOOQO1G5V1G5VO'+hQ`O1G5VO'+mQ`O7+,UO'+mQ`O7+,UO9qQ!0LrOANBWO@oQ`OANBWOOQ[ANBWANBWOOQ[ANAsANAsOOQ[ANAtANAtO'+uQ`O,5?gOOQO-E<y-E<yO',QQ?MtO1G6gOOQO,5?i,5?iOOQO-E<{-E<{OOQ[1G3a1G3aO',[Q`O,5=POOQ[<<Lf<<LfO!&oQMhO<<LfO&;yQ`O<<LfO',aQ`O<<LfO%[QlO<<LfOOQ[<<Lh<<LhO9qQ!0LrO<<LhO$$VQ`O<<LhO9[Q`O<<LhO',iQpO1G5UO',tQ`O7+,SOOQ[AN=]AN=]O9qQ!0LrOAN=]OOQ[<= q<= qOOQ[<= r<= rO',|Q`O<= qO'-RQ`O<= rOOQ[<<Lp<<LpO'-WQ`O<<LpO'-]QlO<<LpOOQ[1G3z1G3zO>}Q`O7+)kO'-dQ`O<<JQO'-oQ?MtO<<JQOOQO<<Hy<<HyOOQ!0LfAN?fAN?fOOQOAN?_AN?_O$@_Q!0MxOAN?_OOQOAN?OAN?OO%[QlOAN?_OOQO<<Mx<<MxOOQ[G27VG27VO!&oQMhOG27VO#'oQ`OG27VO'-yQ!fOG27VO4UQ!fOG27VO'.QQ`OG27VO'.YQ?MtO<<JfO'.gQ?MvO1G2`O'0]Q?MvO,5?`O'2`Q?MvO,5?bO'4cQ?MvO1G2sO'6fQ?MvO1G2uO'8iQ?MtO<<KXO'8vQ?MtO<<I{OOQO1G1w1G1wO!+xQMhOANAiOOQO7+*b7+*bO'9TQ`O7+*bO'9`Q`O<= gO'9hQ!dO7+*dOOQ!0Lb<<Kq<<KqO$){Q`O<<KqOClQ`O<<KqO'9rQ`O<<KqO!&oQMhO<<KqOOQ!0Lb<<Ko<<KoO!BqQpO<<KoO'9}Q!dO<<KqOOQ!0Lb<<Kp<<KpO':XQ`O<<KqO!&oQMhO<<KqO$){Q`O<<KpO':^QMjOANDbO':hQ!0MvO<<KtOOQO7+*q7+*qO9gQ`O7+*qO':xQ`O<= pOOQ[G27rG27rO9qQ!0LrOG27rO!)PQlO1G5RO';QQ`O7+,RO';YQ`O1G2kO&;yQ`OANBQOOQ[ANBQANBQO!&oQMhOANBQO';_Q`OANBQOOQ[ANBSANBSO9qQ!0LrOANBSO$$VQ`OANBSOOQO'#H_'#H_OOQO7+*p7+*pOOQ[G22wG22wOOQ[ANE]ANE]OOQ[ANE^ANE^OOQ[ANB[ANB[O';gQ`OANB[OOQ[<<MV<<MVO!)PQlOAN?lOOQOG24yG24yO$@_Q!0MxOG24yO#'oQ`OLD,qOOQ[LD,qLD,qO!&oQMhOLD,qO';lQ!fOLD,qO';sQ?MvO7+'zO'=iQ?MvO,5?`O'?lQ?MvO,5?bO'AoQ?MvO7+'|O'CeQMjOG27TOOQO<<M|<<M|OOQ!0LbANA]ANA]O$){Q`OANA]OClQ`OANA]O'CuQ!dOANA]OOQ!0LbANAZANAZO'C|Q`OANA]O!&oQMhOANA]O'DXQ!dOANA]OOQ!0LbANA[ANA[OOQO<<N]<<N]OOQ[LD-^LD-^O'DcQ?MtO7+*mOOQO'#Gf'#GfOOQ[G27lG27lO&;yQ`OG27lO!&oQMhOG27lOOQ[G27nG27nO9qQ!0LrOG27nOOQ[G27vG27vO'DmQ?MtOG25WOOQOLD*eLD*eOOQ[!$(!]!$(!]O#'oQ`O!$(!]O!&oQMhO!$(!]O'DwQ!0MzOG27TOOQ!0LbG26wG26wO$){Q`OG26wO'GYQ`OG26wOClQ`OG26wO'GeQ!dOG26wO!&oQMhOG26wOOQ[LD-WLD-WO&;yQ`OLD-WOOQ[LD-YLD-YOOQ[!)9Ew!)9EwO#'oQ`O!)9EwOOQ!0LbLD,cLD,cO$){Q`OLD,cOClQ`OLD,cO'GlQ`OLD,cO'GwQ!dOLD,cOOQ[!$(!r!$(!rOOQ[!.K;c!.K;cO'HOQ?MvOG27TOOQ!0Lb!$( }!$( }O$){Q`O!$( }OClQ`O!$( }O'ItQ`O!$( }OOQ!0Lb!)9Ei!)9EiO$){Q`O!)9EiOClQ`O!)9EiOOQ!0Lb!.K;T!.K;TO$){Q`O!.K;TOOQ!0Lb!4/0o!4/0oO!)PQlO'#DzO1PQ`O'#EXO'JPQ!fO'#JqO'JWQ!L^O'#DvO'J_QlO'#EOO'JfQ!fO'#CiO'L|Q!fO'#CiO!)PQlO'#EQO'M^QlO,5;ZO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO'#IoO( aQ`O,5<iO!)PQlO,5;eO( iQMhO,5;eO(#SQMhO,5;eO!)PQlO,5;wO!&oQMhO'#GmO( iQMhO'#GmO!&oQMhO'#GoO( iQMhO'#GoO1SQ`O'#DZO1SQ`O'#DZO!&oQMhO'#GPO( iQMhO'#GPO!&oQMhO'#GRO( iQMhO'#GRO!&oQMhO'#GaO( iQMhO'#GaO!)PQlO,5:jO(#ZQpO'#D_O(#eQpO'#JuO!)PQlO,5@nO'M^QlO1G0uO(#oQ?MtO'#CiO!)PQlO1G2PO!&oQMhO'#ItO( iQMhO'#ItO!&oQMhO'#IvO( iQMhO'#IvO(#yQ!dO'#CrO!&oQMhO,5<tO( iQMhO,5<tO'M^QlO1G2RO!)PQlO7+&zO!&oQMhO1G2`O( iQMhO1G2`O!&oQMhO'#ItO( iQMhO'#ItO!&oQMhO'#IvO( iQMhO'#IvO!&oQMhO1G2bO( iQMhO1G2bO'M^QlO7+'mO'M^QlO7+&aO!&oQMhOANAiO( iQMhOANAiO($^Q`O'#EoO($cQ`O'#EoO($kQ`O'#F]O($pQ`O'#EyO($uQ`O'#KSO(%QQ`O'#KQO(%]Q`O,5;ZO(%bQMjO,5<eO(%iQ`O'#GYO(%nQ`O'#GYO(%sQ`O,5<gO(%{Q`O,5;ZO(&TQ?MtO1G1`O(&[Q`O,5<tO(&aQ`O,5<tO(&fQ`O,5<vO(&kQ`O,5<vO(&pQ`O1G2RO(&uQ`O1G0uO(&zQMjO<<K}O('RQMjO<<K}O7eQMhO'#F|O9[Q`O'#F{OAjQ`O'#EnO!)PQlO,5;tO!3dQ`O'#GYO!3dQ`O'#GYO!3dQ`O'#G[O!3dQ`O'#G[O!+xQMhO7+(cO!+xQMhO7+(cO%-mQ!dO1G2wO%-mQ!dO1G2wO!&oQMhO,5=]O!&oQMhO,5=]",
  stateData: "((X~O'{OS'|OSTOS'}RQ~OPYOQYOSfOY!VOaqOdzOeyOl!POpkOrYOskOtkOzkO|YO!OYO!SWO!WkO!XkO!_XO!iuO!lZO!oYO!pYO!qYO!svO!uwO!xxO!|]O$W|O$niO%h}O%j!QO%l!OO%m!OO%n!OO%q!RO%s!SO%v!TO%w!TO%y!UO&V!WO&]!XO&_!YO&a!ZO&c![O&f!]O&l!^O&r!_O&t!`O&v!aO&x!bO&z!cO(SSO(UTO(XUO(`VO(n[O~OWtO~P`OPYOQYOSfOd!jOe!iOpkOrYOskOtkOzkO|YO!OYO!SWO!WkO!XkO!_!eO!iuO!lZO!oYO!pYO!qYO!svO!u!gO!x!hO$W!kO$niO(S!dO(UTO(XUO(`VO(n[O~Oa!wOs!nO!S!oO!b!yO!c!vO!d!vO!|;wO#T!pO#U!pO#V!xO#W!pO#X!pO#[!zO#]!zO(T!lO(UTO(XUO(d!mO(n!sO~O'}!{O~OP]XR]X[]Xa]Xj]Xr]X!Q]X!S]X!]]X!l]X!p]X#R]X#S]X#`]X#kfX#n]X#o]X#p]X#q]X#r]X#s]X#t]X#u]X#v]X#x]X#z]X#{]X$Q]X'y]X(`]X(q]X(x]X(y]X~O!g%RX~P(qO_!}O(U#PO(V!}O(W#PO~O_#QO(W#PO(X#PO(Y#QO~Ox#SO!U#TO(a#TO(b#VO~OPYOQYOSfOd!jOe!iOpkOrYOskOtkOzkO|YO!OYO!SWO!WkO!XkO!_!eO!iuO!lZO!oYO!pYO!qYO!svO!u!gO!x!hO$W!kO$niO(S;{O(UTO(XUO(`VO(n[O~O![#ZO!]#WO!Y(gP!Y(uP~P+}O!^#cO~P`OPYOQYOSfOd!jOe!iOrYOskOtkOzkO|YO!OYO!SWO!WkO!XkO!_!eO!iuO!lZO!oYO!pYO!qYO!svO!u!gO!x!hO$W!kO$niO(UTO(XUO(`VO(n[O~Op#mO![#iO!|]O#i#lO#j#iO(S;|O!k(rP~P.iO!l#oO(S#nO~O!x#sO!|]O%h#tO~O#k#uO~O!g#vO#k#uO~OP$[OR#zO[$cOj$ROr$aO!Q#yO!S#{O!]$_O!l#xO!p$[O#R$RO#n$OO#o$PO#p$PO#q$PO#r$QO#s$RO#t$RO#u$bO#v$SO#x$UO#z$WO#{$XO(`VO(q$YO(x#|O(y#}O~Oa(eX'y(eX'v(eX!k(eX!Y(eX!_(eX%i(eX!g(eX~P1qO#S$dO#`$eO$Q$eOP(fXR(fX[(fXj(fXr(fX!Q(fX!S(fX!](fX!l(fX!p(fX#R(fX#n(fX#o(fX#p(fX#q(fX#r(fX#s(fX#t(fX#u(fX#v(fX#x(fX#z(fX#{(fX(`(fX(q(fX(x(fX(y(fX!_(fX%i(fX~Oa(fX'y(fX'v(fX!Y(fX!k(fXv(fX!g(fX~P4UO#`$eO~O$]$hO$_$gO$f$mO~OSfO!_$nO$i$oO$k$qO~Oh%VOj%cOk%cOl%cOp%WOr%XOs$tOt$tOz%YO|%ZO!O%[O!S${O!_$|O!i%aO!l$xO#j%bO$W%_O$t%]O$v%^O$y%`O(S$sO(UTO(XUO(`$uO(x$}O(y%POg(]P~O!l%dO~O!S%gO!_%hO(S%fO~O!g%lO~Oa%mO'y%mO~O!Q%qO~P%[O(T!lO~P%[O%n%uO~P%[Oh%VO!l%dO(S%fO(T!lO~Oe%|O!l%dO(S%fO~Oj$RO~O!Q&RO!_&OO!l&QO%j&UO(S%fO(T!lO(UTO(XUO`)VP~O!x#sO~O%s&WO!S)RX!_)RX(S)RX~O(S&XO~Ol!PO!u&^O%j!QO%l!OO%m!OO%n!OO%q!RO%s!SO%v!TO%w!TO~Od&cOe&bO!x&`O%h&aO%{&_O~P<VOd&fOeyOl!PO!_&eO!u&^O!xxO!|]O%h}O%l!OO%m!OO%n!OO%q!RO%s!SO%v!TO%w!TO%y!UO~Ob&iO#`&lO%j&gO(T!lO~P=[O!l&mO!u&qO~O!l#oO~O!_XO~Oa%mO'w&yO'y%mO~Oa%mO'w&|O'y%mO~Oa%mO'w'OO'y%mO~O'v]X!Y]Xv]X!k]X&Z]X!_]X%i]X!g]X~P(qO!b']O!c'UO!d'UO(T!lO(UTO(XUO~Os'SO!S'RO!['VO(d'QO!^(hP!^(wP~P@cOn'`O!_'^O(S%fO~Oe'eO!l%dO(S%fO~O!Q&RO!l&QO~Os!nO!S!oO!|;wO#T!pO#U!pO#W!pO#X!pO(T!lO(UTO(XUO(d!mO(n!sO~O!b'kO!c'jO!d'jO#V!pO#['lO#]'lO~PA}Oa%mOh%VO!g#vO!l%dO'y%mO(q'nO~O!p'rO#`'pO~PC]Os!nO!S!oO(UTO(XUO(d!mO(n!sO~O!_XOs(lX!S(lX!b(lX!c(lX!d(lX!|(lX#T(lX#U(lX#V(lX#W(lX#X(lX#[(lX#](lX(T(lX(U(lX(X(lX(d(lX(n(lX~O!c'jO!d'jO(T!lO~PC{O(O'vO(P'vO(Q'xO~O_!}O(U'zO(V!}O(W'zO~O_#QO(W'zO(X'zO(Y#QO~Ov'|O~P%[Ox#SO!U#TO(a#TO(b(PO~O![(RO!Y'VX!Y']X!]'VX!]']X~P+}O!](TO!Y(gX~OP$[OR#zO[$cOj$ROr$aO!Q#yO!S#{O!](TO!l#xO!p$[O#R$RO#n$OO#o$PO#p$PO#q$PO#r$QO#s$RO#t$RO#u$bO#v$SO#x$UO#z$WO#{$XO(`VO(q$YO(x#|O(y#}O~O!Y(gX~PGvO!Y(YO~O!Y(tX!](tX!g(tX!k(tX(q(tX~O#`(tX#k#dX!^(tX~PIyO#`(ZO!Y(vX!](vX~O!]([O!Y(uX~O!Y(_O~O#`$eO~PIyO!^(`O~P`OR#zO!Q#yO!S#{O!l#xO(`VOP!na[!naj!nar!na!]!na!p!na#R!na#n!na#o!na#p!na#q!na#r!na#s!na#t!na#u!na#v!na#x!na#z!na#{!na(q!na(x!na(y!na~Oa!na'y!na'v!na!Y!na!k!nav!na!_!na%i!na!g!na~PKaO!k(aO~O!g#vO#`(bO(q'nO!](sXa(sX'y(sX~O!k(sX~PM|O!S%gO!_%hO!|]O#i(gO#j(fO(S%fO~O!](hO!k(rX~O!k(jO~O!S%gO!_%hO#j(fO(S%fO~OP(fXR(fX[(fXj(fXr(fX!Q(fX!S(fX!](fX!l(fX!p(fX#R(fX#n(fX#o(fX#p(fX#q(fX#r(fX#s(fX#t(fX#u(fX#v(fX#x(fX#z(fX#{(fX(`(fX(q(fX(x(fX(y(fX~O!g#vO!k(fX~P! jOR(lO!Q(kO!l#xO#S$dO!|!{a!S!{a~O!x!{a%h!{a!_!{a#i!{a#j!{a(S!{a~P!#kO!x(pO~OPYOQYOSfOd!jOe!iOpkOrYOskOtkOzkO|YO!OYO!SWO!WkO!XkO!_XO!iuO!lZO!oYO!pYO!qYO!svO!u!gO!x!hO$W!kO$niO(S!dO(UTO(XUO(`VO(n[O~Oh%VOp%WOr%XOs$tOt$tOz%YO|%ZO!O<eO!S${O!_$|O!i=vO!l$xO#j<kO$W%_O$t<gO$v<iO$y%`O(S(tO(UTO(XUO(`$uO(x$}O(y%PO~O#k(vO~O![(xO!k(jP~P%[O(d(zO(n[O~O!S(|O!l#xO(d(zO(n[O~OP;vOQ;vOSfOd=rOe!iOpkOr;vOskOtkOzkO|;vO!O;vO!SWO!WkO!XkO!_!eO!i;yO!lZO!o;vO!p;vO!q;vO!s;zO!u;}O!x!hO$W!kO$n=pO(S)ZO(UTO(XUO(`VO(n[O~O!]$_Oa$qa'y$qa'v$qa!k$qa!Y$qa!_$qa%i$qa!g$qa~Ol)bO~P!&oOh%VOp%WOr%XOs$tOt$tOz%YO|%ZO!O%[O!S${O!_$|O!i%aO!l$xO#j%bO$W%_O$t%]O$v%^O$y%`O(S(tO(UTO(XUO(`$uO(x$}O(y%PO~Og(oP~P!+xO!Q)gO!g)fO!_$^X$Z$^X$]$^X$_$^X$f$^X~O!g)fO!_(zX$Z(zX$](zX$_(zX$f(zX~O!Q)gO~P!.RO!Q)gO!_(zX$Z(zX$](zX$_(zX$f(zX~O!_)iO$Z)mO$])hO$_)hO$f)nO~O![)qO~P!)PO$]$hO$_$gO$f)uO~On$zX!Q$zX#S$zX'x$zX(x$zX(y$zX~OgmXg$zXnmX!]mX#`mX~P!/wOx)wO(a)xO(b)zO~On*TO!Q)|O'x)}O(x$}O(y%PO~Og){O~P!0{Og*UO~Oh%VOp%WOr%XOs$tOt$tOz%YO|%ZO!O<eO!S*WO!_*XO!i=vO!l$xO#j<kO$W%_O$t<gO$v<iO$y%`O(UTO(XUO(`$uO(x$}O(y%PO~O![*[O(S*VO!k(}P~P!1jO#k*^O~O!l*_O~Oh%VOp%WOr%XOs$tOt$tOz%YO|%ZO!O<eO!S${O!_$|O!i=vO!l$xO#j<kO$W%_O$t<gO$v<iO$y%`O(S*aO(UTO(XUO(`$uO(x$}O(y%PO~O![*dO!Y)OP~P!3iOr*pOs!nO!S*fO!b*nO!c*hO!d*hO!l*_O#[*oO%`*jO(T!lO(UTO(XUO(d!mO~O!^*mO~P!5^O#S$dOn(_X!Q(_X'x(_X(x(_X(y(_X!](_X#`(_X~Og(_X$O(_X~P!6`On*uO#`*tOg(^X!](^X~O!]*vOg(]X~Oj%cOk%cOl%cO(S&XOg(]P~Os*yO~O!l+OO~O(S(tO~Op+TO!S%gO![#iO!_%hO!|]O#i#lO#j#iO(S%fO!k(rP~O!g#vO#k+UO~O!S%gO![+WO!]([O!_%hO(S%fO!Y(uP~Os'YO!S+YO![+XO(UTO(XUO(d(zO~O!^(wP~P!9iO!]+ZOa)SX'y)SX~OP$[OR#zO[$cOj$ROr$aO!Q#yO!S#{O!l#xO!p$[O#R$RO#n$OO#o$PO#p$PO#q$PO#r$QO#s$RO#t$RO#u$bO#v$SO#x$UO#z$WO#{$XO(`VO(q$YO(x#|O(y#}O~Oa!ja!]!ja'y!ja'v!ja!Y!ja!k!jav!ja!_!ja%i!ja!g!ja~P!:aOR#zO!Q#yO!S#{O!l#xO(`VOP!ra[!raj!rar!ra!]!ra!p!ra#R!ra#n!ra#o!ra#p!ra#q!ra#r!ra#s!ra#t!ra#u!ra#v!ra#x!ra#z!ra#{!ra(q!ra(x!ra(y!ra~Oa!ra'y!ra'v!ra!Y!ra!k!rav!ra!_!ra%i!ra!g!ra~P!<wOR#zO!Q#yO!S#{O!l#xO(`VOP!ta[!taj!tar!ta!]!ta!p!ta#R!ta#n!ta#o!ta#p!ta#q!ta#r!ta#s!ta#t!ta#u!ta#v!ta#x!ta#z!ta#{!ta(q!ta(x!ta(y!ta~Oa!ta'y!ta'v!ta!Y!ta!k!tav!ta!_!ta%i!ta!g!ta~P!?_Oh%VOn+dO!_'^O%i+cO~O!g+fOa([X!_([X'y([X!]([X~Oa%mO!_XO'y%mO~Oh%VO!l%dO~Oh%VO!l%dO(S%fO~O!g#vO#k(vO~Ob+qO%j+rO(S+nO(UTO(XUO!^)WP~O!]+sO`)VX~O[+wO~O`+xO~O!_&OO(S%fO(T!lO`)VP~Oh%VO#`+}O~Oh%VOn,QO!_$|O~O!_,SO~O!Q,UO!_XO~O%n%uO~O!x,ZO~Oe,`O~Ob,aO(S#nO(UTO(XUO!^)UP~Oe%|O~O%j!QO(S&XO~P=[O[,fO`,eO~OPYOQYOSfOdzOeyOpkOrYOskOtkOzkO|YO!OYO!SWO!WkO!XkO!iuO!lZO!oYO!pYO!qYO!svO!xxO!|]O$niO%h}O(UTO(XUO(`VO(n[O~O!_!eO!u!gO$W!kO(S!dO~P!F_O`,eOa%mO'y%mO~OPYOQYOSfOd!jOe!iOpkOrYOskOtkOzkO|YO!OYO!SWO!WkO!XkO!_!eO!iuO!lZO!oYO!pYO!qYO!svO!x!hO$W!kO$niO(S!dO(UTO(XUO(`VO(n[O~Oa,kOl!OO!uwO%l!OO%m!OO%n!OO~P!HwO!l&mO~O&],qO~O!_,sO~O&n,uO&p,vOP&kaQ&kaS&kaY&kaa&kad&kae&kal&kap&kar&kas&kat&kaz&ka|&ka!O&ka!S&ka!W&ka!X&ka!_&ka!i&ka!l&ka!o&ka!p&ka!q&ka!s&ka!u&ka!x&ka!|&ka$W&ka$n&ka%h&ka%j&ka%l&ka%m&ka%n&ka%q&ka%s&ka%v&ka%w&ka%y&ka&V&ka&]&ka&_&ka&a&ka&c&ka&f&ka&l&ka&r&ka&t&ka&v&ka&x&ka&z&ka'v&ka(S&ka(U&ka(X&ka(`&ka(n&ka!^&ka&d&kab&ka&i&ka~O(S,{O~Oh!eX!]!RX!^!RX!g!RX!g!eX!l!eX#`!RX~O!]!eX!^!eX~P# }O!g-QO#`-POh(iX!]#hX!^#hX!g(iX!l(iX~O!](iX!^(iX~P#!pOh%VO!g-SO!l%dO!]!aX!^!aX~Os!nO!S!oO(UTO(XUO(d!mO~OP;vOQ;vOSfOd=rOe!iOpkOr;vOskOtkOzkO|;vO!O;vO!SWO!WkO!XkO!_!eO!i;yO!lZO!o;vO!p;vO!q;vO!s;zO!u;}O!x!hO$W!kO$n=pO(UTO(XUO(`VO(n[O~O(S<rO~P#$VO!]-WO!^(hX~O!^-YO~O!g-QO#`-PO!]#hX!^#hX~O!]-ZO!^(wX~O!^-]O~O!c-^O!d-^O(T!lO~P##tO!^-aO~P'_On-dO!_'^O~O!Y-iO~Os!{a!b!{a!c!{a!d!{a#T!{a#U!{a#V!{a#W!{a#X!{a#[!{a#]!{a(T!{a(U!{a(X!{a(d!{a(n!{a~P!#kO!p-nO#`-lO~PC]O!c-pO!d-pO(T!lO~PC{Oa%mO#`-lO'y%mO~Oa%mO!g#vO#`-lO'y%mO~Oa%mO!g#vO!p-nO#`-lO'y%mO(q'nO~O(O'vO(P'vO(Q-uO~Ov-vO~O!Y'Va!]'Va~P!:aO![-zO!Y'VX!]'VX~P%[O!](TO!Y(ga~O!Y(ga~PGvO!]([O!Y(ua~O!S%gO![.OO!_%hO(S%fO!Y']X!]']X~O#`.QO!](sa!k(saa(sa'y(sa~O!g#vO~P#,]O!](hO!k(ra~O!S%gO!_%hO#j.UO(S%fO~Op.ZO!S%gO![.WO!_%hO!|]O#i.YO#j.WO(S%fO!]'`X!k'`X~OR._O!l#xO~Oh%VOn.bO!_'^O%i.aO~Oa#ci!]#ci'y#ci'v#ci!Y#ci!k#civ#ci!_#ci%i#ci!g#ci~P!:aOn=|O!Q)|O'x)}O(x$}O(y%PO~O#k#_aa#_a#`#_a'y#_a!]#_a!k#_a!_#_a!Y#_a~P#/XO#k(_XP(_XR(_X[(_Xa(_Xj(_Xr(_X!S(_X!l(_X!p(_X#R(_X#n(_X#o(_X#p(_X#q(_X#r(_X#s(_X#t(_X#u(_X#v(_X#x(_X#z(_X#{(_X'y(_X(`(_X(q(_X!k(_X!Y(_X'v(_Xv(_X!_(_X%i(_X!g(_X~P!6`O!].oO!k(jX~P!:aO!k.rO~O!Y.tO~OP$[OR#zO!Q#yO!S#{O!l#xO!p$[O(`VO[#mia#mij#mir#mi!]#mi#R#mi#o#mi#p#mi#q#mi#r#mi#s#mi#t#mi#u#mi#v#mi#x#mi#z#mi#{#mi'y#mi(q#mi(x#mi(y#mi'v#mi!Y#mi!k#miv#mi!_#mi%i#mi!g#mi~O#n#mi~P#2wO#n$OO~P#2wOP$[OR#zOr$aO!Q#yO!S#{O!l#xO!p$[O#n$OO#o$PO#p$PO#q$PO(`VO[#mia#mij#mi!]#mi#R#mi#s#mi#t#mi#u#mi#v#mi#x#mi#z#mi#{#mi'y#mi(q#mi(x#mi(y#mi'v#mi!Y#mi!k#miv#mi!_#mi%i#mi!g#mi~O#r#mi~P#5fO#r$QO~P#5fOP$[OR#zO[$cOj$ROr$aO!Q#yO!S#{O!l#xO!p$[O#R$RO#n$OO#o$PO#p$PO#q$PO#r$QO#s$RO#t$RO#u$bO(`VOa#mi!]#mi#x#mi#z#mi#{#mi'y#mi(q#mi(x#mi(y#mi'v#mi!Y#mi!k#miv#mi!_#mi%i#mi!g#mi~O#v#mi~P#8TOP$[OR#zO[$cOj$ROr$aO!Q#yO!S#{O!l#xO!p$[O#R$RO#n$OO#o$PO#p$PO#q$PO#r$QO#s$RO#t$RO#u$bO#v$SO(`VO(y#}Oa#mi!]#mi#z#mi#{#mi'y#mi(q#mi(x#mi'v#mi!Y#mi!k#miv#mi!_#mi%i#mi!g#mi~O#x$UO~P#:kO#x#mi~P#:kO#v$SO~P#8TOP$[OR#zO[$cOj$ROr$aO!Q#yO!S#{O!l#xO!p$[O#R$RO#n$OO#o$PO#p$PO#q$PO#r$QO#s$RO#t$RO#u$bO#v$SO#x$UO(`VO(x#|O(y#}Oa#mi!]#mi#{#mi'y#mi(q#mi'v#mi!Y#mi!k#miv#mi!_#mi%i#mi!g#mi~O#z#mi~P#=aO#z$WO~P#=aOP]XR]X[]Xj]Xr]X!Q]X!S]X!l]X!p]X#R]X#S]X#`]X#kfX#n]X#o]X#p]X#q]X#r]X#s]X#t]X#u]X#v]X#x]X#z]X#{]X$Q]X(`]X(q]X(x]X(y]X!]]X!^]X~O$O]X~P#@OOP$[OR#zO[<_Oj<SOr<]O!Q#yO!S#{O!l#xO!p$[O#R<SO#n<PO#o<QO#p<QO#q<QO#r<RO#s<SO#t<SO#u<^O#v<TO#x<VO#z<XO#{<YO(`VO(q$YO(x#|O(y#}O~O$O.vO~P#B]O#S$dO#`<`O$Q<`O$O(fX!^(fX~P! jOa'ca!]'ca'y'ca'v'ca!k'ca!Y'cav'ca!_'ca%i'ca!g'ca~P!:aO[#mia#mij#mir#mi!]#mi#R#mi#r#mi#s#mi#t#mi#u#mi#v#mi#x#mi#z#mi#{#mi'y#mi(q#mi'v#mi!Y#mi!k#miv#mi!_#mi%i#mi!g#mi~OP$[OR#zO!Q#yO!S#{O!l#xO!p$[O#n$OO#o$PO#p$PO#q$PO(`VO(x#mi(y#mi~P#E_On=|O!Q)|O'x)}O(x$}O(y%POP#miR#mi!S#mi!l#mi!p#mi#n#mi#o#mi#p#mi#q#mi(`#mi~P#E_O!].zOg(oX~P!0{Og.|O~Oa$Pi!]$Pi'y$Pi'v$Pi!Y$Pi!k$Piv$Pi!_$Pi%i$Pi!g$Pi~P!:aO$].}O$_.}O~O$]/OO$_/OO~O!g)fO#`/PO!_$cX$Z$cX$]$cX$_$cX$f$cX~O![/QO~O!_)iO$Z/SO$])hO$_)hO$f/TO~O!]<ZO!^(eX~P#B]O!^/UO~O!g)fO$f(zX~O$f/WO~Ov/XO~P!&oOx)wO(a)xO(b/[O~O!S/_O~O(x$}On%aa!Q%aa'x%aa(y%aa!]%aa#`%aa~Og%aa$O%aa~P#LaO(y%POn%ca!Q%ca'x%ca(x%ca!]%ca#`%ca~Og%ca$O%ca~P#MSO!]fX!gfX!kfX!k$zX(qfX~P!/wO![/hO!]([O(S/gO!Y(uP!Y)OP~P!1jOr*pO!b*nO!c*hO!d*hO!l*_O#[*oO%`*jO(T!lO(UTO(XUO~Os<oO!S/iO![+XO!^*mO(d<nO!^(wP~P#NmO!k/jO~P#/XO!]/kO!g#vO(q'nO!k(}X~O!k/pO~O!S%gO![*[O!_%hO(S%fO!k(}P~O#k/rO~O!Y$zX!]$zX!g%RX~P!/wO!]/sO!Y)OX~P#/XO!g/uO~O!Y/wO~OpkO(S/xO~P.iOh%VOr/}O!g#vO!l%dO(q'nO~O!g+fO~Oa%mO!]0RO'y%mO~O!^0TO~P!5^O!c0UO!d0UO(T!lO~P##tOs!nO!S0VO(UTO(XUO(d!mO~O#[0XO~Og%aa!]%aa#`%aa$O%aa~P!0{Og%ca!]%ca#`%ca$O%ca~P!0{Oj%cOk%cOl%cO(S&XOg'lX!]'lX~O!]*vOg(]a~Og0bO~OR0cO!Q0cO!S0dO#S$dOn}a'x}a(x}a(y}a!]}a#`}a~Og}a$O}a~P$&vO!Q)|O'x)}On$sa(x$sa(y$sa!]$sa#`$sa~Og$sa$O$sa~P$'rO!Q)|O'x)}On$ua(x$ua(y$ua!]$ua#`$ua~Og$ua$O$ua~P$(eO#k0gO~Og%Ta!]%Ta#`%Ta$O%Ta~P!0{On0iO#`0hOg(^a!](^a~O!g#vO~O#k0lO~O!]+ZOa)Sa'y)Sa~OR#zO!Q#yO!S#{O!l#xO(`VOP!ri[!rij!rir!ri!]!ri!p!ri#R!ri#n!ri#o!ri#p!ri#q!ri#r!ri#s!ri#t!ri#u!ri#v!ri#x!ri#z!ri#{!ri(q!ri(x!ri(y!ri~Oa!ri'y!ri'v!ri!Y!ri!k!riv!ri!_!ri%i!ri!g!ri~P$*bOh%VOr%XOs$tOt$tOz%YO|%ZO!O<eO!S${O!_$|O!i=vO!l$xO#j<kO$W%_O$t<gO$v<iO$y%`O(UTO(XUO(`$uO(x$}O(y%PO~Op0uO%]0vO(S0tO~P$,xO!g+fOa([a!_([a'y([a!]([a~O#k0|O~O[]X!]fX!^fX~O!]0}O!^)WX~O!^1PO~O[1QO~Ob1SO(S+nO(UTO(XUO~O!_&OO(S%fO`'tX!]'tX~O!]+sO`)Va~O!k1VO~P!:aO[1YO~O`1ZO~O#`1^O~On1aO!_$|O~O(d(zO!^)TP~Oh%VOn1jO!_1gO%i1iO~O[1tO!]1rO!^)UX~O!^1uO~O`1wOa%mO'y%mO~O(S#nO(UTO(XUO~O#S$dO#`$eO$Q$eOP(fXR(fX[(fXr(fX!Q(fX!S(fX!](fX!l(fX!p(fX#R(fX#n(fX#o(fX#p(fX#q(fX#r(fX#s(fX#t(fX#u(fX#v(fX#x(fX#z(fX#{(fX(`(fX(q(fX(x(fX(y(fX~Oj1zO&Z1{Oa(fX~P$2cOj1zO#`$eO&Z1{O~Oa1}O~P%[Oa2PO~O&d2SOP&biQ&biS&biY&bia&bid&bie&bil&bip&bir&bis&bit&biz&bi|&bi!O&bi!S&bi!W&bi!X&bi!_&bi!i&bi!l&bi!o&bi!p&bi!q&bi!s&bi!u&bi!x&bi!|&bi$W&bi$n&bi%h&bi%j&bi%l&bi%m&bi%n&bi%q&bi%s&bi%v&bi%w&bi%y&bi&V&bi&]&bi&_&bi&a&bi&c&bi&f&bi&l&bi&r&bi&t&bi&v&bi&x&bi&z&bi'v&bi(S&bi(U&bi(X&bi(`&bi(n&bi!^&bib&bi&i&bi~Ob2YO!^2WO&i2XO~P`O!_XO!l2[O~O&p,vOP&kiQ&kiS&kiY&kia&kid&kie&kil&kip&kir&kis&kit&kiz&ki|&ki!O&ki!S&ki!W&ki!X&ki!_&ki!i&ki!l&ki!o&ki!p&ki!q&ki!s&ki!u&ki!x&ki!|&ki$W&ki$n&ki%h&ki%j&ki%l&ki%m&ki%n&ki%q&ki%s&ki%v&ki%w&ki%y&ki&V&ki&]&ki&_&ki&a&ki&c&ki&f&ki&l&ki&r&ki&t&ki&v&ki&x&ki&z&ki'v&ki(S&ki(U&ki(X&ki(`&ki(n&ki!^&ki&d&kib&ki&i&ki~O!Y2bO~O!]!aa!^!aa~P#B]Os!nO!S!oO![2hO(d!mO!]'WX!^'WX~P@cO!]-WO!^(ha~O!]'^X!^'^X~P!9iO!]-ZO!^(wa~O!^2oO~P'_Oa%mO#`2xO'y%mO~Oa%mO!g#vO#`2xO'y%mO~Oa%mO!g#vO!p2|O#`2xO'y%mO(q'nO~Oa%mO'y%mO~P!:aO!]$_Ov$qa~O!Y'Vi!]'Vi~P!:aO!](TO!Y(gi~O!]([O!Y(ui~O!Y(vi!](vi~P!:aO!](si!k(sia(si'y(si~P!:aO#`3OO!](si!k(sia(si'y(si~O!](hO!k(ri~O!S%gO!_%hO!|]O#i3TO#j3SO(S%fO~O!S%gO!_%hO#j3SO(S%fO~On3[O!_'^O%i3ZO~Oh%VOn3[O!_'^O%i3ZO~O#k%aaP%aaR%aa[%aaa%aaj%aar%aa!S%aa!l%aa!p%aa#R%aa#n%aa#o%aa#p%aa#q%aa#r%aa#s%aa#t%aa#u%aa#v%aa#x%aa#z%aa#{%aa'y%aa(`%aa(q%aa!k%aa!Y%aa'v%aav%aa!_%aa%i%aa!g%aa~P#LaO#k%caP%caR%ca[%caa%caj%car%ca!S%ca!l%ca!p%ca#R%ca#n%ca#o%ca#p%ca#q%ca#r%ca#s%ca#t%ca#u%ca#v%ca#x%ca#z%ca#{%ca'y%ca(`%ca(q%ca!k%ca!Y%ca'v%cav%ca!_%ca%i%ca!g%ca~P#MSO#k%aaP%aaR%aa[%aaa%aaj%aar%aa!S%aa!]%aa!l%aa!p%aa#R%aa#n%aa#o%aa#p%aa#q%aa#r%aa#s%aa#t%aa#u%aa#v%aa#x%aa#z%aa#{%aa'y%aa(`%aa(q%aa!k%aa!Y%aa'v%aa#`%aav%aa!_%aa%i%aa!g%aa~P#/XO#k%caP%caR%ca[%caa%caj%car%ca!S%ca!]%ca!l%ca!p%ca#R%ca#n%ca#o%ca#p%ca#q%ca#r%ca#s%ca#t%ca#u%ca#v%ca#x%ca#z%ca#{%ca'y%ca(`%ca(q%ca!k%ca!Y%ca'v%ca#`%cav%ca!_%ca%i%ca!g%ca~P#/XO#k}aP}a[}aa}aj}ar}a!l}a!p}a#R}a#n}a#o}a#p}a#q}a#r}a#s}a#t}a#u}a#v}a#x}a#z}a#{}a'y}a(`}a(q}a!k}a!Y}a'v}av}a!_}a%i}a!g}a~P$&vO#k$saP$saR$sa[$saa$saj$sar$sa!S$sa!l$sa!p$sa#R$sa#n$sa#o$sa#p$sa#q$sa#r$sa#s$sa#t$sa#u$sa#v$sa#x$sa#z$sa#{$sa'y$sa(`$sa(q$sa!k$sa!Y$sa'v$sav$sa!_$sa%i$sa!g$sa~P$'rO#k$uaP$uaR$ua[$uaa$uaj$uar$ua!S$ua!l$ua!p$ua#R$ua#n$ua#o$ua#p$ua#q$ua#r$ua#s$ua#t$ua#u$ua#v$ua#x$ua#z$ua#{$ua'y$ua(`$ua(q$ua!k$ua!Y$ua'v$uav$ua!_$ua%i$ua!g$ua~P$(eO#k%TaP%TaR%Ta[%Taa%Taj%Tar%Ta!S%Ta!]%Ta!l%Ta!p%Ta#R%Ta#n%Ta#o%Ta#p%Ta#q%Ta#r%Ta#s%Ta#t%Ta#u%Ta#v%Ta#x%Ta#z%Ta#{%Ta'y%Ta(`%Ta(q%Ta!k%Ta!Y%Ta'v%Ta#`%Tav%Ta!_%Ta%i%Ta!g%Ta~P#/XOa#cq!]#cq'y#cq'v#cq!Y#cq!k#cqv#cq!_#cq%i#cq!g#cq~P!:aO![3dO!]'XX!k'XX~P%[O!].oO!k(ja~O!].oO!k(ja~P!:aO!Y3gO~O$O!na!^!na~PKaO$O!ja!]!ja!^!ja~P#B]O$O!ra!^!ra~P!<wO$O!ta!^!ta~P!?_Og'[X!]'[X~P!+xO!].zOg(oa~OSfO!_3{O$d3|O~O!^4QO~Ov4RO~P#/XOa$mq!]$mq'y$mq'v$mq!Y$mq!k$mqv$mq!_$mq%i$mq!g$mq~P!:aO!Y4TO~P!&oO!S4UO~O!Q)|O'x)}O(y%POn'ha(x'ha!]'ha#`'ha~Og'ha$O'ha~P%,XO!Q)|O'x)}On'ja(x'ja(y'ja!]'ja#`'ja~Og'ja$O'ja~P%,zO(q$YO~P#/XO!YfX!Y$zX!]fX!]$zX!g%RX#`fX~P!/wO(S<xO~P!1jO!S%gO![4XO!_%hO(S%fO!]'dX!k'dX~O!]/kO!k(}a~O!]/kO!g#vO!k(}a~O!]/kO!g#vO(q'nO!k(}a~Og$|i!]$|i#`$|i$O$|i~P!0{O![4aO!Y'fX!]'fX~P!3iO!]/sO!Y)Oa~O!]/sO!Y)Oa~P#/XOP]XR]X[]Xj]Xr]X!Q]X!S]X!Y]X!]]X!l]X!p]X#R]X#S]X#`]X#kfX#n]X#o]X#p]X#q]X#r]X#s]X#t]X#u]X#v]X#x]X#z]X#{]X$Q]X(`]X(q]X(x]X(y]X~Oj%YX!g%YX~P%0kOj4fO!g#vO~Oh%VO!g#vO!l%dO~Oh%VOr4kO!l%dO(q'nO~Or4pO!g#vO(q'nO~Os!nO!S4qO(UTO(XUO(d!mO~O(x$}On%ai!Q%ai'x%ai(y%ai!]%ai#`%ai~Og%ai$O%ai~P%4[O(y%POn%ci!Q%ci'x%ci(x%ci!]%ci#`%ci~Og%ci$O%ci~P%4}Og(^i!](^i~P!0{O#`4wOg(^i!](^i~P!0{O!k4zO~Oa$oq!]$oq'y$oq'v$oq!Y$oq!k$oqv$oq!_$oq%i$oq!g$oq~P!:aO!Y5QO~O!]5RO!_)PX~P#/XOa$zX!_$zX%^]X'y$zX!]$zX~P!/wO%^5UOaoXnoX!QoX!_oX'xoX'yoX(xoX(yoX!]oX~Op5VO(S#nO~O%^5UO~Ob5]O%j5^O(S+nO(UTO(XUO!]'sX!^'sX~O!]0}O!^)Wa~O[5bO~O`5cO~Oa%mO'y%mO~P#/XO!]5kO#`5mO!^)TX~O!^5nO~Or5tOs!nO!S*fO!b!yO!c!vO!d!vO!|;wO#T!pO#U!pO#V!pO#W!pO#X!pO#[5sO#]!zO(T!lO(UTO(XUO(d!mO(n!sO~O!^5rO~P%:YOn5yO!_1gO%i5xO~Oh%VOn5yO!_1gO%i5xO~Ob6QO(S#nO(UTO(XUO!]'rX!^'rX~O!]1rO!^)Ua~O(UTO(XUO(d6SO~O`6WO~Oj6ZO&Z6[O~PM|O!k6]O~P%[Oa6_O~Oa6_O~P%[Ob2YO!^6dO&i2XO~P`O!g6fO~O!g6hOh(ii!](ii!^(ii!g(ii!l(iir(ii(q(ii~O!]#hi!^#hi~P#B]O#`6iO!]#hi!^#hi~O!]!ai!^!ai~P#B]Oa%mO#`6rO'y%mO~Oa%mO!g#vO#`6rO'y%mO~O!](sq!k(sqa(sq'y(sq~P!:aO!](hO!k(rq~O!S%gO!_%hO#j6yO(S%fO~O!_'^O%i6|O~On7QO!_'^O%i6|O~O#k'haP'haR'ha['haa'haj'har'ha!S'ha!l'ha!p'ha#R'ha#n'ha#o'ha#p'ha#q'ha#r'ha#s'ha#t'ha#u'ha#v'ha#x'ha#z'ha#{'ha'y'ha(`'ha(q'ha!k'ha!Y'ha'v'hav'ha!_'ha%i'ha!g'ha~P%,XO#k'jaP'jaR'ja['jaa'jaj'jar'ja!S'ja!l'ja!p'ja#R'ja#n'ja#o'ja#p'ja#q'ja#r'ja#s'ja#t'ja#u'ja#v'ja#x'ja#z'ja#{'ja'y'ja(`'ja(q'ja!k'ja!Y'ja'v'jav'ja!_'ja%i'ja!g'ja~P%,zO#k$|iP$|iR$|i[$|ia$|ij$|ir$|i!S$|i!]$|i!l$|i!p$|i#R$|i#n$|i#o$|i#p$|i#q$|i#r$|i#s$|i#t$|i#u$|i#v$|i#x$|i#z$|i#{$|i'y$|i(`$|i(q$|i!k$|i!Y$|i'v$|i#`$|iv$|i!_$|i%i$|i!g$|i~P#/XO#k%aiP%aiR%ai[%aia%aij%air%ai!S%ai!l%ai!p%ai#R%ai#n%ai#o%ai#p%ai#q%ai#r%ai#s%ai#t%ai#u%ai#v%ai#x%ai#z%ai#{%ai'y%ai(`%ai(q%ai!k%ai!Y%ai'v%aiv%ai!_%ai%i%ai!g%ai~P%4[O#k%ciP%ciR%ci[%cia%cij%cir%ci!S%ci!l%ci!p%ci#R%ci#n%ci#o%ci#p%ci#q%ci#r%ci#s%ci#t%ci#u%ci#v%ci#x%ci#z%ci#{%ci'y%ci(`%ci(q%ci!k%ci!Y%ci'v%civ%ci!_%ci%i%ci!g%ci~P%4}O!]'Xa!k'Xa~P!:aO!].oO!k(ji~O$O#ci!]#ci!^#ci~P#B]OP$[OR#zO!Q#yO!S#{O!l#xO!p$[O(`VO[#mij#mir#mi#R#mi#o#mi#p#mi#q#mi#r#mi#s#mi#t#mi#u#mi#v#mi#x#mi#z#mi#{#mi$O#mi(q#mi(x#mi(y#mi!]#mi!^#mi~O#n#mi~P%MXO#n<PO~P%MXOP$[OR#zOr<]O!Q#yO!S#{O!l#xO!p$[O#n<PO#o<QO#p<QO#q<QO(`VO[#mij#mi#R#mi#s#mi#t#mi#u#mi#v#mi#x#mi#z#mi#{#mi$O#mi(q#mi(x#mi(y#mi!]#mi!^#mi~O#r#mi~P& aO#r<RO~P& aOP$[OR#zO[<_Oj<SOr<]O!Q#yO!S#{O!l#xO!p$[O#R<SO#n<PO#o<QO#p<QO#q<QO#r<RO#s<SO#t<SO#u<^O(`VO#x#mi#z#mi#{#mi$O#mi(q#mi(x#mi(y#mi!]#mi!^#mi~O#v#mi~P&#iOP$[OR#zO[<_Oj<SOr<]O!Q#yO!S#{O!l#xO!p$[O#R<SO#n<PO#o<QO#p<QO#q<QO#r<RO#s<SO#t<SO#u<^O#v<TO(`VO(y#}O#z#mi#{#mi$O#mi(q#mi(x#mi!]#mi!^#mi~O#x<VO~P&%jO#x#mi~P&%jO#v<TO~P&#iOP$[OR#zO[<_Oj<SOr<]O!Q#yO!S#{O!l#xO!p$[O#R<SO#n<PO#o<QO#p<QO#q<QO#r<RO#s<SO#t<SO#u<^O#v<TO#x<VO(`VO(x#|O(y#}O#{#mi$O#mi(q#mi!]#mi!^#mi~O#z#mi~P&'yO#z<XO~P&'yOa#|y!]#|y'y#|y'v#|y!Y#|y!k#|yv#|y!_#|y%i#|y!g#|y~P!:aO[#mij#mir#mi#R#mi#r#mi#s#mi#t#mi#u#mi#v#mi#x#mi#z#mi#{#mi$O#mi(q#mi!]#mi!^#mi~OP$[OR#zO!Q#yO!S#{O!l#xO!p$[O#n<PO#o<QO#p<QO#q<QO(`VO(x#mi(y#mi~P&*uOn=}O!Q)|O'x)}O(x$}O(y%POP#miR#mi!S#mi!l#mi!p#mi#n#mi#o#mi#p#mi#q#mi(`#mi~P&*uO#S$dOP(_XR(_X[(_Xj(_Xn(_Xr(_X!Q(_X!S(_X!l(_X!p(_X#R(_X#n(_X#o(_X#p(_X#q(_X#r(_X#s(_X#t(_X#u(_X#v(_X#x(_X#z(_X#{(_X$O(_X'x(_X(`(_X(q(_X(x(_X(y(_X!](_X!^(_X~O$O$Pi!]$Pi!^$Pi~P#B]O$O!ri!^!ri~P$*bOg'[a!]'[a~P!0{O!^7dO~O!]'ca!^'ca~P#B]O!Y7eO~P#/XO!g#vO(q'nO!]'da!k'da~O!]/kO!k(}i~O!]/kO!g#vO!k(}i~Og$|q!]$|q#`$|q$O$|q~P!0{O!Y'fa!]'fa~P#/XO!g7lO~O!]/sO!Y)Oi~P#/XO!]/sO!Y)Oi~O!Y7oO~Oh%VOr7tO!l%dO(q'nO~Oj7vO!g#vO~Or7yO!g#vO(q'nO~O!Q)|O'x)}O(y%POn'ia(x'ia!]'ia#`'ia~Og'ia$O'ia~P&3vO!Q)|O'x)}On'ka(x'ka(y'ka!]'ka#`'ka~Og'ka$O'ka~P&4iO!Y7{O~Og%Oq!]%Oq#`%Oq$O%Oq~P!0{Og(^q!](^q~P!0{O#`7|Og(^q!](^q~P!0{Oa$oy!]$oy'y$oy'v$oy!Y$oy!k$oyv$oy!_$oy%i$oy!g$oy~P!:aO!g6hO~O!]5RO!_)Pa~O!_'^OP$TaR$Ta[$Taj$Tar$Ta!Q$Ta!S$Ta!]$Ta!l$Ta!p$Ta#R$Ta#n$Ta#o$Ta#p$Ta#q$Ta#r$Ta#s$Ta#t$Ta#u$Ta#v$Ta#x$Ta#z$Ta#{$Ta(`$Ta(q$Ta(x$Ta(y$Ta~O%i6|O~P&7ZO%^8QOa%[i!_%[i'y%[i!]%[i~Oa#cy!]#cy'y#cy'v#cy!Y#cy!k#cyv#cy!_#cy%i#cy!g#cy~P!:aO[8SO~Ob8UO(S+nO(UTO(XUO~O!]0}O!^)Wi~O`8YO~O(d(zO!]'oX!^'oX~O!]5kO!^)Ta~O!^8cO~P%:YO(n!sO~P$${O#[8dO~O!_1gO~O!_1gO%i8fO~On8iO!_1gO%i8fO~O[8nO!]'ra!^'ra~O!]1rO!^)Ui~O!k8rO~O!k8sO~O!k8vO~O!k8vO~P%[Oa8xO~O!g8yO~O!k8zO~O!](vi!^(vi~P#B]Oa%mO#`9SO'y%mO~O!](sy!k(sya(sy'y(sy~P!:aO!](hO!k(ry~O%i9VO~P&7ZO!_'^O%i9VO~O#k$|qP$|qR$|q[$|qa$|qj$|qr$|q!S$|q!]$|q!l$|q!p$|q#R$|q#n$|q#o$|q#p$|q#q$|q#r$|q#s$|q#t$|q#u$|q#v$|q#x$|q#z$|q#{$|q'y$|q(`$|q(q$|q!k$|q!Y$|q'v$|q#`$|qv$|q!_$|q%i$|q!g$|q~P#/XO#k'iaP'iaR'ia['iaa'iaj'iar'ia!S'ia!l'ia!p'ia#R'ia#n'ia#o'ia#p'ia#q'ia#r'ia#s'ia#t'ia#u'ia#v'ia#x'ia#z'ia#{'ia'y'ia(`'ia(q'ia!k'ia!Y'ia'v'iav'ia!_'ia%i'ia!g'ia~P&3vO#k'kaP'kaR'ka['kaa'kaj'kar'ka!S'ka!l'ka!p'ka#R'ka#n'ka#o'ka#p'ka#q'ka#r'ka#s'ka#t'ka#u'ka#v'ka#x'ka#z'ka#{'ka'y'ka(`'ka(q'ka!k'ka!Y'ka'v'kav'ka!_'ka%i'ka!g'ka~P&4iO#k%OqP%OqR%Oq[%Oqa%Oqj%Oqr%Oq!S%Oq!]%Oq!l%Oq!p%Oq#R%Oq#n%Oq#o%Oq#p%Oq#q%Oq#r%Oq#s%Oq#t%Oq#u%Oq#v%Oq#x%Oq#z%Oq#{%Oq'y%Oq(`%Oq(q%Oq!k%Oq!Y%Oq'v%Oq#`%Oqv%Oq!_%Oq%i%Oq!g%Oq~P#/XO!]'Xi!k'Xi~P!:aO$O#cq!]#cq!^#cq~P#B]O(x$}OP%aaR%aa[%aaj%aar%aa!S%aa!l%aa!p%aa#R%aa#n%aa#o%aa#p%aa#q%aa#r%aa#s%aa#t%aa#u%aa#v%aa#x%aa#z%aa#{%aa$O%aa(`%aa(q%aa!]%aa!^%aa~On%aa!Q%aa'x%aa(y%aa~P&HnO(y%POP%caR%ca[%caj%car%ca!S%ca!l%ca!p%ca#R%ca#n%ca#o%ca#p%ca#q%ca#r%ca#s%ca#t%ca#u%ca#v%ca#x%ca#z%ca#{%ca$O%ca(`%ca(q%ca!]%ca!^%ca~On%ca!Q%ca'x%ca(x%ca~P&JuOn=}O!Q)|O'x)}O(y%PO~P&HnOn=}O!Q)|O'x)}O(x$}O~P&JuOR0cO!Q0cO!S0dO#S$dOP}a[}aj}an}ar}a!l}a!p}a#R}a#n}a#o}a#p}a#q}a#r}a#s}a#t}a#u}a#v}a#x}a#z}a#{}a$O}a'x}a(`}a(q}a(x}a(y}a!]}a!^}a~O!Q)|O'x)}OP$saR$sa[$saj$san$sar$sa!S$sa!l$sa!p$sa#R$sa#n$sa#o$sa#p$sa#q$sa#r$sa#s$sa#t$sa#u$sa#v$sa#x$sa#z$sa#{$sa$O$sa(`$sa(q$sa(x$sa(y$sa!]$sa!^$sa~O!Q)|O'x)}OP$uaR$ua[$uaj$uan$uar$ua!S$ua!l$ua!p$ua#R$ua#n$ua#o$ua#p$ua#q$ua#r$ua#s$ua#t$ua#u$ua#v$ua#x$ua#z$ua#{$ua$O$ua(`$ua(q$ua(x$ua(y$ua!]$ua!^$ua~On=}O!Q)|O'x)}O(x$}O(y%PO~OP%TaR%Ta[%Taj%Tar%Ta!S%Ta!l%Ta!p%Ta#R%Ta#n%Ta#o%Ta#p%Ta#q%Ta#r%Ta#s%Ta#t%Ta#u%Ta#v%Ta#x%Ta#z%Ta#{%Ta$O%Ta(`%Ta(q%Ta!]%Ta!^%Ta~P'%zO$O$mq!]$mq!^$mq~P#B]O$O$oq!]$oq!^$oq~P#B]O!^9dO~O$O9eO~P!0{O!g#vO!]'di!k'di~O!g#vO(q'nO!]'di!k'di~O!]/kO!k(}q~O!Y'fi!]'fi~P#/XO!]/sO!Y)Oq~Or9lO!g#vO(q'nO~O[9nO!Y9mO~P#/XO!Y9mO~Oj9tO!g#vO~Og(^y!](^y~P!0{O!]'ma!_'ma~P#/XOa%[q!_%[q'y%[q!]%[q~P#/XO[9yO~O!]0}O!^)Wq~O#`9}O!]'oa!^'oa~O!]5kO!^)Ti~P#B]O!S:PO~O!_1gO%i:SO~O(UTO(XUO(d:XO~O!]1rO!^)Uq~O!k:[O~O!k:]O~O!k:^O~O!k:^O~P%[O#`:aO!]#hy!^#hy~O!]#hy!^#hy~P#B]O%i:fO~P&7ZO!_'^O%i:fO~O$O#|y!]#|y!^#|y~P#B]OP$|iR$|i[$|ij$|ir$|i!S$|i!l$|i!p$|i#R$|i#n$|i#o$|i#p$|i#q$|i#r$|i#s$|i#t$|i#u$|i#v$|i#x$|i#z$|i#{$|i$O$|i(`$|i(q$|i!]$|i!^$|i~P'%zO!Q)|O'x)}O(y%POP'haR'ha['haj'han'har'ha!S'ha!l'ha!p'ha#R'ha#n'ha#o'ha#p'ha#q'ha#r'ha#s'ha#t'ha#u'ha#v'ha#x'ha#z'ha#{'ha$O'ha(`'ha(q'ha(x'ha!]'ha!^'ha~O!Q)|O'x)}OP'jaR'ja['jaj'jan'jar'ja!S'ja!l'ja!p'ja#R'ja#n'ja#o'ja#p'ja#q'ja#r'ja#s'ja#t'ja#u'ja#v'ja#x'ja#z'ja#{'ja$O'ja(`'ja(q'ja(x'ja(y'ja!]'ja!^'ja~O(x$}OP%aiR%ai[%aij%ain%air%ai!Q%ai!S%ai!l%ai!p%ai#R%ai#n%ai#o%ai#p%ai#q%ai#r%ai#s%ai#t%ai#u%ai#v%ai#x%ai#z%ai#{%ai$O%ai'x%ai(`%ai(q%ai(y%ai!]%ai!^%ai~O(y%POP%ciR%ci[%cij%cin%cir%ci!Q%ci!S%ci!l%ci!p%ci#R%ci#n%ci#o%ci#p%ci#q%ci#r%ci#s%ci#t%ci#u%ci#v%ci#x%ci#z%ci#{%ci$O%ci'x%ci(`%ci(q%ci(x%ci!]%ci!^%ci~O$O$oy!]$oy!^$oy~P#B]O$O#cy!]#cy!^#cy~P#B]O!g#vO!]'dq!k'dq~O!]/kO!k(}y~O!Y'fq!]'fq~P#/XOr:pO!g#vO(q'nO~O[:tO!Y:sO~P#/XO!Y:sO~Og(^!R!](^!R~P!0{Oa%[y!_%[y'y%[y!]%[y~P#/XO!]0}O!^)Wy~O!]5kO!^)Tq~O(S:zO~O!_1gO%i:}O~O!k;QO~O%i;VO~P&7ZOP$|qR$|q[$|qj$|qr$|q!S$|q!l$|q!p$|q#R$|q#n$|q#o$|q#p$|q#q$|q#r$|q#s$|q#t$|q#u$|q#v$|q#x$|q#z$|q#{$|q$O$|q(`$|q(q$|q!]$|q!^$|q~P'%zO!Q)|O'x)}O(y%POP'iaR'ia['iaj'ian'iar'ia!S'ia!l'ia!p'ia#R'ia#n'ia#o'ia#p'ia#q'ia#r'ia#s'ia#t'ia#u'ia#v'ia#x'ia#z'ia#{'ia$O'ia(`'ia(q'ia(x'ia!]'ia!^'ia~O!Q)|O'x)}OP'kaR'ka['kaj'kan'kar'ka!S'ka!l'ka!p'ka#R'ka#n'ka#o'ka#p'ka#q'ka#r'ka#s'ka#t'ka#u'ka#v'ka#x'ka#z'ka#{'ka$O'ka(`'ka(q'ka(x'ka(y'ka!]'ka!^'ka~OP%OqR%Oq[%Oqj%Oqr%Oq!S%Oq!l%Oq!p%Oq#R%Oq#n%Oq#o%Oq#p%Oq#q%Oq#r%Oq#s%Oq#t%Oq#u%Oq#v%Oq#x%Oq#z%Oq#{%Oq$O%Oq(`%Oq(q%Oq!]%Oq!^%Oq~P'%zOg%e!Z!]%e!Z#`%e!Z$O%e!Z~P!0{O!Y;ZO~P#/XOr;[O!g#vO(q'nO~O[;^O!Y;ZO~P#/XO!]'oq!^'oq~P#B]O!]#h!Z!^#h!Z~P#B]O#k%e!ZP%e!ZR%e!Z[%e!Za%e!Zj%e!Zr%e!Z!S%e!Z!]%e!Z!l%e!Z!p%e!Z#R%e!Z#n%e!Z#o%e!Z#p%e!Z#q%e!Z#r%e!Z#s%e!Z#t%e!Z#u%e!Z#v%e!Z#x%e!Z#z%e!Z#{%e!Z'y%e!Z(`%e!Z(q%e!Z!k%e!Z!Y%e!Z'v%e!Z#`%e!Zv%e!Z!_%e!Z%i%e!Z!g%e!Z~P#/XOr;fO!g#vO(q'nO~O!Y;gO~P#/XOr;nO!g#vO(q'nO~O!Y;oO~P#/XOP%e!ZR%e!Z[%e!Zj%e!Zr%e!Z!S%e!Z!l%e!Z!p%e!Z#R%e!Z#n%e!Z#o%e!Z#p%e!Z#q%e!Z#r%e!Z#s%e!Z#t%e!Z#u%e!Z#v%e!Z#x%e!Z#z%e!Z#{%e!Z$O%e!Z(`%e!Z(q%e!Z!]%e!Z!^%e!Z~P'%zOr;rO!g#vO(q'nO~Ov(eX~P1qO!Q%qO~P!)PO(T!lO~P!)PO!YfX!]fX#`fX~P%0kOP]XR]X[]Xj]Xr]X!Q]X!S]X!]]X!]fX!l]X!p]X#R]X#S]X#`]X#`fX#kfX#n]X#o]X#p]X#q]X#r]X#s]X#t]X#u]X#v]X#x]X#z]X#{]X$Q]X(`]X(q]X(x]X(y]X~O!gfX!k]X!kfX(qfX~P'JsOP;vOQ;vOSfOd=rOe!iOpkOr;vOskOtkOzkO|;vO!O;vO!SWO!WkO!XkO!_XO!i;yO!lZO!o;vO!p;vO!q;vO!s;zO!u;}O!x!hO$W!kO$n=pO(S)ZO(UTO(XUO(`VO(n[O~O!]<ZO!^$qa~Oh%VOp%WOr%XOs$tOt$tOz%YO|%ZO!O<fO!S${O!_$|O!i=wO!l$xO#j<lO$W%_O$t<hO$v<jO$y%`O(S(tO(UTO(XUO(`$uO(x$}O(y%PO~Ol)bO~P( iOr!eX(q!eX~P# }Or(iX(q(iX~P#!pO!^]X!^fX~P'JsO!YfX!Y$zX!]fX!]$zX#`fX~P!/wO#k<OO~O!g#vO#k<OO~O#`<`O~Oj<SO~O#`<pO!](vX!^(vX~O#`<`O!](tX!^(tX~O#k<qO~Og<sO~P!0{O#k<yO~O#k<zO~O!g#vO#k<{O~O!g#vO#k<qO~O$O<|O~P#B]O#k<}O~O#k=OO~O#k=TO~O#k=UO~O#k=VO~O#k=WO~O$O=XO~P!0{O$O=YO~P!0{Ok#S#T#U#W#X#[#i#j#u$n$t$v$y%]%^%h%i%j%q%s%v%w%y%{~'}T#o!X'{(T#ps#n#qr!Q'|$]'|(S$_(d~",
  goto: "$8g)[PPPPPP)]PP)`P)qP+R/WPPPP6bPP6xPP<pPPP@dP@zP@zPPP@zPCSP@zP@zP@zPCWPC]PCzPHtPPPHxPPPPHxK{PPPLRLsPHxPHxPP! RHxPPPHxPHxP!#YHxP!&p!'u!(OP!(r!(v!(r!,TPPPPPPP!,t!'uPP!-U!.vP!2SHxHx!2X!5e!:R!:R!>QPPP!>YHxPPPPPPPPP!AiP!BvPPHx!DXPHxPHxHxHxHxHxPHx!EkP!HuP!K{P!LP!LZ!L_!L_P!HrP!Lc!LcP# iP# mHxPHx# s#$xCW@zP@zP@z@zP#&V@z@z#(i@z#+a@z#-m@z@z#.]#0q#0q#0v#1P#0q#1[PP#0qP@z#1t@z#5s@z@z6bPPP#9xPPP#:c#:cP#:cP#:y#:cPP#;PP#:vP#:v#;d#:v#<O#<U#<X)`#<[)`P#<c#<c#<cP)`P)`P)`P)`PP)`P#<i#<lP#<l)`P#<pP#<sP)`P)`P)`P)`P)`P)`)`PP#<y#=P#=[#=b#=h#=n#=t#>S#>Y#>d#>j#>t#>z#?[#?b#@S#@f#@l#@r#AQ#Ag#C[#Cj#Cq#E]#Ek#G]#Gk#Gq#Gw#G}#HX#H_#He#Ho#IR#IXPPPPPPPPPPP#I_PPPPPPP#JS#MZ#Ns#Nz$ SPPP$&nP$&w$)p$0Z$0^$0a$1`$1c$1j$1rP$1x$1{P$2i$2m$3e$4s$4x$5`PP$5e$5k$5o$5r$5v$5z$6v$7_$7v$7z$7}$8Q$8W$8Z$8_$8cR!|RoqOXst!Z#d%l&p&r&s&u,n,s2S2VY!vQ'^-`1g5qQ%svQ%{yQ&S|Q&h!VS'U!e-WQ'd!iS'j!r!yU*h$|*X*lQ+l%|Q+y&UQ,_&bQ-^']Q-h'eQ-p'kQ0U*nQ1q,`R<m;z%SdOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y,k,n,s-d-l-z.Q.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3d4q5y6Z6[6_6r8i8x9SS#q];w!r)]$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sU*{%[<e<fQ+q&OQ,a&eQ,h&mQ0r+dQ0w+fQ1S+rQ1y,fQ3W.bQ5V0vQ5]0}Q6Q1rQ7O3[Q8U5^R9Y7Q'QkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=s!S!nQ!r!v!y!z$|'U']'^'j'k'l*h*l*n*o-W-^-`-p0U0X1g5q5s%[$ti#v$b$c$d$x${%O%Q%]%^%b)w*P*R*T*W*^*d*t*u+c+f+},Q.a.z/_/h/r/s/u0Y0[0g0h0i1^1a1i3Z4U4V4a4f4w5R5U5x6|7l7v7|8Q8f9V9e9n9t:S:f:t:};V;^<^<_<a<b<c<d<g<h<i<j<k<l<t<u<v<w<y<z<}=O=P=Q=R=S=T=U=X=Y=p=x=y=|=}Q&V|Q'S!eS'Y%h-ZQ+q&OQ,a&eQ0f+OQ1S+rQ1X+xQ1x,eQ1y,fQ5]0}Q5f1ZQ6Q1rQ6T1tQ6U1wQ8U5^Q8X5cQ8q6WQ9|8YQ:Y8nR<o*XrnOXst!V!Z#d%l&g&p&r&s&u,n,s2S2VR,c&i&z^OPXYstuvwz!Z!`!g!j!o#S#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=r=s[#]WZ#W#Z'V(R!b%im#h#i#l$x%d%g([(f(g(h*W*[*_+W+X+Z,j-Q.O.U.V.W.Y/h/k2[3S3T4X6h6yQ%vxQ%zyS&P|&UQ&]!TQ'a!hQ'c!iQ(o#sS+k%{%|Q+o&OQ,Y&`Q,^&bS-g'd'eQ.d(pQ0{+lQ1R+rQ1T+sQ1W+wQ1l,ZS1p,_,`Q2t-hQ5[0}Q5`1QQ5e1YQ6P1qQ8T5^Q8W5bQ9x8SR:w9y!U$zi$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=y!^%xy!i!u%z%{%|'T'c'd'e'i's*g+k+l-T-g-h-o/{0O0{2m2t2{4i4j4m7s9pQ+e%vQ,O&YQ,R&ZQ,]&bQ.c(oQ1k,YU1o,^,_,`Q3].dQ5z1lS6O1p1qQ8m6P#f=t#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}o=u<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=YW%Ti%V*v=pS&Y!Q&gQ&Z!RQ&[!SQ+S%cR+|&W%]%Si#v$b$c$d$x${%O%Q%]%^%b)w*P*R*T*W*^*d*t*u+c+f+},Q.a.z/_/h/r/s/u0Y0[0g0h0i1^1a1i3Z4U4V4a4f4w5R5U5x6|7l7v7|8Q8f9V9e9n9t:S:f:t:};V;^<^<_<a<b<c<d<g<h<i<j<k<l<t<u<v<w<y<z<}=O=P=Q=R=S=T=U=X=Y=p=x=y=|=}T)x$u)yV*{%[<e<fW'Y!e%h*X-ZS({#y#zQ+`%qQ+v&RS.](k(lQ1b,SQ4x0cR8^5k'QkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=s$i$^c#Y#e%p%r%t(Q(W(r(w)P)Q)R)S)T)U)V)W)X)Y)[)^)`)e)o+a+u-U-s-x-}.P.n.q.u.w.x.y/]0j2c2f2v2}3c3h3i3j3k3l3m3n3o3p3q3r3s3t3w3x4P5O5Y6k6q6v7V7W7a7b8`8|9Q9[9b9c:c:y;R;x=gT#TV#U'RkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sQ'W!eR2i-W!W!nQ!e!r!v!y!z$|'U']'^'j'k'l*X*h*l*n*o-W-^-`-p0U0X1g5q5sR1d,UnqOXst!Z#d%l&p&r&s&u,n,s2S2VQ&w!^Q't!xS(q#u<OQ+i%yQ,W&]Q,X&_Q-e'bQ-r'mS.m(v<qS0k+U<{Q0y+jQ1f,VQ2Z,uQ2],vQ2e-RQ2r-fQ2u-jS5P0l=VQ5W0zS5Z0|=WQ6j2gQ6n2sQ6s2zQ8R5XQ8}6lQ9O6oQ9R6tR:`8z$d$]c#Y#e%r%t(Q(W(r(w)P)Q)R)S)T)U)V)W)X)Y)[)^)`)e)o+a+u-U-s-x-}.P.n.q.u.x.y/]0j2c2f2v2}3c3h3i3j3k3l3m3n3o3p3q3r3s3t3w3x4P5O5Y6k6q6v7V7W7a7b8`8|9Q9[9b9c:c:y;R;x=gS(m#p'gQ(}#zS+_%p.wS.^(l(nR3U._'QkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sS#q];wQ&r!XQ&s!YQ&u![Q&v!]R2R,qQ'_!hQ+b%vQ-c'aS.`(o+eQ2p-bW3Y.c.d0q0sQ6m2qW6z3V3X3]5TU9U6{6}7PU:e9W9X9ZS;T:d:gQ;b;UR;j;cU!wQ'^-`T5o1g5q!Q_OXZ`st!V!Z#d#h%d%l&g&i&p&r&s&u(h,n,s.V2S2V]!pQ!r'^-`1g5qT#q];w%^{OPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9SS({#y#zS.](k(l!s=^$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sU$fd)],hS(n#p'gU*s%R(u3vU0e*z.i7]Q5T0rQ6{3WQ9X7OR:g9Ym!tQ!r!v!y!z'^'j'k'l-`-p1g5q5sQ'r!uS(d#g1|S-n'i'uQ/n*ZQ/{*gQ2|-qQ4]/oQ4i/}Q4j0OQ4o0WQ7h4WS7s4k4mS7w4p4rQ9g7iQ9k7oQ9p7tQ9u7yS:o9l9mS;Y:p:sS;e;Z;[S;m;f;gS;q;n;oR;t;rQ#wbQ'q!uS(c#g1|S(e#m+TQ+V%eQ+g%wQ+m%}U-m'i'r'uQ.R(dQ/m*ZQ/|*gQ0P*iQ0x+hQ1m,[S2y-n-qQ3R.ZS4[/n/oQ4e/yS4h/{0WQ4l0QQ5|1nQ6u2|Q7g4WQ7k4]U7r4i4o4rQ7u4nQ8k5}S9f7h7iQ9j7oQ9r7wQ9s7xQ:V8lQ:m9gS:n9k9mQ:v9uQ;P:WS;X:o:sS;d;Y;ZS;l;e;gS;p;m;oQ;s;qQ;u;tQ=a=[Q=l=eR=m=fV!wQ'^-`%^aOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9SS#wz!j!r=Z$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sR=a=r%^bOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9SQ%ej!^%wy!i!u%z%{%|'T'c'd'e'i's*g+k+l-T-g-h-o/{0O0{2m2t2{4i4j4m7s9pS%}z!jQ+h%xQ,[&bW1n,],^,_,`U5}1o1p1qS8l6O6PQ:W8m!r=[$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sQ=e=qR=f=r%QeOPXYstuvw!Z!`!g!o#S#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&p&r&s&u&y'R'`'p(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9SY#bWZ#W#Z(R!b%im#h#i#l$x%d%g([(f(g(h*W*[*_+W+X+Z,j-Q.O.U.V.W.Y/h/k2[3S3T4X6h6yQ,i&m!p=]$Z$n)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sR=`'VU'Z!e%h*XR2k-Z%SdOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y,k,n,s-d-l-z.Q.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3d4q5y6Z6[6_6r8i8x9S!r)]$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sQ,h&mQ0r+dQ3W.bQ7O3[R9Y7Q!b$Tc#Y%p(Q(W(r(w)X)Y)^)e+u-s-x-}.P.n.q/]0j2v2}3c3s5O5Y6q6v7V9Q:c;x!P<U)[)o-U.w2c2f3h3q3r3w4P6k7W7a7b8`8|9[9b9c:y;R=g!f$Vc#Y%p(Q(W(r(w)U)V)X)Y)^)e+u-s-x-}.P.n.q/]0j2v2}3c3s5O5Y6q6v7V9Q:c;x!T<W)[)o-U.w2c2f3h3n3o3q3r3w4P6k7W7a7b8`8|9[9b9c:y;R=g!^$Zc#Y%p(Q(W(r(w)^)e+u-s-x-}.P.n.q/]0j2v2}3c3s5O5Y6q6v7V9Q:c;xQ4V/fz=s)[)o-U.w2c2f3h3w4P6k7W7a7b8`8|9[9b9c:y;R=gQ=x=zR=y={'QkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sS$oh$pR3|/P'XgOPWXYZhstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n$p%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/P/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sT$kf$qQ$ifS)h$l)lR)t$qT$jf$qT)j$l)l'XhOPWXYZhstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n$p%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/P/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sT$oh$pQ$rhR)s$p%^jOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9S!s=q$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=s#glOPXZst!Z!`!o#S#d#o#{$n%l&i&l&m&p&r&s&u&y'R'`(|)q*f+Y+d,k,n,s-d.b/Q/i0V0d1j1z1{1}2P2S2V2X3[3{4q5y6Z6[6_7Q8i8x!U%Ri$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=y#f(u#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}Q+P%`Q/^)|o3v<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=Y!U$yi$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=yQ*`$zU*i$|*X*lQ+Q%aQ0Q*j#f=c#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}n=d<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=YQ=h=tQ=i=uQ=j=vR=k=w!U%Ri$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=y#f(u#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}o3v<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=YnoOXst!Z#d%l&p&r&s&u,n,s2S2VS*c${*WQ,|&|Q,}'OR4`/s%[%Si#v$b$c$d$x${%O%Q%]%^%b)w*P*R*T*W*^*d*t*u+c+f+},Q.a.z/_/h/r/s/u0Y0[0g0h0i1^1a1i3Z4U4V4a4f4w5R5U5x6|7l7v7|8Q8f9V9e9n9t:S:f:t:};V;^<^<_<a<b<c<d<g<h<i<j<k<l<t<u<v<w<y<z<}=O=P=Q=R=S=T=U=X=Y=p=x=y=|=}Q,P&ZQ1`,RQ5i1_R8]5jV*k$|*X*lU*k$|*X*lT5p1g5qS/y*f/iQ4n0VT7x4q:PQ+g%wQ0P*iQ0x+hQ1m,[Q5|1nQ8k5}Q:V8lR;P:W!U%Oi$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=yx*P$v)c*Q*r+R/q0^0_3y4^4{4|4}7f7z9v:l=b=n=oS0Y*q0Z#f<a#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}n<b<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=Y!d<t(s)a*Y*b.e.h.l/Y/f/v0p1]3`4S4_4c5h7R7U7m7p7}8P9i9q9w:q:u;W;];h=z={`<u3u7X7[7`9]:h:k;kS=P.g3aT=Q7Z9`!U%Qi$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=y|*R$v)c*S*q+R/b/q0^0_3y4^4s4{4|4}7f7z9v:l=b=n=oS0[*r0]#f<c#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}n<d<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=Y!h<v(s)a*Y*b.f.g.l/Y/f/v0p1]3^3`4S4_4c5h7R7S7U7m7p7}8P9i9q9w:q:u;W;];h=z={d<w3u7Y7Z7`9]9^:h:i:k;kS=R.h3bT=S7[9arnOXst!V!Z#d%l&g&p&r&s&u,n,s2S2VQ&d!UR,k&mrnOXst!V!Z#d%l&g&p&r&s&u,n,s2S2VR&d!UQ,T&[R1[+|snOXst!V!Z#d%l&g&p&r&s&u,n,s2S2VQ1h,YS5w1k1lU8e5u5v5zS:R8g8hS:{:Q:TQ;_:|R;i;`Q&k!VR,d&gR6T1tR:Y8nS&P|&UR1T+sQ&p!WR,n&qR,t&vT2T,s2VR,x&wQ,w&wR2^,xQ'w!{R-t'wSsOtQ#dXT%os#dQ#OTR'y#OQ#RUR'{#RQ)y$uR/Z)yQ#UVR(O#UQ#XWU(U#X(V-{Q(V#YR-{(WQ-X'WR2j-XQ.p(wS3e.p3fR3f.qQ-`'^R2n-`Y!rQ'^-`1g5qR'h!rQ.{)cR3z.{U#_W%g*WU(]#_(^-|Q(^#`R-|(XQ-['ZR2l-[t`OXst!V!Z#d%l&g&i&p&r&s&u,n,s2S2VS#hZ%dU#r`#h.VR.V(hQ(i#jQ.S(eW.[(i.S3P6wQ3P.TR6w3QQ)l$lR/R)lQ$phR)r$pQ$`cU)_$`-w<[Q-w;xR<[)oQ/l*ZW4Y/l4Z7j9hU4Z/m/n/oS7j4[4]R9h7k$e*O$v(s)a)c*Y*b*q*r*|*}+R.g.h.j.k.l/Y/b/d/f/q/v0^0_0p1]3^3_3`3u3y4S4^4_4c4s4u4{4|4}5h7R7S7T7U7Z7[7^7_7`7f7m7p7z7}8P9]9^9_9i9q9v9w:h:i:j:k:l:q:u;W;];h;k=b=n=o=z={Q/t*bU4b/t4d7nQ4d/vR7n4cS*l$|*XR0S*lx*Q$v)c*q*r+R/q0^0_3y4^4{4|4}7f7z9v:l=b=n=o!d.e(s)a*Y*b.g.h.l/Y/f/v0p1]3`4S4_4c5h7R7U7m7p7}8P9i9q9w:q:u;W;];h=z={U/c*Q.e7Xa7X3u7Z7[7`9]:h:k;kQ0Z*qQ3a.gU4t0Z3a9`R9`7Z|*S$v)c*q*r+R/b/q0^0_3y4^4s4{4|4}7f7z9v:l=b=n=o!h.f(s)a*Y*b.g.h.l/Y/f/v0p1]3^3`4S4_4c5h7R7S7U7m7p7}8P9i9q9w:q:u;W;];h=z={U/e*S.f7Ye7Y3u7Z7[7`9]9^:h:i:k;kQ0]*rQ3b.hU4v0]3b9aR9a7[Q*w%UR0a*wQ5S0pR8O5SQ+[%jR0o+[Q5l1bS8_5l:OR:O8`Q,V&]R1e,VQ5q1gR8b5qQ1s,aS6R1s8oR8o6TQ1O+oW5_1O5a8V9zQ5a1RQ8V5`R9z8WQ+t&PR1U+tQ2V,sR6c2VYrOXst#dQ&t!ZQ+^%lQ,m&pQ,o&rQ,p&sQ,r&uQ2Q,nS2T,s2VR6b2SQ%npQ&x!_Q&{!aQ&}!bQ'P!cQ'o!uQ+]%kQ+i%yQ+{&VQ,c&kQ,z&zW-k'i'q'r'uQ-r'mQ0R*kQ0y+jS1v,d,gQ2_,yQ2`,|Q2a,}Q2u-jW2w-m-n-q-sQ5W0zQ5d1XQ5g1]Q5{1mQ6V1xQ6a2RU6p2v2y2|Q6s2zQ8R5XQ8Z5fQ8[5hQ8a5pQ8j5|Q8p6US9P6q6uQ9R6tQ9{8XQ:U8kQ:Z8qQ:b9QQ:x9|Q;O:VQ;S:cR;a;PQ%yyQ'b!iQ'm!uU+j%z%{%|Q-R'TU-f'c'd'eS-j'i'sQ/z*gS0z+k+lQ2g-TS2s-g-hQ2z-oS4g/{0OQ5X0{Q6l2mQ6o2tQ6t2{U7q4i4j4mQ9o7sR:r9pS$wi=pR*x%VU%Ui%V=pR0`*vQ$viS(s#v+fS)a$b$cQ)c$dQ*Y$xS*b${*WQ*q%OQ*r%QQ*|%]Q*}%^Q+R%bQ.g<aQ.h<cQ.j<gQ.k<iQ.l<kQ/Y)wQ/b*PQ/d*RQ/f*TQ/q*^S/v*d/hQ0^*tQ0_*ul0p+c,Q.a1a1i3Z5x6|8f9V:S:f:};VQ1]+}Q3^<tQ3_<vQ3`<yS3u<^<_Q3y.zS4S/_4UQ4^/rQ4_/sQ4c/uQ4s0YQ4u0[Q4{0gQ4|0hQ4}0iQ5h1^Q7R<}Q7S=PQ7T=RQ7U=TQ7Z<bQ7[<dQ7^<hQ7_<jQ7`<lQ7f4VQ7m4aQ7p4fQ7z4wQ7}5RQ8P5UQ9]<zQ9^<uQ9_<wQ9i7lQ9q7vQ9v7|Q9w8QQ:h=OQ:i=QQ:j=SQ:k=UQ:l9eQ:q9nQ:u9tQ;W=XQ;]:tQ;h;^Q;k=YQ=b=pQ=n=xQ=o=yQ=z=|R={=}Q*z%[Q.i<eR7]<fnpOXst!Z#d%l&p&r&s&u,n,s2S2VQ!fPS#fZ#oQ&z!`W'f!o*f0V4qQ'}#SQ)O#{Q)p$nS,g&i&lQ,l&mQ,y&yS-O'R/iQ-b'`Q.s(|Q/V)qQ0m+YQ0s+dQ2O,kQ2q-dQ3X.bQ4O/QQ4y0dQ5v1jQ6X1zQ6Y1{Q6^1}Q6`2PQ6e2XQ7P3[Q7c3{Q8h5yQ8t6ZQ8u6[Q8w6_Q9Z7QQ:T8iR:_8x#[cOPXZst!Z!`!o#d#o#{%l&i&l&m&p&r&s&u&y'R'`(|*f+Y+d,k,n,s-d.b/i0V0d1j1z1{1}2P2S2V2X3[4q5y6Z6[6_7Q8i8xQ#YWQ#eYQ%puQ%rvS%tw!gS(Q#W(TQ(W#ZQ(r#uQ(w#xQ)P$OQ)Q$PQ)R$QQ)S$RQ)T$SQ)U$TQ)V$UQ)W$VQ)X$WQ)Y$XQ)[$ZQ)^$_Q)`$aQ)e$eW)o$n)q/Q3{Q+a%sQ+u&QS-U'V2hQ-s'pS-x(R-zQ-}(ZQ.P(bQ.n(vQ.q(xQ.u;vQ.w;yQ.x;zQ.y;}Q/]){Q0j+UQ2c-PQ2f-SQ2v-lQ2}.QQ3c.oQ3h<OQ3i<PQ3j<QQ3k<RQ3l<SQ3m<TQ3n<UQ3o<VQ3p<WQ3q<XQ3r<YQ3s.vQ3t<]Q3w<`Q3x<mQ4P<ZQ5O0lQ5Y0|Q6k<pQ6q2xQ6v3OQ7V3dQ7W<qQ7a<sQ7b<{Q8`5mQ8|6iQ9Q6rQ9[<|Q9b=VQ9c=WQ:c9SQ:y9}Q;R:aQ;x#SR=g=sR#[WR'X!el!tQ!r!v!y!z'^'j'k'l-`-p1g5q5sS'T!e-WU*g$|*X*lS-T'U']S0O*h*nQ0W*oQ2m-^Q4m0UR4r0XR(y#xQ!fQT-_'^-`]!qQ!r'^-`1g5qQ#p]R'g;wR)d$dY!uQ'^-`1g5qQ'i!rS's!v!yS'u!z5sS-o'j'kQ-q'lR2{-pT#kZ%dS#jZ%dS%jm,jU(e#h#i#lS.T(f(gQ.X(hQ0n+ZQ3Q.UU3R.V.W.YS6x3S3TR9T6yd#^W#W#Z%g(R([*W+W.O/hr#gZm#h#i#l%d(f(g(h+Z.U.V.W.Y3S3T6yS*Z$x*_Q/o*[Q1|,jQ2d-QQ4W/kQ6g2[Q7i4XQ8{6hT=_'V+XV#aW%g*WU#`W%g*WS(S#W([U(X#Z+W/hS-V'V+XT-y(R.OV'[!e%h*XQ$lfR)v$qT)k$l)lR3}/PT*]$x*_T*e${*WQ0q+cQ1_,QQ3V.aQ5j1aQ5u1iQ6}3ZQ8g5xQ9W6|Q:Q8fQ:d9VQ:|:SQ;U:fQ;`:}R;c;VnqOXst!Z#d%l&p&r&s&u,n,s2S2VQ&j!VR,c&gtmOXst!U!V!Z#d%l&g&p&r&s&u,n,s2S2VR,j&mT%km,jR1c,SR,b&eQ&T|R+z&UR+p&OT&n!W&qT&o!W&qT2U,s2V",
  nodeNames: "⚠ ArithOp ArithOp ?. JSXStartTag LineComment BlockComment Script Hashbang ExportDeclaration export Star as VariableName String Escape from ; default FunctionDeclaration async function VariableDefinition > < TypeParamList in out const TypeDefinition extends ThisType this LiteralType ArithOp Number BooleanLiteral TemplateType InterpolationEnd Interpolation InterpolationStart NullType null VoidType void TypeofType typeof MemberExpression . PropertyName [ TemplateString Escape Interpolation super RegExp ] ArrayExpression Spread , } { ObjectExpression Property async get set PropertyDefinition Block : NewTarget new NewExpression ) ( ArgList UnaryExpression delete LogicOp BitOp YieldExpression yield AwaitExpression await ParenthesizedExpression ClassExpression class ClassBody MethodDeclaration Decorator @ MemberExpression PrivatePropertyName CallExpression TypeArgList CompareOp < declare Privacy static abstract override PrivatePropertyDefinition PropertyDeclaration readonly accessor Optional TypeAnnotation Equals StaticBlock FunctionExpression ArrowFunction ParamList ParamList ArrayPattern ObjectPattern PatternProperty Privacy readonly Arrow MemberExpression BinaryExpression ArithOp ArithOp ArithOp ArithOp BitOp CompareOp instanceof satisfies CompareOp BitOp BitOp BitOp LogicOp LogicOp ConditionalExpression LogicOp LogicOp AssignmentExpression UpdateOp PostfixExpression CallExpression InstantiationExpression TaggedTemplateExpression DynamicImport import ImportMeta JSXElement JSXSelfCloseEndTag JSXSelfClosingTag JSXIdentifier JSXBuiltin JSXIdentifier JSXNamespacedName JSXMemberExpression JSXSpreadAttribute JSXAttribute JSXAttributeValue JSXEscape JSXEndTag JSXOpenTag JSXFragmentTag JSXText JSXEscape JSXStartCloseTag JSXCloseTag PrefixCast < ArrowFunction TypeParamList SequenceExpression InstantiationExpression KeyofType keyof UniqueType unique ImportType InferredType infer TypeName ParenthesizedType FunctionSignature ParamList NewSignature IndexedType TupleType Label ArrayType ReadonlyType ObjectType MethodType PropertyType IndexSignature PropertyDefinition CallSignature TypePredicate asserts is NewSignature new UnionType LogicOp IntersectionType LogicOp ConditionalType ParameterizedType ClassDeclaration abstract implements type VariableDeclaration let var using TypeAliasDeclaration InterfaceDeclaration interface EnumDeclaration enum EnumBody NamespaceDeclaration namespace module AmbientDeclaration declare GlobalDeclaration global ClassDeclaration ClassBody AmbientFunctionDeclaration ExportGroup VariableName VariableName ImportDeclaration ImportGroup ForStatement for ForSpec ForInSpec ForOfSpec of WhileStatement while WithStatement with DoStatement do IfStatement if else SwitchStatement switch SwitchBody CaseLabel case DefaultLabel TryStatement try CatchClause catch FinallyClause finally ReturnStatement return ThrowStatement throw BreakStatement break ContinueStatement continue DebuggerStatement debugger LabeledStatement ExpressionStatement SingleExpression SingleClassItem",
  maxTerm: 379,
  context: NA,
  nodeProps: [
    ["isolate", -8, 5, 6, 14, 37, 39, 51, 53, 55, ""],
    ["group", -26, 9, 17, 19, 68, 207, 211, 215, 216, 218, 221, 224, 234, 236, 242, 244, 246, 248, 251, 257, 263, 265, 267, 269, 271, 273, 274, "Statement", -34, 13, 14, 32, 35, 36, 42, 51, 54, 55, 57, 62, 70, 72, 76, 80, 82, 84, 85, 110, 111, 120, 121, 136, 139, 141, 142, 143, 144, 145, 147, 148, 167, 169, 171, "Expression", -23, 31, 33, 37, 41, 43, 45, 173, 175, 177, 178, 180, 181, 182, 184, 185, 186, 188, 189, 190, 201, 203, 205, 206, "Type", -3, 88, 103, 109, "ClassItem"],
    ["openedBy", 23, "<", 38, "InterpolationStart", 56, "[", 60, "{", 73, "(", 160, "JSXStartCloseTag"],
    ["closedBy", -2, 24, 168, ">", 40, "InterpolationEnd", 50, "]", 61, "}", 74, ")", 165, "JSXEndTag"]
  ],
  propSources: [e5],
  skippedNodes: [0, 5, 6, 277],
  repeatNodeCount: 37,
  tokenData: "$Fq07[R!bOX%ZXY+gYZ-yZ[+g[]%Z]^.c^p%Zpq+gqr/mrs3cst:_tuEruvJSvwLkwx! Yxy!'iyz!(sz{!)}{|!,q|}!.O}!O!,q!O!P!/Y!P!Q!9j!Q!R#:O!R![#<_![!]#I_!]!^#Jk!^!_#Ku!_!`$![!`!a$$v!a!b$*T!b!c$,r!c!}Er!}#O$-|#O#P$/W#P#Q$4o#Q#R$5y#R#SEr#S#T$7W#T#o$8b#o#p$<r#p#q$=h#q#r$>x#r#s$@U#s$f%Z$f$g+g$g#BYEr#BY#BZ$A`#BZ$ISEr$IS$I_$A`$I_$I|Er$I|$I}$Dk$I}$JO$Dk$JO$JTEr$JT$JU$A`$JU$KVEr$KV$KW$A`$KW&FUEr&FU&FV$A`&FV;'SEr;'S;=`I|<%l?HTEr?HT?HU$A`?HUOEr(n%d_$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z&j&hT$i&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c&j&zP;=`<%l&c'|'U]$i&j(Y!bOY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}!b(SU(Y!bOY'}Zw'}x#O'}#P;'S'};'S;=`(f<%lO'}!b(iP;=`<%l'}'|(oP;=`<%l&}'[(y]$i&j(VpOY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(rp)wU(VpOY)rZr)rs#O)r#P;'S)r;'S;=`*Z<%lO)rp*^P;=`<%l)r'[*dP;=`<%l(r#S*nX(Vp(Y!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g#S+^P;=`<%l*g(n+dP;=`<%l%Z07[+rq$i&j(Vp(Y!b'{0/lOX%ZXY+gYZ&cZ[+g[p%Zpq+gqr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p$f%Z$f$g+g$g#BY%Z#BY#BZ+g#BZ$IS%Z$IS$I_+g$I_$JT%Z$JT$JU+g$JU$KV%Z$KV$KW+g$KW&FU%Z&FU&FV+g&FV;'S%Z;'S;=`+a<%l?HT%Z?HT?HU+g?HUO%Z07[.ST(W#S$i&j'|0/lO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c07[.n_$i&j(Vp(Y!b'|0/lOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z)3p/x`$i&j!p),Q(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`0z!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW1V`#v(Ch$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`2X!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW2d_#v(Ch$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'At3l_(U':f$i&j(Y!bOY4kYZ5qZr4krs7nsw4kwx5qx!^4k!^!_8p!_#O4k#O#P5q#P#o4k#o#p8p#p;'S4k;'S;=`:X<%lO4k(^4r_$i&j(Y!bOY4kYZ5qZr4krs7nsw4kwx5qx!^4k!^!_8p!_#O4k#O#P5q#P#o4k#o#p8p#p;'S4k;'S;=`:X<%lO4k&z5vX$i&jOr5qrs6cs!^5q!^!_6y!_#o5q#o#p6y#p;'S5q;'S;=`7h<%lO5q&z6jT$d`$i&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c`6|TOr6yrs7]s;'S6y;'S;=`7b<%lO6y`7bO$d``7eP;=`<%l6y&z7kP;=`<%l5q(^7w]$d`$i&j(Y!bOY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}!r8uZ(Y!bOY8pYZ6yZr8prs9hsw8pwx6yx#O8p#O#P6y#P;'S8p;'S;=`:R<%lO8p!r9oU$d`(Y!bOY'}Zw'}x#O'}#P;'S'};'S;=`(f<%lO'}!r:UP;=`<%l8p(^:[P;=`<%l4k%9[:hh$i&j(Vp(Y!bOY%ZYZ&cZq%Zqr<Srs&}st%ZtuCruw%Zwx(rx!^%Z!^!_*g!_!c%Z!c!}Cr!}#O%Z#O#P&c#P#R%Z#R#SCr#S#T%Z#T#oCr#o#p*g#p$g%Z$g;'SCr;'S;=`El<%lOCr(r<__WS$i&j(Vp(Y!bOY<SYZ&cZr<Srs=^sw<Swx@nx!^<S!^!_Bm!_#O<S#O#P>`#P#o<S#o#pBm#p;'S<S;'S;=`Cl<%lO<S(Q=g]WS$i&j(Y!bOY=^YZ&cZw=^wx>`x!^=^!^!_?q!_#O=^#O#P>`#P#o=^#o#p?q#p;'S=^;'S;=`@h<%lO=^&n>gXWS$i&jOY>`YZ&cZ!^>`!^!_?S!_#o>`#o#p?S#p;'S>`;'S;=`?k<%lO>`S?XSWSOY?SZ;'S?S;'S;=`?e<%lO?SS?hP;=`<%l?S&n?nP;=`<%l>`!f?xWWS(Y!bOY?qZw?qwx?Sx#O?q#O#P?S#P;'S?q;'S;=`@b<%lO?q!f@eP;=`<%l?q(Q@kP;=`<%l=^'`@w]WS$i&j(VpOY@nYZ&cZr@nrs>`s!^@n!^!_Ap!_#O@n#O#P>`#P#o@n#o#pAp#p;'S@n;'S;=`Bg<%lO@ntAwWWS(VpOYApZrAprs?Ss#OAp#O#P?S#P;'SAp;'S;=`Ba<%lOAptBdP;=`<%lAp'`BjP;=`<%l@n#WBvYWS(Vp(Y!bOYBmZrBmrs?qswBmwxApx#OBm#O#P?S#P;'SBm;'S;=`Cf<%lOBm#WCiP;=`<%lBm(rCoP;=`<%l<S%9[C}i$i&j(n%1l(Vp(Y!bOY%ZYZ&cZr%Zrs&}st%ZtuCruw%Zwx(rx!Q%Z!Q![Cr![!^%Z!^!_*g!_!c%Z!c!}Cr!}#O%Z#O#P&c#P#R%Z#R#SCr#S#T%Z#T#oCr#o#p*g#p$g%Z$g;'SCr;'S;=`El<%lOCr%9[EoP;=`<%lCr07[FRk$i&j(Vp(Y!b$]#t(S,2j(d$I[OY%ZYZ&cZr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$g%Z$g;'SEr;'S;=`I|<%lOEr+dHRk$i&j(Vp(Y!b$]#tOY%ZYZ&cZr%Zrs&}st%ZtuGvuw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Gv![!^%Z!^!_*g!_!c%Z!c!}Gv!}#O%Z#O#P&c#P#R%Z#R#SGv#S#T%Z#T#oGv#o#p*g#p$g%Z$g;'SGv;'S;=`Iv<%lOGv+dIyP;=`<%lGv07[JPP;=`<%lEr(KWJ_`$i&j(Vp(Y!b#p(ChOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KWKl_$i&j$Q(Ch(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z,#xLva(y+JY$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sv%ZvwM{wx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KWNW`$i&j#z(Ch(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'At! c_(X';W$i&j(VpOY!!bYZ!#hZr!!brs!#hsw!!bwx!$xx!^!!b!^!_!%z!_#O!!b#O#P!#h#P#o!!b#o#p!%z#p;'S!!b;'S;=`!'c<%lO!!b'l!!i_$i&j(VpOY!!bYZ!#hZr!!brs!#hsw!!bwx!$xx!^!!b!^!_!%z!_#O!!b#O#P!#h#P#o!!b#o#p!%z#p;'S!!b;'S;=`!'c<%lO!!b&z!#mX$i&jOw!#hwx6cx!^!#h!^!_!$Y!_#o!#h#o#p!$Y#p;'S!#h;'S;=`!$r<%lO!#h`!$]TOw!$Ywx7]x;'S!$Y;'S;=`!$l<%lO!$Y`!$oP;=`<%l!$Y&z!$uP;=`<%l!#h'l!%R]$d`$i&j(VpOY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(r!Q!&PZ(VpOY!%zYZ!$YZr!%zrs!$Ysw!%zwx!&rx#O!%z#O#P!$Y#P;'S!%z;'S;=`!']<%lO!%z!Q!&yU$d`(VpOY)rZr)rs#O)r#P;'S)r;'S;=`*Z<%lO)r!Q!'`P;=`<%l!%z'l!'fP;=`<%l!!b/5|!'t_!l/.^$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#&U!)O_!k!Lf$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z-!n!*[b$i&j(Vp(Y!b(T%&f#q(ChOY%ZYZ&cZr%Zrs&}sw%Zwx(rxz%Zz{!+d{!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW!+o`$i&j(Vp(Y!b#n(ChOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z+;x!,|`$i&j(Vp(Y!br+4YOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z,$U!.Z_!]+Jf$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[!/ec$i&j(Vp(Y!b!Q.2^OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!0p!P!Q%Z!Q![!3Y![!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#%|!0ya$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!2O!P!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#%|!2Z_![!L^$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!3eg$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!3Y![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S!3Y#S#X%Z#X#Y!4|#Y#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!5Vg$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx{%Z{|!6n|}%Z}!O!6n!O!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!6wc$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!8_c$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[!9uf$i&j(Vp(Y!b#o(ChOY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcxz!;Zz{#-}{!P!;Z!P!Q#/d!Q!^!;Z!^!_#(i!_!`#7S!`!a#8i!a!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z?O!;fb$i&j(Vp(Y!b!X7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z>^!<w`$i&j(Y!b!X7`OY!<nYZ&cZw!<nwx!=yx!P!<n!P!Q!Eq!Q!^!<n!^!_!Gr!_!}!<n!}#O!KS#O#P!Dy#P#o!<n#o#p!Gr#p;'S!<n;'S;=`!L]<%lO!<n<z!>Q^$i&j!X7`OY!=yYZ&cZ!P!=y!P!Q!>|!Q!^!=y!^!_!@c!_!}!=y!}#O!CW#O#P!Dy#P#o!=y#o#p!@c#p;'S!=y;'S;=`!Ek<%lO!=y<z!?Td$i&j!X7`O!^&c!_#W&c#W#X!>|#X#Z&c#Z#[!>|#[#]&c#]#^!>|#^#a&c#a#b!>|#b#g&c#g#h!>|#h#i&c#i#j!>|#j#k!>|#k#m&c#m#n!>|#n#o&c#p;'S&c;'S;=`&w<%lO&c7`!@hX!X7`OY!@cZ!P!@c!P!Q!AT!Q!}!@c!}#O!Ar#O#P!Bq#P;'S!@c;'S;=`!CQ<%lO!@c7`!AYW!X7`#W#X!AT#Z#[!AT#]#^!AT#a#b!AT#g#h!AT#i#j!AT#j#k!AT#m#n!AT7`!AuVOY!ArZ#O!Ar#O#P!B[#P#Q!@c#Q;'S!Ar;'S;=`!Bk<%lO!Ar7`!B_SOY!ArZ;'S!Ar;'S;=`!Bk<%lO!Ar7`!BnP;=`<%l!Ar7`!BtSOY!@cZ;'S!@c;'S;=`!CQ<%lO!@c7`!CTP;=`<%l!@c<z!C][$i&jOY!CWYZ&cZ!^!CW!^!_!Ar!_#O!CW#O#P!DR#P#Q!=y#Q#o!CW#o#p!Ar#p;'S!CW;'S;=`!Ds<%lO!CW<z!DWX$i&jOY!CWYZ&cZ!^!CW!^!_!Ar!_#o!CW#o#p!Ar#p;'S!CW;'S;=`!Ds<%lO!CW<z!DvP;=`<%l!CW<z!EOX$i&jOY!=yYZ&cZ!^!=y!^!_!@c!_#o!=y#o#p!@c#p;'S!=y;'S;=`!Ek<%lO!=y<z!EnP;=`<%l!=y>^!Ezl$i&j(Y!b!X7`OY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#W&}#W#X!Eq#X#Z&}#Z#[!Eq#[#]&}#]#^!Eq#^#a&}#a#b!Eq#b#g&}#g#h!Eq#h#i&}#i#j!Eq#j#k!Eq#k#m&}#m#n!Eq#n#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}8r!GyZ(Y!b!X7`OY!GrZw!Grwx!@cx!P!Gr!P!Q!Hl!Q!}!Gr!}#O!JU#O#P!Bq#P;'S!Gr;'S;=`!J|<%lO!Gr8r!Hse(Y!b!X7`OY'}Zw'}x#O'}#P#W'}#W#X!Hl#X#Z'}#Z#[!Hl#[#]'}#]#^!Hl#^#a'}#a#b!Hl#b#g'}#g#h!Hl#h#i'}#i#j!Hl#j#k!Hl#k#m'}#m#n!Hl#n;'S'};'S;=`(f<%lO'}8r!JZX(Y!bOY!JUZw!JUwx!Arx#O!JU#O#P!B[#P#Q!Gr#Q;'S!JU;'S;=`!Jv<%lO!JU8r!JyP;=`<%l!JU8r!KPP;=`<%l!Gr>^!KZ^$i&j(Y!bOY!KSYZ&cZw!KSwx!CWx!^!KS!^!_!JU!_#O!KS#O#P!DR#P#Q!<n#Q#o!KS#o#p!JU#p;'S!KS;'S;=`!LV<%lO!KS>^!LYP;=`<%l!KS>^!L`P;=`<%l!<n=l!Ll`$i&j(Vp!X7`OY!LcYZ&cZr!Lcrs!=ys!P!Lc!P!Q!Mn!Q!^!Lc!^!_# o!_!}!Lc!}#O#%P#O#P!Dy#P#o!Lc#o#p# o#p;'S!Lc;'S;=`#&Y<%lO!Lc=l!Mwl$i&j(Vp!X7`OY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#W(r#W#X!Mn#X#Z(r#Z#[!Mn#[#](r#]#^!Mn#^#a(r#a#b!Mn#b#g(r#g#h!Mn#h#i(r#i#j!Mn#j#k!Mn#k#m(r#m#n!Mn#n#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(r8Q# vZ(Vp!X7`OY# oZr# ors!@cs!P# o!P!Q#!i!Q!}# o!}#O#$R#O#P!Bq#P;'S# o;'S;=`#$y<%lO# o8Q#!pe(Vp!X7`OY)rZr)rs#O)r#P#W)r#W#X#!i#X#Z)r#Z#[#!i#[#])r#]#^#!i#^#a)r#a#b#!i#b#g)r#g#h#!i#h#i)r#i#j#!i#j#k#!i#k#m)r#m#n#!i#n;'S)r;'S;=`*Z<%lO)r8Q#$WX(VpOY#$RZr#$Rrs!Ars#O#$R#O#P!B[#P#Q# o#Q;'S#$R;'S;=`#$s<%lO#$R8Q#$vP;=`<%l#$R8Q#$|P;=`<%l# o=l#%W^$i&j(VpOY#%PYZ&cZr#%Prs!CWs!^#%P!^!_#$R!_#O#%P#O#P!DR#P#Q!Lc#Q#o#%P#o#p#$R#p;'S#%P;'S;=`#&S<%lO#%P=l#&VP;=`<%l#%P=l#&]P;=`<%l!Lc?O#&kn$i&j(Vp(Y!b!X7`OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#W%Z#W#X#&`#X#Z%Z#Z#[#&`#[#]%Z#]#^#&`#^#a%Z#a#b#&`#b#g%Z#g#h#&`#h#i%Z#i#j#&`#j#k#&`#k#m%Z#m#n#&`#n#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z9d#(r](Vp(Y!b!X7`OY#(iZr#(irs!Grsw#(iwx# ox!P#(i!P!Q#)k!Q!}#(i!}#O#+`#O#P!Bq#P;'S#(i;'S;=`#,`<%lO#(i9d#)th(Vp(Y!b!X7`OY*gZr*grs'}sw*gwx)rx#O*g#P#W*g#W#X#)k#X#Z*g#Z#[#)k#[#]*g#]#^#)k#^#a*g#a#b#)k#b#g*g#g#h#)k#h#i*g#i#j#)k#j#k#)k#k#m*g#m#n#)k#n;'S*g;'S;=`+Z<%lO*g9d#+gZ(Vp(Y!bOY#+`Zr#+`rs!JUsw#+`wx#$Rx#O#+`#O#P!B[#P#Q#(i#Q;'S#+`;'S;=`#,Y<%lO#+`9d#,]P;=`<%l#+`9d#,cP;=`<%l#(i?O#,o`$i&j(Vp(Y!bOY#,fYZ&cZr#,frs!KSsw#,fwx#%Px!^#,f!^!_#+`!_#O#,f#O#P!DR#P#Q!;Z#Q#o#,f#o#p#+`#p;'S#,f;'S;=`#-q<%lO#,f?O#-tP;=`<%l#,f?O#-zP;=`<%l!;Z07[#.[b$i&j(Vp(Y!b'}0/l!X7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z07[#/o_$i&j(Vp(Y!bT0/lOY#/dYZ&cZr#/drs#0nsw#/dwx#4Ox!^#/d!^!_#5}!_#O#/d#O#P#1p#P#o#/d#o#p#5}#p;'S#/d;'S;=`#6|<%lO#/d06j#0w]$i&j(Y!bT0/lOY#0nYZ&cZw#0nwx#1px!^#0n!^!_#3R!_#O#0n#O#P#1p#P#o#0n#o#p#3R#p;'S#0n;'S;=`#3x<%lO#0n05W#1wX$i&jT0/lOY#1pYZ&cZ!^#1p!^!_#2d!_#o#1p#o#p#2d#p;'S#1p;'S;=`#2{<%lO#1p0/l#2iST0/lOY#2dZ;'S#2d;'S;=`#2u<%lO#2d0/l#2xP;=`<%l#2d05W#3OP;=`<%l#1p01O#3YW(Y!bT0/lOY#3RZw#3Rwx#2dx#O#3R#O#P#2d#P;'S#3R;'S;=`#3r<%lO#3R01O#3uP;=`<%l#3R06j#3{P;=`<%l#0n05x#4X]$i&j(VpT0/lOY#4OYZ&cZr#4Ors#1ps!^#4O!^!_#5Q!_#O#4O#O#P#1p#P#o#4O#o#p#5Q#p;'S#4O;'S;=`#5w<%lO#4O00^#5XW(VpT0/lOY#5QZr#5Qrs#2ds#O#5Q#O#P#2d#P;'S#5Q;'S;=`#5q<%lO#5Q00^#5tP;=`<%l#5Q05x#5zP;=`<%l#4O01p#6WY(Vp(Y!bT0/lOY#5}Zr#5}rs#3Rsw#5}wx#5Qx#O#5}#O#P#2d#P;'S#5};'S;=`#6v<%lO#5}01p#6yP;=`<%l#5}07[#7PP;=`<%l#/d)3h#7ab$i&j$Q(Ch(Vp(Y!b!X7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;ZAt#8vb$Z#t$i&j(Vp(Y!b!X7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z'Ad#:Zp$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!3Y!P!Q%Z!Q![#<_![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S#<_#S#U%Z#U#V#?i#V#X%Z#X#Y!4|#Y#b%Z#b#c#>_#c#d#Bq#d#l%Z#l#m#Es#m#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#<jk$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!3Y!P!Q%Z!Q![#<_![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S#<_#S#X%Z#X#Y!4|#Y#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#>j_$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#?rd$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!R#AQ!R!S#AQ!S!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#AQ#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#A]f$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!R#AQ!R!S#AQ!S!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#AQ#S#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#Bzc$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!Y#DV!Y!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#DV#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#Dbe$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!Y#DV!Y!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#DV#S#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#E|g$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![#Ge![!^%Z!^!_*g!_!c%Z!c!i#Ge!i#O%Z#O#P&c#P#R%Z#R#S#Ge#S#T%Z#T#Z#Ge#Z#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#Gpi$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![#Ge![!^%Z!^!_*g!_!c%Z!c!i#Ge!i#O%Z#O#P&c#P#R%Z#R#S#Ge#S#T%Z#T#Z#Ge#Z#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z*)x#Il_!g$b$i&j$O)Lv(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z)[#Jv_al$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z04f#LS^h#)`#R-<U(Vp(Y!b$n7`OY*gZr*grs'}sw*gwx)rx!P*g!P!Q#MO!Q!^*g!^!_#Mt!_!`$ f!`#O*g#P;'S*g;'S;=`+Z<%lO*g(n#MXX$k&j(Vp(Y!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g(El#M}Z#r(Ch(Vp(Y!bOY*gZr*grs'}sw*gwx)rx!_*g!_!`#Np!`#O*g#P;'S*g;'S;=`+Z<%lO*g(El#NyX$Q(Ch(Vp(Y!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g(El$ oX#s(Ch(Vp(Y!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g*)x$!ga#`*!Y$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`0z!`!a$#l!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(K[$#w_#k(Cl$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z*)x$%Vag!*r#s(Ch$f#|$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`$&[!`!a$'f!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$&g_#s(Ch$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$'qa#r(Ch$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`!a$(v!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$)R`#r(Ch$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(Kd$*`a(q(Ct$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!a%Z!a!b$+e!b#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$+p`$i&j#{(Ch(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#`$,}_!|$Ip$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z04f$.X_!S0,v$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(n$/]Z$i&jO!^$0O!^!_$0f!_#i$0O#i#j$0k#j#l$0O#l#m$2^#m#o$0O#o#p$0f#p;'S$0O;'S;=`$4i<%lO$0O(n$0VT_#S$i&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c#S$0kO_#S(n$0p[$i&jO!Q&c!Q![$1f![!^&c!_!c&c!c!i$1f!i#T&c#T#Z$1f#Z#o&c#o#p$3|#p;'S&c;'S;=`&w<%lO&c(n$1kZ$i&jO!Q&c!Q![$2^![!^&c!_!c&c!c!i$2^!i#T&c#T#Z$2^#Z#o&c#p;'S&c;'S;=`&w<%lO&c(n$2cZ$i&jO!Q&c!Q![$3U![!^&c!_!c&c!c!i$3U!i#T&c#T#Z$3U#Z#o&c#p;'S&c;'S;=`&w<%lO&c(n$3ZZ$i&jO!Q&c!Q![$0O![!^&c!_!c&c!c!i$0O!i#T&c#T#Z$0O#Z#o&c#p;'S&c;'S;=`&w<%lO&c#S$4PR!Q![$4Y!c!i$4Y#T#Z$4Y#S$4]S!Q![$4Y!c!i$4Y#T#Z$4Y#q#r$0f(n$4lP;=`<%l$0O#1[$4z_!Y#)l$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$6U`#x(Ch$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z+;p$7c_$i&j(Vp(Y!b(`+4QOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[$8qk$i&j(Vp(Y!b(S,2j$_#t(d$I[OY%ZYZ&cZr%Zrs&}st%Ztu$8buw%Zwx(rx}%Z}!O$:f!O!Q%Z!Q![$8b![!^%Z!^!_*g!_!c%Z!c!}$8b!}#O%Z#O#P&c#P#R%Z#R#S$8b#S#T%Z#T#o$8b#o#p*g#p$g%Z$g;'S$8b;'S;=`$<l<%lO$8b+d$:qk$i&j(Vp(Y!b$_#tOY%ZYZ&cZr%Zrs&}st%Ztu$:fuw%Zwx(rx}%Z}!O$:f!O!Q%Z!Q![$:f![!^%Z!^!_*g!_!c%Z!c!}$:f!}#O%Z#O#P&c#P#R%Z#R#S$:f#S#T%Z#T#o$:f#o#p*g#p$g%Z$g;'S$:f;'S;=`$<f<%lO$:f+d$<iP;=`<%l$:f07[$<oP;=`<%l$8b#Jf$<{X!_#Hb(Vp(Y!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g,#x$=sa(x+JY$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p#q$+e#q;'S%Z;'S;=`+a<%lO%Z)>v$?V_!^(CdvBr$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z?O$@a_!q7`$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[$Aq|$i&j(Vp(Y!b'{0/l$]#t(S,2j(d$I[OX%ZXY+gYZ&cZ[+g[p%Zpq+gqr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$f%Z$f$g+g$g#BYEr#BY#BZ$A`#BZ$ISEr$IS$I_$A`$I_$JTEr$JT$JU$A`$JU$KVEr$KV$KW$A`$KW&FUEr&FU&FV$A`&FV;'SEr;'S;=`I|<%l?HTEr?HT?HU$A`?HUOEr07[$D|k$i&j(Vp(Y!b'|0/l$]#t(S,2j(d$I[OY%ZYZ&cZr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$g%Z$g;'SEr;'S;=`I|<%lOEr",
  tokenizers: [FA, HA, KA, JA, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, GA, new Ll("$S~RRtu[#O#Pg#S#T#|~_P#o#pb~gOx~~jVO#i!P#i#j!U#j#l!P#l#m!q#m;'S!P;'S;=`#v<%lO!P~!UO!U~~!XS!Q![!e!c!i!e#T#Z!e#o#p#Z~!hR!Q![!q!c!i!q#T#Z!q~!tR!Q![!}!c!i!}#T#Z!}~#QR!Q![!P!c!i!P#T#Z!P~#^R!Q![#g!c!i#g#T#Z#g~#jS!Q![#g!c!i#g#T#Z#g#q#r!P~#yP;=`<%l!P~$RO(b~~", 141, 339), new Ll("j~RQYZXz{^~^O(P~~aP!P!Qd~iO(Q~~", 25, 322)],
  topRules: { Script: [0, 7], SingleExpression: [1, 275], SingleClassItem: [2, 276] },
  dialects: { jsx: 0, ts: 15098 },
  dynamicPrecedences: { 80: 1, 82: 1, 94: 1, 169: 1, 199: 1 },
  specialized: [{ term: 326, get: (n) => t5[n] || -1 }, { term: 342, get: (n) => n5[n] || -1 }, { term: 95, get: (n) => i5[n] || -1 }],
  tokenPrec: 15124
}), fb = [
  /* @__PURE__ */ Ce("function ${name}(${params}) {\n	${}\n}", {
    label: "function",
    detail: "definition",
    type: "keyword"
  }),
  /* @__PURE__ */ Ce("for (let ${index} = 0; ${index} < ${bound}; ${index}++) {\n	${}\n}", {
    label: "for",
    detail: "loop",
    type: "keyword"
  }),
  /* @__PURE__ */ Ce("for (let ${name} of ${collection}) {\n	${}\n}", {
    label: "for",
    detail: "of loop",
    type: "keyword"
  }),
  /* @__PURE__ */ Ce("do {\n	${}\n} while (${})", {
    label: "do",
    detail: "loop",
    type: "keyword"
  }),
  /* @__PURE__ */ Ce("while (${}) {\n	${}\n}", {
    label: "while",
    detail: "loop",
    type: "keyword"
  }),
  /* @__PURE__ */ Ce(`try {
	\${}
} catch (\${error}) {
	\${}
}`, {
    label: "try",
    detail: "/ catch block",
    type: "keyword"
  }),
  /* @__PURE__ */ Ce("if (${}) {\n	${}\n}", {
    label: "if",
    detail: "block",
    type: "keyword"
  }),
  /* @__PURE__ */ Ce(`if (\${}) {
	\${}
} else {
	\${}
}`, {
    label: "if",
    detail: "/ else block",
    type: "keyword"
  }),
  /* @__PURE__ */ Ce(`class \${name} {
	constructor(\${params}) {
		\${}
	}
}`, {
    label: "class",
    detail: "definition",
    type: "keyword"
  }),
  /* @__PURE__ */ Ce('import {${names}} from "${module}"\n${}', {
    label: "import",
    detail: "named",
    type: "keyword"
  }),
  /* @__PURE__ */ Ce('import ${name} from "${module}"\n${}', {
    label: "import",
    detail: "default",
    type: "keyword"
  })
], s5 = /* @__PURE__ */ fb.concat([
  /* @__PURE__ */ Ce("interface ${name} {\n	${}\n}", {
    label: "interface",
    detail: "definition",
    type: "keyword"
  }),
  /* @__PURE__ */ Ce("type ${name} = ${type}", {
    label: "type",
    detail: "definition",
    type: "keyword"
  }),
  /* @__PURE__ */ Ce("enum ${name} {\n	${}\n}", {
    label: "enum",
    detail: "definition",
    type: "keyword"
  })
]), Xp = /* @__PURE__ */ new cu(), ub = /* @__PURE__ */ new Set([
  "Script",
  "Block",
  "FunctionExpression",
  "FunctionDeclaration",
  "ArrowFunction",
  "MethodDeclaration",
  "ForStatement"
]);
function Er(n) {
  return (e, t) => {
    let i = e.node.getChild("VariableDefinition");
    return i && t(i, n), !0;
  };
}
const o5 = ["FunctionDeclaration"], l5 = {
  FunctionDeclaration: /* @__PURE__ */ Er("function"),
  ClassDeclaration: /* @__PURE__ */ Er("class"),
  ClassExpression: () => !0,
  EnumDeclaration: /* @__PURE__ */ Er("constant"),
  TypeAliasDeclaration: /* @__PURE__ */ Er("type"),
  NamespaceDeclaration: /* @__PURE__ */ Er("namespace"),
  VariableDefinition(n, e) {
    n.matchContext(o5) || e(n, "variable");
  },
  TypeDefinition(n, e) {
    e(n, "type");
  },
  __proto__: null
};
function db(n, e) {
  let t = Xp.get(e);
  if (t)
    return t;
  let i = [], r = !0;
  function s(o, l) {
    let a = n.sliceString(o.from, o.to);
    i.push({ label: a, type: l });
  }
  return e.cursor(xe.IncludeAnonymous).iterate((o) => {
    if (r)
      r = !1;
    else if (o.name) {
      let l = l5[o.name];
      if (l && l(o, s) || ub.has(o.name))
        return !1;
    } else if (o.to - o.from > 8192) {
      for (let l of db(n, o.node))
        i.push(l);
      return !1;
    }
  }), Xp.set(e, i), i;
}
const qp = /^[\w$\xa1-\uffff][\w$\d\xa1-\uffff]*$/, Ob = [
  "TemplateString",
  "String",
  "RegExp",
  "LineComment",
  "BlockComment",
  "VariableDefinition",
  "TypeDefinition",
  "Label",
  "PropertyDefinition",
  "PropertyName",
  "PrivatePropertyDefinition",
  "PrivatePropertyName",
  "JSXText",
  "JSXAttributeValue",
  "JSXOpenTag",
  "JSXCloseTag",
  "JSXSelfClosingTag",
  ".",
  "?."
];
function a5(n) {
  let e = ge(n.state).resolveInner(n.pos, -1);
  if (Ob.indexOf(e.name) > -1)
    return null;
  let t = e.name == "VariableName" || e.to - e.from < 20 && qp.test(n.state.sliceDoc(e.from, e.to));
  if (!t && !n.explicit)
    return null;
  let i = [];
  for (let r = e; r; r = r.parent)
    ub.has(r.name) && (i = i.concat(db(n.state.doc, r)));
  return {
    options: i,
    from: t ? e.from : n.pos,
    validFor: qp
  };
}
const dn = /* @__PURE__ */ It.define({
  name: "javascript",
  parser: /* @__PURE__ */ r5.configure({
    props: [
      /* @__PURE__ */ yn.add({
        IfStatement: /* @__PURE__ */ mi({ except: /^\s*({|else\b)/ }),
        TryStatement: /* @__PURE__ */ mi({ except: /^\s*({|catch\b|finally\b)/ }),
        LabeledStatement: YC,
        SwitchBody: (n) => {
          let e = n.textAfter, t = /^\s*\}/.test(e), i = /^\s*(case|default)\b/.test(e);
          return n.baseIndent + (t ? 0 : i ? 1 : 2) * n.unit;
        },
        Block: /* @__PURE__ */ Yi({ closing: "}" }),
        ArrowFunction: (n) => n.baseIndent + n.unit,
        "TemplateString BlockComment": () => null,
        "Statement Property": /* @__PURE__ */ mi({ except: /^\s*{/ }),
        JSXElement(n) {
          let e = /^\s*<\//.test(n.textAfter);
          return n.lineIndent(n.node.from) + (e ? 0 : n.unit);
        },
        JSXEscape(n) {
          let e = /\s*\}/.test(n.textAfter);
          return n.lineIndent(n.node.from) + (e ? 0 : n.unit);
        },
        "JSXOpenTag JSXSelfClosingTag"(n) {
          return n.column(n.node.from) + n.unit;
        }
      }),
      /* @__PURE__ */ Gt.add({
        "Block ClassBody SwitchBody EnumBody ObjectExpression ArrayExpression ObjectType": Ds,
        BlockComment(n) {
          return { from: n.from + 2, to: n.to - 2 };
        }
      })
    ]
  }),
  languageData: {
    closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`"] },
    commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
    indentOnInput: /^\s*(?:case |default:|\{|\}|<\/)$/,
    wordChars: "$"
  }
}), pb = {
  test: (n) => /^JSX/.test(n.name),
  facet: /* @__PURE__ */ fu({ commentTokens: { block: { open: "{/*", close: "*/}" } } })
}, mb = /* @__PURE__ */ dn.configure({ dialect: "ts" }, "typescript"), gb = /* @__PURE__ */ dn.configure({
  dialect: "jsx",
  props: [/* @__PURE__ */ uu.add((n) => n.isTop ? [pb] : void 0)]
}), yb = /* @__PURE__ */ dn.configure({
  dialect: "jsx ts",
  props: [/* @__PURE__ */ uu.add((n) => n.isTop ? [pb] : void 0)]
}, "typescript");
let Sb = (n) => ({ label: n, type: "keyword" });
const bb = /* @__PURE__ */ "break case const continue default delete export extends false finally in instanceof let new return static super switch this throw true typeof var yield".split(" ").map(Sb), c5 = /* @__PURE__ */ bb.concat(/* @__PURE__ */ ["declare", "implements", "private", "protected", "public"].map(Sb));
function Qb(n = {}) {
  let e = n.jsx ? n.typescript ? yb : gb : n.typescript ? mb : dn, t = n.typescript ? s5.concat(c5) : fb.concat(bb);
  return new mn(e, [
    dn.data.of({
      autocomplete: wu(Ob, Oa(t))
    }),
    dn.data.of({
      autocomplete: a5
    }),
    n.jsx ? u5 : []
  ]);
}
function h5(n) {
  for (; ; ) {
    if (n.name == "JSXOpenTag" || n.name == "JSXSelfClosingTag" || n.name == "JSXFragmentTag")
      return n;
    if (n.name == "JSXEscape" || !n.parent)
      return null;
    n = n.parent;
  }
}
function Zp(n, e, t = n.length) {
  for (let i = e?.firstChild; i; i = i.nextSibling)
    if (i.name == "JSXIdentifier" || i.name == "JSXBuiltin" || i.name == "JSXNamespacedName" || i.name == "JSXMemberExpression")
      return n.sliceString(i.from, Math.min(i.to, t));
  return "";
}
const f5 = typeof navigator == "object" && /* @__PURE__ */ /Android\b/.test(navigator.userAgent), u5 = /* @__PURE__ */ Z.inputHandler.of((n, e, t, i, r) => {
  if ((f5 ? n.composing : n.compositionStarted) || n.state.readOnly || e != t || i != ">" && i != "/" || !dn.isActiveAt(n.state, e, -1))
    return !1;
  let s = r(), { state: o } = s, l = o.changeByRange((a) => {
    var c;
    let { head: h } = a, f = ge(o).resolveInner(h - 1, -1), u;
    if (f.name == "JSXStartTag" && (f = f.parent), !(o.doc.sliceString(h - 1, h) != i || f.name == "JSXAttributeValue" && f.to > h)) {
      if (i == ">" && f.name == "JSXFragmentTag")
        return { range: a, changes: { from: h, insert: "</>" } };
      if (i == "/" && f.name == "JSXStartCloseTag") {
        let d = f.parent, O = d.parent;
        if (O && d.from == h - 2 && ((u = Zp(o.doc, O.firstChild, h)) || ((c = O.firstChild) === null || c === void 0 ? void 0 : c.name) == "JSXFragmentTag")) {
          let p = `${u}>`;
          return { range: $.cursor(h + p.length, -1), changes: { from: h, insert: p } };
        }
      } else if (i == ">") {
        let d = h5(f);
        if (d && d.name == "JSXOpenTag" && !/^\/?>|^<\//.test(o.doc.sliceString(h, h + 2)) && (u = Zp(o.doc, d, h)))
          return { range: a, changes: { from: h, insert: `</${u}>` } };
      }
    }
    return { range: a };
  });
  return l.changes.empty ? !1 : (n.dispatch([
    s,
    o.update(l, { userEvent: "input.complete", scrollIntoView: !0 })
  ]), !0);
});
class Vl {
  static create(e, t, i, r, s) {
    let o = r + (r << 8) + e + (t << 4) | 0;
    return new Vl(e, t, i, o, s, [], []);
  }
  constructor(e, t, i, r, s, o, l) {
    this.type = e, this.value = t, this.from = i, this.hash = r, this.end = s, this.children = o, this.positions = l, this.hashProp = [[J.contextHash, r]];
  }
  addChild(e, t) {
    e.prop(J.contextHash) != this.hash && (e = new me(e.type, e.children, e.positions, e.length, this.hashProp)), this.children.push(e), this.positions.push(t);
  }
  toTree(e, t = this.end) {
    let i = this.children.length - 1;
    return i >= 0 && (t = Math.max(t, this.positions[i] + this.children[i].length + this.from)), new me(e.types[this.type], this.children, this.positions, t - this.from).balance({
      makeTree: (r, s, o) => new me(We.none, r, s, o, this.hashProp)
    });
  }
}
var R;
(function(n) {
  n[n.Document = 1] = "Document", n[n.CodeBlock = 2] = "CodeBlock", n[n.FencedCode = 3] = "FencedCode", n[n.Blockquote = 4] = "Blockquote", n[n.HorizontalRule = 5] = "HorizontalRule", n[n.BulletList = 6] = "BulletList", n[n.OrderedList = 7] = "OrderedList", n[n.ListItem = 8] = "ListItem", n[n.ATXHeading1 = 9] = "ATXHeading1", n[n.ATXHeading2 = 10] = "ATXHeading2", n[n.ATXHeading3 = 11] = "ATXHeading3", n[n.ATXHeading4 = 12] = "ATXHeading4", n[n.ATXHeading5 = 13] = "ATXHeading5", n[n.ATXHeading6 = 14] = "ATXHeading6", n[n.SetextHeading1 = 15] = "SetextHeading1", n[n.SetextHeading2 = 16] = "SetextHeading2", n[n.HTMLBlock = 17] = "HTMLBlock", n[n.LinkReference = 18] = "LinkReference", n[n.Paragraph = 19] = "Paragraph", n[n.CommentBlock = 20] = "CommentBlock", n[n.ProcessingInstructionBlock = 21] = "ProcessingInstructionBlock", n[n.Escape = 22] = "Escape", n[n.Entity = 23] = "Entity", n[n.HardBreak = 24] = "HardBreak", n[n.Emphasis = 25] = "Emphasis", n[n.StrongEmphasis = 26] = "StrongEmphasis", n[n.Link = 27] = "Link", n[n.Image = 28] = "Image", n[n.InlineCode = 29] = "InlineCode", n[n.HTMLTag = 30] = "HTMLTag", n[n.Comment = 31] = "Comment", n[n.ProcessingInstruction = 32] = "ProcessingInstruction", n[n.Autolink = 33] = "Autolink", n[n.HeaderMark = 34] = "HeaderMark", n[n.QuoteMark = 35] = "QuoteMark", n[n.ListMark = 36] = "ListMark", n[n.LinkMark = 37] = "LinkMark", n[n.EmphasisMark = 38] = "EmphasisMark", n[n.CodeMark = 39] = "CodeMark", n[n.CodeText = 40] = "CodeText", n[n.CodeInfo = 41] = "CodeInfo", n[n.LinkTitle = 42] = "LinkTitle", n[n.LinkLabel = 43] = "LinkLabel", n[n.URL = 44] = "URL";
})(R || (R = {}));
class d5 {
  /**
  @internal
  */
  constructor(e, t) {
    this.start = e, this.content = t, this.marks = [], this.parsers = [];
  }
}
class O5 {
  constructor() {
    this.text = "", this.baseIndent = 0, this.basePos = 0, this.depth = 0, this.markers = [], this.pos = 0, this.indent = 0, this.next = -1;
  }
  /**
  @internal
  */
  forward() {
    this.basePos > this.pos && this.forwardInner();
  }
  /**
  @internal
  */
  forwardInner() {
    let e = this.skipSpace(this.basePos);
    this.indent = this.countIndent(e, this.pos, this.indent), this.pos = e, this.next = e == this.text.length ? -1 : this.text.charCodeAt(e);
  }
  /**
  Skip whitespace after the given position, return the position of
  the next non-space character or the end of the line if there's
  only space after `from`.
  */
  skipSpace(e) {
    return Hr(this.text, e);
  }
  /**
  @internal
  */
  reset(e) {
    for (this.text = e, this.baseIndent = this.basePos = this.pos = this.indent = 0, this.forwardInner(), this.depth = 1; this.markers.length; )
      this.markers.pop();
  }
  /**
  Move the line's base position forward to the given position.
  This should only be called by composite [block
  parsers](#BlockParser.parse) or [markup skipping
  functions](#NodeSpec.composite).
  */
  moveBase(e) {
    this.basePos = e, this.baseIndent = this.countIndent(e, this.pos, this.indent);
  }
  /**
  Move the line's base position forward to the given _column_.
  */
  moveBaseColumn(e) {
    this.baseIndent = e, this.basePos = this.findColumn(e);
  }
  /**
  Store a composite-block-level marker. Should be called from
  [markup skipping functions](#NodeSpec.composite) when they
  consume any non-whitespace characters.
  */
  addMarker(e) {
    this.markers.push(e);
  }
  /**
  Find the column position at `to`, optionally starting at a given
  position and column.
  */
  countIndent(e, t = 0, i = 0) {
    for (let r = t; r < e; r++)
      i += this.text.charCodeAt(r) == 9 ? 4 - i % 4 : 1;
    return i;
  }
  /**
  Find the position corresponding to the given column.
  */
  findColumn(e) {
    let t = 0;
    for (let i = 0; t < this.text.length && i < e; t++)
      i += this.text.charCodeAt(t) == 9 ? 4 - i % 4 : 1;
    return t;
  }
  /**
  @internal
  */
  scrub() {
    if (!this.baseIndent)
      return this.text;
    let e = "";
    for (let t = 0; t < this.basePos; t++)
      e += " ";
    return e + this.text.slice(this.basePos);
  }
}
function Mp(n, e, t) {
  if (t.pos == t.text.length || n != e.block && t.indent >= e.stack[t.depth + 1].value + t.baseIndent)
    return !0;
  if (t.indent >= t.baseIndent + 4)
    return !1;
  let i = (n.type == R.OrderedList ? qu : Xu)(t, e, !1);
  return i > 0 && (n.type != R.BulletList || _u(t, e, !1) < 0) && t.text.charCodeAt(t.pos + i - 1) == n.value;
}
const xb = {
  [R.Blockquote](n, e, t) {
    return t.next != 62 ? !1 : (t.markers.push(fe(R.QuoteMark, e.lineStart + t.pos, e.lineStart + t.pos + 1)), t.moveBase(t.pos + (At(t.text.charCodeAt(t.pos + 1)) ? 2 : 1)), n.end = e.lineStart + t.text.length, !0);
  },
  [R.ListItem](n, e, t) {
    return t.indent < t.baseIndent + n.value && t.next > -1 ? !1 : (t.moveBaseColumn(t.baseIndent + n.value), !0);
  },
  [R.OrderedList]: Mp,
  [R.BulletList]: Mp,
  [R.Document]() {
    return !0;
  }
};
function At(n) {
  return n == 32 || n == 9 || n == 10 || n == 13;
}
function Hr(n, e = 0) {
  for (; e < n.length && At(n.charCodeAt(e)); )
    e++;
  return e;
}
function Lp(n, e, t) {
  for (; e > t && At(n.charCodeAt(e - 1)); )
    e--;
  return e;
}
function kb(n) {
  if (n.next != 96 && n.next != 126)
    return -1;
  let e = n.pos + 1;
  for (; e < n.text.length && n.text.charCodeAt(e) == n.next; )
    e++;
  if (e < n.pos + 3)
    return -1;
  if (n.next == 96) {
    for (let t = e; t < n.text.length; t++)
      if (n.text.charCodeAt(t) == 96)
        return -1;
  }
  return e;
}
function wb(n) {
  return n.next != 62 ? -1 : n.text.charCodeAt(n.pos + 1) == 32 ? 2 : 1;
}
function _u(n, e, t) {
  if (n.next != 42 && n.next != 45 && n.next != 95)
    return -1;
  let i = 1;
  for (let r = n.pos + 1; r < n.text.length; r++) {
    let s = n.text.charCodeAt(r);
    if (s == n.next)
      i++;
    else if (!At(s))
      return -1;
  }
  return t && n.next == 45 && $b(n) > -1 && n.depth == e.stack.length && e.parser.leafBlockParsers.indexOf(Eb.SetextHeading) > -1 || i < 3 ? -1 : 1;
}
function vb(n, e) {
  for (let t = n.stack.length - 1; t >= 0; t--)
    if (n.stack[t].type == e)
      return !0;
  return !1;
}
function Xu(n, e, t) {
  return (n.next == 45 || n.next == 43 || n.next == 42) && (n.pos == n.text.length - 1 || At(n.text.charCodeAt(n.pos + 1))) && (!t || vb(e, R.BulletList) || n.skipSpace(n.pos + 2) < n.text.length) ? 1 : -1;
}
function qu(n, e, t) {
  let i = n.pos, r = n.next;
  for (; r >= 48 && r <= 57; ) {
    i++;
    if (i == n.text.length)
      return -1;
    r = n.text.charCodeAt(i);
  }
  return i == n.pos || i > n.pos + 9 || r != 46 && r != 41 || i < n.text.length - 1 && !At(n.text.charCodeAt(i + 1)) || t && !vb(e, R.OrderedList) && (n.skipSpace(i + 1) == n.text.length || i > n.pos + 1 || n.next != 49) ? -1 : i + 1 - n.pos;
}
function Pb(n) {
  if (n.next != 35)
    return -1;
  let e = n.pos + 1;
  for (; e < n.text.length && n.text.charCodeAt(e) == 35; )
    e++;
  if (e < n.text.length && n.text.charCodeAt(e) != 32)
    return -1;
  let t = e - n.pos;
  return t > 6 ? -1 : t;
}
function $b(n) {
  if (n.next != 45 && n.next != 61 || n.indent >= n.baseIndent + 4)
    return -1;
  let e = n.pos + 1;
  for (; e < n.text.length && n.text.charCodeAt(e) == n.next; )
    e++;
  let t = e;
  for (; e < n.text.length && At(n.text.charCodeAt(e)); )
    e++;
  return e == n.text.length ? t : -1;
}
const tf = /^[ \t]*$/, Tb = /-->/, Cb = /\?>/, nf = [
  [/^<(?:script|pre|style)(?:\s|>|$)/i, /<\/(?:script|pre|style)>/i],
  [/^\s*<!--/, Tb],
  [/^\s*<\?/, Cb],
  [/^\s*<![A-Z]/, />/],
  [/^\s*<!\[CDATA\[/, /\]\]>/],
  [/^\s*<\/?(?:address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h1|h2|h3|h4|h5|h6|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul)(?:\s|\/?>|$)/i, tf],
  [/^\s*(?:<\/[a-z][\w-]*\s*>|<[a-z][\w-]*(\s+[a-z:_][\w-.]*(?:\s*=\s*(?:[^\s"'=<>`]+|'[^']*'|"[^"]*"))?)*\s*>)\s*$/i, tf]
];
function Rb(n, e, t) {
  if (n.next != 60)
    return -1;
  let i = n.text.slice(n.pos);
  for (let r = 0, s = nf.length - (t ? 1 : 0); r < s; r++)
    if (nf[r][0].test(i))
      return r;
  return -1;
}
function Vp(n, e) {
  let t = n.countIndent(e, n.pos, n.indent), i = n.countIndent(n.skipSpace(e), e, t);
  return i >= t + 5 ? t + 1 : i;
}
function ii(n, e, t) {
  let i = n.length - 1;
  i >= 0 && n[i].to == e && n[i].type == R.CodeText ? n[i].to = t : n.push(fe(R.CodeText, e, t));
}
const wo = {
  LinkReference: void 0,
  IndentedCode(n, e) {
    let t = e.baseIndent + 4;
    if (e.indent < t)
      return !1;
    let i = e.findColumn(t), r = n.lineStart + i, s = n.lineStart + e.text.length, o = [], l = [];
    for (ii(o, r, s); n.nextLine() && e.depth >= n.stack.length; )
      if (e.pos == e.text.length) {
        ii(l, n.lineStart - 1, n.lineStart);
        for (let a of e.markers)
          l.push(a);
      } else {
        if (e.indent < t)
          break;
        {
          if (l.length) {
            for (let c of l)
              c.type == R.CodeText ? ii(o, c.from, c.to) : o.push(c);
            l = [];
          }
          ii(o, n.lineStart - 1, n.lineStart);
          for (let c of e.markers)
            o.push(c);
          s = n.lineStart + e.text.length;
          let a = n.lineStart + e.findColumn(e.baseIndent + 4);
          a < s && ii(o, a, s);
        }
      }
    return l.length && (l = l.filter((a) => a.type != R.CodeText), l.length && (e.markers = l.concat(e.markers))), n.addNode(n.buffer.writeElements(o, -r).finish(R.CodeBlock, s - r), r), !0;
  },
  FencedCode(n, e) {
    let t = kb(e);
    if (t < 0)
      return !1;
    let i = n.lineStart + e.pos, r = e.next, s = t - e.pos, o = e.skipSpace(t), l = Lp(e.text, e.text.length, o), a = [fe(R.CodeMark, i, i + s)];
    o < l && a.push(fe(R.CodeInfo, n.lineStart + o, n.lineStart + l));
    for (let c = !0; n.nextLine() && e.depth >= n.stack.length; c = !1) {
      let h = e.pos;
      if (e.indent - e.baseIndent < 4)
        for (; h < e.text.length && e.text.charCodeAt(h) == r; )
          h++;
      if (h - e.pos >= s && e.skipSpace(h) == e.text.length) {
        for (let f of e.markers)
          a.push(f);
        a.push(fe(R.CodeMark, n.lineStart + e.pos, n.lineStart + h)), n.nextLine();
        break;
      } else {
        c || ii(a, n.lineStart - 1, n.lineStart);
        for (let d of e.markers)
          a.push(d);
        let f = n.lineStart + e.basePos, u = n.lineStart + e.text.length;
        f < u && ii(a, f, u);
      }
    }
    return n.addNode(n.buffer.writeElements(a, -i).finish(R.FencedCode, n.prevLineEnd() - i), i), !0;
  },
  Blockquote(n, e) {
    let t = wb(e);
    return t < 0 ? !1 : (n.startContext(R.Blockquote, e.pos), n.addNode(R.QuoteMark, n.lineStart + e.pos, n.lineStart + e.pos + 1), e.moveBase(e.pos + t), null);
  },
  HorizontalRule(n, e) {
    if (_u(e, n, !1) < 0)
      return !1;
    let t = n.lineStart + e.pos;
    return n.nextLine(), n.addNode(R.HorizontalRule, t), !0;
  },
  BulletList(n, e) {
    let t = Xu(e, n, !1);
    if (t < 0)
      return !1;
    n.block.type != R.BulletList && n.startContext(R.BulletList, e.basePos, e.next);
    let i = Vp(e, e.pos + 1);
    return n.startContext(R.ListItem, e.basePos, i - e.baseIndent), n.addNode(R.ListMark, n.lineStart + e.pos, n.lineStart + e.pos + t), e.moveBaseColumn(i), null;
  },
  OrderedList(n, e) {
    let t = qu(e, n, !1);
    if (t < 0)
      return !1;
    n.block.type != R.OrderedList && n.startContext(R.OrderedList, e.basePos, e.text.charCodeAt(e.pos + t - 1));
    let i = Vp(e, e.pos + t);
    return n.startContext(R.ListItem, e.basePos, i - e.baseIndent), n.addNode(R.ListMark, n.lineStart + e.pos, n.lineStart + e.pos + t), e.moveBaseColumn(i), null;
  },
  ATXHeading(n, e) {
    let t = Pb(e);
    if (t < 0)
      return !1;
    let i = e.pos, r = n.lineStart + i, s = Lp(e.text, e.text.length, i), o = s;
    for (; o > i && e.text.charCodeAt(o - 1) == e.next; )
      o--;
    (o == s || o == i || !At(e.text.charCodeAt(o - 1))) && (o = e.text.length);
    let l = n.buffer.write(R.HeaderMark, 0, t).writeElements(n.parser.parseInline(e.text.slice(i + t + 1, o), r + t + 1), -r);
    o < e.text.length && l.write(R.HeaderMark, o - i, s - i);
    let a = l.finish(R.ATXHeading1 - 1 + t, e.text.length - i);
    return n.nextLine(), n.addNode(a, r), !0;
  },
  HTMLBlock(n, e) {
    let t = Rb(e, n, !1);
    if (t < 0)
      return !1;
    let i = n.lineStart + e.pos, r = nf[t][1], s = [], o = r != tf;
    for (; !r.test(e.text) && n.nextLine(); ) {
      if (e.depth < n.stack.length) {
        o = !1;
        break;
      }
      for (let c of e.markers)
        s.push(c);
    }
    o && n.nextLine();
    let l = r == Tb ? R.CommentBlock : r == Cb ? R.ProcessingInstructionBlock : R.HTMLBlock, a = n.prevLineEnd();
    return n.addNode(n.buffer.writeElements(s, -i).finish(l, a - i), i), !0;
  },
  SetextHeading: void 0
  // Specifies relative precedence for block-continue function
};
class p5 {
  constructor(e) {
    this.stage = 0, this.elts = [], this.pos = 0, this.start = e.start, this.advance(e.content);
  }
  nextLine(e, t, i) {
    if (this.stage == -1)
      return !1;
    let r = i.content + `
` + t.scrub(), s = this.advance(r);
    return s > -1 && s < r.length ? this.complete(e, i, s) : !1;
  }
  finish(e, t) {
    return (this.stage == 2 || this.stage == 3) && Hr(t.content, this.pos) == t.content.length ? this.complete(e, t, t.content.length) : !1;
  }
  complete(e, t, i) {
    return e.addLeafElement(t, fe(R.LinkReference, this.start, this.start + i, this.elts)), !0;
  }
  nextStage(e) {
    return e ? (this.pos = e.to - this.start, this.elts.push(e), this.stage++, !0) : (e === !1 && (this.stage = -1), !1);
  }
  advance(e) {
    for (; ; ) {
      if (this.stage == -1)
        return -1;
      if (this.stage == 0) {
        if (!this.nextStage(Bb(e, this.pos, this.start, !0)))
          return -1;
        if (e.charCodeAt(this.pos) != 58)
          return this.stage = -1;
        this.elts.push(fe(R.LinkMark, this.pos + this.start, this.pos + this.start + 1)), this.pos++;
      } else if (this.stage == 1) {
        if (!this.nextStage(Lb(e, Hr(e, this.pos), this.start)))
          return -1;
      } else if (this.stage == 2) {
        let t = Hr(e, this.pos), i = 0;
        if (t > this.pos) {
          let r = Vb(e, t, this.start);
          if (r) {
            let s = fc(e, r.to - this.start);
            s > 0 && (this.nextStage(r), i = s);
          }
        }
        return i || (i = fc(e, this.pos)), i > 0 && i < e.length ? i : -1;
      } else
        return fc(e, this.pos);
    }
  }
}
function fc(n, e) {
  for (; e < n.length; e++) {
    let t = n.charCodeAt(e);
    if (t == 10)
      break;
    if (!At(t))
      return -1;
  }
  return e;
}
class m5 {
  nextLine(e, t, i) {
    let r = t.depth < e.stack.length ? -1 : $b(t), s = t.next;
    if (r < 0)
      return !1;
    let o = fe(R.HeaderMark, e.lineStart + t.pos, e.lineStart + r);
    return e.nextLine(), e.addLeafElement(i, fe(s == 61 ? R.SetextHeading1 : R.SetextHeading2, i.start, e.prevLineEnd(), [
      ...e.parser.parseInline(i.content, i.start),
      o
    ])), !0;
  }
  finish() {
    return !1;
  }
}
const Eb = {
  LinkReference(n, e) {
    return e.content.charCodeAt(0) == 91 ? new p5(e) : null;
  },
  SetextHeading() {
    return new m5();
  }
}, g5 = [
  (n, e) => Pb(e) >= 0,
  (n, e) => kb(e) >= 0,
  (n, e) => wb(e) >= 0,
  (n, e) => Xu(e, n, !0) >= 0,
  (n, e) => qu(e, n, !0) >= 0,
  (n, e) => _u(e, n, !0) >= 0,
  (n, e) => Rb(e, n, !0) >= 0
], y5 = { text: "", end: 0 };
class S5 {
  /**
  @internal
  */
  constructor(e, t, i, r) {
    this.parser = e, this.input = t, this.ranges = r, this.line = new O5(), this.atEnd = !1, this.reusePlaceholders = /* @__PURE__ */ new Map(), this.stoppedAt = null, this.rangeI = 0, this.to = r[r.length - 1].to, this.lineStart = this.absoluteLineStart = this.absoluteLineEnd = r[0].from, this.block = Vl.create(R.Document, 0, this.lineStart, 0, 0), this.stack = [this.block], this.fragments = i.length ? new k5(i, t) : null, this.readLine();
  }
  get parsedPos() {
    return this.absoluteLineStart;
  }
  advance() {
    if (this.stoppedAt != null && this.absoluteLineStart > this.stoppedAt)
      return this.finish();
    let { line: e } = this;
    for (; ; ) {
      for (let i = 0; ; ) {
        let r = e.depth < this.stack.length ? this.stack[this.stack.length - 1] : null;
        for (; i < e.markers.length && (!r || e.markers[i].from < r.end); ) {
          let s = e.markers[i++];
          this.addNode(s.type, s.from, s.to);
        }
        if (!r)
          break;
        this.finishContext();
      }
      if (e.pos < e.text.length)
        break;
      if (!this.nextLine())
        return this.finish();
    }
    if (this.fragments && this.reuseFragment(e.basePos))
      return null;
    e: for (; ; ) {
      for (let i of this.parser.blockParsers)
        if (i) {
          let r = i(this, e);
          if (r != !1) {
            if (r == !0)
              return null;
            e.forward();
            continue e;
          }
        }
      break;
    }
    let t = new d5(this.lineStart + e.pos, e.text.slice(e.pos));
    for (let i of this.parser.leafBlockParsers)
      if (i) {
        let r = i(this, t);
        r && t.parsers.push(r);
      }
    e: for (; this.nextLine() && e.pos != e.text.length; ) {
      if (e.indent < e.baseIndent + 4) {
        for (let i of this.parser.endLeafBlock)
          if (i(this, e, t))
            break e;
      }
      for (let i of t.parsers)
        if (i.nextLine(this, e, t))
          return null;
      t.content += `
` + e.scrub();
      for (let i of e.markers)
        t.marks.push(i);
    }
    return this.finishLeaf(t), null;
  }
  stopAt(e) {
    if (this.stoppedAt != null && this.stoppedAt < e)
      throw new RangeError("Can't move stoppedAt forward");
    this.stoppedAt = e;
  }
  reuseFragment(e) {
    if (!this.fragments.moveTo(this.absoluteLineStart + e, this.absoluteLineStart) || !this.fragments.matches(this.block.hash))
      return !1;
    let t = this.fragments.takeNodes(this);
    return t ? (this.absoluteLineStart += t, this.lineStart = Wb(this.absoluteLineStart, this.ranges), this.moveRangeI(), this.absoluteLineStart < this.to ? (this.lineStart++, this.absoluteLineStart++, this.readLine()) : (this.atEnd = !0, this.readLine()), !0) : !1;
  }
  /**
  The number of parent blocks surrounding the current block.
  */
  get depth() {
    return this.stack.length;
  }
  /**
  Get the type of the parent block at the given depth. When no
  depth is passed, return the type of the innermost parent.
  */
  parentType(e = this.depth - 1) {
    return this.parser.nodeSet.types[this.stack[e].type];
  }
  /**
  Move to the next input line. This should only be called by
  (non-composite) [block parsers](#BlockParser.parse) that consume
  the line directly, or leaf block parser
  [`nextLine`](#LeafBlockParser.nextLine) methods when they
  consume the current line (and return true).
  */
  nextLine() {
    return this.lineStart += this.line.text.length, this.absoluteLineEnd >= this.to ? (this.absoluteLineStart = this.absoluteLineEnd, this.atEnd = !0, this.readLine(), !1) : (this.lineStart++, this.absoluteLineStart = this.absoluteLineEnd + 1, this.moveRangeI(), this.readLine(), !0);
  }
  /**
  Retrieve the text of the line after the current one, without
  actually moving the context's current line forward.
  */
  peekLine() {
    return this.scanLine(this.absoluteLineEnd + 1).text;
  }
  moveRangeI() {
    for (; this.rangeI < this.ranges.length - 1 && this.absoluteLineStart >= this.ranges[this.rangeI].to; )
      this.rangeI++, this.absoluteLineStart = Math.max(this.absoluteLineStart, this.ranges[this.rangeI].from);
  }
  /**
  @internal
  Collect the text for the next line.
  */
  scanLine(e) {
    let t = y5;
    if (t.end = e, e >= this.to)
      t.text = "";
    else if (t.text = this.lineChunkAt(e), t.end += t.text.length, this.ranges.length > 1) {
      let i = this.absoluteLineStart, r = this.rangeI;
      for (; this.ranges[r].to < t.end; ) {
        r++;
        let s = this.ranges[r].from, o = this.lineChunkAt(s);
        t.end = s + o.length, t.text = t.text.slice(0, this.ranges[r - 1].to - i) + o, i = t.end - t.text.length;
      }
    }
    return t;
  }
  /**
  @internal
  Populate this.line with the content of the next line. Skip
  leading characters covered by composite blocks.
  */
  readLine() {
    let { line: e } = this, { text: t, end: i } = this.scanLine(this.absoluteLineStart);
    for (this.absoluteLineEnd = i, e.reset(t); e.depth < this.stack.length; e.depth++) {
      let r = this.stack[e.depth], s = this.parser.skipContextMarkup[r.type];
      if (!s)
        throw new Error("Unhandled block context " + R[r.type]);
      if (!s(r, this, e))
        break;
      e.forward();
    }
  }
  lineChunkAt(e) {
    let t = this.input.chunk(e), i;
    if (this.input.lineChunks)
      i = t == `
` ? "" : t;
    else {
      let r = t.indexOf(`
`);
      i = r < 0 ? t : t.slice(0, r);
    }
    return e + i.length > this.to ? i.slice(0, this.to - e) : i;
  }
  /**
  The end position of the previous line.
  */
  prevLineEnd() {
    return this.atEnd ? this.lineStart : this.lineStart - 1;
  }
  /**
  @internal
  */
  startContext(e, t, i = 0) {
    this.block = Vl.create(e, i, this.lineStart + t, this.block.hash, this.lineStart + this.line.text.length), this.stack.push(this.block);
  }
  /**
  Start a composite block. Should only be called from [block
  parser functions](#BlockParser.parse) that return null.
  */
  startComposite(e, t, i = 0) {
    this.startContext(this.parser.getNodeType(e), t, i);
  }
  /**
  @internal
  */
  addNode(e, t, i) {
    typeof e == "number" && (e = new me(this.parser.nodeSet.types[e], rr, rr, (i ?? this.prevLineEnd()) - t)), this.block.addChild(e, t - this.block.from);
  }
  /**
  Add a block element. Can be called by [block
  parsers](#BlockParser.parse).
  */
  addElement(e) {
    this.block.addChild(e.toTree(this.parser.nodeSet), e.from - this.block.from);
  }
  /**
  Add a block element from a [leaf parser](#LeafBlockParser). This
  makes sure any extra composite block markup (such as blockquote
  markers) inside the block are also added to the syntax tree.
  */
  addLeafElement(e, t) {
    this.addNode(this.buffer.writeElements(of(t.children, e.marks), -t.from).finish(t.type, t.to - t.from), t.from);
  }
  /**
  @internal
  */
  finishContext() {
    let e = this.stack.pop(), t = this.stack[this.stack.length - 1];
    t.addChild(e.toTree(this.parser.nodeSet), e.from - t.from), this.block = t;
  }
  finish() {
    for (; this.stack.length > 1; )
      this.finishContext();
    return this.addGaps(this.block.toTree(this.parser.nodeSet, this.lineStart));
  }
  addGaps(e) {
    return this.ranges.length > 1 ? Ab(this.ranges, 0, e.topNode, this.ranges[0].from, this.reusePlaceholders) : e;
  }
  /**
  @internal
  */
  finishLeaf(e) {
    for (let i of e.parsers)
      if (i.finish(this, e))
        return;
    let t = of(this.parser.parseInline(e.content, e.start), e.marks);
    this.addNode(this.buffer.writeElements(t, -e.start).finish(R.Paragraph, e.content.length), e.start);
  }
  elt(e, t, i, r) {
    return typeof e == "string" ? fe(this.parser.getNodeType(e), t, i, r) : new qb(e, t);
  }
  /**
  @internal
  */
  get buffer() {
    return new Xb(this.parser.nodeSet);
  }
}
function Ab(n, e, t, i, r) {
  let s = n[e].to, o = [], l = [], a = t.from + i;
  function c(h, f) {
    for (; f ? h >= s : h > s; ) {
      let u = n[e + 1].from - s;
      i += u, h += u, e++, s = n[e].to;
    }
  }
  for (let h = t.firstChild; h; h = h.nextSibling) {
    c(h.from + i, !0);
    let f = h.from + i, u, d = r.get(h.tree);
    d ? u = d : h.to + i > s ? (u = Ab(n, e, h, i, r), c(h.to + i, !1)) : u = h.toTree(), o.push(u), l.push(f - a);
  }
  return c(t.to + i, !1), new me(t.type, o, l, t.to + i - a, t.tree ? t.tree.propValues : void 0);
}
class ma extends hu {
  /**
  @internal
  */
  constructor(e, t, i, r, s, o, l, a, c) {
    super(), this.nodeSet = e, this.blockParsers = t, this.leafBlockParsers = i, this.blockNames = r, this.endLeafBlock = s, this.skipContextMarkup = o, this.inlineParsers = l, this.inlineNames = a, this.wrappers = c, this.nodeTypes = /* @__PURE__ */ Object.create(null);
    for (let h of e.types)
      this.nodeTypes[h.name] = h.id;
  }
  createParse(e, t, i) {
    let r = new S5(this, e, t, i);
    for (let s of this.wrappers)
      r = s(r, e, t, i);
    return r;
  }
  /**
  Reconfigure the parser.
  */
  configure(e) {
    let t = rf(e);
    if (!t)
      return this;
    let { nodeSet: i, skipContextMarkup: r } = this, s = this.blockParsers.slice(), o = this.leafBlockParsers.slice(), l = this.blockNames.slice(), a = this.inlineParsers.slice(), c = this.inlineNames.slice(), h = this.endLeafBlock.slice(), f = this.wrappers;
    if (Ar(t.defineNodes)) {
      r = Object.assign({}, r);
      let u = i.types.slice(), d;
      for (let O of t.defineNodes) {
        let { name: p, block: m, composite: y, style: S } = typeof O == "string" ? { name: O } : O;
        if (u.some((k) => k.name == p))
          continue;
        y && (r[u.length] = (k, Q, P) => y(Q, P, k.value));
        let b = u.length, w = y ? ["Block", "BlockContext"] : m ? b >= R.ATXHeading1 && b <= R.SetextHeading2 ? ["Block", "LeafBlock", "Heading"] : ["Block", "LeafBlock"] : void 0;
        u.push(We.define({
          id: b,
          name: p,
          props: w && [[J.group, w]]
        })), S && (d || (d = {}), Array.isArray(S) || S instanceof rn ? d[p] = S : Object.assign(d, S));
      }
      i = new Ws(u), d && (i = i.extend(Nt(d)));
    }
    if (Ar(t.props) && (i = i.extend(...t.props)), Ar(t.remove))
      for (let u of t.remove) {
        let d = this.blockNames.indexOf(u), O = this.inlineNames.indexOf(u);
        d > -1 && (s[d] = o[d] = void 0), O > -1 && (a[O] = void 0);
      }
    if (Ar(t.parseBlock))
      for (let u of t.parseBlock) {
        let d = l.indexOf(u.name);
        if (d > -1)
          s[d] = u.parse, o[d] = u.leaf;
        else {
          let O = u.before ? vo(l, u.before) : u.after ? vo(l, u.after) + 1 : l.length - 1;
          s.splice(O, 0, u.parse), o.splice(O, 0, u.leaf), l.splice(O, 0, u.name);
        }
        u.endLeaf && h.push(u.endLeaf);
      }
    if (Ar(t.parseInline))
      for (let u of t.parseInline) {
        let d = c.indexOf(u.name);
        if (d > -1)
          a[d] = u.parse;
        else {
          let O = u.before ? vo(c, u.before) : u.after ? vo(c, u.after) + 1 : c.length - 1;
          a.splice(O, 0, u.parse), c.splice(O, 0, u.name);
        }
      }
    return t.wrap && (f = f.concat(t.wrap)), new ma(i, s, o, l, h, r, a, c, f);
  }
  /**
  @internal
  */
  getNodeType(e) {
    let t = this.nodeTypes[e];
    if (t == null)
      throw new RangeError(`Unknown node type '${e}'`);
    return t;
  }
  /**
  Parse the given piece of inline text at the given offset,
  returning an array of [`Element`](#Element) objects representing
  the inline content.
  */
  parseInline(e, t) {
    let i = new Q5(this, e, t);
    e: for (let r = t; r < i.end; ) {
      let s = i.char(r);
      for (let o of this.inlineParsers)
        if (o) {
          let l = o(i, s, r);
          if (l >= 0) {
            r = l;
            continue e;
          }
        }
      r++;
    }
    return i.resolveMarkers(0);
  }
}
function Ar(n) {
  return n != null && n.length > 0;
}
function rf(n) {
  if (!Array.isArray(n))
    return n;
  if (n.length == 0)
    return null;
  let e = rf(n[0]);
  if (n.length == 1)
    return e;
  let t = rf(n.slice(1));
  if (!t || !e)
    return e || t;
  let i = (o, l) => (o || rr).concat(l || rr), r = e.wrap, s = t.wrap;
  return {
    props: i(e.props, t.props),
    defineNodes: i(e.defineNodes, t.defineNodes),
    parseBlock: i(e.parseBlock, t.parseBlock),
    parseInline: i(e.parseInline, t.parseInline),
    remove: i(e.remove, t.remove),
    wrap: r ? s ? (o, l, a, c) => r(s(o, l, a, c), l, a, c) : r : s
  };
}
function vo(n, e) {
  let t = n.indexOf(e);
  if (t < 0)
    throw new RangeError(`Position specified relative to unknown parser ${e}`);
  return t;
}
let _b = [We.none];
for (let n = 1, e; e = R[n]; n++)
  _b[n] = We.define({
    id: n,
    name: e,
    props: n >= R.Escape ? [] : [[J.group, n in xb ? ["Block", "BlockContext"] : ["Block", "LeafBlock"]]],
    top: e == "Document"
  });
const rr = [];
let Xb = class {
  constructor(e) {
    this.nodeSet = e, this.content = [], this.nodes = [];
  }
  write(e, t, i, r = 0) {
    return this.content.push(e, t, i, 4 + r * 4), this;
  }
  writeElements(e, t = 0) {
    for (let i of e)
      i.writeTo(this, t);
    return this;
  }
  finish(e, t) {
    return me.build({
      buffer: this.content,
      nodeSet: this.nodeSet,
      reused: this.nodes,
      topID: e,
      length: t
    });
  }
}, ks = class {
  /**
  @internal
  */
  constructor(e, t, i, r = rr) {
    this.type = e, this.from = t, this.to = i, this.children = r;
  }
  /**
  @internal
  */
  writeTo(e, t) {
    let i = e.content.length;
    e.writeElements(this.children, t), e.content.push(this.type, this.from + t, this.to + t, e.content.length + 4 - i);
  }
  /**
  @internal
  */
  toTree(e) {
    return new Xb(e).writeElements(this.children, -this.from).finish(this.type, this.to - this.from);
  }
};
class qb {
  constructor(e, t) {
    this.tree = e, this.from = t;
  }
  get to() {
    return this.from + this.tree.length;
  }
  get type() {
    return this.tree.type.id;
  }
  get children() {
    return rr;
  }
  writeTo(e, t) {
    e.nodes.push(this.tree), e.content.push(e.nodes.length - 1, this.from + t, this.to + t, -1);
  }
  toTree() {
    return this.tree;
  }
}
function fe(n, e, t, i) {
  return new ks(n, e, t, i);
}
const Zb = { resolve: "Emphasis", mark: "EmphasisMark" }, Mb = { resolve: "Emphasis", mark: "EmphasisMark" }, qi = {}, sf = {};
class xt {
  constructor(e, t, i, r) {
    this.type = e, this.from = t, this.to = i, this.side = r;
  }
}
const Bp = "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~";
let ws = /[!"#$%&'()*+,\-.\/:;<=>?@\[\\\]^_`{|}~\xA1\u2010-\u2027]/;
try {
  ws = new RegExp("[\\p{S}|\\p{P}]", "u");
} catch {
}
const uc = {
  Escape(n, e, t) {
    if (e != 92 || t == n.end - 1)
      return -1;
    let i = n.char(t + 1);
    for (let r = 0; r < Bp.length; r++)
      if (Bp.charCodeAt(r) == i)
        return n.append(fe(R.Escape, t, t + 2));
    return -1;
  },
  Entity(n, e, t) {
    if (e != 38)
      return -1;
    let i = /^(?:#\d+|#x[a-f\d]+|\w+);/i.exec(n.slice(t + 1, t + 31));
    return i ? n.append(fe(R.Entity, t, t + 1 + i[0].length)) : -1;
  },
  InlineCode(n, e, t) {
    if (e != 96 || t && n.char(t - 1) == 96)
      return -1;
    let i = t + 1;
    for (; i < n.end && n.char(i) == 96; )
      i++;
    let r = i - t, s = 0;
    for (; i < n.end; i++)
      if (n.char(i) == 96) {
        if (s++, s == r && n.char(i + 1) != 96)
          return n.append(fe(R.InlineCode, t, i + 1, [
            fe(R.CodeMark, t, t + r),
            fe(R.CodeMark, i + 1 - r, i + 1)
          ]));
      } else
        s = 0;
    return -1;
  },
  HTMLTag(n, e, t) {
    if (e != 60 || t == n.end - 1)
      return -1;
    let i = n.slice(t + 1, n.end), r = /^(?:[a-z][-\w+.]+:[^\s>]+|[a-z\d.!#$%&'*+/=?^_`{|}~-]+@[a-z\d](?:[a-z\d-]{0,61}[a-z\d])?(?:\.[a-z\d](?:[a-z\d-]{0,61}[a-z\d])?)*)>/i.exec(i);
    if (r)
      return n.append(fe(R.Autolink, t, t + 1 + r[0].length, [
        fe(R.LinkMark, t, t + 1),
        // url[0] includes the closing bracket, so exclude it from this slice
        fe(R.URL, t + 1, t + r[0].length),
        fe(R.LinkMark, t + r[0].length, t + 1 + r[0].length)
      ]));
    let s = /^!--[^>](?:-[^-]|[^-])*?-->/i.exec(i);
    if (s)
      return n.append(fe(R.Comment, t, t + 1 + s[0].length));
    let o = /^\?[^]*?\?>/.exec(i);
    if (o)
      return n.append(fe(R.ProcessingInstruction, t, t + 1 + o[0].length));
    let l = /^(?:![A-Z][^]*?>|!\[CDATA\[[^]*?\]\]>|\/\s*[a-zA-Z][\w-]*\s*>|\s*[a-zA-Z][\w-]*(\s+[a-zA-Z:_][\w-.:]*(?:\s*=\s*(?:[^\s"'=<>`]+|'[^']*'|"[^"]*"))?)*\s*(\/\s*)?>)/.exec(i);
    return l ? n.append(fe(R.HTMLTag, t, t + 1 + l[0].length)) : -1;
  },
  Emphasis(n, e, t) {
    if (e != 95 && e != 42)
      return -1;
    let i = t + 1;
    for (; n.char(i) == e; )
      i++;
    let r = n.slice(t - 1, t), s = n.slice(i, i + 1), o = ws.test(r), l = ws.test(s), a = /\s|^$/.test(r), c = /\s|^$/.test(s), h = !c && (!l || a || o), f = !a && (!o || c || l), u = h && (e == 42 || !f || o), d = f && (e == 42 || !h || l);
    return n.append(new xt(e == 95 ? Zb : Mb, t, i, (u ? 1 : 0) | (d ? 2 : 0)));
  },
  HardBreak(n, e, t) {
    if (e == 92 && n.char(t + 1) == 10)
      return n.append(fe(R.HardBreak, t, t + 2));
    if (e == 32) {
      let i = t + 1;
      for (; n.char(i) == 32; )
        i++;
      if (n.char(i) == 10 && i >= t + 2)
        return n.append(fe(R.HardBreak, t, i + 1));
    }
    return -1;
  },
  Link(n, e, t) {
    return e == 91 ? n.append(new xt(
      qi,
      t,
      t + 1,
      1
      /* Mark.Open */
    )) : -1;
  },
  Image(n, e, t) {
    return e == 33 && n.char(t + 1) == 91 ? n.append(new xt(
      sf,
      t,
      t + 2,
      1
      /* Mark.Open */
    )) : -1;
  },
  LinkEnd(n, e, t) {
    if (e != 93)
      return -1;
    for (let i = n.parts.length - 1; i >= 0; i--) {
      let r = n.parts[i];
      if (r instanceof xt && (r.type == qi || r.type == sf)) {
        if (!r.side || n.skipSpace(r.to) == t && !/[(\[]/.test(n.slice(t + 1, t + 2)))
          return n.parts[i] = null, -1;
        let s = n.takeContent(i), o = n.parts[i] = b5(n, s, r.type == qi ? R.Link : R.Image, r.from, t + 1);
        if (r.type == qi)
          for (let l = 0; l < i; l++) {
            let a = n.parts[l];
            a instanceof xt && a.type == qi && (a.side = 0);
          }
        return o.to;
      }
    }
    return -1;
  }
};
function b5(n, e, t, i, r) {
  let { text: s } = n, o = n.char(r), l = r;
  if (e.unshift(fe(R.LinkMark, i, i + (t == R.Image ? 2 : 1))), e.push(fe(R.LinkMark, r - 1, r)), o == 40) {
    let a = n.skipSpace(r + 1), c = Lb(s, a - n.offset, n.offset), h;
    c && (a = n.skipSpace(c.to), a != c.to && (h = Vb(s, a - n.offset, n.offset), h && (a = n.skipSpace(h.to)))), n.char(a) == 41 && (e.push(fe(R.LinkMark, r, r + 1)), l = a + 1, c && e.push(c), h && e.push(h), e.push(fe(R.LinkMark, a, l)));
  } else if (o == 91) {
    let a = Bb(s, r - n.offset, n.offset, !1);
    a && (e.push(a), l = a.to);
  }
  return fe(t, i, l, e);
}
function Lb(n, e, t) {
  if (n.charCodeAt(e) == 60) {
    for (let r = e + 1; r < n.length; r++) {
      let s = n.charCodeAt(r);
      if (s == 62)
        return fe(R.URL, e + t, r + 1 + t);
      if (s == 60 || s == 10)
        return !1;
    }
    return null;
  } else {
    let r = 0, s = e;
    for (let o = !1; s < n.length; s++) {
      let l = n.charCodeAt(s);
      if (At(l))
        break;
      if (o)
        o = !1;
      else if (l == 40)
        r++;
      else if (l == 41) {
        if (!r)
          break;
        r--;
      } else l == 92 && (o = !0);
    }
    return s > e ? fe(R.URL, e + t, s + t) : s == n.length ? null : !1;
  }
}
function Vb(n, e, t) {
  let i = n.charCodeAt(e);
  if (i != 39 && i != 34 && i != 40)
    return !1;
  let r = i == 40 ? 41 : i;
  for (let s = e + 1, o = !1; s < n.length; s++) {
    let l = n.charCodeAt(s);
    if (o)
      o = !1;
    else {
      if (l == r)
        return fe(R.LinkTitle, e + t, s + 1 + t);
      l == 92 && (o = !0);
    }
  }
  return null;
}
function Bb(n, e, t, i) {
  for (let r = !1, s = e + 1, o = Math.min(n.length, s + 999); s < o; s++) {
    let l = n.charCodeAt(s);
    if (r)
      r = !1;
    else {
      if (l == 93)
        return i ? !1 : fe(R.LinkLabel, e + t, s + 1 + t);
      if (i && !At(l) && (i = !1), l == 91)
        return !1;
      l == 92 && (r = !0);
    }
  }
  return null;
}
class Q5 {
  /**
  @internal
  */
  constructor(e, t, i) {
    this.parser = e, this.text = t, this.offset = i, this.parts = [];
  }
  /**
  Get the character code at the given (document-relative)
  position.
  */
  char(e) {
    return e >= this.end ? -1 : this.text.charCodeAt(e - this.offset);
  }
  /**
  The position of the end of this inline section.
  */
  get end() {
    return this.offset + this.text.length;
  }
  /**
  Get a substring of this inline section. Again uses
  document-relative positions.
  */
  slice(e, t) {
    return this.text.slice(e - this.offset, t - this.offset);
  }
  /**
  @internal
  */
  append(e) {
    return this.parts.push(e), e.to;
  }
  /**
  Add a [delimiter](#DelimiterType) at this given position. `open`
  and `close` indicate whether this delimiter is opening, closing,
  or both. Returns the end of the delimiter, for convenient
  returning from [parse functions](#InlineParser.parse).
  */
  addDelimiter(e, t, i, r, s) {
    return this.append(new xt(e, t, i, (r ? 1 : 0) | (s ? 2 : 0)));
  }
  /**
  Returns true when there is an unmatched link or image opening
  token before the current position.
  */
  get hasOpenLink() {
    for (let e = this.parts.length - 1; e >= 0; e--) {
      let t = this.parts[e];
      if (t instanceof xt && (t.type == qi || t.type == sf))
        return !0;
    }
    return !1;
  }
  /**
  Add an inline element. Returns the end of the element.
  */
  addElement(e) {
    return this.append(e);
  }
  /**
  Resolve markers between this.parts.length and from, wrapping matched markers in the
  appropriate node and updating the content of this.parts. @internal
  */
  resolveMarkers(e) {
    for (let i = e; i < this.parts.length; i++) {
      let r = this.parts[i];
      if (!(r instanceof xt && r.type.resolve && r.side & 2))
        continue;
      let s = r.type == Zb || r.type == Mb, o = r.to - r.from, l, a = i - 1;
      for (; a >= e; a--) {
        let p = this.parts[a];
        if (p instanceof xt && p.side & 1 && p.type == r.type && // Ignore emphasis delimiters where the character count doesn't match
        !(s && (r.side & 1 || p.side & 2) && (p.to - p.from + o) % 3 == 0 && ((p.to - p.from) % 3 || o % 3))) {
          l = p;
          break;
        }
      }
      if (!l)
        continue;
      let c = r.type.resolve, h = [], f = l.from, u = r.to;
      if (s) {
        let p = Math.min(2, l.to - l.from, o);
        f = l.to - p, u = r.from + p, c = p == 1 ? "Emphasis" : "StrongEmphasis";
      }
      l.type.mark && h.push(this.elt(l.type.mark, f, l.to));
      for (let p = a + 1; p < i; p++)
        this.parts[p] instanceof ks && h.push(this.parts[p]), this.parts[p] = null;
      r.type.mark && h.push(this.elt(r.type.mark, r.from, u));
      let d = this.elt(c, f, u, h);
      this.parts[a] = s && l.from != f ? new xt(l.type, l.from, f, l.side) : null, (this.parts[i] = s && r.to != u ? new xt(r.type, u, r.to, r.side) : null) ? this.parts.splice(i, 0, d) : this.parts[i] = d;
    }
    let t = [];
    for (let i = e; i < this.parts.length; i++) {
      let r = this.parts[i];
      r instanceof ks && t.push(r);
    }
    return t;
  }
  /**
  Find an opening delimiter of the given type. Returns `null` if
  no delimiter is found, or an index that can be passed to
  [`takeContent`](#InlineContext.takeContent) otherwise.
  */
  findOpeningDelimiter(e) {
    for (let t = this.parts.length - 1; t >= 0; t--) {
      let i = this.parts[t];
      if (i instanceof xt && i.type == e)
        return t;
    }
    return null;
  }
  /**
  Remove all inline elements and delimiters starting from the
  given index (which you should get from
  [`findOpeningDelimiter`](#InlineContext.findOpeningDelimiter),
  resolve delimiters inside of them, and return them as an array
  of elements.
  */
  takeContent(e) {
    let t = this.resolveMarkers(e);
    return this.parts.length = e, t;
  }
  /**
  Skip space after the given (document) position, returning either
  the position of the next non-space character or the end of the
  section.
  */
  skipSpace(e) {
    return Hr(this.text, e - this.offset) + this.offset;
  }
  elt(e, t, i, r) {
    return typeof e == "string" ? fe(this.parser.getNodeType(e), t, i, r) : new qb(e, t);
  }
}
function of(n, e) {
  if (!e.length)
    return n;
  if (!n.length)
    return e;
  let t = n.slice(), i = 0;
  for (let r of e) {
    for (; i < t.length && t[i].to < r.to; )
      i++;
    if (i < t.length && t[i].from < r.from) {
      let s = t[i];
      s instanceof ks && (t[i] = new ks(s.type, s.from, s.to, of(s.children, [r])));
    } else
      t.splice(i++, 0, r);
  }
  return t;
}
const x5 = [R.CodeBlock, R.ListItem, R.OrderedList, R.BulletList];
class k5 {
  constructor(e, t) {
    this.fragments = e, this.input = t, this.i = 0, this.fragment = null, this.fragmentEnd = -1, this.cursor = null, e.length && (this.fragment = e[this.i++]);
  }
  nextFragment() {
    this.fragment = this.i < this.fragments.length ? this.fragments[this.i++] : null, this.cursor = null, this.fragmentEnd = -1;
  }
  moveTo(e, t) {
    for (; this.fragment && this.fragment.to <= e; )
      this.nextFragment();
    if (!this.fragment || this.fragment.from > (e ? e - 1 : 0))
      return !1;
    if (this.fragmentEnd < 0) {
      let s = this.fragment.to;
      for (; s > 0 && this.input.read(s - 1, s) != `
`; )
        s--;
      this.fragmentEnd = s ? s - 1 : 0;
    }
    let i = this.cursor;
    i || (i = this.cursor = this.fragment.tree.cursor(), i.firstChild());
    let r = e + this.fragment.offset;
    for (; i.to <= r; )
      if (!i.parent())
        return !1;
    for (; ; ) {
      if (i.from >= r)
        return this.fragment.from <= t;
      if (!i.childAfter(r))
        return !1;
    }
  }
  matches(e) {
    let t = this.cursor.tree;
    return t && t.prop(J.contextHash) == e;
  }
  takeNodes(e) {
    let t = this.cursor, i = this.fragment.offset, r = this.fragmentEnd - (this.fragment.openEnd ? 1 : 0), s = e.absoluteLineStart, o = s, l = e.block.children.length, a = o, c = l;
    for (; ; ) {
      if (t.to - i > r) {
        if (t.type.isAnonymous && t.firstChild())
          continue;
        break;
      }
      let h = Wb(t.from - i, e.ranges);
      if (t.to - i <= e.ranges[e.rangeI].to)
        e.addNode(t.tree, h);
      else {
        let f = new me(e.parser.nodeSet.types[R.Paragraph], [], [], 0, e.block.hashProp);
        e.reusePlaceholders.set(f, t.tree), e.addNode(f, h);
      }
      if (t.type.is("Block") && (x5.indexOf(t.type.id) < 0 ? (o = t.to - i, l = e.block.children.length) : (o = a, l = c, a = t.to - i, c = e.block.children.length)), !t.nextSibling())
        break;
    }
    for (; e.block.children.length > l; )
      e.block.children.pop(), e.block.positions.pop();
    return o - s;
  }
}
function Wb(n, e) {
  let t = n;
  for (let i = 1; i < e.length; i++) {
    let r = e[i - 1].to, s = e[i].from;
    r < n && (t -= s - r);
  }
  return t;
}
const w5 = Nt({
  "Blockquote/...": g.quote,
  HorizontalRule: g.contentSeparator,
  "ATXHeading1/... SetextHeading1/...": g.heading1,
  "ATXHeading2/... SetextHeading2/...": g.heading2,
  "ATXHeading3/...": g.heading3,
  "ATXHeading4/...": g.heading4,
  "ATXHeading5/...": g.heading5,
  "ATXHeading6/...": g.heading6,
  "Comment CommentBlock": g.comment,
  Escape: g.escape,
  Entity: g.character,
  "Emphasis/...": g.emphasis,
  "StrongEmphasis/...": g.strong,
  "Link/... Image/...": g.link,
  "OrderedList/... BulletList/...": g.list,
  "BlockQuote/...": g.quote,
  "InlineCode CodeText": g.monospace,
  "URL Autolink": g.url,
  "HeaderMark HardBreak QuoteMark ListMark LinkMark EmphasisMark CodeMark": g.processingInstruction,
  "CodeInfo LinkLabel": g.labelName,
  LinkTitle: g.string,
  Paragraph: g.content
}), v5 = new ma(new Ws(_b).extend(w5), Object.keys(wo).map((n) => wo[n]), Object.keys(wo).map((n) => Eb[n]), Object.keys(wo), g5, xb, Object.keys(uc).map((n) => uc[n]), Object.keys(uc), []);
function P5(n, e, t) {
  let i = [];
  for (let r = n.firstChild, s = e; ; r = r.nextSibling) {
    let o = r ? r.from : t;
    if (o > s && i.push({ from: s, to: o }), !r)
      break;
    s = r.to;
  }
  return i;
}
function $5(n) {
  let { codeParser: e, htmlParser: t } = n;
  return { wrap: jy((r, s) => {
    let o = r.type.id;
    if (e && (o == R.CodeBlock || o == R.FencedCode)) {
      let l = "";
      if (o == R.FencedCode) {
        let c = r.node.getChild(R.CodeInfo);
        c && (l = s.read(c.from, c.to));
      }
      let a = e(l);
      if (a)
        return { parser: a, overlay: (c) => c.type.id == R.CodeText };
    } else if (t && (o == R.HTMLBlock || o == R.HTMLTag || o == R.CommentBlock))
      return { parser: t, overlay: P5(r.node, r.from, r.to) };
    return null;
  }) };
}
const T5 = { resolve: "Strikethrough", mark: "StrikethroughMark" }, C5 = {
  defineNodes: [{
    name: "Strikethrough",
    style: { "Strikethrough/...": g.strikethrough }
  }, {
    name: "StrikethroughMark",
    style: g.processingInstruction
  }],
  parseInline: [{
    name: "Strikethrough",
    parse(n, e, t) {
      if (e != 126 || n.char(t + 1) != 126 || n.char(t + 2) == 126)
        return -1;
      let i = n.slice(t - 1, t), r = n.slice(t + 2, t + 3), s = /\s|^$/.test(i), o = /\s|^$/.test(r), l = ws.test(i), a = ws.test(r);
      return n.addDelimiter(T5, t, t + 2, !o && (!a || s || l), !s && (!l || o || a));
    },
    after: "Emphasis"
  }]
};
function Kr(n, e, t = 0, i, r = 0) {
  let s = 0, o = !0, l = -1, a = -1, c = !1, h = () => {
    i.push(n.elt("TableCell", r + l, r + a, n.parser.parseInline(e.slice(l, a), r + l)));
  };
  for (let f = t; f < e.length; f++) {
    let u = e.charCodeAt(f);
    u == 124 && !c ? ((!o || l > -1) && s++, o = !1, i && (l > -1 && h(), i.push(n.elt("TableDelimiter", f + r, f + r + 1))), l = a = -1) : (c || u != 32 && u != 9) && (l < 0 && (l = f), a = f + 1), c = !c && u == 92;
  }
  return l > -1 && (s++, i && h()), s;
}
function Wp(n, e) {
  for (let t = e; t < n.length; t++) {
    let i = n.charCodeAt(t);
    if (i == 124)
      return !0;
    i == 92 && t++;
  }
  return !1;
}
const zb = /^\|?(\s*:?-+:?\s*\|)+(\s*:?-+:?\s*)?$/;
class zp {
  constructor() {
    this.rows = null;
  }
  nextLine(e, t, i) {
    if (this.rows == null) {
      this.rows = !1;
      let r;
      if ((t.next == 45 || t.next == 58 || t.next == 124) && zb.test(r = t.text.slice(t.pos))) {
        let s = [];
        Kr(e, i.content, 0, s, i.start) == Kr(e, r, t.pos) && (this.rows = [
          e.elt("TableHeader", i.start, i.start + i.content.length, s),
          e.elt("TableDelimiter", e.lineStart + t.pos, e.lineStart + t.text.length)
        ]);
      }
    } else if (this.rows) {
      let r = [];
      Kr(e, t.text, t.pos, r, e.lineStart), this.rows.push(e.elt("TableRow", e.lineStart + t.pos, e.lineStart + t.text.length, r));
    }
    return !1;
  }
  finish(e, t) {
    return this.rows ? (e.addLeafElement(t, e.elt("Table", t.start, t.start + t.content.length, this.rows)), !0) : !1;
  }
}
const R5 = {
  defineNodes: [
    { name: "Table", block: !0 },
    { name: "TableHeader", style: { "TableHeader/...": g.heading } },
    "TableRow",
    { name: "TableCell", style: g.content },
    { name: "TableDelimiter", style: g.processingInstruction }
  ],
  parseBlock: [{
    name: "Table",
    leaf(n, e) {
      return Wp(e.content, 0) ? new zp() : null;
    },
    endLeaf(n, e, t) {
      if (t.parsers.some((r) => r instanceof zp) || !Wp(e.text, e.basePos))
        return !1;
      let i = n.peekLine();
      return zb.test(i) && Kr(n, e.text, e.basePos) == Kr(n, i, e.basePos);
    },
    before: "SetextHeading"
  }]
};
class E5 {
  nextLine() {
    return !1;
  }
  finish(e, t) {
    return e.addLeafElement(t, e.elt("Task", t.start, t.start + t.content.length, [
      e.elt("TaskMarker", t.start, t.start + 3),
      ...e.parser.parseInline(t.content.slice(3), t.start + 3)
    ])), !0;
  }
}
const A5 = {
  defineNodes: [
    { name: "Task", block: !0, style: g.list },
    { name: "TaskMarker", style: g.atom }
  ],
  parseBlock: [{
    name: "TaskList",
    leaf(n, e) {
      return /^\[[ xX]\][ \t]/.test(e.content) && n.parentType().name == "ListItem" ? new E5() : null;
    },
    after: "SetextHeading"
  }]
}, Dp = /(www\.)|(https?:\/\/)|([\w.+-]{1,100}@)|(mailto:|xmpp:)/gy, Ip = /[\w-]+(\.[\w-]+)+(\/[^\s<]*)?/gy, _5 = /[\w-]+\.[\w-]+($|\/)/, jp = /[\w.+-]+@[\w-]+(\.[\w.-]+)+/gy, Up = /\/[a-zA-Z\d@.]+/gy;
function Yp(n, e, t, i) {
  let r = 0;
  for (let s = e; s < t; s++)
    n[s] == i && r++;
  return r;
}
function X5(n, e) {
  Ip.lastIndex = e;
  let t = Ip.exec(n);
  if (!t || _5.exec(t[0])[0].indexOf("_") > -1)
    return -1;
  let i = e + t[0].length;
  for (; ; ) {
    let r = n[i - 1], s;
    if (/[?!.,:*_~]/.test(r) || r == ")" && Yp(n, e, i, ")") > Yp(n, e, i, "("))
      i--;
    else if (r == ";" && (s = /&(?:#\d+|#x[a-f\d]+|\w+);$/.exec(n.slice(e, i))))
      i = e + s.index;
    else
      break;
  }
  return i;
}
function Np(n, e) {
  jp.lastIndex = e;
  let t = jp.exec(n);
  if (!t)
    return -1;
  let i = t[0][t[0].length - 1];
  return i == "_" || i == "-" ? -1 : e + t[0].length - (i == "." ? 1 : 0);
}
const q5 = {
  parseInline: [{
    name: "Autolink",
    parse(n, e, t) {
      let i = t - n.offset;
      if (i && /\w/.test(n.text[i - 1]))
        return -1;
      Dp.lastIndex = i;
      let r = Dp.exec(n.text), s = -1;
      if (!r)
        return -1;
      if (r[1] || r[2]) {
        if (s = X5(n.text, i + r[0].length), s > -1 && n.hasOpenLink) {
          let o = /([^\[\]]|\[[^\]]*\])*/.exec(n.text.slice(i, s));
          s = i + o[0].length;
        }
      } else r[3] ? s = Np(n.text, i) : (s = Np(n.text, i + r[0].length), s > -1 && r[0] == "xmpp:" && (Up.lastIndex = s, r = Up.exec(n.text), r && (s = r.index + r[0].length)));
      return s < 0 ? -1 : (n.addElement(n.elt("URL", t, s + n.offset)), s + n.offset);
    }
  }]
}, Z5 = [R5, A5, C5, q5];
function Db(n, e, t) {
  return (i, r, s) => {
    if (r != n || i.char(s + 1) == n)
      return -1;
    let o = [i.elt(t, s, s + 1)];
    for (let l = s + 1; l < i.end; l++) {
      let a = i.char(l);
      if (a == n)
        return i.addElement(i.elt(e, s, l + 1, o.concat(i.elt(t, l, l + 1))));
      if (a == 92 && o.push(i.elt("Escape", l, l++ + 2)), At(a))
        break;
    }
    return -1;
  };
}
const M5 = {
  defineNodes: [
    { name: "Superscript", style: g.special(g.content) },
    { name: "SuperscriptMark", style: g.processingInstruction }
  ],
  parseInline: [{
    name: "Superscript",
    parse: Db(94, "Superscript", "SuperscriptMark")
  }]
}, L5 = {
  defineNodes: [
    { name: "Subscript", style: g.special(g.content) },
    { name: "SubscriptMark", style: g.processingInstruction }
  ],
  parseInline: [{
    name: "Subscript",
    parse: Db(126, "Subscript", "SubscriptMark")
  }]
}, V5 = {
  defineNodes: [{ name: "Emoji", style: g.character }],
  parseInline: [{
    name: "Emoji",
    parse(n, e, t) {
      let i;
      return e != 58 || !(i = /^[a-zA-Z_0-9]+:/.exec(n.slice(t + 1, n.end))) ? -1 : n.addElement(n.elt("Emoji", t, t + 1 + i[0].length));
    }
  }]
}, B5 = 54, W5 = 1, z5 = 55, D5 = 2, I5 = 56, j5 = 3, Gp = 4, U5 = 5, Bl = 6, Ib = 7, jb = 8, Ub = 9, Yb = 10, Y5 = 11, N5 = 12, G5 = 13, dc = 57, F5 = 14, Fp = 58, Nb = 20, H5 = 22, Gb = 23, K5 = 24, lf = 26, Fb = 27, J5 = 28, e_ = 31, t_ = 34, n_ = 36, i_ = 37, r_ = 0, s_ = 1, o_ = {
  area: !0,
  base: !0,
  br: !0,
  col: !0,
  command: !0,
  embed: !0,
  frame: !0,
  hr: !0,
  img: !0,
  input: !0,
  keygen: !0,
  link: !0,
  meta: !0,
  param: !0,
  source: !0,
  track: !0,
  wbr: !0,
  menuitem: !0
}, l_ = {
  dd: !0,
  li: !0,
  optgroup: !0,
  option: !0,
  p: !0,
  rp: !0,
  rt: !0,
  tbody: !0,
  td: !0,
  tfoot: !0,
  th: !0,
  tr: !0
}, Hp = {
  dd: { dd: !0, dt: !0 },
  dt: { dd: !0, dt: !0 },
  li: { li: !0 },
  option: { option: !0, optgroup: !0 },
  optgroup: { optgroup: !0 },
  p: {
    address: !0,
    article: !0,
    aside: !0,
    blockquote: !0,
    dir: !0,
    div: !0,
    dl: !0,
    fieldset: !0,
    footer: !0,
    form: !0,
    h1: !0,
    h2: !0,
    h3: !0,
    h4: !0,
    h5: !0,
    h6: !0,
    header: !0,
    hgroup: !0,
    hr: !0,
    menu: !0,
    nav: !0,
    ol: !0,
    p: !0,
    pre: !0,
    section: !0,
    table: !0,
    ul: !0
  },
  rp: { rp: !0, rt: !0 },
  rt: { rp: !0, rt: !0 },
  tbody: { tbody: !0, tfoot: !0 },
  td: { td: !0, th: !0 },
  tfoot: { tbody: !0 },
  th: { td: !0, th: !0 },
  thead: { tbody: !0, tfoot: !0 },
  tr: { tr: !0 }
};
function a_(n) {
  return n == 45 || n == 46 || n == 58 || n >= 65 && n <= 90 || n == 95 || n >= 97 && n <= 122 || n >= 161;
}
function Hb(n) {
  return n == 9 || n == 10 || n == 13 || n == 32;
}
let Kp = null, Jp = null, em = 0;
function af(n, e) {
  let t = n.pos + e;
  if (em == t && Jp == n) return Kp;
  let i = n.peek(e);
  for (; Hb(i); ) i = n.peek(++e);
  let r = "";
  for (; a_(i); )
    r += String.fromCharCode(i), i = n.peek(++e);
  return Jp = n, em = t, Kp = r ? r.toLowerCase() : i == c_ || i == h_ ? void 0 : null;
}
const Kb = 60, Wl = 62, Zu = 47, c_ = 63, h_ = 33, f_ = 45;
function tm(n, e) {
  this.name = n, this.parent = e;
}
const u_ = [Bl, Yb, Ib, jb, Ub], d_ = new Ns({
  start: null,
  shift(n, e, t, i) {
    return u_.indexOf(e) > -1 ? new tm(af(i, 1) || "", n) : n;
  },
  reduce(n, e) {
    return e == Nb && n ? n.parent : n;
  },
  reuse(n, e, t, i) {
    let r = e.type.id;
    return r == Bl || r == n_ ? new tm(af(i, 1) || "", n) : n;
  },
  strict: !1
}), O_ = new Ee((n, e) => {
  if (n.next != Kb) {
    n.next < 0 && e.context && n.acceptToken(dc);
    return;
  }
  n.advance();
  let t = n.next == Zu;
  t && n.advance();
  let i = af(n, 0);
  if (i === void 0) return;
  if (!i) return n.acceptToken(t ? F5 : Bl);
  let r = e.context ? e.context.name : null;
  if (t) {
    if (i == r) return n.acceptToken(Y5);
    if (r && l_[r]) return n.acceptToken(dc, -2);
    if (e.dialectEnabled(r_)) return n.acceptToken(N5);
    for (let s = e.context; s; s = s.parent) if (s.name == i) return;
    n.acceptToken(G5);
  } else {
    if (i == "script") return n.acceptToken(Ib);
    if (i == "style") return n.acceptToken(jb);
    if (i == "textarea") return n.acceptToken(Ub);
    if (o_.hasOwnProperty(i)) return n.acceptToken(Yb);
    r && Hp[r] && Hp[r][i] ? n.acceptToken(dc, -1) : n.acceptToken(Bl);
  }
}, { contextual: !0 }), p_ = new Ee((n) => {
  for (let e = 0, t = 0; ; t++) {
    if (n.next < 0) {
      t && n.acceptToken(Fp);
      break;
    }
    if (n.next == f_)
      e++;
    else if (n.next == Wl && e >= 2) {
      t >= 3 && n.acceptToken(Fp, -2);
      break;
    } else
      e = 0;
    n.advance();
  }
});
function m_(n) {
  for (; n; n = n.parent)
    if (n.name == "svg" || n.name == "math") return !0;
  return !1;
}
const g_ = new Ee((n, e) => {
  if (n.next == Zu && n.peek(1) == Wl) {
    let t = e.dialectEnabled(s_) || m_(e.context);
    n.acceptToken(t ? U5 : Gp, 2);
  } else n.next == Wl && n.acceptToken(Gp, 1);
});
function Mu(n, e, t) {
  let i = 2 + n.length;
  return new Ee((r) => {
    for (let s = 0, o = 0, l = 0; ; l++) {
      if (r.next < 0) {
        l && r.acceptToken(e);
        break;
      }
      if (s == 0 && r.next == Kb || s == 1 && r.next == Zu || s >= 2 && s < i && r.next == n.charCodeAt(s - 2))
        s++, o++;
      else if ((s == 2 || s == i) && Hb(r.next))
        o++;
      else if (s == i && r.next == Wl) {
        l > o ? r.acceptToken(e, -o) : r.acceptToken(t, -(o - 2));
        break;
      } else if ((r.next == 10 || r.next == 13) && l) {
        r.acceptToken(e, 1);
        break;
      } else
        s = o = 0;
      r.advance();
    }
  });
}
const y_ = Mu("script", B5, W5), S_ = Mu("style", z5, D5), b_ = Mu("textarea", I5, j5), Q_ = Nt({
  "Text RawText": g.content,
  "StartTag StartCloseTag SelfClosingEndTag EndTag": g.angleBracket,
  TagName: g.tagName,
  "MismatchedCloseTag/TagName": [g.tagName, g.invalid],
  AttributeName: g.attributeName,
  "AttributeValue UnquotedAttributeValue": g.attributeValue,
  Is: g.definitionOperator,
  "EntityReference CharacterReference": g.character,
  Comment: g.blockComment,
  ProcessingInst: g.processingInstruction,
  DoctypeDecl: g.documentMeta
}), x_ = jt.deserialize({
  version: 14,
  states: ",xOVO!rOOO!WQ#tO'#CqO!]Q#tO'#CzO!bQ#tO'#C}O!gQ#tO'#DQO!lQ#tO'#DSO!qOaO'#CpO!|ObO'#CpO#XOdO'#CpO$eO!rO'#CpOOO`'#Cp'#CpO$lO$fO'#DTO$tQ#tO'#DVO$yQ#tO'#DWOOO`'#Dk'#DkOOO`'#DY'#DYQVO!rOOO%OQ&rO,59]O%ZQ&rO,59fO%fQ&rO,59iO%qQ&rO,59lO%|Q&rO,59nOOOa'#D^'#D^O&XOaO'#CxO&dOaO,59[OOOb'#D_'#D_O&lObO'#C{O&wObO,59[OOOd'#D`'#D`O'POdO'#DOO'[OdO,59[OOO`'#Da'#DaO'dO!rO,59[O'kQ#tO'#DROOO`,59[,59[OOOp'#Db'#DbO'pO$fO,59oOOO`,59o,59oO'xQ#|O,59qO'}Q#|O,59rOOO`-E7W-E7WO(SQ&rO'#CsOOQW'#DZ'#DZO(bQ&rO1G.wOOOa1G.w1G.wOOO`1G/Y1G/YO(mQ&rO1G/QOOOb1G/Q1G/QO(xQ&rO1G/TOOOd1G/T1G/TO)TQ&rO1G/WOOO`1G/W1G/WO)`Q&rO1G/YOOOa-E7[-E7[O)kQ#tO'#CyOOO`1G.v1G.vOOOb-E7]-E7]O)pQ#tO'#C|OOOd-E7^-E7^O)uQ#tO'#DPOOO`-E7_-E7_O)zQ#|O,59mOOOp-E7`-E7`OOO`1G/Z1G/ZOOO`1G/]1G/]OOO`1G/^1G/^O*PQ,UO,59_OOQW-E7X-E7XOOOa7+$c7+$cOOO`7+$t7+$tOOOb7+$l7+$lOOOd7+$o7+$oOOO`7+$r7+$rO*[Q#|O,59eO*aQ#|O,59hO*fQ#|O,59kOOO`1G/X1G/XO*kO7[O'#CvO*|OMhO'#CvOOQW1G.y1G.yOOO`1G/P1G/POOO`1G/S1G/SOOO`1G/V1G/VOOOO'#D['#D[O+_O7[O,59bOOQW,59b,59bOOOO'#D]'#D]O+pOMhO,59bOOOO-E7Y-E7YOOQW1G.|1G.|OOOO-E7Z-E7Z",
  stateData: ",]~O!^OS~OUSOVPOWQOXROYTO[]O][O^^O`^Oa^Ob^Oc^Ox^O{_O!dZO~OfaO~OfbO~OfcO~OfdO~OfeO~O!WfOPlP!ZlP~O!XiOQoP!ZoP~O!YlORrP!ZrP~OUSOVPOWQOXROYTOZqO[]O][O^^O`^Oa^Ob^Oc^Ox^O!dZO~O!ZrO~P#dO![sO!euO~OfvO~OfwO~OS|OT}OhyO~OS!POT}OhyO~OS!ROT}OhyO~OS!TOT}OhyO~OS}OT}OhyO~O!WfOPlX!ZlX~OP!WO!Z!XO~O!XiOQoX!ZoX~OQ!ZO!Z!XO~O!YlORrX!ZrX~OR!]O!Z!XO~O!Z!XO~P#dOf!_O~O![sO!e!aO~OS!bO~OS!cO~Oi!dOSgXTgXhgX~OS!fOT!gOhyO~OS!hOT!gOhyO~OS!iOT!gOhyO~OS!jOT!gOhyO~OS!gOT!gOhyO~Of!kO~Of!lO~Of!mO~OS!nO~Ok!qO!`!oO!b!pO~OS!rO~OS!sO~OS!tO~Oa!uOb!uOc!uO!`!wO!a!uO~Oa!xOb!xOc!xO!b!wO!c!xO~Oa!uOb!uOc!uO!`!{O!a!uO~Oa!xOb!xOc!xO!b!{O!c!xO~OT~bac!dx{!d~",
  goto: "%p!`PPPPPPPPPPPPPPPPPPPP!a!gP!mPP!yP!|#P#S#Y#]#`#f#i#l#r#x!aP!a!aP$O$U$l$r$x%O%U%[%bPPPPPPPP%hX^OX`pXUOX`pezabcde{!O!Q!S!UR!q!dRhUR!XhXVOX`pRkVR!XkXWOX`pRnWR!XnXXOX`pQrXR!XpXYOX`pQ`ORx`Q{aQ!ObQ!QcQ!SdQ!UeZ!e{!O!Q!S!UQ!v!oR!z!vQ!y!pR!|!yQgUR!VgQjVR!YjQmWR![mQpXR!^pQtZR!`tS_O`ToXp",
  nodeNames: "⚠ StartCloseTag StartCloseTag StartCloseTag EndTag SelfClosingEndTag StartTag StartTag StartTag StartTag StartTag StartCloseTag StartCloseTag StartCloseTag IncompleteCloseTag Document Text EntityReference CharacterReference InvalidEntity Element OpenTag TagName Attribute AttributeName Is AttributeValue UnquotedAttributeValue ScriptText CloseTag OpenTag StyleText CloseTag OpenTag TextareaText CloseTag OpenTag CloseTag SelfClosingTag Comment ProcessingInst MismatchedCloseTag CloseTag DoctypeDecl",
  maxTerm: 67,
  context: d_,
  nodeProps: [
    ["closedBy", -10, 1, 2, 3, 7, 8, 9, 10, 11, 12, 13, "EndTag", 6, "EndTag SelfClosingEndTag", -4, 21, 30, 33, 36, "CloseTag"],
    ["openedBy", 4, "StartTag StartCloseTag", 5, "StartTag", -4, 29, 32, 35, 37, "OpenTag"],
    ["group", -9, 14, 17, 18, 19, 20, 39, 40, 41, 42, "Entity", 16, "Entity TextContent", -3, 28, 31, 34, "TextContent Entity"],
    ["isolate", -11, 21, 29, 30, 32, 33, 35, 36, 37, 38, 41, 42, "ltr", -3, 26, 27, 39, ""]
  ],
  propSources: [Q_],
  skippedNodes: [0],
  repeatNodeCount: 9,
  tokenData: "!<p!aR!YOX$qXY,QYZ,QZ[$q[]&X]^,Q^p$qpq,Qqr-_rs3_sv-_vw3}wxHYx}-_}!OH{!O!P-_!P!Q$q!Q![-_![!]Mz!]!^-_!^!_!$S!_!`!;x!`!a&X!a!c-_!c!}Mz!}#R-_#R#SMz#S#T1k#T#oMz#o#s-_#s$f$q$f%W-_%W%oMz%o%p-_%p&aMz&a&b-_&b1pMz1p4U-_4U4dMz4d4e-_4e$ISMz$IS$I`-_$I`$IbMz$Ib$Kh-_$Kh%#tMz%#t&/x-_&/x&EtMz&Et&FV-_&FV;'SMz;'S;:j!#|;:j;=`3X<%l?&r-_?&r?AhMz?Ah?BY$q?BY?MnMz?MnO$q!Z$|c`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr$qrs&}sv$qvw+Pwx(tx!^$q!^!_*V!_!a&X!a#S$q#S#T&X#T;'S$q;'S;=`+z<%lO$q!R&bX`P!a`!cpOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&Xq'UV`P!cpOv&}wx'kx!^&}!^!_(V!_;'S&};'S;=`(n<%lO&}P'pT`POv'kw!^'k!_;'S'k;'S;=`(P<%lO'kP(SP;=`<%l'kp([S!cpOv(Vx;'S(V;'S;=`(h<%lO(Vp(kP;=`<%l(Vq(qP;=`<%l&}a({W`P!a`Or(trs'ksv(tw!^(t!^!_)e!_;'S(t;'S;=`*P<%lO(t`)jT!a`Or)esv)ew;'S)e;'S;=`)y<%lO)e`)|P;=`<%l)ea*SP;=`<%l(t!Q*^V!a`!cpOr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!Q*vP;=`<%l*V!R*|P;=`<%l&XW+UYkWOX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+PW+wP;=`<%l+P!Z+}P;=`<%l$q!a,]``P!a`!cp!^^OX&XXY,QYZ,QZ]&X]^,Q^p&Xpq,Qqr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X!_-ljhS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx!P-_!P!Q$q!Q!^-_!^!_*V!_!a&X!a#S-_#S#T1k#T#s-_#s$f$q$f;'S-_;'S;=`3X<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q[/ebhSkWOX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!a#S/^#S#T0m#T#s/^#s$f+P$f;'S/^;'S;=`1e<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+PS0rXhSqr0msw0mx!P0m!Q!^0m!a#s0m$f;'S0m;'S;=`1_<%l?Ah0m?BY?Mn0mS1bP;=`<%l0m[1hP;=`<%l/^!V1vchS`P!a`!cpOq&Xqr1krs&}sv1kvw0mwx(tx!P1k!P!Q&X!Q!^1k!^!_*V!_!a&X!a#s1k#s$f&X$f;'S1k;'S;=`3R<%l?Ah1k?Ah?BY&X?BY?Mn1k?MnO&X!V3UP;=`<%l1k!_3[P;=`<%l-_!Z3hV!`h`P!cpOv&}wx'kx!^&}!^!_(V!_;'S&};'S;=`(n<%lO&}!_4WihSkWc!ROX5uXZ7SZ[5u[^7S^p5uqr8trs7Sst>]tw8twx7Sx!P8t!P!Q5u!Q!]8t!]!^/^!^!a7S!a#S8t#S#T;{#T#s8t#s$f5u$f;'S8t;'S;=`>V<%l?Ah8t?Ah?BY5u?BY?Mn8t?MnO5u!Z5zbkWOX5uXZ7SZ[5u[^7S^p5uqr5urs7Sst+Ptw5uwx7Sx!]5u!]!^7w!^!a7S!a#S5u#S#T7S#T;'S5u;'S;=`8n<%lO5u!R7VVOp7Sqs7St!]7S!]!^7l!^;'S7S;'S;=`7q<%lO7S!R7qOa!R!R7tP;=`<%l7S!Z8OYkWa!ROX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+P!Z8qP;=`<%l5u!_8{ihSkWOX5uXZ7SZ[5u[^7S^p5uqr8trs7Sst/^tw8twx7Sx!P8t!P!Q5u!Q!]8t!]!^:j!^!a7S!a#S8t#S#T;{#T#s8t#s$f5u$f;'S8t;'S;=`>V<%l?Ah8t?Ah?BY5u?BY?Mn8t?MnO5u!_:sbhSkWa!ROX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!a#S/^#S#T0m#T#s/^#s$f+P$f;'S/^;'S;=`1e<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+P!V<QchSOp7Sqr;{rs7Sst0mtw;{wx7Sx!P;{!P!Q7S!Q!];{!]!^=]!^!a7S!a#s;{#s$f7S$f;'S;{;'S;=`>P<%l?Ah;{?Ah?BY7S?BY?Mn;{?MnO7S!V=dXhSa!Rqr0msw0mx!P0m!Q!^0m!a#s0m$f;'S0m;'S;=`1_<%l?Ah0m?BY?Mn0m!V>SP;=`<%l;{!_>YP;=`<%l8t!_>dhhSkWOX@OXZAYZ[@O[^AY^p@OqrBwrsAYswBwwxAYx!PBw!P!Q@O!Q!]Bw!]!^/^!^!aAY!a#SBw#S#TE{#T#sBw#s$f@O$f;'SBw;'S;=`HS<%l?AhBw?Ah?BY@O?BY?MnBw?MnO@O!Z@TakWOX@OXZAYZ[@O[^AY^p@Oqr@OrsAYsw@OwxAYx!]@O!]!^Az!^!aAY!a#S@O#S#TAY#T;'S@O;'S;=`Bq<%lO@O!RA]UOpAYq!]AY!]!^Ao!^;'SAY;'S;=`At<%lOAY!RAtOb!R!RAwP;=`<%lAY!ZBRYkWb!ROX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+P!ZBtP;=`<%l@O!_COhhSkWOX@OXZAYZ[@O[^AY^p@OqrBwrsAYswBwwxAYx!PBw!P!Q@O!Q!]Bw!]!^Dj!^!aAY!a#SBw#S#TE{#T#sBw#s$f@O$f;'SBw;'S;=`HS<%l?AhBw?Ah?BY@O?BY?MnBw?MnO@O!_DsbhSkWb!ROX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!a#S/^#S#T0m#T#s/^#s$f+P$f;'S/^;'S;=`1e<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+P!VFQbhSOpAYqrE{rsAYswE{wxAYx!PE{!P!QAY!Q!]E{!]!^GY!^!aAY!a#sE{#s$fAY$f;'SE{;'S;=`G|<%l?AhE{?Ah?BYAY?BY?MnE{?MnOAY!VGaXhSb!Rqr0msw0mx!P0m!Q!^0m!a#s0m$f;'S0m;'S;=`1_<%l?Ah0m?BY?Mn0m!VHPP;=`<%lE{!_HVP;=`<%lBw!ZHcW!bx`P!a`Or(trs'ksv(tw!^(t!^!_)e!_;'S(t;'S;=`*P<%lO(t!aIYlhS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx}-_}!OKQ!O!P-_!P!Q$q!Q!^-_!^!_*V!_!a&X!a#S-_#S#T1k#T#s-_#s$f$q$f;'S-_;'S;=`3X<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q!aK_khS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx!P-_!P!Q$q!Q!^-_!^!_*V!_!`&X!`!aMS!a#S-_#S#T1k#T#s-_#s$f$q$f;'S-_;'S;=`3X<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q!TM_X`P!a`!cp!eQOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X!aNZ!ZhSfQ`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx}-_}!OMz!O!PMz!P!Q$q!Q![Mz![!]Mz!]!^-_!^!_*V!_!a&X!a!c-_!c!}Mz!}#R-_#R#SMz#S#T1k#T#oMz#o#s-_#s$f$q$f$}-_$}%OMz%O%W-_%W%oMz%o%p-_%p&aMz&a&b-_&b1pMz1p4UMz4U4dMz4d4e-_4e$ISMz$IS$I`-_$I`$IbMz$Ib$Je-_$Je$JgMz$Jg$Kh-_$Kh%#tMz%#t&/x-_&/x&EtMz&Et&FV-_&FV;'SMz;'S;:j!#|;:j;=`3X<%l?&r-_?&r?AhMz?Ah?BY$q?BY?MnMz?MnO$q!a!$PP;=`<%lMz!R!$ZY!a`!cpOq*Vqr!$yrs(Vsv*Vwx)ex!a*V!a!b!4t!b;'S*V;'S;=`*s<%lO*V!R!%Q]!a`!cpOr*Vrs(Vsv*Vwx)ex}*V}!O!%y!O!f*V!f!g!']!g#W*V#W#X!0`#X;'S*V;'S;=`*s<%lO*V!R!&QX!a`!cpOr*Vrs(Vsv*Vwx)ex}*V}!O!&m!O;'S*V;'S;=`*s<%lO*V!R!&vV!a`!cp!dPOr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!R!'dX!a`!cpOr*Vrs(Vsv*Vwx)ex!q*V!q!r!(P!r;'S*V;'S;=`*s<%lO*V!R!(WX!a`!cpOr*Vrs(Vsv*Vwx)ex!e*V!e!f!(s!f;'S*V;'S;=`*s<%lO*V!R!(zX!a`!cpOr*Vrs(Vsv*Vwx)ex!v*V!v!w!)g!w;'S*V;'S;=`*s<%lO*V!R!)nX!a`!cpOr*Vrs(Vsv*Vwx)ex!{*V!{!|!*Z!|;'S*V;'S;=`*s<%lO*V!R!*bX!a`!cpOr*Vrs(Vsv*Vwx)ex!r*V!r!s!*}!s;'S*V;'S;=`*s<%lO*V!R!+UX!a`!cpOr*Vrs(Vsv*Vwx)ex!g*V!g!h!+q!h;'S*V;'S;=`*s<%lO*V!R!+xY!a`!cpOr!+qrs!,hsv!+qvw!-Swx!.[x!`!+q!`!a!/j!a;'S!+q;'S;=`!0Y<%lO!+qq!,mV!cpOv!,hvx!-Sx!`!,h!`!a!-q!a;'S!,h;'S;=`!.U<%lO!,hP!-VTO!`!-S!`!a!-f!a;'S!-S;'S;=`!-k<%lO!-SP!-kO{PP!-nP;=`<%l!-Sq!-xS!cp{POv(Vx;'S(V;'S;=`(h<%lO(Vq!.XP;=`<%l!,ha!.aX!a`Or!.[rs!-Ssv!.[vw!-Sw!`!.[!`!a!.|!a;'S!.[;'S;=`!/d<%lO!.[a!/TT!a`{POr)esv)ew;'S)e;'S;=`)y<%lO)ea!/gP;=`<%l!.[!R!/sV!a`!cp{POr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!R!0]P;=`<%l!+q!R!0gX!a`!cpOr*Vrs(Vsv*Vwx)ex#c*V#c#d!1S#d;'S*V;'S;=`*s<%lO*V!R!1ZX!a`!cpOr*Vrs(Vsv*Vwx)ex#V*V#V#W!1v#W;'S*V;'S;=`*s<%lO*V!R!1}X!a`!cpOr*Vrs(Vsv*Vwx)ex#h*V#h#i!2j#i;'S*V;'S;=`*s<%lO*V!R!2qX!a`!cpOr*Vrs(Vsv*Vwx)ex#m*V#m#n!3^#n;'S*V;'S;=`*s<%lO*V!R!3eX!a`!cpOr*Vrs(Vsv*Vwx)ex#d*V#d#e!4Q#e;'S*V;'S;=`*s<%lO*V!R!4XX!a`!cpOr*Vrs(Vsv*Vwx)ex#X*V#X#Y!+q#Y;'S*V;'S;=`*s<%lO*V!R!4{Y!a`!cpOr!4trs!5ksv!4tvw!6Vwx!8]x!a!4t!a!b!:]!b;'S!4t;'S;=`!;r<%lO!4tq!5pV!cpOv!5kvx!6Vx!a!5k!a!b!7W!b;'S!5k;'S;=`!8V<%lO!5kP!6YTO!a!6V!a!b!6i!b;'S!6V;'S;=`!7Q<%lO!6VP!6lTO!`!6V!`!a!6{!a;'S!6V;'S;=`!7Q<%lO!6VP!7QOxPP!7TP;=`<%l!6Vq!7]V!cpOv!5kvx!6Vx!`!5k!`!a!7r!a;'S!5k;'S;=`!8V<%lO!5kq!7yS!cpxPOv(Vx;'S(V;'S;=`(h<%lO(Vq!8YP;=`<%l!5ka!8bX!a`Or!8]rs!6Vsv!8]vw!6Vw!a!8]!a!b!8}!b;'S!8];'S;=`!:V<%lO!8]a!9SX!a`Or!8]rs!6Vsv!8]vw!6Vw!`!8]!`!a!9o!a;'S!8];'S;=`!:V<%lO!8]a!9vT!a`xPOr)esv)ew;'S)e;'S;=`)y<%lO)ea!:YP;=`<%l!8]!R!:dY!a`!cpOr!4trs!5ksv!4tvw!6Vwx!8]x!`!4t!`!a!;S!a;'S!4t;'S;=`!;r<%lO!4t!R!;]V!a`!cpxPOr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!R!;uP;=`<%l!4t!V!<TXiS`P!a`!cpOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X",
  tokenizers: [y_, S_, b_, g_, O_, p_, 0, 1, 2, 3, 4, 5],
  topRules: { Document: [0, 15] },
  dialects: { noMatch: 0, selfClosing: 509 },
  tokenPrec: 511
});
function Jb(n, e) {
  let t = /* @__PURE__ */ Object.create(null);
  for (let i of n.getChildren(Gb)) {
    let r = i.getChild(K5), s = i.getChild(lf) || i.getChild(Fb);
    r && (t[e.read(r.from, r.to)] = s ? s.type.id == lf ? e.read(s.from + 1, s.to - 1) : e.read(s.from, s.to) : "");
  }
  return t;
}
function nm(n, e) {
  let t = n.getChild(H5);
  return t ? e.read(t.from, t.to) : " ";
}
function Oc(n, e, t) {
  let i;
  for (let r of t)
    if (!r.attrs || r.attrs(i || (i = Jb(n.node.parent.firstChild, e))))
      return { parser: r.parser };
  return null;
}
function e1(n = [], e = []) {
  let t = [], i = [], r = [], s = [];
  for (let l of n)
    (l.tag == "script" ? t : l.tag == "style" ? i : l.tag == "textarea" ? r : s).push(l);
  let o = e.length ? /* @__PURE__ */ Object.create(null) : null;
  for (let l of e) (o[l.name] || (o[l.name] = [])).push(l);
  return jy((l, a) => {
    let c = l.type.id;
    if (c == J5) return Oc(l, a, t);
    if (c == e_) return Oc(l, a, i);
    if (c == t_) return Oc(l, a, r);
    if (c == Nb && s.length) {
      let h = l.node, f = h.firstChild, u = f && nm(f, a), d;
      if (u) {
        for (let O of s)
          if (O.tag == u && (!O.attrs || O.attrs(d || (d = Jb(f, a))))) {
            let p = h.lastChild, m = p.type.id == i_ ? p.from : h.to;
            if (m > f.to)
              return { parser: O.parser, overlay: [{ from: f.to, to: m }] };
          }
      }
    }
    if (o && c == Gb) {
      let h = l.node, f;
      if (f = h.firstChild) {
        let u = o[a.read(f.from, f.to)];
        if (u) for (let d of u) {
          if (d.tagName && d.tagName != nm(h.parent, a)) continue;
          let O = h.lastChild;
          if (O.type.id == lf) {
            let p = O.from + 1, m = O.lastChild, y = O.to - (m && m.isError ? 0 : 1);
            if (y > p) return { parser: d.parser, overlay: [{ from: p, to: y }] };
          } else if (O.type.id == Fb)
            return { parser: d.parser, overlay: [{ from: O.from, to: O.to }] };
        }
      }
    }
    return null;
  });
}
const k_ = 107, im = 1, w_ = 108, v_ = 109, rm = 2, sm = 110, t1 = [
  9,
  10,
  11,
  12,
  13,
  32,
  133,
  160,
  5760,
  8192,
  8193,
  8194,
  8195,
  8196,
  8197,
  8198,
  8199,
  8200,
  8201,
  8202,
  8232,
  8233,
  8239,
  8287,
  12288
], P_ = 58, $_ = 40, n1 = 95, T_ = 91, Yo = 45, C_ = 46, R_ = 35, E_ = 37, A_ = 38, __ = 92, X_ = 10, q_ = 42;
function vs(n) {
  return n >= 65 && n <= 90 || n >= 97 && n <= 122 || n >= 161;
}
function i1(n) {
  return n >= 48 && n <= 57;
}
const Z_ = new Ee((n, e) => {
  for (let t = !1, i = 0, r = 0; ; r++) {
    let { next: s } = n;
    if (vs(s) || s == Yo || s == n1 || t && i1(s))
      !t && (s != Yo || r > 0) && (t = !0), i === r && s == Yo && i++, n.advance();
    else if (s == __ && n.peek(1) != X_)
      n.advance(), n.next > -1 && n.advance(), t = !0;
    else {
      t && n.acceptToken(
        i == 2 && e.canShift(rm) ? rm : e.canShift(sm) ? sm : s == $_ ? w_ : v_
      );
      break;
    }
  }
}), M_ = new Ee((n) => {
  if (t1.includes(n.peek(-1))) {
    let { next: e } = n;
    (vs(e) || e == n1 || e == R_ || e == C_ || e == q_ || e == T_ || e == P_ && vs(n.peek(1)) || e == Yo || e == A_) && n.acceptToken(k_);
  }
}), L_ = new Ee((n) => {
  if (!t1.includes(n.peek(-1))) {
    let { next: e } = n;
    if (e == E_ && (n.advance(), n.acceptToken(im)), vs(e)) {
      do
        n.advance();
      while (vs(n.next) || i1(n.next));
      n.acceptToken(im);
    }
  }
}), V_ = Nt({
  "AtKeyword import charset namespace keyframes media supports": g.definitionKeyword,
  "from to selector": g.keyword,
  NamespaceName: g.namespace,
  KeyframeName: g.labelName,
  KeyframeRangeName: g.operatorKeyword,
  TagName: g.tagName,
  ClassName: g.className,
  PseudoClassName: g.constant(g.className),
  IdName: g.labelName,
  "FeatureName PropertyName": g.propertyName,
  AttributeName: g.attributeName,
  NumberLiteral: g.number,
  KeywordQuery: g.keyword,
  UnaryQueryOp: g.operatorKeyword,
  "CallTag ValueName": g.atom,
  VariableName: g.variableName,
  Callee: g.operatorKeyword,
  Unit: g.unit,
  "UniversalSelector NestingSelector": g.definitionOperator,
  "MatchOp CompareOp": g.compareOperator,
  "ChildOp SiblingOp, LogicOp": g.logicOperator,
  BinOp: g.arithmeticOperator,
  Important: g.modifier,
  Comment: g.blockComment,
  ColorLiteral: g.color,
  "ParenthesizedContent StringLiteral": g.string,
  ":": g.punctuation,
  "PseudoOp #": g.derefOperator,
  "; ,": g.separator,
  "( )": g.paren,
  "[ ]": g.squareBracket,
  "{ }": g.brace
}), B_ = { __proto__: null, lang: 34, "nth-child": 34, "nth-last-child": 34, "nth-of-type": 34, "nth-last-of-type": 34, dir: 34, "host-context": 34, url: 62, "url-prefix": 62, domain: 62, regexp: 62 }, W_ = { __proto__: null, "@import": 120, "@media": 154, "@charset": 158, "@namespace": 162, "@keyframes": 168, "@supports": 180 }, z_ = { __proto__: null, layer: 124, not: 144, only: 144, selector: 150 }, D_ = jt.deserialize({
  version: 14,
  states: ">`QYQ[OOO#kQ[OOP#rOWOOOOQP'#Cd'#CdOOQP'#Cc'#CcO#wQ[O'#CfO$hQXO'#CaO$rQ[O'#CiO$}Q[O'#DUO%SQ[O'#DXO%XQ[O'#D[O%XQ[O'#D_OOQP'#Ev'#EvO%yQdO'#DhO&hQ[O'#DzO%yQdO'#D|O&yQ[O'#EOO'UQ[O'#ERO'^Q[O'#EXO'lQ[O'#EZOOQS'#Eu'#EuOOQS'#E^'#E^QYQ[OOO'sQXO'#CdO(hQWO'#DdO(mQWO'#E{O(xQ[O'#E{QOQWOOP)SO#tO'#C_POOO)C@e)C@eOOQP'#Ch'#ChOOQP,59Q,59QO#wQ[O,59QO)_Q[O,59TO$}Q[O,59pO%SQ[O,59sO%XQ[O,59vO%XQ[O,59xO%XQ[O,59yO%XQ[O'#EcO)jQWO,58{O)rQ[O'#DcOOQS,58{,58{OOQP'#Cl'#ClOOQO'#DS'#DSOOQP,59T,59TO)yQWO,59TO*OQWO,59TOOQP'#DW'#DWOOQP,59p,59pOOQO'#DY'#DYO*TQ`O,59sO*nQXO,59vO+UQXO,59yOOQS'#Cq'#CqO%yQdO'#CrO+lQvO'#CtO-hQtO,5:SOOQO'#Cy'#CyO*OQWO'#CxO-rQWO'#CzO-wQ[O'#DPOOQS'#Ex'#ExOOQO'#Dn'#DnO.eQdO'#DwO.uQWO'#E|O'^Q[O'#DuO/TQWO'#DxOOQO'#E}'#E}O)mQWO,5:fO/YQpO,5:hOOQS'#EQ'#EQO/bQWO,5:jO/gQ[O,5:jOOQO'#ET'#ETO/oQWO,5:mO/tQWO,5:sO/|QWO,5:uOOQS-E8[-E8[O0UQdO,5:OO0fQ[O'#EeO0sQWO,5;gO0sQWO,5;gPOOO'#E]'#E]P1OO#tO,58yPOOO,58y,58yOOQP1G.l1G.lOOQP1G.o1G.oO)yQWO1G.oO*OQWO1G.oOOQP1G/[1G/[O1ZQ`O1G/_O1cQXO1G/bO1yQXO1G/dO2aQXO1G/eO2wQXO,5:}OOQO-E8a-E8aOOQS1G.g1G.gO3RQWO,59}O3WQ[O'#DTO3_QdO'#CpOOQP1G/_1G/_O%yQdO1G/_O3fQpO,59^OOQS,59`,59`O%yQdO,59bO3nQ[O'#DkO4PQWO1G/nO-VQ[O1G/nOOQS,59d,59dO4UQ!bO,59fOOQS'#DQ'#DQOOQS'#E`'#E`O4aQ[O,59kOOQS,59k,59kO4iQpO'#DnO4wQpO,5:ZO5PQWO,5:cOOQO'#FO'#FOO4zQpO,5:_O'^Q[O,5:]O5XQ[O'#EgO5pQWO,5;hO5{QWO,5:aO%XQ[O,5:dOOQS1G0Q1G0QOOQS1G0S1G0SOOQS1G0U1G0UO6^QWO1G0UO6cQdO'#EUOOQS1G0X1G0XOOQS1G0_1G0_OOQS1G0a1G0aO6nQtO1G/jOOQO1G/j1G/jOOQO,5;P,5;PO7UQ[O,5;POOQO-E8c-E8cO7cQWO1G1RPOOO-E8Z-E8ZPOOO1G.e1G.eOOQP7+$Z7+$ZOOQP7+$y7+$yO%yQdO7+$yOOQS1G/i1G/iO7nQXO'#EzO7xQWO,59oO7}QtO'#E_O8uQdO'#EwO9PQWO,59[O9UQpO7+$yOOQS1G.x1G.xOOQS1G.|1G.|O9^Q[O,5:VOOQS7+%Y7+%YO9cQWO7+%YOOQS1G/Q1G/QO9hQWO1G/QOOQS-E8^-E8^OOQS1G/V1G/VO%yQdO1G/uO9mQdO1G/yOOQO1G/}1G/}OOQO1G/w1G/wO9tQWO,5;ROOQO-E8e-E8eO:SQXO1G0OOOQS7+%p7+%pO:ZQYO'#CtOOQO'#EW'#EWO:iQ`O'#EVOOQO'#EV'#EVO:tQWO'#EhO:|QdO,5:pOOQS,5:p,5:pO;XQtO'#EdO%yQdO'#EdO<YQdO7+%UOOQO7+%U7+%UOOQO1G0k1G0kO<mQpO<<HeO<uQ[O'#EbO=PQWO,5;fOOQP1G/Z1G/ZOOQS-E8]-E8]O=XQdO'#EaO=cQWO,5;cOOQT1G.v1G.vOOQP<<He<<HeOOQO'#Dm'#DmO=kQWO1G/qOOQS<<Ht<<HtOOQS7+$l7+$lO=sQdO7+%aOOQO'#Dp'#DpO=zQpO7+%eOOQO7+%j7+%jOOQO,5:q,5:qO6fQdO'#EiO:tQWO,5;SOOQS,5;S,5;SOOQS-E8f-E8fOOQS1G0[1G0[O>SQtO,5;OOOQS-E8b-E8bOOQO<<Hp<<HpOOQPAN>PAN>PO?TQXO,5:|OOQO-E8`-E8`O?_QdO,5:{OOQO-E8_-E8_O9^Q[O'#EfO?iQWO7+%]OOQS7+%]7+%]OOQO<<H{<<H{OOQO<<IP<<IPO?qQdO<<IPOOQO,5;T,5;TOOQO-E8g-E8gOOQS1G0n1G0nOOQO,5;Q,5;QOOQO-E8d-E8dOOQS<<Hw<<HwO@YQWOAN>kOOQOG24VG24V",
  stateData: "@g~O#dOS#eQQ~OU[OX[OZTO^VO_VOrXOyWO!PYO!SZO!]cO!^]O!o^O!q_O!s`O!vaO!|bO#aRO~OQhOU[OX[OZTO^VO_VOrXOyWO!PYO!SZO!]cO!^]O!o^O!q_O!s`O!vaO!|bO#agO~O#^#oP~P!aO#elO~O#anO~OZpO^qO_qOrsOyrO!PtO!SvO#_uO~OuwO!UyO~P#|Oa!PO#`|O#a{O~O#a!QO~O#a!SO~OU[OX[OZTO^VO_VOrXOyWO!PYO!SZO#aRO~OQ!`Oc!XOg!`Oi!`Oo!^Or!_O#`![O#a!WO#m!YO~Oc!bO!j!dO!m!eO#b!aO!U#pP~Oi!jOo!^O#a!iO~Oi!lO#a!lO~Oc!bO!j!dO!m!eO#b!aO~O!Z#pP~P&hOZWX^WX^!XX_WXrWXuWXyWX!PWX!SWX!UWX#_WX~O^!qO~O!Z!rO#^#oX!T#oX~O#^#oX!T#oX~P!aO#f!uO#g!uO#h!wO~Oa!{O#`|O#a{O~OuwO!UyO~O!T#oP~P!aOc#VO~Oc#WO~Oq#XO}#YO~OZpO^qO_qOrsOyrO~Ou!Oa!P!Oa!S!Oa!U!Oa#_!Oab!Oa~P*]Ou!Ra!P!Ra!S!Ra!U!Ra#_!Rab!Ra~P*]OP#[OchXkhX!ZhX!`hX!jhX!mhX#bhXbhX!hhXQhXghXihXohXrhXuhX!YhX#^hX#`hX#ahX#mhXqhX!ThX~Oc!bO!j!dO!m!eO#b!aO!Z#pP~Ok#]O!`#^O~P-VOc#bO~Oq#fO#a#cO~OQ#jOg#jOi#jOo!^O#`![O#m!YO~Oc!bO!j!dO!m!eO#b#gO~P.POu#mO!f#lO!U#pX!Z#pX~Oc#pO~Ok#]O!Z#rO~O!Z#sO~Oi#tOo!^O~O!U#uO~O!UyO!f#lO~O!UyO!Z#xO~O!Y#zO!Z!Wa#^!Wa!T!Wa~P%yO!Z#XX#^#XX!T#XX~P!aO!Z!rO#^#oa!T#oa~O#f!uO#g!uO#h$QO~Oq$SO}$TO~Ou!Oi!P!Oi!S!Oi!U!Oi#_!Oib!Oi~P*]Ou!Qi!P!Qi!S!Qi!U!Qi#_!Qib!Qi~P*]Ou!Ri!P!Ri!S!Ri!U!Ri#_!Rib!Ri~P*]Ou#Va!U#Va~P#|O!T$UO~Ob#nP~P%XOb#kP~P%yOb$]Ok#]O~Oc$_O!Z!_X!j!_X!m!_X#b!_X~O!Z$`O~Ob$bOi$cOp$cO~Oq$eO#a#cO~O^!dXb!bX!f!bX!h!dX~O^$fO!h$gO~Ob$hO!f#lO~Oc!bO!j!dO!m!eO#b!aOu#ZX!U#ZX!Z#ZX~Ou#mO!U#pa!Z#pa~O!f#lOu!ia!U!ia!Z!iab!ia~O!Z$mO~O!T$tO#a$oO#m$nO~Ok#]Ou$vO!Y$xO!Z!Wi#^!Wi!T!Wi~P%yO!Z#Xa#^#Xa!T#Xa~P!aO!Z!rO#^#oi!T#oi~Ou${Ob#nX~P#|Ob$}O~Ok#]OQ#RXb#RXc#RXg#RXi#RXo#RXr#RXu#RX#`#RX#a#RX#m#RX~Ou%POb#kX~P%yOb%RO~Ok#]Oq%SO~O#a%TO~O!Z%VO~Ob%WO~O#b%YO~P.PO!f#lOu#Za!U#Za!Z#Za~Ob%[O~P#|OP#[OuhX!UhXbhX~O#m$nOu!yX!U!yX~Ou%^O!UyO~O!T%bO#a$oO#m$nO~Ok#]OQ#WXc#WXg#WXi#WXo#WXr#WXu#WX!Y#WX!Z#WX#^#WX#`#WX#a#WX#m#WX!T#WX~Ou$vO!Y%eO!Z!Wq#^!Wq!T!Wq~P%yOk#]Oq%fO~Ob#UXu#UX~P%XOu${Ob#na~Ob#TXu#TX~P%yOu%POb#ka~OZ%kOb%mO~Ob%nO~P%yOb%oO!h%pO~Ok#]OQ#Wac#Wag#Wai#Wao#War#Wau#Wa!Y#Wa!Z#Wa#^#Wa#`#Wa#a#Wa#m#Wa!T#Wa~Ob#Uau#Ua~P#|Ob#Tau#Ta~P%yOZ%kOb%vO~OQ#jOg#jOi#jOo!^O#`![O#b%YO#m$nO~Ob%xO~O#dp#e#mk!S#m~",
  goto: "/l#sPPP#tP#wP$Q$dP$QP$v$QPP$|PPP%S%]%]P%oP%]P&`&w'^PPPP%]'{P(P(V$QP(]$Q(cP$QP$Q$QPPP(i)O)]PP#wPP)dP)g)m)m)x)mP)mP)mP)m)mP#wP#wP#wP*R#wP*U*X*[*c#wP#wP*h*n*}+]+c+i+o+u+{,V,],c,iPPPPPPPPPPP,o,x-n-qP.g.j.p.|/cRmQ_dOPfjy!r#|q[OPYZfjtuvwy!r#V#p#|${qSOPYZfjtuvwy!r#V#p#|${QoTR!xpQ}VR!yqQ!y!PQ#a!]R$R!{q!`]_!X!q#W#Y#]#y$T$Y$f$v$w%P%X%ip!`]_!X!q#W#Y#]#y$T$Y$f$v$w%P%X%iU#j!b$g%pU$q#u$s%^R%]$pp!`]_!X!q#W#Y#]#y$T$Y$f$v$w%P%X%iV#j!b$g%pw!]]_!X!b!q#W#Y#]#y$T$Y$f$g$v$w%P%X%i%pp!`]_!X!q#W#Y#]#y$T$Y$f$v$w%P%X%iQ!j`U#j!b$g%pR#t!kT#d!_#eQ!OVR!zqQ!y!OR$R!zQ!RWR!|rQ!TXR!}sQzUQ#TxQ#q!gQ#w!nQ#x!oQ%`$rR%s%_SiPyQ!tjQ#{!rR$y#|ZhPjy!r#|R#`!ZQ%U$_R%t%kc!f^bc!Z!b!d#`#l#mQ#h!bQ%Z$gR%w%pR!k`R!maR#v!mS$r#u$sR%q%^V$p#u$s%^Q!vlR$P!vQfOSjPyU!pfj#|R#|!rQ$Y#WU%O$Y%X%iQ%X$fR%i%PQ#e!_R$d#eQ%Q$YR%j%QQ$|$VR%h$|QxUR#SxQ$w#yR%d$wQ!siS#}!s$OR$O!tQ%l%UR%u%lQ#n!cR$k#nQ$s#uR%a$sQ%_$rR%r%__eOPfjy!r#|^UOPfjy!r#|Q!UYQ!VZQ#OtQ#PuQ#QvQ#RwQ$V#VQ$l#pR%g${R$Z#WQ!Z]Q!h_Q#Z!XQ#y!q[$X#W$Y$f%P%X%iQ$[#YQ$^#]S$u#y$wQ$z$TR%c$vR$W#VQkPR#UyQ!g^Q!ocQ#_!ZR$a#`W!c^c!Z#`Q!nbQ#i!bQ#o!dQ$i#lR$j#mQ#k!bQ%Z$gR%w%p",
  nodeNames: "⚠ Unit VariableName Comment StyleSheet RuleSet UniversalSelector TagSelector TagName NestingSelector ClassSelector . ClassName PseudoClassSelector : :: PseudoClassName PseudoClassName ) ( ArgList ValueName ParenthesizedValue ColorLiteral NumberLiteral StringLiteral BinaryExpression BinOp CallExpression Callee CallLiteral CallTag ParenthesizedContent ] [ LineNames LineName , PseudoClassName ArgList IdSelector # IdName AttributeSelector AttributeName MatchOp ChildSelector ChildOp DescendantSelector SiblingSelector SiblingOp } { Block Declaration PropertyName Important ; ImportStatement AtKeyword import Layer layer LayerName KeywordQuery FeatureQuery FeatureName BinaryQuery LogicOp ComparisonQuery CompareOp UnaryQuery UnaryQueryOp ParenthesizedQuery SelectorQuery selector MediaStatement media CharsetStatement charset NamespaceStatement namespace NamespaceName KeyframesStatement keyframes KeyframeName KeyframeList KeyframeSelector KeyframeRangeName SupportsStatement supports AtRule Styles",
  maxTerm: 126,
  nodeProps: [
    ["isolate", -2, 3, 25, ""],
    ["openedBy", 18, "(", 33, "[", 51, "{"],
    ["closedBy", 19, ")", 34, "]", 52, "}"]
  ],
  propSources: [V_],
  skippedNodes: [0, 3, 93],
  repeatNodeCount: 13,
  tokenData: "LU~R!^OX$}X^%u^p$}pq%uqr)Xrs.Rst/utu6duv$}vw7^wx7oxy9^yz9oz{9t{|:_|}?Q}!O?c!O!P@Q!P!Q@i!Q![Ab![!]B]!]!^CX!^!_Cj!_!`Df!`!aDy!a!b$}!b!cEz!c!}$}!}#OHX#O#P$}#P#QHj#Q#R6d#R#T$}#T#UH{#U#c$}#c#dJ^#d#o$}#o#pJs#p#q6d#q#rKU#r#sKg#s#y$}#y#z%u#z$f$}$f$g%u$g#BY$}#BY#BZ%u#BZ$IS$}$IS$I_%u$I_$I|$}$I|$JO%u$JO$JT$}$JT$JU%u$JU$KV$}$KV$KW%u$KW&FU$}&FU&FV%u&FV;'S$};'S;=`LO<%lO$}`%QSOy%^z;'S%^;'S;=`%o<%lO%^`%cSp`Oy%^z;'S%^;'S;=`%o<%lO%^`%rP;=`<%l%^~%zh#d~OX%^X^'f^p%^pq'fqy%^z#y%^#y#z'f#z$f%^$f$g'f$g#BY%^#BY#BZ'f#BZ$IS%^$IS$I_'f$I_$I|%^$I|$JO'f$JO$JT%^$JT$JU'f$JU$KV%^$KV$KW'f$KW&FU%^&FU&FV'f&FV;'S%^;'S;=`%o<%lO%^~'mh#d~p`OX%^X^'f^p%^pq'fqy%^z#y%^#y#z'f#z$f%^$f$g'f$g#BY%^#BY#BZ'f#BZ$IS%^$IS$I_'f$I_$I|%^$I|$JO'f$JO$JT%^$JT$JU'f$JU$KV%^$KV$KW'f$KW&FU%^&FU&FV'f&FV;'S%^;'S;=`%o<%lO%^l)[UOy%^z#]%^#]#^)n#^;'S%^;'S;=`%o<%lO%^l)sUp`Oy%^z#a%^#a#b*V#b;'S%^;'S;=`%o<%lO%^l*[Up`Oy%^z#d%^#d#e*n#e;'S%^;'S;=`%o<%lO%^l*sUp`Oy%^z#c%^#c#d+V#d;'S%^;'S;=`%o<%lO%^l+[Up`Oy%^z#f%^#f#g+n#g;'S%^;'S;=`%o<%lO%^l+sUp`Oy%^z#h%^#h#i,V#i;'S%^;'S;=`%o<%lO%^l,[Up`Oy%^z#T%^#T#U,n#U;'S%^;'S;=`%o<%lO%^l,sUp`Oy%^z#b%^#b#c-V#c;'S%^;'S;=`%o<%lO%^l-[Up`Oy%^z#h%^#h#i-n#i;'S%^;'S;=`%o<%lO%^l-uS!Y[p`Oy%^z;'S%^;'S;=`%o<%lO%^~.UWOY.RZr.Rrs.ns#O.R#O#P.s#P;'S.R;'S;=`/o<%lO.R~.sOi~~.vRO;'S.R;'S;=`/P;=`O.R~/SXOY.RZr.Rrs.ns#O.R#O#P.s#P;'S.R;'S;=`/o;=`<%l.R<%lO.R~/rP;=`<%l.Rn/zYyQOy%^z!Q%^!Q![0j![!c%^!c!i0j!i#T%^#T#Z0j#Z;'S%^;'S;=`%o<%lO%^l0oYp`Oy%^z!Q%^!Q![1_![!c%^!c!i1_!i#T%^#T#Z1_#Z;'S%^;'S;=`%o<%lO%^l1dYp`Oy%^z!Q%^!Q![2S![!c%^!c!i2S!i#T%^#T#Z2S#Z;'S%^;'S;=`%o<%lO%^l2ZYg[p`Oy%^z!Q%^!Q![2y![!c%^!c!i2y!i#T%^#T#Z2y#Z;'S%^;'S;=`%o<%lO%^l3QYg[p`Oy%^z!Q%^!Q![3p![!c%^!c!i3p!i#T%^#T#Z3p#Z;'S%^;'S;=`%o<%lO%^l3uYp`Oy%^z!Q%^!Q![4e![!c%^!c!i4e!i#T%^#T#Z4e#Z;'S%^;'S;=`%o<%lO%^l4lYg[p`Oy%^z!Q%^!Q![5[![!c%^!c!i5[!i#T%^#T#Z5[#Z;'S%^;'S;=`%o<%lO%^l5aYp`Oy%^z!Q%^!Q![6P![!c%^!c!i6P!i#T%^#T#Z6P#Z;'S%^;'S;=`%o<%lO%^l6WSg[p`Oy%^z;'S%^;'S;=`%o<%lO%^d6gUOy%^z!_%^!_!`6y!`;'S%^;'S;=`%o<%lO%^d7QS}Sp`Oy%^z;'S%^;'S;=`%o<%lO%^b7cSXQOy%^z;'S%^;'S;=`%o<%lO%^~7rWOY7oZw7owx.nx#O7o#O#P8[#P;'S7o;'S;=`9W<%lO7o~8_RO;'S7o;'S;=`8h;=`O7o~8kXOY7oZw7owx.nx#O7o#O#P8[#P;'S7o;'S;=`9W;=`<%l7o<%lO7o~9ZP;=`<%l7on9cSc^Oy%^z;'S%^;'S;=`%o<%lO%^~9tOb~n9{UUQkWOy%^z!_%^!_!`6y!`;'S%^;'S;=`%o<%lO%^n:fWkW!SQOy%^z!O%^!O!P;O!P!Q%^!Q![>T![;'S%^;'S;=`%o<%lO%^l;TUp`Oy%^z!Q%^!Q![;g![;'S%^;'S;=`%o<%lO%^l;nYp`#m[Oy%^z!Q%^!Q![;g![!g%^!g!h<^!h#X%^#X#Y<^#Y;'S%^;'S;=`%o<%lO%^l<cYp`Oy%^z{%^{|=R|}%^}!O=R!O!Q%^!Q![=j![;'S%^;'S;=`%o<%lO%^l=WUp`Oy%^z!Q%^!Q![=j![;'S%^;'S;=`%o<%lO%^l=qUp`#m[Oy%^z!Q%^!Q![=j![;'S%^;'S;=`%o<%lO%^l>[[p`#m[Oy%^z!O%^!O!P;g!P!Q%^!Q![>T![!g%^!g!h<^!h#X%^#X#Y<^#Y;'S%^;'S;=`%o<%lO%^n?VSu^Oy%^z;'S%^;'S;=`%o<%lO%^l?hWkWOy%^z!O%^!O!P;O!P!Q%^!Q![>T![;'S%^;'S;=`%o<%lO%^n@VUZQOy%^z!Q%^!Q![;g![;'S%^;'S;=`%o<%lO%^~@nTkWOy%^z{@}{;'S%^;'S;=`%o<%lO%^~AUSp`#e~Oy%^z;'S%^;'S;=`%o<%lO%^lAg[#m[Oy%^z!O%^!O!P;g!P!Q%^!Q![>T![!g%^!g!h<^!h#X%^#X#Y<^#Y;'S%^;'S;=`%o<%lO%^jBbU^YOy%^z![%^![!]Bt!];'S%^;'S;=`%o<%lO%^bB{S_Qp`Oy%^z;'S%^;'S;=`%o<%lO%^nC^S!Z^Oy%^z;'S%^;'S;=`%o<%lO%^hCoU!hWOy%^z!_%^!_!`DR!`;'S%^;'S;=`%o<%lO%^hDYS!hWp`Oy%^z;'S%^;'S;=`%o<%lO%^lDmS!hW}SOy%^z;'S%^;'S;=`%o<%lO%^jEQV!PQ!hWOy%^z!_%^!_!`DR!`!aEg!a;'S%^;'S;=`%o<%lO%^bEnS!PQp`Oy%^z;'S%^;'S;=`%o<%lO%^bE}YOy%^z}%^}!OFm!O!c%^!c!}G[!}#T%^#T#oG[#o;'S%^;'S;=`%o<%lO%^bFrWp`Oy%^z!c%^!c!}G[!}#T%^#T#oG[#o;'S%^;'S;=`%o<%lO%^bGc[!]Qp`Oy%^z}%^}!OG[!O!Q%^!Q![G[![!c%^!c!}G[!}#T%^#T#oG[#o;'S%^;'S;=`%o<%lO%^nH^Sr^Oy%^z;'S%^;'S;=`%o<%lO%^nHoSq^Oy%^z;'S%^;'S;=`%o<%lO%^jIOUOy%^z#b%^#b#cIb#c;'S%^;'S;=`%o<%lO%^jIgUp`Oy%^z#W%^#W#XIy#X;'S%^;'S;=`%o<%lO%^jJQS!fYp`Oy%^z;'S%^;'S;=`%o<%lO%^jJaUOy%^z#f%^#f#gIy#g;'S%^;'S;=`%o<%lO%^fJxS!UUOy%^z;'S%^;'S;=`%o<%lO%^nKZS!T^Oy%^z;'S%^;'S;=`%o<%lO%^fKlU!SQOy%^z!_%^!_!`6y!`;'S%^;'S;=`%o<%lO%^`LRP;=`<%l$}",
  tokenizers: [M_, L_, Z_, 1, 2, 3, 4, new Ll("m~RRYZ[z{a~~g~aO#g~~dP!P!Qg~lO#h~~", 28, 114)],
  topRules: { StyleSheet: [0, 4], Styles: [1, 92] },
  specialized: [{ term: 108, get: (n) => B_[n] || -1 }, { term: 59, get: (n) => W_[n] || -1 }, { term: 110, get: (n) => z_[n] || -1 }],
  tokenPrec: 1441
});
let pc = null;
function mc() {
  if (!pc && typeof document == "object" && document.body) {
    let { style: n } = document.body, e = [], t = /* @__PURE__ */ new Set();
    for (let i in n)
      i != "cssText" && i != "cssFloat" && typeof n[i] == "string" && (/[A-Z]/.test(i) && (i = i.replace(/[A-Z]/g, (r) => "-" + r.toLowerCase())), t.has(i) || (e.push(i), t.add(i)));
    pc = e.sort().map((i) => ({ type: "property", label: i, apply: i + ": " }));
  }
  return pc || [];
}
const om = /* @__PURE__ */ [
  "active",
  "after",
  "any-link",
  "autofill",
  "backdrop",
  "before",
  "checked",
  "cue",
  "default",
  "defined",
  "disabled",
  "empty",
  "enabled",
  "file-selector-button",
  "first",
  "first-child",
  "first-letter",
  "first-line",
  "first-of-type",
  "focus",
  "focus-visible",
  "focus-within",
  "fullscreen",
  "has",
  "host",
  "host-context",
  "hover",
  "in-range",
  "indeterminate",
  "invalid",
  "is",
  "lang",
  "last-child",
  "last-of-type",
  "left",
  "link",
  "marker",
  "modal",
  "not",
  "nth-child",
  "nth-last-child",
  "nth-last-of-type",
  "nth-of-type",
  "only-child",
  "only-of-type",
  "optional",
  "out-of-range",
  "part",
  "placeholder",
  "placeholder-shown",
  "read-only",
  "read-write",
  "required",
  "right",
  "root",
  "scope",
  "selection",
  "slotted",
  "target",
  "target-text",
  "valid",
  "visited",
  "where"
].map((n) => ({ type: "class", label: n })), lm = /* @__PURE__ */ [
  "above",
  "absolute",
  "activeborder",
  "additive",
  "activecaption",
  "after-white-space",
  "ahead",
  "alias",
  "all",
  "all-scroll",
  "alphabetic",
  "alternate",
  "always",
  "antialiased",
  "appworkspace",
  "asterisks",
  "attr",
  "auto",
  "auto-flow",
  "avoid",
  "avoid-column",
  "avoid-page",
  "avoid-region",
  "axis-pan",
  "background",
  "backwards",
  "baseline",
  "below",
  "bidi-override",
  "blink",
  "block",
  "block-axis",
  "bold",
  "bolder",
  "border",
  "border-box",
  "both",
  "bottom",
  "break",
  "break-all",
  "break-word",
  "bullets",
  "button",
  "button-bevel",
  "buttonface",
  "buttonhighlight",
  "buttonshadow",
  "buttontext",
  "calc",
  "capitalize",
  "caps-lock-indicator",
  "caption",
  "captiontext",
  "caret",
  "cell",
  "center",
  "checkbox",
  "circle",
  "cjk-decimal",
  "clear",
  "clip",
  "close-quote",
  "col-resize",
  "collapse",
  "color",
  "color-burn",
  "color-dodge",
  "column",
  "column-reverse",
  "compact",
  "condensed",
  "contain",
  "content",
  "contents",
  "content-box",
  "context-menu",
  "continuous",
  "copy",
  "counter",
  "counters",
  "cover",
  "crop",
  "cross",
  "crosshair",
  "currentcolor",
  "cursive",
  "cyclic",
  "darken",
  "dashed",
  "decimal",
  "decimal-leading-zero",
  "default",
  "default-button",
  "dense",
  "destination-atop",
  "destination-in",
  "destination-out",
  "destination-over",
  "difference",
  "disc",
  "discard",
  "disclosure-closed",
  "disclosure-open",
  "document",
  "dot-dash",
  "dot-dot-dash",
  "dotted",
  "double",
  "down",
  "e-resize",
  "ease",
  "ease-in",
  "ease-in-out",
  "ease-out",
  "element",
  "ellipse",
  "ellipsis",
  "embed",
  "end",
  "ethiopic-abegede-gez",
  "ethiopic-halehame-aa-er",
  "ethiopic-halehame-gez",
  "ew-resize",
  "exclusion",
  "expanded",
  "extends",
  "extra-condensed",
  "extra-expanded",
  "fantasy",
  "fast",
  "fill",
  "fill-box",
  "fixed",
  "flat",
  "flex",
  "flex-end",
  "flex-start",
  "footnotes",
  "forwards",
  "from",
  "geometricPrecision",
  "graytext",
  "grid",
  "groove",
  "hand",
  "hard-light",
  "help",
  "hidden",
  "hide",
  "higher",
  "highlight",
  "highlighttext",
  "horizontal",
  "hsl",
  "hsla",
  "hue",
  "icon",
  "ignore",
  "inactiveborder",
  "inactivecaption",
  "inactivecaptiontext",
  "infinite",
  "infobackground",
  "infotext",
  "inherit",
  "initial",
  "inline",
  "inline-axis",
  "inline-block",
  "inline-flex",
  "inline-grid",
  "inline-table",
  "inset",
  "inside",
  "intrinsic",
  "invert",
  "italic",
  "justify",
  "keep-all",
  "landscape",
  "large",
  "larger",
  "left",
  "level",
  "lighter",
  "lighten",
  "line-through",
  "linear",
  "linear-gradient",
  "lines",
  "list-item",
  "listbox",
  "listitem",
  "local",
  "logical",
  "loud",
  "lower",
  "lower-hexadecimal",
  "lower-latin",
  "lower-norwegian",
  "lowercase",
  "ltr",
  "luminosity",
  "manipulation",
  "match",
  "matrix",
  "matrix3d",
  "medium",
  "menu",
  "menutext",
  "message-box",
  "middle",
  "min-intrinsic",
  "mix",
  "monospace",
  "move",
  "multiple",
  "multiple_mask_images",
  "multiply",
  "n-resize",
  "narrower",
  "ne-resize",
  "nesw-resize",
  "no-close-quote",
  "no-drop",
  "no-open-quote",
  "no-repeat",
  "none",
  "normal",
  "not-allowed",
  "nowrap",
  "ns-resize",
  "numbers",
  "numeric",
  "nw-resize",
  "nwse-resize",
  "oblique",
  "opacity",
  "open-quote",
  "optimizeLegibility",
  "optimizeSpeed",
  "outset",
  "outside",
  "outside-shape",
  "overlay",
  "overline",
  "padding",
  "padding-box",
  "painted",
  "page",
  "paused",
  "perspective",
  "pinch-zoom",
  "plus-darker",
  "plus-lighter",
  "pointer",
  "polygon",
  "portrait",
  "pre",
  "pre-line",
  "pre-wrap",
  "preserve-3d",
  "progress",
  "push-button",
  "radial-gradient",
  "radio",
  "read-only",
  "read-write",
  "read-write-plaintext-only",
  "rectangle",
  "region",
  "relative",
  "repeat",
  "repeating-linear-gradient",
  "repeating-radial-gradient",
  "repeat-x",
  "repeat-y",
  "reset",
  "reverse",
  "rgb",
  "rgba",
  "ridge",
  "right",
  "rotate",
  "rotate3d",
  "rotateX",
  "rotateY",
  "rotateZ",
  "round",
  "row",
  "row-resize",
  "row-reverse",
  "rtl",
  "run-in",
  "running",
  "s-resize",
  "sans-serif",
  "saturation",
  "scale",
  "scale3d",
  "scaleX",
  "scaleY",
  "scaleZ",
  "screen",
  "scroll",
  "scrollbar",
  "scroll-position",
  "se-resize",
  "self-start",
  "self-end",
  "semi-condensed",
  "semi-expanded",
  "separate",
  "serif",
  "show",
  "single",
  "skew",
  "skewX",
  "skewY",
  "skip-white-space",
  "slide",
  "slider-horizontal",
  "slider-vertical",
  "sliderthumb-horizontal",
  "sliderthumb-vertical",
  "slow",
  "small",
  "small-caps",
  "small-caption",
  "smaller",
  "soft-light",
  "solid",
  "source-atop",
  "source-in",
  "source-out",
  "source-over",
  "space",
  "space-around",
  "space-between",
  "space-evenly",
  "spell-out",
  "square",
  "start",
  "static",
  "status-bar",
  "stretch",
  "stroke",
  "stroke-box",
  "sub",
  "subpixel-antialiased",
  "svg_masks",
  "super",
  "sw-resize",
  "symbolic",
  "symbols",
  "system-ui",
  "table",
  "table-caption",
  "table-cell",
  "table-column",
  "table-column-group",
  "table-footer-group",
  "table-header-group",
  "table-row",
  "table-row-group",
  "text",
  "text-bottom",
  "text-top",
  "textarea",
  "textfield",
  "thick",
  "thin",
  "threeddarkshadow",
  "threedface",
  "threedhighlight",
  "threedlightshadow",
  "threedshadow",
  "to",
  "top",
  "transform",
  "translate",
  "translate3d",
  "translateX",
  "translateY",
  "translateZ",
  "transparent",
  "ultra-condensed",
  "ultra-expanded",
  "underline",
  "unidirectional-pan",
  "unset",
  "up",
  "upper-latin",
  "uppercase",
  "url",
  "var",
  "vertical",
  "vertical-text",
  "view-box",
  "visible",
  "visibleFill",
  "visiblePainted",
  "visibleStroke",
  "visual",
  "w-resize",
  "wait",
  "wave",
  "wider",
  "window",
  "windowframe",
  "windowtext",
  "words",
  "wrap",
  "wrap-reverse",
  "x-large",
  "x-small",
  "xor",
  "xx-large",
  "xx-small"
].map((n) => ({ type: "keyword", label: n })).concat(/* @__PURE__ */ [
  "aliceblue",
  "antiquewhite",
  "aqua",
  "aquamarine",
  "azure",
  "beige",
  "bisque",
  "black",
  "blanchedalmond",
  "blue",
  "blueviolet",
  "brown",
  "burlywood",
  "cadetblue",
  "chartreuse",
  "chocolate",
  "coral",
  "cornflowerblue",
  "cornsilk",
  "crimson",
  "cyan",
  "darkblue",
  "darkcyan",
  "darkgoldenrod",
  "darkgray",
  "darkgreen",
  "darkkhaki",
  "darkmagenta",
  "darkolivegreen",
  "darkorange",
  "darkorchid",
  "darkred",
  "darksalmon",
  "darkseagreen",
  "darkslateblue",
  "darkslategray",
  "darkturquoise",
  "darkviolet",
  "deeppink",
  "deepskyblue",
  "dimgray",
  "dodgerblue",
  "firebrick",
  "floralwhite",
  "forestgreen",
  "fuchsia",
  "gainsboro",
  "ghostwhite",
  "gold",
  "goldenrod",
  "gray",
  "grey",
  "green",
  "greenyellow",
  "honeydew",
  "hotpink",
  "indianred",
  "indigo",
  "ivory",
  "khaki",
  "lavender",
  "lavenderblush",
  "lawngreen",
  "lemonchiffon",
  "lightblue",
  "lightcoral",
  "lightcyan",
  "lightgoldenrodyellow",
  "lightgray",
  "lightgreen",
  "lightpink",
  "lightsalmon",
  "lightseagreen",
  "lightskyblue",
  "lightslategray",
  "lightsteelblue",
  "lightyellow",
  "lime",
  "limegreen",
  "linen",
  "magenta",
  "maroon",
  "mediumaquamarine",
  "mediumblue",
  "mediumorchid",
  "mediumpurple",
  "mediumseagreen",
  "mediumslateblue",
  "mediumspringgreen",
  "mediumturquoise",
  "mediumvioletred",
  "midnightblue",
  "mintcream",
  "mistyrose",
  "moccasin",
  "navajowhite",
  "navy",
  "oldlace",
  "olive",
  "olivedrab",
  "orange",
  "orangered",
  "orchid",
  "palegoldenrod",
  "palegreen",
  "paleturquoise",
  "palevioletred",
  "papayawhip",
  "peachpuff",
  "peru",
  "pink",
  "plum",
  "powderblue",
  "purple",
  "rebeccapurple",
  "red",
  "rosybrown",
  "royalblue",
  "saddlebrown",
  "salmon",
  "sandybrown",
  "seagreen",
  "seashell",
  "sienna",
  "silver",
  "skyblue",
  "slateblue",
  "slategray",
  "snow",
  "springgreen",
  "steelblue",
  "tan",
  "teal",
  "thistle",
  "tomato",
  "turquoise",
  "violet",
  "wheat",
  "white",
  "whitesmoke",
  "yellow",
  "yellowgreen"
].map((n) => ({ type: "constant", label: n }))), I_ = /* @__PURE__ */ [
  "a",
  "abbr",
  "address",
  "article",
  "aside",
  "b",
  "bdi",
  "bdo",
  "blockquote",
  "body",
  "br",
  "button",
  "canvas",
  "caption",
  "cite",
  "code",
  "col",
  "colgroup",
  "dd",
  "del",
  "details",
  "dfn",
  "dialog",
  "div",
  "dl",
  "dt",
  "em",
  "figcaption",
  "figure",
  "footer",
  "form",
  "header",
  "hgroup",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "hr",
  "html",
  "i",
  "iframe",
  "img",
  "input",
  "ins",
  "kbd",
  "label",
  "legend",
  "li",
  "main",
  "meter",
  "nav",
  "ol",
  "output",
  "p",
  "pre",
  "ruby",
  "section",
  "select",
  "small",
  "source",
  "span",
  "strong",
  "sub",
  "summary",
  "sup",
  "table",
  "tbody",
  "td",
  "template",
  "textarea",
  "tfoot",
  "th",
  "thead",
  "tr",
  "u",
  "ul"
].map((n) => ({ type: "type", label: n })), j_ = /* @__PURE__ */ [
  "@charset",
  "@color-profile",
  "@container",
  "@counter-style",
  "@font-face",
  "@font-feature-values",
  "@font-palette-values",
  "@import",
  "@keyframes",
  "@layer",
  "@media",
  "@namespace",
  "@page",
  "@position-try",
  "@property",
  "@scope",
  "@starting-style",
  "@supports",
  "@view-transition"
].map((n) => ({ type: "keyword", label: n })), bn = /^(\w[\w-]*|-\w[\w-]*|)$/, U_ = /^-(-[\w-]*)?$/;
function Y_(n, e) {
  var t;
  if ((n.name == "(" || n.type.isError) && (n = n.parent || n), n.name != "ArgList")
    return !1;
  let i = (t = n.parent) === null || t === void 0 ? void 0 : t.firstChild;
  return i?.name != "Callee" ? !1 : e.sliceString(i.from, i.to) == "var";
}
const am = /* @__PURE__ */ new cu(), N_ = ["Declaration"];
function G_(n) {
  for (let e = n; ; ) {
    if (e.type.isTop)
      return e;
    if (!(e = e.parent))
      return n;
  }
}
function r1(n, e, t) {
  if (e.to - e.from > 4096) {
    let i = am.get(e);
    if (i)
      return i;
    let r = [], s = /* @__PURE__ */ new Set(), o = e.cursor(xe.IncludeAnonymous);
    if (o.firstChild())
      do
        for (let l of r1(n, o.node, t))
          s.has(l.label) || (s.add(l.label), r.push(l));
      while (o.nextSibling());
    return am.set(e, r), r;
  } else {
    let i = [], r = /* @__PURE__ */ new Set();
    return e.cursor().iterate((s) => {
      var o;
      if (t(s) && s.matchContext(N_) && ((o = s.node.nextSibling) === null || o === void 0 ? void 0 : o.name) == ":") {
        let l = n.sliceString(s.from, s.to);
        r.has(l) || (r.add(l), i.push({ label: l, type: "variable" }));
      }
    }), i;
  }
}
const F_ = (n) => (e) => {
  let { state: t, pos: i } = e, r = ge(t).resolveInner(i, -1), s = r.type.isError && r.from == r.to - 1 && t.doc.sliceString(r.from, r.to) == "-";
  if (r.name == "PropertyName" || (s || r.name == "TagName") && /^(Block|Styles)$/.test(r.resolve(r.to).name))
    return { from: r.from, options: mc(), validFor: bn };
  if (r.name == "ValueName")
    return { from: r.from, options: lm, validFor: bn };
  if (r.name == "PseudoClassName")
    return { from: r.from, options: om, validFor: bn };
  if (n(r) || (e.explicit || s) && Y_(r, t.doc))
    return {
      from: n(r) || s ? r.from : i,
      options: r1(t.doc, G_(r), n),
      validFor: U_
    };
  if (r.name == "TagName") {
    for (let { parent: a } = r; a; a = a.parent)
      if (a.name == "Block")
        return { from: r.from, options: mc(), validFor: bn };
    return { from: r.from, options: I_, validFor: bn };
  }
  if (r.name == "AtKeyword")
    return { from: r.from, options: j_, validFor: bn };
  if (!e.explicit)
    return null;
  let o = r.resolve(i), l = o.childBefore(i);
  return l && l.name == ":" && o.name == "PseudoClassSelector" ? { from: i, options: om, validFor: bn } : l && l.name == ":" && o.name == "Declaration" || o.name == "ArgList" ? { from: i, options: lm, validFor: bn } : o.name == "Block" || o.name == "Styles" ? { from: i, options: mc(), validFor: bn } : null;
}, H_ = /* @__PURE__ */ F_((n) => n.name == "VariableName"), zl = /* @__PURE__ */ It.define({
  name: "css",
  parser: /* @__PURE__ */ D_.configure({
    props: [
      /* @__PURE__ */ yn.add({
        Declaration: /* @__PURE__ */ mi()
      }),
      /* @__PURE__ */ Gt.add({
        "Block KeyframeList": Ds
      })
    ]
  }),
  languageData: {
    commentTokens: { block: { open: "/*", close: "*/" } },
    indentOnInput: /^\s*\}$/,
    wordChars: "-"
  }
});
function s1() {
  return new mn(zl, zl.data.of({ autocomplete: H_ }));
}
const _r = ["_blank", "_self", "_top", "_parent"], gc = ["ascii", "utf-8", "utf-16", "latin1", "latin1"], yc = ["get", "post", "put", "delete"], Sc = ["application/x-www-form-urlencoded", "multipart/form-data", "text/plain"], mt = ["true", "false"], j = {}, K_ = {
  a: {
    attrs: {
      href: null,
      ping: null,
      type: null,
      media: null,
      target: _r,
      hreflang: null
    }
  },
  abbr: j,
  address: j,
  area: {
    attrs: {
      alt: null,
      coords: null,
      href: null,
      target: null,
      ping: null,
      media: null,
      hreflang: null,
      type: null,
      shape: ["default", "rect", "circle", "poly"]
    }
  },
  article: j,
  aside: j,
  audio: {
    attrs: {
      src: null,
      mediagroup: null,
      crossorigin: ["anonymous", "use-credentials"],
      preload: ["none", "metadata", "auto"],
      autoplay: ["autoplay"],
      loop: ["loop"],
      controls: ["controls"]
    }
  },
  b: j,
  base: { attrs: { href: null, target: _r } },
  bdi: j,
  bdo: j,
  blockquote: { attrs: { cite: null } },
  body: j,
  br: j,
  button: {
    attrs: {
      form: null,
      formaction: null,
      name: null,
      value: null,
      autofocus: ["autofocus"],
      disabled: ["autofocus"],
      formenctype: Sc,
      formmethod: yc,
      formnovalidate: ["novalidate"],
      formtarget: _r,
      type: ["submit", "reset", "button"]
    }
  },
  canvas: { attrs: { width: null, height: null } },
  caption: j,
  center: j,
  cite: j,
  code: j,
  col: { attrs: { span: null } },
  colgroup: { attrs: { span: null } },
  command: {
    attrs: {
      type: ["command", "checkbox", "radio"],
      label: null,
      icon: null,
      radiogroup: null,
      command: null,
      title: null,
      disabled: ["disabled"],
      checked: ["checked"]
    }
  },
  data: { attrs: { value: null } },
  datagrid: { attrs: { disabled: ["disabled"], multiple: ["multiple"] } },
  datalist: { attrs: { data: null } },
  dd: j,
  del: { attrs: { cite: null, datetime: null } },
  details: { attrs: { open: ["open"] } },
  dfn: j,
  div: j,
  dl: j,
  dt: j,
  em: j,
  embed: { attrs: { src: null, type: null, width: null, height: null } },
  eventsource: { attrs: { src: null } },
  fieldset: { attrs: { disabled: ["disabled"], form: null, name: null } },
  figcaption: j,
  figure: j,
  footer: j,
  form: {
    attrs: {
      action: null,
      name: null,
      "accept-charset": gc,
      autocomplete: ["on", "off"],
      enctype: Sc,
      method: yc,
      novalidate: ["novalidate"],
      target: _r
    }
  },
  h1: j,
  h2: j,
  h3: j,
  h4: j,
  h5: j,
  h6: j,
  head: {
    children: ["title", "base", "link", "style", "meta", "script", "noscript", "command"]
  },
  header: j,
  hgroup: j,
  hr: j,
  html: {
    attrs: { manifest: null }
  },
  i: j,
  iframe: {
    attrs: {
      src: null,
      srcdoc: null,
      name: null,
      width: null,
      height: null,
      sandbox: ["allow-top-navigation", "allow-same-origin", "allow-forms", "allow-scripts"],
      seamless: ["seamless"]
    }
  },
  img: {
    attrs: {
      alt: null,
      src: null,
      ismap: null,
      usemap: null,
      width: null,
      height: null,
      crossorigin: ["anonymous", "use-credentials"]
    }
  },
  input: {
    attrs: {
      alt: null,
      dirname: null,
      form: null,
      formaction: null,
      height: null,
      list: null,
      max: null,
      maxlength: null,
      min: null,
      name: null,
      pattern: null,
      placeholder: null,
      size: null,
      src: null,
      step: null,
      value: null,
      width: null,
      accept: ["audio/*", "video/*", "image/*"],
      autocomplete: ["on", "off"],
      autofocus: ["autofocus"],
      checked: ["checked"],
      disabled: ["disabled"],
      formenctype: Sc,
      formmethod: yc,
      formnovalidate: ["novalidate"],
      formtarget: _r,
      multiple: ["multiple"],
      readonly: ["readonly"],
      required: ["required"],
      type: [
        "hidden",
        "text",
        "search",
        "tel",
        "url",
        "email",
        "password",
        "datetime",
        "date",
        "month",
        "week",
        "time",
        "datetime-local",
        "number",
        "range",
        "color",
        "checkbox",
        "radio",
        "file",
        "submit",
        "image",
        "reset",
        "button"
      ]
    }
  },
  ins: { attrs: { cite: null, datetime: null } },
  kbd: j,
  keygen: {
    attrs: {
      challenge: null,
      form: null,
      name: null,
      autofocus: ["autofocus"],
      disabled: ["disabled"],
      keytype: ["RSA"]
    }
  },
  label: { attrs: { for: null, form: null } },
  legend: j,
  li: { attrs: { value: null } },
  link: {
    attrs: {
      href: null,
      type: null,
      hreflang: null,
      media: null,
      sizes: ["all", "16x16", "16x16 32x32", "16x16 32x32 64x64"]
    }
  },
  map: { attrs: { name: null } },
  mark: j,
  menu: { attrs: { label: null, type: ["list", "context", "toolbar"] } },
  meta: {
    attrs: {
      content: null,
      charset: gc,
      name: ["viewport", "application-name", "author", "description", "generator", "keywords"],
      "http-equiv": ["content-language", "content-type", "default-style", "refresh"]
    }
  },
  meter: { attrs: { value: null, min: null, low: null, high: null, max: null, optimum: null } },
  nav: j,
  noscript: j,
  object: {
    attrs: {
      data: null,
      type: null,
      name: null,
      usemap: null,
      form: null,
      width: null,
      height: null,
      typemustmatch: ["typemustmatch"]
    }
  },
  ol: {
    attrs: { reversed: ["reversed"], start: null, type: ["1", "a", "A", "i", "I"] },
    children: ["li", "script", "template", "ul", "ol"]
  },
  optgroup: { attrs: { disabled: ["disabled"], label: null } },
  option: { attrs: { disabled: ["disabled"], label: null, selected: ["selected"], value: null } },
  output: { attrs: { for: null, form: null, name: null } },
  p: j,
  param: { attrs: { name: null, value: null } },
  pre: j,
  progress: { attrs: { value: null, max: null } },
  q: { attrs: { cite: null } },
  rp: j,
  rt: j,
  ruby: j,
  samp: j,
  script: {
    attrs: {
      type: ["text/javascript"],
      src: null,
      async: ["async"],
      defer: ["defer"],
      charset: gc
    }
  },
  section: j,
  select: {
    attrs: {
      form: null,
      name: null,
      size: null,
      autofocus: ["autofocus"],
      disabled: ["disabled"],
      multiple: ["multiple"]
    }
  },
  slot: { attrs: { name: null } },
  small: j,
  source: { attrs: { src: null, type: null, media: null } },
  span: j,
  strong: j,
  style: {
    attrs: {
      type: ["text/css"],
      media: null,
      scoped: null
    }
  },
  sub: j,
  summary: j,
  sup: j,
  table: j,
  tbody: j,
  td: { attrs: { colspan: null, rowspan: null, headers: null } },
  template: j,
  textarea: {
    attrs: {
      dirname: null,
      form: null,
      maxlength: null,
      name: null,
      placeholder: null,
      rows: null,
      cols: null,
      autofocus: ["autofocus"],
      disabled: ["disabled"],
      readonly: ["readonly"],
      required: ["required"],
      wrap: ["soft", "hard"]
    }
  },
  tfoot: j,
  th: { attrs: { colspan: null, rowspan: null, headers: null, scope: ["row", "col", "rowgroup", "colgroup"] } },
  thead: j,
  time: { attrs: { datetime: null } },
  title: j,
  tr: j,
  track: {
    attrs: {
      src: null,
      label: null,
      default: null,
      kind: ["subtitles", "captions", "descriptions", "chapters", "metadata"],
      srclang: null
    }
  },
  ul: { children: ["li", "script", "template", "ul", "ol"] },
  var: j,
  video: {
    attrs: {
      src: null,
      poster: null,
      width: null,
      height: null,
      crossorigin: ["anonymous", "use-credentials"],
      preload: ["auto", "metadata", "none"],
      autoplay: ["autoplay"],
      mediagroup: ["movie"],
      muted: ["muted"],
      controls: ["controls"]
    }
  },
  wbr: j
}, o1 = {
  accesskey: null,
  class: null,
  contenteditable: mt,
  contextmenu: null,
  dir: ["ltr", "rtl", "auto"],
  draggable: ["true", "false", "auto"],
  dropzone: ["copy", "move", "link", "string:", "file:"],
  hidden: ["hidden"],
  id: null,
  inert: ["inert"],
  itemid: null,
  itemprop: null,
  itemref: null,
  itemscope: ["itemscope"],
  itemtype: null,
  lang: ["ar", "bn", "de", "en-GB", "en-US", "es", "fr", "hi", "id", "ja", "pa", "pt", "ru", "tr", "zh"],
  spellcheck: mt,
  autocorrect: mt,
  autocapitalize: mt,
  style: null,
  tabindex: null,
  title: null,
  translate: ["yes", "no"],
  rel: ["stylesheet", "alternate", "author", "bookmark", "help", "license", "next", "nofollow", "noreferrer", "prefetch", "prev", "search", "tag"],
  role: /* @__PURE__ */ "alert application article banner button cell checkbox complementary contentinfo dialog document feed figure form grid gridcell heading img list listbox listitem main navigation region row rowgroup search switch tab table tabpanel textbox timer".split(" "),
  "aria-activedescendant": null,
  "aria-atomic": mt,
  "aria-autocomplete": ["inline", "list", "both", "none"],
  "aria-busy": mt,
  "aria-checked": ["true", "false", "mixed", "undefined"],
  "aria-controls": null,
  "aria-describedby": null,
  "aria-disabled": mt,
  "aria-dropeffect": null,
  "aria-expanded": ["true", "false", "undefined"],
  "aria-flowto": null,
  "aria-grabbed": ["true", "false", "undefined"],
  "aria-haspopup": mt,
  "aria-hidden": mt,
  "aria-invalid": ["true", "false", "grammar", "spelling"],
  "aria-label": null,
  "aria-labelledby": null,
  "aria-level": null,
  "aria-live": ["off", "polite", "assertive"],
  "aria-multiline": mt,
  "aria-multiselectable": mt,
  "aria-owns": null,
  "aria-posinset": null,
  "aria-pressed": ["true", "false", "mixed", "undefined"],
  "aria-readonly": mt,
  "aria-relevant": null,
  "aria-required": mt,
  "aria-selected": ["true", "false", "undefined"],
  "aria-setsize": null,
  "aria-sort": ["ascending", "descending", "none", "other"],
  "aria-valuemax": null,
  "aria-valuemin": null,
  "aria-valuenow": null,
  "aria-valuetext": null
}, l1 = /* @__PURE__ */ "beforeunload copy cut dragstart dragover dragleave dragenter dragend drag paste focus blur change click load mousedown mouseenter mouseleave mouseup keydown keyup resize scroll unload".split(" ").map((n) => "on" + n);
for (let n of l1)
  o1[n] = null;
class Ps {
  constructor(e, t) {
    this.tags = Object.assign(Object.assign({}, K_), e), this.globalAttrs = Object.assign(Object.assign({}, o1), t), this.allTags = Object.keys(this.tags), this.globalAttrNames = Object.keys(this.globalAttrs);
  }
}
Ps.default = /* @__PURE__ */ new Ps();
function sr(n, e, t = n.length) {
  if (!e)
    return "";
  let i = e.firstChild, r = i && i.getChild("TagName");
  return r ? n.sliceString(r.from, Math.min(r.to, t)) : "";
}
function or(n, e = !1) {
  for (; n; n = n.parent)
    if (n.name == "Element")
      if (e)
        e = !1;
      else
        return n;
  return null;
}
function a1(n, e, t) {
  let i = t.tags[sr(n, or(e))];
  return i?.children || t.allTags;
}
function Lu(n, e) {
  let t = [];
  for (let i = or(e); i && !i.type.isTop; i = or(i.parent)) {
    let r = sr(n, i);
    if (r && i.lastChild.name == "CloseTag")
      break;
    r && t.indexOf(r) < 0 && (e.name == "EndTag" || e.from >= i.firstChild.to) && t.push(r);
  }
  return t;
}
const c1 = /^[:\-\.\w\u00b7-\uffff]*$/;
function cm(n, e, t, i, r) {
  let s = /\s*>/.test(n.sliceDoc(r, r + 5)) ? "" : ">", o = or(t, !0);
  return {
    from: i,
    to: r,
    options: a1(n.doc, o, e).map((l) => ({ label: l, type: "type" })).concat(Lu(n.doc, t).map((l, a) => ({
      label: "/" + l,
      apply: "/" + l + s,
      type: "type",
      boost: 99 - a
    }))),
    validFor: /^\/?[:\-\.\w\u00b7-\uffff]*$/
  };
}
function hm(n, e, t, i) {
  let r = /\s*>/.test(n.sliceDoc(i, i + 5)) ? "" : ">";
  return {
    from: t,
    to: i,
    options: Lu(n.doc, e).map((s, o) => ({ label: s, apply: s + r, type: "type", boost: 99 - o })),
    validFor: c1
  };
}
function J_(n, e, t, i) {
  let r = [], s = 0;
  for (let o of a1(n.doc, t, e))
    r.push({ label: "<" + o, type: "type" });
  for (let o of Lu(n.doc, t))
    r.push({ label: "</" + o + ">", type: "type", boost: 99 - s++ });
  return { from: i, to: i, options: r, validFor: /^<\/?[:\-\.\w\u00b7-\uffff]*$/ };
}
function eX(n, e, t, i, r) {
  let s = or(t), o = s ? e.tags[sr(n.doc, s)] : null, l = o && o.attrs ? Object.keys(o.attrs) : [], a = o && o.globalAttrs === !1 ? l : l.length ? l.concat(e.globalAttrNames) : e.globalAttrNames;
  return {
    from: i,
    to: r,
    options: a.map((c) => ({ label: c, type: "property" })),
    validFor: c1
  };
}
function tX(n, e, t, i, r) {
  var s;
  let o = (s = t.parent) === null || s === void 0 ? void 0 : s.getChild("AttributeName"), l = [], a;
  if (o) {
    let c = n.sliceDoc(o.from, o.to), h = e.globalAttrs[c];
    if (!h) {
      let f = or(t), u = f ? e.tags[sr(n.doc, f)] : null;
      h = u?.attrs && u.attrs[c];
    }
    if (h) {
      let f = n.sliceDoc(i, r).toLowerCase(), u = '"', d = '"';
      /^['"]/.test(f) ? (a = f[0] == '"' ? /^[^"]*$/ : /^[^']*$/, u = "", d = n.sliceDoc(r, r + 1) == f[0] ? "" : f[0], f = f.slice(1), i++) : a = /^[^\s<>='"]*$/;
      for (let O of h)
        l.push({ label: O, apply: u + O + d, type: "constant" });
    }
  }
  return { from: i, to: r, options: l, validFor: a };
}
function h1(n, e) {
  let { state: t, pos: i } = e, r = ge(t).resolveInner(i, -1), s = r.resolve(i);
  for (let o = i, l; s == r && (l = r.childBefore(o)); ) {
    let a = l.lastChild;
    if (!a || !a.type.isError || a.from < a.to)
      break;
    s = r = l, o = a.from;
  }
  return r.name == "TagName" ? r.parent && /CloseTag$/.test(r.parent.name) ? hm(t, r, r.from, i) : cm(t, n, r, r.from, i) : r.name == "StartTag" ? cm(t, n, r, i, i) : r.name == "StartCloseTag" || r.name == "IncompleteCloseTag" ? hm(t, r, i, i) : r.name == "OpenTag" || r.name == "SelfClosingTag" || r.name == "AttributeName" ? eX(t, n, r, r.name == "AttributeName" ? r.from : i, i) : r.name == "Is" || r.name == "AttributeValue" || r.name == "UnquotedAttributeValue" ? tX(t, n, r, r.name == "Is" ? i : r.from, i) : e.explicit && (s.name == "Element" || s.name == "Text" || s.name == "Document") ? J_(t, n, r, i) : null;
}
function nX(n) {
  return h1(Ps.default, n);
}
function iX(n) {
  let { extraTags: e, extraGlobalAttributes: t } = n, i = t || e ? new Ps(e, t) : Ps.default;
  return (r) => h1(i, r);
}
const rX = /* @__PURE__ */ dn.parser.configure({ top: "SingleExpression" }), f1 = [
  {
    tag: "script",
    attrs: (n) => n.type == "text/typescript" || n.lang == "ts",
    parser: mb.parser
  },
  {
    tag: "script",
    attrs: (n) => n.type == "text/babel" || n.type == "text/jsx",
    parser: gb.parser
  },
  {
    tag: "script",
    attrs: (n) => n.type == "text/typescript-jsx",
    parser: yb.parser
  },
  {
    tag: "script",
    attrs(n) {
      return /^(importmap|speculationrules|application\/(.+\+)?json)$/i.test(n.type);
    },
    parser: rX
  },
  {
    tag: "script",
    attrs(n) {
      return !n.type || /^(?:text|application)\/(?:x-)?(?:java|ecma)script$|^module$|^$/i.test(n.type);
    },
    parser: dn.parser
  },
  {
    tag: "style",
    attrs(n) {
      return (!n.lang || n.lang == "css") && (!n.type || /^(text\/)?(x-)?(stylesheet|css)$/i.test(n.type));
    },
    parser: zl.parser
  }
], u1 = /* @__PURE__ */ [
  {
    name: "style",
    parser: /* @__PURE__ */ zl.parser.configure({ top: "Styles" })
  }
].concat(/* @__PURE__ */ l1.map((n) => ({ name: n, parser: dn.parser }))), d1 = /* @__PURE__ */ It.define({
  name: "html",
  parser: /* @__PURE__ */ x_.configure({
    props: [
      /* @__PURE__ */ yn.add({
        Element(n) {
          let e = /^(\s*)(<\/)?/.exec(n.textAfter);
          return n.node.to <= n.pos + e[0].length ? n.continue() : n.lineIndent(n.node.from) + (e[2] ? 0 : n.unit);
        },
        "OpenTag CloseTag SelfClosingTag"(n) {
          return n.column(n.node.from) + n.unit;
        },
        Document(n) {
          if (n.pos + /\s*/.exec(n.textAfter)[0].length < n.node.to)
            return n.continue();
          let e = null, t;
          for (let i = n.node; ; ) {
            let r = i.lastChild;
            if (!r || r.name != "Element" || r.to != i.to)
              break;
            e = i = r;
          }
          return e && !((t = e.lastChild) && (t.name == "CloseTag" || t.name == "SelfClosingTag")) ? n.lineIndent(e.from) + n.unit : null;
        }
      }),
      /* @__PURE__ */ Gt.add({
        Element(n) {
          let e = n.firstChild, t = n.lastChild;
          return !e || e.name != "OpenTag" ? null : { from: e.to, to: t.name == "CloseTag" ? t.from : n.to };
        }
      }),
      /* @__PURE__ */ pu.add({
        "OpenTag CloseTag": (n) => n.getChild("TagName")
      })
    ]
  }),
  languageData: {
    commentTokens: { block: { open: "<!--", close: "-->" } },
    indentOnInput: /^\s*<\/\w+\W$/,
    wordChars: "-._"
  }
}), No = /* @__PURE__ */ d1.configure({
  wrap: /* @__PURE__ */ e1(f1, u1)
});
function O1(n = {}) {
  let e = "", t;
  n.matchClosingTags === !1 && (e = "noMatch"), n.selfClosingTags === !0 && (e = (e ? e + " " : "") + "selfClosing"), (n.nestedLanguages && n.nestedLanguages.length || n.nestedAttributes && n.nestedAttributes.length) && (t = e1((n.nestedLanguages || []).concat(f1), (n.nestedAttributes || []).concat(u1)));
  let i = t ? d1.configure({ wrap: t, dialect: e }) : e ? No.configure({ dialect: e }) : No;
  return new mn(i, [
    No.data.of({ autocomplete: iX(n) }),
    n.autoCloseTags !== !1 ? sX : [],
    Qb().support,
    s1().support
  ]);
}
const fm = /* @__PURE__ */ new Set(/* @__PURE__ */ "area base br col command embed frame hr img input keygen link meta param source track wbr menuitem".split(" ")), sX = /* @__PURE__ */ Z.inputHandler.of((n, e, t, i, r) => {
  if (n.composing || n.state.readOnly || e != t || i != ">" && i != "/" || !No.isActiveAt(n.state, e, -1))
    return !1;
  let s = r(), { state: o } = s, l = o.changeByRange((a) => {
    var c, h, f;
    let u = o.doc.sliceString(a.from - 1, a.to) == i, { head: d } = a, O = ge(o).resolveInner(d, -1), p;
    if (u && i == ">" && O.name == "EndTag") {
      let m = O.parent;
      if (((h = (c = m.parent) === null || c === void 0 ? void 0 : c.lastChild) === null || h === void 0 ? void 0 : h.name) != "CloseTag" && (p = sr(o.doc, m.parent, d)) && !fm.has(p)) {
        let y = d + (o.doc.sliceString(d, d + 1) === ">" ? 1 : 0), S = `</${p}>`;
        return { range: a, changes: { from: d, to: y, insert: S } };
      }
    } else if (u && i == "/" && O.name == "IncompleteCloseTag") {
      let m = O.parent;
      if (O.from == d - 2 && ((f = m.lastChild) === null || f === void 0 ? void 0 : f.name) != "CloseTag" && (p = sr(o.doc, m, d)) && !fm.has(p)) {
        let y = d + (o.doc.sliceString(d, d + 1) === ">" ? 1 : 0), S = `${p}>`;
        return {
          range: $.cursor(d + S.length, -1),
          changes: { from: d, to: y, insert: S }
        };
      }
    }
    return { range: a };
  });
  return l.changes.empty ? !1 : (n.dispatch([
    s,
    o.update(l, {
      userEvent: "input.complete",
      scrollIntoView: !0
    })
  ]), !0);
}), p1 = /* @__PURE__ */ fu({ commentTokens: { block: { open: "<!--", close: "-->" } } }), m1 = /* @__PURE__ */ new J(), g1 = /* @__PURE__ */ v5.configure({
  props: [
    /* @__PURE__ */ Gt.add((n) => !n.is("Block") || n.is("Document") || cf(n) != null || oX(n) ? void 0 : (e, t) => ({ from: t.doc.lineAt(e.from).to, to: e.to })),
    /* @__PURE__ */ m1.add(cf),
    /* @__PURE__ */ yn.add({
      Document: () => null
    }),
    /* @__PURE__ */ fi.add({
      Document: p1
    })
  ]
});
function cf(n) {
  let e = /^(?:ATX|Setext)Heading(\d)$/.exec(n.name);
  return e ? +e[1] : void 0;
}
function oX(n) {
  return n.name == "OrderedList" || n.name == "BulletList";
}
function lX(n, e) {
  let t = n;
  for (; ; ) {
    let i = t.nextSibling, r;
    if (!i || (r = cf(i.type)) != null && r <= e)
      break;
    t = i;
  }
  return t.to;
}
const aX = /* @__PURE__ */ Hy.of((n, e, t) => {
  for (let i = ge(n).resolveInner(t, -1); i && !(i.from < e); i = i.parent) {
    let r = i.type.prop(m1);
    if (r == null)
      continue;
    let s = lX(i, r);
    if (s > t)
      return { from: t, to: s };
  }
  return null;
});
function Vu(n) {
  return new vt(p1, n, [aX], "markdown");
}
const cX = /* @__PURE__ */ Vu(g1), hX = /* @__PURE__ */ g1.configure([Z5, L5, M5, V5, {
  props: [
    /* @__PURE__ */ Gt.add({
      Table: (n, e) => ({ from: e.doc.lineAt(n.from).to, to: n.to })
    })
  ]
}]), y1 = /* @__PURE__ */ Vu(hX);
function fX(n, e) {
  return (t) => {
    if (t && n) {
      let i = null;
      if (t = /\S*/.exec(t)[0], typeof n == "function" ? i = n(t) : i = wl.matchLanguageName(n, t, !0), i instanceof wl)
        return i.support ? i.support.language.parser : ps.getSkippingParser(i.load());
      if (i)
        return i.parser;
    }
    return e ? e.parser : null;
  };
}
let bc = class {
  constructor(e, t, i, r, s, o, l) {
    this.node = e, this.from = t, this.to = i, this.spaceBefore = r, this.spaceAfter = s, this.type = o, this.item = l;
  }
  blank(e, t = !0) {
    let i = this.spaceBefore + (this.node.name == "Blockquote" ? ">" : "");
    if (e != null) {
      for (; i.length < e; )
        i += " ";
      return i;
    } else {
      for (let r = this.to - this.from - i.length - this.spaceAfter.length; r > 0; r--)
        i += " ";
      return i + (t ? this.spaceAfter : "");
    }
  }
  marker(e, t) {
    let i = this.node.name == "OrderedList" ? String(+b1(this.item, e)[2] + t) : "";
    return this.spaceBefore + i + this.type + this.spaceAfter;
  }
};
function S1(n, e) {
  let t = [], i = [];
  for (let r = n; r; r = r.parent) {
    if (r.name == "FencedCode")
      return i;
    (r.name == "ListItem" || r.name == "Blockquote") && t.push(r);
  }
  for (let r = t.length - 1; r >= 0; r--) {
    let s = t[r], o, l = e.lineAt(s.from), a = s.from - l.from;
    if (s.name == "Blockquote" && (o = /^ *>( ?)/.exec(l.text.slice(a))))
      i.push(new bc(s, a, a + o[0].length, "", o[1], ">", null));
    else if (s.name == "ListItem" && s.parent.name == "OrderedList" && (o = /^( *)\d+([.)])( *)/.exec(l.text.slice(a)))) {
      let c = o[3], h = o[0].length;
      c.length >= 4 && (c = c.slice(0, c.length - 4), h -= 4), i.push(new bc(s.parent, a, a + h, o[1], c, o[2], s));
    } else if (s.name == "ListItem" && s.parent.name == "BulletList" && (o = /^( *)([-+*])( {1,4}\[[ xX]\])?( +)/.exec(l.text.slice(a)))) {
      let c = o[4], h = o[0].length;
      c.length > 4 && (c = c.slice(0, c.length - 4), h -= 4);
      let f = o[2];
      o[3] && (f += o[3].replace(/[xX]/, " ")), i.push(new bc(s.parent, a, a + h, o[1], c, f, s));
    }
  }
  return i;
}
function b1(n, e) {
  return /^(\s*)(\d+)(?=[.)])/.exec(e.sliceString(n.from, n.from + 10));
}
function Qc(n, e, t, i = 0) {
  for (let r = -1, s = n; ; ) {
    if (s.name == "ListItem") {
      let l = b1(s, e), a = +l[2];
      if (r >= 0) {
        if (a != r + 1)
          return;
        t.push({ from: s.from + l[1].length, to: s.from + l[0].length, insert: String(r + 2 + i) });
      }
      r = a;
    }
    let o = s.nextSibling;
    if (!o)
      break;
    s = o;
  }
}
function Bu(n, e) {
  let t = /^[ \t]*/.exec(n)[0].length;
  if (!t || e.facet(zs) != "	")
    return n;
  let i = Wt(n, 4, t), r = "";
  for (let s = i; s > 0; )
    s >= 4 ? (r += "	", s -= 4) : (r += " ", s--);
  return r + n.slice(t);
}
const uX = ({ state: n, dispatch: e }) => {
  let t = ge(n), { doc: i } = n, r = null, s = n.changeByRange((o) => {
    if (!o.empty || !y1.isActiveAt(n, o.from, 0))
      return r = { range: o };
    let l = o.from, a = i.lineAt(l), c = S1(t.resolveInner(l, -1), i);
    for (; c.length && c[c.length - 1].from > l - a.from; )
      c.pop();
    if (!c.length)
      return r = { range: o };
    let h = c[c.length - 1];
    if (h.to - h.spaceAfter.length > l - a.from)
      return r = { range: o };
    let f = l >= h.to - h.spaceAfter.length && !/\S/.test(a.text.slice(h.to));
    if (h.item && f) {
      let m = h.node.firstChild, y = h.node.getChild("ListItem", "ListItem");
      if (m.to >= l || y && y.to < l || a.from > 0 && !/[^\s>]/.test(i.lineAt(a.from - 1).text)) {
        let S = c.length > 1 ? c[c.length - 2] : null, b, w = "";
        S && S.item ? (b = a.from + S.from, w = S.marker(i, 1)) : b = a.from + (S ? S.to : 0);
        let k = [{ from: b, to: l, insert: w }];
        return h.node.name == "OrderedList" && Qc(h.item, i, k, -2), S && S.node.name == "OrderedList" && Qc(S.item, i, k), { range: $.cursor(b + w.length), changes: k };
      } else {
        let S = dm(c, n, a);
        return {
          range: $.cursor(l + S.length + 1),
          changes: { from: a.from, insert: S + n.lineBreak }
        };
      }
    }
    if (h.node.name == "Blockquote" && f && a.from) {
      let m = i.lineAt(a.from - 1), y = />\s*$/.exec(m.text);
      if (y && y.index == h.from) {
        let S = n.changes([
          { from: m.from + y.index, to: m.to },
          { from: a.from + h.from, to: a.to }
        ]);
        return { range: o.map(S), changes: S };
      }
    }
    let u = [];
    h.node.name == "OrderedList" && Qc(h.item, i, u);
    let d = h.item && h.item.from < a.from, O = "";
    if (!d || /^[\s\d.)\-+*>]*/.exec(a.text)[0].length >= h.to)
      for (let m = 0, y = c.length - 1; m <= y; m++)
        O += m == y && !d ? c[m].marker(i, 1) : c[m].blank(m < y ? Wt(a.text, 4, c[m + 1].from) - O.length : null);
    let p = l;
    for (; p > a.from && /\s/.test(a.text.charAt(p - a.from - 1)); )
      p--;
    return O = Bu(O, n), dX(h.node, n.doc) && (O = dm(c, n, a) + n.lineBreak + O), u.push({ from: p, to: l, insert: n.lineBreak + O }), { range: $.cursor(p + O.length + 1), changes: u };
  });
  return r ? !1 : (e(n.update(s, { scrollIntoView: !0, userEvent: "input" })), !0);
};
function um(n) {
  return n.name == "QuoteMark" || n.name == "ListMark";
}
function dX(n, e) {
  if (n.name != "OrderedList" && n.name != "BulletList")
    return !1;
  let t = n.firstChild, i = n.getChild("ListItem", "ListItem");
  if (!i)
    return !1;
  let r = e.lineAt(t.to), s = e.lineAt(i.from), o = /^[\s>]*$/.test(r.text);
  return r.number + (o ? 0 : 1) < s.number;
}
function dm(n, e, t) {
  let i = "";
  for (let r = 0, s = n.length - 2; r <= s; r++)
    i += n[r].blank(r < s ? Wt(t.text, 4, Math.min(t.text.length, n[r + 1].from)) - i.length : null, r < s);
  return Bu(i, e);
}
function OX(n, e) {
  let t = n.resolveInner(e, -1), i = e;
  um(t) && (i = t.from, t = t.parent);
  for (let r; r = t.childBefore(i); )
    if (um(r))
      i = r.from;
    else if (r.name == "OrderedList" || r.name == "BulletList")
      t = r.lastChild, i = t.to;
    else
      break;
  return t;
}
const pX = ({ state: n, dispatch: e }) => {
  let t = ge(n), i = null, r = n.changeByRange((s) => {
    let o = s.from, { doc: l } = n;
    if (s.empty && y1.isActiveAt(n, s.from)) {
      let a = l.lineAt(o), c = S1(OX(t, o), l);
      if (c.length) {
        let h = c[c.length - 1], f = h.to - h.spaceAfter.length + (h.spaceAfter ? 1 : 0);
        if (o - a.from > f && !/\S/.test(a.text.slice(f, o - a.from)))
          return {
            range: $.cursor(a.from + f),
            changes: { from: a.from + f, to: o }
          };
        if (o - a.from == f && // Only apply this if we're on the line that has the
        // construct's syntax, or there's only indentation in the
        // target range
        (!h.item || a.from <= h.item.from || !/\S/.test(a.text.slice(0, h.to)))) {
          let u = a.from + h.from;
          if (h.item && h.node.from < h.item.from && /\S/.test(a.text.slice(h.from, h.to))) {
            let d = h.blank(Wt(a.text, 4, h.to) - Wt(a.text, 4, h.from));
            return u == a.from && (d = Bu(d, n)), {
              range: $.cursor(u + d.length),
              changes: { from: u, to: a.from + h.to, insert: d }
            };
          }
          if (u < o)
            return { range: $.cursor(u), changes: { from: u, to: o } };
        }
      }
    }
    return i = { range: s };
  });
  return i ? !1 : (e(n.update(r, { scrollIntoView: !0, userEvent: "delete" })), !0);
}, mX = [
  { key: "Enter", run: uX },
  { key: "Backspace", run: pX }
], Q1 = /* @__PURE__ */ O1({ matchClosingTags: !1 });
function gX(n = {}) {
  let { codeLanguages: e, defaultCodeLanguage: t, addKeymap: i = !0, base: { parser: r } = cX, completeHTMLTags: s = !0, htmlTagLanguage: o = Q1 } = n;
  if (!(r instanceof ma))
    throw new RangeError("Base parser provided to `markdown` should be a Markdown parser");
  let l = n.extensions ? [n.extensions] : [], a = [o.support], c;
  t instanceof mn ? (a.push(t.support), c = t.language) : t && (c = t);
  let h = e || c ? fX(e, c) : void 0;
  l.push($5({ codeParser: h, htmlParser: o.language.parser })), i && a.push(Xn.high(Vs.of(mX)));
  let f = Vu(r.configure(l));
  return s && a.push(f.data.of({ autocomplete: yX })), new mn(f, a);
}
function yX(n) {
  let { state: e, pos: t } = n, i = /<[:\-\.\w\u00b7-\uffff]*$/.exec(e.sliceDoc(t - 25, t));
  if (!i)
    return null;
  let r = ge(e).resolveInner(t, -1);
  for (; r && !r.type.isTop; ) {
    if (r.name == "CodeBlock" || r.name == "FencedCode" || r.name == "ProcessingInstructionBlock" || r.name == "CommentBlock" || r.name == "Link" || r.name == "Image")
      return null;
    r = r.parent;
  }
  return {
    from: t - i[0].length,
    to: t,
    options: SX(),
    validFor: /^<[:\-\.\w\u00b7-\uffff]*$/
  };
}
let xc = null;
function SX() {
  if (xc)
    return xc;
  let n = nX(new ku(ue.create({ extensions: Q1 }), 0, !0));
  return xc = n ? n.options : [];
}
const bX = 36, Om = 1, QX = 2, Ei = 3, kc = 4, xX = 5, kX = 6, wX = 7, vX = 8, PX = 9, $X = 10, TX = 11, CX = 12, RX = 13, EX = 14, AX = 15, _X = 16, XX = 17, pm = 18, qX = 19, x1 = 20, k1 = 21, mm = 22, ZX = 23, MX = 24;
function hf(n) {
  return n >= 65 && n <= 90 || n >= 97 && n <= 122 || n >= 48 && n <= 57;
}
function LX(n) {
  return n >= 48 && n <= 57 || n >= 97 && n <= 102 || n >= 65 && n <= 70;
}
function si(n, e, t) {
  for (let i = !1; ; ) {
    if (n.next < 0)
      return;
    if (n.next == e && !i) {
      n.advance();
      return;
    }
    i = t && !i && n.next == 92, n.advance();
  }
}
function VX(n, e) {
  e: for (; ; ) {
    if (n.next < 0)
      return;
    if (n.next == 36) {
      n.advance();
      for (let t = 0; t < e.length; t++) {
        if (n.next != e.charCodeAt(t))
          continue e;
        n.advance();
      }
      if (n.next == 36) {
        n.advance();
        return;
      }
    } else
      n.advance();
  }
}
function BX(n, e) {
  let t = "[{<(".indexOf(String.fromCharCode(e)), i = t < 0 ? e : "]}>)".charCodeAt(t);
  for (; ; ) {
    if (n.next < 0)
      return;
    if (n.next == i && n.peek(1) == 39) {
      n.advance(2);
      return;
    }
    n.advance();
  }
}
function ff(n, e) {
  for (; !(n.next != 95 && !hf(n.next)); )
    e != null && (e += String.fromCharCode(n.next)), n.advance();
  return e;
}
function WX(n) {
  if (n.next == 39 || n.next == 34 || n.next == 96) {
    let e = n.next;
    n.advance(), si(n, e, !1);
  } else
    ff(n);
}
function gm(n, e) {
  for (; n.next == 48 || n.next == 49; )
    n.advance();
  e && n.next == e && n.advance();
}
function ym(n, e) {
  for (; ; ) {
    if (n.next == 46) {
      if (e)
        break;
      e = !0;
    } else if (n.next < 48 || n.next > 57)
      break;
    n.advance();
  }
  if (n.next == 69 || n.next == 101)
    for (n.advance(), (n.next == 43 || n.next == 45) && n.advance(); n.next >= 48 && n.next <= 57; )
      n.advance();
}
function Sm(n) {
  for (; !(n.next < 0 || n.next == 10); )
    n.advance();
}
function ri(n, e) {
  for (let t = 0; t < e.length; t++)
    if (e.charCodeAt(t) == n)
      return !0;
  return !1;
}
const wc = ` 	\r
`;
function w1(n, e, t) {
  let i = /* @__PURE__ */ Object.create(null);
  i.true = i.false = xX, i.null = i.unknown = kX;
  for (let r of n.split(" "))
    r && (i[r] = x1);
  for (let r of e.split(" "))
    r && (i[r] = k1);
  for (let r of (t || "").split(" "))
    r && (i[r] = MX);
  return i;
}
const zX = "array binary bit boolean char character clob date decimal double float int integer interval large national nchar nclob numeric object precision real smallint time timestamp varchar varying ", DX = "absolute action add after all allocate alter and any are as asc assertion at authorization before begin between both breadth by call cascade cascaded case cast catalog check close collate collation column commit condition connect connection constraint constraints constructor continue corresponding count create cross cube current current_date current_default_transform_group current_transform_group_for_type current_path current_role current_time current_timestamp current_user cursor cycle data day deallocate declare default deferrable deferred delete depth deref desc describe descriptor deterministic diagnostics disconnect distinct do domain drop dynamic each else elseif end end-exec equals escape except exception exec execute exists exit external fetch first for foreign found from free full function general get global go goto grant group grouping handle having hold hour identity if immediate in indicator initially inner inout input insert intersect into is isolation join key language last lateral leading leave left level like limit local localtime localtimestamp locator loop map match method minute modifies module month names natural nesting new next no none not of old on only open option or order ordinality out outer output overlaps pad parameter partial path prepare preserve primary prior privileges procedure public read reads recursive redo ref references referencing relative release repeat resignal restrict result return returns revoke right role rollback rollup routine row rows savepoint schema scroll search second section select session session_user set sets signal similar size some space specific specifictype sql sqlexception sqlstate sqlwarning start state static system_user table temporary then timezone_hour timezone_minute to trailing transaction translation treat trigger under undo union unique unnest until update usage user using value values view when whenever where while with without work write year zone ", uf = {
  backslashEscapes: !1,
  hashComments: !1,
  spaceAfterDashes: !1,
  slashComments: !1,
  doubleQuotedStrings: !1,
  doubleDollarQuotedStrings: !1,
  unquotedBitLiterals: !1,
  treatBitsAsBytes: !1,
  charSetCasts: !1,
  plsqlQuotingMechanism: !1,
  operatorChars: "*+-%<>!=&|~^/",
  specialVar: "?",
  identifierQuotes: '"',
  caseInsensitiveIdentifiers: !1,
  words: /* @__PURE__ */ w1(DX, zX)
};
function IX(n, e, t, i) {
  let r = {};
  for (let s in uf)
    r[s] = (n.hasOwnProperty(s) ? n : uf)[s];
  return e && (r.words = w1(e, t || "", i)), r;
}
function v1(n) {
  return new Ee((e) => {
    var t;
    let { next: i } = e;
    if (e.advance(), ri(i, wc)) {
      for (; ri(e.next, wc); )
        e.advance();
      e.acceptToken(bX);
    } else if (i == 36 && n.doubleDollarQuotedStrings) {
      let r = ff(e, "");
      e.next == 36 && (e.advance(), VX(e, r), e.acceptToken(Ei));
    } else if (i == 39 || i == 34 && n.doubleQuotedStrings)
      si(e, i, n.backslashEscapes), e.acceptToken(Ei);
    else if (i == 35 && n.hashComments || i == 47 && e.next == 47 && n.slashComments)
      Sm(e), e.acceptToken(Om);
    else if (i == 45 && e.next == 45 && (!n.spaceAfterDashes || e.peek(1) == 32))
      Sm(e), e.acceptToken(Om);
    else if (i == 47 && e.next == 42) {
      e.advance();
      for (let r = 1; ; ) {
        let s = e.next;
        if (e.next < 0)
          break;
        if (e.advance(), s == 42 && e.next == 47) {
          if (r--, e.advance(), !r)
            break;
        } else s == 47 && e.next == 42 && (r++, e.advance());
      }
      e.acceptToken(QX);
    } else if ((i == 101 || i == 69) && e.next == 39)
      e.advance(), si(e, 39, !0), e.acceptToken(Ei);
    else if ((i == 110 || i == 78) && e.next == 39 && n.charSetCasts)
      e.advance(), si(e, 39, n.backslashEscapes), e.acceptToken(Ei);
    else if (i == 95 && n.charSetCasts)
      for (let r = 0; ; r++) {
        if (e.next == 39 && r > 1) {
          e.advance(), si(e, 39, n.backslashEscapes), e.acceptToken(Ei);
          break;
        }
        if (!hf(e.next))
          break;
        e.advance();
      }
    else if (n.plsqlQuotingMechanism && (i == 113 || i == 81) && e.next == 39 && e.peek(1) > 0 && !ri(e.peek(1), wc)) {
      let r = e.peek(1);
      e.advance(2), BX(e, r), e.acceptToken(Ei);
    } else if (i == 40)
      e.acceptToken(wX);
    else if (i == 41)
      e.acceptToken(vX);
    else if (i == 123)
      e.acceptToken(PX);
    else if (i == 125)
      e.acceptToken($X);
    else if (i == 91)
      e.acceptToken(TX);
    else if (i == 93)
      e.acceptToken(CX);
    else if (i == 59)
      e.acceptToken(RX);
    else if (n.unquotedBitLiterals && i == 48 && e.next == 98)
      e.advance(), gm(e), e.acceptToken(mm);
    else if ((i == 98 || i == 66) && (e.next == 39 || e.next == 34)) {
      const r = e.next;
      e.advance(), n.treatBitsAsBytes ? (si(e, r, n.backslashEscapes), e.acceptToken(ZX)) : (gm(e, r), e.acceptToken(mm));
    } else if (i == 48 && (e.next == 120 || e.next == 88) || (i == 120 || i == 88) && e.next == 39) {
      let r = e.next == 39;
      for (e.advance(); LX(e.next); )
        e.advance();
      r && e.next == 39 && e.advance(), e.acceptToken(kc);
    } else if (i == 46 && e.next >= 48 && e.next <= 57)
      ym(e, !0), e.acceptToken(kc);
    else if (i == 46)
      e.acceptToken(EX);
    else if (i >= 48 && i <= 57)
      ym(e, !1), e.acceptToken(kc);
    else if (ri(i, n.operatorChars)) {
      for (; ri(e.next, n.operatorChars); )
        e.advance();
      e.acceptToken(AX);
    } else if (ri(i, n.specialVar))
      e.next == i && e.advance(), WX(e), e.acceptToken(XX);
    else if (ri(i, n.identifierQuotes))
      si(e, i, !1), e.acceptToken(qX);
    else if (i == 58 || i == 44)
      e.acceptToken(_X);
    else if (hf(i)) {
      let r = ff(e, String.fromCharCode(i));
      e.acceptToken(e.next == 46 || e.peek(-r.length - 1) == 46 ? pm : (t = n.words[r.toLowerCase()]) !== null && t !== void 0 ? t : pm);
    }
  });
}
const P1 = /* @__PURE__ */ v1(uf), jX = /* @__PURE__ */ jt.deserialize({
  version: 14,
  states: "%vQ]QQOOO#wQRO'#DSO$OQQO'#CwO%eQQO'#CxO%lQQO'#CyO%sQQO'#CzOOQQ'#DS'#DSOOQQ'#C}'#C}O'UQRO'#C{OOQQ'#Cv'#CvOOQQ'#C|'#C|Q]QQOOQOQQOOO'`QQO'#DOO(xQRO,59cO)PQQO,59cO)UQQO'#DSOOQQ,59d,59dO)cQQO,59dOOQQ,59e,59eO)jQQO,59eOOQQ,59f,59fO)qQQO,59fOOQQ-E6{-E6{OOQQ,59b,59bOOQQ-E6z-E6zOOQQ,59j,59jOOQQ-E6|-E6|O+VQRO1G.}O+^QQO,59cOOQQ1G/O1G/OOOQQ1G/P1G/POOQQ1G/Q1G/QP+kQQO'#C}O+rQQO1G.}O)PQQO,59cO,PQQO'#Cw",
  stateData: ",[~OtOSPOSQOS~ORUOSUOTUOUUOVROXSOZTO]XO^QO_UO`UOaPObPOcPOdUOeUOfUOgUOhUO~O^]ORvXSvXTvXUvXVvXXvXZvX]vX_vX`vXavXbvXcvXdvXevXfvXgvXhvX~OsvX~P!jOa_Ob_Oc_O~ORUOSUOTUOUUOVROXSOZTO^tO_UO`UOa`Ob`Oc`OdUOeUOfUOgUOhUO~OWaO~P$ZOYcO~P$ZO[eO~P$ZORUOSUOTUOUUOVROXSOZTO^QO_UO`UOaPObPOcPOdUOeUOfUOgUOhUO~O]hOsoX~P%zOajObjOcjO~O^]ORkaSkaTkaUkaVkaXkaZka]ka_ka`kaakabkackadkaekafkagkahka~Oska~P'kO^]O~OWvXYvX[vX~P!jOWnO~P$ZOYoO~P$ZO[pO~P$ZO^]ORkiSkiTkiUkiVkiXkiZki]ki_ki`kiakibkickidkiekifkigkihki~Oski~P)xOWkaYka[ka~P'kO]hO~P$ZOWkiYki[ki~P)xOasObsOcsO~O",
  goto: "#hwPPPPPPPPPPPPPPPPPPPPPPPPPPx||||!Y!^!d!xPPP#[TYOZeUORSTWZbdfqT[OZQZORiZSWOZQbRQdSQfTZgWbdfqQ^PWk^lmrQl_Qm`RrseVORSTWZbdfq",
  nodeNames: "⚠ LineComment BlockComment String Number Bool Null ( ) { } [ ] ; . Operator Punctuation SpecialVar Identifier QuotedIdentifier Keyword Type Bits Bytes Builtin Script Statement CompositeIdentifier Parens Braces Brackets Statement",
  maxTerm: 38,
  nodeProps: [
    ["isolate", -4, 1, 2, 3, 19, ""]
  ],
  skippedNodes: [0, 1, 2],
  repeatNodeCount: 3,
  tokenData: "RORO",
  tokenizers: [0, P1],
  topRules: { Script: [0, 25] },
  tokenPrec: 0
});
function df(n) {
  let e = n.cursor().moveTo(n.from, -1);
  for (; /Comment/.test(e.name); )
    e.moveTo(e.from, -1);
  return e.node;
}
function $s(n, e) {
  let t = n.sliceString(e.from, e.to), i = /^([`'"])(.*)\1$/.exec(t);
  return i ? i[2] : t;
}
function Dl(n) {
  return n && (n.name == "Identifier" || n.name == "QuotedIdentifier");
}
function UX(n, e) {
  if (e.name == "CompositeIdentifier") {
    let t = [];
    for (let i = e.firstChild; i; i = i.nextSibling)
      Dl(i) && t.push($s(n, i));
    return t;
  }
  return [$s(n, e)];
}
function bm(n, e) {
  for (let t = []; ; ) {
    if (!e || e.name != ".")
      return t;
    let i = df(e);
    if (!Dl(i))
      return t;
    t.unshift($s(n, i)), e = df(i);
  }
}
function YX(n, e) {
  let t = ge(n).resolveInner(e, -1), i = GX(n.doc, t);
  return t.name == "Identifier" || t.name == "QuotedIdentifier" || t.name == "Keyword" ? {
    from: t.from,
    quoted: t.name == "QuotedIdentifier" ? n.doc.sliceString(t.from, t.from + 1) : null,
    parents: bm(n.doc, df(t)),
    aliases: i
  } : t.name == "." ? { from: e, quoted: null, parents: bm(n.doc, t), aliases: i } : { from: e, quoted: null, parents: [], empty: !0, aliases: i };
}
const NX = /* @__PURE__ */ new Set(/* @__PURE__ */ "where group having order union intersect except all distinct limit offset fetch for".split(" "));
function GX(n, e) {
  let t;
  for (let r = e; !t; r = r.parent) {
    if (!r)
      return null;
    r.name == "Statement" && (t = r);
  }
  let i = null;
  for (let r = t.firstChild, s = !1, o = null; r; r = r.nextSibling) {
    let l = r.name == "Keyword" ? n.sliceString(r.from, r.to).toLowerCase() : null, a = null;
    if (!s)
      s = l == "from";
    else if (l == "as" && o && Dl(r.nextSibling))
      a = $s(n, r.nextSibling);
    else {
      if (l && NX.has(l))
        break;
      o && Dl(r) && (a = $s(n, r));
    }
    a && (i || (i = /* @__PURE__ */ Object.create(null)), i[a] = UX(n, o)), o = /Identifier$/.test(r.name) ? r : null;
  }
  return i;
}
function FX(n, e) {
  return n ? e.map((t) => Object.assign(Object.assign({}, t), { label: t.label[0] == n ? t.label : n + t.label + n, apply: void 0 })) : e;
}
const HX = /^\w*$/, KX = /^[`'"]?\w*[`'"]?$/;
function Qm(n) {
  return n.self && typeof n.self.label == "string";
}
class Wu {
  constructor(e, t) {
    this.idQuote = e, this.idCaseInsensitive = t, this.list = [], this.children = void 0;
  }
  child(e) {
    let t = this.children || (this.children = /* @__PURE__ */ Object.create(null)), i = t[e];
    return i || (e && !this.list.some((r) => r.label == e) && this.list.push(xm(e, "type", this.idQuote, this.idCaseInsensitive)), t[e] = new Wu(this.idQuote, this.idCaseInsensitive));
  }
  maybeChild(e) {
    return this.children ? this.children[e] : null;
  }
  addCompletion(e) {
    let t = this.list.findIndex((i) => i.label == e.label);
    t > -1 ? this.list[t] = e : this.list.push(e);
  }
  addCompletions(e) {
    for (let t of e)
      this.addCompletion(typeof t == "string" ? xm(t, "property", this.idQuote, this.idCaseInsensitive) : t);
  }
  addNamespace(e) {
    Array.isArray(e) ? this.addCompletions(e) : Qm(e) ? this.addNamespace(e.children) : this.addNamespaceObject(e);
  }
  addNamespaceObject(e) {
    for (let t of Object.keys(e)) {
      let i = e[t], r = null, s = t.replace(/\\?\./g, (l) => l == "." ? "\0" : l).split("\0"), o = this;
      Qm(i) && (r = i.self, i = i.children);
      for (let l = 0; l < s.length; l++)
        r && l == s.length - 1 && o.addCompletion(r), o = o.child(s[l].replace(/\\\./g, "."));
      o.addNamespace(i);
    }
  }
}
function xm(n, e, t, i) {
  return new RegExp("^[a-z_][a-z_\\d]*$", i ? "i" : "").test(n) ? { label: n, type: e } : { label: n, type: e, apply: t + n + t };
}
function JX(n, e, t, i, r, s) {
  var o;
  let l = ((o = s?.spec.identifierQuotes) === null || o === void 0 ? void 0 : o[0]) || '"', a = new Wu(l, !!s?.spec.caseInsensitiveIdentifiers), c = r ? a.child(r) : null;
  return a.addNamespace(n), e && (c || a).addCompletions(e), t && a.addCompletions(t), c && a.addCompletions(c.list), i && a.addCompletions((c || a).child(i).list), (h) => {
    let { parents: f, from: u, quoted: d, empty: O, aliases: p } = YX(h.state, h.pos);
    if (O && !h.explicit)
      return null;
    p && f.length == 1 && (f = p[f[0]] || f);
    let m = a;
    for (let b of f) {
      for (; !m.children || !m.children[b]; )
        if (m == a && c)
          m = c;
        else if (m == c && i)
          m = m.child(i);
        else
          return null;
      let w = m.maybeChild(b);
      if (!w)
        return null;
      m = w;
    }
    let y = d && h.state.sliceDoc(h.pos, h.pos + 1) == d, S = m.list;
    return m == a && p && (S = S.concat(Object.keys(p).map((b) => ({ label: b, type: "constant" })))), {
      from: u,
      to: y ? h.pos + 1 : void 0,
      options: FX(d, S),
      validFor: d ? KX : HX
    };
  };
}
function eq(n) {
  return n == k1 ? "type" : n == x1 ? "keyword" : "variable";
}
function tq(n, e, t) {
  let i = Object.keys(n).map((r) => t(e ? r.toUpperCase() : r, eq(n[r])));
  return wu(["QuotedIdentifier", "SpecialVar", "String", "LineComment", "BlockComment", "."], Oa(i));
}
let nq = /* @__PURE__ */ jX.configure({
  props: [
    /* @__PURE__ */ yn.add({
      Statement: /* @__PURE__ */ mi()
    }),
    /* @__PURE__ */ Gt.add({
      Statement(n, e) {
        return { from: Math.min(n.from + 100, e.doc.lineAt(n.from).to), to: n.to };
      },
      BlockComment(n) {
        return { from: n.from + 2, to: n.to - 2 };
      }
    }),
    /* @__PURE__ */ Nt({
      Keyword: g.keyword,
      Type: g.typeName,
      Builtin: /* @__PURE__ */ g.standard(g.name),
      Bits: g.number,
      Bytes: g.string,
      Bool: g.bool,
      Null: g.null,
      Number: g.number,
      String: g.string,
      Identifier: g.name,
      QuotedIdentifier: /* @__PURE__ */ g.special(g.string),
      SpecialVar: /* @__PURE__ */ g.special(g.name),
      LineComment: g.lineComment,
      BlockComment: g.blockComment,
      Operator: g.operator,
      "Semi Punctuation": g.punctuation,
      "( )": g.paren,
      "{ }": g.brace,
      "[ ]": g.squareBracket
    })
  ]
});
class zu {
  constructor(e, t, i) {
    this.dialect = e, this.language = t, this.spec = i;
  }
  /**
  Returns the language for this dialect as an extension.
  */
  get extension() {
    return this.language.extension;
  }
  /**
  Define a new dialect.
  */
  static define(e) {
    let t = IX(e, e.keywords, e.types, e.builtin), i = It.define({
      name: "sql",
      parser: nq.configure({
        tokenizers: [{ from: P1, to: v1(t) }]
      }),
      languageData: {
        commentTokens: { line: "--", block: { open: "/*", close: "*/" } },
        closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`"] }
      }
    });
    return new zu(t, i, e);
  }
}
function iq(n, e) {
  return { label: n, type: e, boost: -1 };
}
function rq(n, e = !1, t) {
  return tq(n.dialect.words, e, t || iq);
}
function sq(n) {
  return n.schema ? JX(n.schema, n.tables, n.schemas, n.defaultTable, n.defaultSchema, n.dialect || Du) : () => null;
}
function oq(n) {
  return n.schema ? (n.dialect || Du).language.data.of({
    autocomplete: sq(n)
  }) : [];
}
function lq(n = {}) {
  let e = n.dialect || Du;
  return new mn(e.language, [
    oq(n),
    e.language.data.of({
      autocomplete: rq(e, n.upperCaseKeywords, n.keywordCompletion)
    })
  ]);
}
const Du = /* @__PURE__ */ zu.define({}), aq = 1, $1 = 194, T1 = 195, cq = 196, km = 197, hq = 198, fq = 199, uq = 200, dq = 2, C1 = 3, wm = 201, Oq = 24, pq = 25, mq = 49, gq = 50, yq = 55, Sq = 56, bq = 57, Qq = 59, xq = 60, kq = 61, wq = 62, vq = 63, Pq = 65, $q = 238, Tq = 71, Cq = 241, Rq = 242, Eq = 243, Aq = 244, _q = 245, Xq = 246, qq = 247, Zq = 248, R1 = 72, Mq = 249, Lq = 250, Vq = 251, Bq = 252, Wq = 253, zq = 254, Dq = 255, Iq = 256, jq = 73, Uq = 77, Yq = 263, Nq = 112, Gq = 130, Fq = 151, Hq = 152, Kq = 155, $i = 10, Ts = 13, Iu = 32, ga = 9, ju = 35, Jq = 40, eZ = 46, Of = 123, vm = 125, E1 = 39, A1 = 34, Pm = 92, tZ = 111, nZ = 120, iZ = 78, rZ = 117, sZ = 85, oZ = /* @__PURE__ */ new Set([
  pq,
  mq,
  gq,
  Yq,
  Pq,
  Gq,
  Sq,
  bq,
  $q,
  wq,
  vq,
  R1,
  jq,
  Uq,
  xq,
  kq,
  Fq,
  Hq,
  Kq,
  Nq
]);
function vc(n) {
  return n == $i || n == Ts;
}
function Pc(n) {
  return n >= 48 && n <= 57 || n >= 65 && n <= 70 || n >= 97 && n <= 102;
}
const lZ = new Ee((n, e) => {
  let t;
  if (n.next < 0)
    n.acceptToken(fq);
  else if (e.context.flags & Go)
    vc(n.next) && n.acceptToken(hq, 1);
  else if (((t = n.peek(-1)) < 0 || vc(t)) && e.canShift(km)) {
    let i = 0;
    for (; n.next == Iu || n.next == ga; )
      n.advance(), i++;
    (n.next == $i || n.next == Ts || n.next == ju) && n.acceptToken(km, -i);
  } else vc(n.next) && n.acceptToken(cq, 1);
}, { contextual: !0 }), aZ = new Ee((n, e) => {
  let t = e.context;
  if (t.flags) return;
  let i = n.peek(-1);
  if (i == $i || i == Ts) {
    let r = 0, s = 0;
    for (; ; ) {
      if (n.next == Iu) r++;
      else if (n.next == ga) r += 8 - r % 8;
      else break;
      n.advance(), s++;
    }
    r != t.indent && n.next != $i && n.next != Ts && n.next != ju && (r < t.indent ? n.acceptToken(T1, -s) : n.acceptToken($1));
  }
}), Go = 1, _1 = 2, Qn = 4, xn = 8, kn = 16, wn = 32;
function Fo(n, e, t) {
  this.parent = n, this.indent = e, this.flags = t, this.hash = (n ? n.hash + n.hash << 8 : 0) + e + (e << 4) + t + (t << 6);
}
const cZ = new Fo(null, 0, 0);
function hZ(n) {
  let e = 0;
  for (let t = 0; t < n.length; t++)
    e += n.charCodeAt(t) == ga ? 8 - e % 8 : 1;
  return e;
}
const $m = new Map([
  [Cq, 0],
  [Rq, Qn],
  [Eq, xn],
  [Aq, xn | Qn],
  [_q, kn],
  [Xq, kn | Qn],
  [qq, kn | xn],
  [Zq, kn | xn | Qn],
  [Mq, wn],
  [Lq, wn | Qn],
  [Vq, wn | xn],
  [Bq, wn | xn | Qn],
  [Wq, wn | kn],
  [zq, wn | kn | Qn],
  [Dq, wn | kn | xn],
  [Iq, wn | kn | xn | Qn]
].map(([n, e]) => [n, e | _1])), fZ = new Ns({
  start: cZ,
  reduce(n, e, t, i) {
    return n.flags & Go && oZ.has(e) || (e == Tq || e == R1) && n.flags & _1 ? n.parent : n;
  },
  shift(n, e, t, i) {
    return e == $1 ? new Fo(n, hZ(i.read(i.pos, t.pos)), 0) : e == T1 ? n.parent : e == Oq || e == yq || e == Qq || e == C1 ? new Fo(n, 0, Go) : $m.has(e) ? new Fo(n, 0, $m.get(e) | n.flags & Go) : n;
  },
  hash(n) {
    return n.hash;
  }
}), uZ = new Ee((n) => {
  for (let e = 0; e < 5; e++) {
    if (n.next != "print".charCodeAt(e)) return;
    n.advance();
  }
  if (!/\w/.test(String.fromCharCode(n.next)))
    for (let e = 0; ; e++) {
      let t = n.peek(e);
      if (!(t == Iu || t == ga)) {
        t != Jq && t != eZ && t != $i && t != Ts && t != ju && n.acceptToken(aq);
        return;
      }
    }
}), dZ = new Ee((n, e) => {
  let { flags: t } = e.context, i = t & Qn ? A1 : E1, r = (t & xn) > 0, s = !(t & kn), o = (t & wn) > 0, l = n.pos;
  for (; !(n.next < 0); )
    if (o && n.next == Of)
      if (n.peek(1) == Of)
        n.advance(2);
      else {
        if (n.pos == l) {
          n.acceptToken(C1, 1);
          return;
        }
        break;
      }
    else if (s && n.next == Pm) {
      if (n.pos == l) {
        n.advance();
        let a = n.next;
        a >= 0 && (n.advance(), OZ(n, a)), n.acceptToken(dq);
        return;
      }
      break;
    } else if (n.next == Pm && !s && n.peek(1) > -1)
      n.advance(2);
    else if (n.next == i && (!r || n.peek(1) == i && n.peek(2) == i)) {
      if (n.pos == l) {
        n.acceptToken(wm, r ? 3 : 1);
        return;
      }
      break;
    } else if (n.next == $i) {
      if (r)
        n.advance();
      else if (n.pos == l) {
        n.acceptToken(wm);
        return;
      }
      break;
    } else
      n.advance();
  n.pos > l && n.acceptToken(uq);
});
function OZ(n, e) {
  if (e == tZ)
    for (let t = 0; t < 2 && n.next >= 48 && n.next <= 55; t++) n.advance();
  else if (e == nZ)
    for (let t = 0; t < 2 && Pc(n.next); t++) n.advance();
  else if (e == rZ)
    for (let t = 0; t < 4 && Pc(n.next); t++) n.advance();
  else if (e == sZ)
    for (let t = 0; t < 8 && Pc(n.next); t++) n.advance();
  else if (e == iZ && n.next == Of) {
    for (n.advance(); n.next >= 0 && n.next != vm && n.next != E1 && n.next != A1 && n.next != $i; ) n.advance();
    n.next == vm && n.advance();
  }
}
const pZ = Nt({
  'async "*" "**" FormatConversion FormatSpec': g.modifier,
  "for while if elif else try except finally return raise break continue with pass assert await yield match case": g.controlKeyword,
  "in not and or is del": g.operatorKeyword,
  "from def class global nonlocal lambda": g.definitionKeyword,
  import: g.moduleKeyword,
  "with as print": g.keyword,
  Boolean: g.bool,
  None: g.null,
  VariableName: g.variableName,
  "CallExpression/VariableName": g.function(g.variableName),
  "FunctionDefinition/VariableName": g.function(g.definition(g.variableName)),
  "ClassDefinition/VariableName": g.definition(g.className),
  PropertyName: g.propertyName,
  "CallExpression/MemberExpression/PropertyName": g.function(g.propertyName),
  Comment: g.lineComment,
  Number: g.number,
  String: g.string,
  FormatString: g.special(g.string),
  Escape: g.escape,
  UpdateOp: g.updateOperator,
  "ArithOp!": g.arithmeticOperator,
  BitOp: g.bitwiseOperator,
  CompareOp: g.compareOperator,
  AssignOp: g.definitionOperator,
  Ellipsis: g.punctuation,
  At: g.meta,
  "( )": g.paren,
  "[ ]": g.squareBracket,
  "{ }": g.brace,
  ".": g.derefOperator,
  ", ;": g.separator
}), mZ = { __proto__: null, await: 44, or: 54, and: 56, in: 60, not: 62, is: 64, if: 70, else: 72, lambda: 76, yield: 94, from: 96, async: 102, for: 104, None: 162, True: 164, False: 164, del: 178, pass: 182, break: 186, continue: 190, return: 194, raise: 202, import: 206, as: 208, global: 212, nonlocal: 214, assert: 218, type: 223, elif: 236, while: 240, try: 246, except: 248, finally: 250, with: 254, def: 258, class: 268, match: 279, case: 285 }, gZ = jt.deserialize({
  version: 14,
  states: "##jO`QeOOP$}OSOOO&WQtO'#HUOOQS'#Co'#CoOOQS'#Cp'#CpO'vQdO'#CnO*UQtO'#HTOOQS'#HU'#HUOOQS'#DU'#DUOOQS'#HT'#HTO*rQdO'#D_O+VQdO'#DfO+gQdO'#DjO+zOWO'#DuO,VOWO'#DvO.[QtO'#GuOOQS'#Gu'#GuO'vQdO'#GtO0ZQtO'#GtOOQS'#Eb'#EbO0rQdO'#EcOOQS'#Gs'#GsO0|QdO'#GrOOQV'#Gr'#GrO1XQdO'#FYOOQS'#G^'#G^O1^QdO'#FXOOQV'#IS'#ISOOQV'#Gq'#GqOOQV'#Fq'#FqQ`QeOOO'vQdO'#CqO1lQdO'#C}O1sQdO'#DRO2RQdO'#HYO2cQtO'#EVO'vQdO'#EWOOQS'#EY'#EYOOQS'#E['#E[OOQS'#E^'#E^O2wQdO'#E`O3_QdO'#EdO3rQdO'#EfO3zQtO'#EfO1XQdO'#EiO0rQdO'#ElO1XQdO'#EnO0rQdO'#EtO0rQdO'#EwO4VQdO'#EyO4^QdO'#FOO4iQdO'#EzO0rQdO'#FOO1XQdO'#FQO1XQdO'#FVO4nQdO'#F[P4uOdO'#GpPOOO)CBd)CBdOOQS'#Ce'#CeOOQS'#Cf'#CfOOQS'#Cg'#CgOOQS'#Ch'#ChOOQS'#Ci'#CiOOQS'#Cj'#CjOOQS'#Cl'#ClO'vQdO,59OO'vQdO,59OO'vQdO,59OO'vQdO,59OO'vQdO,59OO'vQdO,59OO5TQdO'#DoOOQS,5:Y,5:YO5hQdO'#HdOOQS,5:],5:]O5uQ!fO,5:]O5zQtO,59YO1lQdO,59bO1lQdO,59bO1lQdO,59bO8jQdO,59bO8oQdO,59bO8vQdO,59jO8}QdO'#HTO:TQdO'#HSOOQS'#HS'#HSOOQS'#D['#D[O:lQdO,59aO'vQdO,59aO:zQdO,59aOOQS,59y,59yO;PQdO,5:RO'vQdO,5:ROOQS,5:Q,5:QO;_QdO,5:QO;dQdO,5:XO'vQdO,5:XO'vQdO,5:VOOQS,5:U,5:UO;uQdO,5:UO;zQdO,5:WOOOW'#Fy'#FyO<POWO,5:aOOQS,5:a,5:aO<[QdO'#HwOOOW'#Dw'#DwOOOW'#Fz'#FzO<lOWO,5:bOOQS,5:b,5:bOOQS'#F}'#F}O<zQtO,5:iO?lQtO,5=`O@VQ#xO,5=`O@vQtO,5=`OOQS,5:},5:}OA_QeO'#GWOBqQdO,5;^OOQV,5=^,5=^OB|QtO'#IPOCkQdO,5;tOOQS-E:[-E:[OOQV,5;s,5;sO4dQdO'#FQOOQV-E9o-E9oOCsQtO,59]OEzQtO,59iOFeQdO'#HVOFpQdO'#HVO1XQdO'#HVOF{QdO'#DTOGTQdO,59mOGYQdO'#HZO'vQdO'#HZO0rQdO,5=tOOQS,5=t,5=tO0rQdO'#EROOQS'#ES'#ESOGwQdO'#GPOHXQdO,58|OHXQdO,58|O*xQdO,5:oOHgQtO'#H]OOQS,5:r,5:rOOQS,5:z,5:zOHzQdO,5;OOI]QdO'#IOO1XQdO'#H}OOQS,5;Q,5;QOOQS'#GT'#GTOIqQtO,5;QOJPQdO,5;QOJUQdO'#IQOOQS,5;T,5;TOJdQdO'#H|OOQS,5;W,5;WOJuQdO,5;YO4iQdO,5;`O4iQdO,5;cOJ}QtO'#ITO'vQdO'#ITOKXQdO,5;eO4VQdO,5;eO0rQdO,5;jO1XQdO,5;lOK^QeO'#EuOLjQgO,5;fO!!kQdO'#IUO4iQdO,5;jO!!vQdO,5;lO!#OQdO,5;qO!#ZQtO,5;vO'vQdO,5;vPOOO,5=[,5=[P!#bOSO,5=[P!#jOdO,5=[O!&bQtO1G.jO!&iQtO1G.jO!)YQtO1G.jO!)dQtO1G.jO!+}QtO1G.jO!,bQtO1G.jO!,uQdO'#HcO!-TQtO'#GuO0rQdO'#HcO!-_QdO'#HbOOQS,5:Z,5:ZO!-gQdO,5:ZO!-lQdO'#HeO!-wQdO'#HeO!.[QdO,5>OOOQS'#Ds'#DsOOQS1G/w1G/wOOQS1G.|1G.|O!/[QtO1G.|O!/cQtO1G.|O1lQdO1G.|O!0OQdO1G/UOOQS'#DZ'#DZO0rQdO,59tOOQS1G.{1G.{O!0VQdO1G/eO!0gQdO1G/eO!0oQdO1G/fO'vQdO'#H[O!0tQdO'#H[O!0yQtO1G.{O!1ZQdO,59iO!2aQdO,5=zO!2qQdO,5=zO!2yQdO1G/mO!3OQtO1G/mOOQS1G/l1G/lO!3`QdO,5=uO!4VQdO,5=uO0rQdO1G/qO!4tQdO1G/sO!4yQtO1G/sO!5ZQtO1G/qOOQS1G/p1G/pOOQS1G/r1G/rOOOW-E9w-E9wOOQS1G/{1G/{O!5kQdO'#HxO0rQdO'#HxO!5|QdO,5>cOOOW-E9x-E9xOOQS1G/|1G/|OOQS-E9{-E9{O!6[Q#xO1G2zO!6{QtO1G2zO'vQdO,5<jOOQS,5<j,5<jOOQS-E9|-E9|OOQS,5<r,5<rOOQS-E:U-E:UOOQV1G0x1G0xO1XQdO'#GRO!7dQtO,5>kOOQS1G1`1G1`O!8RQdO1G1`OOQS'#DV'#DVO0rQdO,5=qOOQS,5=q,5=qO!8WQdO'#FrO!8cQdO,59oO!8kQdO1G/XO!8uQtO,5=uOOQS1G3`1G3`OOQS,5:m,5:mO!9fQdO'#GtOOQS,5<k,5<kOOQS-E9}-E9}O!9wQdO1G.hOOQS1G0Z1G0ZO!:VQdO,5=wO!:gQdO,5=wO0rQdO1G0jO0rQdO1G0jO!:xQdO,5>jO!;ZQdO,5>jO1XQdO,5>jO!;lQdO,5>iOOQS-E:R-E:RO!;qQdO1G0lO!;|QdO1G0lO!<RQdO,5>lO!<aQdO,5>lO!<oQdO,5>hO!=VQdO,5>hO!=hQdO'#EpO0rQdO1G0tO!=sQdO1G0tO!=xQgO1G0zO!AvQgO1G0}O!EqQdO,5>oO!E{QdO,5>oO!FTQtO,5>oO0rQdO1G1PO!F_QdO1G1PO4iQdO1G1UO!!vQdO1G1WOOQV,5;a,5;aO!FdQfO,5;aO!FiQgO1G1QO!JjQdO'#GZO4iQdO1G1QO4iQdO1G1QO!JzQdO,5>pO!KXQdO,5>pO1XQdO,5>pOOQV1G1U1G1UO!KaQdO'#FSO!KrQ!fO1G1WO!KzQdO1G1WOOQV1G1]1G1]O4iQdO1G1]O!LPQdO1G1]O!LXQdO'#F^OOQV1G1b1G1bO!#ZQtO1G1bPOOO1G2v1G2vP!L^OSO1G2vOOQS,5=},5=}OOQS'#Dp'#DpO0rQdO,5=}O!LfQdO,5=|O!LyQdO,5=|OOQS1G/u1G/uO!MRQdO,5>PO!McQdO,5>PO!MkQdO,5>PO!NOQdO,5>PO!N`QdO,5>POOQS1G3j1G3jOOQS7+$h7+$hO!8kQdO7+$pO#!RQdO1G.|O#!YQdO1G.|OOQS1G/`1G/`OOQS,5<`,5<`O'vQdO,5<`OOQS7+%P7+%PO#!aQdO7+%POOQS-E9r-E9rOOQS7+%Q7+%QO#!qQdO,5=vO'vQdO,5=vOOQS7+$g7+$gO#!vQdO7+%PO##OQdO7+%QO##TQdO1G3fOOQS7+%X7+%XO##eQdO1G3fO##mQdO7+%XOOQS,5<_,5<_O'vQdO,5<_O##rQdO1G3aOOQS-E9q-E9qO#$iQdO7+%]OOQS7+%_7+%_O#$wQdO1G3aO#%fQdO7+%_O#%kQdO1G3gO#%{QdO1G3gO#&TQdO7+%]O#&YQdO,5>dO#&sQdO,5>dO#&sQdO,5>dOOQS'#Dx'#DxO#'UO&jO'#DzO#'aO`O'#HyOOOW1G3}1G3}O#'fQdO1G3}O#'nQdO1G3}O#'yQ#xO7+(fO#(jQtO1G2UP#)TQdO'#GOOOQS,5<m,5<mOOQS-E:P-E:POOQS7+&z7+&zOOQS1G3]1G3]OOQS,5<^,5<^OOQS-E9p-E9pOOQS7+$s7+$sO#)bQdO,5=`O#){QdO,5=`O#*^QtO,5<aO#*qQdO1G3cOOQS-E9s-E9sOOQS7+&U7+&UO#+RQdO7+&UO#+aQdO,5<nO#+uQdO1G4UOOQS-E:Q-E:QO#,WQdO1G4UOOQS1G4T1G4TOOQS7+&W7+&WO#,iQdO7+&WOOQS,5<p,5<pO#,tQdO1G4WOOQS-E:S-E:SOOQS,5<l,5<lO#-SQdO1G4SOOQS-E:O-E:OO1XQdO'#EqO#-jQdO'#EqO#-uQdO'#IRO#-}QdO,5;[OOQS7+&`7+&`O0rQdO7+&`O#.SQgO7+&fO!JmQdO'#GXO4iQdO7+&fO4iQdO7+&iO#2QQtO,5<tO'vQdO,5<tO#2[QdO1G4ZOOQS-E:W-E:WO#2fQdO1G4ZO4iQdO7+&kO0rQdO7+&kOOQV7+&p7+&pO!KrQ!fO7+&rO!KzQdO7+&rO`QeO1G0{OOQV-E:X-E:XO4iQdO7+&lO4iQdO7+&lOOQV,5<u,5<uO#2nQdO,5<uO!JmQdO,5<uOOQV7+&l7+&lO#2yQgO7+&lO#6tQdO,5<vO#7PQdO1G4[OOQS-E:Y-E:YO#7^QdO1G4[O#7fQdO'#IWO#7tQdO'#IWO1XQdO'#IWOOQS'#IW'#IWO#8PQdO'#IVOOQS,5;n,5;nO#8XQdO,5;nO0rQdO'#FUOOQV7+&r7+&rO4iQdO7+&rOOQV7+&w7+&wO4iQdO7+&wO#8^QfO,5;xOOQV7+&|7+&|POOO7+(b7+(bO#8cQdO1G3iOOQS,5<c,5<cO#8qQdO1G3hOOQS-E9u-E9uO#9UQdO,5<dO#9aQdO,5<dO#9tQdO1G3kOOQS-E9v-E9vO#:UQdO1G3kO#:^QdO1G3kO#:nQdO1G3kO#:UQdO1G3kOOQS<<H[<<H[O#:yQtO1G1zOOQS<<Hk<<HkP#;WQdO'#FtO8vQdO1G3bO#;eQdO1G3bO#;jQdO<<HkOOQS<<Hl<<HlO#;zQdO7+)QOOQS<<Hs<<HsO#<[QtO1G1yP#<{QdO'#FsO#=YQdO7+)RO#=jQdO7+)RO#=rQdO<<HwO#=wQdO7+({OOQS<<Hy<<HyO#>nQdO,5<bO'vQdO,5<bOOQS-E9t-E9tOOQS<<Hw<<HwOOQS,5<g,5<gO0rQdO,5<gO#>sQdO1G4OOOQS-E9y-E9yO#?^QdO1G4OO<[QdO'#H{OOOO'#D{'#D{OOOO'#F|'#F|O#?oO&jO,5:fOOOW,5>e,5>eOOOW7+)i7+)iO#?zQdO7+)iO#@SQdO1G2zO#@mQdO1G2zP'vQdO'#FuO0rQdO<<IpO1XQdO1G2YP1XQdO'#GSO#AOQdO7+)pO#AaQdO7+)pOOQS<<Ir<<IrP1XQdO'#GUP0rQdO'#GQOOQS,5;],5;]O#ArQdO,5>mO#BQQdO,5>mOOQS1G0v1G0vOOQS<<Iz<<IzOOQV-E:V-E:VO4iQdO<<JQOOQV,5<s,5<sO4iQdO,5<sOOQV<<JQ<<JQOOQV<<JT<<JTO#BYQtO1G2`P#BdQdO'#GYO#BkQdO7+)uO#BuQgO<<JVO4iQdO<<JVOOQV<<J^<<J^O4iQdO<<J^O!KrQ!fO<<J^O#FpQgO7+&gOOQV<<JW<<JWO#FzQgO<<JWOOQV1G2a1G2aO1XQdO1G2aO#JuQdO1G2aO4iQdO<<JWO1XQdO1G2bP0rQdO'#G[O#KQQdO7+)vO#K_QdO7+)vOOQS'#FT'#FTO0rQdO,5>rO#KgQdO,5>rO#KrQdO,5>rO#K}QdO,5>qO#L`QdO,5>qOOQS1G1Y1G1YOOQS,5;p,5;pOOQV<<Jc<<JcO#LhQdO1G1dOOQS7+)T7+)TP#LmQdO'#FwO#L}QdO1G2OO#MbQdO1G2OO#MrQdO1G2OP#M}QdO'#FxO#N[QdO7+)VO#NlQdO7+)VO#NlQdO7+)VO#NtQdO7+)VO$ UQdO7+(|O8vQdO7+(|OOQSAN>VAN>VO$ oQdO<<LmOOQSAN>cAN>cO0rQdO1G1|O$!PQtO1G1|P$!ZQdO'#FvOOQS1G2R1G2RP$!hQdO'#F{O$!uQdO7+)jO$#`QdO,5>gOOOO-E9z-E9zOOOW<<MT<<MTO$#nQdO7+(fOOQSAN?[AN?[OOQS7+'t7+'tO$$XQdO<<M[OOQS,5<q,5<qO$$jQdO1G4XOOQS-E:T-E:TOOQVAN?lAN?lOOQV1G2_1G2_O4iQdOAN?qO$$xQgOAN?qOOQVAN?xAN?xO4iQdOAN?xOOQV<<JR<<JRO4iQdOAN?rO4iQdO7+'{OOQV7+'{7+'{O1XQdO7+'{OOQVAN?rAN?rOOQS7+'|7+'|O$(sQdO<<MbOOQS1G4^1G4^O0rQdO1G4^OOQS,5<w,5<wO$)QQdO1G4]OOQS-E:Z-E:ZOOQU'#G_'#G_O$)cQfO7+'OO$)nQdO'#F_O$*uQdO7+'jO$+VQdO7+'jOOQS7+'j7+'jO$+bQdO<<LqO$+rQdO<<LqO$+rQdO<<LqO$+zQdO'#H^OOQS<<Lh<<LhO$,UQdO<<LhOOQS7+'h7+'hOOQS'#D|'#D|OOOO1G4R1G4RO$,oQdO1G4RO$,wQdO1G4RP!=hQdO'#GVOOQVG25]G25]O4iQdOG25]OOQVG25dG25dOOQVG25^G25^OOQV<<Kg<<KgO4iQdO<<KgOOQS7+)x7+)xP$-SQdO'#G]OOQU-E:]-E:]OOQV<<Jj<<JjO$-vQtO'#FaOOQS'#Fc'#FcO$.WQdO'#FbO$.xQdO'#FbOOQS'#Fb'#FbO$.}QdO'#IYO$)nQdO'#FiO$)nQdO'#FiO$/fQdO'#FjO$)nQdO'#FkO$/mQdO'#IZOOQS'#IZ'#IZO$0[QdO,5;yOOQS<<KU<<KUO$0dQdO<<KUO$0tQdOANB]O$1UQdOANB]O$1^QdO'#H_OOQS'#H_'#H_O1sQdO'#DcO$1wQdO,5=xOOQSANBSANBSOOOO7+)m7+)mO$2`QdO7+)mOOQVLD*wLD*wOOQVANARANARO5uQ!fO'#GaO$2hQtO,5<SO$)nQdO'#FmOOQS,5<W,5<WOOQS'#Fd'#FdO$3YQdO,5;|O$3_QdO,5;|OOQS'#Fg'#FgO$)nQdO'#G`O$4PQdO,5<QO$4kQdO,5>tO$4{QdO,5>tO1XQdO,5<PO$5^QdO,5<TO$5cQdO,5<TO$)nQdO'#I[O$5hQdO'#I[O$5mQdO,5<UOOQS,5<V,5<VO0rQdO'#FpOOQU1G1e1G1eO4iQdO1G1eOOQSAN@pAN@pO$5rQdOG27wO$6SQdO,59}OOQS1G3d1G3dOOOO<<MX<<MXOOQS,5<{,5<{OOQS-E:_-E:_O$6XQtO'#FaO$6`QdO'#I]O$6nQdO'#I]O$6vQdO,5<XOOQS1G1h1G1hO$6{QdO1G1hO$7QQdO,5<zOOQS-E:^-E:^O$7lQdO,5=OO$8TQdO1G4`OOQS-E:b-E:bOOQS1G1k1G1kOOQS1G1o1G1oO$8eQdO,5>vO$)nQdO,5>vOOQS1G1p1G1pOOQS,5<[,5<[OOQU7+'P7+'PO$+zQdO1G/iO$)nQdO,5<YO$8sQdO,5>wO$8zQdO,5>wOOQS1G1s1G1sOOQS7+'S7+'SP$)nQdO'#GdO$9SQdO1G4bO$9^QdO1G4bO$9fQdO1G4bOOQS7+%T7+%TO$9tQdO1G1tO$:SQtO'#FaO$:ZQdO,5<}OOQS,5<},5<}O$:iQdO1G4cOOQS-E:a-E:aO$)nQdO,5<|O$:pQdO,5<|O$:uQdO7+)|OOQS-E:`-E:`O$;PQdO7+)|O$)nQdO,5<ZP$)nQdO'#GcO$;XQdO1G2hO$)nQdO1G2hP$;gQdO'#GbO$;nQdO<<MhO$;xQdO1G1uO$<WQdO7+(SO8vQdO'#C}O8vQdO,59bO8vQdO,59bO8vQdO,59bO$<fQtO,5=`O8vQdO1G.|O0rQdO1G/XO0rQdO7+$pP$<yQdO'#GOO'vQdO'#GtO$=WQdO,59bO$=]QdO,59bO$=dQdO,59mO$=iQdO1G/UO1sQdO'#DRO8vQdO,59j",
  stateData: "$>S~O%cOS%^OSSOS%]PQ~OPdOVaOfoOhYOopOs!POvqO!PrO!Q{O!T!SO!U!RO!XZO!][O!h`O!r`O!s`O!t`O!{tO!}uO#PvO#RwO#TxO#XyO#ZzO#^|O#_|O#a}O#c!OO#l!QO#o!TO#s!UO#u!VO#z!WO#}hO$P!XO%oRO%pRO%tSO%uWO&Z]O&[]O&]]O&^]O&_]O&`]O&a]O&b]O&c^O&d^O&e^O&f^O&g^O&h^O&i^O&j^O~O%]!YO~OV!aO_!aOa!bOh!iO!X!kO!f!mO%j![O%k!]O%l!^O%m!_O%n!_O%o!`O%p!`O%q!aO%r!aO%s!aO~Ok%xXl%xXm%xXn%xXo%xXp%xXs%xXz%xX{%xX!x%xX#g%xX%[%xX%_%xX%z%xXg%xX!T%xX!U%xX%{%xX!W%xX![%xX!Q%xX#[%xXt%xX!m%xX~P%SOfoOhYO!XZO!][O!h`O!r`O!s`O!t`O%oRO%pRO%tSO%uWO&Z]O&[]O&]]O&^]O&_]O&`]O&a]O&b]O&c^O&d^O&e^O&f^O&g^O&h^O&i^O&j^O~Oz%wX{%wX#g%wX%[%wX%_%wX%z%wX~Ok!pOl!qOm!oOn!oOo!rOp!sOs!tO!x%wX~P)pOV!zOg!|Oo0cOv0qO!PrO~P'vOV#OOo0cOv0qO!W#PO~P'vOV#SOa#TOo0cOv0qO![#UO~P'vOQ#XO%`#XO%a#ZO~OQ#^OR#[O%`#^O%a#`O~OV%iX_%iXa%iXh%iXk%iXl%iXm%iXn%iXo%iXp%iXs%iXz%iX!X%iX!f%iX%j%iX%k%iX%l%iX%m%iX%n%iX%o%iX%p%iX%q%iX%r%iX%s%iXg%iX!T%iX!U%iX~O&Z]O&[]O&]]O&^]O&_]O&`]O&a]O&b]O&c^O&d^O&e^O&f^O&g^O&h^O&i^O&j^O{%iX!x%iX#g%iX%[%iX%_%iX%z%iX%{%iX!W%iX![%iX!Q%iX#[%iXt%iX!m%iX~P,eOz#dO{%hX!x%hX#g%hX%[%hX%_%hX%z%hX~Oo0cOv0qO~P'vO#g#gO%[#iO%_#iO~O%uWO~O!T#nO#u!VO#z!WO#}hO~OopO~P'vOV#sOa#tO%uWO{wP~OV#xOo0cOv0qO!Q#yO~P'vO{#{O!x$QO%z#|O#g!yX%[!yX%_!yX~OV#xOo0cOv0qO#g#SX%[#SX%_#SX~P'vOo0cOv0qO#g#WX%[#WX%_#WX~P'vOh$WO%uWO~O!f$YO!r$YO%uWO~OV$eO~P'vO!U$gO#s$hO#u$iO~O{$jO~OV$qO~P'vOS$sO%[$rO%_$rO%c$tO~OV$}Oa$}Og%POo0cOv0qO~P'vOo0cOv0qO{%SO~P'vO&Y%UO~Oa!bOh!iO!X!kO!f!mOVba_bakbalbambanbaobapbasbazba{ba!xba#gba%[ba%_ba%jba%kba%lba%mba%nba%oba%pba%qba%rba%sba%zbagba!Tba!Uba%{ba!Wba![ba!Qba#[batba!mba~On%ZO~Oo%ZO~P'vOo0cO~P'vOk0eOl0fOm0dOn0dOo0mOp0nOs0rOg%wX!T%wX!U%wX%{%wX!W%wX![%wX!Q%wX#[%wX!m%wX~P)pO%{%]Og%vXz%vX!T%vX!U%vX!W%vX{%vX~Og%_Oz%`O!T%dO!U%cO~Og%_O~Oz%gO!T%dO!U%cO!W&SX~O!W%kO~Oz%lO{%nO!T%dO!U%cO![%}X~O![%rO~O![%sO~OQ#XO%`#XO%a%uO~OV%wOo0cOv0qO!PrO~P'vOQ#^OR#[O%`#^O%a%zO~OV!qa_!qaa!qah!qak!qal!qam!qan!qao!qap!qas!qaz!qa{!qa!X!qa!f!qa!x!qa#g!qa%[!qa%_!qa%j!qa%k!qa%l!qa%m!qa%n!qa%o!qa%p!qa%q!qa%r!qa%s!qa%z!qag!qa!T!qa!U!qa%{!qa!W!qa![!qa!Q!qa#[!qat!qa!m!qa~P#yOz%|O{%ha!x%ha#g%ha%[%ha%_%ha%z%ha~P%SOV&OOopOvqO{%ha!x%ha#g%ha%[%ha%_%ha%z%ha~P'vOz%|O{%ha!x%ha#g%ha%[%ha%_%ha%z%ha~OPdOVaOopOvqO!PrO!Q{O!{tO!}uO#PvO#RwO#TxO#XyO#ZzO#^|O#_|O#a}O#c!OO#g$zX%[$zX%_$zX~P'vO#g#gO%[&TO%_&TO~O!f&UOh&sX%[&sXz&sX#[&sX#g&sX%_&sX#Z&sXg&sX~Oh!iO%[&WO~Okealeameaneaoeapeaseazea{ea!xea#gea%[ea%_ea%zeagea!Tea!Uea%{ea!Wea![ea!Qea#[eatea!mea~P%SOsqazqa{qa#gqa%[qa%_qa%zqa~Ok!pOl!qOm!oOn!oOo!rOp!sO!xqa~PEcO%z&YOz%yX{%yX~O%uWOz%yX{%yX~Oz&]O{wX~O{&_O~Oz%lO#g%}X%[%}X%_%}Xg%}X{%}X![%}X!m%}X%z%}X~OV0lOo0cOv0qO!PrO~P'vO%z#|O#gUa%[Ua%_Ua~Oz&hO#g&PX%[&PX%_&PXn&PX~P%SOz&kO!Q&jO#g#Wa%[#Wa%_#Wa~Oz&lO#[&nO#g&rX%[&rX%_&rXg&rX~O!f$YO!r$YO#Z&qO%uWO~O#Z&qO~Oz&sO#g&tX%[&tX%_&tX~Oz&uO#g&pX%[&pX%_&pX{&pX~O!X&wO%z&xO~Oz&|On&wX~P%SOn'PO~OPdOVaOopOvqO!PrO!Q{O!{tO!}uO#PvO#RwO#TxO#XyO#ZzO#^|O#_|O#a}O#c!OO%['UO~P'vOt'YO#p'WO#q'XOP#naV#naf#nah#nao#nas#nav#na!P#na!Q#na!T#na!U#na!X#na!]#na!h#na!r#na!s#na!t#na!{#na!}#na#P#na#R#na#T#na#X#na#Z#na#^#na#_#na#a#na#c#na#l#na#o#na#s#na#u#na#z#na#}#na$P#na%X#na%o#na%p#na%t#na%u#na&Z#na&[#na&]#na&^#na&_#na&`#na&a#na&b#na&c#na&d#na&e#na&f#na&g#na&h#na&i#na&j#na%Z#na%_#na~Oz'ZO#[']O{&xX~Oh'_O!X&wO~Oh!iO{$jO!X&wO~O{'eO~P%SO%['hO%_'hO~OS'iO%['hO%_'hO~OV!aO_!aOa!bOh!iO!X!kO!f!mO%l!^O%m!_O%n!_O%o!`O%p!`O%q!aO%r!aO%s!aOkWilWimWinWioWipWisWizWi{Wi!xWi#gWi%[Wi%_Wi%jWi%zWigWi!TWi!UWi%{Wi!WWi![Wi!QWi#[WitWi!mWi~O%k!]O~P!#uO%kWi~P!#uOV!aO_!aOa!bOh!iO!X!kO!f!mO%o!`O%p!`O%q!aO%r!aO%s!aOkWilWimWinWioWipWisWizWi{Wi!xWi#gWi%[Wi%_Wi%jWi%kWi%lWi%zWigWi!TWi!UWi%{Wi!WWi![Wi!QWi#[WitWi!mWi~O%m!_O%n!_O~P!&pO%mWi%nWi~P!&pOa!bOh!iO!X!kO!f!mOkWilWimWinWioWipWisWizWi{Wi!xWi#gWi%[Wi%_Wi%jWi%kWi%lWi%mWi%nWi%oWi%pWi%zWigWi!TWi!UWi%{Wi!WWi![Wi!QWi#[WitWi!mWi~OV!aO_!aO%q!aO%r!aO%s!aO~P!)nOVWi_Wi%qWi%rWi%sWi~P!)nO!T%dO!U%cOg&VXz&VX~O%z'kO%{'kO~P,eOz'mOg&UX~Og'oO~Oz'pO{'rO!W&XX~Oo0cOv0qOz'pO{'sO!W&XX~P'vO!W'uO~Om!oOn!oOo!rOp!sOkjisjizji{ji!xji#gji%[ji%_ji%zji~Ol!qO~P!.aOlji~P!.aOk0eOl0fOm0dOn0dOo0mOp0nO~Ot'wO~P!/jOV'|Og'}Oo0cOv0qO~P'vOg'}Oz(OO~Og(QO~O!U(SO~Og(TOz(OO!T%dO!U%cO~P%SOk0eOl0fOm0dOn0dOo0mOp0nOgqa!Tqa!Uqa%{qa!Wqa![qa!Qqa#[qatqa!mqa~PEcOV'|Oo0cOv0qO!W&Sa~P'vOz(WO!W&Sa~O!W(XO~Oz(WO!T%dO!U%cO!W&Sa~P%SOV(]Oo0cOv0qO![%}a#g%}a%[%}a%_%}ag%}a{%}a!m%}a%z%}a~P'vOz(^O![%}a#g%}a%[%}a%_%}ag%}a{%}a!m%}a%z%}a~O![(aO~Oz(^O!T%dO!U%cO![%}a~P%SOz(dO!T%dO!U%cO![&Ta~P%SOz(gO{&lX![&lX!m&lX%z&lX~O{(kO![(mO!m(nO%z(jO~OV&OOopOvqO{%hi!x%hi#g%hi%[%hi%_%hi%z%hi~P'vOz(pO{%hi!x%hi#g%hi%[%hi%_%hi%z%hi~O!f&UOh&sa%[&saz&sa#[&sa#g&sa%_&sa#Z&sag&sa~O%[(uO~OV#sOa#tO%uWO~Oz&]O{wa~OopOvqO~P'vOz(^O#g%}a%[%}a%_%}ag%}a{%}a![%}a!m%}a%z%}a~P%SOz(zO#g%hX%[%hX%_%hX%z%hX~O%z#|O#gUi%[Ui%_Ui~O#g&Pa%[&Pa%_&Pan&Pa~P'vOz(}O#g&Pa%[&Pa%_&Pan&Pa~O%uWO#g&ra%[&ra%_&rag&ra~Oz)SO#g&ra%[&ra%_&rag&ra~Og)VO~OV)WOh$WO%uWO~O#Z)XO~O%uWO#g&ta%[&ta%_&ta~Oz)ZO#g&ta%[&ta%_&ta~Oo0cOv0qO#g&pa%[&pa%_&pa{&pa~P'vOz)^O#g&pa%[&pa%_&pa{&pa~OV)`Oa)`O%uWO~O%z)eO~Ot)hO#j)gOP#hiV#hif#hih#hio#his#hiv#hi!P#hi!Q#hi!T#hi!U#hi!X#hi!]#hi!h#hi!r#hi!s#hi!t#hi!{#hi!}#hi#P#hi#R#hi#T#hi#X#hi#Z#hi#^#hi#_#hi#a#hi#c#hi#l#hi#o#hi#s#hi#u#hi#z#hi#}#hi$P#hi%X#hi%o#hi%p#hi%t#hi%u#hi&Z#hi&[#hi&]#hi&^#hi&_#hi&`#hi&a#hi&b#hi&c#hi&d#hi&e#hi&f#hi&g#hi&h#hi&i#hi&j#hi%Z#hi%_#hi~Ot)iOP#kiV#kif#kih#kio#kis#kiv#ki!P#ki!Q#ki!T#ki!U#ki!X#ki!]#ki!h#ki!r#ki!s#ki!t#ki!{#ki!}#ki#P#ki#R#ki#T#ki#X#ki#Z#ki#^#ki#_#ki#a#ki#c#ki#l#ki#o#ki#s#ki#u#ki#z#ki#}#ki$P#ki%X#ki%o#ki%p#ki%t#ki%u#ki&Z#ki&[#ki&]#ki&^#ki&_#ki&`#ki&a#ki&b#ki&c#ki&d#ki&e#ki&f#ki&g#ki&h#ki&i#ki&j#ki%Z#ki%_#ki~OV)kOn&wa~P'vOz)lOn&wa~Oz)lOn&wa~P%SOn)pO~O%Y)tO~Ot)wO#p'WO#q)vOP#niV#nif#nih#nio#nis#niv#ni!P#ni!Q#ni!T#ni!U#ni!X#ni!]#ni!h#ni!r#ni!s#ni!t#ni!{#ni!}#ni#P#ni#R#ni#T#ni#X#ni#Z#ni#^#ni#_#ni#a#ni#c#ni#l#ni#o#ni#s#ni#u#ni#z#ni#}#ni$P#ni%X#ni%o#ni%p#ni%t#ni%u#ni&Z#ni&[#ni&]#ni&^#ni&_#ni&`#ni&a#ni&b#ni&c#ni&d#ni&e#ni&f#ni&g#ni&h#ni&i#ni&j#ni%Z#ni%_#ni~OV)zOo0cOv0qO{$jO~P'vOo0cOv0qO{&xa~P'vOz*OO{&xa~OV*SOa*TOg*WO%q*UO%uWO~O{$jO&{*YO~Oh'_O~Oh!iO{$jO~O%[*_O~O%[*aO%_*aO~OV$}Oa$}Oo0cOv0qOg&Ua~P'vOz*dOg&Ua~Oo0cOv0qO{*gO!W&Xa~P'vOz*hO!W&Xa~Oo0cOv0qOz*hO{*kO!W&Xa~P'vOo0cOv0qOz*hO!W&Xa~P'vOz*hO{*kO!W&Xa~Om0dOn0dOo0mOp0nOgjikjisjizji!Tji!Uji%{ji!Wji{ji![ji#gji%[ji%_ji!Qji#[jitji!mji%zji~Ol0fO~P!NkOlji~P!NkOV'|Og*pOo0cOv0qO~P'vOn*rO~Og*pOz*tO~Og*uO~OV'|Oo0cOv0qO!W&Si~P'vOz*vO!W&Si~O!W*wO~OV(]Oo0cOv0qO![%}i#g%}i%[%}i%_%}ig%}i{%}i!m%}i%z%}i~P'vOz*zO!T%dO!U%cO![&Ti~Oz*}O![%}i#g%}i%[%}i%_%}ig%}i{%}i!m%}i%z%}i~O![+OO~Oa+QOo0cOv0qO![&Ti~P'vOz*zO![&Ti~O![+SO~OV+UOo0cOv0qO{&la![&la!m&la%z&la~P'vOz+VO{&la![&la!m&la%z&la~O!]+YO&n+[O![!nX~O![+^O~O{(kO![+_O~O{(kO![+_O!m+`O~OV&OOopOvqO{%hq!x%hq#g%hq%[%hq%_%hq%z%hq~P'vOz$ri{$ri!x$ri#g$ri%[$ri%_$ri%z$ri~P%SOV&OOopOvqO~P'vOV&OOo0cOv0qO#g%ha%[%ha%_%ha%z%ha~P'vOz+aO#g%ha%[%ha%_%ha%z%ha~Oz$ia#g$ia%[$ia%_$ian$ia~P%SO#g&Pi%[&Pi%_&Pin&Pi~P'vOz+dO#g#Wq%[#Wq%_#Wq~O#[+eOz$va#g$va%[$va%_$vag$va~O%uWO#g&ri%[&ri%_&rig&ri~Oz+gO#g&ri%[&ri%_&rig&ri~OV+iOh$WO%uWO~O%uWO#g&ti%[&ti%_&ti~Oo0cOv0qO#g&pi%[&pi%_&pi{&pi~P'vO{#{Oz#eX!W#eX~Oz+mO!W&uX~O!W+oO~Ot+rO#j)gOP#hqV#hqf#hqh#hqo#hqs#hqv#hq!P#hq!Q#hq!T#hq!U#hq!X#hq!]#hq!h#hq!r#hq!s#hq!t#hq!{#hq!}#hq#P#hq#R#hq#T#hq#X#hq#Z#hq#^#hq#_#hq#a#hq#c#hq#l#hq#o#hq#s#hq#u#hq#z#hq#}#hq$P#hq%X#hq%o#hq%p#hq%t#hq%u#hq&Z#hq&[#hq&]#hq&^#hq&_#hq&`#hq&a#hq&b#hq&c#hq&d#hq&e#hq&f#hq&g#hq&h#hq&i#hq&j#hq%Z#hq%_#hq~On$|az$|a~P%SOV)kOn&wi~P'vOz+yOn&wi~Oz,TO{$jO#[,TO~O#q,VOP#nqV#nqf#nqh#nqo#nqs#nqv#nq!P#nq!Q#nq!T#nq!U#nq!X#nq!]#nq!h#nq!r#nq!s#nq!t#nq!{#nq!}#nq#P#nq#R#nq#T#nq#X#nq#Z#nq#^#nq#_#nq#a#nq#c#nq#l#nq#o#nq#s#nq#u#nq#z#nq#}#nq$P#nq%X#nq%o#nq%p#nq%t#nq%u#nq&Z#nq&[#nq&]#nq&^#nq&_#nq&`#nq&a#nq&b#nq&c#nq&d#nq&e#nq&f#nq&g#nq&h#nq&i#nq&j#nq%Z#nq%_#nq~O#[,WOz%Oa{%Oa~Oo0cOv0qO{&xi~P'vOz,YO{&xi~O{#{O%z,[Og&zXz&zX~O%uWOg&zXz&zX~Oz,`Og&yX~Og,bO~O%Y,eO~O!T%dO!U%cOg&Viz&Vi~OV$}Oa$}Oo0cOv0qOg&Ui~P'vO{,hOz$la!W$la~Oo0cOv0qO{,iOz$la!W$la~P'vOo0cOv0qO{*gO!W&Xi~P'vOz,lO!W&Xi~Oo0cOv0qOz,lO!W&Xi~P'vOz,lO{,oO!W&Xi~Og$hiz$hi!W$hi~P%SOV'|Oo0cOv0qO~P'vOn,qO~OV'|Og,rOo0cOv0qO~P'vOV'|Oo0cOv0qO!W&Sq~P'vOz$gi![$gi#g$gi%[$gi%_$gig$gi{$gi!m$gi%z$gi~P%SOV(]Oo0cOv0qO~P'vOa+QOo0cOv0qO![&Tq~P'vOz,sO![&Tq~O![,tO~OV(]Oo0cOv0qO![%}q#g%}q%[%}q%_%}qg%}q{%}q!m%}q%z%}q~P'vO{,uO~OV+UOo0cOv0qO{&li![&li!m&li%z&li~P'vOz,zO{&li![&li!m&li%z&li~O!]+YO&n+[O![!na~O{(kO![,}O~OV&OOo0cOv0qO#g%hi%[%hi%_%hi%z%hi~P'vOz-OO#g%hi%[%hi%_%hi%z%hi~O%uWO#g&rq%[&rq%_&rqg&rq~Oz-RO#g&rq%[&rq%_&rqg&rq~OV)`Oa)`O%uWO!W&ua~Oz-TO!W&ua~On$|iz$|i~P%SOV)kO~P'vOV)kOn&wq~P'vOt-XOP#myV#myf#myh#myo#mys#myv#my!P#my!Q#my!T#my!U#my!X#my!]#my!h#my!r#my!s#my!t#my!{#my!}#my#P#my#R#my#T#my#X#my#Z#my#^#my#_#my#a#my#c#my#l#my#o#my#s#my#u#my#z#my#}#my$P#my%X#my%o#my%p#my%t#my%u#my&Z#my&[#my&]#my&^#my&_#my&`#my&a#my&b#my&c#my&d#my&e#my&f#my&g#my&h#my&i#my&j#my%Z#my%_#my~O%Z-]O%_-]O~P`O#q-^OP#nyV#nyf#nyh#nyo#nys#nyv#ny!P#ny!Q#ny!T#ny!U#ny!X#ny!]#ny!h#ny!r#ny!s#ny!t#ny!{#ny!}#ny#P#ny#R#ny#T#ny#X#ny#Z#ny#^#ny#_#ny#a#ny#c#ny#l#ny#o#ny#s#ny#u#ny#z#ny#}#ny$P#ny%X#ny%o#ny%p#ny%t#ny%u#ny&Z#ny&[#ny&]#ny&^#ny&_#ny&`#ny&a#ny&b#ny&c#ny&d#ny&e#ny&f#ny&g#ny&h#ny&i#ny&j#ny%Z#ny%_#ny~Oz-aO{$jO#[-aO~Oo0cOv0qO{&xq~P'vOz-dO{&xq~O%z,[Og&zaz&za~O{#{Og&zaz&za~OV*SOa*TO%q*UO%uWOg&ya~Oz-hOg&ya~O$S-lO~OV$}Oa$}Oo0cOv0qO~P'vOo0cOv0qO{-mOz$li!W$li~P'vOo0cOv0qOz$li!W$li~P'vO{-mOz$li!W$li~Oo0cOv0qO{*gO~P'vOo0cOv0qO{*gO!W&Xq~P'vOz-pO!W&Xq~Oo0cOv0qOz-pO!W&Xq~P'vOs-sO!T%dO!U%cOg&Oq!W&Oq![&Oqz&Oq~P!/jOa+QOo0cOv0qO![&Ty~P'vOz$ji![$ji~P%SOa+QOo0cOv0qO~P'vOV+UOo0cOv0qO~P'vOV+UOo0cOv0qO{&lq![&lq!m&lq%z&lq~P'vO{(kO![-xO!m-yO%z-wO~OV&OOo0cOv0qO#g%hq%[%hq%_%hq%z%hq~P'vO%uWO#g&ry%[&ry%_&ryg&ry~OV)`Oa)`O%uWO!W&ui~Ot-}OP#m!RV#m!Rf#m!Rh#m!Ro#m!Rs#m!Rv#m!R!P#m!R!Q#m!R!T#m!R!U#m!R!X#m!R!]#m!R!h#m!R!r#m!R!s#m!R!t#m!R!{#m!R!}#m!R#P#m!R#R#m!R#T#m!R#X#m!R#Z#m!R#^#m!R#_#m!R#a#m!R#c#m!R#l#m!R#o#m!R#s#m!R#u#m!R#z#m!R#}#m!R$P#m!R%X#m!R%o#m!R%p#m!R%t#m!R%u#m!R&Z#m!R&[#m!R&]#m!R&^#m!R&_#m!R&`#m!R&a#m!R&b#m!R&c#m!R&d#m!R&e#m!R&f#m!R&g#m!R&h#m!R&i#m!R&j#m!R%Z#m!R%_#m!R~Oo0cOv0qO{&xy~P'vOV*SOa*TO%q*UO%uWOg&yi~O$S-lO%Z.VO%_.VO~OV.aOh._O!X.^O!].`O!h.YO!s.[O!t.[O%p.XO%uWO&Z]O&[]O&]]O&^]O&_]O&`]O&a]O&b]O~Oo0cOv0qOz$lq!W$lq~P'vO{.fOz$lq!W$lq~Oo0cOv0qO{*gO!W&Xy~P'vOz.gO!W&Xy~Oo0cOv.kO~P'vOs-sO!T%dO!U%cOg&Oy!W&Oy![&Oyz&Oy~P!/jO{(kO![.nO~O{(kO![.nO!m.oO~OV*SOa*TO%q*UO%uWO~Oh.tO!f.rOz$TX#[$TX%j$TXg$TX~Os$TX{$TX!W$TX![$TX~P$-bO%o.vO%p.vOs$UXz$UX{$UX#[$UX%j$UX!W$UXg$UX![$UX~O!h.xO~Oz.|O#[/OO%j.yOs&|X{&|X!W&|Xg&|X~Oa/RO~P$)zOh.tOs&}Xz&}X{&}X#[&}X%j&}X!W&}Xg&}X![&}X~Os/VO{$jO~Oo0cOv0qOz$ly!W$ly~P'vOo0cOv0qO{*gO!W&X!R~P'vOz/ZO!W&X!R~Og&RXs&RX!T&RX!U&RX!W&RX![&RXz&RX~P!/jOs-sO!T%dO!U%cOg&Qa!W&Qa![&Qaz&Qa~O{(kO![/^O~O!f.rOh$[as$[az$[a{$[a#[$[a%j$[a!W$[ag$[a![$[a~O!h/eO~O%o.vO%p.vOs$Uaz$Ua{$Ua#[$Ua%j$Ua!W$Uag$Ua![$Ua~O%j.yOs$Yaz$Ya{$Ya#[$Ya!W$Yag$Ya![$Ya~Os&|a{&|a!W&|ag&|a~P$)nOz/jOs&|a{&|a!W&|ag&|a~O!W/mO~Og/mO~O{/oO~O![/pO~Oo0cOv0qO{*gO!W&X!Z~P'vO{/sO~O%z/tO~P$-bOz/uO#[/OO%j.yOg'PX~Oz/uOg'PX~Og/wO~O!h/xO~O#[/OOs%Saz%Sa{%Sa%j%Sa!W%Sag%Sa![%Sa~O#[/OO%j.yOs%Waz%Wa{%Wa!W%Wag%Wa~Os&|i{&|i!W&|ig&|i~P$)nOz/zO#[/OO%j.yO!['Oa~Og'Pa~P$)nOz0SOg'Pa~Oa0UO!['Oi~P$)zOz0WO!['Oi~Oz0WO#[/OO%j.yO!['Oi~O#[/OO%j.yOg$biz$bi~O%z0ZO~P$-bO#[/OO%j.yOg%Vaz%Va~Og'Pi~P$)nO{0^O~Oa0UO!['Oq~P$)zOz0`O!['Oq~O#[/OO%j.yOz%Ui![%Ui~Oa0UO~P$)zOa0UO!['Oy~P$)zO#[/OO%j.yOg$ciz$ci~O#[/OO%j.yOz%Uq![%Uq~Oz+aO#g%ha%[%ha%_%ha%z%ha~P%SOV&OOo0cOv0qO~P'vOn0hO~Oo0hO~P'vO{0iO~Ot0jO~P!/jO&]&Z&j&h&i&g&f&d&e&c&b&`&a&_&^&[%u~",
  goto: "!=j'QPPPPPP'RP'Z*s+[+t,_,y-fP.SP'Z.r.r'ZPPP'Z2[PPPPPP2[5PPP5PP7b7k=sPP=v>h>kPP'Z'ZPP>zPP'Z'ZPP'Z'Z'Z'Z'Z?O?w'ZP?zP@QDXGuGyPG|HWH['ZPPPH_Hk'RP'R'RP'RP'RP'RP'RP'R'R'RP'RPP'RPP'RP'RPHqH}IVPI^IdPI^PI^I^PPPI^PKrPK{LVL]KrPI^LfPI^PLmLsPLwM]MzNeLwLwNkNxLwLwLwLw! ^! d! g! l! o! y!!P!!]!!o!!u!#P!#V!#s!#y!$P!$Z!$a!$g!$y!%T!%Z!%a!%k!%q!%w!%}!&T!&Z!&e!&k!&u!&{!'U!'[!'k!'s!'}!(UPPPPPPPPPPP!([!(_!(e!(n!(x!)TPPPPPPPPPPPP!-u!/Z!3^!6oPP!6w!7W!7a!8Y!8P!8c!8i!8l!8o!8r!8z!9jPPPPPPPPPPPPPPPPP!9m!9q!9wP!:]!:a!:m!:v!;S!;j!;m!;p!;v!;|!<S!<VP!<_!<h!=d!=g]eOn#g$j)t,P'}`OTYZ[adnoprtxy}!P!Q!R!U!X!c!d!e!f!g!h!i!k!o!p!q!s!t!z#O#S#T#[#d#g#x#y#{#}$Q$e$g$h$j$q$}%S%Z%^%`%c%g%l%n%w%|&O&Z&_&h&j&k&u&x&|'P'W'Z'l'm'p'r's'w'|(O(S(W(](^(d(g(p(r(z(})^)e)g)k)l)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+Q+U+V+Y+a+c+d+k+x+y,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0l0n0r{!cQ#c#p$R$d$p%e%j%p%q&`'O'g(q(|)j*o*x+w,v0g}!dQ#c#p$R$d$p$u%e%j%p%q&`'O'g(q(|)j*o*x+w,v0g!P!eQ#c#p$R$d$p$u$v%e%j%p%q&`'O'g(q(|)j*o*x+w,v0g!R!fQ#c#p$R$d$p$u$v$w%e%j%p%q&`'O'g(q(|)j*o*x+w,v0g!T!gQ#c#p$R$d$p$u$v$w$x%e%j%p%q&`'O'g(q(|)j*o*x+w,v0g!V!hQ#c#p$R$d$p$u$v$w$x$y%e%j%p%q&`'O'g(q(|)j*o*x+w,v0g!Z!hQ!n#c#p$R$d$p$u$v$w$x$y$z%e%j%p%q&`'O'g(q(|)j*o*x+w,v0g'}TOTYZ[adnoprtxy}!P!Q!R!U!X!c!d!e!f!g!h!i!k!o!p!q!s!t!z#O#S#T#[#d#g#x#y#{#}$Q$e$g$h$j$q$}%S%Z%^%`%c%g%l%n%w%|&O&Z&_&h&j&k&u&x&|'P'W'Z'l'm'p'r's'w'|(O(S(W(](^(d(g(p(r(z(})^)e)g)k)l)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+Q+U+V+Y+a+c+d+k+x+y,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0l0n0r&eVOYZ[dnprxy}!P!Q!U!i!k!o!p!q!s!t#[#d#g#y#{#}$Q$h$j$}%S%Z%^%`%g%l%n%w%|&Z&_&j&k&u&x'P'W'Z'l'm'p'r's'w(O(W(^(d(g(p(r(z)^)e)g)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+U+V+Y+a+d+k,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0n0r%oXOYZ[dnrxy}!P!Q!U!i!k#[#d#g#y#{#}$Q$h$j$}%S%^%`%g%l%n%w%|&Z&_&j&k&u&x'P'W'Z'l'm'p'r's'w(O(W(^(d(g(p(r(z)^)e)g)p)t)z*O*Y*d*g*h*k*q*t*v*y*z*}+U+V+Y+a+d+k,P,X,Y,],g,h,i,k,l,o,s,u,w,y,z-O-d-f-m-p.f.g/V/Z0i0j0kQ#vqQ/[.kR0o0q't`OTYZ[adnoprtxy}!P!Q!R!U!X!c!d!e!f!g!h!k!o!p!q!s!t!z#O#S#T#[#d#g#x#y#{#}$Q$e$g$h$j$q$}%S%Z%^%`%c%g%l%n%w%|&O&Z&_&h&j&k&u&x&|'P'W'Z'l'p'r's'w'|(O(S(W(](^(d(g(p(r(z(})^)e)g)k)l)p)t)z*O*Y*g*h*k*q*r*t*v*y*z*}+Q+U+V+Y+a+c+d+k+x+y,P,X,Y,],h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0l0n0rh#jhz{$W$Z&l&q)S)X+f+g-RW#rq&].k0qQ$]|Q$a!OQ$n!VQ$o!WW$|!i'm*d,gS&[#s#tQ'S$iQ(s&UQ)U&nU)Y&s)Z+jW)a&w+m-T-{Q*Q']W*R'_,`-h.TQ+l)`S,_*S*TQ-Q+eQ-_,TQ-c,WQ.R-al.W-l.^._.a.z.|/R/j/o/t/y0U0Z0^Q/S.`Q/a.tQ/l/OU0P/u0S0[X0V/z0W0_0`R&Z#r!_!wYZ!P!Q!k%S%`%g'p'r's(O(W)g*g*h*k*q*t*v,h,i,k,l,o-m-p.f.g/ZR%^!vQ!{YQ%x#[Q&d#}Q&g$QR,{+YT.j-s/s!Y!jQ!n#c#p$R$d$p$u$v$w$x$y$z%e%j%p%q&`'O'g(q(|)j*o*x+w,v0gQ&X#kQ'c$oR*^'dR'l$|Q%V!mR/_.r'|_OTYZ[adnoprtxy}!P!Q!R!U!X!c!d!e!f!g!h!i!k!o!p!q!s!t!z#O#S#T#[#d#g#x#y#{#}$Q$e$g$h$j$q$}%S%Z%^%`%c%g%l%n%w%|&O&Z&_&h&j&k&u&x&|'P'W'Z'l'm'p'r's'w'|(O(S(W(](^(d(g(p(r(z(})^)e)g)k)l)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+Q+U+V+Y+a+c+d+k+x+y,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0l0n0rS#a_#b!P.[-l.^._.`.a.t.z.|/R/j/o/t/u/y/z0S0U0W0Z0[0^0_0`'|_OTYZ[adnoprtxy}!P!Q!R!U!X!c!d!e!f!g!h!i!k!o!p!q!s!t!z#O#S#T#[#d#g#x#y#{#}$Q$e$g$h$j$q$}%S%Z%^%`%c%g%l%n%w%|&O&Z&_&h&j&k&u&x&|'P'W'Z'l'm'p'r's'w'|(O(S(W(](^(d(g(p(r(z(})^)e)g)k)l)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+Q+U+V+Y+a+c+d+k+x+y,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0l0n0rT#a_#bT#^^#_R(o%xa(l%x(n(o+`,{-y-z.oT+[(k+]R-z,{Q$PsQ+l)aQ,^*RR-e,_X#}s$O$P&fQ&y$aQ'a$nQ'd$oR)s'SQ)b&wV-S+m-T-{ZgOn$j)t,PXkOn)t,PQ$k!TQ&z$bQ&{$cQ'^$mQ'b$oQ)q'RQ)x'WQ){'XQ)|'YQ*Z'`S*]'c'dQ+s)gQ+u)hQ+v)iQ+z)oS+|)r*[Q,Q)vQ,R)wS,S)y)zQ,d*^Q-V+rQ-W+tQ-Y+{S-Z+},OQ-`,UQ-b,VQ-|-XQ.O-[Q.P-^Q.Q-_Q.p-}Q.q.RQ/W.dR/r/XWkOn)t,PR#mjQ'`$nS)r'S'aR,O)sQ,]*RR-f,^Q*['`Q+})rR-[,OZiOjn)t,PQ'f$pR*`'gT-j,e-ku.c-l.^._.a.t.z.|/R/j/o/t/u/y0S0U0Z0[0^t.c-l.^._.a.t.z.|/R/j/o/t/u/y0S0U0Z0[0^Q/S.`X0V/z0W0_0`!P.Z-l.^._.`.a.t.z.|/R/j/o/t/u/y/z0S0U0W0Z0[0^0_0`Q.w.YR/f.xg.z.].{/b/i/n/|0O0Q0]0a0bu.b-l.^._.a.t.z.|/R/j/o/t/u/y0S0U0Z0[0^X.u.W.b/a0PR/c.tV0R/u0S0[R/X.dQnOS#on,PR,P)tQ&^#uR(x&^S%m#R#wS(_%m(bT(b%p&`Q%a!yQ%h!}W(P%a%h(U(YQ(U%eR(Y%jQ&i$RR)O&iQ(e%qQ*{(`T+R(e*{Q'n%OR*e'nS'q%R%SY*i'q*j,m-q.hU*j'r's'tU,m*k*l*mS-q,n,oR.h-rQ#Y]R%t#YQ#_^R%y#_Q(h%vS+W(h+XR+X(iQ+](kR,|+]Q#b_R%{#bQ#ebQ%}#cW&Q#e%}({+bQ({&cR+b0gQ$OsS&e$O&fR&f$PQ&v$_R)_&vQ&V#jR(t&VQ&m$VS)T&m+hR+h)UQ$Z{R&p$ZQ&t$]R)[&tQ+n)bR-U+nQ#hfR&S#hQ)f&zR+q)fQ&}$dS)m&})nR)n'OQ'V$kR)u'VQ'[$lS*P'[,ZR,Z*QQ,a*VR-i,aWjOn)t,PR#ljQ-k,eR.U-kd.{.]/b/i/n/|0O0Q0]0a0bR/h.{U.s.W/a0PR/`.sQ/{/nS0X/{0YR0Y/|S/v/b/cR0T/vQ.}.]R/k.}R!ZPXmOn)t,PWlOn)t,PR'T$jYfOn$j)t,PR&R#g[sOn#g$j)t,PR&d#}&dQOYZ[dnprxy}!P!Q!U!i!k!o!p!q!s!t#[#d#g#y#{#}$Q$h$j$}%S%Z%^%`%g%l%n%w%|&Z&_&j&k&u&x'P'W'Z'l'm'p'r's'w(O(W(^(d(g(p(r(z)^)e)g)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+U+V+Y+a+d+k,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0n0rQ!nTQ#caQ#poU$Rt%c(SS$d!R$gQ$p!XQ$u!cQ$v!dQ$w!eQ$x!fQ$y!gQ$z!hQ%e!zQ%j#OQ%p#SQ%q#TQ&`#xQ'O$eQ'g$qQ(q&OU(|&h(}+cW)j&|)l+x+yQ*o'|Q*x(]Q+w)kQ,v+QR0g0lQ!yYQ!}ZQ$b!PQ$c!QQ%R!kQ't%S^'{%`%g(O(W*q*t*v^*f'p*h,k,l-p.g/ZQ*l'rQ*m'sQ+t)gQ,j*gQ,n*kQ-n,hQ-o,iQ-r,oQ.e-mR/Y.f[bOn#g$j)t,P!^!vYZ!P!Q!k%S%`%g'p'r's(O(W)g*g*h*k*q*t*v,h,i,k,l,o-m-p.f.g/ZQ#R[Q#fdS#wrxQ$UyW$_}$Q'P)pS$l!U$hW${!i'm*d,gS%v#[+Y`&P#d%|(p(r(z+a-O0kQ&a#yQ&b#{Q&c#}Q'j$}Q'z%^W([%l(^*y*}Q(`%nQ(i%wQ(v&ZS(y&_0iQ)P&jQ)Q&kU)]&u)^+kQ)d&xQ)y'WY)}'Z*O,X,Y-dQ*b'lS*n'w0jW+P(d*z,s,wW+T(g+V,y,zQ+p)eQ,U)zQ,c*YQ,x+UQ-P+dQ-e,]Q-v,uQ.S-fR/q/VhUOn#d#g$j%|&_'w(p(r)t,P%U!uYZ[drxy}!P!Q!U!i!k#[#y#{#}$Q$h$}%S%^%`%g%l%n%w&Z&j&k&u&x'P'W'Z'l'm'p'r's(O(W(^(d(g(z)^)e)g)p)z*O*Y*d*g*h*k*q*t*v*y*z*}+U+V+Y+a+d+k,X,Y,],g,h,i,k,l,o,s,u,w,y,z-O-d-f-m-p.f.g/V/Z0i0j0kQ#qpW%W!o!s0d0nQ%X!pQ%Y!qQ%[!tQ%f0cS'v%Z0hQ'x0eQ'y0fQ,p*rQ-u,qS.i-s/sR0p0rU#uq.k0qR(w&][cOn#g$j)t,PZ!xY#[#}$Q+YQ#W[Q#zrR$TxQ%b!yQ%i!}Q%o#RQ'j${Q(V%eQ(Z%jQ(c%pQ(f%qQ*|(`Q,f*bQ-t,pQ.m-uR/].lQ$StQ(R%cR*s(SQ.l-sR/}/sR#QZR#V[R%Q!iQ%O!iV*c'm*d,g!Z!lQ!n#c#p$R$d$p$u$v$w$x$y$z%e%j%p%q&`'O'g(q(|)j*o*x+w,v0gR%T!kT#]^#_Q%x#[R,{+YQ(m%xS+_(n(oQ,}+`Q-x,{S.n-y-zR/^.oT+Z(k+]Q$`}Q&g$QQ)o'PR+{)pQ$XzQ)W&qR+i)XQ$XzQ&o$WQ)W&qR+i)XQ#khW$Vz$W&q)XQ$[{Q&r$ZZ)R&l)S+f+g-RR$^|R)c&wXlOn)t,PQ$f!RR'Q$gQ$m!UR'R$hR*X'_Q*V'_V-g,`-h.TQ.d-lQ/P.^R/Q._U.]-l.^._Q/U.aQ/b.tQ/g.zU/i.|/j/yQ/n/RQ/|/oQ0O/tU0Q/u0S0[Q0]0UQ0a0ZR0b0^R/T.`R/d.t",
  nodeNames: "⚠ print Escape { Comment Script AssignStatement * BinaryExpression BitOp BitOp BitOp BitOp ArithOp ArithOp @ ArithOp ** UnaryExpression ArithOp BitOp AwaitExpression await ) ( ParenthesizedExpression BinaryExpression or and CompareOp in not is UnaryExpression ConditionalExpression if else LambdaExpression lambda ParamList VariableName AssignOp , : NamedExpression AssignOp YieldExpression yield from TupleExpression ComprehensionExpression async for LambdaExpression ] [ ArrayExpression ArrayComprehensionExpression } { DictionaryExpression DictionaryComprehensionExpression SetExpression SetComprehensionExpression CallExpression ArgList AssignOp MemberExpression . PropertyName Number String FormatString FormatReplacement FormatSelfDoc FormatConversion FormatSpec FormatReplacement FormatSelfDoc ContinuedString Ellipsis None Boolean TypeDef AssignOp UpdateStatement UpdateOp ExpressionStatement DeleteStatement del PassStatement pass BreakStatement break ContinueStatement continue ReturnStatement return YieldStatement PrintStatement RaiseStatement raise ImportStatement import as ScopeStatement global nonlocal AssertStatement assert TypeDefinition type TypeParamList TypeParam StatementGroup ; IfStatement Body elif WhileStatement while ForStatement TryStatement try except finally WithStatement with FunctionDefinition def ParamList AssignOp TypeDef ClassDefinition class DecoratedStatement Decorator At MatchStatement match MatchBody MatchClause case CapturePattern LiteralPattern ArithOp ArithOp AsPattern OrPattern LogicOp AttributePattern SequencePattern MappingPattern StarPattern ClassPattern PatternArgList KeywordPattern KeywordPattern Guard",
  maxTerm: 277,
  context: fZ,
  nodeProps: [
    ["isolate", -5, 4, 71, 72, 73, 77, ""],
    ["group", -15, 6, 85, 87, 88, 90, 92, 94, 96, 98, 99, 100, 102, 105, 108, 110, "Statement Statement", -22, 8, 18, 21, 25, 40, 49, 50, 56, 57, 60, 61, 62, 63, 64, 67, 70, 71, 72, 79, 80, 81, 82, "Expression", -10, 114, 116, 119, 121, 122, 126, 128, 133, 135, 138, "Statement", -9, 143, 144, 147, 148, 150, 151, 152, 153, 154, "Pattern"],
    ["openedBy", 23, "(", 54, "[", 58, "{"],
    ["closedBy", 24, ")", 55, "]", 59, "}"]
  ],
  propSources: [pZ],
  skippedNodes: [0, 4],
  repeatNodeCount: 34,
  tokenData: "!2|~R!`OX%TXY%oY[%T[]%o]p%Tpq%oqr'ars)Yst*xtu%Tuv,dvw-hwx.Uxy/tyz0[z{0r{|2S|}2p}!O3W!O!P4_!P!Q:Z!Q!R;k!R![>_![!]Do!]!^Es!^!_FZ!_!`Gk!`!aHX!a!b%T!b!cIf!c!dJU!d!eK^!e!hJU!h!i!#f!i!tJU!t!u!,|!u!wJU!w!x!.t!x!}JU!}#O!0S#O#P&o#P#Q!0j#Q#R!1Q#R#SJU#S#T%T#T#UJU#U#VK^#V#YJU#Y#Z!#f#Z#fJU#f#g!,|#g#iJU#i#j!.t#j#oJU#o#p!1n#p#q!1s#q#r!2a#r#s!2f#s$g%T$g;'SJU;'S;=`KW<%lOJU`%YT&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%T`%lP;=`<%l%To%v]&n`%c_OX%TXY%oY[%T[]%o]p%Tpq%oq#O%T#O#P&o#P#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To&tX&n`OY%TYZ%oZ]%T]^%o^#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc'f[&n`O!_%T!_!`([!`#T%T#T#U(r#U#f%T#f#g(r#g#h(r#h#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc(cTmR&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc(yT!mR&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk)aV&n`&[ZOr%Trs)vs#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk){V&n`Or%Trs*bs#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk*iT&n`&^ZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To+PZS_&n`OY*xYZ%TZ]*x]^%T^#o*x#o#p+r#p#q*x#q#r+r#r;'S*x;'S;=`,^<%lO*x_+wTS_OY+rZ]+r^;'S+r;'S;=`,W<%lO+r_,ZP;=`<%l+ro,aP;=`<%l*xj,kV%rQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tj-XT!xY&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tj-oV%lQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk.]V&n`&ZZOw%Twx.rx#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk.wV&n`Ow%Twx/^x#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk/eT&n`&]ZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk/{ThZ&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc0cTgR&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk0yXVZ&n`Oz%Tz{1f{!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk1mVaR&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk2ZV%oZ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc2wTzR&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To3_W%pZ&n`O!_%T!_!`-Q!`!a3w!a#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Td4OT&{S&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk4fX!fQ&n`O!O%T!O!P5R!P!Q%T!Q![6T![#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk5WV&n`O!O%T!O!P5m!P#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk5tT!rZ&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti6[a!hX&n`O!Q%T!Q![6T![!g%T!g!h7a!h!l%T!l!m9s!m#R%T#R#S6T#S#X%T#X#Y7a#Y#^%T#^#_9s#_#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti7fZ&n`O{%T{|8X|}%T}!O8X!O!Q%T!Q![8s![#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti8^V&n`O!Q%T!Q![8s![#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti8z]!hX&n`O!Q%T!Q![8s![!l%T!l!m9s!m#R%T#R#S8s#S#^%T#^#_9s#_#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti9zT!hX&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk:bX%qR&n`O!P%T!P!Q:}!Q!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tj;UV%sQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti;ro!hX&n`O!O%T!O!P=s!P!Q%T!Q![>_![!d%T!d!e?q!e!g%T!g!h7a!h!l%T!l!m9s!m!q%T!q!rA]!r!z%T!z!{Bq!{#R%T#R#S>_#S#U%T#U#V?q#V#X%T#X#Y7a#Y#^%T#^#_9s#_#c%T#c#dA]#d#l%T#l#mBq#m#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti=xV&n`O!Q%T!Q![6T![#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti>fc!hX&n`O!O%T!O!P=s!P!Q%T!Q![>_![!g%T!g!h7a!h!l%T!l!m9s!m#R%T#R#S>_#S#X%T#X#Y7a#Y#^%T#^#_9s#_#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti?vY&n`O!Q%T!Q!R@f!R!S@f!S#R%T#R#S@f#S#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti@mY!hX&n`O!Q%T!Q!R@f!R!S@f!S#R%T#R#S@f#S#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TiAbX&n`O!Q%T!Q!YA}!Y#R%T#R#SA}#S#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TiBUX!hX&n`O!Q%T!Q!YA}!Y#R%T#R#SA}#S#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TiBv]&n`O!Q%T!Q![Co![!c%T!c!iCo!i#R%T#R#SCo#S#T%T#T#ZCo#Z#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TiCv]!hX&n`O!Q%T!Q![Co![!c%T!c!iCo!i#R%T#R#SCo#S#T%T#T#ZCo#Z#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%ToDvV{_&n`O!_%T!_!`E]!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TcEdT%{R&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkEzT#gZ&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkFbXmR&n`O!^%T!^!_F}!_!`([!`!a([!a#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TjGUV%mQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkGrV%zZ&n`O!_%T!_!`([!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkH`WmR&n`O!_%T!_!`([!`!aHx!a#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TjIPV%nQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkIoV_Q#}P&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%ToJ_]&n`&YS%uZO!Q%T!Q![JU![!c%T!c!}JU!}#R%T#R#SJU#S#T%T#T#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUoKZP;=`<%lJUoKge&n`&YS%uZOr%Trs)Ysw%Twx.Ux!Q%T!Q![JU![!c%T!c!tJU!t!uLx!u!}JU!}#R%T#R#SJU#S#T%T#T#fJU#f#gLx#g#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUoMRa&n`&YS%uZOr%TrsNWsw%Twx! vx!Q%T!Q![JU![!c%T!c!}JU!}#R%T#R#SJU#S#T%T#T#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUkN_V&n`&`ZOr%TrsNts#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkNyV&n`Or%Trs! `s#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk! gT&n`&bZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk! }V&n`&_ZOw%Twx!!dx#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!!iV&n`Ow%Twx!#Ox#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!#VT&n`&aZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To!#oe&n`&YS%uZOr%Trs!%Qsw%Twx!&px!Q%T!Q![JU![!c%T!c!tJU!t!u!(`!u!}JU!}#R%T#R#SJU#S#T%T#T#fJU#f#g!(`#g#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUk!%XV&n`&dZOr%Trs!%ns#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!%sV&n`Or%Trs!&Ys#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!&aT&n`&fZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!&wV&n`&cZOw%Twx!'^x#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!'cV&n`Ow%Twx!'xx#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!(PT&n`&eZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To!(ia&n`&YS%uZOr%Trs!)nsw%Twx!+^x!Q%T!Q![JU![!c%T!c!}JU!}#R%T#R#SJU#S#T%T#T#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUk!)uV&n`&hZOr%Trs!*[s#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!*aV&n`Or%Trs!*vs#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!*}T&n`&jZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!+eV&n`&gZOw%Twx!+zx#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!,PV&n`Ow%Twx!,fx#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!,mT&n`&iZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To!-Vi&n`&YS%uZOr%TrsNWsw%Twx! vx!Q%T!Q![JU![!c%T!c!dJU!d!eLx!e!hJU!h!i!(`!i!}JU!}#R%T#R#SJU#S#T%T#T#UJU#U#VLx#V#YJU#Y#Z!(`#Z#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUo!.}a&n`&YS%uZOr%Trs)Ysw%Twx.Ux!Q%T!Q![JU![!c%T!c!}JU!}#R%T#R#SJU#S#T%T#T#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUk!0ZT!XZ&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc!0qT!WR&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tj!1XV%kQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%T~!1sO!]~k!1zV%jR&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%T~!2fO![~i!2mT%tX&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%T",
  tokenizers: [uZ, aZ, lZ, dZ, 0, 1, 2, 3, 4],
  topRules: { Script: [0, 5] },
  specialized: [{ term: 221, get: (n) => mZ[n] || -1 }],
  tokenPrec: 7668
}), Tm = /* @__PURE__ */ new cu(), X1 = /* @__PURE__ */ new Set([
  "Script",
  "Body",
  "FunctionDefinition",
  "ClassDefinition",
  "LambdaExpression",
  "ForStatement",
  "MatchClause"
]);
function Po(n) {
  return (e, t, i) => {
    if (i)
      return !1;
    let r = e.node.getChild("VariableName");
    return r && t(r, n), !0;
  };
}
const yZ = {
  FunctionDefinition: /* @__PURE__ */ Po("function"),
  ClassDefinition: /* @__PURE__ */ Po("class"),
  ForStatement(n, e, t) {
    if (t) {
      for (let i = n.node.firstChild; i; i = i.nextSibling)
        if (i.name == "VariableName")
          e(i, "variable");
        else if (i.name == "in")
          break;
    }
  },
  ImportStatement(n, e) {
    var t, i;
    let { node: r } = n, s = ((t = r.firstChild) === null || t === void 0 ? void 0 : t.name) == "from";
    for (let o = r.getChild("import"); o; o = o.nextSibling)
      o.name == "VariableName" && ((i = o.nextSibling) === null || i === void 0 ? void 0 : i.name) != "as" && e(o, s ? "variable" : "namespace");
  },
  AssignStatement(n, e) {
    for (let t = n.node.firstChild; t; t = t.nextSibling)
      if (t.name == "VariableName")
        e(t, "variable");
      else if (t.name == ":" || t.name == "AssignOp")
        break;
  },
  ParamList(n, e) {
    for (let t = null, i = n.node.firstChild; i; i = i.nextSibling)
      i.name == "VariableName" && (!t || !/\*|AssignOp/.test(t.name)) && e(i, "variable"), t = i;
  },
  CapturePattern: /* @__PURE__ */ Po("variable"),
  AsPattern: /* @__PURE__ */ Po("variable"),
  __proto__: null
};
function q1(n, e) {
  let t = Tm.get(e);
  if (t)
    return t;
  let i = [], r = !0;
  function s(o, l) {
    let a = n.sliceString(o.from, o.to);
    i.push({ label: a, type: l });
  }
  return e.cursor(xe.IncludeAnonymous).iterate((o) => {
    if (o.name) {
      let l = yZ[o.name];
      if (l && l(o, s, r) || !r && X1.has(o.name))
        return !1;
      r = !1;
    } else if (o.to - o.from > 8192) {
      for (let l of q1(n, o.node))
        i.push(l);
      return !1;
    }
  }), Tm.set(e, i), i;
}
const Cm = /^[\w\xa1-\uffff][\w\d\xa1-\uffff]*$/, Z1 = ["String", "FormatString", "Comment", "PropertyName"];
function SZ(n) {
  let e = ge(n.state).resolveInner(n.pos, -1);
  if (Z1.indexOf(e.name) > -1)
    return null;
  let t = e.name == "VariableName" || e.to - e.from < 20 && Cm.test(n.state.sliceDoc(e.from, e.to));
  if (!t && !n.explicit)
    return null;
  let i = [];
  for (let r = e; r; r = r.parent)
    X1.has(r.name) && (i = i.concat(q1(n.state.doc, r)));
  return {
    options: i,
    from: t ? e.from : n.pos,
    validFor: Cm
  };
}
const bZ = /* @__PURE__ */ [
  "__annotations__",
  "__builtins__",
  "__debug__",
  "__doc__",
  "__import__",
  "__name__",
  "__loader__",
  "__package__",
  "__spec__",
  "False",
  "None",
  "True"
].map((n) => ({ label: n, type: "constant" })).concat(/* @__PURE__ */ [
  "ArithmeticError",
  "AssertionError",
  "AttributeError",
  "BaseException",
  "BlockingIOError",
  "BrokenPipeError",
  "BufferError",
  "BytesWarning",
  "ChildProcessError",
  "ConnectionAbortedError",
  "ConnectionError",
  "ConnectionRefusedError",
  "ConnectionResetError",
  "DeprecationWarning",
  "EOFError",
  "Ellipsis",
  "EncodingWarning",
  "EnvironmentError",
  "Exception",
  "FileExistsError",
  "FileNotFoundError",
  "FloatingPointError",
  "FutureWarning",
  "GeneratorExit",
  "IOError",
  "ImportError",
  "ImportWarning",
  "IndentationError",
  "IndexError",
  "InterruptedError",
  "IsADirectoryError",
  "KeyError",
  "KeyboardInterrupt",
  "LookupError",
  "MemoryError",
  "ModuleNotFoundError",
  "NameError",
  "NotADirectoryError",
  "NotImplemented",
  "NotImplementedError",
  "OSError",
  "OverflowError",
  "PendingDeprecationWarning",
  "PermissionError",
  "ProcessLookupError",
  "RecursionError",
  "ReferenceError",
  "ResourceWarning",
  "RuntimeError",
  "RuntimeWarning",
  "StopAsyncIteration",
  "StopIteration",
  "SyntaxError",
  "SyntaxWarning",
  "SystemError",
  "SystemExit",
  "TabError",
  "TimeoutError",
  "TypeError",
  "UnboundLocalError",
  "UnicodeDecodeError",
  "UnicodeEncodeError",
  "UnicodeError",
  "UnicodeTranslateError",
  "UnicodeWarning",
  "UserWarning",
  "ValueError",
  "Warning",
  "ZeroDivisionError"
].map((n) => ({ label: n, type: "type" }))).concat(/* @__PURE__ */ [
  "bool",
  "bytearray",
  "bytes",
  "classmethod",
  "complex",
  "float",
  "frozenset",
  "int",
  "list",
  "map",
  "memoryview",
  "object",
  "range",
  "set",
  "staticmethod",
  "str",
  "super",
  "tuple",
  "type"
].map((n) => ({ label: n, type: "class" }))).concat(/* @__PURE__ */ [
  "abs",
  "aiter",
  "all",
  "anext",
  "any",
  "ascii",
  "bin",
  "breakpoint",
  "callable",
  "chr",
  "compile",
  "delattr",
  "dict",
  "dir",
  "divmod",
  "enumerate",
  "eval",
  "exec",
  "exit",
  "filter",
  "format",
  "getattr",
  "globals",
  "hasattr",
  "hash",
  "help",
  "hex",
  "id",
  "input",
  "isinstance",
  "issubclass",
  "iter",
  "len",
  "license",
  "locals",
  "max",
  "min",
  "next",
  "oct",
  "open",
  "ord",
  "pow",
  "print",
  "property",
  "quit",
  "repr",
  "reversed",
  "round",
  "setattr",
  "slice",
  "sorted",
  "sum",
  "vars",
  "zip"
].map((n) => ({ label: n, type: "function" }))), QZ = [
  /* @__PURE__ */ Ce("def ${name}(${params}):\n	${}", {
    label: "def",
    detail: "function",
    type: "keyword"
  }),
  /* @__PURE__ */ Ce("for ${name} in ${collection}:\n	${}", {
    label: "for",
    detail: "loop",
    type: "keyword"
  }),
  /* @__PURE__ */ Ce("while ${}:\n	${}", {
    label: "while",
    detail: "loop",
    type: "keyword"
  }),
  /* @__PURE__ */ Ce("try:\n	${}\nexcept ${error}:\n	${}", {
    label: "try",
    detail: "/ except block",
    type: "keyword"
  }),
  /* @__PURE__ */ Ce(`if \${}:
	
`, {
    label: "if",
    detail: "block",
    type: "keyword"
  }),
  /* @__PURE__ */ Ce("if ${}:\n	${}\nelse:\n	${}", {
    label: "if",
    detail: "/ else block",
    type: "keyword"
  }),
  /* @__PURE__ */ Ce("class ${name}:\n	def __init__(self, ${params}):\n			${}", {
    label: "class",
    detail: "definition",
    type: "keyword"
  }),
  /* @__PURE__ */ Ce("import ${module}", {
    label: "import",
    detail: "statement",
    type: "keyword"
  }),
  /* @__PURE__ */ Ce("from ${module} import ${names}", {
    label: "from",
    detail: "import",
    type: "keyword"
  })
], xZ = /* @__PURE__ */ wu(Z1, /* @__PURE__ */ Oa(/* @__PURE__ */ bZ.concat(QZ)));
function $c(n) {
  let { node: e, pos: t } = n, i = n.lineIndent(t, -1), r = null;
  for (; ; ) {
    let s = e.childBefore(t);
    if (s)
      if (s.name == "Comment")
        t = s.from;
      else if (s.name == "Body" || s.name == "MatchBody")
        n.baseIndentFor(s) + n.unit <= i && (r = s), e = s;
      else if (s.name == "MatchClause")
        e = s;
      else if (s.type.is("Statement"))
        e = s;
      else
        break;
    else break;
  }
  return r;
}
function Tc(n, e) {
  let t = n.baseIndentFor(e), i = n.lineAt(n.pos, -1), r = i.from + i.text.length;
  return /^\s*($|#)/.test(i.text) && n.node.to < r + 100 && !/\S/.test(n.state.sliceDoc(r, n.node.to)) && n.lineIndent(n.pos, -1) <= t || /^\s*(else:|elif |except |finally:|case\s+[^=:]+:)/.test(n.textAfter) && n.lineIndent(n.pos, -1) > t ? null : t + n.unit;
}
const Cc = /* @__PURE__ */ It.define({
  name: "python",
  parser: /* @__PURE__ */ gZ.configure({
    props: [
      /* @__PURE__ */ yn.add({
        Body: (n) => {
          var e;
          let t = /^\s*(#|$)/.test(n.textAfter) && $c(n) || n.node;
          return (e = Tc(n, t)) !== null && e !== void 0 ? e : n.continue();
        },
        MatchBody: (n) => {
          var e;
          let t = $c(n);
          return (e = Tc(n, t || n.node)) !== null && e !== void 0 ? e : n.continue();
        },
        IfStatement: (n) => /^\s*(else:|elif )/.test(n.textAfter) ? n.baseIndent : n.continue(),
        "ForStatement WhileStatement": (n) => /^\s*else:/.test(n.textAfter) ? n.baseIndent : n.continue(),
        TryStatement: (n) => /^\s*(except[ :]|finally:|else:)/.test(n.textAfter) ? n.baseIndent : n.continue(),
        MatchStatement: (n) => /^\s*case /.test(n.textAfter) ? n.baseIndent + n.unit : n.continue(),
        "TupleExpression ComprehensionExpression ParamList ArgList ParenthesizedExpression": /* @__PURE__ */ Yi({ closing: ")" }),
        "DictionaryExpression DictionaryComprehensionExpression SetExpression SetComprehensionExpression": /* @__PURE__ */ Yi({ closing: "}" }),
        "ArrayExpression ArrayComprehensionExpression": /* @__PURE__ */ Yi({ closing: "]" }),
        MemberExpression: (n) => n.baseIndent + n.unit,
        "String FormatString": () => null,
        Script: (n) => {
          var e;
          let t = $c(n);
          return (e = t && Tc(n, t)) !== null && e !== void 0 ? e : n.continue();
        }
      }),
      /* @__PURE__ */ Gt.add({
        "ArrayExpression DictionaryExpression SetExpression TupleExpression": Ds,
        Body: (n, e) => ({ from: n.from + 1, to: n.to - (n.to == e.doc.length ? 0 : 1) }),
        "String FormatString": (n, e) => ({ from: e.doc.lineAt(n.from).to, to: n.to })
      })
    ]
  }),
  languageData: {
    closeBrackets: {
      brackets: ["(", "[", "{", "'", '"', "'''", '"""'],
      stringPrefixes: [
        "f",
        "fr",
        "rf",
        "r",
        "u",
        "b",
        "br",
        "rb",
        "F",
        "FR",
        "RF",
        "R",
        "U",
        "B",
        "BR",
        "RB"
      ]
    },
    commentTokens: { line: "#" },
    // Indent logic logic are triggered upon below input patterns
    indentOnInput: /^\s*([\}\]\)]|else:|elif |except |finally:|case\s+[^:]*:?)$/
  }
});
function kZ() {
  return new mn(Cc, [
    Cc.data.of({ autocomplete: SZ }),
    Cc.data.of({ autocomplete: xZ })
  ]);
}
const Zi = 63, Rm = 64, wZ = 1, vZ = 2, M1 = 3, PZ = 4, L1 = 5, $Z = 6, TZ = 7, V1 = 65, CZ = 66, RZ = 8, EZ = 9, AZ = 10, _Z = 11, XZ = 12, B1 = 13, qZ = 19, ZZ = 20, MZ = 29, LZ = 33, VZ = 34, BZ = 47, WZ = 0, Uu = 1, pf = 2, Cs = 3, mf = 4;
class ci {
  constructor(e, t, i) {
    this.parent = e, this.depth = t, this.type = i, this.hash = (e ? e.hash + e.hash << 8 : 0) + t + (t << 4) + i;
  }
}
ci.top = new ci(null, -1, WZ);
function Jr(n, e) {
  for (let t = 0, i = e - n.pos - 1; ; i--, t++) {
    let r = n.peek(i);
    if (_n(r) || r == -1) return t;
  }
}
function gf(n) {
  return n == 32 || n == 9;
}
function _n(n) {
  return n == 10 || n == 13;
}
function W1(n) {
  return gf(n) || _n(n);
}
function di(n) {
  return n < 0 || W1(n);
}
const zZ = new Ns({
  start: ci.top,
  reduce(n, e) {
    return n.type == Cs && (e == ZZ || e == VZ) ? n.parent : n;
  },
  shift(n, e, t, i) {
    if (e == M1)
      return new ci(n, Jr(i, i.pos), Uu);
    if (e == V1 || e == L1)
      return new ci(n, Jr(i, i.pos), pf);
    if (e == Zi)
      return n.parent;
    if (e == qZ || e == LZ)
      return new ci(n, 0, Cs);
    if (e == B1 && n.type == mf)
      return n.parent;
    if (e == BZ) {
      let r = /[1-9]/.exec(i.read(i.pos, t.pos));
      if (r) return new ci(n, n.depth + +r[0], mf);
    }
    return n;
  },
  hash(n) {
    return n.hash;
  }
});
function lr(n, e, t = 0) {
  return n.peek(t) == e && n.peek(t + 1) == e && n.peek(t + 2) == e && di(n.peek(t + 3));
}
const DZ = new Ee((n, e) => {
  if (n.next == -1 && e.canShift(Rm))
    return n.acceptToken(Rm);
  let t = n.peek(-1);
  if ((_n(t) || t < 0) && e.context.type != Cs) {
    if (lr(
      n,
      45
      /* '-' */
    ))
      if (e.canShift(Zi)) n.acceptToken(Zi);
      else return n.acceptToken(wZ, 3);
    if (lr(
      n,
      46
      /* '.' */
    ))
      if (e.canShift(Zi)) n.acceptToken(Zi);
      else return n.acceptToken(vZ, 3);
    let i = 0;
    for (; n.next == 32; )
      i++, n.advance();
    (i < e.context.depth || i == e.context.depth && e.context.type == Uu && (n.next != 45 || !di(n.peek(1)))) && // Not blank
    n.next != -1 && !_n(n.next) && n.next != 35 && n.acceptToken(Zi, -i);
  }
}, { contextual: !0 }), IZ = new Ee((n, e) => {
  if (e.context.type == Cs) {
    n.next == 63 && (n.advance(), di(n.next) && n.acceptToken(TZ));
    return;
  }
  if (n.next == 45)
    n.advance(), di(n.next) && n.acceptToken(e.context.type == Uu && e.context.depth == Jr(n, n.pos - 1) ? PZ : M1);
  else if (n.next == 63)
    n.advance(), di(n.next) && n.acceptToken(e.context.type == pf && e.context.depth == Jr(n, n.pos - 1) ? $Z : L1);
  else {
    let t = n.pos;
    for (; ; )
      if (gf(n.next)) {
        if (n.pos == t) return;
        n.advance();
      } else if (n.next == 33)
        z1(n);
      else if (n.next == 38)
        yf(n);
      else if (n.next == 42) {
        yf(n);
        break;
      } else if (n.next == 39 || n.next == 34) {
        if (Yu(n, !0)) break;
        return;
      } else if (n.next == 91 || n.next == 123) {
        if (!UZ(n)) return;
        break;
      } else {
        D1(n, !0, !1, 0);
        break;
      }
    for (; gf(n.next); ) n.advance();
    if (n.next == 58) {
      if (n.pos == t && e.canShift(MZ)) return;
      let i = n.peek(1);
      di(i) && n.acceptTokenTo(e.context.type == pf && e.context.depth == Jr(n, t) ? CZ : V1, t);
    }
  }
}, { contextual: !0 });
function jZ(n) {
  return n > 32 && n < 127 && n != 34 && n != 37 && n != 44 && n != 60 && n != 62 && n != 92 && n != 94 && n != 96 && n != 123 && n != 124 && n != 125;
}
function Em(n) {
  return n >= 48 && n <= 57 || n >= 97 && n <= 102 || n >= 65 && n <= 70;
}
function Am(n, e) {
  return n.next == 37 ? (n.advance(), Em(n.next) && n.advance(), Em(n.next) && n.advance(), !0) : jZ(n.next) || e && n.next == 44 ? (n.advance(), !0) : !1;
}
function z1(n) {
  if (n.advance(), n.next == 60) {
    for (n.advance(); ; )
      if (!Am(n, !0)) {
        n.next == 62 && n.advance();
        break;
      }
  } else
    for (; Am(n, !1); )
      ;
}
function yf(n) {
  for (n.advance(); !di(n.next) && Il(n.tag) != "f"; ) n.advance();
}
function Yu(n, e) {
  let t = n.next, i = !1, r = n.pos;
  for (n.advance(); ; ) {
    let s = n.next;
    if (s < 0) break;
    if (n.advance(), s == t)
      if (s == 39)
        if (n.next == 39) n.advance();
        else break;
      else
        break;
    else if (s == 92 && t == 34)
      n.next >= 0 && n.advance();
    else if (_n(s)) {
      if (e) return !1;
      i = !0;
    } else if (e && n.pos >= r + 1024)
      return !1;
  }
  return !i;
}
function UZ(n) {
  for (let e = [], t = n.pos + 1024; ; )
    if (n.next == 91 || n.next == 123)
      e.push(n.next), n.advance();
    else if (n.next == 39 || n.next == 34) {
      if (!Yu(n, !0)) return !1;
    } else if (n.next == 93 || n.next == 125) {
      if (e[e.length - 1] != n.next - 2) return !1;
      if (e.pop(), n.advance(), !e.length) return !0;
    } else {
      if (n.next < 0 || n.pos > t || _n(n.next))
        return !1;
      n.advance();
    }
}
const YZ = "iiisiiissisfissssssssssssisssiiissssssssssssssssssssssssssfsfssissssssssssssssssssssssssssfif";
function Il(n) {
  return n < 33 ? "u" : n > 125 ? "s" : YZ[n - 33];
}
function Rc(n, e) {
  let t = Il(n);
  return t != "u" && !(e && t == "f");
}
function D1(n, e, t, i) {
  if (Il(n.next) == "s" || (n.next == 63 || n.next == 58 || n.next == 45) && Rc(n.peek(1), t))
    n.advance();
  else
    return !1;
  let r = n.pos;
  for (; ; ) {
    let s = n.next, o = 0, l = i + 1;
    for (; W1(s); ) {
      if (_n(s)) {
        if (e) return !1;
        l = 0;
      } else
        l++;
      s = n.peek(++o);
    }
    if (!(s >= 0 && (s == 58 ? Rc(n.peek(o + 1), t) : s == 35 ? n.peek(o - 1) != 32 : Rc(s, t))) || !t && l <= i || l == 0 && !t && (lr(n, 45, o) || lr(n, 46, o)))
      break;
    if (e && Il(s) == "f") return !1;
    for (let c = o; c >= 0; c--) n.advance();
    if (e && n.pos > r + 1024) return !1;
  }
  return !0;
}
const NZ = new Ee((n, e) => {
  if (n.next == 33)
    z1(n), n.acceptToken(XZ);
  else if (n.next == 38 || n.next == 42) {
    let t = n.next == 38 ? AZ : _Z;
    yf(n), n.acceptToken(t);
  } else n.next == 39 || n.next == 34 ? (Yu(n, !1), n.acceptToken(EZ)) : D1(n, !1, e.context.type == Cs, e.context.depth) && n.acceptToken(RZ);
}), GZ = new Ee((n, e) => {
  let t = e.context.type == mf ? e.context.depth : -1, i = n.pos;
  e: for (; ; ) {
    let r = 0, s = n.next;
    for (; s == 32; ) s = n.peek(++r);
    if (!r && (lr(n, 45, r) || lr(n, 46, r)) || !_n(s) && (t < 0 && (t = Math.max(e.context.depth + 1, r)), r < t))
      break;
    for (; ; ) {
      if (n.next < 0) break e;
      let o = _n(n.next);
      if (n.advance(), o) continue e;
      i = n.pos;
    }
  }
  n.acceptTokenTo(B1, i);
}), FZ = Nt({
  DirectiveName: g.keyword,
  DirectiveContent: g.attributeValue,
  "DirectiveEnd DocEnd": g.meta,
  QuotedLiteral: g.string,
  BlockLiteralHeader: g.special(g.string),
  BlockLiteralContent: g.content,
  Literal: g.content,
  "Key/Literal Key/QuotedLiteral": g.definition(g.propertyName),
  "Anchor Alias": g.labelName,
  Tag: g.typeName,
  Comment: g.lineComment,
  ": , -": g.separator,
  "?": g.punctuation,
  "[ ]": g.squareBracket,
  "{ }": g.brace
}), HZ = jt.deserialize({
  version: 14,
  states: "5lQ!ZQgOOO#PQfO'#CpO#uQfO'#DOOOQR'#Dv'#DvO$qQgO'#DRO%gQdO'#DUO%nQgO'#DUO&ROaO'#D[OOQR'#Du'#DuO&{QgO'#D^O'rQgO'#D`OOQR'#Dt'#DtO(iOqO'#DbOOQP'#Dj'#DjO(zQaO'#CmO)YQgO'#CmOOQP'#Cm'#CmQ)jQaOOQ)uQgOOQ]QgOOO*PQdO'#CrO*nQdO'#CtOOQO'#Dw'#DwO+]Q`O'#CxO+hQdO'#CwO+rQ`O'#CwOOQO'#Cv'#CvO+wQdO'#CvOOQO'#Cq'#CqO,UQ`O,59[O,^QfO,59[OOQR,59[,59[OOQO'#Cx'#CxO,eQ`O'#DPO,pQdO'#DPOOQO'#Dx'#DxO,zQdO'#DxO-XQ`O,59jO-aQfO,59jOOQR,59j,59jOOQR'#DS'#DSO-hQcO,59mO-sQgO'#DVO.TQ`O'#DVO.YQcO,59pOOQR'#DX'#DXO#|QfO'#DWO.hQcO'#DWOOQR,59v,59vO.yOWO,59vO/OOaO,59vO/WOaO,59vO/cQgO'#D_OOQR,59x,59xO0VQgO'#DaOOQR,59z,59zOOQP,59|,59|O0yOaO,59|O1ROaO,59|O1aOqO,59|OOQP-E7h-E7hO1oQgO,59XOOQP,59X,59XO2PQaO'#DeO2_QgO'#DeO2oQgO'#DkOOQP'#Dk'#DkQ)jQaOOO3PQdO'#CsOOQO,59^,59^O3kQdO'#CuOOQO,59`,59`OOQO,59c,59cO4VQdO,59cO4aQdO'#CzO4kQ`O'#CzOOQO,59b,59bOOQU,5:Q,5:QOOQR1G.v1G.vO4pQ`O1G.vOOQU-E7d-E7dO4xQdO,59kOOQO,59k,59kO5SQdO'#DQO5^Q`O'#DQOOQO,5:d,5:dOOQU,5:R,5:ROOQR1G/U1G/UO5cQ`O1G/UOOQU-E7e-E7eO5kQgO'#DhO5xQcO1G/XOOQR1G/X1G/XOOQR,59q,59qO6TQgO,59qO6eQdO'#DiO6lQgO'#DiO7PQcO1G/[OOQR1G/[1G/[OOQR,59r,59rO#|QfO,59rOOQR1G/b1G/bO7_OWO1G/bO7dOaO1G/bOOQR,59y,59yOOQR,59{,59{OOQP1G/h1G/hO7lOaO1G/hO7tOaO1G/hO8POaO1G/hOOQP1G.s1G.sO8_QgO,5:POOQP,5:P,5:POOQP,5:V,5:VOOQP-E7i-E7iOOQO,59_,59_OOQO,59a,59aOOQO1G.}1G.}OOQO,59f,59fO8oQdO,59fOOQR7+$b7+$bP,XQ`O'#DfOOQO1G/V1G/VOOQO,59l,59lO8yQdO,59lOOQR7+$p7+$pP9TQ`O'#DgOOQR'#DT'#DTOOQR,5:S,5:SOOQR-E7f-E7fOOQR7+$s7+$sOOQR1G/]1G/]O9YQgO'#DYO9jQ`O'#DYOOQR,5:T,5:TO#|QfO'#DZO9oQcO'#DZOOQR-E7g-E7gOOQR7+$v7+$vOOQR1G/^1G/^OOQR7+$|7+$|O:QOWO7+$|OOQP7+%S7+%SO:VOaO7+%SO:_OaO7+%SOOQP1G/k1G/kOOQO1G/Q1G/QOOQO1G/W1G/WOOQR,59t,59tO:jQgO,59tOOQR,59u,59uO#|QfO,59uOOQR<<Hh<<HhOOQP<<Hn<<HnO:zOaO<<HnOOQR1G/`1G/`OOQR1G/a1G/aOOQPAN>YAN>Y",
  stateData: ";S~O!fOS!gOS^OS~OP_OQbORSOTUOWROXROYYOZZO[XOcPOqQO!PVO!V[O!cTO~O`cO~P]OVkOWROXROYeOZfO[dOcPOmhOqQO~OboO~P!bOVtOWROXROYeOZfO[dOcPOmrOqQO~OpwO~P#WORSOTUOWROXROYYOZZO[XOcPOqQO!PVO!cTO~OSvP!avP!bvP~P#|OWROXROYeOZfO[dOcPOqQO~OmzO~P%OOm!OOUzP!azP!bzP!dzP~P#|O^!SO!b!QO!f!TO!g!RO~ORSOTUOWROXROcPOqQO!PVO!cTO~OY!UOP!QXQ!QX!V!QX!`!QXS!QX!a!QX!b!QXU!QXm!QX!d!QX~P&aO[!WOP!SXQ!SX!V!SX!`!SXS!SX!a!SX!b!SXU!SXm!SX!d!SX~P&aO^!ZO!W![O!b!YO!f!]O!g!YO~OP!_O!V[OQaX!`aX~OPaXQaX!VaX!`aX~P#|OP!bOQ!cO!V[O~OP_O!V[O~P#|OWROXROY!fOcPOqQObfXmfXofXpfX~OWROXRO[!hOcPOqQObhXmhXohXphX~ObeXmlXoeX~ObkXokX~P%OOm!kO~Om!lObnPonP~P%OOb!pOo!oO~Ob!pO~P!bOm!sOosXpsX~OosXpsX~P%OOm!uOotPptP~P%OOo!xOp!yO~Op!yO~P#WOS!|O!a#OO!b#OO~OUyX!ayX!byX!dyX~P#|Om#QO~OU#SO!a#UO!b#UO!d#RO~Om#WOUzX!azX!bzX!dzX~O]#XO~O!b#XO!g#YO~O^#ZO!b#XO!g#YO~OP!RXQ!RX!V!RX!`!RXS!RX!a!RX!b!RXU!RXm!RX!d!RX~P&aOP!TXQ!TX!V!TX!`!TXS!TX!a!TX!b!TXU!TXm!TX!d!TX~P&aO!b#^O!g#^O~O^#_O!b#^O!f#`O!g#^O~O^#_O!W#aO!b#^O!g#^O~OPaaQaa!Vaa!`aa~P#|OP#cO!V[OQ!XX!`!XX~OP!XXQ!XX!V!XX!`!XX~P#|OP_O!V[OQ!_X!`!_X~P#|OWROXROcPOqQObgXmgXogXpgX~OWROXROcPOqQObiXmiXoiXpiX~Obkaoka~P%OObnXonX~P%OOm#kO~Ob#lOo!oO~Oosapsa~P%OOotXptX~P%OOm#pO~Oo!xOp#qO~OSwP!awP!bwP~P#|OS!|O!a#vO!b#vO~OUya!aya!bya!dya~P#|Om#xO~P%OOm#{OU}P!a}P!b}P!d}P~P#|OU#SO!a$OO!b$OO!d#RO~O]$QO~O!b$QO!g$RO~O!b$SO!g$SO~O^$TO!b$SO!g$SO~O^$TO!b$SO!f$UO!g$SO~OP!XaQ!Xa!V!Xa!`!Xa~P#|Obnaona~P%OOotapta~P%OOo!xO~OU|X!a|X!b|X!d|X~P#|Om$ZO~Om$]OU}X!a}X!b}X!d}X~O]$^O~O!b$_O!g$_O~O^$`O!b$_O!g$_O~OU|a!a|a!b|a!d|a~P#|O!b$cO!g$cO~O",
  goto: ",]!mPPPPPPPPPPPPPPPPP!nPP!v#v#|$`#|$c$f$j$nP%VPPP!v%Y%^%a%{&O%a&R&U&X&_&b%aP&e&{&e'O'RPP']'a'g'm's'y(XPPPPPPPP(_)e*X+c,VUaObcR#e!c!{ROPQSTUXY_bcdehknrtvz!O!U!W!_!b!c!f!h!k!l!s!u!|#Q#R#S#W#c#k#p#x#{$Z$]QmPR!qnqfPQThknrtv!k!l!s!u#R#k#pR!gdR!ieTlPnTjPnSiPnSqQvQ{TQ!mkQ!trQ!vtR#y#RR!nkTsQvR!wt!RWOSUXY_bcz!O!U!W!_!b!c!|#Q#S#W#c#x#{$Z$]RySR#t!|R|TR|UQ!PUR#|#SR#z#RR#z#SyZOSU_bcz!O!_!b!c!|#Q#S#W#c#x#{$Z$]R!VXR!XYa]O^abc!a!c!eT!da!eQnPR!rnQvQR!{vQ!}yR#u!}Q#T|R#}#TW^Obc!cS!^^!aT!aa!eQ!eaR#f!eW`Obc!cQxSS}U#SQ!`_Q#PzQ#V!OQ#b!_Q#d!bQ#s!|Q#w#QQ$P#WQ$V#cQ$Y#xQ$[#{Q$a$ZR$b$]xZOSU_bcz!O!_!b!c!|#Q#S#W#c#x#{$Z$]Q!VXQ!XYQ#[!UR#]!W!QWOSUXY_bcz!O!U!W!_!b!c!|#Q#S#W#c#x#{$Z$]pfPQThknrtv!k!l!s!u#R#k#pQ!gdQ!ieQ#g!fR#h!hSgPn^pQTkrtv#RQ!jhQ#i!kQ#j!lQ#n!sQ#o!uQ$W#kR$X#pQuQR!zv",
  nodeNames: "⚠ DirectiveEnd DocEnd - - ? ? ? Literal QuotedLiteral Anchor Alias Tag BlockLiteralContent Comment Stream BOM Document ] [ FlowSequence Item Tagged Anchored Anchored Tagged FlowMapping Pair Key : Pair , } { FlowMapping Pair Pair BlockSequence Item Item BlockMapping Pair Pair Key Pair Pair BlockLiteral BlockLiteralHeader Tagged Anchored Anchored Tagged Directive DirectiveName DirectiveContent Document",
  maxTerm: 74,
  context: zZ,
  nodeProps: [
    ["isolate", -3, 8, 9, 14, ""],
    ["openedBy", 18, "[", 32, "{"],
    ["closedBy", 19, "]", 33, "}"]
  ],
  propSources: [FZ],
  skippedNodes: [0],
  repeatNodeCount: 6,
  tokenData: "-Y~RnOX#PXY$QYZ$]Z]#P]^$]^p#Ppq$Qqs#Pst$btu#Puv$yv|#P|}&e}![#P![!]'O!]!`#P!`!a'i!a!}#P!}#O*g#O#P#P#P#Q+Q#Q#o#P#o#p+k#p#q'i#q#r,U#r;'S#P;'S;=`#z<%l?HT#P?HT?HU,o?HUO#PQ#UU!WQOY#PZp#Ppq#hq;'S#P;'S;=`#z<%lO#PQ#kTOY#PZs#Pt;'S#P;'S;=`#z<%lO#PQ#}P;=`<%l#P~$VQ!f~XY$Qpq$Q~$bO!g~~$gS^~OY$bZ;'S$b;'S;=`$s<%lO$b~$vP;=`<%l$bR%OX!WQOX%kXY#PZ]%k]^#P^p%kpq#hq;'S%k;'S;=`&_<%lO%kR%rX!WQ!VPOX%kXY#PZ]%k]^#P^p%kpq#hq;'S%k;'S;=`&_<%lO%kR&bP;=`<%l%kR&lUoP!WQOY#PZp#Ppq#hq;'S#P;'S;=`#z<%lO#PR'VUmP!WQOY#PZp#Ppq#hq;'S#P;'S;=`#z<%lO#PR'p[!PP!WQOY#PZp#Ppq#hq{#P{|(f|}#P}!O(f!O!R#P!R![)p![;'S#P;'S;=`#z<%lO#PR(mW!PP!WQOY#PZp#Ppq#hq!R#P!R![)V![;'S#P;'S;=`#z<%lO#PR)^U!PP!WQOY#PZp#Ppq#hq;'S#P;'S;=`#z<%lO#PR)wY!PP!WQOY#PZp#Ppq#hq{#P{|)V|}#P}!O)V!O;'S#P;'S;=`#z<%lO#PR*nUcP!WQOY#PZp#Ppq#hq;'S#P;'S;=`#z<%lO#PR+XUbP!WQOY#PZp#Ppq#hq;'S#P;'S;=`#z<%lO#PR+rUqP!WQOY#PZp#Ppq#hq;'S#P;'S;=`#z<%lO#PR,]UpP!WQOY#PZp#Ppq#hq;'S#P;'S;=`#z<%lO#PR,vU`P!WQOY#PZp#Ppq#hq;'S#P;'S;=`#z<%lO#P",
  tokenizers: [DZ, IZ, NZ, GZ, 0, 1],
  topRules: { Stream: [0, 15] },
  tokenPrec: 0
}), KZ = /* @__PURE__ */ It.define({
  name: "yaml",
  parser: /* @__PURE__ */ HZ.configure({
    props: [
      /* @__PURE__ */ yn.add({
        Stream: (n) => {
          for (let e = n.node.resolve(n.pos, -1); e && e.to >= n.pos; e = e.parent) {
            if (e.name == "BlockLiteralContent" && e.from < e.to)
              return n.baseIndentFor(e);
            if (e.name == "BlockLiteral")
              return n.baseIndentFor(e) + n.unit;
            if (e.name == "BlockSequence" || e.name == "BlockMapping")
              return n.column(e.from, 1);
            if (e.name == "QuotedLiteral")
              return null;
            if (e.name == "Literal") {
              let t = n.column(e.from, 1);
              if (t == n.lineIndent(e.from, 1))
                return t;
              if (e.to > n.pos)
                return null;
            }
          }
          return null;
        },
        FlowMapping: /* @__PURE__ */ Yi({ closing: "}" }),
        FlowSequence: /* @__PURE__ */ Yi({ closing: "]" })
      }),
      /* @__PURE__ */ Gt.add({
        "FlowMapping FlowSequence": Ds,
        "Item Pair BlockLiteral": (n, e) => ({ from: e.doc.lineAt(n.from).to, to: n.to })
      })
    ]
  }),
  languageData: {
    commentTokens: { line: "#" },
    indentOnInput: /^\s*[\]\}]$/
  }
});
function JZ() {
  return new mn(KZ);
}
const Sf = 1, eM = 2, tM = 3, nM = 4, iM = 5, rM = 36, sM = 37, oM = 38, lM = 11, aM = 13;
function cM(n) {
  return n == 45 || n == 46 || n == 58 || n >= 65 && n <= 90 || n == 95 || n >= 97 && n <= 122 || n >= 161;
}
function hM(n) {
  return n == 9 || n == 10 || n == 13 || n == 32;
}
let _m = null, Xm = null, qm = 0;
function bf(n, e) {
  let t = n.pos + e;
  if (Xm == n && qm == t) return _m;
  for (; hM(n.peek(e)); ) e++;
  let i = "";
  for (; ; ) {
    let r = n.peek(e);
    if (!cM(r)) break;
    i += String.fromCharCode(r), e++;
  }
  return Xm = n, qm = t, _m = i || null;
}
function Zm(n, e) {
  this.name = n, this.parent = e;
}
const fM = new Ns({
  start: null,
  shift(n, e, t, i) {
    return e == Sf ? new Zm(bf(i, 1) || "", n) : n;
  },
  reduce(n, e) {
    return e == lM && n ? n.parent : n;
  },
  reuse(n, e, t, i) {
    let r = e.type.id;
    return r == Sf || r == aM ? new Zm(bf(i, 1) || "", n) : n;
  },
  strict: !1
}), uM = new Ee((n, e) => {
  if (n.next == 60) {
    if (n.advance(), n.next == 47) {
      n.advance();
      let t = bf(n, 0);
      if (!t) return n.acceptToken(iM);
      if (e.context && t == e.context.name) return n.acceptToken(eM);
      for (let i = e.context; i; i = i.parent) if (i.name == t) return n.acceptToken(tM, -2);
      n.acceptToken(nM);
    } else if (n.next != 33 && n.next != 63)
      return n.acceptToken(Sf);
  }
}, { contextual: !0 });
function Nu(n, e) {
  return new Ee((t) => {
    let i = 0, r = e.charCodeAt(0);
    e: for (; !(t.next < 0); t.advance(), i++)
      if (t.next == r) {
        for (let s = 1; s < e.length; s++)
          if (t.peek(s) != e.charCodeAt(s)) continue e;
        break;
      }
    i && t.acceptToken(n);
  });
}
const dM = Nu(rM, "-->"), OM = Nu(sM, "?>"), pM = Nu(oM, "]]>"), mM = Nt({
  Text: g.content,
  "StartTag StartCloseTag EndTag SelfCloseEndTag": g.angleBracket,
  TagName: g.tagName,
  "MismatchedCloseTag/TagName": [g.tagName, g.invalid],
  AttributeName: g.attributeName,
  AttributeValue: g.attributeValue,
  Is: g.definitionOperator,
  "EntityReference CharacterReference": g.character,
  Comment: g.blockComment,
  ProcessingInst: g.processingInstruction,
  DoctypeDecl: g.documentMeta,
  Cdata: g.special(g.string)
}), gM = jt.deserialize({
  version: 14,
  states: ",lOQOaOOOrOxO'#CfOzOpO'#CiO!tOaO'#CgOOOP'#Cg'#CgO!{OrO'#CrO#TOtO'#CsO#]OpO'#CtOOOP'#DT'#DTOOOP'#Cv'#CvQQOaOOOOOW'#Cw'#CwO#eOxO,59QOOOP,59Q,59QOOOO'#Cx'#CxO#mOpO,59TO#uO!bO,59TOOOP'#C|'#C|O$TOaO,59RO$[OpO'#CoOOOP,59R,59ROOOQ'#C}'#C}O$dOrO,59^OOOP,59^,59^OOOS'#DO'#DOO$lOtO,59_OOOP,59_,59_O$tOpO,59`O$|OpO,59`OOOP-E6t-E6tOOOW-E6u-E6uOOOP1G.l1G.lOOOO-E6v-E6vO%UO!bO1G.oO%UO!bO1G.oO%dOpO'#CkO%lO!bO'#CyO%zO!bO1G.oOOOP1G.o1G.oOOOP1G.w1G.wOOOP-E6z-E6zOOOP1G.m1G.mO&VOpO,59ZO&_OpO,59ZOOOQ-E6{-E6{OOOP1G.x1G.xOOOS-E6|-E6|OOOP1G.y1G.yO&gOpO1G.zO&gOpO1G.zOOOP1G.z1G.zO&oO!bO7+$ZO&}O!bO7+$ZOOOP7+$Z7+$ZOOOP7+$c7+$cO'YOpO,59VO'bOpO,59VO'mO!bO,59eOOOO-E6w-E6wO'{OpO1G.uO'{OpO1G.uOOOP1G.u1G.uO(TOpO7+$fOOOP7+$f7+$fO(]O!bO<<GuOOOP<<Gu<<GuOOOP<<G}<<G}O'bOpO1G.qO'bOpO1G.qO(hO#tO'#CnO(vO&jO'#CnOOOO1G.q1G.qO)UOpO7+$aOOOP7+$a7+$aOOOP<<HQ<<HQOOOPAN=aAN=aOOOPAN=iAN=iO'bOpO7+$]OOOO7+$]7+$]OOOO'#Cz'#CzO)^O#tO,59YOOOO,59Y,59YOOOO'#C{'#C{O)lO&jO,59YOOOP<<G{<<G{OOOO<<Gw<<GwOOOO-E6x-E6xOOOO1G.t1G.tOOOO-E6y-E6y",
  stateData: ")z~OPQOSVOTWOVWOWWOXWOiXOyPO!QTO!SUO~OvZOx]O~O^`Oz^O~OPQOQcOSVOTWOVWOWWOXWOyPO!QTO!SUO~ORdO~P!SOteO!PgO~OuhO!RjO~O^lOz^O~OvZOxoO~O^qOz^O~O[vO`sOdwOz^O~ORyO~P!SO^{Oz^O~OteO!P}O~OuhO!R!PO~O^!QOz^O~O[!SOz^O~O[!VO`sOd!WOz^O~Oa!YOz^O~Oz^O[mX`mXdmX~O[!VO`sOd!WO~O^!]Oz^O~O[!_Oz^O~O[!aOz^O~O[!cO`sOd!dOz^O~O[!cO`sOd!dO~Oa!eOz^O~Oz^O{!gO}!hO~Oz^O[ma`madma~O[!kOz^O~O[!lOz^O~O[!mO`sOd!nO~OW!qOX!qO{!sO|!qO~OW!tOX!tO}!sO!O!tO~O[!vOz^O~OW!qOX!qO{!yO|!qO~OW!tOX!tO}!yO!O!tO~O",
  goto: "%cxPPPPPPPPPPyyP!PP!VPP!`!jP!pyyyP!v!|#S$[$k$q$w$}%TPPPP%ZXWORYbXRORYb_t`qru!T!U!bQ!i!YS!p!e!fR!w!oQdRRybXSORYbQYORmYQ[PRn[Q_QQkVjp_krz!R!T!X!Z!^!`!f!j!oQr`QzcQ!RlQ!TqQ!XsQ!ZtQ!^{Q!`!QQ!f!YQ!j!]R!o!eQu`S!UqrU![u!U!bR!b!TQ!r!gR!x!rQ!u!hR!z!uQbRRxbQfTR|fQiUR!OiSXOYTaRb",
  nodeNames: "⚠ StartTag StartCloseTag MissingCloseTag StartCloseTag StartCloseTag Document Text EntityReference CharacterReference Cdata Element EndTag OpenTag TagName Attribute AttributeName Is AttributeValue CloseTag SelfCloseEndTag SelfClosingTag Comment ProcessingInst MismatchedCloseTag DoctypeDecl",
  maxTerm: 50,
  context: fM,
  nodeProps: [
    ["closedBy", 1, "SelfCloseEndTag EndTag", 13, "CloseTag MissingCloseTag"],
    ["openedBy", 12, "StartTag StartCloseTag", 19, "OpenTag", 20, "StartTag"],
    ["isolate", -6, 13, 18, 19, 21, 22, 24, ""]
  ],
  propSources: [mM],
  skippedNodes: [0],
  repeatNodeCount: 9,
  tokenData: "!)v~R!YOX$qXY)iYZ)iZ]$q]^)i^p$qpq)iqr$qrs*vsv$qvw+fwx/ix}$q}!O0[!O!P$q!P!Q2z!Q![$q![!]4n!]!^$q!^!_8U!_!`!#t!`!a!$l!a!b!%d!b!c$q!c!}4n!}#P$q#P#Q!'W#Q#R$q#R#S4n#S#T$q#T#o4n#o%W$q%W%o4n%o%p$q%p&a4n&a&b$q&b1p4n1p4U$q4U4d4n4d4e$q4e$IS4n$IS$I`$q$I`$Ib4n$Ib$Kh$q$Kh%#t4n%#t&/x$q&/x&Et4n&Et&FV$q&FV;'S4n;'S;:j8O;:j;=`)c<%l?&r$q?&r?Ah4n?Ah?BY$q?BY?Mn4n?MnO$qi$zXVP|W!O`Or$qrs%gsv$qwx'^x!^$q!^!_(o!_;'S$q;'S;=`)c<%lO$qa%nVVP!O`Ov%gwx&Tx!^%g!^!_&o!_;'S%g;'S;=`'W<%lO%gP&YTVPOv&Tw!^&T!_;'S&T;'S;=`&i<%lO&TP&lP;=`<%l&T`&tS!O`Ov&ox;'S&o;'S;=`'Q<%lO&o`'TP;=`<%l&oa'ZP;=`<%l%gX'eWVP|WOr'^rs&Tsv'^w!^'^!^!_'}!_;'S'^;'S;=`(i<%lO'^W(ST|WOr'}sv'}w;'S'};'S;=`(c<%lO'}W(fP;=`<%l'}X(lP;=`<%l'^h(vV|W!O`Or(ors&osv(owx'}x;'S(o;'S;=`)]<%lO(oh)`P;=`<%l(oi)fP;=`<%l$qo)t`VP|W!O`zUOX$qXY)iYZ)iZ]$q]^)i^p$qpq)iqr$qrs%gsv$qwx'^x!^$q!^!_(o!_;'S$q;'S;=`)c<%lO$qk+PV{YVP!O`Ov%gwx&Tx!^%g!^!_&o!_;'S%g;'S;=`'W<%lO%g~+iast,n![!]-r!c!}-r#R#S-r#T#o-r%W%o-r%p&a-r&b1p-r4U4d-r4e$IS-r$I`$Ib-r$Kh%#t-r&/x&Et-r&FV;'S-r;'S;:j/c?&r?Ah-r?BY?Mn-r~,qQ!Q![,w#l#m-V~,zQ!Q![,w!]!^-Q~-VOX~~-YR!Q![-c!c!i-c#T#Z-c~-fS!Q![-c!]!^-Q!c!i-c#T#Z-c~-ug}!O-r!O!P-r!Q![-r![!]-r!]!^/^!c!}-r#R#S-r#T#o-r$}%O-r%W%o-r%p&a-r&b1p-r1p4U-r4U4d-r4e$IS-r$I`$Ib-r$Je$Jg-r$Kh%#t-r&/x&Et-r&FV;'S-r;'S;:j/c?&r?Ah-r?BY?Mn-r~/cOW~~/fP;=`<%l-rk/rW}bVP|WOr'^rs&Tsv'^w!^'^!^!_'}!_;'S'^;'S;=`(i<%lO'^k0eZVP|W!O`Or$qrs%gsv$qwx'^x}$q}!O1W!O!^$q!^!_(o!_;'S$q;'S;=`)c<%lO$qk1aZVP|W!O`Or$qrs%gsv$qwx'^x!^$q!^!_(o!_!`$q!`!a2S!a;'S$q;'S;=`)c<%lO$qk2_X!PQVP|W!O`Or$qrs%gsv$qwx'^x!^$q!^!_(o!_;'S$q;'S;=`)c<%lO$qm3TZVP|W!O`Or$qrs%gsv$qwx'^x!^$q!^!_(o!_!`$q!`!a3v!a;'S$q;'S;=`)c<%lO$qm4RXdSVP|W!O`Or$qrs%gsv$qwx'^x!^$q!^!_(o!_;'S$q;'S;=`)c<%lO$qo4{!P`S^QVP|W!O`Or$qrs%gsv$qwx'^x}$q}!O4n!O!P4n!P!Q$q!Q![4n![!]4n!]!^$q!^!_(o!_!c$q!c!}4n!}#R$q#R#S4n#S#T$q#T#o4n#o$}$q$}%O4n%O%W$q%W%o4n%o%p$q%p&a4n&a&b$q&b1p4n1p4U4n4U4d4n4d4e$q4e$IS4n$IS$I`$q$I`$Ib4n$Ib$Je$q$Je$Jg4n$Jg$Kh$q$Kh%#t4n%#t&/x$q&/x&Et4n&Et&FV$q&FV;'S4n;'S;:j8O;:j;=`)c<%l?&r$q?&r?Ah4n?Ah?BY$q?BY?Mn4n?MnO$qo8RP;=`<%l4ni8]Y|W!O`Oq(oqr8{rs&osv(owx'}x!a(o!a!b!#U!b;'S(o;'S;=`)]<%lO(oi9S_|W!O`Or(ors&osv(owx'}x}(o}!O:R!O!f(o!f!g;e!g!}(o!}#ODh#O#W(o#W#XLp#X;'S(o;'S;=`)]<%lO(oi:YX|W!O`Or(ors&osv(owx'}x}(o}!O:u!O;'S(o;'S;=`)]<%lO(oi;OV!QP|W!O`Or(ors&osv(owx'}x;'S(o;'S;=`)]<%lO(oi;lX|W!O`Or(ors&osv(owx'}x!q(o!q!r<X!r;'S(o;'S;=`)]<%lO(oi<`X|W!O`Or(ors&osv(owx'}x!e(o!e!f<{!f;'S(o;'S;=`)]<%lO(oi=SX|W!O`Or(ors&osv(owx'}x!v(o!v!w=o!w;'S(o;'S;=`)]<%lO(oi=vX|W!O`Or(ors&osv(owx'}x!{(o!{!|>c!|;'S(o;'S;=`)]<%lO(oi>jX|W!O`Or(ors&osv(owx'}x!r(o!r!s?V!s;'S(o;'S;=`)]<%lO(oi?^X|W!O`Or(ors&osv(owx'}x!g(o!g!h?y!h;'S(o;'S;=`)]<%lO(oi@QY|W!O`Or?yrs@psv?yvwA[wxBdx!`?y!`!aCr!a;'S?y;'S;=`Db<%lO?ya@uV!O`Ov@pvxA[x!`@p!`!aAy!a;'S@p;'S;=`B^<%lO@pPA_TO!`A[!`!aAn!a;'SA[;'S;=`As<%lOA[PAsOiPPAvP;=`<%lA[aBQSiP!O`Ov&ox;'S&o;'S;=`'Q<%lO&oaBaP;=`<%l@pXBiX|WOrBdrsA[svBdvwA[w!`Bd!`!aCU!a;'SBd;'S;=`Cl<%lOBdXC]TiP|WOr'}sv'}w;'S'};'S;=`(c<%lO'}XCoP;=`<%lBdiC{ViP|W!O`Or(ors&osv(owx'}x;'S(o;'S;=`)]<%lO(oiDeP;=`<%l?yiDoZ|W!O`Or(ors&osv(owx'}x!e(o!e!fEb!f#V(o#V#WIr#W;'S(o;'S;=`)]<%lO(oiEiX|W!O`Or(ors&osv(owx'}x!f(o!f!gFU!g;'S(o;'S;=`)]<%lO(oiF]X|W!O`Or(ors&osv(owx'}x!c(o!c!dFx!d;'S(o;'S;=`)]<%lO(oiGPX|W!O`Or(ors&osv(owx'}x!v(o!v!wGl!w;'S(o;'S;=`)]<%lO(oiGsX|W!O`Or(ors&osv(owx'}x!c(o!c!dH`!d;'S(o;'S;=`)]<%lO(oiHgX|W!O`Or(ors&osv(owx'}x!}(o!}#OIS#O;'S(o;'S;=`)]<%lO(oiI]V|W!O`yPOr(ors&osv(owx'}x;'S(o;'S;=`)]<%lO(oiIyX|W!O`Or(ors&osv(owx'}x#W(o#W#XJf#X;'S(o;'S;=`)]<%lO(oiJmX|W!O`Or(ors&osv(owx'}x#T(o#T#UKY#U;'S(o;'S;=`)]<%lO(oiKaX|W!O`Or(ors&osv(owx'}x#h(o#h#iK|#i;'S(o;'S;=`)]<%lO(oiLTX|W!O`Or(ors&osv(owx'}x#T(o#T#UH`#U;'S(o;'S;=`)]<%lO(oiLwX|W!O`Or(ors&osv(owx'}x#c(o#c#dMd#d;'S(o;'S;=`)]<%lO(oiMkX|W!O`Or(ors&osv(owx'}x#V(o#V#WNW#W;'S(o;'S;=`)]<%lO(oiN_X|W!O`Or(ors&osv(owx'}x#h(o#h#iNz#i;'S(o;'S;=`)]<%lO(oi! RX|W!O`Or(ors&osv(owx'}x#m(o#m#n! n#n;'S(o;'S;=`)]<%lO(oi! uX|W!O`Or(ors&osv(owx'}x#d(o#d#e!!b#e;'S(o;'S;=`)]<%lO(oi!!iX|W!O`Or(ors&osv(owx'}x#X(o#X#Y?y#Y;'S(o;'S;=`)]<%lO(oi!#_V!SP|W!O`Or(ors&osv(owx'}x;'S(o;'S;=`)]<%lO(ok!$PXaQVP|W!O`Or$qrs%gsv$qwx'^x!^$q!^!_(o!_;'S$q;'S;=`)c<%lO$qo!$wX[UVP|W!O`Or$qrs%gsv$qwx'^x!^$q!^!_(o!_;'S$q;'S;=`)c<%lO$qk!%mZVP|W!O`Or$qrs%gsv$qwx'^x!^$q!^!_(o!_!`$q!`!a!&`!a;'S$q;'S;=`)c<%lO$qk!&kX!RQVP|W!O`Or$qrs%gsv$qwx'^x!^$q!^!_(o!_;'S$q;'S;=`)c<%lO$qk!'aZVP|W!O`Or$qrs%gsv$qwx'^x!^$q!^!_(o!_#P$q#P#Q!(S#Q;'S$q;'S;=`)c<%lO$qk!(]ZVP|W!O`Or$qrs%gsv$qwx'^x!^$q!^!_(o!_!`$q!`!a!)O!a;'S$q;'S;=`)c<%lO$qk!)ZXxQVP|W!O`Or$qrs%gsv$qwx'^x!^$q!^!_(o!_;'S$q;'S;=`)c<%lO$q",
  tokenizers: [uM, dM, OM, pM, 0, 1, 2, 3, 4],
  topRules: { Document: [0, 6] },
  tokenPrec: 0
});
function Ho(n, e) {
  let t = e && e.getChild("TagName");
  return t ? n.sliceString(t.from, t.to) : "";
}
function Ec(n, e) {
  let t = e && e.firstChild;
  return !t || t.name != "OpenTag" ? "" : Ho(n, t);
}
function yM(n, e, t) {
  let i = e && e.getChildren("Attribute").find((s) => s.from <= t && s.to >= t), r = i && i.getChild("AttributeName");
  return r ? n.sliceString(r.from, r.to) : "";
}
function Ac(n) {
  for (let e = n && n.parent; e; e = e.parent)
    if (e.name == "Element")
      return e;
  return null;
}
function SM(n, e) {
  var t;
  let i = ge(n).resolveInner(e, -1), r = null;
  for (let s = i; !r && s.parent; s = s.parent)
    (s.name == "OpenTag" || s.name == "CloseTag" || s.name == "SelfClosingTag" || s.name == "MismatchedCloseTag") && (r = s);
  if (r && (r.to > e || r.lastChild.type.isError)) {
    let s = r.parent;
    if (i.name == "TagName")
      return r.name == "CloseTag" || r.name == "MismatchedCloseTag" ? { type: "closeTag", from: i.from, context: s } : { type: "openTag", from: i.from, context: Ac(s) };
    if (i.name == "AttributeName")
      return { type: "attrName", from: i.from, context: r };
    if (i.name == "AttributeValue")
      return { type: "attrValue", from: i.from, context: r };
    let o = i == r || i.name == "Attribute" ? i.childBefore(e) : i;
    return o?.name == "StartTag" ? { type: "openTag", from: e, context: Ac(s) } : o?.name == "StartCloseTag" && o.to <= e ? { type: "closeTag", from: e, context: s } : o?.name == "Is" ? { type: "attrValue", from: e, context: r } : o ? { type: "attrName", from: e, context: r } : null;
  } else if (i.name == "StartCloseTag")
    return { type: "closeTag", from: e, context: i.parent };
  for (; i.parent && i.to == e && !(!((t = i.lastChild) === null || t === void 0) && t.type.isError); )
    i = i.parent;
  return i.name == "Element" || i.name == "Text" || i.name == "Document" ? { type: "tag", from: e, context: i.name == "Element" ? i : Ac(i) } : null;
}
let bM = class {
  constructor(e, t, i) {
    this.attrs = t, this.attrValues = i, this.children = [], this.name = e.name, this.completion = Object.assign(Object.assign({ type: "type" }, e.completion || {}), { label: this.name }), this.openCompletion = Object.assign(Object.assign({}, this.completion), { label: "<" + this.name }), this.closeCompletion = Object.assign(Object.assign({}, this.completion), { label: "</" + this.name + ">", boost: 2 }), this.closeNameCompletion = Object.assign(Object.assign({}, this.completion), { label: this.name + ">" }), this.text = e.textContent ? e.textContent.map((r) => ({ label: r, type: "text" })) : [];
  }
};
const _c = /^[:\-\.\w\u00b7-\uffff]*$/;
function Mm(n) {
  return Object.assign(Object.assign({ type: "property" }, n.completion || {}), { label: n.name });
}
function Lm(n) {
  return typeof n == "string" ? { label: `"${n}"`, type: "constant" } : /^"/.test(n.label) ? n : Object.assign(Object.assign({}, n), { label: `"${n.label}"` });
}
function QM(n, e) {
  let t = [], i = [], r = /* @__PURE__ */ Object.create(null);
  for (let a of e) {
    let c = Mm(a);
    t.push(c), a.global && i.push(c), a.values && (r[a.name] = a.values.map(Lm));
  }
  let s = [], o = [], l = /* @__PURE__ */ Object.create(null);
  for (let a of n) {
    let c = i, h = r;
    a.attributes && (c = c.concat(a.attributes.map((u) => typeof u == "string" ? t.find((d) => d.label == u) || { label: u, type: "property" } : (u.values && (h == r && (h = Object.create(h)), h[u.name] = u.values.map(Lm)), Mm(u)))));
    let f = new bM(a, c, h);
    l[f.name] = f, s.push(f), a.top && o.push(f);
  }
  o.length || (o = s);
  for (let a = 0; a < s.length; a++) {
    let c = n[a], h = s[a];
    if (c.children)
      for (let f of c.children)
        l[f] && h.children.push(l[f]);
    else
      h.children = s;
  }
  return (a) => {
    var c;
    let { doc: h } = a.state, f = SM(a.state, a.pos);
    if (!f || f.type == "tag" && !a.explicit)
      return null;
    let { type: u, from: d, context: O } = f;
    if (u == "openTag") {
      let p = o, m = Ec(h, O);
      if (m) {
        let y = l[m];
        p = y?.children || s;
      }
      return {
        from: d,
        options: p.map((y) => y.completion),
        validFor: _c
      };
    } else if (u == "closeTag") {
      let p = Ec(h, O);
      return p ? {
        from: d,
        to: a.pos + (h.sliceString(a.pos, a.pos + 1) == ">" ? 1 : 0),
        options: [((c = l[p]) === null || c === void 0 ? void 0 : c.closeNameCompletion) || { label: p + ">", type: "type" }],
        validFor: _c
      } : null;
    } else if (u == "attrName") {
      let p = l[Ho(h, O)];
      return {
        from: d,
        options: p?.attrs || i,
        validFor: _c
      };
    } else if (u == "attrValue") {
      let p = yM(h, O, d);
      if (!p)
        return null;
      let m = l[Ho(h, O)], y = (m?.attrValues || r)[p];
      return !y || !y.length ? null : {
        from: d,
        to: a.pos + (h.sliceString(a.pos, a.pos + 1) == '"' ? 1 : 0),
        options: y,
        validFor: /^"[^"]*"?$/
      };
    } else if (u == "tag") {
      let p = Ec(h, O), m = l[p], y = [], S = O && O.lastChild;
      p && (!S || S.name != "CloseTag" || Ho(h, S) != p) && y.push(m ? m.closeCompletion : { label: "</" + p + ">", type: "type", boost: 2 });
      let b = y.concat((m?.children || (O ? s : o)).map((w) => w.openCompletion));
      if (O && m?.text.length) {
        let w = O.firstChild;
        w.to > a.pos - 20 && !/\S/.test(a.state.sliceDoc(w.to, a.pos)) && (b = b.concat(m.text));
      }
      return {
        from: d,
        options: b,
        validFor: /^<\/?[:\-\.\w\u00b7-\uffff]*$/
      };
    } else
      return null;
  };
}
const Qf = /* @__PURE__ */ It.define({
  name: "xml",
  parser: /* @__PURE__ */ gM.configure({
    props: [
      /* @__PURE__ */ yn.add({
        Element(n) {
          let e = /^\s*<\//.test(n.textAfter);
          return n.lineIndent(n.node.from) + (e ? 0 : n.unit);
        },
        "OpenTag CloseTag SelfClosingTag"(n) {
          return n.column(n.node.from) + n.unit;
        }
      }),
      /* @__PURE__ */ Gt.add({
        Element(n) {
          let e = n.firstChild, t = n.lastChild;
          return !e || e.name != "OpenTag" ? null : { from: e.to, to: t.name == "CloseTag" ? t.from : n.to };
        }
      }),
      /* @__PURE__ */ pu.add({
        "OpenTag CloseTag": (n) => n.getChild("TagName")
      })
    ]
  }),
  languageData: {
    commentTokens: { block: { open: "<!--", close: "-->" } },
    indentOnInput: /^\s*<\/$/
  }
});
function xM(n = {}) {
  let e = [Qf.data.of({
    autocomplete: QM(n.elements || [], n.attributes || [])
  })];
  return n.autoCloseTags !== !1 && e.push(kM), new mn(Qf, e);
}
function Vm(n, e, t = n.length) {
  if (!e)
    return "";
  let i = e.firstChild, r = i && i.getChild("TagName");
  return r ? n.sliceString(r.from, Math.min(r.to, t)) : "";
}
const kM = /* @__PURE__ */ Z.inputHandler.of((n, e, t, i, r) => {
  if (n.composing || n.state.readOnly || e != t || i != ">" && i != "/" || !Qf.isActiveAt(n.state, e, -1))
    return !1;
  let s = r(), { state: o } = s, l = o.changeByRange((a) => {
    var c, h, f;
    let { head: u } = a, d = o.doc.sliceString(u - 1, u) == i, O = ge(o).resolveInner(u, -1), p;
    if (d && i == ">" && O.name == "EndTag") {
      let m = O.parent;
      if (((h = (c = m.parent) === null || c === void 0 ? void 0 : c.lastChild) === null || h === void 0 ? void 0 : h.name) != "CloseTag" && (p = Vm(o.doc, m.parent, u))) {
        let y = u + (o.doc.sliceString(u, u + 1) === ">" ? 1 : 0), S = `</${p}>`;
        return { range: a, changes: { from: u, to: y, insert: S } };
      }
    } else if (d && i == "/" && O.name == "StartCloseTag") {
      let m = O.parent;
      if (O.from == u - 2 && ((f = m.lastChild) === null || f === void 0 ? void 0 : f.name) != "CloseTag" && (p = Vm(o.doc, m, u))) {
        let y = u + (o.doc.sliceString(u, u + 1) === ">" ? 1 : 0), S = `${p}>`;
        return {
          range: $.cursor(u + S.length, -1),
          changes: { from: u, to: y, insert: S }
        };
      }
    }
    return { range: a };
  });
  return l.changes.empty ? !1 : (n.dispatch([
    s,
    o.update(l, {
      userEvent: "input.complete",
      scrollIntoView: !0
    })
  ]), !0);
}), wM = Nt({
  String: g.string,
  Number: g.number,
  "True False": g.bool,
  PropertyName: g.propertyName,
  Null: g.null,
  ", :": g.separator,
  "[ ]": g.squareBracket,
  "{ }": g.brace
}), vM = jt.deserialize({
  version: 14,
  states: "$bOVQPOOOOQO'#Cb'#CbOnQPO'#CeOvQPO'#ClOOQO'#Cr'#CrQOQPOOOOQO'#Cg'#CgO}QPO'#CfO!SQPO'#CtOOQO,59P,59PO![QPO,59PO!aQPO'#CuOOQO,59W,59WO!iQPO,59WOVQPO,59QOqQPO'#CmO!nQPO,59`OOQO1G.k1G.kOVQPO'#CnO!vQPO,59aOOQO1G.r1G.rOOQO1G.l1G.lOOQO,59X,59XOOQO-E6k-E6kOOQO,59Y,59YOOQO-E6l-E6l",
  stateData: "#O~OeOS~OQSORSOSSOTSOWQO_ROgPO~OVXOgUO~O^[O~PVO[^O~O]_OVhX~OVaO~O]bO^iX~O^dO~O]_OVha~O]bO^ia~O",
  goto: "!kjPPPPPPkPPkqwPPPPk{!RPPP!XP!e!hXSOR^bQWQRf_TVQ_Q`WRg`QcZRicQTOQZRQe^RhbRYQR]R",
  nodeNames: "⚠ JsonText True False Null Number String } { Object Property PropertyName : , ] [ Array",
  maxTerm: 25,
  nodeProps: [
    ["isolate", -2, 6, 11, ""],
    ["openedBy", 7, "{", 14, "["],
    ["closedBy", 8, "}", 15, "]"]
  ],
  propSources: [wM],
  skippedNodes: [0],
  repeatNodeCount: 2,
  tokenData: "(|~RaXY!WYZ!W]^!Wpq!Wrs!]|}$u}!O$z!Q!R%T!R![&c![!]&t!}#O&y#P#Q'O#Y#Z'T#b#c'r#h#i(Z#o#p(r#q#r(w~!]Oe~~!`Wpq!]qr!]rs!xs#O!]#O#P!}#P;'S!];'S;=`$o<%lO!]~!}Og~~#QXrs!]!P!Q!]#O#P!]#U#V!]#Y#Z!]#b#c!]#f#g!]#h#i!]#i#j#m~#pR!Q![#y!c!i#y#T#Z#y~#|R!Q![$V!c!i$V#T#Z$V~$YR!Q![$c!c!i$c#T#Z$c~$fR!Q![!]!c!i!]#T#Z!]~$rP;=`<%l!]~$zO]~~$}Q!Q!R%T!R![&c~%YRT~!O!P%c!g!h%w#X#Y%w~%fP!Q![%i~%nRT~!Q![%i!g!h%w#X#Y%w~%zR{|&T}!O&T!Q![&Z~&WP!Q![&Z~&`PT~!Q![&Z~&hST~!O!P%c!Q![&c!g!h%w#X#Y%w~&yO[~~'OO_~~'TO^~~'WP#T#U'Z~'^P#`#a'a~'dP#g#h'g~'jP#X#Y'm~'rOR~~'uP#i#j'x~'{P#`#a(O~(RP#`#a(U~(ZOS~~(^P#f#g(a~(dP#i#j(g~(jP#X#Y(m~(rOQ~~(wOW~~(|OV~",
  tokenizers: [0],
  topRules: { JsonText: [0, 1] },
  tokenPrec: 0
}), PM = /* @__PURE__ */ It.define({
  name: "json",
  parser: /* @__PURE__ */ vM.configure({
    props: [
      /* @__PURE__ */ yn.add({
        Object: /* @__PURE__ */ mi({ except: /^\s*\}/ }),
        Array: /* @__PURE__ */ mi({ except: /^\s*\]/ })
      }),
      /* @__PURE__ */ Gt.add({
        "Object Array": Ds
      })
    ]
  }),
  languageData: {
    closeBrackets: { brackets: ["[", "{", '"'] },
    indentOnInput: /^\s*[\}\]]$/
  }
});
function $M() {
  return new mn(PM);
}
function TM(n) {
  switch (n.split(".").pop()?.toLowerCase()) {
    case "js":
    case "ts":
    case "tsx":
    case "jsx":
      return Qb();
    case "json":
      return $M();
    case "html":
      return O1();
    case "css":
      return s1();
    case "md":
      return gX();
    case "xml":
      return xM();
    case "py":
      return kZ();
    case "yml":
    case "yaml":
      return JZ();
    case "sql":
      return lq();
    default:
      return [];
  }
}
const CM = Z.theme(
  {
    "&": {
      backgroundColor: "#171717",
      height: "100%",
      color: "#f5f5f5"
    },
    ".cm-content": {
      caretColor: "#f4f4f5"
    },
    ".cm-cursor, .cm-dropCursor": {
      borderLeftColor: "#f4f4f5"
    },
    "&.cm-focused .cm-selectionBackground, ::selection": {
      backgroundColor: "#3f3f46"
    },
    ".cm-gutters": {
      backgroundColor: "#171717",
      color: "#a3a3a3",
      border: "none"
    }
  },
  { dark: !0 }
), RM = Z.theme(
  {
    "&": {
      backgroundColor: "#ffffff",
      height: "100%",
      color: "#1f2937"
    },
    ".cm-content": {
      caretColor: "#111827"
    },
    ".cm-cursor, .cm-dropCursor": {
      borderLeftColor: "#111827"
    },
    "&.cm-focused .cm-selectionBackground, ::selection": {
      backgroundColor: "#e5e7eb"
    },
    ".cm-gutters": {
      backgroundColor: "#f9fafb",
      color: "#9ca3af",
      border: "none"
    }
  },
  { dark: !1 }
), EM = Or.define([
  { tag: g.keyword, color: "#22d3ee" },
  { tag: [g.name, g.deleted, g.character, g.propertyName], color: "#f87171" },
  { tag: [g.variableName], color: "#e4e4e7" },
  { tag: [g.string, g.meta], color: "#86efac" },
  { tag: [g.function(g.variableName)], color: "#c4b5fd" },
  { tag: [g.number], color: "#facc15" },
  { tag: [g.comment], color: "#71717a", fontStyle: "italic" }
]), AM = Or.define([
  { tag: g.keyword, color: "#0ea5e9" },
  { tag: [g.name, g.deleted, g.character, g.propertyName], color: "#b91c1c" },
  { tag: [g.variableName], color: "#374151" },
  { tag: [g.string, g.meta], color: "#16a34a" },
  { tag: [g.function(g.variableName)], color: "#7c3aed" },
  { tag: [g.number], color: "#ca8a04" },
  { tag: [g.comment], color: "#6b7280", fontStyle: "italic" }
]);
function _M(n) {
  return [
    n === "dark" ? CM : RM,
    oS(n === "dark" ? EM : AM)
  ];
}
function I1(n, e) {
  return function() {
    return n.apply(e, arguments);
  };
}
const { toString: XM } = Object.prototype, { getPrototypeOf: Gu } = Object, { iterator: ya, toStringTag: j1 } = Symbol, Sa = /* @__PURE__ */ ((n) => (e) => {
  const t = XM.call(e);
  return n[t] || (n[t] = t.slice(8, -1).toLowerCase());
})(/* @__PURE__ */ Object.create(null)), Ht = (n) => (n = n.toLowerCase(), (e) => Sa(e) === n), ba = (n) => (e) => typeof e === n, { isArray: yr } = Array, Rs = ba("undefined");
function qM(n) {
  return n !== null && !Rs(n) && n.constructor !== null && !Rs(n.constructor) && ut(n.constructor.isBuffer) && n.constructor.isBuffer(n);
}
const U1 = Ht("ArrayBuffer");
function ZM(n) {
  let e;
  return typeof ArrayBuffer < "u" && ArrayBuffer.isView ? e = ArrayBuffer.isView(n) : e = n && n.buffer && U1(n.buffer), e;
}
const MM = ba("string"), ut = ba("function"), Y1 = ba("number"), Qa = (n) => n !== null && typeof n == "object", LM = (n) => n === !0 || n === !1, Ko = (n) => {
  if (Sa(n) !== "object")
    return !1;
  const e = Gu(n);
  return (e === null || e === Object.prototype || Object.getPrototypeOf(e) === null) && !(j1 in n) && !(ya in n);
}, VM = Ht("Date"), BM = Ht("File"), WM = Ht("Blob"), zM = Ht("FileList"), DM = (n) => Qa(n) && ut(n.pipe), IM = (n) => {
  let e;
  return n && (typeof FormData == "function" && n instanceof FormData || ut(n.append) && ((e = Sa(n)) === "formdata" || // detect form-data instance
  e === "object" && ut(n.toString) && n.toString() === "[object FormData]"));
}, jM = Ht("URLSearchParams"), [UM, YM, NM, GM] = ["ReadableStream", "Request", "Response", "Headers"].map(Ht), FM = (n) => n.trim ? n.trim() : n.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
function Gs(n, e, { allOwnKeys: t = !1 } = {}) {
  if (n === null || typeof n > "u")
    return;
  let i, r;
  if (typeof n != "object" && (n = [n]), yr(n))
    for (i = 0, r = n.length; i < r; i++)
      e.call(null, n[i], i, n);
  else {
    const s = t ? Object.getOwnPropertyNames(n) : Object.keys(n), o = s.length;
    let l;
    for (i = 0; i < o; i++)
      l = s[i], e.call(null, n[l], l, n);
  }
}
function N1(n, e) {
  e = e.toLowerCase();
  const t = Object.keys(n);
  let i = t.length, r;
  for (; i-- > 0; )
    if (r = t[i], e === r.toLowerCase())
      return r;
  return null;
}
const Oi = typeof globalThis < "u" ? globalThis : typeof self < "u" ? self : typeof window < "u" ? window : global, G1 = (n) => !Rs(n) && n !== Oi;
function xf() {
  const { caseless: n } = G1(this) && this || {}, e = {}, t = (i, r) => {
    const s = n && N1(e, r) || r;
    Ko(e[s]) && Ko(i) ? e[s] = xf(e[s], i) : Ko(i) ? e[s] = xf({}, i) : yr(i) ? e[s] = i.slice() : e[s] = i;
  };
  for (let i = 0, r = arguments.length; i < r; i++)
    arguments[i] && Gs(arguments[i], t);
  return e;
}
const HM = (n, e, t, { allOwnKeys: i } = {}) => (Gs(e, (r, s) => {
  t && ut(r) ? n[s] = I1(r, t) : n[s] = r;
}, { allOwnKeys: i }), n), KM = (n) => (n.charCodeAt(0) === 65279 && (n = n.slice(1)), n), JM = (n, e, t, i) => {
  n.prototype = Object.create(e.prototype, i), n.prototype.constructor = n, Object.defineProperty(n, "super", {
    value: e.prototype
  }), t && Object.assign(n.prototype, t);
}, eL = (n, e, t, i) => {
  let r, s, o;
  const l = {};
  if (e = e || {}, n == null) return e;
  do {
    for (r = Object.getOwnPropertyNames(n), s = r.length; s-- > 0; )
      o = r[s], (!i || i(o, n, e)) && !l[o] && (e[o] = n[o], l[o] = !0);
    n = t !== !1 && Gu(n);
  } while (n && (!t || t(n, e)) && n !== Object.prototype);
  return e;
}, tL = (n, e, t) => {
  n = String(n), (t === void 0 || t > n.length) && (t = n.length), t -= e.length;
  const i = n.indexOf(e, t);
  return i !== -1 && i === t;
}, nL = (n) => {
  if (!n) return null;
  if (yr(n)) return n;
  let e = n.length;
  if (!Y1(e)) return null;
  const t = new Array(e);
  for (; e-- > 0; )
    t[e] = n[e];
  return t;
}, iL = /* @__PURE__ */ ((n) => (e) => n && e instanceof n)(typeof Uint8Array < "u" && Gu(Uint8Array)), rL = (n, e) => {
  const i = (n && n[ya]).call(n);
  let r;
  for (; (r = i.next()) && !r.done; ) {
    const s = r.value;
    e.call(n, s[0], s[1]);
  }
}, sL = (n, e) => {
  let t;
  const i = [];
  for (; (t = n.exec(e)) !== null; )
    i.push(t);
  return i;
}, oL = Ht("HTMLFormElement"), lL = (n) => n.toLowerCase().replace(
  /[-_\s]([a-z\d])(\w*)/g,
  function(t, i, r) {
    return i.toUpperCase() + r;
  }
), Bm = (({ hasOwnProperty: n }) => (e, t) => n.call(e, t))(Object.prototype), aL = Ht("RegExp"), F1 = (n, e) => {
  const t = Object.getOwnPropertyDescriptors(n), i = {};
  Gs(t, (r, s) => {
    let o;
    (o = e(r, s, n)) !== !1 && (i[s] = o || r);
  }), Object.defineProperties(n, i);
}, cL = (n) => {
  F1(n, (e, t) => {
    if (ut(n) && ["arguments", "caller", "callee"].indexOf(t) !== -1)
      return !1;
    const i = n[t];
    if (ut(i)) {
      if (e.enumerable = !1, "writable" in e) {
        e.writable = !1;
        return;
      }
      e.set || (e.set = () => {
        throw Error("Can not rewrite read-only method '" + t + "'");
      });
    }
  });
}, hL = (n, e) => {
  const t = {}, i = (r) => {
    r.forEach((s) => {
      t[s] = !0;
    });
  };
  return yr(n) ? i(n) : i(String(n).split(e)), t;
}, fL = () => {
}, uL = (n, e) => n != null && Number.isFinite(n = +n) ? n : e;
function dL(n) {
  return !!(n && ut(n.append) && n[j1] === "FormData" && n[ya]);
}
const OL = (n) => {
  const e = new Array(10), t = (i, r) => {
    if (Qa(i)) {
      if (e.indexOf(i) >= 0)
        return;
      if (!("toJSON" in i)) {
        e[r] = i;
        const s = yr(i) ? [] : {};
        return Gs(i, (o, l) => {
          const a = t(o, r + 1);
          !Rs(a) && (s[l] = a);
        }), e[r] = void 0, s;
      }
    }
    return i;
  };
  return t(n, 0);
}, pL = Ht("AsyncFunction"), mL = (n) => n && (Qa(n) || ut(n)) && ut(n.then) && ut(n.catch), H1 = ((n, e) => n ? setImmediate : e ? ((t, i) => (Oi.addEventListener("message", ({ source: r, data: s }) => {
  r === Oi && s === t && i.length && i.shift()();
}, !1), (r) => {
  i.push(r), Oi.postMessage(t, "*");
}))(`axios@${Math.random()}`, []) : (t) => setTimeout(t))(
  typeof setImmediate == "function",
  ut(Oi.postMessage)
), gL = typeof queueMicrotask < "u" ? queueMicrotask.bind(Oi) : typeof process < "u" && process.nextTick || H1, yL = (n) => n != null && ut(n[ya]), v = {
  isArray: yr,
  isArrayBuffer: U1,
  isBuffer: qM,
  isFormData: IM,
  isArrayBufferView: ZM,
  isString: MM,
  isNumber: Y1,
  isBoolean: LM,
  isObject: Qa,
  isPlainObject: Ko,
  isReadableStream: UM,
  isRequest: YM,
  isResponse: NM,
  isHeaders: GM,
  isUndefined: Rs,
  isDate: VM,
  isFile: BM,
  isBlob: WM,
  isRegExp: aL,
  isFunction: ut,
  isStream: DM,
  isURLSearchParams: jM,
  isTypedArray: iL,
  isFileList: zM,
  forEach: Gs,
  merge: xf,
  extend: HM,
  trim: FM,
  stripBOM: KM,
  inherits: JM,
  toFlatObject: eL,
  kindOf: Sa,
  kindOfTest: Ht,
  endsWith: tL,
  toArray: nL,
  forEachEntry: rL,
  matchAll: sL,
  isHTMLForm: oL,
  hasOwnProperty: Bm,
  hasOwnProp: Bm,
  // an alias to avoid ESLint no-prototype-builtins detection
  reduceDescriptors: F1,
  freezeMethods: cL,
  toObjectSet: hL,
  toCamelCase: lL,
  noop: fL,
  toFiniteNumber: uL,
  findKey: N1,
  global: Oi,
  isContextDefined: G1,
  isSpecCompliantForm: dL,
  toJSONObject: OL,
  isAsyncFn: pL,
  isThenable: mL,
  setImmediate: H1,
  asap: gL,
  isIterable: yL
};
function ie(n, e, t, i, r) {
  Error.call(this), Error.captureStackTrace ? Error.captureStackTrace(this, this.constructor) : this.stack = new Error().stack, this.message = n, this.name = "AxiosError", e && (this.code = e), t && (this.config = t), i && (this.request = i), r && (this.response = r, this.status = r.status ? r.status : null);
}
v.inherits(ie, Error, {
  toJSON: function() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: v.toJSONObject(this.config),
      code: this.code,
      status: this.status
    };
  }
});
const K1 = ie.prototype, J1 = {};
[
  "ERR_BAD_OPTION_VALUE",
  "ERR_BAD_OPTION",
  "ECONNABORTED",
  "ETIMEDOUT",
  "ERR_NETWORK",
  "ERR_FR_TOO_MANY_REDIRECTS",
  "ERR_DEPRECATED",
  "ERR_BAD_RESPONSE",
  "ERR_BAD_REQUEST",
  "ERR_CANCELED",
  "ERR_NOT_SUPPORT",
  "ERR_INVALID_URL"
  // eslint-disable-next-line func-names
].forEach((n) => {
  J1[n] = { value: n };
});
Object.defineProperties(ie, J1);
Object.defineProperty(K1, "isAxiosError", { value: !0 });
ie.from = (n, e, t, i, r, s) => {
  const o = Object.create(K1);
  return v.toFlatObject(n, o, function(a) {
    return a !== Error.prototype;
  }, (l) => l !== "isAxiosError"), ie.call(o, n.message, e, t, i, r), o.cause = n, o.name = n.name, s && Object.assign(o, s), o;
};
const SL = null;
function kf(n) {
  return v.isPlainObject(n) || v.isArray(n);
}
function eQ(n) {
  return v.endsWith(n, "[]") ? n.slice(0, -2) : n;
}
function Wm(n, e, t) {
  return n ? n.concat(e).map(function(r, s) {
    return r = eQ(r), !t && s ? "[" + r + "]" : r;
  }).join(t ? "." : "") : e;
}
function bL(n) {
  return v.isArray(n) && !n.some(kf);
}
const QL = v.toFlatObject(v, {}, null, function(e) {
  return /^is[A-Z]/.test(e);
});
function xa(n, e, t) {
  if (!v.isObject(n))
    throw new TypeError("target must be an object");
  e = e || new FormData(), t = v.toFlatObject(t, {
    metaTokens: !0,
    dots: !1,
    indexes: !1
  }, !1, function(p, m) {
    return !v.isUndefined(m[p]);
  });
  const i = t.metaTokens, r = t.visitor || h, s = t.dots, o = t.indexes, a = (t.Blob || typeof Blob < "u" && Blob) && v.isSpecCompliantForm(e);
  if (!v.isFunction(r))
    throw new TypeError("visitor must be a function");
  function c(O) {
    if (O === null) return "";
    if (v.isDate(O))
      return O.toISOString();
    if (!a && v.isBlob(O))
      throw new ie("Blob is not supported. Use a Buffer instead.");
    return v.isArrayBuffer(O) || v.isTypedArray(O) ? a && typeof Blob == "function" ? new Blob([O]) : Buffer.from(O) : O;
  }
  function h(O, p, m) {
    let y = O;
    if (O && !m && typeof O == "object") {
      if (v.endsWith(p, "{}"))
        p = i ? p : p.slice(0, -2), O = JSON.stringify(O);
      else if (v.isArray(O) && bL(O) || (v.isFileList(O) || v.endsWith(p, "[]")) && (y = v.toArray(O)))
        return p = eQ(p), y.forEach(function(b, w) {
          !(v.isUndefined(b) || b === null) && e.append(
            // eslint-disable-next-line no-nested-ternary
            o === !0 ? Wm([p], w, s) : o === null ? p : p + "[]",
            c(b)
          );
        }), !1;
    }
    return kf(O) ? !0 : (e.append(Wm(m, p, s), c(O)), !1);
  }
  const f = [], u = Object.assign(QL, {
    defaultVisitor: h,
    convertValue: c,
    isVisitable: kf
  });
  function d(O, p) {
    if (!v.isUndefined(O)) {
      if (f.indexOf(O) !== -1)
        throw Error("Circular reference detected in " + p.join("."));
      f.push(O), v.forEach(O, function(y, S) {
        (!(v.isUndefined(y) || y === null) && r.call(
          e,
          y,
          v.isString(S) ? S.trim() : S,
          p,
          u
        )) === !0 && d(y, p ? p.concat(S) : [S]);
      }), f.pop();
    }
  }
  if (!v.isObject(n))
    throw new TypeError("data must be an object");
  return d(n), e;
}
function zm(n) {
  const e = {
    "!": "%21",
    "'": "%27",
    "(": "%28",
    ")": "%29",
    "~": "%7E",
    "%20": "+",
    "%00": "\0"
  };
  return encodeURIComponent(n).replace(/[!'()~]|%20|%00/g, function(i) {
    return e[i];
  });
}
function Fu(n, e) {
  this._pairs = [], n && xa(n, this, e);
}
const tQ = Fu.prototype;
tQ.append = function(e, t) {
  this._pairs.push([e, t]);
};
tQ.toString = function(e) {
  const t = e ? function(i) {
    return e.call(this, i, zm);
  } : zm;
  return this._pairs.map(function(r) {
    return t(r[0]) + "=" + t(r[1]);
  }, "").join("&");
};
function xL(n) {
  return encodeURIComponent(n).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
}
function nQ(n, e, t) {
  if (!e)
    return n;
  const i = t && t.encode || xL;
  v.isFunction(t) && (t = {
    serialize: t
  });
  const r = t && t.serialize;
  let s;
  if (r ? s = r(e, t) : s = v.isURLSearchParams(e) ? e.toString() : new Fu(e, t).toString(i), s) {
    const o = n.indexOf("#");
    o !== -1 && (n = n.slice(0, o)), n += (n.indexOf("?") === -1 ? "?" : "&") + s;
  }
  return n;
}
class Dm {
  constructor() {
    this.handlers = [];
  }
  /**
   * Add a new interceptor to the stack
   *
   * @param {Function} fulfilled The function to handle `then` for a `Promise`
   * @param {Function} rejected The function to handle `reject` for a `Promise`
   *
   * @return {Number} An ID used to remove interceptor later
   */
  use(e, t, i) {
    return this.handlers.push({
      fulfilled: e,
      rejected: t,
      synchronous: i ? i.synchronous : !1,
      runWhen: i ? i.runWhen : null
    }), this.handlers.length - 1;
  }
  /**
   * Remove an interceptor from the stack
   *
   * @param {Number} id The ID that was returned by `use`
   *
   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
   */
  eject(e) {
    this.handlers[e] && (this.handlers[e] = null);
  }
  /**
   * Clear all interceptors from the stack
   *
   * @returns {void}
   */
  clear() {
    this.handlers && (this.handlers = []);
  }
  /**
   * Iterate over all the registered interceptors
   *
   * This method is particularly useful for skipping over any
   * interceptors that may have become `null` calling `eject`.
   *
   * @param {Function} fn The function to call for each interceptor
   *
   * @returns {void}
   */
  forEach(e) {
    v.forEach(this.handlers, function(i) {
      i !== null && e(i);
    });
  }
}
const iQ = {
  silentJSONParsing: !0,
  forcedJSONParsing: !0,
  clarifyTimeoutError: !1
}, kL = typeof URLSearchParams < "u" ? URLSearchParams : Fu, wL = typeof FormData < "u" ? FormData : null, vL = typeof Blob < "u" ? Blob : null, PL = {
  isBrowser: !0,
  classes: {
    URLSearchParams: kL,
    FormData: wL,
    Blob: vL
  },
  protocols: ["http", "https", "file", "blob", "url", "data"]
}, Hu = typeof window < "u" && typeof document < "u", wf = typeof navigator == "object" && navigator || void 0, $L = Hu && (!wf || ["ReactNative", "NativeScript", "NS"].indexOf(wf.product) < 0), TL = typeof WorkerGlobalScope < "u" && // eslint-disable-next-line no-undef
self instanceof WorkerGlobalScope && typeof self.importScripts == "function", CL = Hu && window.location.href || "http://localhost", RL = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  hasBrowserEnv: Hu,
  hasStandardBrowserEnv: $L,
  hasStandardBrowserWebWorkerEnv: TL,
  navigator: wf,
  origin: CL
}, Symbol.toStringTag, { value: "Module" })), et = {
  ...RL,
  ...PL
};
function EL(n, e) {
  return xa(n, new et.classes.URLSearchParams(), Object.assign({
    visitor: function(t, i, r, s) {
      return et.isNode && v.isBuffer(t) ? (this.append(i, t.toString("base64")), !1) : s.defaultVisitor.apply(this, arguments);
    }
  }, e));
}
function AL(n) {
  return v.matchAll(/\w+|\[(\w*)]/g, n).map((e) => e[0] === "[]" ? "" : e[1] || e[0]);
}
function _L(n) {
  const e = {}, t = Object.keys(n);
  let i;
  const r = t.length;
  let s;
  for (i = 0; i < r; i++)
    s = t[i], e[s] = n[s];
  return e;
}
function rQ(n) {
  function e(t, i, r, s) {
    let o = t[s++];
    if (o === "__proto__") return !0;
    const l = Number.isFinite(+o), a = s >= t.length;
    return o = !o && v.isArray(r) ? r.length : o, a ? (v.hasOwnProp(r, o) ? r[o] = [r[o], i] : r[o] = i, !l) : ((!r[o] || !v.isObject(r[o])) && (r[o] = []), e(t, i, r[o], s) && v.isArray(r[o]) && (r[o] = _L(r[o])), !l);
  }
  if (v.isFormData(n) && v.isFunction(n.entries)) {
    const t = {};
    return v.forEachEntry(n, (i, r) => {
      e(AL(i), r, t, 0);
    }), t;
  }
  return null;
}
function XL(n, e, t) {
  if (v.isString(n))
    try {
      return (e || JSON.parse)(n), v.trim(n);
    } catch (i) {
      if (i.name !== "SyntaxError")
        throw i;
    }
  return (t || JSON.stringify)(n);
}
const Fs = {
  transitional: iQ,
  adapter: ["xhr", "http", "fetch"],
  transformRequest: [function(e, t) {
    const i = t.getContentType() || "", r = i.indexOf("application/json") > -1, s = v.isObject(e);
    if (s && v.isHTMLForm(e) && (e = new FormData(e)), v.isFormData(e))
      return r ? JSON.stringify(rQ(e)) : e;
    if (v.isArrayBuffer(e) || v.isBuffer(e) || v.isStream(e) || v.isFile(e) || v.isBlob(e) || v.isReadableStream(e))
      return e;
    if (v.isArrayBufferView(e))
      return e.buffer;
    if (v.isURLSearchParams(e))
      return t.setContentType("application/x-www-form-urlencoded;charset=utf-8", !1), e.toString();
    let l;
    if (s) {
      if (i.indexOf("application/x-www-form-urlencoded") > -1)
        return EL(e, this.formSerializer).toString();
      if ((l = v.isFileList(e)) || i.indexOf("multipart/form-data") > -1) {
        const a = this.env && this.env.FormData;
        return xa(
          l ? { "files[]": e } : e,
          a && new a(),
          this.formSerializer
        );
      }
    }
    return s || r ? (t.setContentType("application/json", !1), XL(e)) : e;
  }],
  transformResponse: [function(e) {
    const t = this.transitional || Fs.transitional, i = t && t.forcedJSONParsing, r = this.responseType === "json";
    if (v.isResponse(e) || v.isReadableStream(e))
      return e;
    if (e && v.isString(e) && (i && !this.responseType || r)) {
      const o = !(t && t.silentJSONParsing) && r;
      try {
        return JSON.parse(e);
      } catch (l) {
        if (o)
          throw l.name === "SyntaxError" ? ie.from(l, ie.ERR_BAD_RESPONSE, this, null, this.response) : l;
      }
    }
    return e;
  }],
  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,
  xsrfCookieName: "XSRF-TOKEN",
  xsrfHeaderName: "X-XSRF-TOKEN",
  maxContentLength: -1,
  maxBodyLength: -1,
  env: {
    FormData: et.classes.FormData,
    Blob: et.classes.Blob
  },
  validateStatus: function(e) {
    return e >= 200 && e < 300;
  },
  headers: {
    common: {
      Accept: "application/json, text/plain, */*",
      "Content-Type": void 0
    }
  }
};
v.forEach(["delete", "get", "head", "post", "put", "patch"], (n) => {
  Fs.headers[n] = {};
});
const qL = v.toObjectSet([
  "age",
  "authorization",
  "content-length",
  "content-type",
  "etag",
  "expires",
  "from",
  "host",
  "if-modified-since",
  "if-unmodified-since",
  "last-modified",
  "location",
  "max-forwards",
  "proxy-authorization",
  "referer",
  "retry-after",
  "user-agent"
]), ZL = (n) => {
  const e = {};
  let t, i, r;
  return n && n.split(`
`).forEach(function(o) {
    r = o.indexOf(":"), t = o.substring(0, r).trim().toLowerCase(), i = o.substring(r + 1).trim(), !(!t || e[t] && qL[t]) && (t === "set-cookie" ? e[t] ? e[t].push(i) : e[t] = [i] : e[t] = e[t] ? e[t] + ", " + i : i);
  }), e;
}, Im = Symbol("internals");
function Xr(n) {
  return n && String(n).trim().toLowerCase();
}
function Jo(n) {
  return n === !1 || n == null ? n : v.isArray(n) ? n.map(Jo) : String(n);
}
function ML(n) {
  const e = /* @__PURE__ */ Object.create(null), t = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
  let i;
  for (; i = t.exec(n); )
    e[i[1]] = i[2];
  return e;
}
const LL = (n) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(n.trim());
function Xc(n, e, t, i, r) {
  if (v.isFunction(i))
    return i.call(this, e, t);
  if (r && (e = t), !!v.isString(e)) {
    if (v.isString(i))
      return e.indexOf(i) !== -1;
    if (v.isRegExp(i))
      return i.test(e);
  }
}
function VL(n) {
  return n.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (e, t, i) => t.toUpperCase() + i);
}
function BL(n, e) {
  const t = v.toCamelCase(" " + e);
  ["get", "set", "has"].forEach((i) => {
    Object.defineProperty(n, i + t, {
      value: function(r, s, o) {
        return this[i].call(this, e, r, s, o);
      },
      configurable: !0
    });
  });
}
let dt = class {
  constructor(e) {
    e && this.set(e);
  }
  set(e, t, i) {
    const r = this;
    function s(l, a, c) {
      const h = Xr(a);
      if (!h)
        throw new Error("header name must be a non-empty string");
      const f = v.findKey(r, h);
      (!f || r[f] === void 0 || c === !0 || c === void 0 && r[f] !== !1) && (r[f || a] = Jo(l));
    }
    const o = (l, a) => v.forEach(l, (c, h) => s(c, h, a));
    if (v.isPlainObject(e) || e instanceof this.constructor)
      o(e, t);
    else if (v.isString(e) && (e = e.trim()) && !LL(e))
      o(ZL(e), t);
    else if (v.isObject(e) && v.isIterable(e)) {
      let l = {}, a, c;
      for (const h of e) {
        if (!v.isArray(h))
          throw TypeError("Object iterator must return a key-value pair");
        l[c = h[0]] = (a = l[c]) ? v.isArray(a) ? [...a, h[1]] : [a, h[1]] : h[1];
      }
      o(l, t);
    } else
      e != null && s(t, e, i);
    return this;
  }
  get(e, t) {
    if (e = Xr(e), e) {
      const i = v.findKey(this, e);
      if (i) {
        const r = this[i];
        if (!t)
          return r;
        if (t === !0)
          return ML(r);
        if (v.isFunction(t))
          return t.call(this, r, i);
        if (v.isRegExp(t))
          return t.exec(r);
        throw new TypeError("parser must be boolean|regexp|function");
      }
    }
  }
  has(e, t) {
    if (e = Xr(e), e) {
      const i = v.findKey(this, e);
      return !!(i && this[i] !== void 0 && (!t || Xc(this, this[i], i, t)));
    }
    return !1;
  }
  delete(e, t) {
    const i = this;
    let r = !1;
    function s(o) {
      if (o = Xr(o), o) {
        const l = v.findKey(i, o);
        l && (!t || Xc(i, i[l], l, t)) && (delete i[l], r = !0);
      }
    }
    return v.isArray(e) ? e.forEach(s) : s(e), r;
  }
  clear(e) {
    const t = Object.keys(this);
    let i = t.length, r = !1;
    for (; i--; ) {
      const s = t[i];
      (!e || Xc(this, this[s], s, e, !0)) && (delete this[s], r = !0);
    }
    return r;
  }
  normalize(e) {
    const t = this, i = {};
    return v.forEach(this, (r, s) => {
      const o = v.findKey(i, s);
      if (o) {
        t[o] = Jo(r), delete t[s];
        return;
      }
      const l = e ? VL(s) : String(s).trim();
      l !== s && delete t[s], t[l] = Jo(r), i[l] = !0;
    }), this;
  }
  concat(...e) {
    return this.constructor.concat(this, ...e);
  }
  toJSON(e) {
    const t = /* @__PURE__ */ Object.create(null);
    return v.forEach(this, (i, r) => {
      i != null && i !== !1 && (t[r] = e && v.isArray(i) ? i.join(", ") : i);
    }), t;
  }
  [Symbol.iterator]() {
    return Object.entries(this.toJSON())[Symbol.iterator]();
  }
  toString() {
    return Object.entries(this.toJSON()).map(([e, t]) => e + ": " + t).join(`
`);
  }
  getSetCookie() {
    return this.get("set-cookie") || [];
  }
  get [Symbol.toStringTag]() {
    return "AxiosHeaders";
  }
  static from(e) {
    return e instanceof this ? e : new this(e);
  }
  static concat(e, ...t) {
    const i = new this(e);
    return t.forEach((r) => i.set(r)), i;
  }
  static accessor(e) {
    const i = (this[Im] = this[Im] = {
      accessors: {}
    }).accessors, r = this.prototype;
    function s(o) {
      const l = Xr(o);
      i[l] || (BL(r, o), i[l] = !0);
    }
    return v.isArray(e) ? e.forEach(s) : s(e), this;
  }
};
dt.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent", "Authorization"]);
v.reduceDescriptors(dt.prototype, ({ value: n }, e) => {
  let t = e[0].toUpperCase() + e.slice(1);
  return {
    get: () => n,
    set(i) {
      this[t] = i;
    }
  };
});
v.freezeMethods(dt);
function qc(n, e) {
  const t = this || Fs, i = e || t, r = dt.from(i.headers);
  let s = i.data;
  return v.forEach(n, function(l) {
    s = l.call(t, s, r.normalize(), e ? e.status : void 0);
  }), r.normalize(), s;
}
function sQ(n) {
  return !!(n && n.__CANCEL__);
}
function Sr(n, e, t) {
  ie.call(this, n ?? "canceled", ie.ERR_CANCELED, e, t), this.name = "CanceledError";
}
v.inherits(Sr, ie, {
  __CANCEL__: !0
});
function oQ(n, e, t) {
  const i = t.config.validateStatus;
  !t.status || !i || i(t.status) ? n(t) : e(new ie(
    "Request failed with status code " + t.status,
    [ie.ERR_BAD_REQUEST, ie.ERR_BAD_RESPONSE][Math.floor(t.status / 100) - 4],
    t.config,
    t.request,
    t
  ));
}
function WL(n) {
  const e = /^([-+\w]{1,25})(:?\/\/|:)/.exec(n);
  return e && e[1] || "";
}
function zL(n, e) {
  n = n || 10;
  const t = new Array(n), i = new Array(n);
  let r = 0, s = 0, o;
  return e = e !== void 0 ? e : 1e3, function(a) {
    const c = Date.now(), h = i[s];
    o || (o = c), t[r] = a, i[r] = c;
    let f = s, u = 0;
    for (; f !== r; )
      u += t[f++], f = f % n;
    if (r = (r + 1) % n, r === s && (s = (s + 1) % n), c - o < e)
      return;
    const d = h && c - h;
    return d ? Math.round(u * 1e3 / d) : void 0;
  };
}
function DL(n, e) {
  let t = 0, i = 1e3 / e, r, s;
  const o = (c, h = Date.now()) => {
    t = h, r = null, s && (clearTimeout(s), s = null), n.apply(null, c);
  };
  return [(...c) => {
    const h = Date.now(), f = h - t;
    f >= i ? o(c, h) : (r = c, s || (s = setTimeout(() => {
      s = null, o(r);
    }, i - f)));
  }, () => r && o(r)];
}
const jl = (n, e, t = 3) => {
  let i = 0;
  const r = zL(50, 250);
  return DL((s) => {
    const o = s.loaded, l = s.lengthComputable ? s.total : void 0, a = o - i, c = r(a), h = o <= l;
    i = o;
    const f = {
      loaded: o,
      total: l,
      progress: l ? o / l : void 0,
      bytes: a,
      rate: c || void 0,
      estimated: c && l && h ? (l - o) / c : void 0,
      event: s,
      lengthComputable: l != null,
      [e ? "download" : "upload"]: !0
    };
    n(f);
  }, t);
}, jm = (n, e) => {
  const t = n != null;
  return [(i) => e[0]({
    lengthComputable: t,
    total: n,
    loaded: i
  }), e[1]];
}, Um = (n) => (...e) => v.asap(() => n(...e)), IL = et.hasStandardBrowserEnv ? /* @__PURE__ */ ((n, e) => (t) => (t = new URL(t, et.origin), n.protocol === t.protocol && n.host === t.host && (e || n.port === t.port)))(
  new URL(et.origin),
  et.navigator && /(msie|trident)/i.test(et.navigator.userAgent)
) : () => !0, jL = et.hasStandardBrowserEnv ? (
  // Standard browser envs support document.cookie
  {
    write(n, e, t, i, r, s) {
      const o = [n + "=" + encodeURIComponent(e)];
      v.isNumber(t) && o.push("expires=" + new Date(t).toGMTString()), v.isString(i) && o.push("path=" + i), v.isString(r) && o.push("domain=" + r), s === !0 && o.push("secure"), document.cookie = o.join("; ");
    },
    read(n) {
      const e = document.cookie.match(new RegExp("(^|;\\s*)(" + n + ")=([^;]*)"));
      return e ? decodeURIComponent(e[3]) : null;
    },
    remove(n) {
      this.write(n, "", Date.now() - 864e5);
    }
  }
) : (
  // Non-standard browser env (web workers, react-native) lack needed support.
  {
    write() {
    },
    read() {
      return null;
    },
    remove() {
    }
  }
);
function UL(n) {
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(n);
}
function YL(n, e) {
  return e ? n.replace(/\/?\/$/, "") + "/" + e.replace(/^\/+/, "") : n;
}
function lQ(n, e, t) {
  let i = !UL(e);
  return n && (i || t == !1) ? YL(n, e) : e;
}
const Ym = (n) => n instanceof dt ? { ...n } : n;
function Ti(n, e) {
  e = e || {};
  const t = {};
  function i(c, h, f, u) {
    return v.isPlainObject(c) && v.isPlainObject(h) ? v.merge.call({ caseless: u }, c, h) : v.isPlainObject(h) ? v.merge({}, h) : v.isArray(h) ? h.slice() : h;
  }
  function r(c, h, f, u) {
    if (v.isUndefined(h)) {
      if (!v.isUndefined(c))
        return i(void 0, c, f, u);
    } else return i(c, h, f, u);
  }
  function s(c, h) {
    if (!v.isUndefined(h))
      return i(void 0, h);
  }
  function o(c, h) {
    if (v.isUndefined(h)) {
      if (!v.isUndefined(c))
        return i(void 0, c);
    } else return i(void 0, h);
  }
  function l(c, h, f) {
    if (f in e)
      return i(c, h);
    if (f in n)
      return i(void 0, c);
  }
  const a = {
    url: s,
    method: s,
    data: s,
    baseURL: o,
    transformRequest: o,
    transformResponse: o,
    paramsSerializer: o,
    timeout: o,
    timeoutMessage: o,
    withCredentials: o,
    withXSRFToken: o,
    adapter: o,
    responseType: o,
    xsrfCookieName: o,
    xsrfHeaderName: o,
    onUploadProgress: o,
    onDownloadProgress: o,
    decompress: o,
    maxContentLength: o,
    maxBodyLength: o,
    beforeRedirect: o,
    transport: o,
    httpAgent: o,
    httpsAgent: o,
    cancelToken: o,
    socketPath: o,
    responseEncoding: o,
    validateStatus: l,
    headers: (c, h, f) => r(Ym(c), Ym(h), f, !0)
  };
  return v.forEach(Object.keys(Object.assign({}, n, e)), function(h) {
    const f = a[h] || r, u = f(n[h], e[h], h);
    v.isUndefined(u) && f !== l || (t[h] = u);
  }), t;
}
const aQ = (n) => {
  const e = Ti({}, n);
  let { data: t, withXSRFToken: i, xsrfHeaderName: r, xsrfCookieName: s, headers: o, auth: l } = e;
  e.headers = o = dt.from(o), e.url = nQ(lQ(e.baseURL, e.url, e.allowAbsoluteUrls), n.params, n.paramsSerializer), l && o.set(
    "Authorization",
    "Basic " + btoa((l.username || "") + ":" + (l.password ? unescape(encodeURIComponent(l.password)) : ""))
  );
  let a;
  if (v.isFormData(t)) {
    if (et.hasStandardBrowserEnv || et.hasStandardBrowserWebWorkerEnv)
      o.setContentType(void 0);
    else if ((a = o.getContentType()) !== !1) {
      const [c, ...h] = a ? a.split(";").map((f) => f.trim()).filter(Boolean) : [];
      o.setContentType([c || "multipart/form-data", ...h].join("; "));
    }
  }
  if (et.hasStandardBrowserEnv && (i && v.isFunction(i) && (i = i(e)), i || i !== !1 && IL(e.url))) {
    const c = r && s && jL.read(s);
    c && o.set(r, c);
  }
  return e;
}, NL = typeof XMLHttpRequest < "u", GL = NL && function(n) {
  return new Promise(function(t, i) {
    const r = aQ(n);
    let s = r.data;
    const o = dt.from(r.headers).normalize();
    let { responseType: l, onUploadProgress: a, onDownloadProgress: c } = r, h, f, u, d, O;
    function p() {
      d && d(), O && O(), r.cancelToken && r.cancelToken.unsubscribe(h), r.signal && r.signal.removeEventListener("abort", h);
    }
    let m = new XMLHttpRequest();
    m.open(r.method.toUpperCase(), r.url, !0), m.timeout = r.timeout;
    function y() {
      if (!m)
        return;
      const b = dt.from(
        "getAllResponseHeaders" in m && m.getAllResponseHeaders()
      ), k = {
        data: !l || l === "text" || l === "json" ? m.responseText : m.response,
        status: m.status,
        statusText: m.statusText,
        headers: b,
        config: n,
        request: m
      };
      oQ(function(P) {
        t(P), p();
      }, function(P) {
        i(P), p();
      }, k), m = null;
    }
    "onloadend" in m ? m.onloadend = y : m.onreadystatechange = function() {
      !m || m.readyState !== 4 || m.status === 0 && !(m.responseURL && m.responseURL.indexOf("file:") === 0) || setTimeout(y);
    }, m.onabort = function() {
      m && (i(new ie("Request aborted", ie.ECONNABORTED, n, m)), m = null);
    }, m.onerror = function() {
      i(new ie("Network Error", ie.ERR_NETWORK, n, m)), m = null;
    }, m.ontimeout = function() {
      let w = r.timeout ? "timeout of " + r.timeout + "ms exceeded" : "timeout exceeded";
      const k = r.transitional || iQ;
      r.timeoutErrorMessage && (w = r.timeoutErrorMessage), i(new ie(
        w,
        k.clarifyTimeoutError ? ie.ETIMEDOUT : ie.ECONNABORTED,
        n,
        m
      )), m = null;
    }, s === void 0 && o.setContentType(null), "setRequestHeader" in m && v.forEach(o.toJSON(), function(w, k) {
      m.setRequestHeader(k, w);
    }), v.isUndefined(r.withCredentials) || (m.withCredentials = !!r.withCredentials), l && l !== "json" && (m.responseType = r.responseType), c && ([u, O] = jl(c, !0), m.addEventListener("progress", u)), a && m.upload && ([f, d] = jl(a), m.upload.addEventListener("progress", f), m.upload.addEventListener("loadend", d)), (r.cancelToken || r.signal) && (h = (b) => {
      m && (i(!b || b.type ? new Sr(null, n, m) : b), m.abort(), m = null);
    }, r.cancelToken && r.cancelToken.subscribe(h), r.signal && (r.signal.aborted ? h() : r.signal.addEventListener("abort", h)));
    const S = WL(r.url);
    if (S && et.protocols.indexOf(S) === -1) {
      i(new ie("Unsupported protocol " + S + ":", ie.ERR_BAD_REQUEST, n));
      return;
    }
    m.send(s || null);
  });
}, FL = (n, e) => {
  const { length: t } = n = n ? n.filter(Boolean) : [];
  if (e || t) {
    let i = new AbortController(), r;
    const s = function(c) {
      if (!r) {
        r = !0, l();
        const h = c instanceof Error ? c : this.reason;
        i.abort(h instanceof ie ? h : new Sr(h instanceof Error ? h.message : h));
      }
    };
    let o = e && setTimeout(() => {
      o = null, s(new ie(`timeout ${e} of ms exceeded`, ie.ETIMEDOUT));
    }, e);
    const l = () => {
      n && (o && clearTimeout(o), o = null, n.forEach((c) => {
        c.unsubscribe ? c.unsubscribe(s) : c.removeEventListener("abort", s);
      }), n = null);
    };
    n.forEach((c) => c.addEventListener("abort", s));
    const { signal: a } = i;
    return a.unsubscribe = () => v.asap(l), a;
  }
}, HL = function* (n, e) {
  let t = n.byteLength;
  if (t < e) {
    yield n;
    return;
  }
  let i = 0, r;
  for (; i < t; )
    r = i + e, yield n.slice(i, r), i = r;
}, KL = async function* (n, e) {
  for await (const t of JL(n))
    yield* HL(t, e);
}, JL = async function* (n) {
  if (n[Symbol.asyncIterator]) {
    yield* n;
    return;
  }
  const e = n.getReader();
  try {
    for (; ; ) {
      const { done: t, value: i } = await e.read();
      if (t)
        break;
      yield i;
    }
  } finally {
    await e.cancel();
  }
}, Nm = (n, e, t, i) => {
  const r = KL(n, e);
  let s = 0, o, l = (a) => {
    o || (o = !0, i && i(a));
  };
  return new ReadableStream({
    async pull(a) {
      try {
        const { done: c, value: h } = await r.next();
        if (c) {
          l(), a.close();
          return;
        }
        let f = h.byteLength;
        if (t) {
          let u = s += f;
          t(u);
        }
        a.enqueue(new Uint8Array(h));
      } catch (c) {
        throw l(c), c;
      }
    },
    cancel(a) {
      return l(a), r.return();
    }
  }, {
    highWaterMark: 2
  });
}, ka = typeof fetch == "function" && typeof Request == "function" && typeof Response == "function", cQ = ka && typeof ReadableStream == "function", eV = ka && (typeof TextEncoder == "function" ? /* @__PURE__ */ ((n) => (e) => n.encode(e))(new TextEncoder()) : async (n) => new Uint8Array(await new Response(n).arrayBuffer())), hQ = (n, ...e) => {
  try {
    return !!n(...e);
  } catch {
    return !1;
  }
}, tV = cQ && hQ(() => {
  let n = !1;
  const e = new Request(et.origin, {
    body: new ReadableStream(),
    method: "POST",
    get duplex() {
      return n = !0, "half";
    }
  }).headers.has("Content-Type");
  return n && !e;
}), Gm = 64 * 1024, vf = cQ && hQ(() => v.isReadableStream(new Response("").body)), Ul = {
  stream: vf && ((n) => n.body)
};
ka && ((n) => {
  ["text", "arrayBuffer", "blob", "formData", "stream"].forEach((e) => {
    !Ul[e] && (Ul[e] = v.isFunction(n[e]) ? (t) => t[e]() : (t, i) => {
      throw new ie(`Response type '${e}' is not supported`, ie.ERR_NOT_SUPPORT, i);
    });
  });
})(new Response());
const nV = async (n) => {
  if (n == null)
    return 0;
  if (v.isBlob(n))
    return n.size;
  if (v.isSpecCompliantForm(n))
    return (await new Request(et.origin, {
      method: "POST",
      body: n
    }).arrayBuffer()).byteLength;
  if (v.isArrayBufferView(n) || v.isArrayBuffer(n))
    return n.byteLength;
  if (v.isURLSearchParams(n) && (n = n + ""), v.isString(n))
    return (await eV(n)).byteLength;
}, iV = async (n, e) => {
  const t = v.toFiniteNumber(n.getContentLength());
  return t ?? nV(e);
}, rV = ka && (async (n) => {
  let {
    url: e,
    method: t,
    data: i,
    signal: r,
    cancelToken: s,
    timeout: o,
    onDownloadProgress: l,
    onUploadProgress: a,
    responseType: c,
    headers: h,
    withCredentials: f = "same-origin",
    fetchOptions: u
  } = aQ(n);
  c = c ? (c + "").toLowerCase() : "text";
  let d = FL([r, s && s.toAbortSignal()], o), O;
  const p = d && d.unsubscribe && (() => {
    d.unsubscribe();
  });
  let m;
  try {
    if (a && tV && t !== "get" && t !== "head" && (m = await iV(h, i)) !== 0) {
      let k = new Request(e, {
        method: "POST",
        body: i,
        duplex: "half"
      }), Q;
      if (v.isFormData(i) && (Q = k.headers.get("content-type")) && h.setContentType(Q), k.body) {
        const [P, E] = jm(
          m,
          jl(Um(a))
        );
        i = Nm(k.body, Gm, P, E);
      }
    }
    v.isString(f) || (f = f ? "include" : "omit");
    const y = "credentials" in Request.prototype;
    O = new Request(e, {
      ...u,
      signal: d,
      method: t.toUpperCase(),
      headers: h.normalize().toJSON(),
      body: i,
      duplex: "half",
      credentials: y ? f : void 0
    });
    let S = await fetch(O);
    const b = vf && (c === "stream" || c === "response");
    if (vf && (l || b && p)) {
      const k = {};
      ["status", "statusText", "headers"].forEach((z) => {
        k[z] = S[z];
      });
      const Q = v.toFiniteNumber(S.headers.get("content-length")), [P, E] = l && jm(
        Q,
        jl(Um(l), !0)
      ) || [];
      S = new Response(
        Nm(S.body, Gm, P, () => {
          E && E(), p && p();
        }),
        k
      );
    }
    c = c || "text";
    let w = await Ul[v.findKey(Ul, c) || "text"](S, n);
    return !b && p && p(), await new Promise((k, Q) => {
      oQ(k, Q, {
        data: w,
        headers: dt.from(S.headers),
        status: S.status,
        statusText: S.statusText,
        config: n,
        request: O
      });
    });
  } catch (y) {
    throw p && p(), y && y.name === "TypeError" && /Load failed|fetch/i.test(y.message) ? Object.assign(
      new ie("Network Error", ie.ERR_NETWORK, n, O),
      {
        cause: y.cause || y
      }
    ) : ie.from(y, y && y.code, n, O);
  }
}), Pf = {
  http: SL,
  xhr: GL,
  fetch: rV
};
v.forEach(Pf, (n, e) => {
  if (n) {
    try {
      Object.defineProperty(n, "name", { value: e });
    } catch {
    }
    Object.defineProperty(n, "adapterName", { value: e });
  }
});
const Fm = (n) => `- ${n}`, sV = (n) => v.isFunction(n) || n === null || n === !1, fQ = {
  getAdapter: (n) => {
    n = v.isArray(n) ? n : [n];
    const { length: e } = n;
    let t, i;
    const r = {};
    for (let s = 0; s < e; s++) {
      t = n[s];
      let o;
      if (i = t, !sV(t) && (i = Pf[(o = String(t)).toLowerCase()], i === void 0))
        throw new ie(`Unknown adapter '${o}'`);
      if (i)
        break;
      r[o || "#" + s] = i;
    }
    if (!i) {
      const s = Object.entries(r).map(
        ([l, a]) => `adapter ${l} ` + (a === !1 ? "is not supported by the environment" : "is not available in the build")
      );
      let o = e ? s.length > 1 ? `since :
` + s.map(Fm).join(`
`) : " " + Fm(s[0]) : "as no adapter specified";
      throw new ie(
        "There is no suitable adapter to dispatch the request " + o,
        "ERR_NOT_SUPPORT"
      );
    }
    return i;
  },
  adapters: Pf
};
function Zc(n) {
  if (n.cancelToken && n.cancelToken.throwIfRequested(), n.signal && n.signal.aborted)
    throw new Sr(null, n);
}
function Hm(n) {
  return Zc(n), n.headers = dt.from(n.headers), n.data = qc.call(
    n,
    n.transformRequest
  ), ["post", "put", "patch"].indexOf(n.method) !== -1 && n.headers.setContentType("application/x-www-form-urlencoded", !1), fQ.getAdapter(n.adapter || Fs.adapter)(n).then(function(i) {
    return Zc(n), i.data = qc.call(
      n,
      n.transformResponse,
      i
    ), i.headers = dt.from(i.headers), i;
  }, function(i) {
    return sQ(i) || (Zc(n), i && i.response && (i.response.data = qc.call(
      n,
      n.transformResponse,
      i.response
    ), i.response.headers = dt.from(i.response.headers))), Promise.reject(i);
  });
}
const uQ = "1.9.0", wa = {};
["object", "boolean", "number", "function", "string", "symbol"].forEach((n, e) => {
  wa[n] = function(i) {
    return typeof i === n || "a" + (e < 1 ? "n " : " ") + n;
  };
});
const Km = {};
wa.transitional = function(e, t, i) {
  function r(s, o) {
    return "[Axios v" + uQ + "] Transitional option '" + s + "'" + o + (i ? ". " + i : "");
  }
  return (s, o, l) => {
    if (e === !1)
      throw new ie(
        r(o, " has been removed" + (t ? " in " + t : "")),
        ie.ERR_DEPRECATED
      );
    return t && !Km[o] && (Km[o] = !0, console.warn(
      r(
        o,
        " has been deprecated since v" + t + " and will be removed in the near future"
      )
    )), e ? e(s, o, l) : !0;
  };
};
wa.spelling = function(e) {
  return (t, i) => (console.warn(`${i} is likely a misspelling of ${e}`), !0);
};
function oV(n, e, t) {
  if (typeof n != "object")
    throw new ie("options must be an object", ie.ERR_BAD_OPTION_VALUE);
  const i = Object.keys(n);
  let r = i.length;
  for (; r-- > 0; ) {
    const s = i[r], o = e[s];
    if (o) {
      const l = n[s], a = l === void 0 || o(l, s, n);
      if (a !== !0)
        throw new ie("option " + s + " must be " + a, ie.ERR_BAD_OPTION_VALUE);
      continue;
    }
    if (t !== !0)
      throw new ie("Unknown option " + s, ie.ERR_BAD_OPTION);
  }
}
const el = {
  assertOptions: oV,
  validators: wa
}, tn = el.validators;
let yi = class {
  constructor(e) {
    this.defaults = e || {}, this.interceptors = {
      request: new Dm(),
      response: new Dm()
    };
  }
  /**
   * Dispatch a request
   *
   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
   * @param {?Object} config
   *
   * @returns {Promise} The Promise to be fulfilled
   */
  async request(e, t) {
    try {
      return await this._request(e, t);
    } catch (i) {
      if (i instanceof Error) {
        let r = {};
        Error.captureStackTrace ? Error.captureStackTrace(r) : r = new Error();
        const s = r.stack ? r.stack.replace(/^.+\n/, "") : "";
        try {
          i.stack ? s && !String(i.stack).endsWith(s.replace(/^.+\n.+\n/, "")) && (i.stack += `
` + s) : i.stack = s;
        } catch {
        }
      }
      throw i;
    }
  }
  _request(e, t) {
    typeof e == "string" ? (t = t || {}, t.url = e) : t = e || {}, t = Ti(this.defaults, t);
    const { transitional: i, paramsSerializer: r, headers: s } = t;
    i !== void 0 && el.assertOptions(i, {
      silentJSONParsing: tn.transitional(tn.boolean),
      forcedJSONParsing: tn.transitional(tn.boolean),
      clarifyTimeoutError: tn.transitional(tn.boolean)
    }, !1), r != null && (v.isFunction(r) ? t.paramsSerializer = {
      serialize: r
    } : el.assertOptions(r, {
      encode: tn.function,
      serialize: tn.function
    }, !0)), t.allowAbsoluteUrls !== void 0 || (this.defaults.allowAbsoluteUrls !== void 0 ? t.allowAbsoluteUrls = this.defaults.allowAbsoluteUrls : t.allowAbsoluteUrls = !0), el.assertOptions(t, {
      baseUrl: tn.spelling("baseURL"),
      withXsrfToken: tn.spelling("withXSRFToken")
    }, !0), t.method = (t.method || this.defaults.method || "get").toLowerCase();
    let o = s && v.merge(
      s.common,
      s[t.method]
    );
    s && v.forEach(
      ["delete", "get", "head", "post", "put", "patch", "common"],
      (O) => {
        delete s[O];
      }
    ), t.headers = dt.concat(o, s);
    const l = [];
    let a = !0;
    this.interceptors.request.forEach(function(p) {
      typeof p.runWhen == "function" && p.runWhen(t) === !1 || (a = a && p.synchronous, l.unshift(p.fulfilled, p.rejected));
    });
    const c = [];
    this.interceptors.response.forEach(function(p) {
      c.push(p.fulfilled, p.rejected);
    });
    let h, f = 0, u;
    if (!a) {
      const O = [Hm.bind(this), void 0];
      for (O.unshift.apply(O, l), O.push.apply(O, c), u = O.length, h = Promise.resolve(t); f < u; )
        h = h.then(O[f++], O[f++]);
      return h;
    }
    u = l.length;
    let d = t;
    for (f = 0; f < u; ) {
      const O = l[f++], p = l[f++];
      try {
        d = O(d);
      } catch (m) {
        p.call(this, m);
        break;
      }
    }
    try {
      h = Hm.call(this, d);
    } catch (O) {
      return Promise.reject(O);
    }
    for (f = 0, u = c.length; f < u; )
      h = h.then(c[f++], c[f++]);
    return h;
  }
  getUri(e) {
    e = Ti(this.defaults, e);
    const t = lQ(e.baseURL, e.url, e.allowAbsoluteUrls);
    return nQ(t, e.params, e.paramsSerializer);
  }
};
v.forEach(["delete", "get", "head", "options"], function(e) {
  yi.prototype[e] = function(t, i) {
    return this.request(Ti(i || {}, {
      method: e,
      url: t,
      data: (i || {}).data
    }));
  };
});
v.forEach(["post", "put", "patch"], function(e) {
  function t(i) {
    return function(s, o, l) {
      return this.request(Ti(l || {}, {
        method: e,
        headers: i ? {
          "Content-Type": "multipart/form-data"
        } : {},
        url: s,
        data: o
      }));
    };
  }
  yi.prototype[e] = t(), yi.prototype[e + "Form"] = t(!0);
});
let lV = class dQ {
  constructor(e) {
    if (typeof e != "function")
      throw new TypeError("executor must be a function.");
    let t;
    this.promise = new Promise(function(s) {
      t = s;
    });
    const i = this;
    this.promise.then((r) => {
      if (!i._listeners) return;
      let s = i._listeners.length;
      for (; s-- > 0; )
        i._listeners[s](r);
      i._listeners = null;
    }), this.promise.then = (r) => {
      let s;
      const o = new Promise((l) => {
        i.subscribe(l), s = l;
      }).then(r);
      return o.cancel = function() {
        i.unsubscribe(s);
      }, o;
    }, e(function(s, o, l) {
      i.reason || (i.reason = new Sr(s, o, l), t(i.reason));
    });
  }
  /**
   * Throws a `CanceledError` if cancellation has been requested.
   */
  throwIfRequested() {
    if (this.reason)
      throw this.reason;
  }
  /**
   * Subscribe to the cancel signal
   */
  subscribe(e) {
    if (this.reason) {
      e(this.reason);
      return;
    }
    this._listeners ? this._listeners.push(e) : this._listeners = [e];
  }
  /**
   * Unsubscribe from the cancel signal
   */
  unsubscribe(e) {
    if (!this._listeners)
      return;
    const t = this._listeners.indexOf(e);
    t !== -1 && this._listeners.splice(t, 1);
  }
  toAbortSignal() {
    const e = new AbortController(), t = (i) => {
      e.abort(i);
    };
    return this.subscribe(t), e.signal.unsubscribe = () => this.unsubscribe(t), e.signal;
  }
  /**
   * Returns an object that contains a new `CancelToken` and a function that, when called,
   * cancels the `CancelToken`.
   */
  static source() {
    let e;
    return {
      token: new dQ(function(r) {
        e = r;
      }),
      cancel: e
    };
  }
};
function aV(n) {
  return function(t) {
    return n.apply(null, t);
  };
}
function cV(n) {
  return v.isObject(n) && n.isAxiosError === !0;
}
const $f = {
  Continue: 100,
  SwitchingProtocols: 101,
  Processing: 102,
  EarlyHints: 103,
  Ok: 200,
  Created: 201,
  Accepted: 202,
  NonAuthoritativeInformation: 203,
  NoContent: 204,
  ResetContent: 205,
  PartialContent: 206,
  MultiStatus: 207,
  AlreadyReported: 208,
  ImUsed: 226,
  MultipleChoices: 300,
  MovedPermanently: 301,
  Found: 302,
  SeeOther: 303,
  NotModified: 304,
  UseProxy: 305,
  Unused: 306,
  TemporaryRedirect: 307,
  PermanentRedirect: 308,
  BadRequest: 400,
  Unauthorized: 401,
  PaymentRequired: 402,
  Forbidden: 403,
  NotFound: 404,
  MethodNotAllowed: 405,
  NotAcceptable: 406,
  ProxyAuthenticationRequired: 407,
  RequestTimeout: 408,
  Conflict: 409,
  Gone: 410,
  LengthRequired: 411,
  PreconditionFailed: 412,
  PayloadTooLarge: 413,
  UriTooLong: 414,
  UnsupportedMediaType: 415,
  RangeNotSatisfiable: 416,
  ExpectationFailed: 417,
  ImATeapot: 418,
  MisdirectedRequest: 421,
  UnprocessableEntity: 422,
  Locked: 423,
  FailedDependency: 424,
  TooEarly: 425,
  UpgradeRequired: 426,
  PreconditionRequired: 428,
  TooManyRequests: 429,
  RequestHeaderFieldsTooLarge: 431,
  UnavailableForLegalReasons: 451,
  InternalServerError: 500,
  NotImplemented: 501,
  BadGateway: 502,
  ServiceUnavailable: 503,
  GatewayTimeout: 504,
  HttpVersionNotSupported: 505,
  VariantAlsoNegotiates: 506,
  InsufficientStorage: 507,
  LoopDetected: 508,
  NotExtended: 510,
  NetworkAuthenticationRequired: 511
};
Object.entries($f).forEach(([n, e]) => {
  $f[e] = n;
});
function OQ(n) {
  const e = new yi(n), t = I1(yi.prototype.request, e);
  return v.extend(t, yi.prototype, e, { allOwnKeys: !0 }), v.extend(t, e, null, { allOwnKeys: !0 }), t.create = function(r) {
    return OQ(Ti(n, r));
  }, t;
}
const _e = OQ(Fs);
_e.Axios = yi;
_e.CanceledError = Sr;
_e.CancelToken = lV;
_e.isCancel = sQ;
_e.VERSION = uQ;
_e.toFormData = xa;
_e.AxiosError = ie;
_e.Cancel = _e.CanceledError;
_e.all = function(e) {
  return Promise.all(e);
};
_e.spread = aV;
_e.isAxiosError = cV;
_e.mergeConfig = Ti;
_e.AxiosHeaders = dt;
_e.formToJSON = (n) => rQ(v.isHTMLForm(n) ? new FormData(n) : n);
_e.getAdapter = fQ.getAdapter;
_e.HttpStatusCode = $f;
_e.default = _e;
const {
  Axios: eB,
  AxiosError: tB,
  CanceledError: nB,
  isCancel: iB,
  CancelToken: rB,
  VERSION: sB,
  all: oB,
  Cancel: lB,
  isAxiosError: aB,
  spread: cB,
  toFormData: hB,
  AxiosHeaders: fB,
  HttpStatusCode: uB,
  formToJSON: dB,
  getAdapter: OB,
  mergeConfig: pB
} = _e, Es = _e.create({
  baseURL: Qi || "http://localhost:5000/api",
  headers: {
    "Content-Type": "application/json"
  },
  // Include credentials (cookies) with every request
  withCredentials: !0
});
Es.interceptors.request.use(
  (n) => n,
  (n) => Promise.reject(n)
);
var hV = /* @__PURE__ */ U('<div class="h-full relative"><div class="absolute top-2 right-4 z-10"><button class="px-4 py-2 bg-blue-600 text-white rounded shadow"></button></div><div class="dark:bg-neutral-900 bg-neutral-100 h-full w-full">'), fV = /* @__PURE__ */ U('<p class="p-4 text-sm text-gray-500">Loading file...'), uV = /* @__PURE__ */ U('<p class="text-red-600 p-4">');
function dV(n) {
  let e, t = null;
  const [i, r] = G(""), [s, o] = G(!0), [l, a] = G(!1), [c, h] = G(""), f = async () => {
    o(!0);
    try {
      const O = new FormData();
      O.append("filePath", n.filePath);
      const p = await Es.post("/file/read", O);
      if (!p.data?.data) throw new Error("Failed to load file");
      const m = p.data.data;
      r(m), u(m);
    } catch (O) {
      h(O.message);
    } finally {
      o(!1);
    }
  }, u = (O) => {
    t && (t.destroy(), t = null);
    const p = n.theme === "light" ? "light" : "dark", m = ue.create({
      doc: O,
      extensions: [SA, TM(n.filePath), ..._M(p), Z.updateListener.of((y) => {
        y.docChanged && r(y.state.doc.toString());
      })]
    });
    t = new Z({
      state: m,
      parent: e
    });
  }, d = async () => {
    a(!0);
    try {
      const O = new FormData();
      if (O.append("filePath", n.filePath), O.append("content", i()), !(await Es.post("/file/write", O)).data.success) throw new Error("Failed to save file");
      alert("File saved successfully.");
    } catch (O) {
      alert("Error saving file: " + O.message);
    } finally {
      a(!1);
    }
  };
  return As(f), Vt(() => {
    f();
  }), Bt(() => {
    t && t.destroy();
  }), (() => {
    var O = hV(), p = O.firstChild, m = p.firstChild, y = p.nextSibling;
    m.$$click = d, I(m, () => l() ? "Saving..." : "Save File"), I(O, (() => {
      var b = bi(() => !!s());
      return () => b() && fV();
    })(), y), I(O, (() => {
      var b = bi(() => !!c());
      return () => b() && (() => {
        var w = uV();
        return I(w, c), w;
      })();
    })(), y);
    var S = e;
    return typeof S == "function" ? an(S, y) : e = y, Pe(() => m.disabled = l()), O;
  })();
}
Ut(["click"]);
var OV = /* @__PURE__ */ U('<div class="cursor-pointer text-blue-600"> '), pV = /* @__PURE__ */ U('<div class="transition-all duration-300 ease-in-out overflow-hidden"><div class="pl-2 border-l border-gray-300">'), mV = /* @__PURE__ */ U("<div class=ml-4>"), gV = /* @__PURE__ */ U('<div class="cursor-pointer hover:underline">📄 '), yV = /* @__PURE__ */ U("<div>Loading...");
const SV = async () => {
  const n = await Es.get("/file/list?directory=./&recursive=true");
  if (console.log(n.data, "res"), !n.data) throw new Error("Failed to load files");
  return n.data;
};
function bV(n) {
  const e = /* @__PURE__ */ new Map();
  for (const i of n)
    console.log(i, "file"), e.set(i.path, {
      ...i,
      children: i.children || []
    });
  const t = [];
  for (const i of e.values()) {
    const r = i.path.split("/");
    if (r.length === 1)
      t.push(i);
    else {
      const s = r.slice(0, -1).join("/"), o = e.get(s);
      o && o.children.push(i);
    }
  }
  return t;
}
const pQ = (n) => {
  const [e, t] = G(!1), i = () => {
    n.file.isDirectory && n.file.children.length > 0 && t(!e());
  };
  return (() => {
    var r = mV();
    return I(r, X(Zt, {
      get when() {
        return n.file.isDirectory;
      },
      get fallback() {
        return (() => {
          var s = gV();
          return s.firstChild, s.$$click = () => n.onSelect(n.file.path), I(s, () => n.file.name, null), s;
        })();
      },
      get children() {
        return [(() => {
          var s = OV(), o = s.firstChild;
          return s.$$click = i, I(s, () => e() ? "📂" : "📁", o), I(s, () => n.file.name, null), s;
        })(), (() => {
          var s = pV(), o = s.firstChild;
          return I(o, X(ol, {
            get each() {
              return n.file.children;
            },
            children: (l) => X(pQ, {
              file: l,
              get onSelect() {
                return n.onSelect;
              }
            })
          })), Pe((l) => {
            var a = e() ? "auto" : "0", c = e() ? 1 : 0, h = e() ? "scaleY(1)" : "scaleY(0.95)";
            return a !== l.e && ((l.e = a) != null ? s.style.setProperty("height", a) : s.style.removeProperty("height")), c !== l.t && ((l.t = c) != null ? s.style.setProperty("opacity", c) : s.style.removeProperty("opacity")), h !== l.a && ((l.a = h) != null ? s.style.setProperty("transform", h) : s.style.removeProperty("transform")), l;
          }, {
            e: void 0,
            t: void 0,
            a: void 0
          }), s;
        })()];
      }
    })), r;
  })();
};
function QV(n) {
  const [e] = ng(SV);
  return X(Zt, {
    get when() {
      return e();
    },
    get fallback() {
      return yV();
    },
    get children() {
      return X(ol, {
        get each() {
          return bV(e());
        },
        children: (t) => X(pQ, {
          file: t,
          get onSelect() {
            return n.onFileSelect;
          }
        })
      });
    }
  });
}
Ut(["click"]);
var xV = /* @__PURE__ */ U('<div class="flex h-screen flex-col bg-white dark:bg-neutral-900 dark:text-white"><div class="flex flex-1 overflow-hidden"><div class="h-full overflow-y-auto border-r border-gray-300 dark:border-neutral-700 p-2"></div><div class="flex-1 h-full overflow-hidden">');
function kV() {
  const [n, e] = G(0), [t, i] = G("./README.md"), [r, s] = G("");
  As(async () => {
    e(window.innerWidth / 4), await o(t());
  });
  const o = async (l) => {
    try {
      const a = new FormData();
      a.append("filePath", l);
      const c = await Es.post("/file/read", a);
      if (!c.data) throw new Error("Failed to load file");
      const h = c.data;
      i(l), s(h.data);
    } catch (a) {
      console.error(`Error loading file "${l}":`, a);
    }
  };
  return (() => {
    var l = xV(), a = l.firstChild, c = a.firstChild, h = c.nextSibling;
    return I(l, X(dr, {}), a), c.style.setProperty("minWidth", "200px"), I(c, X(QV, {
      onFileSelect: o
    })), I(h, X(dV, {
      theme: "dark",
      get filePath() {
        return t();
      },
      get content() {
        return r();
      },
      language: "typescript"
    })), Pe((f) => (f = `${n()}px`) != null ? c.style.setProperty("width", f) : c.style.removeProperty("width")), l;
  })();
}
const wV = () => X(wx, {
  root: (e) => X(Px, {
    get children() {
      return X(qQ, {
        get children() {
          return e.children;
        }
      });
    }
  }),
  get children() {
    return [X(Ln, {
      path: "/",
      component: () => X(Qr, {
        isAuthenticated: !1,
        get children() {
          return X(ev, {});
        }
      })
    }), X(Ln, {
      path: "/dashboard",
      component: () => X(Qr, {
        isAuthenticated: !1,
        get children() {
          return X(Nw, {});
        }
      })
    }), X(Ln, {
      path: "/terminal",
      component: () => X(Qr, {
        isAuthenticated: !1,
        get children() {
          return X(Uw, {});
        }
      })
    }), X(Ln, {
      path: "/settings",
      component: () => X(Qr, {
        isAuthenticated: !1,
        get children() {
          return X(Fw, {});
        }
      })
    }), X(Ln, {
      path: "/profile",
      component: () => X(Qr, {
        isAuthenticated: !1,
        get children() {
          return X(Kw, {});
        }
      })
    }), X(Ln, {
      path: "/editor",
      component: () => X(kV, {})
    }), X(Ln, {
      path: "/logout",
      component: () => X(gP, {})
    }), X(Ln, {
      path: "/login",
      component: () => X(uP, {})
    })];
  }
}), vV = document.getElementById("root");
jQ(() => X(wV, {}), vV);
