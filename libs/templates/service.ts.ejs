import { Injectable, Inject } from '@nestjs/common';
import { Request } from 'express';
import { REQUEST } from '@nestjs/core';
import { CreateJwtUserDto } from '../auth/dto/create-jwt-user.dto';
import { PrismaService } from '../prisma/prisma.service';
import { Create<%= className %>Dto } from './dto/create-<%= folderName %>.dto';
import { Update<%= className %>Dto } from './dto/update-<%= folderName %>.dto';
import { Prisma } from '@prisma/client';
@Injectable()
export class <%= className %>Service {
  constructor(
    private prisma: PrismaService,
    @Inject(REQUEST)
    private readonly request: Request & { user?: CreateJwtUserDto },
  ) {}

  private get userId(): string | undefined {
    return this.request.user?.sub;
  }

  // Handle the 'createdById' dynamically and other properties in create method
  create(data: Create<%= className %>Dto) {
    // Check if the 'createdById' field exists in the provided schema
    const hasCreatedById = data.hasOwnProperty('createdById');

    // Prepare data object for Prisma create call
    const createData: any = {
      ...data,
    };
    // If related 'createdBy' exists in Prisma schema, use nested connect
    if (this.userId) {
      createData.createdBy = {
        connect: { id: this.userId },
      };
      // Optional: remove createdById if it exists to prevent conflict
      delete createData.createdById;
    }


    // Pass the data to Prisma create method
    return this.prisma.<%= fileName %>.create({
      data: createData,
    });
  }
  
  async findAllPaginated(
  where: Prisma.<%= className %>WhereInput = {},
  page = 1,
  pageSize = 10,
  select?: Prisma.<%= className %>Select,
) {
  const skip = (page - 1) * pageSize;
  const take = Number(pageSize); 

  const [items, total] = await this.prisma.$transaction([
    this.prisma.<%= fileName %>.findMany({
      where,
      orderBy: { createdAt: 'desc' },
      skip,
      take,
      ...(select ? { select } : {}),
    }),
    this.prisma.<%= fileName %>.count({ where }),
  ]);

  return {
    items,
    total,
    page,
    pageSize,
    totalPages: Math.ceil(total / pageSize),
  };
}
  
  findAll() {
    return this.prisma.<%= fileName %>.findMany();
  }

  findOne(id: string) {
    return this.prisma.<%= fileName %>.findUnique({ where: { id } });
  }

  update(id: string, data: Update<%= className %>Dto) {
    return this.prisma.<%= fileName %>.update({
      where: { id },
      data,
    });
  }

  remove(id: string) {
    return this.prisma.<%= fileName %>.delete({ where: { id } });
  }
}

