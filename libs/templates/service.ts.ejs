import { Injectable, Inject<% if (isProtected) { %>, ForbiddenException<% } %> } from '@nestjs/common';
import { PrismaService } from '../prisma/prisma.service';
import { Create<%= className %>Dto } from './dto/create-<%= folderName %>.dto';
import { Update<%= className %>Dto } from './dto/update-<%= folderName %>.dto';
import { Prisma<% if (className === 'User') { %>, Role<% } %> } from '@prisma/client';
<% if (className === 'User') { %>
import * as bcrypt from 'bcrypt';
import { CreateJwtUserDto } from '../auth/dto/auth.dto';
<% } else if (isProtected || hasCreatedBy) { %>
import { CreateJwtUserDto } from '../auth/dto/auth.dto';
<% } %>
<% if (hasCreatedBy || isProtected) { %>
import { REQUEST } from '@nestjs/core';
import { Request } from 'express';
<% } %>

@Injectable()
export class <%= className %>Service {
  constructor(
    private prisma: PrismaService,
    <% if (hasCreatedBy || isProtected) { %>@Inject(REQUEST) private readonly request: Request & { user?: CreateJwtUserDto },<% } %>
  ) {}

  <% if (hasCreatedBy || isProtected) { %>
  private get userId(): string | undefined {
    return this.request.user?.sub;
  }
  <% } %>

  create(data: Create<%= className %>Dto) {
    const createData: any = { ...data };

    <% if (hasCreatedBy && className !== 'User') { %>
    const hasCreatedById = data.hasOwnProperty('createdById');
    if (this.userId) {
      createData.createdBy = {
        connect: { id: this.userId },
      };
      if (hasCreatedById) {
        delete createData.createdById;
      }
    }
    <% } %>

    return this.prisma.<%= fileName %>.create({ data: createData });
  }

  async findAllPaginated(
    where: Prisma.<%= className %>WhereInput = {},
    page = 1,
    pageSize = 10,
    select?: Prisma.<%= className %>Select,
  ) {
    const skip = (page - 1) * pageSize;
    const take = Number(pageSize);

    const [items, total] = await this.prisma.$transaction([
      this.prisma.<%= fileName %>.findMany({
        where,
        orderBy: { createdAt: 'desc' },
        skip,
        take,
        ...(select ? { select } : {}),
      }),
      this.prisma.<%= fileName %>.count({ where }),
    ]);

    return {
      items,
      total,
      page,
      pageSize,
      totalPages: Math.ceil(total / pageSize),
    };
  }

  findAll() {
    return this.prisma.<%= fileName %>.findMany();
  }

  findOne(id: string) {
    

    return this.prisma.<%= fileName %>.findUnique(
    <% if (className === 'User') { %>
    {where: { id },
        include: {
          Account: true,
          Session: true,
          Folder: true,
        },
    }
    <% } else { %>
    { where: { id } }
    <% }  %>
    );
  }

  update(id: string, data: Update<%= className %>Dto) {
    return this.prisma.<%= fileName %>.update({
      where: { id },
      data,
    });
  }

  remove(id: string) {
    return this.prisma.<%= fileName %>.delete({ where: { id } });
  }

<% if (className === 'User') { %>
  async createUser(email: string, name: string, phone?: string, hash?: string) {
    return this.prisma.user.create({
      data: {
        email,
        name,
        phone_number: phone,
        role: Role.USER,
        password: hash ? { create: { hash } } : undefined,
      },
    });
  }

  async verifyEmail(userId: string) {
    return this.prisma.user.update({
      where: { id: userId },
      data: { emailVerified: new Date() },
    });
  }

  async validatePassword(password: string, hash: string) {
    return bcrypt.compare(password, hash);
  }

  async hashPassword(password: string): Promise<string> {
    return bcrypt.hash(password, 10);
  }

  findById(userId: string) {
    return this.prisma.user.findUnique({
      where: { id: userId },
      select: {
        id: true,
        email: true,
        name: true,
        role: true,
        phone_number: true,
        createdAt: true,
      },
    });
  }

  async findByEmail(email: string) {
    return this.prisma.user.findUnique({
      where: { email },
      include: {
        password: true,
        Account: true,
      },
    });
  }
<% } %>
}

